using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public object preciseEqualStr(Exchange exchange, object result, object key, object expected)
        {
            return Precise.stringEq(exchange.safeString(result, key), expected);
        }
        public void testSafeTicker()
        {
            var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "sampleexchange" },
            });
            // CASE 1 - by open
            object ticker1 = new Dictionary<string, object>() {
                { "open", 5 },
                { "change", 1 },
            };
            object result1 = exchange.safeTicker(ticker1);
            Assert(preciseEqualStr(exchange, result1, "percentage", "20.0"));
            Assert(preciseEqualStr(exchange, result1, "average", "5.5"));
            Assert(preciseEqualStr(exchange, result1, "close", "6.0"));
            Assert(preciseEqualStr(exchange, result1, "last", "6.0"));
            // CASE 2 - by open
            object ticker2 = new Dictionary<string, object>() {
                { "open", 5 },
                { "percentage", 20 },
            };
            object result2 = exchange.safeTicker(ticker2);
            Assert(preciseEqualStr(exchange, result2, "change", "1.0"));
            Assert(preciseEqualStr(exchange, result2, "average", "5.5"));
            Assert(preciseEqualStr(exchange, result2, "close", "6.0"));
            Assert(preciseEqualStr(exchange, result2, "last", "6.0"));
            // CASE 3 - by close
            object ticker3 = new Dictionary<string, object>() {
                { "close", 6 },
                { "change", 1 },
            };
            object result3 = exchange.safeTicker(ticker3);
            Assert(preciseEqualStr(exchange, result3, "open", "5.0"));
            Assert(preciseEqualStr(exchange, result3, "percentage", "20.0"));
            Assert(preciseEqualStr(exchange, result3, "average", "5.5"));
            Assert(preciseEqualStr(exchange, result3, "last", "6.0"));
            // CASE 4 - by close
            object ticker4 = new Dictionary<string, object>() {
                { "close", 6 },
                { "percentage", 20 },
            };
            object result4 = exchange.safeTicker(ticker4);
            Assert(preciseEqualStr(exchange, result4, "open", "5.0"));
            Assert(preciseEqualStr(exchange, result4, "change", "1.0"));
            Assert(preciseEqualStr(exchange, result4, "average", "5.5"));
            Assert(preciseEqualStr(exchange, result4, "last", "6.0"));
            // CASE 5 - by average
            object ticker5 = new Dictionary<string, object>() {
                { "average", 5.5 },
                { "percentage", 20 },
            };
            object result5 = exchange.safeTicker(ticker5);
            Assert(preciseEqualStr(exchange, result5, "open", "5.0"));
            Assert(preciseEqualStr(exchange, result5, "change", "1.0"));
            Assert(preciseEqualStr(exchange, result5, "close", "6.0"));
            Assert(preciseEqualStr(exchange, result5, "last", "6.0"));
            // CASE 6
            object ticker6 = new Dictionary<string, object>() {
                { "average", 5.5 },
                { "change", 1 },
            };
            object result6 = exchange.safeTicker(ticker6);
            Assert(preciseEqualStr(exchange, result6, "open", "5.0"));
            Assert(preciseEqualStr(exchange, result6, "percentage", "20.0"));
            Assert(preciseEqualStr(exchange, result6, "close", "6.0"));
            Assert(preciseEqualStr(exchange, result6, "last", "6.0"));
            // CASE 7 - by open and close
            object ticker7 = new Dictionary<string, object>() {
                { "open", 5 },
                { "close", 6 },
            };
            object result7 = exchange.safeTicker(ticker7);
            Assert(preciseEqualStr(exchange, result7, "change", "1.0"));
            Assert(preciseEqualStr(exchange, result7, "percentage", "20.0"));
            Assert(preciseEqualStr(exchange, result7, "average", "5.5"));
            Assert(preciseEqualStr(exchange, result7, "last", "6.0"));
            // CASE 8 - full ticker
            object ticker8 = new Dictionary<string, object>() {
                { "open", 5 },
                { "close", 6 },
                { "last", 6 },
                { "high", 6.5 },
                { "low", 4.5 },
                { "average", 5.5 },
                { "bid", 5.9 },
                { "bidVolume", 100 },
                { "ask", 6.1 },
                { "askVolume", 200 },
                { "change", 1 },
                { "percentage", 20 },
                { "vwap", 5.75 },
                { "baseVolume", 1000 },
                { "quoteVolume", 5750 },
                { "previousClose", 4.9 },
                { "indexPrice", 5.8 },
                { "markPrice", 5.9 },
                { "info", new Dictionary<string, object>() {} },
            };
            object result8 = exchange.safeTicker(ticker8);
            Assert(preciseEqualStr(exchange, result8, "open", "5.0"));
            Assert(preciseEqualStr(exchange, result8, "high", "6.5"));
            Assert(preciseEqualStr(exchange, result8, "low", "4.5"));
            Assert(preciseEqualStr(exchange, result8, "close", "6.0"));
            Assert(preciseEqualStr(exchange, result8, "last", "6.0"));
            Assert(preciseEqualStr(exchange, result8, "change", "1.0"));
            Assert(preciseEqualStr(exchange, result8, "percentage", "20.0"));
            Assert(preciseEqualStr(exchange, result8, "average", "5.5"));
            Assert(preciseEqualStr(exchange, result8, "bid", "5.9"));
            Assert(preciseEqualStr(exchange, result8, "bidVolume", "100.0"));
            Assert(preciseEqualStr(exchange, result8, "ask", "6.1"));
            Assert(preciseEqualStr(exchange, result8, "askVolume", "200.0"));
            Assert(preciseEqualStr(exchange, result8, "vwap", "5.75"));
            Assert(preciseEqualStr(exchange, result8, "baseVolume", "1000.0"));
            Assert(preciseEqualStr(exchange, result8, "quoteVolume", "5750.0"));
            Assert(preciseEqualStr(exchange, result8, "previousClose", "4.9"));
            Assert(preciseEqualStr(exchange, result8, "indexPrice", "5.8"));
            Assert(preciseEqualStr(exchange, result8, "markPrice", "5.9"));
            Assert(!isEqual(getValue(result8, "info"), null));
        }
}