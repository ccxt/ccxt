using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public void testSafeMethods()
        {
            var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "regirock" },
            });
            object inputDict = new Dictionary<string, object>() {
                { "i", 1 },
                { "f", 0.123 },
                { "bool", true },
                { "list", new List<object>() {1, 2, 3} },
                { "dict", new Dictionary<string, object>() {
                    { "a", 1 },
                } },
                { "str", "heLlo" },
                { "strNumber", "3" },
            };
            object inputList = new List<object>() {"Hi", 2};
            object compareDict = new Dictionary<string, object>() {
                { "a", 1 },
            };
            object compareList = new List<object>() {1, 2, 3};
            object factor = 10;
            // safeValue
            Assert(isEqual(exchange.safeValue(inputDict, "i"), 1));
            Assert(isEqual(exchange.safeValue(inputDict, "f"), 0.123));
            Assert(isEqual(exchange.safeValue(inputDict, "bool"), true));
            Assert(equals(exchange.safeValue(inputDict, "list"), compareList));
            object dictObject = exchange.safeValue(inputDict, "dict");
            Assert(equals(dictObject, compareDict));
            Assert(isEqual(exchange.safeValue(inputDict, "str"), "heLlo"));
            Assert(isEqual(exchange.safeValue(inputDict, "strNumber"), "3"));
            Assert(isEqual(exchange.safeValue(inputList, 0), "Hi"));
            // safeValue2
            Assert(isEqual(exchange.safeValue2(inputDict, "a", "i"), 1));
            Assert(isEqual(exchange.safeValue2(inputDict, "a", "f"), 0.123));
            Assert(isEqual(exchange.safeValue2(inputDict, "a", "bool"), true));
            Assert(equals(exchange.safeValue2(inputDict, "a", "list"), compareList));
            dictObject = exchange.safeValue2(inputDict, "a", "dict");
            Assert(equals(dictObject, compareDict));
            Assert(isEqual(exchange.safeValue2(inputDict, "a", "str"), "heLlo"));
            Assert(isEqual(exchange.safeValue2(inputDict, "a", "strNumber"), "3"));
            Assert(isEqual(exchange.safeValue2(inputList, 2, 0), "Hi"));
            // safeValueN
            Assert(isEqual(exchange.safeValueN(inputDict, new List<object>() {"a", "b", "i"}), 1));
            Assert(isEqual(exchange.safeValueN(inputDict, new List<object>() {"a", "b", "f"}), 0.123));
            Assert(isEqual(exchange.safeValueN(inputDict, new List<object>() {"a", "b", "bool"}), true));
            Assert(equals(exchange.safeValueN(inputDict, new List<object>() {"a", "b", "list"}), compareList));
            dictObject = exchange.safeValueN(inputDict, new List<object>() {"a", "b", "dict"});
            Assert(equals(dictObject, compareDict));
            Assert(isEqual(exchange.safeValueN(inputDict, new List<object>() {"a", "b", "str"}), "heLlo"));
            Assert(isEqual(exchange.safeValueN(inputDict, new List<object>() {"a", "b", "strNumber"}), "3"));
            Assert(isEqual(exchange.safeValueN(inputList, new List<object>() {3, 2, 0}), "Hi"));
            // safeDict
            dictObject = exchange.safeDict(inputDict, "dict");
            Assert(equals(dictObject, compareDict));
            object listObject = exchange.safeDict(inputDict, "list");
            Assert(isEqual(listObject, null));
            Assert(isEqual(exchange.safeDict(inputList, 1), null));
            // safeDict2
            dictObject = exchange.safeDict2(inputDict, "a", "dict");
            Assert(equals(dictObject, compareDict));
            listObject = exchange.safeDict2(inputDict, "a", "list");
            Assert(isEqual(listObject, null));
            // @ts-expect-error
            Assert(isEqual(exchange.safeDict2(inputList, 2, 1), null));
            // safeDictN
            dictObject = exchange.safeDictN(inputDict, new List<object>() {"a", "b", "dict"});
            Assert(equals(dictObject, compareDict));
            listObject = exchange.safeDictN(inputDict, new List<object>() {"a", "b", "list"});
            Assert(isEqual(listObject, null));
            Assert(isEqual(exchange.safeDictN(inputList, new List<object>() {3, 2, 1}), null));
            // safeList
            listObject = exchange.safeList(inputDict, "list");
            Assert(equals(dictObject, compareDict));
            Assert(isEqual(exchange.safeList(inputDict, "dict"), null));
            Assert(isEqual(exchange.safeList(inputList, 1), null));
            // safeList2
            listObject = exchange.safeList2(inputDict, "a", "list");
            Assert(equals(dictObject, compareDict));
            Assert(isEqual(exchange.safeList2(inputDict, "a", "dict"), null));
            // @ts-expect-error
            Assert(isEqual(exchange.safeList2(inputList, 2, 1), null));
            // safeListN
            listObject = exchange.safeListN(inputDict, new List<object>() {"a", "b", "list"});
            Assert(equals(dictObject, compareDict));
            Assert(isEqual(exchange.safeListN(inputDict, new List<object>() {"a", "b", "dict"}), null));
            Assert(isEqual(exchange.safeListN(inputList, new List<object>() {3, 2, 1}), null));
            // safeString
            Assert(isEqual(exchange.safeString(inputDict, "i"), "1"));
            Assert(isEqual(exchange.safeString(inputDict, "f"), "0.123"));
            // Assert (exchange.safeString (inputDict, 'bool') === 'true'); returns True in python and 'true' in js
            Assert(isEqual(exchange.safeString(inputDict, "str"), "heLlo"));
            Assert(isEqual(exchange.safeString(inputDict, "strNumber"), "3"));
            Assert(isEqual(exchange.safeString(inputList, 0), "Hi"));
            // safeString2
            Assert(isEqual(exchange.safeString2(inputDict, "a", "i"), "1"));
            Assert(isEqual(exchange.safeString2(inputDict, "a", "f"), "0.123"));
            Assert(isEqual(exchange.safeString2(inputDict, "a", "str"), "heLlo"));
            Assert(isEqual(exchange.safeString2(inputDict, "a", "strNumber"), "3"));
            Assert(isEqual(exchange.safeString2(inputList, 2, 0), "Hi"));
            // safeStringN
            Assert(isEqual(exchange.safeStringN(inputDict, new List<object>() {"a", "b", "i"}), "1"));
            Assert(isEqual(exchange.safeStringN(inputDict, new List<object>() {"a", "b", "f"}), "0.123"));
            Assert(isEqual(exchange.safeStringN(inputDict, new List<object>() {"a", "b", "str"}), "heLlo"));
            Assert(isEqual(exchange.safeStringN(inputDict, new List<object>() {"a", "b", "strNumber"}), "3"));
            Assert(isEqual(exchange.safeStringN(inputList, new List<object>() {3, 2, 0}), "Hi"));
            // safeStringLower
            Assert(isEqual(exchange.safeStringLower(inputDict, "i"), "1"));
            Assert(isEqual(exchange.safeStringLower(inputDict, "f"), "0.123"));
            Assert(isEqual(exchange.safeStringLower(inputDict, "str"), "hello"));
            Assert(isEqual(exchange.safeStringLower(inputDict, "strNumber"), "3"));
            Assert(isEqual(exchange.safeStringLower(inputList, 0), "hi"));
            // safeStringLower2
            Assert(isEqual(exchange.safeStringLower2(inputDict, "a", "i"), "1"));
            Assert(isEqual(exchange.safeStringLower2(inputDict, "a", "f"), "0.123"));
            Assert(isEqual(exchange.safeStringLower2(inputDict, "a", "str"), "hello"));
            Assert(isEqual(exchange.safeStringLower2(inputDict, "a", "strNumber"), "3"));
            Assert(isEqual(exchange.safeStringLower2(inputList, 2, 0), "hi"));
            // safeStringLowerN
            Assert(isEqual(exchange.safeStringLowerN(inputDict, new List<object>() {"a", "b", "i"}), "1"));
            Assert(isEqual(exchange.safeStringLowerN(inputDict, new List<object>() {"a", "b", "f"}), "0.123"));
            Assert(isEqual(exchange.safeStringLowerN(inputDict, new List<object>() {"a", "b", "str"}), "hello"));
            Assert(isEqual(exchange.safeStringLowerN(inputDict, new List<object>() {"a", "b", "strNumber"}), "3"));
            Assert(isEqual(exchange.safeStringLowerN(inputList, new List<object>() {3, 2, 0}), "hi"));
            // safeStringUpper
            Assert(isEqual(exchange.safeStringUpper(inputDict, "i"), "1"));
            Assert(isEqual(exchange.safeStringUpper(inputDict, "f"), "0.123"));
            Assert(isEqual(exchange.safeStringUpper(inputDict, "str"), "HELLO"));
            Assert(isEqual(exchange.safeStringUpper(inputDict, "strNumber"), "3"));
            Assert(isEqual(exchange.safeStringUpper(inputList, 0), "HI"));
            // safeStringUpper2
            Assert(isEqual(exchange.safeStringUpper2(inputDict, "a", "i"), "1"));
            Assert(isEqual(exchange.safeStringUpper2(inputDict, "a", "f"), "0.123"));
            Assert(isEqual(exchange.safeStringUpper2(inputDict, "a", "str"), "HELLO"));
            Assert(isEqual(exchange.safeStringUpper2(inputDict, "a", "strNumber"), "3"));
            Assert(isEqual(exchange.safeStringUpper2(inputList, 2, 0), "HI"));
            // safeStringUpperN
            Assert(isEqual(exchange.safeStringUpperN(inputDict, new List<object>() {"a", "b", "i"}), "1"));
            Assert(isEqual(exchange.safeStringUpperN(inputDict, new List<object>() {"a", "b", "f"}), "0.123"));
            Assert(isEqual(exchange.safeStringUpperN(inputDict, new List<object>() {"a", "b", "str"}), "HELLO"));
            Assert(isEqual(exchange.safeStringUpperN(inputDict, new List<object>() {"a", "b", "strNumber"}), "3"));
            Assert(isEqual(exchange.safeStringUpperN(inputList, new List<object>() {3, 2, 0}), "HI"));
            // safeInteger
            Assert(isEqual(exchange.safeInteger(inputDict, "i"), 1));
            Assert(isEqual(exchange.safeInteger(inputDict, "f"), 0));
            Assert(isEqual(exchange.safeInteger(inputDict, "strNumber"), 3));
            Assert(isEqual(exchange.safeInteger(inputList, 1), 2));
            // safeInteger2
            Assert(isEqual(exchange.safeInteger2(inputDict, "a", "i"), 1));
            Assert(isEqual(exchange.safeInteger2(inputDict, "a", "f"), 0));
            Assert(isEqual(exchange.safeInteger2(inputDict, "a", "strNumber"), 3));
            Assert(isEqual(exchange.safeInteger2(inputList, 2, 1), 2));
            // safeIntegerN
            Assert(isEqual(exchange.safeIntegerN(inputDict, new List<object>() {"a", "b", "i"}), 1));
            Assert(isEqual(exchange.safeIntegerN(inputDict, new List<object>() {"a", "b", "f"}), 0));
            Assert(isEqual(exchange.safeIntegerN(inputDict, new List<object>() {"a", "b", "strNumber"}), 3));
            Assert(isEqual(exchange.safeIntegerN(inputList, new List<object>() {3, 2, 1}), 2));
            // safeIntegerOmitZero
            Assert(isEqual(exchange.safeIntegerOmitZero(inputDict, "i"), 1));
            Assert(isEqual(exchange.safeIntegerOmitZero(inputDict, "f"), null));
            Assert(isEqual(exchange.safeIntegerOmitZero(inputDict, "strNumber"), 3));
            Assert(isEqual(exchange.safeIntegerOmitZero(inputList, 1), 2));
            // safeIntegerProduct
            Assert(isEqual(exchange.safeIntegerProduct(inputDict, "i", factor), 10));
            Assert(isEqual(exchange.safeIntegerProduct(inputDict, "f", factor), 1)); // NB the result is 1
            Assert(isEqual(exchange.safeIntegerProduct(inputDict, "strNumber", factor), 30));
            Assert(isEqual(exchange.safeIntegerProduct(inputList, 1, factor), 20));
            // safeIntegerProduct2
            Assert(isEqual(exchange.safeIntegerProduct2(inputDict, "a", "i", factor), 10));
            Assert(isEqual(exchange.safeIntegerProduct2(inputDict, "a", "f", factor), 1)); // NB the result is 1
            Assert(isEqual(exchange.safeIntegerProduct2(inputDict, "a", "strNumber", factor), 30));
            Assert(isEqual(exchange.safeIntegerProduct2(inputList, 2, 1, factor), 20));
            // safeIntegerProductN
            Assert(isEqual(exchange.safeIntegerProductN(inputDict, new List<object>() {"a", "b", "i"}, factor), 10));
            Assert(isEqual(exchange.safeIntegerProductN(inputDict, new List<object>() {"a", "b", "f"}, factor), 1)); // NB the result is 1
            Assert(isEqual(exchange.safeIntegerProductN(inputDict, new List<object>() {"a", "b", "strNumber"}, factor), 30));
            Assert(isEqual(exchange.safeIntegerProductN(inputList, new List<object>() {3, 2, 1}, factor), 20));
            // safeTimestamp
            Assert(isEqual(exchange.safeTimestamp(inputDict, "i"), 1000));
            Assert(isEqual(exchange.safeTimestamp(inputDict, "f"), 123));
            Assert(isEqual(exchange.safeTimestamp(inputDict, "strNumber"), 3000));
            Assert(isEqual(exchange.safeTimestamp(inputList, 1), 2000));
            // safeTimestamp2
            Assert(isEqual(exchange.safeTimestamp2(inputDict, "a", "i"), 1000));
            Assert(isEqual(exchange.safeTimestamp2(inputDict, "a", "f"), 123));
            Assert(isEqual(exchange.safeTimestamp2(inputDict, "a", "strNumber"), 3000));
            Assert(isEqual(exchange.safeTimestamp2(inputList, 2, 1), 2000));
            // safeTimestampN
            Assert(isEqual(exchange.safeTimestampN(inputDict, new List<object>() {"a", "b", "i"}), 1000));
            Assert(isEqual(exchange.safeTimestampN(inputDict, new List<object>() {"a", "b", "f"}), 123));
            Assert(isEqual(exchange.safeTimestampN(inputDict, new List<object>() {"a", "b", "strNumber"}), 3000));
            Assert(isEqual(exchange.safeTimestampN(inputList, new List<object>() {3, 2, 1}), 2000));
            // safeFloat
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloat(inputDict, "i"), parseFloat(1)));
            Assert(isEqual(exchange.safeFloat(inputDict, "f"), 0.123));
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloat(inputDict, "strNumber"), parseFloat(3)));
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloat(inputList, 1), parseFloat(2)));
            // safeFloat2
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloat2(inputDict, "a", "i"), parseFloat(1)));
            Assert(isEqual(exchange.safeFloat2(inputDict, "a", "f"), 0.123));
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloat2(inputDict, "a", "strNumber"), parseFloat(3)));
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloat2(inputList, 2, 1), parseFloat(2)));
            // safeFloatN
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloatN(inputDict, new List<object>() {"a", "b", "i"}), parseFloat(1)));
            Assert(isEqual(exchange.safeFloatN(inputDict, new List<object>() {"a", "b", "f"}), 0.123));
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloatN(inputDict, new List<object>() {"a", "b", "strNumber"}), parseFloat(3)));
            // @ts-expect-error
            Assert(isEqual(exchange.safeFloatN(inputList, new List<object>() {3, 2, 1}), parseFloat(2)));
            // safeNumber
            Assert(isEqual(exchange.safeNumber(inputDict, "i"), exchange.parseNumber(1)));
            Assert(isEqual(exchange.safeNumber(inputDict, "f"), exchange.parseNumber(0.123)));
            Assert(isEqual(exchange.safeNumber(inputDict, "strNumber"), exchange.parseNumber(3)));
            Assert(isEqual(exchange.safeNumber(inputList, 1), exchange.parseNumber(2)));
            // safeNumber2
            Assert(isEqual(exchange.safeNumber2(inputDict, "a", "i"), exchange.parseNumber(1)));
            Assert(isEqual(exchange.safeNumber2(inputDict, "a", "f"), exchange.parseNumber(0.123)));
            Assert(isEqual(exchange.safeNumber2(inputDict, "a", "strNumber"), exchange.parseNumber(3)));
            Assert(isEqual(exchange.safeNumber2(inputList, 2, 1), exchange.parseNumber(2)));
            // safeNumberN
            Assert(isEqual(exchange.safeNumberN(inputDict, new List<object>() {"a", "b", "i"}), exchange.parseNumber(1)));
            Assert(isEqual(exchange.safeNumberN(inputDict, new List<object>() {"a", "b", "f"}), exchange.parseNumber(0.123)));
            Assert(isEqual(exchange.safeNumberN(inputDict, new List<object>() {"a", "b", "strNumber"}), exchange.parseNumber(3)));
            Assert(isEqual(exchange.safeNumberN(inputList, new List<object>() {3, 2, 1}), exchange.parseNumber(2)));
            // safeBool
            Assert(isEqual(exchange.safeBool(inputDict, "bool"), true));
            Assert(isEqual(exchange.safeBool(inputList, 1), null));
            // safeBool2
            Assert(isEqual(exchange.safeBool2(inputDict, "a", "bool"), true));
            Assert(isEqual(exchange.safeBool2(inputList, 2, 1), null));
            // safeBoolN
            Assert(isEqual(exchange.safeBoolN(inputDict, new List<object>() {"a", "b", "bool"}), true));
            Assert(isEqual(exchange.safeBoolN(inputList, new List<object>() {3, 2, 1}), null));
        }
}