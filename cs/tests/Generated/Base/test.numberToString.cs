using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public void testNumberToString()
        {
            var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "regirock" },
            });
            // ----------------------------------------------------------------------------
            // numberToString
            Assert(isEqual(exchange.numberToString(-7.8e-7), "-0.00000078"));
            Assert(isEqual(exchange.numberToString(7.8e-7), "0.00000078"));
            Assert(isEqual(exchange.numberToString(-0.0000017805), "-0.0000017805"));
            Assert(isEqual(exchange.numberToString(0.0000017805), "0.0000017805"));
            Assert(isEqual(exchange.numberToString(-7.0005e+27), "-7000500000000000000000000000"));
            Assert(isEqual(exchange.numberToString(7.0005e+27), "7000500000000000000000000000"));
            Assert(isEqual(exchange.numberToString(-7.9e+27), "-7900000000000000000000000000"));
            Assert(isEqual(exchange.numberToString(7e+27), "7000000000000000000000000000"));
            Assert(isEqual(exchange.numberToString(7.9e+27), "7900000000000000000000000000"));
            Assert(isEqual(exchange.numberToString(-12.345), "-12.345"));
            Assert(isEqual(exchange.numberToString(12.345), "12.345"));
            Assert(isEqual(exchange.numberToString(0), "0"));
            Assert(isEqual(exchange.numberToString(7.35946e+21), "7359460000000000000000"));
            Assert(isEqual(exchange.numberToString(1e-8), "0.00000001"));
            Assert(isEqual(exchange.numberToString(1e-7), "0.0000001"));
            Assert(isEqual(exchange.numberToString(-1e-7), "-0.0000001"));
        }
}