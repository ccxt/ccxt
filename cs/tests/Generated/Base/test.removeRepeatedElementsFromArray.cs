using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public void testRemoveRepeatedElementsFromArray()
        {
            var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "sampleexchange" },
            });
            // CASE 1: by id
            object array1 = new List<object>() {new Dictionary<string, object>() {
            { "id", "a" },
            { "timestamp", 1 },
            { "uniq", "x1" },
        }, new Dictionary<string, object>() {
            { "id", "b" },
            { "timestamp", 2 },
            { "uniq", "x2" },
        }, new Dictionary<string, object>() {
            { "id", "a" },
            { "timestamp", 3 },
            { "uniq", "x3" },
        }, new Dictionary<string, object>() {
            { "id", "c" },
            { "timestamp", 1 },
            { "uniq", "x4" },
        }};
            object res1 = exchange.removeRepeatedElementsFromArray(array1, false);
            object res1Length = getArrayLength(res1);
            Assert(isEqual(res1Length, 3));
            Assert(isEqual(getValue(getValue(res1, 0), "uniq"), "x1"));
            Assert(isEqual(getValue(getValue(res1, 1), "uniq"), "x2"));
            Assert(isEqual(getValue(getValue(res1, 2), "uniq"), "x4"));
            // CASE 2: by timestamp
            object array2 = new List<object>() {new Dictionary<string, object>() {
            { "id", null },
            { "timestamp", 1 },
            { "uniq", "x1" },
        }, new Dictionary<string, object>() {
            { "id", null },
            { "timestamp", 2 },
            { "uniq", "x2" },
        }, new Dictionary<string, object>() {
            { "id", null },
            { "timestamp", 1 },
            { "uniq", "x3" },
        }, new Dictionary<string, object>() {
            { "id", null },
            { "timestamp", 3 },
            { "uniq", "x4" },
        }};
            object res2 = exchange.removeRepeatedElementsFromArray(array2, true);
            object res2Length = getArrayLength(res2);
            Assert(isEqual(res2Length, 3));
            Assert(isEqual(getValue(getValue(res2, 0), "uniq"), "x1"));
            Assert(isEqual(getValue(getValue(res2, 1), "uniq"), "x2"));
            Assert(isEqual(getValue(getValue(res2, 2), "uniq"), "x4"));
            // CASE 3: by timestamp index (used in ohlcv)
            object array3 = new List<object>() {new List<object>() {555, 1, 1, "x1"}, new List<object>() {666, 1, 1, "x2"}, new List<object>() {555, 1, 1, "x3"}};
            object res3 = exchange.removeRepeatedElementsFromArray(array3, true);
            Assert(isEqual(getArrayLength(res3), 2));
            Assert(isEqual(getValue(getValue(res3, 0), 3), "x1"));
            Assert(isEqual(getValue(getValue(res3, 1), 3), "x2"));
        }
}