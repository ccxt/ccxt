using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public void testExchangeConfig()
        {
            object cost = new Dictionary<string, object>() {
                { "min", 0.001 },
                { "max", 1000 },
            };
            object precision = new Dictionary<string, object>() {
                { "amount", 0.001 },
                { "price", 0.000001 },
                { "cost", null },
                { "base", null },
                { "quote", null },
            };
            object markets = new Dictionary<string, object>() {
                { "ETH/BTC", new Dictionary<string, object>() {
                    { "id", "ETH_BTC" },
                    { "symbol", "ETH/BTC" },
                    { "limits", new Dictionary<string, object>() {
                        { "cost", cost },
                    } },
                    { "precision", precision },
                    { "spot", true },
                } },
            };
            try
            {
                var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                    { "id", "sampleexchange" },
                    { "markets", markets },
                });
                testSharedMethods.AssertDeepEqual(exchange, null, "testExchangeConfigExtension", getValue(getValue(getValue(exchange.markets, "ETH/BTC"), "limits"), "cost"), cost);
                testSharedMethods.AssertDeepEqual(exchange, null, "testExchangeConfigExtension", getValue(getValue(exchange.markets, "ETH/BTC"), "precision"), precision);
                testSharedMethods.AssertDeepEqual(exchange, null, "testExchangeConfigExtension", getValue(getValue(exchange.markets, "ETH/BTC"), "symbol"), "ETH/BTC");
                // check if constructor correctly sets
                var exchange2 = new ccxt.Exchange(new Dictionary<string, object>() {
                    { "id", "sampleexchange2" },
                });
                exchange2.setMarkets(markets);
                testSharedMethods.AssertDeepEqual(exchange, null, "testExchangeConfigExtension", getValue(exchange.markets, "ETH/BTC"), getValue(exchange2.markets, "ETH/BTC"));
            } catch(Exception e)
            {
                // skip c# , todo
                if (isTrue(isTrue(isTrue((((object)e).ToString()).Contains("BaseTest.Assert")) || isTrue((((object)e).ToString()).Contains("at System."))) || isTrue((((object)e).ToString()).Contains("at ccxt.Exchange."))))
                {
                    return;
                } else
                {
                    throw e;
                }
            }
        }
}