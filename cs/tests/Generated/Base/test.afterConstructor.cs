using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public void helperTestInitThrottler()
        {
            var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "sampleexchange" },
                { "rateLimit", 10.8 },
            });
            // todo: Assert (exchange.MAX_VALUE !== undefined);
            object tokenBucket = exchange.getProperty(exchange, "tokenBucket"); // trick for uncamelcase transpilation
            if (isTrue(isEqual(tokenBucket, null)))
            {
                tokenBucket = exchange.getProperty(exchange, "TokenBucket");
            }
            Assert(!isEqual(tokenBucket, null));
            Assert("GO_SKIP_START");
            object rateLimit = exchange.getProperty(exchange, "rateLimit");
            Assert(isEqual(rateLimit, 10.8));
            Assert(isEqual(getValue(tokenBucket, "delay"), 0.001));
            Assert(isEqual(getValue(tokenBucket, "refillRate"), divide(1, rateLimit)));
            Assert("GO_SKIP_END");
            // fix decimal/integer issues across langs
            Assert(exchange.inArray(getValue(tokenBucket, "capacity"), new List<object>() {1, 1}));
            object cost = exchange.parseToNumeric(exchange.safeString2(tokenBucket, "cost", "defaultCost")); // python sync, todo fix
            Assert(exchange.inArray(cost, new List<object>() {1, 1}));
            Assert(!isTrue((inOp(tokenBucket, "maxCapacity"))) || isTrue(exchange.inArray(getValue(tokenBucket, "maxCapacity"), new List<object>() {1000, 1000})));
        }
        public void helperTestSandboxState(Exchange exchange, object shouldBeEnabled = null)
        {
            shouldBeEnabled ??= true;
            Assert(!isEqual(exchange.urls, null));
            Assert(inOp(exchange.urls, "test"));
            Assert("GO_SKIP_START");
            object isSandboxModeEnabled = exchange.getProperty(exchange, "isSandboxModeEnabled");
            if (isTrue(shouldBeEnabled))
            {
                Assert(isSandboxModeEnabled);
                Assert(isEqual(getValue(getValue(exchange.urls, "api"), "public"), "https://example.org"));
                Assert(isEqual(getValue(getValue(exchange.urls, "apiBackup"), "public"), "https://example.com"));
            } else
            {
                Assert(!isTrue(isSandboxModeEnabled));
                Assert(isEqual(getValue(getValue(exchange.urls, "api"), "public"), "https://example.com"));
                Assert(isEqual(getValue(getValue(exchange.urls, "test"), "public"), "https://example.org"));
            }
            Assert("GO_SKIP_END");
        }
        public void helperTestInitSandbox()
        {
            // todo: sandbox for real exchanges
            object opts = new Dictionary<string, object>() {
                { "id", "sampleexchange" },
                { "options", new Dictionary<string, object>() {
                    { "sandbox", false },
                } },
                { "urls", new Dictionary<string, object>() {
                    { "api", new Dictionary<string, object>() {
                        { "public", "https://example.com" },
                    } },
                    { "test", new Dictionary<string, object>() {
                        { "public", "https://example.org" },
                    } },
                } },
            };
            //
            // CASE A: when sandbox is not enabled
            //
            var exchange3 = new ccxt.Exchange(opts);
            helperTestSandboxState(exchange3, false);
            exchange3.setSandboxMode(true);
            helperTestSandboxState(exchange3, true);
            //
            // CASE B: when sandbox is enabled
            //
            ((IDictionary<string,object>)getValue(opts, "options"))["sandbox"] = true;
            var exchange4 = new ccxt.Exchange(opts);
            helperTestSandboxState(exchange4, true);
            exchange4.setSandboxMode(false);
            helperTestSandboxState(exchange4, false);
        }
        public void helperTestInitMarket()
        {
            // ############# markets ############# //
            object sampleMarket = new Dictionary<string, object>() {
                { "id", "BtcUsd" },
                { "symbol", "BTC/USD" },
                { "base", "BTC" },
                { "quote", "USD" },
                { "baseId", "Btc" },
                { "quoteId", "Usd" },
                { "type", "spot" },
                { "spot", true },
            };
            var exchange2 = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "sampleexchange" },
                { "markets", new Dictionary<string, object>() {
                    { "BTC/USD", sampleMarket },
                } },
            });
            Assert(!isEqual(getValue(exchange2.markets, "BTC/USD"), null));
        }
        public void testAfterConstructor()
        {
            helperTestInitThrottler();
            helperTestInitSandbox();
            helperTestInitMarket();
        }
}