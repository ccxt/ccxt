using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
        public void testAfterConstructor()
        {
            var exchange = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "sampleexchange" },
                { "rateLimit", 10.8 },
            });
            // todo: Assert (exchange.MAX_VALUE !== undefined);
            // ############# throttler ############# //
            object tockenBucket = exchange.getProperty(exchange, "tokenBucket"); // trick for uncamelcase transpilation
            object rateLimit = exchange.getProperty(exchange, "rateLimit");
            Assert(isEqual(rateLimit, 10.8));
            Assert(!isEqual(tockenBucket, null));
            Assert(isEqual(getValue(tockenBucket, "delay"), 0.001));
            Assert(isEqual(getValue(tockenBucket, "refillRate"), divide(1, rateLimit)));
            // fix decimal/integer issues across langs
            Assert(exchange.inArray(getValue(tockenBucket, "capacity"), new List<object>() {1, 1}));
            Assert(exchange.inArray(getValue(tockenBucket, "cost"), new List<object>() {1, 1}));
            Assert(exchange.inArray(getValue(tockenBucket, "maxCapacity"), new List<object>() {1000, 1000}));
            // todo: Assert (exchange.throttler !== undefined);
            // todo: add after change Assertion
            // todo: add initial tockenbtucket test
            // ############# markets ############# //
            object sampleMarket = new Dictionary<string, object>() {
                { "id", "BtcUsd" },
                { "symbol", "BTC/USD" },
                { "base", "BTC" },
                { "quote", "USD" },
                { "baseId", "Btc" },
                { "quoteId", "Usd" },
                { "type", "spot" },
                { "spot", true },
            };
            var exchange2 = new ccxt.Exchange(new Dictionary<string, object>() {
                { "id", "sampleexchange" },
                { "markets", new Dictionary<string, object>() {
                    { "BTC/USD", sampleMarket },
                } },
            });
            Assert(!isEqual(getValue(exchange2.markets, "BTC/USD"), null));
            Assert("GO_SKIP_START");
            try
            {
                var exchange3 = new ccxt.Exchange(new Dictionary<string, object>() {
                    { "id", "sampleexchange" },
                    { "options", new Dictionary<string, object>() {
                        { "sandbox", true },
                    } },
                });
                // todo: some extra things should be checked in "catch" but atm skip complexity
                Assert(!isEqual(exchange3.urls, null));
                Assert(!isEqual(getValue(exchange3.urls, "test"), null));
                object isSandboxModeEnabled = exchange3.getProperty(exchange3, "isSandboxModeEnabled");
                Assert(isSandboxModeEnabled);
            } catch(Exception e)
            {
                var exchange3 = new ccxt.Exchange(new Dictionary<string, object>() {
                    { "id", "sampleexchange" },
                });
                // if exception was thrown, it should only happen if 'test' was not in urls
                Assert(isTrue(isEqual(exchange3.urls, null)) || !isTrue((inOp(exchange3.urls, "test"))));
            }
            Assert("GO_SKIP_END");
        }
}