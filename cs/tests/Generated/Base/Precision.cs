using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class BaseTest
{
    public void PrecisionTests()
    {
        // ----------------------------------------------------------------------------
        // numberToString
        Assert(isEqual(numberToString(-7.8e-7), "-0.00000078"));
        Assert(isEqual(numberToString(7.8e-7), "0.00000078"));
        Assert(isEqual(numberToString(-0.0000017805), "-0.0000017805"));
        Assert(isEqual(numberToString(0.0000017805), "0.0000017805"));
        Assert(isEqual(numberToString(-7.0005e+27), "-7000500000000000000000000000"));
        Assert(isEqual(numberToString(7.0005e+27), "7000500000000000000000000000"));
        Assert(isEqual(numberToString(-7.9e+27), "-7900000000000000000000000000"));
        Assert(isEqual(numberToString(7e+27), "7000000000000000000000000000"));
        Assert(isEqual(numberToString(7.9e+27), "7900000000000000000000000000"));
        Assert(isEqual(numberToString(-12.345), "-12.345"));
        Assert(isEqual(numberToString(12.345), "12.345"));
        Assert(isEqual(numberToString(0), "0"));
        Assert(isEqual(numberToString(7.35946e+21), "7359460000000000000000"));
        Assert(isEqual(numberToString(1e-8), "0.00000001"));
        Assert(isEqual(numberToString(1e-7), "0.0000001"));
        Assert(isEqual(numberToString(-1e-7), "-0.0000001"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionTruncationToNDigitsAfterDot
        Assert(isEqual(decimalToPrecision("12.3456000", TRUNCATE, 100, DECIMAL_PLACES), "12.3456"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, 100, DECIMAL_PLACES), "12.3456"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, 4, DECIMAL_PLACES), "12.3456"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, 3, DECIMAL_PLACES), "12.345"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, 2, DECIMAL_PLACES), "12.34"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, 1, DECIMAL_PLACES), "12.3"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, 0, DECIMAL_PLACES), "12"));
        // ['12.3456',    TRUNCATE,  -1, DECIMAL_PLACES,  '10'],   // not yet supported
        // ['123.456',    TRUNCATE,  -2, DECIMAL_PLACES,  '120'],  // not yet supported
        // ['123.456',    TRUNCATE,  -3, DECIMAL_PLACES,  '100'],  // not yet supported
        Assert(isEqual(decimalToPrecision("0.0000001", TRUNCATE, 8, DECIMAL_PLACES), "0.0000001"));
        Assert(isEqual(decimalToPrecision("0.00000001", TRUNCATE, 8, DECIMAL_PLACES), "0.00000001"));
        Assert(isEqual(decimalToPrecision("0.000000000", TRUNCATE, 9, DECIMAL_PLACES, PAD_WITH_ZERO), "0.000000000"));
        Assert(isEqual(decimalToPrecision("0.000000001", TRUNCATE, 9, DECIMAL_PLACES, PAD_WITH_ZERO), "0.000000001"));
        Assert(isEqual(decimalToPrecision("12.3456", TRUNCATE, -1, DECIMAL_PLACES), "10"));
        Assert(isEqual(decimalToPrecision("123.456", TRUNCATE, -1, DECIMAL_PLACES), "120"));
        Assert(isEqual(decimalToPrecision("123.456", TRUNCATE, -2, DECIMAL_PLACES), "100"));
        Assert(isEqual(decimalToPrecision("9.99999", TRUNCATE, -1, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("99.9999", TRUNCATE, -1, DECIMAL_PLACES), "90"));
        Assert(isEqual(decimalToPrecision("99.9999", TRUNCATE, -2, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("0", TRUNCATE, 0, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("-0.9", TRUNCATE, 0, DECIMAL_PLACES), "0"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionTruncationToNSignificantDigits
        Assert(isEqual(decimalToPrecision("0.000123456700", TRUNCATE, 100, SIGNIFICANT_DIGITS), "0.0001234567"));
        Assert(isEqual(decimalToPrecision("0.0001234567", TRUNCATE, 100, SIGNIFICANT_DIGITS), "0.0001234567"));
        Assert(isEqual(decimalToPrecision("0.0001234567", TRUNCATE, 7, SIGNIFICANT_DIGITS), "0.0001234567"));
        Assert(isEqual(decimalToPrecision("0.000123456", TRUNCATE, 6, SIGNIFICANT_DIGITS), "0.000123456"));
        Assert(isEqual(decimalToPrecision("0.000123456", TRUNCATE, 5, SIGNIFICANT_DIGITS), "0.00012345"));
        Assert(isEqual(decimalToPrecision("0.000123456", TRUNCATE, 2, SIGNIFICANT_DIGITS), "0.00012"));
        Assert(isEqual(decimalToPrecision("0.000123456", TRUNCATE, 1, SIGNIFICANT_DIGITS), "0.0001"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 10, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.0000987"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 8, SIGNIFICANT_DIGITS), "123.00009"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 7, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.0000"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 6, SIGNIFICANT_DIGITS), "123"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 5, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.00"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 4, SIGNIFICANT_DIGITS), "123"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 4, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.0"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 3, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 2, SIGNIFICANT_DIGITS), "120"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 1, SIGNIFICANT_DIGITS), "100"));
        Assert(isEqual(decimalToPrecision("123.0000987654", TRUNCATE, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "100"));
        Assert(isEqual(decimalToPrecision("1234", TRUNCATE, 5, SIGNIFICANT_DIGITS), "1234"));
        Assert(isEqual(decimalToPrecision("1234", TRUNCATE, 5, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "1234.0"));
        Assert(isEqual(decimalToPrecision("1234", TRUNCATE, 4, SIGNIFICANT_DIGITS), "1234"));
        Assert(isEqual(decimalToPrecision("1234", TRUNCATE, 4, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "1234"));
        Assert(isEqual(decimalToPrecision("1234.69", TRUNCATE, 0, SIGNIFICANT_DIGITS), "0"));
        Assert(isEqual(decimalToPrecision("1234.69", TRUNCATE, 0, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionRoundingToNDigitsAfterDot
        Assert(isEqual(decimalToPrecision("12.3456000", ROUND, 100, DECIMAL_PLACES), "12.3456"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, 100, DECIMAL_PLACES), "12.3456"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, 4, DECIMAL_PLACES), "12.3456"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, 3, DECIMAL_PLACES), "12.346"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, 2, DECIMAL_PLACES), "12.35"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, 1, DECIMAL_PLACES), "12.3"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, 0, DECIMAL_PLACES), "12"));
        // todo:
        // ['9.999',     ROUND,   3, DECIMAL_PLACES,    NO_PADDING,  '9.999'],
        // ['9.999',     ROUND,   2, DECIMAL_PLACES,    NO_PADDING,  '10'],
        // ['9.999',     ROUND,   2, DECIMAL_PLACES, PAD_WITH_ZERO,  '10.00'],
        // ['99.999',    ROUND,   2, DECIMAL_PLACES, PAD_WITH_ZERO,  '100.00'],
        // ['-99.999',    ROUND,   2, DECIMAL_PLACES, PAD_WITH_ZERO, '-100.00'],
        // ['12.3456',    ROUND,  -1, DECIMAL_PLACES,    NO_PADDING,  '10'],  // not yet supported
        // ['123.456',    ROUND,  -1, DECIMAL_PLACES,    NO_PADDING,  '120'],  // not yet supported
        // ['123.456',    ROUND,  -2, DECIMAL_PLACES,    NO_PADDING,  '100'],  // not yet supported
        // a problematic case in PHP
        Assert(isEqual(decimalToPrecision("10000", ROUND, 6, DECIMAL_PLACES), "10000"));
        Assert(isEqual(decimalToPrecision("0.00003186", ROUND, 8, DECIMAL_PLACES), "0.00003186"));
        Assert(isEqual(decimalToPrecision("12.3456", ROUND, -1, DECIMAL_PLACES), "10"));
        Assert(isEqual(decimalToPrecision("123.456", ROUND, -1, DECIMAL_PLACES), "120"));
        Assert(isEqual(decimalToPrecision("123.456", ROUND, -2, DECIMAL_PLACES), "100"));
        Assert(isEqual(decimalToPrecision("9.99999", ROUND, -1, DECIMAL_PLACES), "10"));
        Assert(isEqual(decimalToPrecision("99.9999", ROUND, -1, DECIMAL_PLACES), "100"));
        Assert(isEqual(decimalToPrecision("99.9999", ROUND, -2, DECIMAL_PLACES), "100"));
        Assert(isEqual(decimalToPrecision("9.999", ROUND, 3, DECIMAL_PLACES), "9.999"));
        Assert(isEqual(decimalToPrecision("9.999", ROUND, 2, DECIMAL_PLACES), "10"));
        Assert(isEqual(decimalToPrecision("9.999", ROUND, 2, DECIMAL_PLACES, PAD_WITH_ZERO), "10.00"));
        Assert(isEqual(decimalToPrecision("99.999", ROUND, 2, DECIMAL_PLACES, PAD_WITH_ZERO), "100.00"));
        Assert(isEqual(decimalToPrecision("-99.999", ROUND, 2, DECIMAL_PLACES, PAD_WITH_ZERO), "-100.00"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionRoundingToNSignificantDigits
        Assert(isEqual(decimalToPrecision("0.000123456700", ROUND, 100, SIGNIFICANT_DIGITS), "0.0001234567"));
        Assert(isEqual(decimalToPrecision("0.0001234567", ROUND, 100, SIGNIFICANT_DIGITS), "0.0001234567"));
        Assert(isEqual(decimalToPrecision("0.0001234567", ROUND, 7, SIGNIFICANT_DIGITS), "0.0001234567"));
        Assert(isEqual(decimalToPrecision("0.000123456", ROUND, 6, SIGNIFICANT_DIGITS), "0.000123456"));
        Assert(isEqual(decimalToPrecision("0.000123456", ROUND, 5, SIGNIFICANT_DIGITS), "0.00012346"));
        Assert(isEqual(decimalToPrecision("0.000123456", ROUND, 4, SIGNIFICANT_DIGITS), "0.0001235"));
        Assert(isEqual(decimalToPrecision("0.00012", ROUND, 2, SIGNIFICANT_DIGITS), "0.00012"));
        Assert(isEqual(decimalToPrecision("0.0001", ROUND, 1, SIGNIFICANT_DIGITS), "0.0001"));
        Assert(isEqual(decimalToPrecision("123.0000987654", ROUND, 7, SIGNIFICANT_DIGITS), "123.0001"));
        Assert(isEqual(decimalToPrecision("123.0000987654", ROUND, 6, SIGNIFICANT_DIGITS), "123"));
        Assert(isEqual(decimalToPrecision("0.00098765", ROUND, 2, SIGNIFICANT_DIGITS), "0.00099"));
        Assert(isEqual(decimalToPrecision("0.00098765", ROUND, 2, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0.00099"));
        Assert(isEqual(decimalToPrecision("0.00098765", ROUND, 1, SIGNIFICANT_DIGITS), "0.001"));
        Assert(isEqual(decimalToPrecision("0.00098765", ROUND, 10, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0.0009876500000"));
        Assert(isEqual(decimalToPrecision("0.098765", ROUND, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0.1"));
        Assert(isEqual(decimalToPrecision("0", ROUND, 0, SIGNIFICANT_DIGITS), "0"));
        Assert(isEqual(decimalToPrecision("-0.123", ROUND, 0, SIGNIFICANT_DIGITS), "0"));
        Assert(isEqual(decimalToPrecision("0.00000044", ROUND, 5, SIGNIFICANT_DIGITS), "0.00000044"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionRoundingToTickSize
        Assert(isEqual(decimalToPrecision("0.000123456700", ROUND, 0.00012, TICK_SIZE), "0.00012"));
        Assert(isEqual(decimalToPrecision("0.0001234567", ROUND, 0.00013, TICK_SIZE), "0.00013"));
        Assert(isEqual(decimalToPrecision("0.0001234567", TRUNCATE, 0.00013, TICK_SIZE), "0"));
        Assert(isEqual(decimalToPrecision("101.000123456700", ROUND, 100, TICK_SIZE), "100"));
        Assert(isEqual(decimalToPrecision("0.000123456700", ROUND, 100, TICK_SIZE), "0"));
        Assert(isEqual(decimalToPrecision("165", TRUNCATE, 110, TICK_SIZE), "110"));
        Assert(isEqual(decimalToPrecision("3210", TRUNCATE, 1110, TICK_SIZE), "2220"));
        Assert(isEqual(decimalToPrecision("165", ROUND, 110, TICK_SIZE), "220"));
        Assert(isEqual(decimalToPrecision("0.000123456789", ROUND, 1.2e-7, TICK_SIZE), "0.00012348"));
        Assert(isEqual(decimalToPrecision("0.000123456789", TRUNCATE, 1.2e-7, TICK_SIZE), "0.00012336"));
        Assert(isEqual(decimalToPrecision("0.000273398", ROUND, 1e-7, TICK_SIZE), "0.0002734"));
        Assert(isEqual(decimalToPrecision("0.00005714", TRUNCATE, 1e-8, TICK_SIZE), "0.00005714"));
        // this line causes problems in JS, fix with Precise
        // Assert (decimalToPrecision ('0.0000571495257361', TRUNCATE, 0.00000001, TICK_SIZE) === '0.00005714');
        Assert(isEqual(decimalToPrecision("0.01", ROUND, 0.0001, TICK_SIZE, PAD_WITH_ZERO), "0.0100"));
        Assert(isEqual(decimalToPrecision("0.01", TRUNCATE, 0.0001, TICK_SIZE, PAD_WITH_ZERO), "0.0100"));
        Assert(isEqual(decimalToPrecision("-0.000123456789", ROUND, 1.2e-7, TICK_SIZE), "-0.00012348"));
        Assert(isEqual(decimalToPrecision("-0.000123456789", TRUNCATE, 1.2e-7, TICK_SIZE), "-0.00012336"));
        Assert(isEqual(decimalToPrecision("-165", TRUNCATE, 110, TICK_SIZE), "-110"));
        Assert(isEqual(decimalToPrecision("-165", ROUND, 110, TICK_SIZE), "-220"));
        Assert(isEqual(decimalToPrecision("-1650", TRUNCATE, 1100, TICK_SIZE), "-1100"));
        Assert(isEqual(decimalToPrecision("-1650", ROUND, 1100, TICK_SIZE), "-2200"));
        Assert(isEqual(decimalToPrecision("0.0006", TRUNCATE, 0.0001, TICK_SIZE), "0.0006"));
        Assert(isEqual(decimalToPrecision("-0.0006", TRUNCATE, 0.0001, TICK_SIZE), "-0.0006"));
        Assert(isEqual(decimalToPrecision("0.6", TRUNCATE, 0.2, TICK_SIZE), "0.6"));
        Assert(isEqual(decimalToPrecision("-0.6", TRUNCATE, 0.2, TICK_SIZE), "-0.6"));
        Assert(isEqual(decimalToPrecision("1.2", ROUND, 0.4, TICK_SIZE), "1.2"));
        Assert(isEqual(decimalToPrecision("-1.2", ROUND, 0.4, TICK_SIZE), "-1.2"));
        Assert(isEqual(decimalToPrecision("1.2", ROUND, 0.02, TICK_SIZE), "1.2"));
        Assert(isEqual(decimalToPrecision("-1.2", ROUND, 0.02, TICK_SIZE), "-1.2"));
        Assert(isEqual(decimalToPrecision("44", ROUND, 4.4, TICK_SIZE), "44"));
        Assert(isEqual(decimalToPrecision("-44", ROUND, 4.4, TICK_SIZE), "-44"));
        Assert(isEqual(decimalToPrecision("44.00000001", ROUND, 4.4, TICK_SIZE), "44"));
        Assert(isEqual(decimalToPrecision("-44.00000001", ROUND, 4.4, TICK_SIZE), "-44"));
        // https://github.com/ccxt/ccxt/issues/6731
        Assert(isEqual(decimalToPrecision("20", TRUNCATE, 1e-8, TICK_SIZE), "20"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionNegativeNumbers
        Assert(isEqual(decimalToPrecision("-0.123456", TRUNCATE, 5, DECIMAL_PLACES), "-0.12345"));
        Assert(isEqual(decimalToPrecision("-0.123456", ROUND, 5, DECIMAL_PLACES), "-0.12346"));
        // ----------------------------------------------------------------------------
        // decimalToPrecision: without dot / trailing dot
        Assert(isEqual(decimalToPrecision("123", TRUNCATE, 0), "123"));
        Assert(isEqual(decimalToPrecision("123", TRUNCATE, 5, DECIMAL_PLACES), "123"));
        Assert(isEqual(decimalToPrecision("123", TRUNCATE, 5, DECIMAL_PLACES, PAD_WITH_ZERO), "123.00000"));
        Assert(isEqual(decimalToPrecision("123.", TRUNCATE, 0, DECIMAL_PLACES), "123"));
        Assert(isEqual(decimalToPrecision("123.", TRUNCATE, 5, DECIMAL_PLACES, PAD_WITH_ZERO), "123.00000"));
        Assert(isEqual(decimalToPrecision("0.", TRUNCATE, 0), "0"));
        Assert(isEqual(decimalToPrecision("0.", TRUNCATE, 5, DECIMAL_PLACES, PAD_WITH_ZERO), "0.00000"));
        // ----------------------------------------------------------------------------
        // decimalToPrecision: rounding for equidistant digits
        Assert(isEqual(decimalToPrecision("1.44", ROUND, 1, DECIMAL_PLACES), "1.4"));
        Assert(isEqual(decimalToPrecision("1.45", ROUND, 1, DECIMAL_PLACES), "1.5"));
        Assert(isEqual(decimalToPrecision("1.45", ROUND, 0, DECIMAL_PLACES), "1")); // not 2
        // ----------------------------------------------------------------------------
        // negative precision only implemented so far in python
        // pretty useless for decimal applications as anything |x| < 5 === 0
        // NO_PADDING and PAD_WITH_ZERO are ignored
        Assert(isEqual(decimalToPrecision("5", ROUND, -1, DECIMAL_PLACES), "10"));
        Assert(isEqual(decimalToPrecision("4.999", ROUND, -1, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("0.0431531423", ROUND, -1, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("-69.3", ROUND, -1, DECIMAL_PLACES), "-70"));
        Assert(isEqual(decimalToPrecision("5001", ROUND, -4, DECIMAL_PLACES), "10000"));
        Assert(isEqual(decimalToPrecision("4999.999", ROUND, -4, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("69.3", TRUNCATE, -2, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("-69.3", TRUNCATE, -2, DECIMAL_PLACES), "0"));
        Assert(isEqual(decimalToPrecision("69.3", TRUNCATE, -1, SIGNIFICANT_DIGITS), "60"));
        Assert(isEqual(decimalToPrecision("-69.3", TRUNCATE, -1, SIGNIFICANT_DIGITS), "-60"));
        Assert(isEqual(decimalToPrecision("69.3", TRUNCATE, -2, SIGNIFICANT_DIGITS), "0"));
        Assert(isEqual(decimalToPrecision("1602000000000000000000", TRUNCATE, 3, SIGNIFICANT_DIGITS), "1600000000000000000000"));
        // ----------------------------------------------------------------------------
        // decimal_to_precision: stringified precision
        Assert(isEqual(decimalToPrecision("-0.000123456789", ROUND, "0.00000012", TICK_SIZE), "-0.00012348"));
        Assert(isEqual(decimalToPrecision("-0.000123456789", TRUNCATE, "0.00000012", TICK_SIZE), "-0.00012336"));
        Assert(isEqual(decimalToPrecision("-165", TRUNCATE, "110", TICK_SIZE), "-110"));
        Assert(isEqual(decimalToPrecision("-165", ROUND, "110", TICK_SIZE), "-220"));
        // ----------------------------------------------------------------------------
        // testDecimalToPrecisionErrorHandling (todo)
        //
        // throws (() =>
        //     decimalToPrecision ('123456.789', TRUNCATE, -2, DECIMAL_PLACES),
        //         'negative precision is not yet supported')
        //
        // throws (() =>
        //     decimalToPrecision ('foo'),
        //         "invalid number (contains an illegal character 'f')")
        //
        // throws (() =>
        //     decimalToPrecision ('0.01', TRUNCATE, -1, TICK_SIZE),
        //         "TICK_SIZE cant be used with negative numPrecisionDigits")
        // ----------------------------------------------------------------------------
        object w = "-1.123e-6";
        object x = "0.00000002";
        object y = "69696900000";
        object z = "0";
        object a = "1e8";
        Assert(isEqual(Precise.stringMul(x, y), "1393.938"));
        Assert(isEqual(Precise.stringMul(y, x), "1393.938"));
        Assert(isEqual(Precise.stringAdd(x, y), "69696900000.00000002"));
        Assert(isEqual(Precise.stringAdd(y, x), "69696900000.00000002"));
        Assert(isEqual(Precise.stringSub(x, y), "-69696899999.99999998"));
        Assert(isEqual(Precise.stringSub(y, x), "69696899999.99999998"));
        Assert(isEqual(Precise.stringDiv(x, y, 1), "0"));
        Assert(isEqual(Precise.stringDiv(x, y), "0"));
        Assert(isEqual(Precise.stringDiv(x, y, 19), "0.0000000000000000002"));
        Assert(isEqual(Precise.stringDiv(x, y, 20), "0.00000000000000000028"));
        Assert(isEqual(Precise.stringDiv(x, y, 21), "0.000000000000000000286"));
        Assert(isEqual(Precise.stringDiv(x, y, 22), "0.0000000000000000002869"));
        Assert(isEqual(Precise.stringDiv(y, x), "3484845000000000000"));
        Assert(isEqual(Precise.stringMul(x, w), "-0.00000000000002246"));
        Assert(isEqual(Precise.stringMul(w, x), "-0.00000000000002246"));
        Assert(isEqual(Precise.stringAdd(x, w), "-0.000001103"));
        Assert(isEqual(Precise.stringAdd(w, x), "-0.000001103"));
        Assert(isEqual(Precise.stringSub(x, w), "0.000001143"));
        Assert(isEqual(Precise.stringSub(w, x), "-0.000001143"));
        Assert(isEqual(Precise.stringDiv(x, w), "-0.017809439002671415"));
        Assert(isEqual(Precise.stringDiv(w, x), "-56.15"));
        Assert(isEqual(Precise.stringMul(z, w), "0"));
        Assert(isEqual(Precise.stringMul(z, x), "0"));
        Assert(isEqual(Precise.stringMul(z, y), "0"));
        Assert(isEqual(Precise.stringMul(w, z), "0"));
        Assert(isEqual(Precise.stringMul(x, z), "0"));
        Assert(isEqual(Precise.stringMul(y, z), "0"));
        Assert(isEqual(Precise.stringAdd(z, w), "-0.000001123"));
        Assert(isEqual(Precise.stringAdd(z, x), "0.00000002"));
        Assert(isEqual(Precise.stringAdd(z, y), "69696900000"));
        Assert(isEqual(Precise.stringAdd(w, z), "-0.000001123"));
        Assert(isEqual(Precise.stringAdd(x, z), "0.00000002"));
        Assert(isEqual(Precise.stringAdd(y, z), "69696900000"));
        Assert(isEqual(Precise.stringMul(x, a), "2"));
        Assert(isEqual(Precise.stringMul(a, x), "2"));
        Assert(isEqual(Precise.stringMul(y, a), "6969690000000000000"));
        Assert(isEqual(Precise.stringMul(a, y), "6969690000000000000"));
        Assert(isEqual(Precise.stringDiv(y, a), "696.969"));
        Assert(isEqual(Precise.stringDiv(y, a, -1), "690"));
        Assert(isEqual(Precise.stringDiv(y, a, 0), "696"));
        Assert(isEqual(Precise.stringDiv(y, a, 1), "696.9"));
        Assert(isEqual(Precise.stringDiv(y, a, 2), "696.96"));
        Assert(isEqual(Precise.stringDiv(a, y), "0.001434784043479695"));
        Assert(isEqual(Precise.stringAbs("0"), "0"));
        Assert(isEqual(Precise.stringAbs("-0"), "0"));
        Assert(isEqual(Precise.stringAbs("-500.1"), "500.1"));
        Assert(isEqual(Precise.stringAbs("213"), "213"));
        Assert(isEqual(Precise.stringNeg("0"), "0"));
        Assert(isEqual(Precise.stringNeg("-0"), "0"));
        Assert(isEqual(Precise.stringNeg("-500.1"), "500.1"));
        Assert(isEqual(Precise.stringNeg("213"), "-213"));
        Assert(isEqual(Precise.stringMod("57.123", "10"), "7.123"));
        Assert(isEqual(Precise.stringMod("18", "6"), "0"));
        Assert(isEqual(Precise.stringMod("10.1", "0.5"), "0.1"));
        Assert(isEqual(Precise.stringMod("10000000", "5555"), "1000"));
        Assert(isEqual(Precise.stringMod("5550", "120"), "30"));
        Assert(Precise.stringEquals("1.0000", "1"));
        Assert(Precise.stringEquals("-0.0", "0"));
        Assert(Precise.stringEquals("-0.0", "0.0"));
        Assert(Precise.stringEquals("5.534000", "5.5340"));
        Assert(isEqual(Precise.stringMin("1.0000", "2"), "1"));
        Assert(isEqual(Precise.stringMin("2", "1.2345"), "1.2345"));
        Assert(isEqual(Precise.stringMin("3.1415", "-2"), "-2"));
        Assert(isEqual(Precise.stringMin("-3.1415", "-2"), "-3.1415"));
        Assert(isEqual(Precise.stringMin("0.000", "-0.0"), "0"));
        Assert(isEqual(Precise.stringMax("1.0000", "2"), "2"));
        Assert(isEqual(Precise.stringMax("2", "1.2345"), "2"));
        Assert(isEqual(Precise.stringMax("3.1415", "-2"), "3.1415"));
        Assert(isEqual(Precise.stringMax("-3.1415", "-2"), "-2"));
        Assert(isEqual(Precise.stringMax("0.000", "-0.0"), "0"));
        Assert(!isTrue(Precise.stringGt("1.0000", "2")));
        Assert(Precise.stringGt("2", "1.2345"));
        Assert(Precise.stringGt("3.1415", "-2"));
        Assert(!isTrue(Precise.stringGt("-3.1415", "-2")));
        Assert(!isTrue(Precise.stringGt("3.1415", "3.1415")));
        Assert(Precise.stringGt("3.14150000000000000000001", "3.1415"));
        Assert(!isTrue(Precise.stringGe("1.0000", "2")));
        Assert(Precise.stringGe("2", "1.2345"));
        Assert(Precise.stringGe("3.1415", "-2"));
        Assert(!isTrue(Precise.stringGe("-3.1415", "-2")));
        Assert(Precise.stringGe("3.1415", "3.1415"));
        Assert(Precise.stringGe("3.14150000000000000000001", "3.1415"));
        Assert(Precise.stringLt("1.0000", "2"));
        Assert(!isTrue(Precise.stringLt("2", "1.2345")));
        Assert(!isTrue(Precise.stringLt("3.1415", "-2")));
        Assert(Precise.stringLt("-3.1415", "-2"));
        Assert(!isTrue(Precise.stringLt("3.1415", "3.1415")));
        Assert(Precise.stringLt("3.1415", "3.14150000000000000000001"));
        Assert(Precise.stringLe("1.0000", "2"));
        Assert(!isTrue(Precise.stringLe("2", "1.2345")));
        Assert(!isTrue(Precise.stringLe("3.1415", "-2")));
        Assert(Precise.stringLe("-3.1415", "-2"));
        Assert(Precise.stringLe("3.1415", "3.1415"));
        Assert(Precise.stringLe("3.1415", "3.14150000000000000000001"));
    }
}