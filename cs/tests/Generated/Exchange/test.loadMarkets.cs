using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task testLoadMarkets(Exchange exchange, object skippedProperties)
    {
        object method = "loadMarkets";
        object markets = await exchange.loadMarkets();
        assert((exchange.markets is IDictionary<string, object>), ".markets is not an object");
        assert(((exchange.symbols is IList<object>) || (exchange.symbols.GetType().IsGenericType && exchange.symbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))), ".symbols is not an array");
        object symbolsLength = getArrayLength(exchange.symbols);
        object marketKeys = new List<object>(((IDictionary<string,object>)exchange.markets).Keys);
        object marketKeysLength = getArrayLength(marketKeys);
        assert(isGreaterThan(symbolsLength, 0), ".symbols count <= 0 (less than or equal to zero)");
        assert(isGreaterThan(marketKeysLength, 0), ".markets objects keys length <= 0 (less than or equal to zero)");
        assert(isEqual(symbolsLength, marketKeysLength), "number of .symbols is not equal to the number of .markets");
        object marketValues = new List<object>(((IDictionary<string,object>)markets).Values);
        for (object i = 0; isLessThan(i, getArrayLength(marketValues)); postFixIncrement(ref i))
        {
            testMarket(exchange, skippedProperties, method, getValue(marketValues, i));
        }
    }

}