using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task<object> testFetchMarkets(Exchange exchange, object skippedProperties)
    {
        object method = "fetchMarkets";
        object markets = await exchange.fetchMarkets();
        assert((markets is IDictionary<string, object>), add(add(add(add(exchange.id, " "), method), " must return an object. "), exchange.json(markets)));
        object marketValues = new List<object>(((IDictionary<string,object>)markets).Values);
        testSharedMethods.assertNonEmtpyArray(exchange, skippedProperties, method, marketValues);
        for (object i = 0; isLessThan(i, getArrayLength(marketValues)); postFixIncrement(ref i))
        {
            testMarket(exchange, skippedProperties, method, getValue(marketValues, i));
        }
        detectMarketConflicts(exchange, markets);
        return true;
    }
    public static object detectMarketConflicts(Exchange exchange, object marketValues)
    {
        // detect if there are markets with different ids for the same symbol
        object ids = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(marketValues)); postFixIncrement(ref i))
        {
            object market = getValue(marketValues, i);
            object symbol = getValue(market, "symbol");
            if (!isTrue((inOp(ids, symbol))))
            {
                ((IDictionary<string,object>)ids)[(string)symbol] = getValue(market, "id");
            } else
            {
                object isDifferent = !isEqual(getValue(ids, symbol), getValue(market, "id"));
                assert(!isTrue(isDifferent), add(add(add(add(add(add(exchange.id, " fetchMarkets() has different ids for the same symbol: "), symbol), " "), getValue(ids, symbol)), " "), getValue(market, "id")));
            }
        }
        return true;
    }

}