using ccxt;
using ccxt.pro;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task testWatchBidsAsks(Exchange exchange, object skippedProperties, object symbol)
    {
        object withoutSymbol = testWatchBidsAsksHelper(exchange, skippedProperties, null);
        object withSymbol = testWatchBidsAsksHelper(exchange, skippedProperties, new List<object>() {symbol});
        await promiseAll(new List<object>() {withSymbol, withoutSymbol});
    }
    async static public Task testWatchBidsAsksHelper(Exchange exchange, object skippedProperties, object argSymbols, object argParams = null)
    {
        argParams ??= new Dictionary<string, object>();
        object method = "watchBidsAsks";
        object now = exchange.milliseconds();
        object ends = add(now, 15000);
        while (isLessThan(now, ends))
        {
            object response = null;
            try
            {
                response = await exchange.watchBidsAsks(argSymbols, argParams);
            } catch(Exception e)
            {
                // for some exchanges, multi symbol methods might require symbols array to be present, so
                // so, if method throws "arguments-required" exception, we don't fail test, but just skip silently,
                // because tests will make a second call of this method with symbols array
                if (isTrue(isTrue((e is ArgumentsRequired)) && isTrue((isTrue(isEqual(argSymbols, null)) || isTrue(isEqual(getArrayLength(argSymbols), 0))))))
                {
                    // todo: provide random symbols to try
                    return;
                } else if (!isTrue(testSharedMethods.isTemporaryFailure(e)))
                {
                    throw e;
                }
                now = exchange.milliseconds();
                continue;
            }
            assert((response is IDictionary<string, object>), add(add(add(add(add(add(exchange.id, " "), method), " "), exchange.json(argSymbols)), " must return an object. "), exchange.json(response)));
            object values = new List<object>(((IDictionary<string,object>)response).Values);
            object checkedSymbol = null;
            if (isTrue(isTrue(!isEqual(argSymbols, null)) && isTrue(isEqual(getArrayLength(argSymbols), 1))))
            {
                checkedSymbol = getValue(argSymbols, 0);
            }
            testSharedMethods.assertNonEmtpyArray(exchange, skippedProperties, method, values, checkedSymbol);
            for (object i = 0; isLessThan(i, getArrayLength(values)); postFixIncrement(ref i))
            {
                object ticker = getValue(values, i);
                testTicker(exchange, skippedProperties, method, ticker, checkedSymbol);
            }
            now = exchange.milliseconds();
        }
    }

}