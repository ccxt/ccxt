using ccxt;
namespace Tests;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class testMainClass : BaseTest
{
    async static public Task testProxies(Exchange exchange, object skippedProperties)
    {
        await testProxyUrl(exchange, skippedProperties);
        await testHttpProxy(exchange, skippedProperties);
        // 'httpsProxy', 'socksProxy'
        await testProxyForExceptions(exchange, skippedProperties);
    }
    async static public Task testProxyUrl(Exchange exchange, object skippedProperties)
    {
        object method = "proxyUrl";
        object proxyServerIp = "5.75.153.75";
        var proxyUrlhttpProxyhttpsProxysocksProxyVariable = testSharedMethods.removeProxyOptions(exchange, skippedProperties);
        var proxyUrl = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[0];
        var httpProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[1];
        var httpsProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[2];
        var socksProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[3];
        exchange.proxyUrl = add(add("http://", proxyServerIp), ":8090/proxy_url.php?caller=https://ccxt.com&url=");
        object encodedColon = "%3A";
        object encodedSlash = "%2F";
        object ipCheckUrl = add(add(add(add("https", encodedColon), encodedSlash), encodedSlash), "api.ipify.org");
        object response = await exchange.fetch(ipCheckUrl);
        assert(isEqual(response, proxyServerIp), add(add(add(add(add(add(add(exchange.id, " "), method), " test failed. Returned response is "), response), " while it should be \""), proxyServerIp), "\""));
        // reset the instance property
        testSharedMethods.setProxyOptions(exchange, skippedProperties, proxyUrl, httpProxy, httpsProxy, socksProxy);
    }
    async static public Task testHttpProxy(Exchange exchange, object skippedProperties)
    {
        object method = "httpProxy";
        object proxyServerIp = "5.75.153.75";
        var proxyUrlhttpProxyhttpsProxysocksProxyVariable = testSharedMethods.removeProxyOptions(exchange, skippedProperties);
        var proxyUrl = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[0];
        var httpProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[1];
        var httpsProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[2];
        var socksProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[3];
        exchange.httpProxy = add(add("http://", proxyServerIp), ":8002");
        object ipCheckUrl = "https://api.ipify.org/";
        object response = await exchange.fetch(ipCheckUrl);
        assert(isEqual(response, proxyServerIp), add(add(add(add(add(add(add(exchange.id, " "), method), " test failed. Returned response is "), response), " while it should be \""), proxyServerIp), "\""));
        // reset the instance property
        testSharedMethods.setProxyOptions(exchange, skippedProperties, proxyUrl, httpProxy, httpsProxy, socksProxy);
    }
    // with the below method we test out all variations of possible proxy options, so at least 2 of them should be set together, and such cases must throw exception
    async static public Task testProxyForExceptions(Exchange exchange, object skippedProperties)
    {
        object method = "testProxyForExceptions";
        var proxyUrlhttpProxyhttpsProxysocksProxyVariable = testSharedMethods.removeProxyOptions(exchange, skippedProperties);
        var proxyUrl = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[0];
        var httpProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[1];
        var httpsProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[2];
        var socksProxy = ((IList<object>) proxyUrlhttpProxyhttpsProxysocksProxyVariable)[3];
        object possibleOptionsArray = new List<object>() {"proxyUrl", "proxyUrlCallback", "proxy_url", "proxy_url_callback", "httpProxy", "httpProxyCallback", "http_proxy", "http_proxy_callback", "httpsProxy", "httpsProxyCallback", "https_proxy", "https_proxy_callback", "socksProxy", "socksProxyCallback", "socks_proxy", "socks_proxy_callback"};
        for (object i = 0; isLessThan(i, getArrayLength(possibleOptionsArray)); postFixIncrement(ref i))
        {
            for (object j = 0; isLessThan(j, getArrayLength(possibleOptionsArray)); postFixIncrement(ref j))
            {
                if (isTrue(!isEqual(j, i)))
                {
                    object proxyFirst = getValue(possibleOptionsArray, i);
                    object proxySecond = getValue(possibleOptionsArray, j);
                    exchange.setProperty(exchange, proxyFirst, "0.0.0.0"); // actual value does not matter
                    exchange.setProperty(exchange, proxySecond, "0.0.0.0"); // actual value does not matter
                    object exceptionCaught = false;
                    try
                    {
                        await exchange.fetch("http://example.com"); // url does not matter, it will not be called
                    } catch(Exception e)
                    {
                        exceptionCaught = true;
                    }
                    assert(exceptionCaught, add(add(add(add(add(add(add(exchange.id, " "), method), " test failed. No exception was thrown, while "), proxyFirst), " and "), proxySecond), " were set together"));
                    // reset to undefined
                    exchange.setProperty(exchange, proxyFirst, null);
                    exchange.setProperty(exchange, proxySecond, null);
                }
            }
        }
        // reset the instance property
        testSharedMethods.setProxyOptions(exchange, skippedProperties, proxyUrl, httpProxy, httpsProxy, socksProxy);
    }

}