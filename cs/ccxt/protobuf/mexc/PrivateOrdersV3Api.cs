// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: PrivateOrdersV3Api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from PrivateOrdersV3Api.proto</summary>
public static partial class PrivateOrdersV3ApiReflection {

  #region Descriptor
  /// <summary>File descriptor for PrivateOrdersV3Api.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static PrivateOrdersV3ApiReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChhQcml2YXRlT3JkZXJzVjNBcGkucHJvdG8i6AUKElByaXZhdGVPcmRlcnNW",
          "M0FwaRIKCgJpZBgBIAEoCRIQCghjbGllbnRJZBgCIAEoCRINCgVwcmljZRgD",
          "IAEoCRIQCghxdWFudGl0eRgEIAEoCRIOCgZhbW91bnQYBSABKAkSEAoIYXZn",
          "UHJpY2UYBiABKAkSEQoJb3JkZXJUeXBlGAcgASgFEhEKCXRyYWRlVHlwZRgI",
          "IAEoBRIPCgdpc01ha2VyGAkgASgIEhQKDHJlbWFpbkFtb3VudBgKIAEoCRIW",
          "Cg5yZW1haW5RdWFudGl0eRgLIAEoCRIdChBsYXN0RGVhbFF1YW50aXR5GAwg",
          "ASgJSACIAQESGgoSY3VtdWxhdGl2ZVF1YW50aXR5GA0gASgJEhgKEGN1bXVs",
          "YXRpdmVBbW91bnQYDiABKAkSDgoGc3RhdHVzGA8gASgFEhIKCmNyZWF0ZVRp",
          "bWUYECABKAMSEwoGbWFya2V0GBEgASgJSAGIAQESGAoLdHJpZ2dlclR5cGUY",
          "EiABKAVIAogBARIZCgx0cmlnZ2VyUHJpY2UYEyABKAlIA4gBARISCgVzdGF0",
          "ZRgUIAEoBUgEiAEBEhIKBW9jb0lkGBUgASgJSAWIAQESGAoLcm91dGVGYWN0",
          "b3IYFiABKAlIBogBARIVCghzeW1ib2xJZBgXIAEoCUgHiAEBEhUKCG1hcmtl",
          "dElkGBggASgJSAiIAQESHQoQbWFya2V0Q3VycmVuY3lJZBgZIAEoCUgJiAEB",
          "EhcKCmN1cnJlbmN5SWQYGiABKAlICogBAUITChFfbGFzdERlYWxRdWFudGl0",
          "eUIJCgdfbWFya2V0Qg4KDF90cmlnZ2VyVHlwZUIPCg1fdHJpZ2dlclByaWNl",
          "QggKBl9zdGF0ZUIICgZfb2NvSWRCDgoMX3JvdXRlRmFjdG9yQgsKCV9zeW1i",
          "b2xJZEILCglfbWFya2V0SWRCEwoRX21hcmtldEN1cnJlbmN5SWRCDQoLX2N1",
          "cnJlbmN5SWRCOwocY29tLm14Yy5wdXNoLmNvbW1vbi5wcm90b2J1ZkIXUHJp",
          "dmF0ZU9yZGVyc1YzQXBpUHJvdG9IAVABYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::PrivateOrdersV3Api), global::PrivateOrdersV3Api.Parser, new[]{ "Id", "ClientId", "Price", "Quantity", "Amount", "AvgPrice", "OrderType", "TradeType", "IsMaker", "RemainAmount", "RemainQuantity", "LastDealQuantity", "CumulativeQuantity", "CumulativeAmount", "Status", "CreateTime", "Market", "TriggerType", "TriggerPrice", "State", "OcoId", "RouteFactor", "SymbolId", "MarketId", "MarketCurrencyId", "CurrencyId" }, new[]{ "LastDealQuantity", "Market", "TriggerType", "TriggerPrice", "State", "OcoId", "RouteFactor", "SymbolId", "MarketId", "MarketCurrencyId", "CurrencyId" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class PrivateOrdersV3Api : pb::IMessage<PrivateOrdersV3Api>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
  private static readonly pb::MessageParser<PrivateOrdersV3Api> _parser = new pb::MessageParser<PrivateOrdersV3Api>(() => new PrivateOrdersV3Api());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pb::MessageParser<PrivateOrdersV3Api> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::PrivateOrdersV3ApiReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PrivateOrdersV3Api() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PrivateOrdersV3Api(PrivateOrdersV3Api other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    clientId_ = other.clientId_;
    price_ = other.price_;
    quantity_ = other.quantity_;
    amount_ = other.amount_;
    avgPrice_ = other.avgPrice_;
    orderType_ = other.orderType_;
    tradeType_ = other.tradeType_;
    isMaker_ = other.isMaker_;
    remainAmount_ = other.remainAmount_;
    remainQuantity_ = other.remainQuantity_;
    lastDealQuantity_ = other.lastDealQuantity_;
    cumulativeQuantity_ = other.cumulativeQuantity_;
    cumulativeAmount_ = other.cumulativeAmount_;
    status_ = other.status_;
    createTime_ = other.createTime_;
    market_ = other.market_;
    triggerType_ = other.triggerType_;
    triggerPrice_ = other.triggerPrice_;
    state_ = other.state_;
    ocoId_ = other.ocoId_;
    routeFactor_ = other.routeFactor_;
    symbolId_ = other.symbolId_;
    marketId_ = other.marketId_;
    marketCurrencyId_ = other.marketCurrencyId_;
    currencyId_ = other.currencyId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public PrivateOrdersV3Api Clone() {
    return new PrivateOrdersV3Api(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "clientId" field.</summary>
  public const int ClientIdFieldNumber = 2;
  private string clientId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string ClientId {
    get { return clientId_; }
    set {
      clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 3;
  private string price_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Price {
    get { return price_; }
    set {
      price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "quantity" field.</summary>
  public const int QuantityFieldNumber = 4;
  private string quantity_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Quantity {
    get { return quantity_; }
    set {
      quantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 5;
  private string amount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Amount {
    get { return amount_; }
    set {
      amount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avgPrice" field.</summary>
  public const int AvgPriceFieldNumber = 6;
  private string avgPrice_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string AvgPrice {
    get { return avgPrice_; }
    set {
      avgPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "orderType" field.</summary>
  public const int OrderTypeFieldNumber = 7;
  private int orderType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int OrderType {
    get { return orderType_; }
    set {
      orderType_ = value;
    }
  }

  /// <summary>Field number for the "tradeType" field.</summary>
  public const int TradeTypeFieldNumber = 8;
  private int tradeType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TradeType {
    get { return tradeType_; }
    set {
      tradeType_ = value;
    }
  }

  /// <summary>Field number for the "isMaker" field.</summary>
  public const int IsMakerFieldNumber = 9;
  private bool isMaker_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool IsMaker {
    get { return isMaker_; }
    set {
      isMaker_ = value;
    }
  }

  /// <summary>Field number for the "remainAmount" field.</summary>
  public const int RemainAmountFieldNumber = 10;
  private string remainAmount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string RemainAmount {
    get { return remainAmount_; }
    set {
      remainAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remainQuantity" field.</summary>
  public const int RemainQuantityFieldNumber = 11;
  private string remainQuantity_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string RemainQuantity {
    get { return remainQuantity_; }
    set {
      remainQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lastDealQuantity" field.</summary>
  public const int LastDealQuantityFieldNumber = 12;
  private readonly static string LastDealQuantityDefaultValue = "";

  private string lastDealQuantity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string LastDealQuantity {
    get { return lastDealQuantity_ ?? LastDealQuantityDefaultValue; }
    set {
      lastDealQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "lastDealQuantity" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasLastDealQuantity {
    get { return lastDealQuantity_ != null; }
  }
  /// <summary>Clears the value of the "lastDealQuantity" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearLastDealQuantity() {
    lastDealQuantity_ = null;
  }

  /// <summary>Field number for the "cumulativeQuantity" field.</summary>
  public const int CumulativeQuantityFieldNumber = 13;
  private string cumulativeQuantity_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CumulativeQuantity {
    get { return cumulativeQuantity_; }
    set {
      cumulativeQuantity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "cumulativeAmount" field.</summary>
  public const int CumulativeAmountFieldNumber = 14;
  private string cumulativeAmount_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CumulativeAmount {
    get { return cumulativeAmount_; }
    set {
      cumulativeAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 15;
  private int status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "createTime" field.</summary>
  public const int CreateTimeFieldNumber = 16;
  private long createTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public long CreateTime {
    get { return createTime_; }
    set {
      createTime_ = value;
    }
  }

  /// <summary>Field number for the "market" field.</summary>
  public const int MarketFieldNumber = 17;
  private readonly static string MarketDefaultValue = "";

  private string market_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string Market {
    get { return market_ ?? MarketDefaultValue; }
    set {
      market_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "market" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarket {
    get { return market_ != null; }
  }
  /// <summary>Clears the value of the "market" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarket() {
    market_ = null;
  }

  /// <summary>Field number for the "triggerType" field.</summary>
  public const int TriggerTypeFieldNumber = 18;
  private readonly static int TriggerTypeDefaultValue = 0;

  private int triggerType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int TriggerType {
    get { if ((_hasBits0 & 1) != 0) { return triggerType_; } else { return TriggerTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      triggerType_ = value;
    }
  }
  /// <summary>Gets whether the "triggerType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTriggerType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "triggerType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTriggerType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "triggerPrice" field.</summary>
  public const int TriggerPriceFieldNumber = 19;
  private readonly static string TriggerPriceDefaultValue = "";

  private string triggerPrice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string TriggerPrice {
    get { return triggerPrice_ ?? TriggerPriceDefaultValue; }
    set {
      triggerPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "triggerPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasTriggerPrice {
    get { return triggerPrice_ != null; }
  }
  /// <summary>Clears the value of the "triggerPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearTriggerPrice() {
    triggerPrice_ = null;
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 20;
  private readonly static int StateDefaultValue = 0;

  private int state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int State {
    get { if ((_hasBits0 & 2) != 0) { return state_; } else { return StateDefaultValue; } }
    set {
      _hasBits0 |= 2;
      state_ = value;
    }
  }
  /// <summary>Gets whether the "state" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasState {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "state" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearState() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "ocoId" field.</summary>
  public const int OcoIdFieldNumber = 21;
  private readonly static string OcoIdDefaultValue = "";

  private string ocoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string OcoId {
    get { return ocoId_ ?? OcoIdDefaultValue; }
    set {
      ocoId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ocoId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasOcoId {
    get { return ocoId_ != null; }
  }
  /// <summary>Clears the value of the "ocoId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearOcoId() {
    ocoId_ = null;
  }

  /// <summary>Field number for the "routeFactor" field.</summary>
  public const int RouteFactorFieldNumber = 22;
  private readonly static string RouteFactorDefaultValue = "";

  private string routeFactor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string RouteFactor {
    get { return routeFactor_ ?? RouteFactorDefaultValue; }
    set {
      routeFactor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "routeFactor" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasRouteFactor {
    get { return routeFactor_ != null; }
  }
  /// <summary>Clears the value of the "routeFactor" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearRouteFactor() {
    routeFactor_ = null;
  }

  /// <summary>Field number for the "symbolId" field.</summary>
  public const int SymbolIdFieldNumber = 23;
  private readonly static string SymbolIdDefaultValue = "";

  private string symbolId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string SymbolId {
    get { return symbolId_ ?? SymbolIdDefaultValue; }
    set {
      symbolId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "symbolId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasSymbolId {
    get { return symbolId_ != null; }
  }
  /// <summary>Clears the value of the "symbolId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearSymbolId() {
    symbolId_ = null;
  }

  /// <summary>Field number for the "marketId" field.</summary>
  public const int MarketIdFieldNumber = 24;
  private readonly static string MarketIdDefaultValue = "";

  private string marketId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MarketId {
    get { return marketId_ ?? MarketIdDefaultValue; }
    set {
      marketId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "marketId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarketId {
    get { return marketId_ != null; }
  }
  /// <summary>Clears the value of the "marketId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarketId() {
    marketId_ = null;
  }

  /// <summary>Field number for the "marketCurrencyId" field.</summary>
  public const int MarketCurrencyIdFieldNumber = 25;
  private readonly static string MarketCurrencyIdDefaultValue = "";

  private string marketCurrencyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string MarketCurrencyId {
    get { return marketCurrencyId_ ?? MarketCurrencyIdDefaultValue; }
    set {
      marketCurrencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "marketCurrencyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasMarketCurrencyId {
    get { return marketCurrencyId_ != null; }
  }
  /// <summary>Clears the value of the "marketCurrencyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearMarketCurrencyId() {
    marketCurrencyId_ = null;
  }

  /// <summary>Field number for the "currencyId" field.</summary>
  public const int CurrencyIdFieldNumber = 26;
  private readonly static string CurrencyIdDefaultValue = "";

  private string currencyId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public string CurrencyId {
    get { return currencyId_ ?? CurrencyIdDefaultValue; }
    set {
      currencyId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "currencyId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool HasCurrencyId {
    get { return currencyId_ != null; }
  }
  /// <summary>Clears the value of the "currencyId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void ClearCurrencyId() {
    currencyId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override bool Equals(object other) {
    return Equals(other as PrivateOrdersV3Api);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public bool Equals(PrivateOrdersV3Api other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (ClientId != other.ClientId) return false;
    if (Price != other.Price) return false;
    if (Quantity != other.Quantity) return false;
    if (Amount != other.Amount) return false;
    if (AvgPrice != other.AvgPrice) return false;
    if (OrderType != other.OrderType) return false;
    if (TradeType != other.TradeType) return false;
    if (IsMaker != other.IsMaker) return false;
    if (RemainAmount != other.RemainAmount) return false;
    if (RemainQuantity != other.RemainQuantity) return false;
    if (LastDealQuantity != other.LastDealQuantity) return false;
    if (CumulativeQuantity != other.CumulativeQuantity) return false;
    if (CumulativeAmount != other.CumulativeAmount) return false;
    if (Status != other.Status) return false;
    if (CreateTime != other.CreateTime) return false;
    if (Market != other.Market) return false;
    if (TriggerType != other.TriggerType) return false;
    if (TriggerPrice != other.TriggerPrice) return false;
    if (State != other.State) return false;
    if (OcoId != other.OcoId) return false;
    if (RouteFactor != other.RouteFactor) return false;
    if (SymbolId != other.SymbolId) return false;
    if (MarketId != other.MarketId) return false;
    if (MarketCurrencyId != other.MarketCurrencyId) return false;
    if (CurrencyId != other.CurrencyId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
    if (Price.Length != 0) hash ^= Price.GetHashCode();
    if (Quantity.Length != 0) hash ^= Quantity.GetHashCode();
    if (Amount.Length != 0) hash ^= Amount.GetHashCode();
    if (AvgPrice.Length != 0) hash ^= AvgPrice.GetHashCode();
    if (OrderType != 0) hash ^= OrderType.GetHashCode();
    if (TradeType != 0) hash ^= TradeType.GetHashCode();
    if (IsMaker != false) hash ^= IsMaker.GetHashCode();
    if (RemainAmount.Length != 0) hash ^= RemainAmount.GetHashCode();
    if (RemainQuantity.Length != 0) hash ^= RemainQuantity.GetHashCode();
    if (HasLastDealQuantity) hash ^= LastDealQuantity.GetHashCode();
    if (CumulativeQuantity.Length != 0) hash ^= CumulativeQuantity.GetHashCode();
    if (CumulativeAmount.Length != 0) hash ^= CumulativeAmount.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (CreateTime != 0L) hash ^= CreateTime.GetHashCode();
    if (HasMarket) hash ^= Market.GetHashCode();
    if (HasTriggerType) hash ^= TriggerType.GetHashCode();
    if (HasTriggerPrice) hash ^= TriggerPrice.GetHashCode();
    if (HasState) hash ^= State.GetHashCode();
    if (HasOcoId) hash ^= OcoId.GetHashCode();
    if (HasRouteFactor) hash ^= RouteFactor.GetHashCode();
    if (HasSymbolId) hash ^= SymbolId.GetHashCode();
    if (HasMarketId) hash ^= MarketId.GetHashCode();
    if (HasMarketCurrencyId) hash ^= MarketCurrencyId.GetHashCode();
    if (HasCurrencyId) hash ^= CurrencyId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void WriteTo(pb::CodedOutputStream output) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    output.WriteRawMessage(this);
  #else
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (ClientId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ClientId);
    }
    if (Price.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Price);
    }
    if (Quantity.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Quantity);
    }
    if (Amount.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Amount);
    }
    if (AvgPrice.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(AvgPrice);
    }
    if (OrderType != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OrderType);
    }
    if (TradeType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(TradeType);
    }
    if (IsMaker != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsMaker);
    }
    if (RemainAmount.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(RemainAmount);
    }
    if (RemainQuantity.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(RemainQuantity);
    }
    if (HasLastDealQuantity) {
      output.WriteRawTag(98);
      output.WriteString(LastDealQuantity);
    }
    if (CumulativeQuantity.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(CumulativeQuantity);
    }
    if (CumulativeAmount.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(CumulativeAmount);
    }
    if (Status != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(Status);
    }
    if (CreateTime != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(CreateTime);
    }
    if (HasMarket) {
      output.WriteRawTag(138, 1);
      output.WriteString(Market);
    }
    if (HasTriggerType) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(TriggerType);
    }
    if (HasTriggerPrice) {
      output.WriteRawTag(154, 1);
      output.WriteString(TriggerPrice);
    }
    if (HasState) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(State);
    }
    if (HasOcoId) {
      output.WriteRawTag(170, 1);
      output.WriteString(OcoId);
    }
    if (HasRouteFactor) {
      output.WriteRawTag(178, 1);
      output.WriteString(RouteFactor);
    }
    if (HasSymbolId) {
      output.WriteRawTag(186, 1);
      output.WriteString(SymbolId);
    }
    if (HasMarketId) {
      output.WriteRawTag(194, 1);
      output.WriteString(MarketId);
    }
    if (HasMarketCurrencyId) {
      output.WriteRawTag(202, 1);
      output.WriteString(MarketCurrencyId);
    }
    if (HasCurrencyId) {
      output.WriteRawTag(210, 1);
      output.WriteString(CurrencyId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (ClientId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ClientId);
    }
    if (Price.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Price);
    }
    if (Quantity.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Quantity);
    }
    if (Amount.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Amount);
    }
    if (AvgPrice.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(AvgPrice);
    }
    if (OrderType != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(OrderType);
    }
    if (TradeType != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(TradeType);
    }
    if (IsMaker != false) {
      output.WriteRawTag(72);
      output.WriteBool(IsMaker);
    }
    if (RemainAmount.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(RemainAmount);
    }
    if (RemainQuantity.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(RemainQuantity);
    }
    if (HasLastDealQuantity) {
      output.WriteRawTag(98);
      output.WriteString(LastDealQuantity);
    }
    if (CumulativeQuantity.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(CumulativeQuantity);
    }
    if (CumulativeAmount.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(CumulativeAmount);
    }
    if (Status != 0) {
      output.WriteRawTag(120);
      output.WriteInt32(Status);
    }
    if (CreateTime != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(CreateTime);
    }
    if (HasMarket) {
      output.WriteRawTag(138, 1);
      output.WriteString(Market);
    }
    if (HasTriggerType) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(TriggerType);
    }
    if (HasTriggerPrice) {
      output.WriteRawTag(154, 1);
      output.WriteString(TriggerPrice);
    }
    if (HasState) {
      output.WriteRawTag(160, 1);
      output.WriteInt32(State);
    }
    if (HasOcoId) {
      output.WriteRawTag(170, 1);
      output.WriteString(OcoId);
    }
    if (HasRouteFactor) {
      output.WriteRawTag(178, 1);
      output.WriteString(RouteFactor);
    }
    if (HasSymbolId) {
      output.WriteRawTag(186, 1);
      output.WriteString(SymbolId);
    }
    if (HasMarketId) {
      output.WriteRawTag(194, 1);
      output.WriteString(MarketId);
    }
    if (HasMarketCurrencyId) {
      output.WriteRawTag(202, 1);
      output.WriteString(MarketCurrencyId);
    }
    if (HasCurrencyId) {
      output.WriteRawTag(210, 1);
      output.WriteString(CurrencyId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(ref output);
    }
  }
  #endif

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (ClientId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
    }
    if (Price.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
    }
    if (Quantity.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Quantity);
    }
    if (Amount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Amount);
    }
    if (AvgPrice.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AvgPrice);
    }
    if (OrderType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrderType);
    }
    if (TradeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TradeType);
    }
    if (IsMaker != false) {
      size += 1 + 1;
    }
    if (RemainAmount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemainAmount);
    }
    if (RemainQuantity.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemainQuantity);
    }
    if (HasLastDealQuantity) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LastDealQuantity);
    }
    if (CumulativeQuantity.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CumulativeQuantity);
    }
    if (CumulativeAmount.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CumulativeAmount);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (CreateTime != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(CreateTime);
    }
    if (HasMarket) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(Market);
    }
    if (HasTriggerType) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TriggerType);
    }
    if (HasTriggerPrice) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(TriggerPrice);
    }
    if (HasState) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(State);
    }
    if (HasOcoId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(OcoId);
    }
    if (HasRouteFactor) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(RouteFactor);
    }
    if (HasSymbolId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(SymbolId);
    }
    if (HasMarketId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketId);
    }
    if (HasMarketCurrencyId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(MarketCurrencyId);
    }
    if (HasCurrencyId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(CurrencyId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(PrivateOrdersV3Api other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.ClientId.Length != 0) {
      ClientId = other.ClientId;
    }
    if (other.Price.Length != 0) {
      Price = other.Price;
    }
    if (other.Quantity.Length != 0) {
      Quantity = other.Quantity;
    }
    if (other.Amount.Length != 0) {
      Amount = other.Amount;
    }
    if (other.AvgPrice.Length != 0) {
      AvgPrice = other.AvgPrice;
    }
    if (other.OrderType != 0) {
      OrderType = other.OrderType;
    }
    if (other.TradeType != 0) {
      TradeType = other.TradeType;
    }
    if (other.IsMaker != false) {
      IsMaker = other.IsMaker;
    }
    if (other.RemainAmount.Length != 0) {
      RemainAmount = other.RemainAmount;
    }
    if (other.RemainQuantity.Length != 0) {
      RemainQuantity = other.RemainQuantity;
    }
    if (other.HasLastDealQuantity) {
      LastDealQuantity = other.LastDealQuantity;
    }
    if (other.CumulativeQuantity.Length != 0) {
      CumulativeQuantity = other.CumulativeQuantity;
    }
    if (other.CumulativeAmount.Length != 0) {
      CumulativeAmount = other.CumulativeAmount;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.CreateTime != 0L) {
      CreateTime = other.CreateTime;
    }
    if (other.HasMarket) {
      Market = other.Market;
    }
    if (other.HasTriggerType) {
      TriggerType = other.TriggerType;
    }
    if (other.HasTriggerPrice) {
      TriggerPrice = other.TriggerPrice;
    }
    if (other.HasState) {
      State = other.State;
    }
    if (other.HasOcoId) {
      OcoId = other.OcoId;
    }
    if (other.HasRouteFactor) {
      RouteFactor = other.RouteFactor;
    }
    if (other.HasSymbolId) {
      SymbolId = other.SymbolId;
    }
    if (other.HasMarketId) {
      MarketId = other.MarketId;
    }
    if (other.HasMarketCurrencyId) {
      MarketCurrencyId = other.MarketCurrencyId;
    }
    if (other.HasCurrencyId) {
      CurrencyId = other.CurrencyId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  public void MergeFrom(pb::CodedInputStream input) {
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    input.ReadRawMessage(this);
  #else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          ClientId = input.ReadString();
          break;
        }
        case 26: {
          Price = input.ReadString();
          break;
        }
        case 34: {
          Quantity = input.ReadString();
          break;
        }
        case 42: {
          Amount = input.ReadString();
          break;
        }
        case 50: {
          AvgPrice = input.ReadString();
          break;
        }
        case 56: {
          OrderType = input.ReadInt32();
          break;
        }
        case 64: {
          TradeType = input.ReadInt32();
          break;
        }
        case 72: {
          IsMaker = input.ReadBool();
          break;
        }
        case 82: {
          RemainAmount = input.ReadString();
          break;
        }
        case 90: {
          RemainQuantity = input.ReadString();
          break;
        }
        case 98: {
          LastDealQuantity = input.ReadString();
          break;
        }
        case 106: {
          CumulativeQuantity = input.ReadString();
          break;
        }
        case 114: {
          CumulativeAmount = input.ReadString();
          break;
        }
        case 120: {
          Status = input.ReadInt32();
          break;
        }
        case 128: {
          CreateTime = input.ReadInt64();
          break;
        }
        case 138: {
          Market = input.ReadString();
          break;
        }
        case 144: {
          TriggerType = input.ReadInt32();
          break;
        }
        case 154: {
          TriggerPrice = input.ReadString();
          break;
        }
        case 160: {
          State = input.ReadInt32();
          break;
        }
        case 170: {
          OcoId = input.ReadString();
          break;
        }
        case 178: {
          RouteFactor = input.ReadString();
          break;
        }
        case 186: {
          SymbolId = input.ReadString();
          break;
        }
        case 194: {
          MarketId = input.ReadString();
          break;
        }
        case 202: {
          MarketCurrencyId = input.ReadString();
          break;
        }
        case 210: {
          CurrencyId = input.ReadString();
          break;
        }
      }
    }
  #endif
  }

  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
  void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
    if ((tag & 7) == 4) {
      // Abort on any end group tag.
      return;
    }
    switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          ClientId = input.ReadString();
          break;
        }
        case 26: {
          Price = input.ReadString();
          break;
        }
        case 34: {
          Quantity = input.ReadString();
          break;
        }
        case 42: {
          Amount = input.ReadString();
          break;
        }
        case 50: {
          AvgPrice = input.ReadString();
          break;
        }
        case 56: {
          OrderType = input.ReadInt32();
          break;
        }
        case 64: {
          TradeType = input.ReadInt32();
          break;
        }
        case 72: {
          IsMaker = input.ReadBool();
          break;
        }
        case 82: {
          RemainAmount = input.ReadString();
          break;
        }
        case 90: {
          RemainQuantity = input.ReadString();
          break;
        }
        case 98: {
          LastDealQuantity = input.ReadString();
          break;
        }
        case 106: {
          CumulativeQuantity = input.ReadString();
          break;
        }
        case 114: {
          CumulativeAmount = input.ReadString();
          break;
        }
        case 120: {
          Status = input.ReadInt32();
          break;
        }
        case 128: {
          CreateTime = input.ReadInt64();
          break;
        }
        case 138: {
          Market = input.ReadString();
          break;
        }
        case 144: {
          TriggerType = input.ReadInt32();
          break;
        }
        case 154: {
          TriggerPrice = input.ReadString();
          break;
        }
        case 160: {
          State = input.ReadInt32();
          break;
        }
        case 170: {
          OcoId = input.ReadString();
          break;
        }
        case 178: {
          RouteFactor = input.ReadString();
          break;
        }
        case 186: {
          SymbolId = input.ReadString();
          break;
        }
        case 194: {
          MarketId = input.ReadString();
          break;
        }
        case 202: {
          MarketCurrencyId = input.ReadString();
          break;
        }
        case 210: {
          CurrencyId = input.ReadString();
          break;
        }
      }
    }
  }
  #endif

}

#endregion


#endregion Designer generated code
