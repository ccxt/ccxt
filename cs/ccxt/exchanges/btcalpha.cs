namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class btcalpha : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "btcalpha" },
            { "name", "BTC-Alpha" },
            { "countries", new List<object>() {"US"} },
            { "version", "v1" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDeposit", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchL2OrderBook", true },
                { "fetchLeverage", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "5m", "5" },
                { "15m", "15" },
                { "30m", "30" },
                { "1h", "60" },
                { "4h", "240" },
                { "1d", "D" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/42625213-dabaa5da-85cf-11e8-8f99-aa8f8f7699f0.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://btc-alpha.com/api" },
                } },
                { "www", "https://btc-alpha.com" },
                { "doc", "https://btc-alpha.github.io/api-docs" },
                { "fees", "https://btc-alpha.com/fees/" },
                { "referral", "https://btc-alpha.com/?r=123788" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"currencies/", "pairs/", "orderbook/{pair_name}", "exchanges/", "charts/{pair}/{type}/chart/", "ticker/"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"wallets/", "orders/own/", "order/{id}/", "exchanges/own/", "deposits/", "withdraws/"} },
                    { "post", new List<object>() {"order/", "order-cancel/"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("0.002") },
                    { "taker", this.parseNumber("0.002") },
                } },
                { "funding", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "CBC", "Cashbery" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {} },
                { "broad", new Dictionary<string, object>() {
                    { "Out of balance", typeof(InsufficientFunds) },
                } },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchMarkets
        * @description retrieves data on all markets for btcalpha
        * @see https://btc-alpha.github.io/api-docs/#list-all-currencies
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetPairs(parameters);
        //
        //    [
        //        {
        //            "name": "1INCH_USDT",
        //            "currency1": "1INCH",
        //            "currency2": "USDT",
        //            "price_precision": 4,
        //            "amount_precision": 2,
        //            "minimum_order_size": "0.01000000",
        //            "maximum_order_size": "900000.00000000",
        //            "minimum_order_value": "10.00000000",
        //            "liquidity_type": 10
        //        },
        //    ]
        //
        return this.parseMarkets(response);
    }

    public override object parseMarket(object market)
    {
        object id = this.safeString(market, "name");
        object baseId = this.safeString(market, "currency1");
        object quoteId = this.safeString(market, "currency2");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object pricePrecision = this.safeString(market, "price_precision");
        object priceLimit = this.parsePrecision(pricePrecision);
        object amountLimit = this.safeString(market, "minimum_order_size");
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", true },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "amount_precision"))) },
                { "price", this.parseNumber(this.parsePrecision((pricePrecision))) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", this.parseNumber(amountLimit) },
                    { "max", this.safeNumber(market, "maximum_order_size") },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", this.parseNumber(priceLimit) },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", this.parseNumber(Precise.stringMul(priceLimit, amountLimit)) },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        };
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchTickers
        * @see https://btc-alpha.github.io/api-docs/#tickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetTicker(parameters);
        //
        //    [
        //        {
        //            "timestamp": "1674658.445272",
        //            "pair": "BTC_USDT",
        //            "last": "22476.85",
        //            "diff": "458.96",
        //            "vol": "6660.847784",
        //            "high": "23106.08",
        //            "low": "22348.29",
        //            "buy": "22508.46",
        //            "sell": "22521.11"
        //        },
        //        ...
        //    ]
        //
        return this.parseTickers(response, symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchTicker
        * @see https://btc-alpha.github.io/api-docs/#tickers
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        //
        //    {
        //        "timestamp": "1674658.445272",
        //        "pair": "BTC_USDT",
        //        "last": "22476.85",
        //        "diff": "458.96",
        //        "vol": "6660.847784",
        //        "high": "23106.08",
        //        "low": "22348.29",
        //        "buy": "22508.46",
        //        "sell": "22521.11"
        //    }
        //
        return this.parseTicker(response, market);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //    {
        //        "timestamp": "1674658.445272",
        //        "pair": "BTC_USDT",
        //        "last": "22476.85",
        //        "diff": "458.96",
        //        "vol": "6660.847784",
        //        "high": "23106.08",
        //        "low": "22348.29",
        //        "buy": "22508.46",
        //        "sell": "22521.11"
        //    }
        //
        object timestampStr = this.safeString(ticker, "timestamp");
        object timestamp = parseInt(Precise.stringMul(timestampStr, "1000000"));
        object marketId = this.safeString(ticker, "pair");
        market = this.safeMarket(marketId, market, "_");
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "info", ticker },
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "buy") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "sell") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", this.safeString(ticker, "diff") },
            { "percentage", null },
            { "average", null },
            { "baseVolume", null },
            { "quoteVolume", this.safeString(ticker, "vol") },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchOrderBook
        * @see https://btc-alpha.github.io/api-docs/#get-orderbook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair_name", getValue(market, "id") },
        };
        if (isTrue(limit))
        {
            ((IDictionary<string,object>)request)["limit_sell"] = limit;
            ((IDictionary<string,object>)request)["limit_buy"] = limit;
        }
        object response = await this.publicGetOrderbookPairName(this.extend(request, parameters));
        return this.parseOrderBook(response, getValue(market, "symbol"), null, "buy", "sell", "price", "amount");
    }

    public override object parseBidsAsks(object bidasks, object priceKey = null, object amountKey = null, object countOrIdKey = null)
    {
        priceKey ??= 0;
        amountKey ??= 1;
        countOrIdKey ??= 2;
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(bidasks)); postFixIncrement(ref i))
        {
            object bidask = getValue(bidasks, i);
            if (isTrue(bidask))
            {
                ((IList<object>)result).Add(this.parseBidAsk(bidask, priceKey, amountKey));
            }
        }
        return result;
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //      {
        //          "id": "202203440",
        //          "timestamp": "1637856276.264215",
        //          "pair": "AAVE_USDT",
        //          "price": "320.79900000",
        //          "amount": "0.05000000",
        //          "type": "buy"
        //      }
        //
        // fetchMyTrades (private)
        //
        //      {
        //          "id": "202203440",
        //          "timestamp": "1637856276.264215",
        //          "pair": "AAVE_USDT",
        //          "price": "320.79900000",
        //          "amount": "0.05000000",
        //          "type": "buy",
        //          "my_side": "buy"
        //      }
        //
        object marketId = this.safeString(trade, "pair");
        market = this.safeMarket(marketId, market, "_");
        object timestampRaw = this.safeString(trade, "timestamp");
        object timestamp = this.parseToInt(Precise.stringMul(timestampRaw, "1000000"));
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "amount");
        object id = this.safeString(trade, "id");
        object side = this.safeString2(trade, "my_side", "type");
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", id },
            { "type", "limit" },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://btc-alpha.github.io/api-docs/#list-all-exchanges
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object trades = await this.publicGetExchanges(this.extend(request, parameters));
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://btc-alpha.github.io/api-docs/#list-own-deposits
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object response = await this.privateGetDeposits(parameters);
        //
        //     [
        //         {
        //             "timestamp": 1485363039.18359,
        //             "id": 317,
        //             "currency": "BTC",
        //             "amount": 530.00000000
        //         }
        //     ]
        //
        return this.parseTransactions(response, currency, since, limit, new Dictionary<string, object>() {
            { "type", "deposit" },
        });
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://btc-alpha.github.io/api-docs/#list-own-made-withdraws
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency_id"] = getValue(currency, "id");
        }
        object response = await this.privateGetWithdraws(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": 403,
        //             "timestamp": 1485363466.868539,
        //             "currency": "BTC",
        //             "amount": 0.53000000,
        //             "status": 20
        //         }
        //     ]
        //
        return this.parseTransactions(response, currency, since, limit, new Dictionary<string, object>() {
            { "type", "withdrawal" },
        });
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        //  deposit
        //      {
        //          "timestamp": 1485363039.18359,
        //          "id": 317,
        //          "currency": "BTC",
        //          "amount": 530.00000000
        //      }
        //
        //  withdrawal
        //      {
        //          "id": 403,
        //          "timestamp": 1485363466.868539,
        //          "currency": "BTC",
        //          "amount": 0.53000000,
        //          "status": 20
        //      }
        //
        object timestamp = this.safeTimestamp(transaction, "timestamp");
        object currencyId = this.safeString(transaction, "currency");
        object statusId = this.safeString(transaction, "status");
        return new Dictionary<string, object>() {
            { "id", this.safeString(transaction, "id") },
            { "info", transaction },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "address", null },
            { "addressTo", null },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "amount", this.safeNumber(transaction, "amount") },
            { "txid", null },
            { "type", null },
            { "status", this.parseTransactionStatus(statusId) },
            { "comment", null },
            { "internal", null },
            { "fee", null },
            { "updated", null },
        };
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "10", "pending" },
            { "20", "pending" },
            { "30", "ok" },
            { "40", "failed" },
            { "50", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     {
        //         "time":1591296000,
        //         "open":0.024746,
        //         "close":0.024728,
        //         "low":0.024728,
        //         "high":0.024753,
        //         "volume":16.624
        //     }
        //
        return new List<object> {this.safeTimestamp(ohlcv, "time"), this.safeNumber(ohlcv, "open"), this.safeNumber(ohlcv, "high"), this.safeNumber(ohlcv, "low"), this.safeNumber(ohlcv, "close"), this.safeNumber(ohlcv, "volume")};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://btc-alpha.github.io/api-docs/#charts
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "5m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
            { "type", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["since"] = this.parseToInt(divide(since, 1000));
        }
        object response = await this.publicGetChartsPairTypeChart(this.extend(request, parameters));
        //
        //     [
        //         {"time":1591296000,"open":0.024746,"close":0.024728,"low":0.024728,"high":0.024753,"volume":16.624},
        //         {"time":1591295700,"open":0.024718,"close":0.02475,"low":0.024711,"high":0.02475,"volume":31.645},
        //         {"time":1591295400,"open":0.024721,"close":0.024717,"low":0.024711,"high":0.02473,"volume":65.071}
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object balance = getValue(response, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "reserve");
            ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "balance");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://btc-alpha.github.io/api-docs/#list-own-wallets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetWallets(parameters);
        return this.parseBalance(response);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "1", "open" },
            { "2", "canceled" },
            { "3", "closed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // fetchClosedOrders / fetchOrder
        //     {
        //       "id": "923763073",
        //       "date": "1635451090368",
        //       "type": "sell",
        //       "pair": "XRP_USDT",
        //       "price": "1.00000000",
        //       "amount": "0.00000000",
        //       "status": "3",
        //       "amount_filled": "10.00000000",
        //       "amount_original": "10.0"
        //       "trades": [],
        //     }
        //
        // createOrder
        //     {
        //       "success": true,
        //       "date": "1635451754.497541",
        //       "type": "sell",
        //       "oid": "923776755",
        //       "price": "1.0",
        //       "amount": "10.0",
        //       "amount_filled": "0.0",
        //       "amount_original": "10.0",
        //       "trades": []
        //     }
        //
        object marketId = this.safeString(order, "pair");
        market = this.safeMarket(marketId, market, "_");
        object symbol = getValue(market, "symbol");
        object success = this.safeBool(order, "success", false);
        object timestamp = null;
        if (isTrue(success))
        {
            timestamp = this.safeTimestamp(order, "date");
        } else
        {
            timestamp = this.safeInteger(order, "date");
        }
        object price = this.safeString(order, "price");
        object remaining = this.safeString(order, "amount");
        object filled = this.safeString(order, "amount_filled");
        object amount = this.safeString(order, "amount_original");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object id = this.safeString2(order, "oid", "id");
        object trades = this.safeValue(order, "trades");
        object side = this.safeString2(order, "my_side", "type");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "datetime", this.iso8601(timestamp) },
            { "timestamp", timestamp },
            { "status", status },
            { "symbol", symbol },
            { "type", "limit" },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "amount", amount },
            { "filled", filled },
            { "remaining", remaining },
            { "trades", trades },
            { "fee", null },
            { "info", order },
            { "lastTradeTimestamp", null },
            { "average", null },
        }, market);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#createOrder
        * @see https://btc-alpha.github.io/api-docs/#create-order
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(type, "market")))
        {
            throw new InvalidOrder ((string)add(this.id, " only limits orders are supported")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
            { "type", side },
            { "amount", amount },
            { "price", this.priceToPrecision(symbol, price) },
        };
        object response = await this.privatePostOrder(this.extend(request, parameters));
        if (!isTrue(getValue(response, "success")))
        {
            throw new InvalidOrder ((string)add(add(this.id, " "), this.json(response))) ;
        }
        object order = this.parseOrder(response, market);
        object orderAmount = ((object)getValue(order, "amount")).ToString();
        amount = ((bool) isTrue(Precise.stringGt(orderAmount, "0"))) ? getValue(order, "amount") : amount;
        ((IDictionary<string,object>)order)["amount"] = this.parseNumber(amount);
        return order;
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#cancelOrder
        * @see https://btc-alpha.github.io/api-docs/#cancel-order
        * @description cancels an open order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "order", id },
        };
        object response = await this.privatePostOrderCancel(this.extend(request, parameters));
        return response;
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchOrder
        * @see https://btc-alpha.github.io/api-docs/#retrieve-single-order
        * @description fetches information on an order made by the user
        * @param {string} symbol not used by btcalpha fetchOrder
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object order = await this.privateGetOrderId(this.extend(request, parameters));
        return this.parseOrder(order);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchOrders
        * @see https://btc-alpha.github.io/api-docs/#list-own-orders
        * @description fetches information on multiple orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object orders = await this.privateGetOrdersOwn(this.extend(request, parameters));
        return this.parseOrders(orders, market, since, limit);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://btc-alpha.github.io/api-docs/#list-own-orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "status", "1" },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://btc-alpha.github.io/api-docs/#list-own-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "status", "3" },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcalpha#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://btc-alpha.github.io/api-docs/#list-own-exchanges
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            object market = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object trades = await this.privateGetExchangesOwn(this.extend(request, parameters));
        return this.parseTrades(trades, null, since, limit);
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object query = this.urlencode(this.keysort(this.omit(parameters, this.extractParams(path))));
        object url = add(getValue(getValue(this.urls, "api"), "rest"), "/");
        if (isTrue(!isEqual(path, "charts/{pair}/{type}/chart/")))
        {
            url = add(url, "v1/");
        }
        url = add(url, this.implodeParams(path, parameters));
        headers = new Dictionary<string, object>() {
            { "Accept", "application/json" },
        };
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(query)))
            {
                url = add(url, add("?", query));
            }
        } else
        {
            this.checkRequiredCredentials();
            object payload = this.apiKey;
            if (isTrue(isEqual(method, "POST")))
            {
                ((IDictionary<string,object>)headers)["Content-Type"] = "application/x-www-form-urlencoded";
                body = query;
                payload = add(payload, body);
            } else if (isTrue(getArrayLength(query)))
            {
                url = add(url, add("?", query));
            }
            ((IDictionary<string,object>)headers)["X-KEY"] = this.apiKey;
            ((IDictionary<string,object>)headers)["X-SIGN"] = this.hmac(this.encode(payload), this.encode(this.secret), sha256);
            ((IDictionary<string,object>)headers)["X-NONCE"] = ((object)this.nonce()).ToString();
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        //
        //     {"date":1570599531.4814300537,"error":"Out of balance -9.99243661 BTC"}
        //
        object error = this.safeString(response, "error");
        object feedback = add(add(this.id, " "), body);
        if (isTrue(!isEqual(error, null)))
        {
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), error, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), error, feedback);
        }
        if (isTrue(isTrue(isEqual(code, 401)) || isTrue(isEqual(code, 403))))
        {
            throw new AuthenticationError ((string)feedback) ;
        } else if (isTrue(isEqual(code, 429)))
        {
            throw new DDoSProtection ((string)feedback) ;
        }
        if (isTrue(isLessThan(code, 400)))
        {
            return null;
        }
        throw new ExchangeError ((string)feedback) ;
    }
}
