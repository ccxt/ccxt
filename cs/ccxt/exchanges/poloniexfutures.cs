namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class poloniexfutures : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "poloniexfutures" },
            { "name", "Poloniex Futures" },
            { "countries", new List<object>() {"US"} },
            { "rateLimit", 33.3 },
            { "certified", false },
            { "pro", true },
            { "version", "v1" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", false },
                { "margin", true },
                { "swap", true },
                { "future", false },
                { "option", null },
                { "createOrder", true },
                { "fetchBalance", true },
                { "fetchClosedOrders", true },
                { "fetchCurrencies", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchFundingRate", true },
                { "fetchFundingRateHistory", false },
                { "fetchL3OrderBook", true },
                { "fetchMarkets", true },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrdersByStatus", true },
                { "fetchPositions", true },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "setMarginMode", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", 1 },
                { "5m", 5 },
                { "15m", 15 },
                { "30m", 30 },
                { "1h", 60 },
                { "2h", 120 },
                { "4h", 480 },
                { "12h", 720 },
                { "1d", 1440 },
                { "1w", 10080 },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://futures-api.poloniex.com" },
                    { "private", "https://futures-api.poloniex.com" },
                } },
                { "www", "https://www.poloniex.com" },
                { "doc", "https://futures-docs.poloniex.com" },
                { "fees", "https://poloniex.com/fee-schedule" },
                { "referral", "https://poloniex.com/signup?c=UBFZJRPJ" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "contracts/active", 10 },
                        { "contracts/{symbol}", 10 },
                        { "ticker", 10 },
                        { "tickers", 10 },
                        { "level2/snapshot", 180.002 },
                        { "level2/depth", 180.002 },
                        { "level2/message/query", 180.002 },
                        { "level3/snapshot", 180.002 },
                        { "trade/history", 10 },
                        { "interest/query", 10 },
                        { "index/query", 10 },
                        { "mark-price/{symbol}/current", 10 },
                        { "premium/query", 10 },
                        { "funding-rate/{symbol}/current", 10 },
                        { "timestamp", 10 },
                        { "status", 10 },
                        { "kline/query", 10 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "bullet-public", 10 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "account-overview", 1 },
                        { "transaction-history", 1 },
                        { "maxActiveOrders", 1 },
                        { "maxRiskLimit", 1 },
                        { "userFeeRate", 1 },
                        { "marginType/query", 1 },
                        { "orders", 1 },
                        { "stopOrders", 1 },
                        { "recentDoneOrders", 1 },
                        { "orders/{order-id}", 1 },
                        { "clientOrderId/{clientOid}", 1 },
                        { "fills", 1 },
                        { "openOrderStatistics", 1 },
                        { "position", 1.5 },
                        { "positions", 1.5 },
                        { "funding-history", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "orders", 1.5 },
                        { "batchOrders", 1.5 },
                        { "position/margin/auto-deposit-status", 1.5 },
                        { "position/margin/deposit-margin", 1.5 },
                        { "position/margin/withdraw-margin", 1.5 },
                        { "bullet-private", 1 },
                        { "marginType/change", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "orders/{order-id}", 1.5 },
                        { "orders", 150.016 },
                        { "stopOrders", 150.016 },
                    } },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.00075") },
                    { "maker", this.parseNumber("0.0001") },
                } },
                { "funding", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", false },
                    { "withdraw", new Dictionary<string, object>() {} },
                    { "deposit", new Dictionary<string, object>() {} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {} },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
                { "password", true },
            } },
            { "options", new Dictionary<string, object>() {
                { "networks", new Dictionary<string, object>() {
                    { "OMNI", "omni" },
                    { "ERC20", "eth" },
                    { "TRC20", "trx" },
                } },
                { "versions", new Dictionary<string, object>() {
                    { "public", new Dictionary<string, object>() {
                        { "GET", new Dictionary<string, object>() {
                            { "ticker", "v2" },
                            { "tickers", "v2" },
                            { "level3/snapshot", "v2" },
                        } },
                    } },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "400", typeof(BadRequest) },
                    { "401", typeof(AuthenticationError) },
                    { "403", typeof(NotSupported) },
                    { "404", typeof(NotSupported) },
                    { "405", typeof(NotSupported) },
                    { "415", typeof(BadRequest) },
                    { "429", typeof(RateLimitExceeded) },
                    { "500", typeof(ExchangeNotAvailable) },
                    { "503", typeof(ExchangeNotAvailable) },
                    { "400001", typeof(AuthenticationError) },
                    { "400002", typeof(InvalidNonce) },
                    { "400003", typeof(AuthenticationError) },
                    { "400004", typeof(AuthenticationError) },
                    { "400005", typeof(AuthenticationError) },
                    { "400006", typeof(AuthenticationError) },
                    { "400007", typeof(AuthenticationError) },
                    { "404000", typeof(NotSupported) },
                    { "400100", typeof(BadRequest) },
                    { "411100", typeof(AccountSuspended) },
                    { "500000", typeof(ExchangeNotAvailable) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "Position does not exist", typeof(OrderNotFound) },
                } },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchMarkets
        * @description retrieves data on all markets for poloniexfutures
        * @see https://futures-docs.poloniex.com/#symbol-2
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetContractsActive(parameters);
        //
        // {
        //  "code": "200000",
        //  "data": [
        //     {
        //       "symbol": "APTUSDTPERP",
        //       "takerFixFee": "0E-10",
        //       "nextFundingRateTime": "20145603",
        //       "makerFixFee": "0E-10",
        //       "type": "FFWCSX",
        //       "predictedFundingFeeRate": "0.000000",
        //       "turnoverOf24h": "386037.46704292",
        //       "initialMargin": "0.05",
        //       "isDeleverage": true,
        //       "createdAt": "1666681959000",
        //       "fundingBaseSymbol": ".APTINT8H",
        //       "lowPriceOf24h": "4.34499979019165",
        //       "lastTradePrice": "4.4090000000",
        //       "indexPriceTickSize": "0.001",
        //       "fairMethod": "FundingRate",
        //       "takerFeeRate": "0.00040",
        //       "order": "102",
        //       "updatedAt": "1671076377000",
        //       "displaySettleCurrency": "USDT",
        //       "indexPrice": "4.418",
        //       "multiplier": "1.0",
        //       "maxLeverage": "20",
        //       "fundingQuoteSymbol": ".USDTINT8H",
        //       "quoteCurrency": "USDT",
        //       "maxOrderQty": "1000000",
        //       "maxPrice": "1000000.0000000000",
        //       "maintainMargin": "0.025",
        //       "status": "Open",
        //       "displayNameMap": [Object],
        //       "openInterest": "2367",
        //       "highPriceOf24h": "4.763999938964844",
        //       "fundingFeeRate": "0.000000",
        //       "volumeOf24h": "83540.00000000",
        //       "riskStep": "500000",
        //       "isQuanto": true,
        //       "maxRiskLimit": "20000",
        //       "rootSymbol": "USDT",
        //       "baseCurrency": "APT",
        //       "firstOpenDate": "1666701000000",
        //       "tickSize": "0.001",
        //       "markMethod": "FairPrice",
        //       "indexSymbol": ".PAPTUSDT",
        //       "markPrice": "4.418",
        //       "minRiskLimit": "1000000",
        //       "settlementFixFee": "0E-10",
        //       "settlementSymbol": '',
        //       "priceChgPctOf24h": "-0.0704",
        //       "fundingRateSymbol": ".APTUSDTPERPFPI8H",
        //       "makerFeeRate": "0.00010",
        //       "isInverse": false,
        //       "lotSize": "1",
        //       "settleCurrency": "USDT",
        //       "settlementFeeRate": "0.0"
        //     },
        //   ]
        // }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        return this.parseMarkets(data);
    }

    public override object parseMarket(object market)
    {
        object id = this.safeString(market, "symbol");
        object baseId = this.safeString(market, "baseCurrency");
        object quoteId = this.safeString(market, "quoteCurrency");
        object settleId = this.safeString(market, "rootSymbol");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object settle = this.safeCurrencyCode(settleId);
        object symbol = add(add(add(add(bs, "/"), quote), ":"), settle);
        object inverse = this.safeValue(market, "isInverse");
        object status = this.safeString(market, "status");
        object multiplier = this.safeString(market, "multiplier");
        object tickSize = this.safeNumber(market, "indexPriceTickSize");
        object lotSize = this.safeNumber(market, "lotSize");
        object limitAmountMax = this.safeNumber(market, "maxOrderQty");
        object limitPriceMax = this.safeNumber(market, "maxPrice");
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", symbol },
            { "base", bs },
            { "quote", quote },
            { "settle", settle },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", settleId },
            { "type", "swap" },
            { "spot", false },
            { "margin", false },
            { "swap", true },
            { "future", false },
            { "option", false },
            { "active", (isEqual(status, "Open")) },
            { "contract", true },
            { "linear", !isTrue(inverse) },
            { "inverse", inverse },
            { "taker", this.safeNumber(market, "takerFeeRate") },
            { "maker", this.safeNumber(market, "makerFeeRate") },
            { "contractSize", this.parseNumber(Precise.stringAbs(multiplier)) },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", lotSize },
                { "price", tickSize },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", this.parseNumber("1") },
                    { "max", this.safeNumber(market, "maxLeverage") },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", lotSize },
                    { "max", limitAmountMax },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", tickSize },
                    { "max", limitPriceMax },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "created", this.safeInteger(market, "firstOpenDate") },
            { "info", market },
        };
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //    {
        //        "symbol": "BTCUSDTPERP",                   // Market of the symbol
        //        "sequence": 45,                            // Sequence number which is used to judge the continuity of the pushed messages
        //        "side": "sell",                            // Transaction side of the last traded taker order
        //        "price": 3600.00,                          // Filled price
        //        "size": 16,                                // Filled quantity
        //        "tradeId": "5c9dcf4170744d6f5a3d32fb",     // Order ID
        //        "bestBidSize": 795,                        // Best bid size
        //        "bestBidPrice": 3200.00,                   // Best bid
        //        "bestAskPrice": 3600.00,                   // Best ask size
        //        "bestAskSize": 284,                        // Best ask
        //        "ts": 1553846081210004941                  // Filled time - nanosecond
        //    }
        //
        //    {
        //        "volume": 30449670,            //24h Volume
        //        "turnover": 845169919063,      //24h Turnover
        //        "lastPrice": 3551,           //Last price
        //        "priceChgPct": 0.0043,         //24h Change
        //        "ts": 1547697294838004923      //Snapshot time (nanosecond)
        //    }
        //
        object marketId = this.safeString(ticker, "symbol");
        object symbol = this.safeSymbol(marketId, market);
        object timestampString = this.safeString(ticker, "ts");
        // check timestamp bcz bug: https://app.travis-ci.com/github/ccxt/ccxt/builds/269959181#L4011 and also 17 digits occured
        object multiplier = null;
        if (isTrue(isEqual(((string)timestampString).Length, 17)))
        {
            multiplier = 0.0001;
        } else if (isTrue(isEqual(((string)timestampString).Length, 18)))
        {
            multiplier = 0.00001;
        } else
        {
            // 19 length default
            multiplier = 0.000001;
        }
        object timestamp = this.safeIntegerProduct(ticker, "ts", multiplier);
        object last = this.safeString2(ticker, "price", "lastPrice");
        object percentage = Precise.stringMul(this.safeString(ticker, "priceChgPct"), "100");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", null },
            { "low", null },
            { "bid", this.safeString(ticker, "bestBidPrice") },
            { "bidVolume", this.safeString(ticker, "bestBidSize") },
            { "ask", this.safeString(ticker, "bestAskPrice") },
            { "askVolume", this.safeString(ticker, "bestAskSize") },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", percentage },
            { "average", null },
            { "baseVolume", this.safeString2(ticker, "size", "volume") },
            { "quoteVolume", this.safeString(ticker, "turnover") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://futures-docs.poloniex.com/#get-real-time-ticker-2-0
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        //
        // {
        //     "code": "200000",
        //     "data": {
        //       "sequence": "11574719",
        //       "symbol": "BTCUSDTPERP",
        //       "side": "sell",
        //       "size": "1",
        //       "price": "16990.1",
        //       "bestBidSize": "3",
        //       "bestBidPrice": "16990.1",
        //       "bestAskPrice": "16991.0",
        //       "tradeId": "639c8a529fd7cf0001af4157",
        //       "bestAskSize": "505",
        //       "ts": "1671203410721232337"
        //     }
        // }
        //
        return this.parseTicker(this.safeValue(response, "data", new Dictionary<string, object>() {}), market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://futures-docs.poloniex.com/#get-real-time-ticker-of-all-symbols
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetTickers(parameters);
        return this.parseTickers(this.safeValue(response, "data", new List<object>() {}), symbols);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfuturesfutures#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://futures-docs.poloniex.com/#get-full-order-book-level-2
        * @see https://futures-docs.poloniex.com/#get-full-order-book-level-3
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object level = this.safeNumber(parameters, "level");
        parameters = this.omit(parameters, "level");
        if (isTrue(isTrue(isTrue(!isEqual(level, null)) && isTrue(!isEqual(level, 2))) && isTrue(!isEqual(level, 3))))
        {
            throw new BadRequest ((string)add(this.id, " fetchOrderBook() can only return level 2 & 3")) ;
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = null;
        if (isTrue(isEqual(level, 3)))
        {
            response = await this.publicGetLevel3Snapshot(this.extend(request, parameters));
        } else
        {
            response = await this.publicGetLevel2Snapshot(this.extend(request, parameters));
        }
        // L2
        //
        // {
        //     "code": "200000",
        //     "data": {
        //     "symbol": "BTCUSDTPERP",
        //     "sequence": 1669149851334,
        //     "asks": [
        //         [
        //             16952,
        //             12
        //         ],
        //     ],
        //     "bids": [
        //         [
        //             16951.9,
        //             13
        //         ],
        //     ],
        // }
        //
        // L3
        //
        // {
        //     "code": "200000",
        //     "data": {
        //     "symbol": "BTCUSDTPERP",
        //     "sequence": 1669149851334,
        //     "asks": [
        //         [
        //             "639c95388cba5100084eabce",
        //             "16952.0",
        //             "1",
        //             1671206200542484700
        //         ],
        //     ],
        //     "bids": [
        //         [
        //             "626659d83385c200072e690b",
        //             "17.0",
        //             "1000",
        //             1650874840161291000
        //         ],
        //     ],
        // }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object timestamp = this.safeIntegerProduct(data, "ts", 0.000001);
        object orderbook = null;
        if (isTrue(isEqual(level, 3)))
        {
            orderbook = this.parseOrderBook(data, getValue(market, "symbol"), timestamp, "bids", "asks", 1, 2);
        } else
        {
            orderbook = this.parseOrderBook(data, getValue(market, "symbol"), timestamp, "bids", "asks", 0, 1);
        }
        ((IDictionary<string,object>)orderbook)["nonce"] = this.safeInteger(data, "sequence");
        return orderbook;
    }

    public async override Task<object> fetchL3OrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchL3OrderBook
        * @description fetches level 3 information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://futures-docs.poloniex.com/#get-full-order-book-level-3
        * @param {string} symbol unified market symbol
        * @param {int} [limit] max number of orders to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order book structure]{@link https://docs.ccxt.com/#/?id=order-book-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        return this.fetchOrderBook(getValue(market, "id"), null, new Dictionary<string, object>() {
            { "level", 3 },
        });
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //     {
        //         "sequence": 11827985,
        //         "side": "buy",
        //         "size": 101,
        //         "price": "16864.0000000000",
        //         "takerOrderId": "639c986f0ac2470007be75ee",
        //         "makerOrderId": "639c986fa69d280007b76111",
        //         "tradeId": "639c986f9fd7cf0001afd7ee",
        //         "ts": 1671207023485924400
        //     }
        //
        // fetchMyTrades
        //
        //   {
        //       "symbol": "BTCUSDTPERP",  //Ticker symbol of the contract
        //       "tradeId": "5ce24c1f0c19fc3c58edc47c",  //Trade ID
        //       "orderId": "5ce24c16b210233c36ee321d",  // Order ID
        //       "side": "sell",  //Transaction side
        //       "liquidity": "taker",  //Liquidity- taker or maker
        //       "price": "8302",  //Filled price
        //       "size": 10,  //Filled amount
        //       "value": "0.001204529",  //Order value
        //       "feeRate": "0.0005",  //Floating fees
        //       "fixFee": "0.00000006",  //Fixed fees
        //       "feeCurrency": "XBT",  //Charging currency
        //       "stop": "",  //A mark to the stop order type
        //       "fee": "0.0000012022",  //Transaction fee
        //       "orderType": "limit",  //Order type
        //       "tradeType": "trade",  //Trade type (trade, liquidation, ADL or settlement)
        //       "createdAt": 1558334496000,  //Time the order created
        //       "settleCurrency": "XBT", //settlement currency
        //       "tradeTime": 1558334496000000000 //trade time in nanosecond
        //   }
        //
        object marketId = this.safeString(trade, "symbol");
        market = this.safeMarket(marketId, market, "-");
        object id = this.safeString(trade, "tradeId");
        object orderId = this.safeString(trade, "orderId");
        object takerOrMaker = this.safeString(trade, "liquidity");
        object timestamp = this.safeInteger(trade, "ts");
        if (isTrue(!isEqual(timestamp, null)))
        {
            timestamp = this.parseToInt(divide(timestamp, 1000000));
        } else
        {
            timestamp = this.safeInteger(trade, "createdAt");
            // if it's a historical v1 trade, the exchange returns timestamp in seconds
            if (isTrue(isTrue((inOp(trade, "dealValue"))) && isTrue((!isEqual(timestamp, null)))))
            {
                timestamp = multiply(timestamp, 1000);
            }
        }
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "size");
        object side = this.safeString(trade, "side");
        object fee = null;
        object feeCostString = this.safeString(trade, "fee");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyId = this.safeString(trade, "feeCurrency");
            object feeCurrency = this.safeCurrencyCode(feeCurrencyId);
            if (isTrue(isEqual(feeCurrency, null)))
            {
                feeCurrency = ((bool) isTrue((isEqual(side, "sell")))) ? getValue(market, "quote") : getValue(market, "base");
            }
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrency },
                { "rate", this.safeString(trade, "feeRate") },
            };
        }
        object type = this.safeString(trade, "orderType");
        if (isTrue(isEqual(type, "match")))
        {
            type = null;
        }
        object costString = this.safeString(trade, "value");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "order", orderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "type", type },
            { "takerOrMaker", takerOrMaker },
            { "side", side },
            { "price", priceString },
            { "amount", amountString },
            { "cost", costString },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://futures-docs.poloniex.com/#historical-data
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetTradeHistory(this.extend(request, parameters));
        //
        //    {
        //        "code": "200000",
        //        "data": [
        //        {
        //          "sequence": 11827985,
        //          "side": "buy",
        //          "size": 101,
        //          "price": "16864.0000000000",
        //          "takerOrderId": "639c986f0ac2470007be75ee",
        //          "makerOrderId": "639c986fa69d280007b76111",
        //          "tradeId": "639c986f9fd7cf0001afd7ee",
        //          "ts": 1671207023485924400
        //        },
        //    }
        //
        object trades = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the poloniexfutures server
        * @see https://futures-docs.poloniex.com/#time
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the poloniexfutures server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetTimestamp(parameters);
        //
        // {
        //     "code":"200000",
        //     "msg":"success",
        //     "data":1546837113087
        // }
        //
        return this.safeInteger(response, "data");
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://futures-docs.poloniex.com/#k-chart
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object marketId = getValue(market, "id");
        object parsedTimeframe = this.safeInteger(this.timeframes, timeframe);
        object request = new Dictionary<string, object>() {
            { "symbol", marketId },
        };
        if (isTrue(!isEqual(parsedTimeframe, null)))
        {
            ((IDictionary<string,object>)request)["granularity"] = parsedTimeframe;
        } else
        {
            ((IDictionary<string,object>)request)["granularity"] = timeframe;
        }
        object duration = multiply(this.parseTimeframe(timeframe), 1000);
        object endAt = this.milliseconds();
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["from"] = since;
            if (isTrue(isEqual(limit, null)))
            {
                limit = this.safeInteger(this.options, "fetchOHLCVLimit", 200);
            }
            endAt = this.sum(since, multiply(limit, duration));
            ((IDictionary<string,object>)request)["to"] = endAt;
        } else if (isTrue(!isEqual(limit, null)))
        {
            since = subtract(endAt, multiply(limit, duration));
            ((IDictionary<string,object>)request)["from"] = since;
        }
        object response = await this.publicGetKlineQuery(this.extend(request, parameters));
        //
        //    {
        //        "code": "200000",
        //        "data": [
        //            [1636459200000, 4779.3, 4792.1, 4768.7, 4770.3, 78051],
        //            [1636460100000, 4770.25, 4778.55, 4757.55, 4777.25, 80164],
        //            [1636461000000, 4777.25, 4791.45, 4774.5, 4791.3, 51555]
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        object data = this.safeValue(response, "data");
        object currencyId = this.safeString(data, "currency");
        object code = this.safeCurrencyCode(currencyId);
        object account = this.account();
        ((IDictionary<string,object>)account)["free"] = this.safeString(data, "availableBalance");
        ((IDictionary<string,object>)account)["total"] = this.safeString(data, "accountEquity");
        ((IDictionary<string,object>)result)[(string)code] = account;
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://futures-docs.poloniex.com/#get-account-overview
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currencyId = this.safeString(parameters, "currency");
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(currencyId, null)))
        {
            object currency = this.currency(currencyId);
            request = new Dictionary<string, object>() {
                { "currency", getValue(currency, "id") },
            };
        }
        object response = await this.privateGetAccountOverview(this.extend(request, parameters));
        //
        //     {
        //         "code": "200000",
        //         "data": {
        //             "accountEquity": 0.00005,
        //             "unrealisedPNL": 0,
        //             "marginBalance": 0.00005,
        //             "positionMargin": 0,
        //             "orderMargin": 0,
        //             "frozenFunds": 0,
        //             "availableBalance": 0.00005,
        //             "currency": "XBT"
        //         }
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#createOrder
        * @description Create an order on the exchange
        * @see https://futures-docs.poloniex.com/#place-an-order
        * @param {string} symbol Unified CCXT market symbol
        * @param {string} type 'limit' or 'market'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount the amount of currency to trade
        * @param {float} [price] *ignored in "market" orders* the price at which the order is to be fullfilled at in units of the quote currency
        * @param {object} [params]  extra parameters specific to the exchange API endpoint
        * @param {float} [params.leverage] Leverage size of the order
        * @param {float} [params.stopPrice] The price at which a trigger order is triggered at
        * @param {bool} [params.reduceOnly] A mark to reduce the position size only. Set to false by default. Need to set the position size when reduceOnly is true.
        * @param {string} [params.timeInForce] GTC, GTT, IOC, or FOK, default is GTC, limit orders only
        * @param {string} [params.postOnly] Post only flag, invalid when timeInForce is IOC or FOK
        * @param {string} [params.clientOid] client order id, defaults to uuid if not passed
        * @param {string} [params.remark] remark for the order, length cannot exceed 100 utf8 characters
        * @param {string} [params.stop] 'up' or 'down', defaults to 'up' if side is sell and 'down' if side is buy, requires stopPrice
        * @param {string} [params.stopPriceType]  TP, IP or MP, defaults to TP
        * @param {bool} [params.closeOrder] set to true to close position
        * @param {bool} [params.forceHold] A mark to forcely hold the funds for an order, even though it's an order to reduce the position size. This helps the order stay on the order book and not get canceled when the position size changes. Set to false by default.
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        // required param, cannot be used twice
        object clientOrderId = this.safeString2(parameters, "clientOid", "clientOrderId", this.uuid());
        parameters = this.omit(parameters, new List<object>() {"clientOid", "clientOrderId"});
        if (isTrue(isLessThan(amount, 1)))
        {
            throw new InvalidOrder ((string)add(this.id, " createOrder() minimum contract order amount is 1")) ;
        }
        object preciseAmount = parseInt(this.amountToPrecision(symbol, amount));
        object request = new Dictionary<string, object>() {
            { "clientOid", clientOrderId },
            { "side", side },
            { "symbol", getValue(market, "id") },
            { "type", type },
            { "size", preciseAmount },
            { "leverage", 1 },
        };
        object stopPrice = this.safeValue2(parameters, "triggerPrice", "stopPrice");
        if (isTrue(stopPrice))
        {
            ((IDictionary<string,object>)request)["stop"] = ((bool) isTrue((isEqual(side, "buy")))) ? "up" : "down";
            object stopPriceType = this.safeString(parameters, "stopPriceType", "TP");
            ((IDictionary<string,object>)request)["stopPriceType"] = stopPriceType;
            ((IDictionary<string,object>)request)["stopPrice"] = this.priceToPrecision(symbol, stopPrice);
        }
        object timeInForce = this.safeStringUpper(parameters, "timeInForce");
        if (isTrue(isEqual(type, "limit")))
        {
            if (isTrue(isEqual(price, null)))
            {
                throw new ArgumentsRequired ((string)add(this.id, " createOrder() requires a price argument for limit orders")) ;
            } else
            {
                ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            }
            if (isTrue(!isEqual(timeInForce, null)))
            {
                ((IDictionary<string,object>)request)["timeInForce"] = timeInForce;
            }
        }
        object postOnly = this.safeBool(parameters, "postOnly", false);
        object hidden = this.safeValue(parameters, "hidden");
        if (isTrue(isTrue(postOnly) && isTrue((!isEqual(hidden, null)))))
        {
            throw new BadRequest ((string)add(this.id, " createOrder() does not support the postOnly parameter together with a hidden parameter")) ;
        }
        object iceberg = this.safeValue(parameters, "iceberg");
        if (isTrue(iceberg))
        {
            object visibleSize = this.safeValue(parameters, "visibleSize");
            if (isTrue(isEqual(visibleSize, null)))
            {
                throw new ArgumentsRequired ((string)add(this.id, " createOrder() requires a visibleSize parameter for iceberg orders")) ;
            }
        }
        parameters = this.omit(parameters, new List<object>() {"timeInForce", "stopPrice", "triggerPrice"}); // Time in force only valid for limit orders, exchange error when gtc for market orders
        object response = await this.privatePostOrders(this.extend(request, parameters));
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //            "orderId": "619717484f1d010001510cde",
        //        },
        //    }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", this.safeString(data, "orderId") },
            { "clientOrderId", null },
            { "timestamp", null },
            { "datetime", null },
            { "lastTradeTimestamp", null },
            { "symbol", null },
            { "type", null },
            { "side", null },
            { "price", null },
            { "amount", null },
            { "cost", null },
            { "average", null },
            { "filled", null },
            { "remaining", null },
            { "status", null },
            { "fee", null },
            { "trades", null },
            { "timeInForce", null },
            { "postOnly", null },
            { "stopPrice", null },
            { "info", response },
        }, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#cancelOrder
        * @description cancels an open order
        * @see https://futures-docs.poloniex.com/#cancel-an-order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order-id", id },
        };
        object response = await this.privateDeleteOrdersOrderId(this.extend(request, parameters));
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //            "cancelledOrderIds": [
        //                "619714b8b6353000014c505a",
        //            ],
        //            "cancelFailedOrders": [
        //                {
        //                    "orderId": "63a9c5c2b9e7d70007eb0cd5",
        //                    "orderState": "2"
        //                }
        //            ],
        //        },
        //    }
        //
        object data = this.safeValue(response, "data");
        object cancelledOrderIds = this.safeValue(data, "cancelledOrderIds");
        object cancelledOrderIdsLength = getArrayLength(cancelledOrderIds);
        if (isTrue(isEqual(cancelledOrderIdsLength, 0)))
        {
            throw new InvalidOrder ((string)add(this.id, " cancelOrder() order already cancelled")) ;
        }
        return this.parseOrder(data);
    }

    public async override Task<object> fetchPositions(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchPositions
        * @description fetch all open positions
        * @see https://futures-docs.poloniex.com/#get-position-list
        * @param {string[]|undefined} symbols list of unified market symbols
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetPositions(parameters);
        //
        //    {
        //        "code": "200000",
        //        "data": [
        //            {
        //                "id": "615ba79f83a3410001cde321",
        //                "symbol": "ETHUSDTM",
        //                "autoDeposit": false,
        //                "maintMarginReq": 0.005,
        //                "riskLimit": 1000000,
        //                "realLeverage": 18.61,
        //                "crossMode": false,
        //                "delevPercentage": 0.86,
        //                "openingTimestamp": 1638563515618,
        //                "currentTimestamp": 1638576872774,
        //                "currentQty": 2,
        //                "currentCost": 83.64200000,
        //                "currentComm": 0.05018520,
        //                "unrealisedCost": 83.64200000,
        //                "realisedGrossCost": 0.00000000,
        //                "realisedCost": 0.05018520,
        //                "isOpen": true,
        //                "markPrice": 4225.01,
        //                "markValue": 84.50020000,
        //                "posCost": 83.64200000,
        //                "posCross": 0.0000000000,
        //                "posInit": 3.63660870,
        //                "posComm": 0.05236717,
        //                "posLoss": 0.00000000,
        //                "posMargin": 3.68897586,
        //                "posMaint": 0.50637594,
        //                "maintMargin": 4.54717586,
        //                "realisedGrossPnl": 0.00000000,
        //                "realisedPnl": -0.05018520,
        //                "unrealisedPnl": 0.85820000,
        //                "unrealisedPnlPcnt": 0.0103,
        //                "unrealisedRoePcnt": 0.2360,
        //                "avgEntryPrice": 4182.10,
        //                "liquidationPrice": 4023.00,
        //                "bankruptPrice": 4000.25,
        //                "settleCurrency": "USDT",
        //                "isInverse": false
        //            }
        //        ]
        //    }
        //
        object data = this.safeList(response, "data");
        return this.parsePositions(data, symbols);
    }

    public override object parsePosition(object position, object market = null)
    {
        //
        //    {
        //        "code": "200000",
        //        "data": [
        //            {
        //                "id": "615ba79f83a3410001cde321",         // Position ID
        //                "symbol": "ETHUSDTM",                     // Symbol
        //                "autoDeposit": false,                     // Auto deposit margin or not
        //                "maintMarginReq": 0.005,                  // Maintenance margin requirement
        //                "riskLimit": 1000000,                     // Risk limit
        //                "realLeverage": 25.92,                    // Leverage of the order
        //                "crossMode": false,                       // Cross mode or not
        //                "delevPercentage": 0.76,                  // ADL ranking percentile
        //                "openingTimestamp": 1638578546031,        // Open time
        //                "currentTimestamp": 1638578563580,        // Current timestamp
        //                "currentQty": 2,                          // Current postion quantity
        //                "currentCost": 83.787,                    // Current postion value
        //                "currentComm": 0.0167574,                 // Current commission
        //                "unrealisedCost": 83.787,                 // Unrealised value
        //                "realisedGrossCost": 0.0,                 // Accumulated realised gross profit value
        //                "realisedCost": 0.0167574,                // Current realised position value
        //                "isOpen": true,                           // Opened position or not
        //                "markPrice": 4183.38,                     // Mark price
        //                "markValue": 83.6676,                     // Mark value
        //                "posCost": 83.787,                        // Position value
        //                "posCross": 0.0,                          // added margin
        //                "posInit": 3.35148,                       // Leverage margin
        //                "posComm": 0.05228309,                    // Bankruptcy cost
        //                "posLoss": 0.0,                           // Funding fees paid out
        //                "posMargin": 3.40376309,                  // Position margin
        //                "posMaint": 0.50707892,                   // Maintenance margin
        //                "maintMargin": 3.28436309,                // Position margin
        //                "realisedGrossPnl": 0.0,                  // Accumulated realised gross profit value
        //                "realisedPnl": -0.0167574,                // Realised profit and loss
        //                "unrealisedPnl": -0.1194,                 // Unrealised profit and loss
        //                "unrealisedPnlPcnt": -0.0014,             // Profit-loss ratio of the position
        //                "unrealisedRoePcnt": -0.0356,             // Rate of return on investment
        //                "avgEntryPrice": 4189.35,                 // Average entry price
        //                "liquidationPrice": 4044.55,              // Liquidation price
        //                "bankruptPrice": 4021.75,                 // Bankruptcy price
        //                "settleCurrency": "USDT",                 // Currency used to clear and settle the trades
        //                "isInverse": false
        //            }
        //        ]
        //    }
        //
        object symbol = this.safeString(position, "symbol");
        market = this.safeMarket(symbol, market);
        object timestamp = this.safeInteger(position, "currentTimestamp");
        object size = this.safeString(position, "currentQty");
        object side = null;
        if (isTrue(Precise.stringGt(size, "0")))
        {
            side = "long";
        } else if (isTrue(Precise.stringLt(size, "0")))
        {
            side = "short";
        }
        object notional = Precise.stringAbs(this.safeString(position, "posCost"));
        object initialMargin = this.safeString(position, "posInit");
        object initialMarginPercentage = Precise.stringDiv(initialMargin, notional);
        // const marginRatio = Precise.stringDiv (maintenanceRate, collateral);
        object unrealisedPnl = this.safeString(position, "unrealisedPnl");
        object crossMode = this.safeValue(position, "crossMode");
        // currently crossMode is always set to false and only isolated positions are supported
        object marginMode = ((bool) isTrue(crossMode)) ? "cross" : "isolated";
        return new Dictionary<string, object>() {
            { "info", position },
            { "id", null },
            { "symbol", this.safeString(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "initialMargin", this.parseNumber(initialMargin) },
            { "initialMarginPercentage", this.parseNumber(initialMarginPercentage) },
            { "maintenanceMargin", this.safeNumber(position, "posMaint") },
            { "maintenanceMarginPercentage", this.safeNumber(position, "maintMarginReq") },
            { "entryPrice", this.safeNumber(position, "avgEntryPrice") },
            { "notional", this.parseNumber(notional) },
            { "leverage", this.safeNumber(position, "realLeverage") },
            { "unrealizedPnl", this.parseNumber(unrealisedPnl) },
            { "contracts", this.parseNumber(Precise.stringAbs(size)) },
            { "contractSize", this.safeValue(market, "contractSize") },
            { "marginRatio", null },
            { "liquidationPrice", this.safeNumber(position, "liquidationPrice") },
            { "markPrice", this.safeNumber(position, "markPrice") },
            { "collateral", this.safeNumber(position, "maintMargin") },
            { "marginMode", marginMode },
            { "side", side },
            { "percentage", this.parseNumber(Precise.stringDiv(unrealisedPnl, initialMargin)) },
            { "stopLossPrice", null },
            { "takeProfitPrice", null },
        };
    }

    public async override Task<object> fetchFundingHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchFundingHistory
        * @description fetch the history of funding payments paid and received on this account
        * @see https://futures-docs.poloniex.com/#get-funding-history
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch funding history for
        * @param {int} [limit] the maximum number of funding history structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchFundingHistory() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startAt"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            // * Since is ignored if limit is defined
            ((IDictionary<string,object>)request)["maxCount"] = limit;
        }
        object response = await this.privateGetFundingHistory(this.extend(request, parameters));
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //            "dataList": [
        //                {
        //                    "id": 239471298749817,
        //                    "symbol": "ETHUSDTM",
        //                    "timePoint": 1638532800000,
        //                    "fundingRate": 0.000100,
        //                    "markPrice": 4612.8300000000,
        //                    "positionQty": 12,
        //                    "positionCost": 553.5396000000,
        //                    "funding": -0.0553539600,
        //                    "settleCurrency": "USDT"
        //                },
        //                ...
        //            ],
        //            "hasMore": true
        //        }
        //    }
        //
        object data = this.safeValue(response, "data");
        object dataList = this.safeValue(data, "dataList", new List<object>() {});
        object dataListLength = getArrayLength(dataList);
        object fees = new List<object>() {};
        for (object i = 0; isLessThan(i, dataListLength); postFixIncrement(ref i))
        {
            object listItem = getValue(dataList, i);
            object timestamp = this.safeInteger(listItem, "timePoint");
            ((IList<object>)fees).Add(new Dictionary<string, object>() {
                { "info", listItem },
                { "symbol", symbol },
                { "code", this.safeCurrencyCode(this.safeString(listItem, "settleCurrency")) },
                { "timestamp", timestamp },
                { "datetime", this.iso8601(timestamp) },
                { "id", this.safeNumber(listItem, "id") },
                { "amount", this.safeNumber(listItem, "funding") },
                { "fundingRate", this.safeNumber(listItem, "fundingRate") },
                { "markPrice", this.safeNumber(listItem, "markPrice") },
                { "positionQty", this.safeNumber(listItem, "positionQty") },
                { "positionCost", this.safeNumber(listItem, "positionCost") },
            });
        }
        return fees;
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#cancelAllOrders
        * @description cancel all open orders
        * @param {string} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {object} [params.stop] When true, all the trigger orders will be cancelled
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            ((IDictionary<string,object>)request)["symbol"] = this.marketId(symbol);
        }
        object stop = this.safeValue2(parameters, "stop", "trigger");
        parameters = this.omit(parameters, new List<object>() {"stop", "trigger"});
        object response = null;
        if (isTrue(stop))
        {
            response = await this.privateDeleteStopOrders(this.extend(request, parameters));
        } else
        {
            response = await this.privateDeleteOrders(this.extend(request, parameters));
        }
        //
        //   {
        //       "code": "200000",
        //       "data": {
        //           "cancelledOrderIds": [
        //                "619714b8b6353000014c505a",
        //           ],
        //       },
        //   }
        //
        object data = this.safeValue(response, "data");
        object result = new List<object>() {};
        object cancelledOrderIds = this.safeValue(data, "cancelledOrderIds");
        object cancelledOrderIdsLength = getArrayLength(cancelledOrderIds);
        for (object i = 0; isLessThan(i, cancelledOrderIdsLength); postFixIncrement(ref i))
        {
            object cancelledOrderId = this.safeString(cancelledOrderIds, i);
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", cancelledOrderId },
                { "clientOrderId", null },
                { "timestamp", null },
                { "datetime", null },
                { "lastTradeTimestamp", null },
                { "symbol", null },
                { "type", null },
                { "side", null },
                { "price", null },
                { "amount", null },
                { "cost", null },
                { "average", null },
                { "filled", null },
                { "remaining", null },
                { "status", null },
                { "fee", null },
                { "trades", null },
                { "timeInForce", null },
                { "postOnly", null },
                { "stopPrice", null },
                { "info", response },
            });
        }
        return result;
    }

    public async virtual Task<object> fetchOrdersByStatus(object status, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchOrdersByStatus
        * @description fetches a list of orders placed on the exchange
        * @see https://futures-docs.poloniex.com/#get-order-list
        * @see https://futures-docs.poloniex.com/#get-untriggered-stop-order-list
        * @param {string} status 'active' or 'closed', only 'active' is valid for stop orders
        * @param {string} symbol unified symbol for the market to retrieve orders from
        * @param {int} [since] timestamp in ms of the earliest order to retrieve
        * @param {int} [limit] The maximum number of orders to retrieve
        * @param {object} [params] exchange specific parameters
        * @param {bool} [params.stop] set to true to retrieve untriggered stop orders
        * @param {int} [params.until] End time in ms
        * @param {string} [params.side] buy or sell
        * @param {string} [params.type] limit or market
        * @returns An [array of order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object stop = this.safeValue2(parameters, "stop", "trigger");
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, new List<object>() {"trigger", "stop", "until"});
        if (isTrue(isEqual(status, "closed")))
        {
            status = "done";
        }
        object request = new Dictionary<string, object>() {};
        if (!isTrue(stop))
        {
            ((IDictionary<string,object>)request)["status"] = ((bool) isTrue((isEqual(status, "open")))) ? "active" : "done";
        } else if (isTrue(!isEqual(status, "open")))
        {
            throw new BadRequest ((string)add(this.id, " fetchOrdersByStatus() can only fetch untriggered stop orders")) ;
        }
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startAt"] = since;
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["endAt"] = until;
        }
        object response = null;
        if (isTrue(stop))
        {
            response = await this.privateGetStopOrders(this.extend(request, parameters));
        } else
        {
            response = await this.privateGetOrders(this.extend(request, parameters));
        }
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //            "totalNum": 1,
        //            "totalPage": 1,
        //            "pageSize": 50,
        //            "currentPage": 1,
        //            "items": [
        //                {
        //                    "symbol": "ADAUSDTPERP",
        //                    "leverage": "1",
        //                    "hidden": false,
        //                    "forceHold": false,
        //                    "closeOrder": false,
        //                    "type": "limit",
        //                    "isActive": true,
        //                    "createdAt": 1678936920000,
        //                    "orderTime": 1678936920480905922,
        //                    "price": "0.3",
        //                    "iceberg": false,
        //                    "stopTriggered": false,
        //                    "id": "64128b582cc0710007a3c840",
        //                    "value": "3",
        //                    "timeInForce": "GTC",
        //                    "updatedAt": 1678936920000,
        //                    "side": "buy",
        //                    "stopPriceType": "",
        //                    "dealValue": "0",
        //                    "dealSize": 0,
        //                    "settleCurrency": "USDT",
        //                    "stp": "",
        //                    "filledValue": "0",
        //                    "postOnly": false,
        //                    "size": 1,
        //                    "stop": "",
        //                    "filledSize": 0,
        //                    "reduceOnly": false,
        //                    "marginType": 1,
        //                    "cancelExist": false,
        //                    "clientOid": "ba669f39-dfcc-4664-9801-a42d06e59c2e",
        //                    "status": "open"
        //                }
        //            ]
        //        }
        //    }
        //
        object responseData = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object orders = this.safeValue(responseData, "items", new List<object>() {});
        object ordersLength = getArrayLength(orders);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, ordersLength); postFixIncrement(ref i))
        {
            object order = getValue(orders, i);
            object orderStatus = this.safeString(order, "status");
            if (isTrue(isEqual(status, orderStatus)))
            {
                ((IList<object>)result).Add(getValue(orders, i));
            }
        }
        return this.parseOrders(result, market, since, limit);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://futures-docs.poloniex.com/#get-order-list
        * @see https://futures-docs.poloniex.com/#get-untriggered-stop-order-list
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] end time in ms
        * @param {string} [params.side] buy or sell
        * @param {string} [params.type] limit, or market
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("open", symbol, since, limit, parameters);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://futures-docs.poloniex.com/#get-order-list
        * @see https://futures-docs.poloniex.com/#get-untriggered-stop-order-list
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] end time in ms
        * @param {string} [params.side] buy or sell
        * @param {string} [params.type] limit, or market
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("closed", symbol, since, limit, parameters);
    }

    public async override Task<object> fetchOrder(object id = null, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://futures-docs.poloniex.com/#get-details-of-a-single-order
        * @see https://futures-docs.poloniex.com/#get-single-order-by-clientoid
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object response = null;
        if (isTrue(isEqual(id, null)))
        {
            object clientOrderId = this.safeString2(parameters, "clientOid", "clientOrderId");
            if (isTrue(isEqual(clientOrderId, null)))
            {
                throw new InvalidOrder ((string)add(this.id, " fetchOrder() requires parameter id or params.clientOid")) ;
            }
            ((IDictionary<string,object>)request)["clientOid"] = clientOrderId;
            parameters = this.omit(parameters, new List<object>() {"clientOid", "clientOrderId"});
            response = await this.privateGetClientOrderIdClientOid(this.extend(request, parameters));
        } else
        {
            ((IDictionary<string,object>)request)["order-id"] = id;
            response = await this.privateGetOrdersOrderId(this.extend(request, parameters));
        }
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //            "symbol": "ADAUSDTPERP",
        //            "leverage": "1",
        //            "hidden": false,
        //            "forceHold": false,
        //            "closeOrder": false,
        //            "type": "market",
        //            "isActive": false,
        //            "createdAt": 1678929587000,
        //            "orderTime": 1678929587248115582,
        //            "iceberg": false,
        //            "stopTriggered": false,
        //            "id": "64126eb38c6919000737dcdc",
        //            "value": "3.1783",
        //            "timeInForce": "GTC",
        //            "updatedAt": 1678929587000,
        //            "side": "buy",
        //            "stopPriceType": "",
        //            "dealValue": "3.1783",
        //            "dealSize": 1,
        //            "settleCurrency": "USDT",
        //            "trades": [
        //                {
        //                    "feePay": "0.00158915",
        //                    "tradeId": "64126eb36803eb0001ff99bc"
        //                }
        //            ],
        //            "endAt": 1678929587000,
        //            "stp": "",
        //            "filledValue": "3.1783",
        //            "postOnly": false,
        //            "size": 1,
        //            "stop": "",
        //            "filledSize": 1,
        //            "reduceOnly": false,
        //            "marginType": 1,
        //            "cancelExist": false,
        //            "clientOid": "d19e8fcb-2df4-44bc-afd4-67dd42048246",
        //            "status": "done"
        //        }
        //    }
        //
        object market = ((bool) isTrue((!isEqual(symbol, null)))) ? this.market(symbol) : null;
        object responseData = this.safeDict(response, "data");
        return this.parseOrder(responseData, market);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //            "orderId": "619717484f1d010001510cde",
        //        },
        //    }
        //
        // fetchOrder
        //
        //    {
        //        "symbol": "ADAUSDTPERP",
        //        "leverage": "1",
        //        "hidden": false,
        //        "forceHold": false,
        //        "closeOrder": false,
        //        "type": "market",
        //        "isActive": false,
        //        "createdAt": 1678929587000,
        //        "orderTime": 1678929587248115582,
        //        "iceberg": false,
        //        "stopTriggered": false,
        //        "id": "64126eb38c6919000737dcdc",
        //        "value": "3.1783",
        //        "timeInForce": "GTC",
        //        "updatedAt": 1678929587000,
        //        "side": "buy",
        //        "stopPriceType": "",
        //        "dealValue": "3.1783",
        //        "dealSize": 1,
        //        "settleCurrency": "USDT",
        //        "trades": [
        //            {
        //                "feePay": "0.00158915",
        //                "tradeId": "64126eb36803eb0001ff99bc"
        //            }
        //        ],
        //        "endAt": 1678929587000,
        //        "stp": "",
        //        "filledValue": "3.1783",
        //        "postOnly": false,
        //        "size": 1,
        //        "stop": "",
        //        "filledSize": 1,
        //        "reduceOnly": false,
        //        "marginType": 1,
        //        "cancelExist": false,
        //        "clientOid": "d19e8fcb-2df4-44bc-afd4-67dd42048246",
        //        "status": "done"
        //    }
        //
        // cancelOrder
        //
        //    {
        //        "cancelledOrderIds": [
        //            "619714b8b6353000014c505a",
        //        ],
        //        "cancelFailedOrders": [
        //            {
        //                "orderId": "63a9c5c2b9e7d70007eb0cd5",
        //                "orderState": "2"
        //            }
        //        ],
        //    },
        //
        object marketId = this.safeString(order, "symbol");
        market = this.safeMarket(marketId, market);
        object timestamp = this.safeInteger(order, "createdAt");
        // price is zero for market order
        // omitZero is called in safeOrder2
        object feeCurrencyId = this.safeString(order, "feeCurrency");
        object filled = this.safeString(order, "dealSize");
        object rawCost = this.safeString2(order, "dealFunds", "filledValue");
        object average = null;
        if (isTrue(Precise.stringGt(filled, "0")))
        {
            object contractSize = this.safeString(market, "contractSize");
            if (isTrue(getValue(market, "linear")))
            {
                average = Precise.stringDiv(rawCost, Precise.stringMul(contractSize, filled));
            } else
            {
                average = Precise.stringDiv(Precise.stringMul(contractSize, filled), rawCost);
            }
        }
        // precision reported by their api is 8 d.p.
        // const average = Precise.stringDiv (rawCost, Precise.stringMul (filled, market['contractSize']));
        // bool
        object isActive = this.safeBool(order, "isActive", false);
        object cancelExist = this.safeBool(order, "cancelExist", false);
        object status = ((bool) isTrue(isActive)) ? "open" : "closed";
        object id = this.safeString(order, "id");
        if (isTrue(inOp(order, "cancelledOrderIds")))
        {
            object cancelledOrderIds = this.safeValue(order, "cancelledOrderIds");
            id = this.safeString(cancelledOrderIds, 0);
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", this.safeString(order, "clientOid") },
            { "symbol", this.safeString(market, "symbol") },
            { "type", this.safeString(order, "type") },
            { "timeInForce", this.safeString(order, "timeInForce") },
            { "postOnly", this.safeValue(order, "postOnly") },
            { "side", this.safeString(order, "side") },
            { "amount", this.safeString(order, "size") },
            { "price", this.safeString(order, "price") },
            { "stopPrice", this.safeString(order, "stopPrice") },
            { "cost", this.safeString(order, "dealValue") },
            { "filled", filled },
            { "remaining", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "fee", new Dictionary<string, object>() {
                { "currency", this.safeCurrencyCode(feeCurrencyId) },
                { "cost", this.safeString(order, "fee") },
            } },
            { "status", ((bool) isTrue(cancelExist)) ? "canceled" : status },
            { "lastTradeTimestamp", null },
            { "average", average },
            { "trades", null },
        }, market);
    }

    public async override Task<object> fetchFundingRate(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchFundingRate
        * @description fetch the current funding rate
        * @see https://futures-docs.poloniex.com/#get-premium-index
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetFundingRateSymbolCurrent(this.extend(request, parameters));
        //
        //    {
        //        "symbol": ".BTCUSDTPERPFPI8H",
        //        "granularity": 28800000,
        //        "timePoint": 1558000800000,
        //        "value": 0.00375,
        //        "predictedValue": 0.00375
        //    }
        //
        object data = this.safeValue(response, "data");
        object fundingTimestamp = this.safeInteger(data, "timePoint");
        // the website displayes the previous funding rate as "funding rate"
        return new Dictionary<string, object>() {
            { "info", data },
            { "symbol", getValue(market, "symbol") },
            { "markPrice", null },
            { "indexPrice", null },
            { "interestRate", null },
            { "estimatedSettlePrice", null },
            { "timestamp", null },
            { "datetime", null },
            { "fundingRate", this.safeNumber(data, "predictedValue") },
            { "fundingTimestamp", null },
            { "fundingDatetime", null },
            { "nextFundingRate", null },
            { "nextFundingTimestamp", null },
            { "nextFundingDatetime", null },
            { "previousFundingRate", this.safeNumber(data, "value") },
            { "previousFundingTimestamp", fundingTimestamp },
            { "previousFundingDatetime", this.iso8601(fundingTimestamp) },
        };
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://futures-docs.poloniex.com/#get-fills
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} orderIdFills filles for a specific order (other parameters can be ignored if specified)
        * @param {string} side buy or sell
        * @param {string} type  limit, market, limit_stop or market_stop
        * @param {int} endAt end time (milisecond)
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startAt"] = since;
        }
        object response = await this.privateGetFills(this.extend(request, parameters));
        //
        //    {
        //        "code": "200000",
        //        "data": {
        //          "currentPage":1,
        //          "pageSize":1,
        //          "totalNum":251915,
        //          "totalPage":251915,
        //          "items":[
        //              {
        //                "symbol": "BTCUSDTPERP",  //Ticker symbol of the contract
        //                "tradeId": "5ce24c1f0c19fc3c58edc47c",  //Trade ID
        //                "orderId": "5ce24c16b210233c36ee321d",  // Order ID
        //                "side": "sell",  //Transaction side
        //                "liquidity": "taker",  //Liquidity- taker or maker
        //                "price": "8302",  //Filled price
        //                "size": 10,  //Filled amount
        //                "value": "0.001204529",  //Order value
        //                "feeRate": "0.0005",  //Floating fees
        //                "fixFee": "0.00000006",  //Fixed fees
        //                "feeCurrency": "XBT",  //Charging currency
        //                "stop": "",  //A mark to the stop order type
        //                "fee": "0.0000012022",  //Transaction fee
        //                "orderType": "limit",  //Order type
        //                "tradeType": "trade",  //Trade type (trade, liquidation, ADL or settlement)
        //                "createdAt": 1558334496000,  //Time the order created
        //                "settleCurrency": "XBT", //settlement currency
        //                "tradeTime": 1558334496000000000 //trade time in nanosecond
        //              }
        //          ]
        //        }
        //    }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object trades = this.safeList(data, "items", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> setMarginMode(object marginMode, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#setMarginMode
        * @description set margin mode to 'cross' or 'isolated'
        * @see https://futures-docs.poloniex.com/#change-margin-mode
        * @param {string} marginMode "0" (isolated) or "1" (cross)
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} response from the exchange
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " setMarginMode() requires a symbol argument")) ;
        }
        if (isTrue(isTrue(isTrue(isTrue((!isEqual(marginMode, "0"))) && isTrue((!isEqual(marginMode, "1")))) && isTrue((!isEqual(marginMode, "isolated")))) && isTrue((!isEqual(marginMode, "cross")))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " setMarginMode() marginMode must be 0/isolated or 1/cross")) ;
        }
        await this.loadMarkets();
        if (isTrue(isEqual(marginMode, "isolated")))
        {
            marginMode = "0";
        }
        if (isTrue(isEqual(marginMode, "cross")))
        {
            marginMode = "1";
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "marginType", this.parseToInt(marginMode) },
        };
        return await this.privatePostMarginTypeChange(request);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(this.urls, "api"), api);
        object versions = this.safeValue(this.options, "versions", new Dictionary<string, object>() {});
        object apiVersions = this.safeValue(versions, api, new Dictionary<string, object>() {});
        object methodVersions = this.safeValue(apiVersions, method, new Dictionary<string, object>() {});
        object defaultVersion = this.safeString(methodVersions, path, this.version);
        object version = this.safeString(parameters, "version", defaultVersion);
        object tail = add(add(add("/api/", version), "/"), this.implodeParams(path, parameters));
        url = add(url, tail);
        object query = this.omit(parameters, this.extractParams(path));
        object queryLength = getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(queryLength))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object endpoint = add("/api/v1/", this.implodeParams(path, parameters));
            object bodyEncoded = this.urlencode(query);
            if (isTrue(isTrue(!isEqual(method, "GET")) && isTrue(!isEqual(method, "HEAD"))))
            {
                body = query;
            } else
            {
                if (isTrue(isTrue(queryLength) && isTrue(!isEqual(bodyEncoded, ""))))
                {
                    url = add(url, add("?", bodyEncoded));
                    endpoint = add(endpoint, add("?", bodyEncoded));
                }
            }
            object now = ((object)this.milliseconds()).ToString();
            object endpart = "";
            if (isTrue(!isEqual(body, null)))
            {
                body = this.json(query);
                endpart = body;
            }
            object payload = add(add(add(now, method), endpoint), endpart);
            object signature = this.hmac(this.encode(payload), this.encode(this.secret), sha256, "base64");
            headers = new Dictionary<string, object>() {
                { "PF-API-SIGN", signature },
                { "PF-API-TIMESTAMP", now },
                { "PF-API-KEY", this.apiKey },
                { "PF-API-PASSPHRASE", this.password },
            };
            ((IDictionary<string,object>)headers)["Content-Type"] = "application/json";
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (!isTrue(response))
        {
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), body, body);
            return null;
        }
        //
        // bad
        //     { "code": "400100", "msg": "validation.createOrder.clientOidIsRequired" }
        // good
        //     { code: "200000", data: { ... }}
        //
        object errorCode = this.safeString(response, "code");
        object message = this.safeString(response, "msg", "");
        object feedback = add(add(this.id, " "), message);
        this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
        this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
        this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), body, feedback);
        return null;
    }
}
