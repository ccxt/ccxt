namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class idex : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "idex" },
            { "name", "IDEX" },
            { "countries", new List<object>() {"US"} },
            { "rateLimit", 1000 },
            { "version", "v3" },
            { "pro", true },
            { "certified", false },
            { "requiresWeb3", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "cancelOrders", false },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", true },
                { "createStopOrder", true },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", true },
                { "fetchDeposit", true },
                { "fetchDepositAddress", true },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchStatus", true },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTransactions", false },
                { "fetchWithdrawal", true },
                { "fetchWithdrawals", true },
                { "reduceMargin", false },
                { "sandbox", true },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", false },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1m" },
                { "5m", "5m" },
                { "15m", "15m" },
                { "30m", "30m" },
                { "1h", "1h" },
                { "6h", "6h" },
                { "1d", "1d" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "test", new Dictionary<string, object>() {
                    { "MATIC", "https://api-sandbox-matic.idex.io" },
                } },
                { "logo", "https://user-images.githubusercontent.com/51840849/94481303-2f222100-01e0-11eb-97dd-bc14c5943a86.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "MATIC", "https://api-matic.idex.io" },
                } },
                { "www", "https://idex.io" },
                { "doc", new List<object>() {"https://api-docs-v3.idex.io/"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ping", 1 },
                        { "time", 1 },
                        { "exchange", 1 },
                        { "assets", 1 },
                        { "markets", 1 },
                        { "tickers", 1 },
                        { "candles", 1 },
                        { "trades", 1 },
                        { "orderbook", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "user", 1 },
                        { "wallets", 1 },
                        { "balances", 1 },
                        { "orders", 0.1 },
                        { "fills", 0.1 },
                        { "deposits", 1 },
                        { "withdrawals", 1 },
                        { "wsToken", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "wallets", 1 },
                        { "orders", 0.1 },
                        { "orders/test", 0.1 },
                        { "withdrawals", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "orders", 0.1 },
                    } },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "defaultTimeInForce", "gtc" },
                { "defaultSelfTradePrevention", "cn" },
                { "network", "MATIC" },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "INVALID_ORDER_QUANTITY", typeof(InvalidOrder) },
                    { "INSUFFICIENT_FUNDS", typeof(InsufficientFunds) },
                    { "SERVICE_UNAVAILABLE", typeof(ExchangeNotAvailable) },
                    { "EXCEEDED_RATE_LIMIT", typeof(DDoSProtection) },
                    { "INVALID_PARAMETER", typeof(BadRequest) },
                    { "WALLET_NOT_ASSOCIATED", typeof(InvalidAddress) },
                    { "INVALID_WALLET_SIGNATURE", typeof(AuthenticationError) },
                } },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "walletAddress", true },
                { "privateKey", true },
                { "apiKey", true },
                { "secret", true },
            } },
            { "precisionMode", TICK_SIZE },
            { "paddingMode", PAD_WITH_ZERO },
            { "commonCurrencies", new Dictionary<string, object>() {} },
        });
    }

    public override object priceToPrecision(object symbol, object price)
    {
        //
        // we override priceToPrecision to fix the following issue
        // https://github.com/ccxt/ccxt/issues/13367
        // {"code":"INVALID_PARAMETER","message":"invalid value provided for request parameter \"price\": all quantities and prices must be below 100 billion, above 0, need to be provided as strings, and always require 4 decimals ending with 4 zeroes"}
        //
        object market = this.market(symbol);
        object info = this.safeValue(market, "info", new Dictionary<string, object>() {});
        object quoteAssetPrecision = this.safeInteger(info, "quoteAssetPrecision");
        price = this.decimalToPrecision(price, ROUND, getValue(getValue(market, "precision"), "price"), this.precisionMode);
        return this.decimalToPrecision(price, TRUNCATE, quoteAssetPrecision, DECIMAL_PLACES, PAD_WITH_ZERO);
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchMarkets
        * @description retrieves data on all markets for idex
        * @see https://api-docs-v3.idex.io/#get-markets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetMarkets(parameters);
        //
        //    [
        //        {
        //            "market": "ETH-USDC",
        //            "type": "hybrid",
        //            "status": "activeHybrid",
        //            "baseAsset": "ETH",
        //            "baseAssetPrecision": "8",
        //            "quoteAsset": "USDC",
        //            "quoteAssetPrecision": "8",
        //            "makerFeeRate": "0.0000",
        //            "takerFeeRate": "0.2500",
        //            "takerIdexFeeRate": "0.0500",
        //            "takerLiquidityProviderFeeRate": "0.2000",
        //            "tickSize": "0.01000000"
        //        },
        //    ]
        //
        object response2 = await this.publicGetExchange();
        //
        //    {
        //        "timeZone": "UTC",
        //        "serverTime": "1654460599952",
        //        "maticDepositContractAddress": "0x3253a7e75539edaeb1db608ce6ef9aa1ac9126b6",
        //        "maticCustodyContractAddress": "0x3bcc4eca0a40358558ca8d1bcd2d1dbde63eb468",
        //        "maticUsdPrice": "0.60",
        //        "gasPrice": "180",
        //        "volume24hUsd": "10015814.46",
        //        "totalVolumeUsd": "1589273533.28",
        //        "totalTrades": "1534904",
        //        "totalValueLockedUsd": "12041929.44",
        //        "idexStakingValueLockedUsd": "20133816.98",
        //        "idexTokenAddress": "0x9Cb74C8032b007466865f060ad2c46145d45553D",
        //        "idexUsdPrice": "0.07",
        //        "idexMarketCapUsd": "48012346.00",
        //        "makerFeeRate": "0.0000",
        //        "takerFeeRate": "0.0025",
        //        "takerIdexFeeRate": "0.0005",
        //        "takerLiquidityProviderFeeRate": "0.0020",
        //        "makerTradeMinimum": "10.00000000",
        //        "takerTradeMinimum": "1.00000000",
        //        "withdrawMinimum": "0.50000000",
        //        "liquidityAdditionMinimum": "0.50000000",
        //        "liquidityRemovalMinimum": "0.40000000",
        //        "blockConfirmationDelay": "64"
        //    }
        //
        object maker = this.safeNumber(response2, "makerFeeRate");
        object taker = this.safeNumber(response2, "takerFeeRate");
        object makerMin = this.safeString(response2, "makerTradeMinimum");
        object takerMin = this.safeString(response2, "takerTradeMinimum");
        object minCostETH = this.parseNumber(Precise.stringMin(makerMin, takerMin));
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object marketId = this.safeString(entry, "market");
            object baseId = this.safeString(entry, "baseAsset");
            object quoteId = this.safeString(entry, "quoteAsset");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object basePrecision = this.parseNumber(this.parsePrecision(this.safeString(entry, "baseAssetPrecision")));
            object quotePrecision = this.parseNumber(this.parsePrecision(this.safeString(entry, "quoteAssetPrecision")));
            object status = this.safeString(entry, "status");
            object minCost = null;
            if (isTrue(isEqual(quote, "ETH")))
            {
                minCost = minCostETH;
            }
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", marketId },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", (!isEqual(status, "inactive")) },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "taker", taker },
                { "maker", maker },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", basePrecision },
                    { "price", this.safeNumber(entry, "tickSize") },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", basePrecision },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", quotePrecision },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", minCost },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", entry },
            });
        }
        return result;
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://api-docs-v3.idex.io/#get-tickers
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        // [
        //   {
        //     "market": "DIL-ETH",
        //     "time": 1598367493008,
        //     "open": "0.09695361",
        //     "high": "0.10245881",
        //     "low": "0.09572507",
        //     "close": "0.09917079",
        //     "closeQuantity": "0.71320950",
        //     "baseVolume": "309.17380612",
        //     "quoteVolume": "30.57633981",
        //     "percentChange": "2.28",
        //     "numTrades": 205,
        //     "ask": "0.09910476",
        //     "bid": "0.09688340",
        //     "sequence": 3902
        //   }
        // ]
        object response = await this.publicGetTickers(this.extend(request, parameters));
        object ticker = this.safeDict(response, 0);
        return this.parseTicker(ticker, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://api-docs-v3.idex.io/#get-tickers
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // [
        //   {
        //     "market": "DIL-ETH",
        //     "time": 1598367493008,
        //     "open": "0.09695361",
        //     "high": "0.10245881",
        //     "low": "0.09572507",
        //     "close": "0.09917079",
        //     "closeQuantity": "0.71320950",
        //     "baseVolume": "309.17380612",
        //     "quoteVolume": "30.57633981",
        //     "percentChange": "2.28",
        //     "numTrades": 205,
        //     "ask": "0.09910476",
        //     "bid": "0.09688340",
        //     "sequence": 3902
        //   }, ...
        // ]
        object response = await this.publicGetTickers(parameters);
        return this.parseTickers(response, symbols);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        // {
        //   "market": "DIL-ETH",
        //   "time": 1598367493008,
        //   "open": "0.09695361",
        //   "high": "0.10245881",
        //   "low": "0.09572507",
        //   "close": "0.09917079",
        //   "closeQuantity": "0.71320950",
        //   "baseVolume": "309.17380612",
        //   "quoteVolume": "30.57633981",
        //   "percentChange": "2.28",
        //   "numTrades": 205,
        //   "ask": "0.09910476",
        //   "bid": "0.09688340",
        //   "sequence": 3902
        // }
        object marketId = this.safeString(ticker, "market");
        market = this.safeMarket(marketId, market, "-");
        object symbol = getValue(market, "symbol");
        object timestamp = this.safeInteger(ticker, "time");
        object close = this.safeString(ticker, "close");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", close },
            { "last", close },
            { "previousClose", null },
            { "change", null },
            { "percentage", this.safeString(ticker, "percentChange") },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "baseVolume") },
            { "quoteVolume", this.safeString(ticker, "quoteVolume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://api-docs-v3.idex.io/#get-candles
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "interval", timeframe },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = mathMin(limit, 1000);
        }
        object response = await this.publicGetCandles(this.extend(request, parameters));
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            // [
            //   {
            //     "start": 1598345580000,
            //     "open": "0.09771286",
            //     "high": "0.09771286",
            //     "low": "0.09771286",
            //     "close": "0.09771286",
            //     "volume": "1.45340410",
            //     "sequence": 3853
            //   }, ...
            // ]
            return this.parseOHLCVs(response, market, timeframe, since, limit);
        } else
        {
            //  {"nextTime":1595536440000}
            return new List<object>() {};
        }
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        // {
        //   "start": 1598345580000,
        //   "open": "0.09771286",
        //   "high": "0.09771286",
        //   "low": "0.09771286",
        //   "close": "0.09771286",
        //   "volume": "1.45340410",
        //   "sequence": 3853
        // }
        object timestamp = this.safeInteger(ohlcv, "start");
        object open = this.safeNumber(ohlcv, "open");
        object high = this.safeNumber(ohlcv, "high");
        object low = this.safeNumber(ohlcv, "low");
        object close = this.safeNumber(ohlcv, "close");
        object volume = this.safeNumber(ohlcv, "volume");
        return new List<object>() {timestamp, open, high, low, close, volume};
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://api-docs-v3.idex.io/#get-trades
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = mathMin(limit, 1000);
        }
        // [
        //   {
        //     "fillId": "b5467d00-b13e-3fa9-8216-dd66735550fc",
        //     "price": "0.09771286",
        //     "quantity": "1.45340410",
        //     "quoteQuantity": "0.14201627",
        //     "time": 1598345638994,
        //     "makerSide": "buy",
        //     "sequence": 3853
        //   }, ...
        // ]
        object response = await this.publicGetTrades(this.extend(request, parameters));
        return this.parseTrades(response, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // public trades
        //  {
        //      "fillId":"a4883704-850b-3c4b-8588-020b5e4c62f1",
        //      "price":"0.20377008",
        //      "quantity":"47.58448728",
        //      "quoteQuantity":"9.69629509",
        //      "time":1642091300873,
        //      "makerSide":"buy",
        //      "type":"hybrid",        // one of either: "orderBook", "hybrid", or "pool"
        //      "sequence":31876
        //  }
        //
        // private trades
        //  {
        //      "fillId":"83429066-9334-3582-b710-78858b2f0d6b",
        //      "price":"0.20717368",
        //      "quantity":"15.00000000",
        //      "quoteQuantity":"3.10760523",
        //      "orderBookQuantity":"0.00000003",
        //      "orderBookQuoteQuantity":"0.00000001",
        //      "poolQuantity":"14.99999997",
        //      "poolQuoteQuantity":"3.10760522",
        //      "time":1642083351215,
        //      "makerSide":"sell",
        //      "sequence":31795,
        //      "market":"IDEX-USDC",
        //      "orderId":"4fe993f0-747b-11ec-bd08-79d4a0b6e47c",
        //      "side":"buy",
        //      "fee":"0.03749989",
        //      "feeAsset":"IDEX",
        //      "gas":"0.40507261",
        //      "liquidity":"taker",
        //      "type":"hybrid",
        //      "txId":"0x69f6d82a762d12e3201efd0b3e9cc1969351e3c6ea3cf07c47c66bf24a459815",
        //      "txStatus":"mined"
        //  }
        //
        object id = this.safeString(trade, "fillId");
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "quantity");
        object costString = this.safeString(trade, "quoteQuantity");
        object timestamp = this.safeInteger(trade, "time");
        object marketId = this.safeString(trade, "market");
        object symbol = this.safeSymbol(marketId, market, "-");
        // this code handles the duality of public vs private trades
        object makerSide = this.safeString(trade, "makerSide");
        object oppositeSide = ((bool) isTrue((isEqual(makerSide, "buy")))) ? "sell" : "buy";
        object side = this.safeString(trade, "side", oppositeSide);
        object takerOrMaker = this.safeString(trade, "liquidity", "taker");
        object feeCostString = this.safeString(trade, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyId = this.safeString(trade, "feeAsset");
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", this.safeCurrencyCode(feeCurrencyId) },
            };
        }
        object orderId = this.safeString(trade, "orderId");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "id", id },
            { "order", orderId },
            { "type", "limit" },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", priceString },
            { "amount", amountString },
            { "cost", costString },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://api-docs-v3.idex.io/#get-api-account
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object nonce = this.uuidv1();
        object request = new Dictionary<string, object>() {
            { "nonce", nonce },
        };
        object response = null;
        response = await this.privateGetUser(this.extend(request, parameters));
        //
        //     {
        //         "depositEnabled": true,
        //         "orderEnabled": true,
        //         "cancelEnabled": true,
        //         "withdrawEnabled": true,
        //         "totalPortfolioValueUsd": "0.00",
        //         "makerFeeRate": "0.0000",
        //         "takerFeeRate": "0.0025",
        //         "takerIdexFeeRate": "0.0005",
        //         "takerLiquidityProviderFeeRate": "0.0020"
        //     }
        //
        object maker = this.safeNumber(response, "makerFeeRate");
        object taker = this.safeNumber(response, "takerFeeRate");
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", response },
                { "symbol", symbol },
                { "maker", maker },
                { "taker", taker },
                { "percentage", true },
                { "tierBased", false },
            };
        }
        return result;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://api-docs-v3.idex.io/#get-order-books
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "level", 2 },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        // {
        //   "sequence": 36416753,
        //   "bids": [
        //     [ '0.09672815', "8.22284267", 1 ],
        //     [ '0.09672814', "1.83685554", 1 ],
        //     [ '0.09672143', "4.10962617", 1 ],
        //     [ '0.09658884', "4.03863759", 1 ],
        //     [ '0.09653781', "3.35730684", 1 ],
        //     [ '0.09624660', "2.54163586", 1 ],
        //     [ '0.09617490', "1.93065030", 1 ]
        //   ],
        //   "asks": [
        //     [ '0.09910476', "3.22840154", 1 ],
        //     [ '0.09940587', "3.39796593", 1 ],
        //     [ '0.09948189', "4.25088898", 1 ],
        //     [ '0.09958362', "2.42195784", 1 ],
        //     [ '0.09974393', "4.25234367", 1 ],
        //     [ '0.09995250', "3.40192141", 1 ]
        //   ]
        // }
        object response = await this.publicGetOrderbook(this.extend(request, parameters));
        object nonce = this.safeInteger(response, "sequence");
        return new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "nonce", nonce },
            { "bids", this.parseSide(response, "bids") },
            { "asks", this.parseSide(response, "asks") },
        };
    }

    public virtual object parseSide(object book, object side)
    {
        object bookSide = this.safeValue(book, side, new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(bookSide)); postFixIncrement(ref i))
        {
            object order = getValue(bookSide, i);
            object price = this.safeNumber(order, 0);
            object amount = this.safeNumber(order, 1);
            object orderCount = this.safeInteger(order, 2);
            ((IList<object>)result).Add(new List<object>() {price, amount, orderCount});
        }
        object descending = isEqual(side, "bids");
        return this.sortBy(result, 0, descending);
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @see https://api-docs-v3.idex.io/#get-assets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetAssets(parameters);
        //
        //     [
        //        {
        //            "name": "Ethereum",
        //            "symbol": "ETH",
        //            "contractAddress": "0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619",
        //            "assetDecimals": "18",
        //            "exchangeDecimals": "8",
        //            "maticPrice": "3029.38503483"
        //        },
        //     ]
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object name = this.safeString(entry, "name");
            object currencyId = this.safeString(entry, "symbol");
            object code = this.safeCurrencyCode(currencyId);
            object precision = this.parseNumber(this.parsePrecision(this.safeString(entry, "exchangeDecimals")));
            ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", currencyId },
                { "code", code },
                { "info", entry },
                { "type", null },
                { "name", name },
                { "active", null },
                { "deposit", null },
                { "withdraw", null },
                { "fee", null },
                { "precision", precision },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", precision },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", precision },
                        { "max", null },
                    } },
                } },
            };
        }
        return result;
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object currencyId = this.safeString(entry, "asset");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["total"] = this.safeString(entry, "quantity");
            ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "availableForTrade");
            ((IDictionary<string,object>)account)["used"] = this.safeString(entry, "locked");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://api-docs-v3.idex.io/#get-balances
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object nonce1 = this.uuidv1();
        object request = new Dictionary<string, object>() {
            { "nonce", nonce1 },
            { "wallet", this.walletAddress },
        };
        // [
        //   {
        //     "asset": "DIL",
        //     "quantity": "0.00000000",
        //     "availableForTrade": "0.00000000",
        //     "locked": "0.00000000",
        //     "usdValue": null
        //   }, ...
        // ]
        object extendedRequest = this.extend(request, parameters);
        if (isTrue(isEqual(getValue(extendedRequest, "wallet"), null)))
        {
            throw new BadRequest ((string)add(this.id, " fetchBalance() wallet is undefined, set this.walletAddress or \"address\" in params")) ;
        }
        object response = null;
        try
        {
            response = await this.privateGetBalances(extendedRequest);
        } catch(Exception e)
        {
            if (isTrue(e is InvalidAddress))
            {
                object walletAddress = getValue(extendedRequest, "wallet");
                await this.associateWallet(walletAddress);
                response = await this.privateGetBalances(extendedRequest);
            } else
            {
                throw e;
            }
        }
        return this.parseBalance(response);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://api-docs-v3.idex.io/#get-fills
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {
            { "nonce", this.uuidv1() },
            { "wallet", this.walletAddress },
        };
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["market"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        // [
        //   {
        //     "fillId": "48582d10-b9bb-3c4b-94d3-e67537cf2472",
        //     "price": "0.09905990",
        //     "quantity": "0.40000000",
        //     "quoteQuantity": "0.03962396",
        //     "time": 1598873478762,
        //     "makerSide": "sell",
        //     "sequence": 5053,
        //     "market": "DIL-ETH",
        //     "orderId": "7cdc8e90-eb7d-11ea-9e60-4118569f6e63",
        //     "side": "buy",
        //     "fee": "0.00080000",
        //     "feeAsset": "DIL",
        //     "gas": "0.00857497",
        //     "liquidity": "taker",
        //     "txId": "0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65",
        //     "txStatus": "mined"
        //   }
        // ]
        object extendedRequest = this.extend(request, parameters);
        if (isTrue(isEqual(getValue(extendedRequest, "wallet"), null)))
        {
            throw new BadRequest ((string)add(this.id, " fetchMyTrades() walletAddress is undefined, set this.walletAddress or \"address\" in params")) ;
        }
        object response = null;
        try
        {
            response = await this.privateGetFills(extendedRequest);
        } catch(Exception e)
        {
            if (isTrue(e is InvalidAddress))
            {
                object walletAddress = getValue(extendedRequest, "wallet");
                await this.associateWallet(walletAddress);
                response = await this.privateGetFills(extendedRequest);
            } else
            {
                throw e;
            }
        }
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://api-docs-v3.idex.io/#get-orders
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        return await this.fetchOrdersHelper(symbol, null, null, this.extend(request, parameters));
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://api-docs-v3.idex.io/#get-orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "closed", false },
        };
        return await this.fetchOrdersHelper(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://api-docs-v3.idex.io/#get-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "closed", true },
        };
        return await this.fetchOrdersHelper(symbol, since, limit, this.extend(request, parameters));
    }

    public async virtual Task<object> fetchOrdersHelper(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "nonce", this.uuidv1() },
            { "wallet", this.walletAddress },
        };
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["market"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetOrders(this.extend(request, parameters));
        // fetchClosedOrders / fetchOpenOrders
        // [
        //   {
        //     "market": "DIL-ETH",
        //     "orderId": "7cdc8e90-eb7d-11ea-9e60-4118569f6e63",
        //     "wallet": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
        //     "time": 1598873478650,
        //     "status": "filled",
        //     "type": "limit",
        //     "side": "buy",
        //     "originalQuantity": "0.40000000",
        //     "executedQuantity": "0.40000000",
        //     "cumulativeQuoteQuantity": "0.03962396",
        //     "avgExecutionPrice": "0.09905990",
        //     "price": "1.00000000",
        //     "fills": [
        //       {
        //         "fillId": "48582d10-b9bb-3c4b-94d3-e67537cf2472",
        //         "price": "0.09905990",
        //         "quantity": "0.40000000",
        //         "quoteQuantity": "0.03962396",
        //         "time": 1598873478650,
        //         "makerSide": "sell",
        //         "sequence": 5053,
        //         "fee": "0.00080000",
        //         "feeAsset": "DIL",
        //         "gas": "0.00857497",
        //         "liquidity": "taker",
        //         "txId": "0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65",
        //         "txStatus": "mined"
        //       }
        //     ]
        //   }
        // ]
        // fetchOrder
        // { market: "DIL-ETH",
        //   "orderId": "7cdc8e90-eb7d-11ea-9e60-4118569f6e63",
        //   "wallet": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
        //   "time": 1598873478650,
        //   "status": "filled",
        //   "type": "limit",
        //   "side": "buy",
        //   "originalQuantity": "0.40000000",
        //   "executedQuantity": "0.40000000",
        //   "cumulativeQuoteQuantity": "0.03962396",
        //   "avgExecutionPrice": "0.09905990",
        //   "price": "1.00000000",
        //   "fills":
        //    [ { fillId: "48582d10-b9bb-3c4b-94d3-e67537cf2472",
        //        "price": "0.09905990",
        //        "quantity": "0.40000000",
        //        "quoteQuantity": "0.03962396",
        //        "time": 1598873478650,
        //        "makerSide": "sell",
        //        "sequence": 5053,
        //        "fee": "0.00080000",
        //        "feeAsset": "DIL",
        //        "gas": "0.00857497",
        //        "liquidity": "taker",
        //        "txId": "0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65",
        //        "txStatus": "mined" } ] }
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            return ((object)this.parseOrders(response, market, since, limit));
        } else
        {
            return this.parseOrder(response, market);
        }
    }

    public virtual object parseOrderStatus(object status)
    {
        // https://docs.idex.io/#order-states-amp-lifecycle
        object statuses = new Dictionary<string, object>() {
            { "active", "open" },
            { "partiallyFilled", "open" },
            { "rejected", "canceled" },
            { "filled", "closed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //     {
        //         "market": "DIL-ETH",
        //         "orderId": "7cdc8e90-eb7d-11ea-9e60-4118569f6e63",
        //         "wallet": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
        //         "time": 1598873478650,
        //         "status": "filled",
        //         "type": "limit",
        //         "side": "buy",
        //         "originalQuantity": "0.40000000",
        //         "executedQuantity": "0.40000000",
        //         "cumulativeQuoteQuantity": "0.03962396",
        //         "avgExecutionPrice": "0.09905990",
        //         "price": "1.00000000",
        //         "fills": [
        //             {
        //             "fillId": "48582d10-b9bb-3c4b-94d3-e67537cf2472",
        //             "price": "0.09905990",
        //             "quantity": "0.40000000",
        //             "quoteQuantity": "0.03962396",
        //             "time": 1598873478650,
        //             "makerSide": "sell",
        //             "sequence": 5053,
        //             "fee": "0.00080000",
        //             "feeAsset": "DIL",
        //             "gas": "0.00857497",
        //             "liquidity": "taker",
        //             "txId": "0xeaa02b112c0b8b61bc02fa1776a2b39d6c614e287c1af90df0a2e591da573e65",
        //             "txStatus": "mined"
        //             }
        //         ]
        //     }
        //
        object timestamp = this.safeInteger(order, "time");
        object fills = this.safeValue(order, "fills", new List<object>() {});
        object id = this.safeString(order, "orderId");
        object clientOrderId = this.safeString(order, "clientOrderId");
        object marketId = this.safeString(order, "market");
        object side = this.safeString(order, "side");
        object symbol = this.safeSymbol(marketId, market, "-");
        object type = this.safeString(order, "type");
        object amount = this.safeString(order, "originalQuantity");
        object filled = this.safeString(order, "executedQuantity");
        object average = this.safeString(order, "avgExecutionPrice");
        object price = this.safeString(order, "price");
        object rawStatus = this.safeString(order, "status");
        object timeInForce = this.safeStringUpper(order, "timeInForce");
        object status = this.parseOrderStatus(rawStatus);
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", timeInForce },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "amount", amount },
            { "cost", null },
            { "average", average },
            { "filled", filled },
            { "remaining", null },
            { "status", status },
            { "fee", null },
            { "trades", fills },
        }, market);
    }

    public async virtual Task<object> associateWallet(object walletAddress, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object nonce = this.uuidv1();
        object noPrefix = this.remove0xPrefix(walletAddress);
        object byteArray = new List<object> {this.base16ToBinary(nonce), this.base16ToBinary(noPrefix)};
        object binary = this.binaryConcatArray(byteArray);
        object hash = this.hash(binary, keccak, "hex");
        object signature = this.signMessageString(hash, this.privateKey);
        // {
        //   "address": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
        //   "totalPortfolioValueUsd": "0.00",
        //   "time": 1598468353626
        // }
        object request = new Dictionary<string, object>() {
            { "parameters", new Dictionary<string, object>() {
                { "nonce", nonce },
                { "wallet", walletAddress },
            } },
            { "signature", signature },
        };
        object result = await this.privatePostWallets(request);
        return result;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#createOrder
        * @description create a trade order, https://docs.idex.io/#create-order
        * @see https://api-docs-v3.idex.io/#create-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {bool} [params.test] set to true to test an order, no order will be created but the request will be validated
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object testOrder = this.safeBool(parameters, "test", false);
        parameters = this.omit(parameters, "test");
        object market = this.market(symbol);
        object nonce = this.uuidv1();
        object typeEnum = null;
        object stopLossTypeEnums = new Dictionary<string, object>() {
            { "stopLoss", 3 },
            { "stopLossLimit", 4 },
            { "takeProfit", 5 },
            { "takeProfitLimit", 6 },
        };
        object stopPriceString = null;
        if (isTrue(isTrue(isTrue((isEqual(type, "stopLossLimit"))) || isTrue((isEqual(type, "takeProfitLimit")))) || isTrue((inOp(parameters, "stopPrice")))))
        {
            if (!isTrue((inOp(parameters, "stopPrice"))))
            {
                throw new BadRequest ((string)add(add(add(this.id, " createOrder() stopPrice is a required parameter for "), type), "orders")) ;
            }
            stopPriceString = this.priceToPrecision(symbol, getValue(parameters, "stopPrice"));
        }
        object limitTypeEnums = new Dictionary<string, object>() {
            { "limit", 1 },
            { "limitMaker", 2 },
        };
        object priceString = null;
        object typeLower = ((string)type).ToLower();
        object limitOrder = isGreaterThanOrEqual(getIndexOf(typeLower, "limit"), 0);
        if (isTrue(inOp(limitTypeEnums, type)))
        {
            typeEnum = getValue(limitTypeEnums, type);
            priceString = this.priceToPrecision(symbol, price);
        } else if (isTrue(inOp(stopLossTypeEnums, type)))
        {
            typeEnum = getValue(stopLossTypeEnums, type);
            priceString = this.priceToPrecision(symbol, price);
        } else if (isTrue(isEqual(type, "market")))
        {
            typeEnum = 0;
        } else
        {
            throw new BadRequest ((string)add(add(add(this.id, " "), type), " is not a valid order type")) ;
        }
        object amountEnum = 0; // base quantity
        if (isTrue(inOp(parameters, "quoteOrderQuantity")))
        {
            if (isTrue(!isEqual(type, "market")))
            {
                throw new NotSupported ((string)add(add(add(this.id, " createOrder() quoteOrderQuantity is not supported for "), type), " orders, only supported for market orders")) ;
            }
            amountEnum = 1;
            amount = this.safeNumber(parameters, "quoteOrderQuantity");
        }
        object sideEnum = ((bool) isTrue((isEqual(side, "buy")))) ? 0 : 1;
        object walletBytes = this.remove0xPrefix(this.walletAddress);
        object network = this.safeString(this.options, "network", "ETH");
        object orderVersion = this.getSupportedMapping(network, new Dictionary<string, object>() {
            { "ETH", 1 },
            { "BSC", 2 },
            { "MATIC", 4 },
        });
        object amountString = this.amountToPrecision(symbol, amount);
        // https://docs.idex.io/#time-in-force
        object timeInForceEnums = new Dictionary<string, object>() {
            { "gtc", 0 },
            { "ioc", 2 },
            { "fok", 3 },
        };
        object defaultTimeInForce = this.safeString(this.options, "defaultTimeInForce", "gtc");
        object timeInForce = this.safeString(parameters, "timeInForce", defaultTimeInForce);
        object timeInForceEnum = null;
        if (isTrue(inOp(timeInForceEnums, timeInForce)))
        {
            timeInForceEnum = getValue(timeInForceEnums, timeInForce);
        } else
        {
            object allOptions = new List<object>(((IDictionary<string,object>)timeInForceEnums).Keys);
            object asString = String.Join(", ", ((IList<object>)allOptions).ToArray());
            throw new BadRequest ((string)add(add(add(add(this.id, " "), timeInForce), " is not a valid timeInForce, please choose one of "), asString)) ;
        }
        // https://docs.idex.io/#self-trade-prevention
        object selfTradePreventionEnums = new Dictionary<string, object>() {
            { "dc", 0 },
            { "co", 1 },
            { "cn", 2 },
            { "cb", 3 },
        };
        object defaultSelfTradePrevention = this.safeString(this.options, "defaultSelfTradePrevention", "cn");
        object selfTradePrevention = this.safeString(parameters, "selfTradePrevention", defaultSelfTradePrevention);
        object selfTradePreventionEnum = null;
        if (isTrue(inOp(selfTradePreventionEnums, selfTradePrevention)))
        {
            selfTradePreventionEnum = getValue(selfTradePreventionEnums, selfTradePrevention);
        } else
        {
            object allOptions = new List<object>(((IDictionary<string,object>)selfTradePreventionEnums).Keys);
            object asString = String.Join(", ", ((IList<object>)allOptions).ToArray());
            throw new BadRequest ((string)add(add(add(add(this.id, " "), selfTradePrevention), " is not a valid selfTradePrevention, please choose one of "), asString)) ;
        }
        object byteArray = new List<object> {this.numberToBE(orderVersion, 1), this.base16ToBinary(nonce), this.base16ToBinary(walletBytes), this.encode(getValue(market, "id")), this.numberToBE(typeEnum, 1), this.numberToBE(sideEnum, 1), this.encode(amountString), this.numberToBE(amountEnum, 1)};
        if (isTrue(limitOrder))
        {
            object encodedPrice = this.encode(priceString);
            ((IList<object>)byteArray).Add(encodedPrice);
        }
        if (isTrue(inOp(stopLossTypeEnums, type)))
        {
            object encodedPrice = this.encode(isTrue(stopPriceString) || isTrue(priceString));
            ((IList<object>)byteArray).Add(encodedPrice);
        }
        object clientOrderId = this.safeString(parameters, "clientOrderId");
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            ((IList<object>)byteArray).Add(this.encode(clientOrderId));
        }
        object after = new List<object> {this.numberToBE(timeInForceEnum, 1), this.numberToBE(selfTradePreventionEnum, 1), this.numberToBE(0, 8)};
        object allBytes = this.arrayConcat(byteArray, after);
        object binary = this.binaryConcatArray(allBytes);
        object hash = this.hash(binary, keccak, "hex");
        object signature = this.signMessageString(hash, this.privateKey);
        object request = new Dictionary<string, object>() {
            { "parameters", new Dictionary<string, object>() {
                { "nonce", nonce },
                { "market", getValue(market, "id") },
                { "side", side },
                { "type", type },
                { "wallet", this.walletAddress },
                { "selfTradePrevention", selfTradePrevention },
            } },
            { "signature", signature },
        };
        if (isTrue(!isEqual(type, "market")))
        {
            ((IDictionary<string,object>)getValue(request, "parameters"))["timeInForce"] = timeInForce;
        }
        if (isTrue(limitOrder))
        {
            ((IDictionary<string,object>)getValue(request, "parameters"))["price"] = priceString;
        }
        if (isTrue(inOp(stopLossTypeEnums, type)))
        {
            ((IDictionary<string,object>)getValue(request, "parameters"))["stopPrice"] = isTrue(stopPriceString) || isTrue(priceString);
        }
        if (isTrue(isEqual(amountEnum, 0)))
        {
            ((IDictionary<string,object>)getValue(request, "parameters"))["quantity"] = amountString;
        } else
        {
            ((IDictionary<string,object>)getValue(request, "parameters"))["quoteOrderQuantity"] = amountString;
        }
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            ((IDictionary<string,object>)getValue(request, "parameters"))["clientOrderId"] = clientOrderId;
        }
        // {
        //   "market": "DIL-ETH",
        //   "orderId": "7cdc8e90-eb7d-11ea-9e60-4118569f6e63",
        //   "wallet": "0x0AB991497116f7F5532a4c2f4f7B1784488628e1",
        //   "time": 1598873478650,
        //   "status": "filled",
        //   "type": "limit",
        //   "side": "buy",
        //   "originalQuantity": "0.40000000",
        //   "executedQuantity": "0.40000000",
        //   "cumulativeQuoteQuantity": "0.03962396",
        //   "price": "1.00000000",
        //   "fills": [
        //     {
        //       "fillId": "48582d10-b9bb-3c4b-94d3-e67537cf2472",
        //       "price": "0.09905990",
        //       "quantity": "0.40000000",
        //       "quoteQuantity": "0.03962396",
        //       "time": 1598873478650,
        //       "makerSide": "sell",
        //       "sequence": 5053,
        //       "fee": "0.00080000",
        //       "feeAsset": "DIL",
        //       "gas": "0.00857497",
        //       "liquidity": "taker",
        //       "txStatus": "pending"
        //     }
        //   ],
        //   "avgExecutionPrice": "0.09905990"
        // }
        // we don't use extend here because it is a signed endpoint
        object response = null;
        if (isTrue(testOrder))
        {
            response = await this.privatePostOrdersTest(request);
        } else
        {
            response = await this.privatePostOrders(request);
        }
        return this.parseOrder(response, market);
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#withdraw
        * @description make a withdrawal
        * @see https://api-docs-v3.idex.io/#withdraw-funds
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object nonce = this.uuidv1();
        object amountString = this.currencyToPrecision(code, amount);
        object currency = this.currency(code);
        object walletBytes = this.remove0xPrefix(this.walletAddress);
        object byteArray = new List<object> {this.base16ToBinary(nonce), this.base16ToBinary(walletBytes), this.encode(getValue(currency, "id")), this.encode(amountString), this.numberToBE(1, 1)};
        object binary = this.binaryConcatArray(byteArray);
        object hash = this.hash(binary, keccak, "hex");
        object signature = this.signMessageString(hash, this.privateKey);
        object request = new Dictionary<string, object>() {
            { "parameters", new Dictionary<string, object>() {
                { "nonce", nonce },
                { "wallet", address },
                { "asset", getValue(currency, "id") },
                { "quantity", amountString },
            } },
            { "signature", signature },
        };
        object response = await this.privatePostWithdrawals(request);
        //
        //     {
        //         "withdrawalId": "a61dcff0-ec4d-11ea-8b83-c78a6ecb3180",
        //         "asset": "ETH",
        //         "assetContractAddress": "0x0000000000000000000000000000000000000000",
        //         "quantity": "0.20000000",
        //         "time": 1598962883190,
        //         "fee": "0.00024000",
        //         "txStatus": "pending",
        //         "txId": null
        //     }
        //
        return this.parseTransaction(response, currency);
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#cancelAllOrders
        * @description cancel all open orders
        * @see https://api-docs-v3.idex.io/#cancel-order
        * @param {string} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object nonce = this.uuidv1();
        object request = new Dictionary<string, object>() {
            { "parameters", new Dictionary<string, object>() {
                { "nonce", nonce },
                { "wallet", this.walletAddress },
            } },
        };
        object walletBytes = this.remove0xPrefix(this.walletAddress);
        object byteArray = new List<object> {this.base16ToBinary(nonce), this.base16ToBinary(walletBytes)};
        if (isTrue(!isEqual(market, null)))
        {
            ((IList<object>)byteArray).Add(this.encode(getValue(market, "id")));
            ((IDictionary<string,object>)getValue(request, "parameters"))["market"] = getValue(market, "id");
        }
        object binary = this.binaryConcatArray(byteArray);
        object hash = this.hash(binary, keccak, "hex");
        object signature = this.signMessageString(hash, this.privateKey);
        ((IDictionary<string,object>)request)["signature"] = signature;
        // [ { orderId: "688336f0-ec50-11ea-9842-b332f8a34d0e" } ]
        object response = await this.privateDeleteOrders(this.extend(request, parameters));
        return this.parseOrders(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#cancelOrder
        * @description cancels an open order
        * @see https://api-docs-v3.idex.io/#cancel-order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object nonce = this.uuidv1();
        object walletBytes = this.remove0xPrefix(this.walletAddress);
        object byteArray = new List<object> {this.base16ToBinary(nonce), this.base16ToBinary(walletBytes), this.encode(id)};
        object binary = this.binaryConcatArray(byteArray);
        object hash = this.hash(binary, keccak, "hex");
        object signature = this.signMessageString(hash, this.privateKey);
        object request = new Dictionary<string, object>() {
            { "parameters", new Dictionary<string, object>() {
                { "nonce", nonce },
                { "wallet", this.walletAddress },
                { "orderId", id },
            } },
            { "signature", signature },
        };
        // [ { orderId: "688336f0-ec50-11ea-9842-b332f8a34d0e" } ]
        object response = await this.privateDeleteOrders(this.extend(request, parameters));
        object canceledOrder = this.safeDict(response, 0);
        return this.parseOrder(canceledOrder, market);
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        object errorCode = this.safeString(response, "code");
        object message = this.safeString(response, "message");
        if (isTrue(!isEqual(errorCode, null)))
        {
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, message);
            throw new ExchangeError ((string)add(add(this.id, " "), message)) ;
        }
        return null;
    }

    public async virtual Task<object> fetchDeposit(object id, object code = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchDeposit
        * @description fetch information on a deposit
        * @see https://api-docs-v3.idex.io/#get-deposits
        * @param {string} id deposit id
        * @param {string} code not used by idex fetchDeposit ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object nonce = this.uuidv1();
        object request = new Dictionary<string, object>() {
            { "nonce", nonce },
            { "wallet", this.walletAddress },
            { "depositId", id },
        };
        object response = await this.privateGetDeposits(this.extend(request, parameters));
        return this.parseTransaction(response);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://api-docs-v3.idex.io/#get-deposits
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        parameters = this.extend(new Dictionary<string, object>() {
            { "method", "privateGetDeposits" },
        }, parameters);
        return await this.fetchTransactionsHelper(code, since, limit, parameters);
    }

    public async override Task<object> fetchStatus(object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchStatus
        * @description the latest known information on the availability of the exchange API
        * @see https://api-docs-v3.idex.io/#get-ping
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetPing(parameters);
        return new Dictionary<string, object>() {
            { "status", "ok" },
            { "updated", null },
            { "eta", null },
            { "url", null },
            { "info", response },
        };
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://api-docs-v3.idex.io/#get-time
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetTime(parameters);
        //
        //    { serverTime: "1655258263236" }
        //
        return this.safeInteger(response, "serverTime");
    }

    public async virtual Task<object> fetchWithdrawal(object id, object code = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchWithdrawal
        * @description fetch data on a currency withdrawal via the withdrawal id
        * @see https://api-docs-v3.idex.io/#get-withdrawals
        * @param {string} id withdrawal id
        * @param {string} code not used by idex.fetchWithdrawal
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object nonce = this.uuidv1();
        object request = new Dictionary<string, object>() {
            { "nonce", nonce },
            { "wallet", this.walletAddress },
            { "withdrawalId", id },
        };
        object response = await this.privateGetWithdrawals(this.extend(request, parameters));
        return this.parseTransaction(response);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://api-docs-v3.idex.io/#get-withdrawals
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        parameters = this.extend(new Dictionary<string, object>() {
            { "method", "privateGetWithdrawals" },
        }, parameters);
        return await this.fetchTransactionsHelper(code, since, limit, parameters);
    }

    public async virtual Task<object> fetchTransactionsHelper(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object nonce = this.uuidv1();
        object request = new Dictionary<string, object>() {
            { "nonce", nonce },
            { "wallet", this.walletAddress },
        };
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
            ((IDictionary<string,object>)request)["asset"] = getValue(currency, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        // [
        //   {
        //     "depositId": "e9970cc0-eb6b-11ea-9e89-09a5ebc1f98e",
        //     "asset": "ETH",
        //     "quantity": "1.00000000",
        //     "txId": "0xcd4aac3171d7131cc9e795568c67938675185ac17641553ef54c8a7c294c8142",
        //     "txTime": 1598865853000,
        //     "confirmationTime": 1598865930231
        //   }
        // ]
        object method = getValue(parameters, "method");
        parameters = this.omit(parameters, "method");
        object response = null;
        if (isTrue(isEqual(method, "privateGetDeposits")))
        {
            response = await this.privateGetDeposits(this.extend(request, parameters));
        } else if (isTrue(isEqual(method, "privateGetWithdrawals")))
        {
            response = await this.privateGetWithdrawals(this.extend(request, parameters));
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchTransactionsHelper() not support this method")) ;
        }
        return this.parseTransactions(response, currency, since, limit);
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "mined", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // fetchDeposits
        //
        //     {
        //         "depositId": "e9970cc0-eb6b-11ea-9e89-09a5ebc1f98f",
        //         "asset": "ETH",
        //         "quantity": "1.00000000",
        //         "txId": "0xcd4aac3171d7131cc9e795568c67938675185ac17641553ef54c8a7c294c8142",
        //         "txTime": 1598865853000,
        //         "confirmationTime": 1598865930231
        //     }
        //
        // fetchWithdrwalas
        //
        //     {
        //         "withdrawalId": "a62d8760-ec4d-11ea-9fa6-47904c19499b",
        //         "asset": "ETH",
        //         "assetContractAddress": "0x0000000000000000000000000000000000000000",
        //         "quantity": "0.20000000",
        //         "time": 1598962883288,
        //         "fee": "0.00024000",
        //         "txId": "0x305e9cdbaa85ad029f50578d13d31d777c085de573ed5334d95c19116d8c03ce",
        //         "txStatus": "mined"
        //     }
        //
        // withdraw
        //
        //     {
        //         "withdrawalId": "a61dcff0-ec4d-11ea-8b83-c78a6ecb3180",
        //         "asset": "ETH",
        //         "assetContractAddress": "0x0000000000000000000000000000000000000000",
        //         "quantity": "0.20000000",
        //         "time": 1598962883190,
        //         "fee": "0.00024000",
        //         "txStatus": "pending",
        //         "txId": null
        //     }
        //
        object type = null;
        if (isTrue(inOp(transaction, "depositId")))
        {
            type = "deposit";
        } else if (isTrue(isTrue((inOp(transaction, "withdrawId"))) || isTrue((inOp(transaction, "withdrawalId")))))
        {
            type = "withdrawal";
        }
        object id = this.safeString2(transaction, "depositId", "withdrawId");
        id = this.safeString(transaction, "withdrawalId", id);
        object code = this.safeCurrencyCode(this.safeString(transaction, "asset"), currency);
        object amount = this.safeNumber(transaction, "quantity");
        object txid = this.safeString(transaction, "txId");
        object timestamp = this.safeInteger2(transaction, "txTime", "time");
        object fee = null;
        if (isTrue(inOp(transaction, "fee")))
        {
            fee = new Dictionary<string, object>() {
                { "cost", this.safeNumber(transaction, "fee") },
                { "currency", "ETH" },
            };
        }
        object rawStatus = this.safeString(transaction, "txStatus");
        object status = this.parseTransactionStatus(rawStatus);
        object updated = this.safeInteger(transaction, "confirmationTime");
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", txid },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "address", null },
            { "addressTo", null },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "type", type },
            { "amount", amount },
            { "currency", code },
            { "status", status },
            { "updated", updated },
            { "comment", null },
            { "internal", null },
            { "fee", fee },
        };
    }

    public override object calculateRateLimiterCost(object api, object method, object path, object parameters, object config = null)
    {
        config ??= new Dictionary<string, object>();
        object hasApiKey = (!isEqual(this.apiKey, null));
        object hasSecret = (!isEqual(this.secret, null));
        object hasWalletAddress = (!isEqual(this.walletAddress, null));
        object hasPrivateKey = (!isEqual(this.privateKey, null));
        object defaultCost = this.safeValue(config, "cost", 1);
        object authenticated = isTrue(isTrue(isTrue(hasApiKey) && isTrue(hasSecret)) && isTrue(hasWalletAddress)) && isTrue(hasPrivateKey);
        return ((bool) isTrue(authenticated)) ? (divide(defaultCost, 2)) : defaultCost;
    }

    public async override Task<object> fetchDepositAddress(object code = null, object parameters = null)
    {
        /**
        * @method
        * @name idex#fetchDepositAddress
        * @description fetch the Polygon address of the wallet
        * @see https://api-docs-v3.idex.io/#get-wallets
        * @param {string} code not used by idex
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {};
        ((IDictionary<string,object>)request)["nonce"] = this.uuidv1();
        object response = await this.privateGetWallets(this.extend(request, parameters));
        //
        //    [
        //        {
        //            address: "0x37A1827CA64C94A26028bDCb43FBDCB0bf6DAf5B",
        //            totalPortfolioValueUsd: "0.00",
        //            time: "1678342148086"
        //        },
        //        {
        //            address: "0x0Ef3456E616552238B0c562d409507Ed6051A7b3",
        //            totalPortfolioValueUsd: "15.90",
        //            time: "1691697811659"
        //        }
        //    ]
        //
        return this.parseDepositAddress(response);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        //
        //    [
        //        {
        //            address: "0x37A1827CA64C94A26028bDCb43FBDCB0bf6DAf5B",
        //            totalPortfolioValueUsd: "0.00",
        //            time: "1678342148086"
        //        },
        //        {
        //            address: "0x0Ef3456E616552238B0c562d409507Ed6051A7b3",
        //            totalPortfolioValueUsd: "15.90",
        //            time: "1691697811659"
        //        }
        //    ]
        //
        object length = getArrayLength(depositAddress);
        object entry = this.safeDict(depositAddress, subtract(length, 1));
        object address = this.safeString(entry, "address");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "info", depositAddress },
            { "currency", null },
            { "address", address },
            { "tag", null },
            { "network", "MATIC" },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object network = this.safeString(this.options, "network", "ETH");
        object version = this.safeString(this.options, "version", "v1");
        object url = add(add(add(add(getValue(getValue(this.urls, "api"), network), "/"), version), "/"), path);
        object keys = new List<object>(((IDictionary<string,object>)parameters).Keys);
        object length = getArrayLength(keys);
        object query = null;
        if (isTrue(isGreaterThan(length, 0)))
        {
            if (isTrue(isEqual(method, "GET")))
            {
                query = this.urlencode(parameters);
                url = add(add(url, "?"), query);
            } else
            {
                body = this.json(parameters);
            }
        }
        headers = new Dictionary<string, object>() {
            { "Content-Type", "application/json" },
        };
        if (isTrue(!isEqual(this.apiKey, null)))
        {
            ((IDictionary<string,object>)headers)["IDEX-API-Key"] = this.apiKey;
        }
        if (isTrue(isEqual(api, "private")))
        {
            object payload = null;
            if (isTrue(isEqual(method, "GET")))
            {
                payload = query;
            } else
            {
                payload = body;
            }
            ((IDictionary<string,object>)headers)["IDEX-HMAC-Signature"] = this.hmac(this.encode(payload), this.encode(this.secret), sha256, "hex");
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object remove0xPrefix(object hexData)
    {
        if (isTrue(isEqual(slice(hexData, 0, 2), "0x")))
        {
            return slice(hexData, 2, null);
        } else
        {
            return hexData;
        }
    }

    public virtual object hashMessage(object message)
    {
        // takes a hex encoded message
        object binaryMessage = this.base16ToBinary(this.remove0xPrefix(message));
        object prefix = this.encode(add("Ethereum Signed Message:\n", getValue(binaryMessage, "byteLength")));
        return add("0x", this.hash(this.binaryConcat(prefix, binaryMessage), keccak, "hex"));
    }

    public virtual object signHash(object hash, object privateKey)
    {
        object signature = ecdsa(slice(hash, -64, null), slice(privateKey, -64, null), secp256k1, null);
        return new Dictionary<string, object>() {
            { "r", add("0x", getValue(signature, "r")) },
            { "s", add("0x", getValue(signature, "s")) },
            { "v", add(27, getValue(signature, "v")) },
        };
    }

    public virtual object signMessage(object message, object privateKey)
    {
        return this.signHash(this.hashMessage(message), slice(privateKey, -64, null));
    }

    public virtual object signMessageString(object message, object privateKey)
    {
        // still takes the input as a hex string
        // same as above but returns a string instead of an object
        object signature = this.signMessage(message, privateKey);
        return add(add(getValue(signature, "r"), this.remove0xPrefix(getValue(signature, "s"))), this.binaryToBase16(this.numberToBE(getValue(signature, "v"), 1)));
    }
}
