namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class bitflyer : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "bitflyer" },
            { "name", "bitFlyer" },
            { "countries", new List<object>() {"JP"} },
            { "version", "v1" },
            { "rateLimit", 1000 },
            { "hostname", "bitflyer.com" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", null },
                { "future", null },
                { "option", false },
                { "cancelAllOrders", null },
                { "cancelOrder", true },
                { "createOrder", true },
                { "fetchBalance", true },
                { "fetchClosedOrders", "emulated" },
                { "fetchDeposits", true },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMyTrades", true },
                { "fetchOpenOrders", "emulated" },
                { "fetchOrder", "emulated" },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchPositionMode", false },
                { "fetchPositions", true },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "fetchTradingFee", true },
                { "fetchTradingFees", false },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "fetchWithdrawals", true },
                { "transfer", false },
                { "withdraw", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/28051642-56154182-660e-11e7-9b0d-6042d1e6edd8.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://api.{hostname}" },
                } },
                { "www", "https://bitflyer.com" },
                { "doc", "https://lightning.bitflyer.com/docs?lang=en" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"getmarkets/usa", "getmarkets/eu", "getmarkets", "getboard", "getticker", "getexecutions", "gethealth", "getboardstate", "getchats"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"getpermissions", "getbalance", "getbalancehistory", "getcollateral", "getcollateralhistory", "getcollateralaccounts", "getaddresses", "getcoinins", "getcoinouts", "getbankaccounts", "getdeposits", "getwithdrawals", "getchildorders", "getparentorders", "getparentorder", "getexecutions", "getpositions", "gettradingcommission"} },
                    { "post", new List<object>() {"sendcoin", "withdraw", "sendchildorder", "cancelchildorder", "sendparentorder", "cancelparentorder", "cancelallchildorders"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("0.002") },
                    { "taker", this.parseNumber("0.002") },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "-2", typeof(OnMaintenance) },
                } },
            } },
        });
    }

    public virtual object parseExpiryDate(object expiry)
    {
        object day = slice(expiry, 0, 2);
        object monthName = slice(expiry, 2, 5);
        object year = slice(expiry, 5, 9);
        object months = new Dictionary<string, object>() {
            { "JAN", "01" },
            { "FEB", "02" },
            { "MAR", "03" },
            { "APR", "04" },
            { "MAY", "05" },
            { "JUN", "06" },
            { "JUL", "07" },
            { "AUG", "08" },
            { "SEP", "09" },
            { "OCT", "10" },
            { "NOV", "11" },
            { "DEC", "12" },
        };
        object month = this.safeString(months, monthName);
        return this.parse8601(add(add(add(add(add(year, "-"), month), "-"), day), "T00:00:00Z"));
    }

    public override object safeMarket(object marketId = null, object market = null, object delimiter = null, object marketType = null)
    {
        // Bitflyer has a different type of conflict in markets, because
        // some of their ids (ETH/BTC and BTC/JPY) are duplicated in US, EU and JP.
        // Since they're the same we just need to return one
        return base.safeMarket(marketId, market, delimiter, "spot");
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchMarkets
        * @description retrieves data on all markets for bitflyer
        * @see https://lightning.bitflyer.com/docs?lang=en#market-list
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object jp_markets = await this.publicGetGetmarkets(parameters);
        //
        //     [
        //         // spot
        //         { "product_code": "BTC_JPY", "market_type": "Spot" },
        //         { "product_code": "BCH_BTC", "market_type": "Spot" },
        //         // forex swap
        //         { "product_code": "FX_BTC_JPY", "market_type": "FX" },
        //         // future
        //         {
        //             "product_code": "BTCJPY11FEB2022",
        //             "alias": "BTCJPY_MAT1WK",
        //             "market_type": "Futures",
        //         },
        //     ];
        //
        object us_markets = await this.publicGetGetmarketsUsa(parameters);
        //
        //     [
        //         { "product_code": "BTC_USD", "market_type": "Spot" },
        //         { "product_code": "BTC_JPY", "market_type": "Spot" },
        //     ];
        //
        object eu_markets = await this.publicGetGetmarketsEu(parameters);
        //
        //     [
        //         { "product_code": "BTC_EUR", "market_type": "Spot" },
        //         { "product_code": "BTC_JPY", "market_type": "Spot" },
        //     ];
        //
        object markets = this.arrayConcat(jp_markets, us_markets);
        markets = this.arrayConcat(markets, eu_markets);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object market = getValue(markets, i);
            object id = this.safeString(market, "product_code");
            object currencies = ((string)id).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
            object marketType = this.safeString(market, "market_type");
            object swap = (isEqual(marketType, "FX"));
            object future = (isEqual(marketType, "Futures"));
            object spot = !isTrue(swap) && !isTrue(future);
            object type = "spot";
            object settle = null;
            object baseId = null;
            object quoteId = null;
            object expiry = null;
            if (isTrue(spot))
            {
                baseId = this.safeString(currencies, 0);
                quoteId = this.safeString(currencies, 1);
            } else if (isTrue(swap))
            {
                type = "swap";
                baseId = this.safeString(currencies, 1);
                quoteId = this.safeString(currencies, 2);
            } else if (isTrue(future))
            {
                object alias = this.safeString(market, "alias");
                if (isTrue(isEqual(alias, null)))
                {
                    // no alias:
                    // { product_code: 'BTCJPY11MAR2022', market_type: 'Futures' }
                    // TODO this will break if there are products with 4 chars
                    baseId = slice(id, 0, 3);
                    quoteId = slice(id, 3, 6);
                    // last 9 chars are expiry date
                    object expiryDate = slice(id, -9, null);
                    expiry = this.parseExpiryDate(expiryDate);
                } else
                {
                    object splitAlias = ((string)alias).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
                    object currencyIds = this.safeString(splitAlias, 0);
                    baseId = slice(currencyIds, 0, -3);
                    quoteId = slice(currencyIds, -3, null);
                    object splitId = ((string)id).Split(new [] {((string)currencyIds)}, StringSplitOptions.None).ToList<object>();
                    object expiryDate = this.safeString(splitId, 1);
                    expiry = this.parseExpiryDate(expiryDate);
                }
                type = "future";
            }
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object symbol = add(add(bs, "/"), quote);
            object taker = getValue(getValue(this.fees, "trading"), "taker");
            object maker = getValue(getValue(this.fees, "trading"), "maker");
            object contract = isTrue(swap) || isTrue(future);
            if (isTrue(contract))
            {
                maker = 0;
                taker = 0;
                settle = "JPY";
                symbol = add(add(symbol, ":"), settle);
                if (isTrue(future))
                {
                    symbol = add(add(symbol, "-"), this.yymmdd(expiry));
                }
            }
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", symbol },
                { "base", bs },
                { "quote", quote },
                { "settle", settle },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", type },
                { "spot", spot },
                { "margin", false },
                { "swap", swap },
                { "future", future },
                { "option", false },
                { "active", true },
                { "contract", contract },
                { "linear", ((bool) isTrue(spot)) ? null : true },
                { "inverse", ((bool) isTrue(spot)) ? null : false },
                { "taker", taker },
                { "maker", maker },
                { "contractSize", null },
                { "expiry", expiry },
                { "expiryDatetime", this.iso8601(expiry) },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", null },
                    { "price", null },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", market },
            });
        }
        return result;
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object balance = getValue(response, i);
            object currencyId = this.safeString(balance, "currency_code");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "amount");
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "available");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://lightning.bitflyer.com/docs?lang=en#get-account-asset-balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetGetbalance(parameters);
        //
        //     [
        //         {
        //             "currency_code": "JPY",
        //             "amount": 1024078,
        //             "available": 508000
        //         },
        //         {
        //             "currency_code": "BTC",
        //             "amount": 10.24,
        //             "available": 4.12
        //         },
        //         {
        //             "currency_code": "ETH",
        //             "amount": 20.48,
        //             "available": 16.38
        //         }
        //     ]
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://lightning.bitflyer.com/docs?lang=en#order-book
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_code", getValue(market, "id") },
        };
        object orderbook = await this.publicGetGetboard(this.extend(request, parameters));
        return this.parseOrderBook(orderbook, getValue(market, "symbol"), null, "bids", "asks", "price", "size");
    }

    public override object parseTicker(object ticker, object market = null)
    {
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.parse8601(this.safeString(ticker, "timestamp"));
        object last = this.safeString(ticker, "ltp");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", null },
            { "low", null },
            { "bid", this.safeString(ticker, "best_bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "best_ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume_by_product") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://lightning.bitflyer.com/docs?lang=en#ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_code", getValue(market, "id") },
        };
        object response = await this.publicGetGetticker(this.extend(request, parameters));
        return this.parseTicker(response, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public) v1
        //
        //      {
        //          "id":2278466664,
        //          "side":"SELL",
        //          "price":56810.7,
        //          "size":0.08798,
        //          "exec_date":"2021-11-19T11:46:39.323",
        //          "buy_child_order_acceptance_id":"JRF20211119-114209-236525",
        //          "sell_child_order_acceptance_id":"JRF20211119-114639-236919"
        //      }
        //
        // fetchMyTrades
        //
        //      {
        //          "id": 37233,
        //          "side": "BUY",
        //          "price": 33470,
        //          "size": 0.01,
        //          "exec_date": "2015-07-07T09:57:40.397",
        //          "child_order_id": "JOR20150707-060559-021935",
        //          "child_order_acceptance_id": "JRF20150707-060559-396699"
        //          "commission": 0,
        //      },
        //
        object side = this.safeStringLower(trade, "side");
        if (isTrue(!isEqual(side, null)))
        {
            if (isTrue(isLessThan(((string)side).Length, 1)))
            {
                side = null;
            }
        }
        object order = null;
        if (isTrue(!isEqual(side, null)))
        {
            object idInner = add(side, "_child_order_acceptance_id");
            if (isTrue(inOp(trade, idInner)))
            {
                order = getValue(trade, idInner);
            }
        }
        if (isTrue(isEqual(order, null)))
        {
            order = this.safeString(trade, "child_order_acceptance_id");
        }
        object timestamp = this.parse8601(this.safeString(trade, "exec_date"));
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "size");
        object id = this.safeString(trade, "id");
        market = this.safeMarket(null, market);
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", order },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://lightning.bitflyer.com/docs?lang=en#list-executions
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_code", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.publicGetGetexecutions(this.extend(request, parameters));
        //
        //    [
        //     {
        //       "id": 39287,
        //       "side": "BUY",
        //       "price": 31690,
        //       "size": 27.04,
        //       "exec_date": "2015-07-08T02:43:34.823",
        //       "buy_child_order_acceptance_id": "JRF20150707-200203-452209",
        //       "sell_child_order_acceptance_id": "JRF20150708-024334-060234"
        //     },
        //    ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchTradingFee(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchTradingFee
        * @description fetch the trading fees for a market
        * @see https://lightning.bitflyer.com/docs?lang=en#get-trading-commission
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_code", getValue(market, "id") },
        };
        object response = await this.privateGetGettradingcommission(this.extend(request, parameters));
        //
        //   {
        //       commission_rate: '0.0020'
        //   }
        //
        object fee = this.safeNumber(response, "commission_rate");
        return new Dictionary<string, object>() {
            { "info", response },
            { "symbol", getValue(market, "symbol") },
            { "maker", fee },
            { "taker", fee },
            { "percentage", null },
            { "tierBased", null },
        };
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#createOrder
        * @description create a trade order
        * @see https://lightning.bitflyer.com/docs?lang=en#send-a-new-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "product_code", this.marketId(symbol) },
            { "child_order_type", ((string)type).ToUpper() },
            { "side", ((string)side).ToUpper() },
            { "price", price },
            { "size", amount },
        };
        object result = await this.privatePostSendchildorder(this.extend(request, parameters));
        // { "status": - 200, "error_message": "Insufficient funds", "data": null }
        object id = this.safeString(result, "child_order_acceptance_id");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "info", result },
        });
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#cancelOrder
        * @description cancels an open order
        * @see https://lightning.bitflyer.com/docs?lang=en#cancel-order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "product_code", this.marketId(symbol) },
            { "child_order_acceptance_id", id },
        };
        return await this.privatePostCancelchildorder(this.extend(request, parameters));
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "ACTIVE", "open" },
            { "COMPLETED", "closed" },
            { "CANCELED", "canceled" },
            { "EXPIRED", "canceled" },
            { "REJECTED", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        object timestamp = this.parse8601(this.safeString(order, "child_order_date"));
        object price = this.safeString(order, "price");
        object amount = this.safeString(order, "size");
        object filled = this.safeString(order, "executed_size");
        object remaining = this.safeString(order, "outstanding_size");
        object status = this.parseOrderStatus(this.safeString(order, "child_order_state"));
        object type = this.safeStringLower(order, "child_order_type");
        object side = this.safeStringLower(order, "side");
        object marketId = this.safeString(order, "product_code");
        object symbol = this.safeSymbol(marketId, market);
        object fee = null;
        object feeCost = this.safeNumber(order, "total_commission");
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", null },
                { "rate", null },
            };
        }
        object id = this.safeString(order, "child_order_acceptance_id");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "info", order },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "amount", amount },
            { "filled", filled },
            { "remaining", remaining },
            { "fee", fee },
            { "average", null },
            { "trades", null },
        }, market);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://lightning.bitflyer.com/docs?lang=en#list-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        limit ??= 100;
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_code", getValue(market, "id") },
            { "count", limit },
        };
        object response = await this.privateGetGetchildorders(this.extend(request, parameters));
        object orders = this.parseOrders(response, market, since, limit);
        if (isTrue(!isEqual(symbol, null)))
        {
            orders = this.filterBy(orders, "symbol", symbol);
        }
        return orders;
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://lightning.bitflyer.com/docs?lang=en#list-orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        limit ??= 100;
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "child_order_state", "ACTIVE" },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://lightning.bitflyer.com/docs?lang=en#list-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        limit ??= 100;
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "child_order_state", "COMPLETED" },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://lightning.bitflyer.com/docs?lang=en#list-orders
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrder() requires a symbol argument")) ;
        }
        object orders = await this.fetchOrders(symbol);
        object ordersById = this.indexBy(orders, "id");
        if (isTrue(inOp(ordersById, id)))
        {
            return getValue(ordersById, id);
        }
        throw new OrderNotFound ((string)add(add(this.id, " No order found with id "), id)) ;
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://lightning.bitflyer.com/docs?lang=en#list-executions
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "product_code", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.privateGetGetexecutions(this.extend(request, parameters));
        //
        //    [
        //     {
        //       "id": 37233,
        //       "side": "BUY",
        //       "price": 33470,
        //       "size": 0.01,
        //       "exec_date": "2015-07-07T09:57:40.397",
        //       "child_order_id": "JOR20150707-060559-021935",
        //       "child_order_acceptance_id": "JRF20150707-060559-396699"
        //       "commission": 0,
        //     },
        //    ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchPositions(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchPositions
        * @description fetch all open positions
        * @see https://lightning.bitflyer.com/docs?lang=en#get-open-interest-summary
        * @param {string[]} symbols list of unified market symbols
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbols, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchPositions() requires a `symbols` argument, exactly one symbol in an array")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "product_code", this.marketIds(symbols) },
        };
        object response = await this.privateGetGetpositions(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "product_code": "FX_BTC_JPY",
        //             "side": "BUY",
        //             "price": 36000,
        //             "size": 10,
        //             "commission": 0,
        //             "swap_point_accumulate": -35,
        //             "require_collateral": 120000,
        //             "open_date": "2015-11-03T10:04:45.011",
        //             "leverage": 3,
        //             "pnl": 965,
        //             "sfd": -0.5
        //         }
        //     ]
        //
        // todo unify parsePosition/parsePositions
        return response;
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#withdraw
        * @description make a withdrawal
        * @see https://lightning.bitflyer.com/docs?lang=en#withdrawing-funds
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkAddress(address);
        await this.loadMarkets();
        if (isTrue(isTrue(isTrue(!isEqual(code, "JPY")) && isTrue(!isEqual(code, "USD"))) && isTrue(!isEqual(code, "EUR"))))
        {
            throw new ExchangeError ((string)add(add(add(this.id, " allows withdrawing JPY, USD, EUR only, "), code), " is not supported")) ;
        }
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency_code", getValue(currency, "id") },
            { "amount", amount },
        };
        object response = await this.privatePostWithdraw(this.extend(request, parameters));
        //
        //     {
        //         "message_id": "69476620-5056-4003-bcbe-42658a2b041b"
        //     }
        //
        return this.parseTransaction(response, currency);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://lightning.bitflyer.com/docs?lang=en#get-crypto-assets-deposit-history
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit; // default 100
        }
        object response = await this.privateGetGetcoinins(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": 100,
        //             "order_id": "CDP20151227-024141-055555",
        //             "currency_code": "BTC",
        //             "amount": 0.00002,
        //             "address": "1WriteySQufKZ2pVuM1oMhPrTtTVFq35j",
        //             "tx_hash": "9f92ee65a176bb9545f7becb8706c50d07d4cee5ffca34d8be3ef11d411405ae",
        //             "status": "COMPLETED",
        //             "event_date": "2015-11-27T08:59:20.301"
        //         }
        //     ]
        //
        return this.parseTransactions(response, currency, since, limit);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitflyer#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://lightning.bitflyer.com/docs?lang=en#get-crypto-assets-transaction-history
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit; // default 100
        }
        object response = await this.privateGetGetcoinouts(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": 500,
        //             "order_id": "CWD20151224-014040-077777",
        //             "currency_code": "BTC",
        //             "amount": 0.1234,
        //             "address": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
        //             "tx_hash": "724c07dfd4044abcb390b0412c3e707dd5c4f373f0a52b3bd295ce32b478c60a",
        //             "fee": 0.0005,
        //             "additional_fee": 0.0001,
        //             "status": "COMPLETED",
        //             "event_date": "2015-12-24T01:40:40.397"
        //         }
        //     ]
        //
        return this.parseTransactions(response, currency, since, limit);
    }

    public virtual object parseDepositStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "PENDING", "pending" },
            { "COMPLETED", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseWithdrawalStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "PENDING", "pending" },
            { "COMPLETED", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // fetchDeposits
        //
        //     {
        //         "id": 100,
        //         "order_id": "CDP20151227-024141-055555",
        //         "currency_code": "BTC",
        //         "amount": 0.00002,
        //         "address": "1WriteySQufKZ2pVuM1oMhPrTtTVFq35j",
        //         "tx_hash": "9f92ee65a176bb9545f7becb8706c50d07d4cee5ffca34d8be3ef11d411405ae",
        //         "status": "COMPLETED",
        //         "event_date": "2015-11-27T08:59:20.301"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "id": 500,
        //         "order_id": "CWD20151224-014040-077777",
        //         "currency_code": "BTC",
        //         "amount": 0.1234,
        //         "address": "1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa",
        //         "tx_hash": "724c07dfd4044abcb390b0412c3e707dd5c4f373f0a52b3bd295ce32b478c60a",
        //         "fee": 0.0005,
        //         "additional_fee": 0.0001,
        //         "status": "COMPLETED",
        //         "event_date": "2015-12-24T01:40:40.397"
        //     }
        //
        // withdraw
        //
        //     {
        //         "message_id": "69476620-5056-4003-bcbe-42658a2b041b"
        //     }
        //
        object id = this.safeString2(transaction, "id", "message_id");
        object address = this.safeString(transaction, "address");
        object currencyId = this.safeString(transaction, "currency_code");
        object code = this.safeCurrencyCode(currencyId, currency);
        object timestamp = this.parse8601(this.safeString(transaction, "event_date"));
        object amount = this.safeNumber(transaction, "amount");
        object txId = this.safeString(transaction, "tx_hash");
        object rawStatus = this.safeString(transaction, "status");
        object type = null;
        object status = null;
        object fee = null;
        if (isTrue(inOp(transaction, "fee")))
        {
            type = "withdrawal";
            status = this.parseWithdrawalStatus(rawStatus);
            object feeCost = this.safeString(transaction, "fee");
            object additionalFee = this.safeString(transaction, "additional_fee");
            fee = new Dictionary<string, object>() {
                { "currency", code },
                { "cost", this.parseNumber(Precise.stringAdd(feeCost, additionalFee)) },
            };
        } else
        {
            type = "deposit";
            status = this.parseDepositStatus(rawStatus);
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", txId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "address", address },
            { "addressTo", address },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "type", type },
            { "amount", amount },
            { "currency", code },
            { "status", status },
            { "updated", null },
            { "comment", null },
            { "internal", null },
            { "fee", fee },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object request = add(add("/", this.version), "/");
        if (isTrue(isEqual(api, "private")))
        {
            request = add(request, "me/");
        }
        request = add(request, path);
        if (isTrue(isEqual(method, "GET")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                request = add(request, add("?", this.urlencode(parameters)));
            }
        }
        object baseUrl = this.implodeHostname(getValue(getValue(this.urls, "api"), "rest"));
        object url = add(baseUrl, request);
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object auth = String.Join("", ((IList<object>)new List<object>() {nonce, method, request}).ToArray());
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                if (isTrue(!isEqual(method, "GET")))
                {
                    body = this.json(parameters);
                    auth = add(auth, body);
                }
            }
            headers = new Dictionary<string, object>() {
                { "ACCESS-KEY", this.apiKey },
                { "ACCESS-TIMESTAMP", nonce },
                { "ACCESS-SIGN", this.hmac(this.encode(auth), this.encode(this.secret), sha256) },
                { "Content-Type", "application/json" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to the default error handler
        }
        object feedback = add(add(this.id, " "), body);
        // i.e. {"status":-2,"error_message":"Under maintenance","data":null}
        object errorMessage = this.safeString(response, "error_message");
        object statusCode = this.safeNumber(response, "status");
        if (isTrue(!isEqual(errorMessage, null)))
        {
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), statusCode, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), errorMessage, feedback);
        }
        return null;
    }
}
