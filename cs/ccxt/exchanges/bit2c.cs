namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class bit2c : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "bit2c" },
            { "name", "Bit2C" },
            { "countries", new List<object>() {"IL"} },
            { "rateLimit", 3000 },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", false },
                { "ws", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27766119-3593220e-5ece-11e7-8b3a-5a041f6bcc3f.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://bit2c.co.il" },
                } },
                { "www", "https://www.bit2c.co.il" },
                { "referral", "https://bit2c.co.il/Aff/63bfed10-e359-420c-ab5a-ad368dab0baf" },
                { "doc", new List<object>() {"https://www.bit2c.co.il/home/api", "https://github.com/OferE/bit2c"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"Exchanges/{pair}/Ticker", "Exchanges/{pair}/orderbook", "Exchanges/{pair}/trades", "Exchanges/{pair}/lasttrades"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"Merchant/CreateCheckout", "Funds/AddCoinFundsRequest", "Order/AddFund", "Order/AddOrder", "Order/GetById", "Order/AddOrderMarketPriceBuy", "Order/AddOrderMarketPriceSell", "Order/CancelOrder", "Order/AddCoinFundsRequest", "Order/AddStopOrder", "Payment/GetMyId", "Payment/Send", "Payment/Pay"} },
                    { "get", new List<object>() {"Account/Balance", "Account/Balance/v2", "Order/MyOrders", "Order/GetById", "Order/AccountHistory", "Order/OrderHistory"} },
                } },
            } },
            { "markets", new Dictionary<string, object>() {
                { "BTC/NIS", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "BtcNis" },
                    { "symbol", "BTC/NIS" },
                    { "base", "BTC" },
                    { "quote", "NIS" },
                    { "baseId", "Btc" },
                    { "quoteId", "Nis" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "ETH/NIS", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "EthNis" },
                    { "symbol", "ETH/NIS" },
                    { "base", "ETH" },
                    { "quote", "NIS" },
                    { "baseId", "Eth" },
                    { "quoteId", "Nis" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "LTC/NIS", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "LtcNis" },
                    { "symbol", "LTC/NIS" },
                    { "base", "LTC" },
                    { "quote", "NIS" },
                    { "baseId", "Ltc" },
                    { "quoteId", "Nis" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "USDC/NIS", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "UsdcNis" },
                    { "symbol", "USDC/NIS" },
                    { "base", "USDC" },
                    { "quote", "NIS" },
                    { "baseId", "Usdc" },
                    { "quoteId", "Nis" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", true },
                    { "percentage", true },
                    { "maker", this.parseNumber("0.025") },
                    { "taker", this.parseNumber("0.03") },
                    { "tiers", new Dictionary<string, object>() {
                        { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.03")}, new List<object> {this.parseNumber("20000"), this.parseNumber("0.0275")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.025")}, new List<object> {this.parseNumber("75000"), this.parseNumber("0.0225")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.02")}, new List<object> {this.parseNumber("250000"), this.parseNumber("0.015")}, new List<object> {this.parseNumber("500000"), this.parseNumber("0.0125")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0.01")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.008")}, new List<object> {this.parseNumber("2000000"), this.parseNumber("0.006")}, new List<object> {this.parseNumber("3000000"), this.parseNumber("0.004")}, new List<object> {this.parseNumber("4000000"), this.parseNumber("0.002")}} },
                        { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.025")}, new List<object> {this.parseNumber("20000"), this.parseNumber("0.0225")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.02")}, new List<object> {this.parseNumber("75000"), this.parseNumber("0.0175")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.015")}, new List<object> {this.parseNumber("250000"), this.parseNumber("0.01")}, new List<object> {this.parseNumber("500000"), this.parseNumber("0.0075")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0.005")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.004")}, new List<object> {this.parseNumber("2000000"), this.parseNumber("0.003")}, new List<object> {this.parseNumber("3000000"), this.parseNumber("0.002")}, new List<object> {this.parseNumber("4000000"), this.parseNumber("0.001")}} },
                    } },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "fetchTradesMethod", "public_get_exchanges_pair_trades" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "Please provide valid APIkey", typeof(AuthenticationError) },
                    { "No order found.", typeof(OrderNotFound) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "Please provide valid nonce", typeof(InvalidNonce) },
                    { "please approve new terms of use on site", typeof(PermissionDenied) },
                } },
            } },
        });
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        object codes = new List<object>(((IDictionary<string,object>)this.currencies).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(codes)); postFixIncrement(ref i))
        {
            object code = getValue(codes, i);
            object account = this.account();
            object currency = this.currency(code);
            object uppercase = ((string)getValue(currency, "id")).ToUpper();
            if (isTrue(inOp(response, uppercase)))
            {
                ((IDictionary<string,object>)account)["free"] = this.safeString(response, add("AVAILABLE_", uppercase));
                ((IDictionary<string,object>)account)["total"] = this.safeString(response, uppercase);
            }
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://bit2c.co.il/home/api#balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetAccountBalanceV2(parameters);
        //
        //     {
        //         "AVAILABLE_NIS": 0.0,
        //         "NIS": 0.0,
        //         "LOCKED_NIS": 0.0,
        //         "AVAILABLE_BTC": 0.0,
        //         "BTC": 0.0,
        //         "LOCKED_BTC": 0.0,
        //         "AVAILABLE_ETH": 0.0,
        //         "ETH": 0.0,
        //         "LOCKED_ETH": 0.0,
        //         "AVAILABLE_BCHSV": 0.0,
        //         "BCHSV": 0.0,
        //         "LOCKED_BCHSV": 0.0,
        //         "AVAILABLE_BCHABC": 0.0,
        //         "BCHABC": 0.0,
        //         "LOCKED_BCHABC": 0.0,
        //         "AVAILABLE_LTC": 0.0,
        //         "LTC": 0.0,
        //         "LOCKED_LTC": 0.0,
        //         "AVAILABLE_ETC": 0.0,
        //         "ETC": 0.0,
        //         "LOCKED_ETC": 0.0,
        //         "AVAILABLE_BTG": 0.0,
        //         "BTG": 0.0,
        //         "LOCKED_BTG": 0.0,
        //         "AVAILABLE_GRIN": 0.0,
        //         "GRIN": 0.0,
        //         "LOCKED_GRIN": 0.0,
        //         "Fees": {
        //             "BtcNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "EthNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "BchabcNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "LtcNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "EtcNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "BtgNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "LtcBtc": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "BchsvNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "GrinNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 }
        //         }
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://bit2c.co.il/home/api#orderb
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object orderbook = await this.publicGetExchangesPairOrderbook(this.extend(request, parameters));
        return this.parseOrderBook(orderbook, symbol);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        object symbol = this.safeSymbol(null, market);
        object averagePrice = this.safeString(ticker, "av");
        object baseVolume = this.safeString(ticker, "a");
        object last = this.safeString(ticker, "ll");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "high", null },
            { "low", null },
            { "bid", this.safeString(ticker, "h") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "l") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", averagePrice },
            { "baseVolume", baseVolume },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://bit2c.co.il/home/api#ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object response = await this.publicGetExchangesPairTicker(this.extend(request, parameters));
        return this.parseTicker(response, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://bit2c.co.il/home/api#transactions
        * @see https://bit2c.co.il/home/api#trades
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object method = getValue(this.options, "fetchTradesMethod"); // public_get_exchanges_pair_trades or public_get_exchanges_pair_lasttrades
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["date"] = this.parseToInt(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // max 100000
        }
        object response = null;
        if (isTrue(isEqual(method, "public_get_exchanges_pair_trades")))
        {
            response = await this.publicGetExchangesPairTrades(this.extend(request, parameters));
        } else
        {
            response = await this.publicGetExchangesPairLasttrades(this.extend(request, parameters));
        }
        //
        //     [
        //         {"date":1651785980,"price":127975.68,"amount":0.3750321,"isBid":true,"tid":1261018},
        //         {"date":1651785980,"price":127987.70,"amount":0.0389527820303982335802581029,"isBid":true,"tid":1261020},
        //         {"date":1651786701,"price":128084.03,"amount":0.0015614749161156156626239821,"isBid":true,"tid":1261022},
        //     ]
        //
        if (isTrue((response is string)))
        {
            throw new ExchangeError ((string)response) ;
        }
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://bit2c.co.il/home/api#balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetAccountBalance(parameters);
        //
        //     {
        //         "AVAILABLE_NIS": 0.0,
        //         "NIS": 0.0,
        //         "LOCKED_NIS": 0.0,
        //         "AVAILABLE_BTC": 0.0,
        //         "BTC": 0.0,
        //         "LOCKED_BTC": 0.0,
        //         ...
        //         "Fees": {
        //             "BtcNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             "EthNis": { "FeeMaker": 1.0, "FeeTaker": 1.0 },
        //             ...
        //         }
        //     }
        //
        object fees = this.safeValue(response, "Fees", new Dictionary<string, object>() {});
        object keys = new List<object>(((IDictionary<string,object>)fees).Keys);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object marketId = getValue(keys, i);
            object symbol = this.safeSymbol(marketId);
            object fee = this.safeValue(fees, marketId);
            object makerString = this.safeString(fee, "FeeMaker");
            object takerString = this.safeString(fee, "FeeTaker");
            object maker = this.parseNumber(Precise.stringDiv(makerString, "100"));
            object taker = this.parseNumber(Precise.stringDiv(takerString, "100"));
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", fee },
                { "symbol", symbol },
                { "taker", taker },
                { "maker", maker },
                { "percentage", true },
                { "tierBased", true },
            };
        }
        return result;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#createOrder
        * @description create a trade order
        * @see https://bit2c.co.il/home/api#addo
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object method = "privatePostOrderAddOrder";
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "Amount", amount },
            { "Pair", getValue(market, "id") },
        };
        if (isTrue(isEqual(type, "market")))
        {
            method = add(method, add("MarketPrice", this.capitalize(side)));
        } else
        {
            ((IDictionary<string,object>)request)["Price"] = price;
            object amountString = this.numberToString(amount);
            object priceString = this.numberToString(price);
            ((IDictionary<string,object>)request)["Total"] = this.parseToNumeric(Precise.stringMul(amountString, priceString));
            ((IDictionary<string,object>)request)["IsBid"] = (isEqual(side, "buy"));
        }
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        return this.parseOrder(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#cancelOrder
        * @description cancels an open order
        * @see https://bit2c.co.il/home/api#cancelo
        * @param {string} id order id
        * @param {string} symbol Not used by bit2c cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        return await this.privatePostOrderCancelOrder(this.extend(request, parameters));
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://bit2c.co.il/home/api#geto
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of open order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object response = await this.privateGetOrderMyOrders(this.extend(request, parameters));
        object orders = this.safeValue(response, getValue(market, "id"), new Dictionary<string, object>() {});
        object asks = this.safeValue(orders, "ask", new List<object>() {});
        object bids = this.safeList(orders, "bid", new List<object>() {});
        return this.parseOrders(this.arrayConcat(asks, bids), market, since, limit);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://bit2c.co.il/home/api#getoid
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privateGetOrderGetById(this.extend(request, parameters));
        //
        //         {
        //             "pair": "BtcNis",
        //             "status": "Completed",
        //             "created": 1666689837,
        //             "type": 0,
        //             "order_type": 0,
        //             "amount": 0.00000000,
        //             "price": 50000.00000000,
        //             "stop": 0,
        //             "id": 10951473,
        //             "initialAmount": 2.00000000
        //         }
        //
        return this.parseOrder(response, market);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //      createOrder
        //      {
        //          "OrderResponse": {"pair": "BtcNis", "HasError": False, "Error": "", "Message": ""},
        //          "NewOrder": {
        //              "created": 1505531577,
        //              "type": 0,
        //              "order_type": 0,
        //              "status_type": 0,
        //              "amount": 0.01,
        //              "price": 10000,
        //              "stop": 0,
        //              "id": 9244416,
        //              "initialAmount": None,
        //          },
        //      }
        //      fetchOrder, fetchOpenOrders
        //      {
        //          "pair": "BtcNis",
        //          "status": "Completed",
        //          "created": 1535555837,
        //          "type": 0,
        //          "order_type": 0,
        //          "amount": 0.00000000,
        //          "price": 120000.00000000,
        //          "stop": 0,
        //          "id": 10555173,
        //          "initialAmount": 2.00000000
        //      }
        //
        object orderUnified = null;
        object isNewOrder = false;
        if (isTrue(inOp(order, "NewOrder")))
        {
            orderUnified = getValue(order, "NewOrder");
            isNewOrder = true;
        } else
        {
            orderUnified = order;
        }
        object id = this.safeString(orderUnified, "id");
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.safeIntegerProduct(orderUnified, "created", 1000);
        // status field vary between responses
        // bit2c status type:
        // 0 = New
        // 1 = Open
        // 5 = Completed
        object status = null;
        if (isTrue(isNewOrder))
        {
            object tempStatus = this.safeInteger(orderUnified, "status_type");
            if (isTrue(isTrue(isEqual(tempStatus, 0)) || isTrue(isEqual(tempStatus, 1))))
            {
                status = "open";
            } else if (isTrue(isEqual(tempStatus, 5)))
            {
                status = "closed";
            }
        } else
        {
            object tempStatus = this.safeString(orderUnified, "status");
            if (isTrue(isTrue(isEqual(tempStatus, "New")) || isTrue(isEqual(tempStatus, "Open"))))
            {
                status = "open";
            } else if (isTrue(isEqual(tempStatus, "Completed")))
            {
                status = "closed";
            }
        }
        // bit2c order type:
        // 0 = LMT,  1 = MKT
        object type = this.safeString(orderUnified, "order_type");
        if (isTrue(isEqual(type, "0")))
        {
            type = "limit";
        } else if (isTrue(isEqual(type, "1")))
        {
            type = "market";
        }
        // bit2c side:
        // 0 = buy, 1 = sell
        object side = this.safeString(orderUnified, "type");
        if (isTrue(isEqual(side, "0")))
        {
            side = "buy";
        } else if (isTrue(isEqual(side, "1")))
        {
            side = "sell";
        }
        object price = this.safeString(orderUnified, "price");
        object amount = null;
        object remaining = null;
        if (isTrue(isNewOrder))
        {
            amount = this.safeString(orderUnified, "amount"); // NOTE:'initialAmount' is currently not set on new order
            remaining = this.safeString(orderUnified, "amount");
        } else
        {
            amount = this.safeString(orderUnified, "initialAmount");
            remaining = this.safeString(orderUnified, "amount");
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "amount", amount },
            { "filled", null },
            { "remaining", remaining },
            { "cost", null },
            { "trades", null },
            { "fee", null },
            { "info", order },
            { "average", null },
        }, market);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://bit2c.co.il/home/api#orderh
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["take"] = limit;
        }
        ((IDictionary<string,object>)request)["take"] = limit;
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["toTime"] = this.yyyymmdd(this.milliseconds(), ".");
            ((IDictionary<string,object>)request)["fromTime"] = this.yyyymmdd(since, ".");
        }
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(market, "id");
        }
        object response = await this.privateGetOrderOrderHistory(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "ticks":1574767951,
        //             "created":"26/11/19 13:32",
        //             "action":1,
        //             "price":"1000",
        //             "pair":"EthNis",
        //             "reference":"EthNis|10867390|10867377",
        //             "fee":"0.5",
        //             "feeAmount":"0.08",
        //             "feeCoin":"₪",
        //             "firstAmount":"-0.015",
        //             "firstAmountBalance":"9",
        //             "secondAmount":"14.93",
        //             "secondAmountBalance":"130,233.28",
        //             "firstCoin":"ETH",
        //             "secondCoin":"₪"
        //         },
        //         {
        //             "ticks":1574767951,
        //             "created":"26/11/19 13:32",
        //             "action":0,
        //             "price":"1000",
        //             "pair":"EthNis",
        //             "reference":"EthNis|10867390|10867377",
        //             "fee":"0.5",
        //             "feeAmount":"0.08",
        //             "feeCoin":"₪",
        //             "firstAmount":"0.015",
        //             "firstAmountBalance":"9.015",
        //             "secondAmount":"-15.08",
        //             "secondAmountBalance":"130,218.35",
        //             "firstCoin":"ETH",
        //             "secondCoin":"₪"
        //         }
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public virtual object removeCommaFromValue(object str)
    {
        object newString = "";
        object strParts = ((string)str).Split(new [] {((string)",")}, StringSplitOptions.None).ToList<object>();
        for (object i = 0; isLessThan(i, getArrayLength(strParts)); postFixIncrement(ref i))
        {
            newString = add(newString, getValue(strParts, i));
        }
        return newString;
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // public fetchTrades
        //
        //     {
        //         "date":1651785980,
        //         "price":127975.68,
        //         "amount":0.3750321,
        //         "isBid":true,
        //         "tid":1261018
        //     }
        //
        // private fetchMyTrades
        //
        //     {
        //         "ticks":1574767951,
        //         "created":"26/11/19 13:32",
        //         "action":1,
        //         "price":"1,000",
        //         "pair":"EthNis",
        //         "reference":"EthNis|10867390|10867377",
        //         "fee":"0.5",
        //         "feeAmount":"0.08",
        //         "feeCoin":"₪",
        //         "firstAmount":"-0.015",
        //         "firstAmountBalance":"9",
        //         "secondAmount":"14.93",
        //         "secondAmountBalance":"130,233.28",
        //         "firstCoin":"ETH",
        //         "secondCoin":"₪"
        //         "isMaker": True,
        //     }
        //
        object timestamp = null;
        object id = null;
        object price = null;
        object amount = null;
        object orderId = null;
        object fee = null;
        object side = null;
        object makerOrTaker = null;
        object reference = this.safeString(trade, "reference");
        if (isTrue(!isEqual(reference, null)))
        {
            id = reference;
            timestamp = this.safeTimestamp(trade, "ticks");
            price = this.safeString(trade, "price");
            price = this.removeCommaFromValue(price);
            amount = this.safeString(trade, "firstAmount");
            object reference_parts = ((string)reference).Split(new [] {((string)"|")}, StringSplitOptions.None).ToList<object>(); // reference contains 'pair|orderId_by_taker|orderId_by_maker'
            object marketId = this.safeString(trade, "pair");
            market = this.safeMarket(marketId, market);
            market = this.safeMarket(getValue(reference_parts, 0), market);
            object isMaker = this.safeValue(trade, "isMaker");
            makerOrTaker = ((bool) isTrue(isMaker)) ? "maker" : "taker";
            orderId = ((bool) isTrue(isMaker)) ? getValue(reference_parts, 2) : getValue(reference_parts, 1);
            side = this.safeInteger(trade, "action");
            if (isTrue(isEqual(side, 0)))
            {
                side = "buy";
            } else if (isTrue(isEqual(side, 1)))
            {
                side = "sell";
            }
            object feeCost = this.safeString(trade, "feeAmount");
            if (isTrue(!isEqual(feeCost, null)))
            {
                fee = new Dictionary<string, object>() {
                    { "cost", feeCost },
                    { "currency", "NIS" },
                };
            }
        } else
        {
            timestamp = this.safeTimestamp(trade, "date");
            id = this.safeString(trade, "tid");
            price = this.safeString(trade, "price");
            amount = this.safeString(trade, "amount");
            side = this.safeValue(trade, "isBid");
            if (isTrue(!isEqual(side, null)))
            {
                if (isTrue(side))
                {
                    side = "buy";
                } else
                {
                    side = "sell";
                }
            }
        }
        market = this.safeMarket(null, market);
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", orderId },
            { "type", null },
            { "side", side },
            { "takerOrMaker", makerOrTaker },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public virtual object isFiat(object code)
    {
        return isEqual(code, "NIS");
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name bit2c#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @see https://bit2c.co.il/home/api#addc
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        if (isTrue(this.isFiat(code)))
        {
            throw new NotSupported ((string)add(this.id, " fetchDepositAddress() does not support fiat currencies")) ;
        }
        object request = new Dictionary<string, object>() {
            { "Coin", getValue(currency, "id") },
        };
        object response = await this.privatePostFundsAddCoinFundsRequest(this.extend(request, parameters));
        //
        //     {
        //         "address": "0xf14b94518d74aff2b1a6d3429471bcfcd3881d42",
        //         "hasTx": False
        //     }
        //
        return this.parseDepositAddress(response, currency);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        //
        //     {
        //         "address": "0xf14b94518d74aff2b1a6d3429471bcfcd3881d42",
        //         "hasTx": False
        //     }
        //
        object address = this.safeString(depositAddress, "address");
        this.checkAddress(address);
        object code = this.safeCurrencyCode(null, currency);
        return new Dictionary<string, object>() {
            { "currency", code },
            { "network", null },
            { "address", address },
            { "tag", null },
            { "info", depositAddress },
        };
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.implodeParams(path, parameters));
        if (isTrue(isEqual(api, "public")))
        {
            url = add(url, ".json");
        } else
        {
            this.checkRequiredCredentials();
            object nonce = this.nonce();
            object query = this.extend(new Dictionary<string, object>() {
                { "nonce", nonce },
            }, parameters);
            object auth = this.urlencode(query);
            if (isTrue(isEqual(method, "GET")))
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", auth));
                }
            } else
            {
                body = auth;
            }
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha512, "base64");
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
                { "key", this.apiKey },
                { "sign", signature },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        //
        //     { "error" : "please approve new terms of use on site." }
        //     { "error": "Please provide valid nonce in Request Nonce (1598218490) is not bigger than last nonce (1598218490)."}
        //     { "Error" : "No order found." }
        //
        object error = this.safeString(response, "error");
        if (isTrue(isEqual(error, null)))
        {
            error = this.safeString(response, "Error");
        }
        if (isTrue(!isEqual(error, null)))
        {
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), error, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), error, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
