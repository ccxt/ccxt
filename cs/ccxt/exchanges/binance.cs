namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class binance : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "binance" },
            { "name", "Binance" },
            { "countries", new List<object>() {"JP", "MT"} },
            { "rateLimit", 50 },
            { "certified", true },
            { "pro", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", true },
                { "swap", true },
                { "future", true },
                { "option", true },
                { "addMargin", true },
                { "borrowCrossMargin", true },
                { "borrowIsolatedMargin", true },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "cancelOrders", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createConvertTrade", true },
                { "createDepositAddress", false },
                { "createLimitBuyOrder", true },
                { "createLimitSellOrder", true },
                { "createMarketBuyOrder", true },
                { "createMarketBuyOrderWithCost", true },
                { "createMarketOrderWithCost", true },
                { "createMarketSellOrder", true },
                { "createMarketSellOrderWithCost", true },
                { "createOrder", true },
                { "createOrders", true },
                { "createOrderWithTakeProfitAndStopLoss", false },
                { "createPostOnlyOrder", true },
                { "createReduceOnlyOrder", true },
                { "createStopLimitOrder", true },
                { "createStopLossOrder", true },
                { "createStopMarketOrder", false },
                { "createStopOrder", true },
                { "createTakeProfitOrder", true },
                { "createTrailingPercentOrder", true },
                { "createTriggerOrder", true },
                { "editOrder", true },
                { "fetchAccounts", null },
                { "fetchBalance", true },
                { "fetchBidsAsks", true },
                { "fetchBorrowInterest", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", true },
                { "fetchCanceledAndClosedOrders", "emulated" },
                { "fetchCanceledOrders", "emulated" },
                { "fetchClosedOrder", false },
                { "fetchClosedOrders", "emulated" },
                { "fetchConvertCurrencies", true },
                { "fetchConvertQuote", true },
                { "fetchConvertTrade", true },
                { "fetchConvertTradeHistory", true },
                { "fetchCrossBorrowRate", true },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", true },
                { "fetchDeposit", false },
                { "fetchDepositAddress", true },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", true },
                { "fetchDepositsWithdrawals", false },
                { "fetchDepositWithdrawFee", "emulated" },
                { "fetchDepositWithdrawFees", true },
                { "fetchFundingHistory", true },
                { "fetchFundingInterval", "emulated" },
                { "fetchFundingIntervals", true },
                { "fetchFundingRate", true },
                { "fetchFundingRateHistory", true },
                { "fetchFundingRates", true },
                { "fetchGreeks", true },
                { "fetchIndexOHLCV", true },
                { "fetchIsolatedBorrowRate", "emulated" },
                { "fetchIsolatedBorrowRates", true },
                { "fetchL3OrderBook", false },
                { "fetchLastPrices", true },
                { "fetchLedger", true },
                { "fetchLedgerEntry", true },
                { "fetchLeverage", "emulated" },
                { "fetchLeverages", true },
                { "fetchLeverageTiers", true },
                { "fetchLiquidations", false },
                { "fetchLongShortRatio", false },
                { "fetchLongShortRatioHistory", true },
                { "fetchMarginAdjustmentHistory", true },
                { "fetchMarginMode", true },
                { "fetchMarginModes", true },
                { "fetchMarketLeverageTiers", "emulated" },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", true },
                { "fetchMarkPrice", true },
                { "fetchMarkPrices", true },
                { "fetchMyLiquidations", true },
                { "fetchMySettlementHistory", true },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterest", true },
                { "fetchOpenInterestHistory", true },
                { "fetchOpenOrder", true },
                { "fetchOpenOrders", true },
                { "fetchOption", true },
                { "fetchOptionChain", false },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", false },
                { "fetchOrders", true },
                { "fetchOrderTrades", true },
                { "fetchPosition", true },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", true },
                { "fetchPositions", true },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", true },
                { "fetchPremiumIndexOHLCV", true },
                { "fetchSettlementHistory", true },
                { "fetchStatus", true },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", true },
                { "fetchTradingFees", true },
                { "fetchTradingLimits", "emulated" },
                { "fetchTransactionFee", "emulated" },
                { "fetchTransactionFees", true },
                { "fetchTransactions", false },
                { "fetchTransfer", false },
                { "fetchTransfers", true },
                { "fetchUnderlyingAssets", false },
                { "fetchVolatilityHistory", false },
                { "fetchWithdrawAddresses", false },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", true },
                { "fetchWithdrawalWhitelist", false },
                { "reduceMargin", true },
                { "repayCrossMargin", true },
                { "repayIsolatedMargin", true },
                { "sandbox", true },
                { "setLeverage", true },
                { "setMargin", false },
                { "setMarginMode", true },
                { "setPositionMode", true },
                { "signIn", false },
                { "transfer", true },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1s", "1s" },
                { "1m", "1m" },
                { "3m", "3m" },
                { "5m", "5m" },
                { "15m", "15m" },
                { "30m", "30m" },
                { "1h", "1h" },
                { "2h", "2h" },
                { "4h", "4h" },
                { "6h", "6h" },
                { "8h", "8h" },
                { "12h", "12h" },
                { "1d", "1d" },
                { "3d", "3d" },
                { "1w", "1w" },
                { "1M", "1M" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://github.com/user-attachments/assets/e9419b93-ccb0-46aa-9bff-c883f096274b" },
                { "test", new Dictionary<string, object>() {
                    { "dapiPublic", "https://testnet.binancefuture.com/dapi/v1" },
                    { "dapiPrivate", "https://testnet.binancefuture.com/dapi/v1" },
                    { "dapiPrivateV2", "https://testnet.binancefuture.com/dapi/v2" },
                    { "fapiPublic", "https://testnet.binancefuture.com/fapi/v1" },
                    { "fapiPublicV2", "https://testnet.binancefuture.com/fapi/v2" },
                    { "fapiPublicV3", "https://testnet.binancefuture.com/fapi/v3" },
                    { "fapiPrivate", "https://testnet.binancefuture.com/fapi/v1" },
                    { "fapiPrivateV2", "https://testnet.binancefuture.com/fapi/v2" },
                    { "fapiPrivateV3", "https://testnet.binancefuture.com/fapi/v3" },
                    { "public", "https://testnet.binance.vision/api/v3" },
                    { "private", "https://testnet.binance.vision/api/v3" },
                    { "v1", "https://testnet.binance.vision/api/v1" },
                } },
                { "api", new Dictionary<string, object>() {
                    { "sapi", "https://api.binance.com/sapi/v1" },
                    { "sapiV2", "https://api.binance.com/sapi/v2" },
                    { "sapiV3", "https://api.binance.com/sapi/v3" },
                    { "sapiV4", "https://api.binance.com/sapi/v4" },
                    { "dapiPublic", "https://dapi.binance.com/dapi/v1" },
                    { "dapiPrivate", "https://dapi.binance.com/dapi/v1" },
                    { "eapiPublic", "https://eapi.binance.com/eapi/v1" },
                    { "eapiPrivate", "https://eapi.binance.com/eapi/v1" },
                    { "dapiPrivateV2", "https://dapi.binance.com/dapi/v2" },
                    { "dapiData", "https://dapi.binance.com/futures/data" },
                    { "fapiPublic", "https://fapi.binance.com/fapi/v1" },
                    { "fapiPublicV2", "https://fapi.binance.com/fapi/v2" },
                    { "fapiPublicV3", "https://fapi.binance.com/fapi/v3" },
                    { "fapiPrivate", "https://fapi.binance.com/fapi/v1" },
                    { "fapiPrivateV2", "https://fapi.binance.com/fapi/v2" },
                    { "fapiPrivateV3", "https://fapi.binance.com/fapi/v3" },
                    { "fapiData", "https://fapi.binance.com/futures/data" },
                    { "public", "https://api.binance.com/api/v3" },
                    { "private", "https://api.binance.com/api/v3" },
                    { "v1", "https://api.binance.com/api/v1" },
                    { "papi", "https://papi.binance.com/papi/v1" },
                } },
                { "www", "https://www.binance.com" },
                { "referral", new Dictionary<string, object>() {
                    { "url", "https://accounts.binance.com/en/register?ref=D7YA7CLY" },
                    { "discount", 0.1 },
                } },
                { "doc", new List<object>() {"https://developers.binance.com/en"} },
                { "api_management", "https://www.binance.com/en/usercenter/settings/api-management" },
                { "fees", "https://www.binance.com/en/fee/schedule" },
            } },
            { "api", new Dictionary<string, object>() {
                { "sapi", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "copyTrading/futures/userStatus", 2 },
                        { "copyTrading/futures/leadSymbol", 2 },
                        { "system/status", 0.1 },
                        { "accountSnapshot", 240 },
                        { "account/info", 0.1 },
                        { "margin/asset", 1 },
                        { "margin/pair", 1 },
                        { "margin/allAssets", 0.1 },
                        { "margin/allPairs", 0.1 },
                        { "margin/priceIndex", 1 },
                        { "spot/delist-schedule", 10 },
                        { "asset/assetDividend", 1 },
                        { "asset/dribblet", 0.1 },
                        { "asset/transfer", 0.1 },
                        { "asset/assetDetail", 0.1 },
                        { "asset/tradeFee", 0.1 },
                        { "asset/ledger-transfer/cloud-mining/queryByPage", 4.0002 },
                        { "asset/convert-transfer/queryByPage", 0.033335 },
                        { "asset/wallet/balance", 6 },
                        { "asset/custody/transfer-history", 6 },
                        { "margin/borrow-repay", 1 },
                        { "margin/loan", 1 },
                        { "margin/repay", 1 },
                        { "margin/account", 1 },
                        { "margin/transfer", 0.1 },
                        { "margin/interestHistory", 0.1 },
                        { "margin/forceLiquidationRec", 0.1 },
                        { "margin/order", 1 },
                        { "margin/openOrders", 1 },
                        { "margin/allOrders", 20 },
                        { "margin/myTrades", 1 },
                        { "margin/maxBorrowable", 5 },
                        { "margin/maxTransferable", 5 },
                        { "margin/tradeCoeff", 1 },
                        { "margin/isolated/transfer", 0.1 },
                        { "margin/isolated/account", 1 },
                        { "margin/isolated/pair", 1 },
                        { "margin/isolated/allPairs", 1 },
                        { "margin/isolated/accountLimit", 0.1 },
                        { "margin/interestRateHistory", 0.1 },
                        { "margin/orderList", 1 },
                        { "margin/allOrderList", 20 },
                        { "margin/openOrderList", 1 },
                        { "margin/crossMarginData", new Dictionary<string, object>() {
                            { "cost", 0.1 },
                            { "noCoin", 0.5 },
                        } },
                        { "margin/isolatedMarginData", new Dictionary<string, object>() {
                            { "cost", 0.1 },
                            { "noCoin", 1 },
                        } },
                        { "margin/isolatedMarginTier", 0.1 },
                        { "margin/rateLimit/order", 2 },
                        { "margin/dribblet", 0.1 },
                        { "margin/dust", 20.001 },
                        { "margin/crossMarginCollateralRatio", 10 },
                        { "margin/exchange-small-liability", 0.6667 },
                        { "margin/exchange-small-liability-history", 0.6667 },
                        { "margin/next-hourly-interest-rate", 0.6667 },
                        { "margin/capital-flow", 10 },
                        { "margin/delist-schedule", 10 },
                        { "margin/available-inventory", 0.3334 },
                        { "margin/leverageBracket", 0.1 },
                        { "loan/vip/loanable/data", 40 },
                        { "loan/vip/collateral/data", 40 },
                        { "loan/vip/request/data", 2.6668 },
                        { "loan/vip/request/interestRate", 2.6668 },
                        { "loan/income", 40.002 },
                        { "loan/ongoing/orders", 40 },
                        { "loan/ltv/adjustment/history", 40 },
                        { "loan/borrow/history", 40 },
                        { "loan/repay/history", 40 },
                        { "loan/loanable/data", 40 },
                        { "loan/collateral/data", 40 },
                        { "loan/repay/collateral/rate", 600 },
                        { "loan/flexible/ongoing/orders", 30 },
                        { "loan/flexible/borrow/history", 40 },
                        { "loan/flexible/repay/history", 40 },
                        { "loan/flexible/ltv/adjustment/history", 40 },
                        { "loan/vip/ongoing/orders", 40 },
                        { "loan/vip/repay/history", 40 },
                        { "loan/vip/collateral/account", 600 },
                        { "fiat/orders", 600.03 },
                        { "fiat/payments", 0.1 },
                        { "futures/transfer", 1 },
                        { "futures/histDataLink", 0.1 },
                        { "rebate/taxQuery", 80.004 },
                        { "capital/config/getall", 1 },
                        { "capital/deposit/address", 1 },
                        { "capital/deposit/address/list", 1 },
                        { "capital/deposit/hisrec", 0.1 },
                        { "capital/deposit/subAddress", 0.1 },
                        { "capital/deposit/subHisrec", 0.1 },
                        { "capital/withdraw/history", 2 },
                        { "capital/withdraw/address/list", 10 },
                        { "capital/contract/convertible-coins", 4.0002 },
                        { "convert/tradeFlow", 20.001 },
                        { "convert/exchangeInfo", 50 },
                        { "convert/assetInfo", 10 },
                        { "convert/orderStatus", 0.6667 },
                        { "convert/limit/queryOpenOrders", 20.001 },
                        { "account/status", 0.1 },
                        { "account/apiTradingStatus", 0.1 },
                        { "account/apiRestrictions/ipRestriction", 0.1 },
                        { "bnbBurn", 0.1 },
                        { "sub-account/futures/account", 1 },
                        { "sub-account/futures/accountSummary", 0.1 },
                        { "sub-account/futures/positionRisk", 1 },
                        { "sub-account/futures/internalTransfer", 0.1 },
                        { "sub-account/list", 0.1 },
                        { "sub-account/margin/account", 1 },
                        { "sub-account/margin/accountSummary", 1 },
                        { "sub-account/spotSummary", 0.1 },
                        { "sub-account/status", 1 },
                        { "sub-account/sub/transfer/history", 0.1 },
                        { "sub-account/transfer/subUserHistory", 0.1 },
                        { "sub-account/universalTransfer", 0.1 },
                        { "sub-account/apiRestrictions/ipRestriction/thirdPartyList", 1 },
                        { "sub-account/transaction-statistics", 0.40002 },
                        { "sub-account/subAccountApi/ipRestriction", 20.001 },
                        { "managed-subaccount/asset", 0.1 },
                        { "managed-subaccount/accountSnapshot", 240 },
                        { "managed-subaccount/queryTransLogForInvestor", 0.1 },
                        { "managed-subaccount/queryTransLogForTradeParent", 0.40002 },
                        { "managed-subaccount/fetch-future-asset", 0.40002 },
                        { "managed-subaccount/marginAsset", 0.1 },
                        { "managed-subaccount/info", 0.40002 },
                        { "managed-subaccount/deposit/address", 0.006667 },
                        { "managed-subaccount/query-trans-log", 0.40002 },
                        { "lending/daily/product/list", 0.1 },
                        { "lending/daily/userLeftQuota", 0.1 },
                        { "lending/daily/userRedemptionQuota", 0.1 },
                        { "lending/daily/token/position", 0.1 },
                        { "lending/union/account", 0.1 },
                        { "lending/union/purchaseRecord", 0.1 },
                        { "lending/union/redemptionRecord", 0.1 },
                        { "lending/union/interestHistory", 0.1 },
                        { "lending/project/list", 0.1 },
                        { "lending/project/position/list", 0.1 },
                        { "eth-staking/eth/history/stakingHistory", 15 },
                        { "eth-staking/eth/history/redemptionHistory", 15 },
                        { "eth-staking/eth/history/rewardsHistory", 15 },
                        { "eth-staking/eth/quota", 15 },
                        { "eth-staking/eth/history/rateHistory", 15 },
                        { "eth-staking/account", 15 },
                        { "eth-staking/wbeth/history/wrapHistory", 15 },
                        { "eth-staking/wbeth/history/unwrapHistory", 15 },
                        { "eth-staking/eth/history/wbethRewardsHistory", 15 },
                        { "sol-staking/sol/history/stakingHistory", 15 },
                        { "sol-staking/sol/history/redemptionHistory", 15 },
                        { "sol-staking/sol/history/bnsolRewardsHistory", 15 },
                        { "sol-staking/sol/history/rateHistory", 15 },
                        { "sol-staking/account", 15 },
                        { "sol-staking/sol/quota", 15 },
                        { "mining/pub/algoList", 0.1 },
                        { "mining/pub/coinList", 0.1 },
                        { "mining/worker/detail", 0.5 },
                        { "mining/worker/list", 0.5 },
                        { "mining/payment/list", 0.5 },
                        { "mining/statistics/user/status", 0.5 },
                        { "mining/statistics/user/list", 0.5 },
                        { "mining/payment/uid", 0.5 },
                        { "bswap/pools", 0.1 },
                        { "bswap/liquidity", new Dictionary<string, object>() {
                            { "cost", 0.1 },
                            { "noPoolId", 1 },
                        } },
                        { "bswap/liquidityOps", 20.001 },
                        { "bswap/quote", 1.00005 },
                        { "bswap/swap", 20.001 },
                        { "bswap/poolConfigure", 1.00005 },
                        { "bswap/addLiquidityPreview", 1.00005 },
                        { "bswap/removeLiquidityPreview", 1.00005 },
                        { "bswap/unclaimedRewards", 6.667 },
                        { "bswap/claimedHistory", 6.667 },
                        { "blvt/tokenInfo", 0.1 },
                        { "blvt/subscribe/record", 0.1 },
                        { "blvt/redeem/record", 0.1 },
                        { "blvt/userLimit", 0.1 },
                        { "apiReferral/ifNewUser", 1 },
                        { "apiReferral/customization", 1 },
                        { "apiReferral/userCustomization", 1 },
                        { "apiReferral/rebate/recentRecord", 1 },
                        { "apiReferral/rebate/historicalRecord", 1 },
                        { "apiReferral/kickback/recentRecord", 1 },
                        { "apiReferral/kickback/historicalRecord", 1 },
                        { "broker/subAccountApi", 1 },
                        { "broker/subAccount", 1 },
                        { "broker/subAccountApi/commission/futures", 1 },
                        { "broker/subAccountApi/commission/coinFutures", 1 },
                        { "broker/info", 1 },
                        { "broker/transfer", 1 },
                        { "broker/transfer/futures", 1 },
                        { "broker/rebate/recentRecord", 1 },
                        { "broker/rebate/historicalRecord", 1 },
                        { "broker/subAccount/bnbBurn/status", 1 },
                        { "broker/subAccount/depositHist", 1 },
                        { "broker/subAccount/spotSummary", 1 },
                        { "broker/subAccount/marginSummary", 1 },
                        { "broker/subAccount/futuresSummary", 1 },
                        { "broker/rebate/futures/recentRecord", 1 },
                        { "broker/subAccountApi/ipRestriction", 1 },
                        { "broker/universalTransfer", 1 },
                        { "account/apiRestrictions", 0.1 },
                        { "c2c/orderMatch/listUserOrderHistory", 0.1 },
                        { "nft/history/transactions", 20.001 },
                        { "nft/history/deposit", 20.001 },
                        { "nft/history/withdraw", 20.001 },
                        { "nft/user/getAsset", 20.001 },
                        { "pay/transactions", 20.001 },
                        { "giftcard/verify", 0.1 },
                        { "giftcard/cryptography/rsa-public-key", 0.1 },
                        { "giftcard/buyCode/token-limit", 0.1 },
                        { "algo/spot/openOrders", 0.1 },
                        { "algo/spot/historicalOrders", 0.1 },
                        { "algo/spot/subOrders", 0.1 },
                        { "algo/futures/openOrders", 0.1 },
                        { "algo/futures/historicalOrders", 0.1 },
                        { "algo/futures/subOrders", 0.1 },
                        { "portfolio/account", 0.1 },
                        { "portfolio/collateralRate", 5 },
                        { "portfolio/pmLoan", 3.3335 },
                        { "portfolio/interest-history", 0.6667 },
                        { "portfolio/asset-index-price", 0.1 },
                        { "portfolio/repay-futures-switch", 3 },
                        { "portfolio/margin-asset-leverage", 5 },
                        { "portfolio/balance", 2 },
                        { "staking/productList", 0.1 },
                        { "staking/position", 0.1 },
                        { "staking/stakingRecord", 0.1 },
                        { "staking/personalLeftQuota", 0.1 },
                        { "lending/auto-invest/target-asset/list", 0.1 },
                        { "lending/auto-invest/target-asset/roi/list", 0.1 },
                        { "lending/auto-invest/all/asset", 0.1 },
                        { "lending/auto-invest/source-asset/list", 0.1 },
                        { "lending/auto-invest/plan/list", 0.1 },
                        { "lending/auto-invest/plan/id", 0.1 },
                        { "lending/auto-invest/history/list", 0.1 },
                        { "lending/auto-invest/index/info", 0.1 },
                        { "lending/auto-invest/index/user-summary", 0.1 },
                        { "lending/auto-invest/one-off/status", 0.1 },
                        { "lending/auto-invest/redeem/history", 0.1 },
                        { "lending/auto-invest/rebalance/history", 0.1 },
                        { "simple-earn/flexible/list", 15 },
                        { "simple-earn/locked/list", 15 },
                        { "simple-earn/flexible/personalLeftQuota", 15 },
                        { "simple-earn/locked/personalLeftQuota", 15 },
                        { "simple-earn/flexible/subscriptionPreview", 15 },
                        { "simple-earn/locked/subscriptionPreview", 15 },
                        { "simple-earn/flexible/history/rateHistory", 15 },
                        { "simple-earn/flexible/position", 15 },
                        { "simple-earn/locked/position", 15 },
                        { "simple-earn/account", 15 },
                        { "simple-earn/flexible/history/subscriptionRecord", 15 },
                        { "simple-earn/locked/history/subscriptionRecord", 15 },
                        { "simple-earn/flexible/history/redemptionRecord", 15 },
                        { "simple-earn/locked/history/redemptionRecord", 15 },
                        { "simple-earn/flexible/history/rewardsRecord", 15 },
                        { "simple-earn/locked/history/rewardsRecord", 15 },
                        { "simple-earn/flexible/history/collateralRecord", 0.1 },
                        { "dci/product/list", 0.1 },
                        { "dci/product/positions", 0.1 },
                        { "dci/product/accounts", 0.1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "asset/dust", 0.06667 },
                        { "asset/dust-btc", 0.1 },
                        { "asset/transfer", 6.0003 },
                        { "asset/get-funding-asset", 0.1 },
                        { "asset/convert-transfer", 0.033335 },
                        { "account/disableFastWithdrawSwitch", 0.1 },
                        { "account/enableFastWithdrawSwitch", 0.1 },
                        { "capital/withdraw/apply", 4.0002 },
                        { "capital/contract/convertible-coins", 4.0002 },
                        { "capital/deposit/credit-apply", 0.1 },
                        { "margin/borrow-repay", 20.001 },
                        { "margin/transfer", 4.0002 },
                        { "margin/loan", 20.001 },
                        { "margin/repay", 20.001 },
                        { "margin/order", 0.040002 },
                        { "margin/order/oco", 0.040002 },
                        { "margin/dust", 20.001 },
                        { "margin/exchange-small-liability", 20.001 },
                        { "margin/isolated/transfer", 4.0002 },
                        { "margin/isolated/account", 2.0001 },
                        { "margin/max-leverage", 300 },
                        { "bnbBurn", 0.1 },
                        { "sub-account/virtualSubAccount", 0.1 },
                        { "sub-account/margin/transfer", 4.0002 },
                        { "sub-account/margin/enable", 0.1 },
                        { "sub-account/futures/enable", 0.1 },
                        { "sub-account/futures/transfer", 0.1 },
                        { "sub-account/futures/internalTransfer", 0.1 },
                        { "sub-account/transfer/subToSub", 0.1 },
                        { "sub-account/transfer/subToMaster", 0.1 },
                        { "sub-account/universalTransfer", 0.1 },
                        { "sub-account/options/enable", 0.1 },
                        { "managed-subaccount/deposit", 0.1 },
                        { "managed-subaccount/withdraw", 0.1 },
                        { "userDataStream", 0.1 },
                        { "userDataStream/isolated", 0.1 },
                        { "futures/transfer", 0.1 },
                        { "lending/customizedFixed/purchase", 0.1 },
                        { "lending/daily/purchase", 0.1 },
                        { "lending/daily/redeem", 0.1 },
                        { "bswap/liquidityAdd", 60 },
                        { "bswap/liquidityRemove", 60 },
                        { "bswap/swap", 60 },
                        { "bswap/claimRewards", 6.667 },
                        { "blvt/subscribe", 0.1 },
                        { "blvt/redeem", 0.1 },
                        { "apiReferral/customization", 1 },
                        { "apiReferral/userCustomization", 1 },
                        { "apiReferral/rebate/historicalRecord", 1 },
                        { "apiReferral/kickback/historicalRecord", 1 },
                        { "broker/subAccount", 1 },
                        { "broker/subAccount/margin", 1 },
                        { "broker/subAccount/futures", 1 },
                        { "broker/subAccountApi", 1 },
                        { "broker/subAccountApi/permission", 1 },
                        { "broker/subAccountApi/commission", 1 },
                        { "broker/subAccountApi/commission/futures", 1 },
                        { "broker/subAccountApi/commission/coinFutures", 1 },
                        { "broker/transfer", 1 },
                        { "broker/transfer/futures", 1 },
                        { "broker/rebate/historicalRecord", 1 },
                        { "broker/subAccount/bnbBurn/spot", 1 },
                        { "broker/subAccount/bnbBurn/marginInterest", 1 },
                        { "broker/subAccount/blvt", 1 },
                        { "broker/subAccountApi/ipRestriction", 1 },
                        { "broker/subAccountApi/ipRestriction/ipList", 1 },
                        { "broker/universalTransfer", 1 },
                        { "broker/subAccountApi/permission/universalTransfer", 1 },
                        { "broker/subAccountApi/permission/vanillaOptions", 1 },
                        { "giftcard/createCode", 0.1 },
                        { "giftcard/redeemCode", 0.1 },
                        { "giftcard/buyCode", 0.1 },
                        { "algo/spot/newOrderTwap", 20.001 },
                        { "algo/futures/newOrderVp", 20.001 },
                        { "algo/futures/newOrderTwap", 20.001 },
                        { "staking/purchase", 0.1 },
                        { "staking/redeem", 0.1 },
                        { "staking/setAutoStaking", 0.1 },
                        { "eth-staking/eth/stake", 15 },
                        { "eth-staking/eth/redeem", 15 },
                        { "eth-staking/wbeth/wrap", 15 },
                        { "sol-staking/sol/stake", 15 },
                        { "sol-staking/sol/redeem", 15 },
                        { "mining/hash-transfer/config", 0.5 },
                        { "mining/hash-transfer/config/cancel", 0.5 },
                        { "portfolio/repay", 20.001 },
                        { "loan/vip/renew", 40.002 },
                        { "loan/vip/borrow", 40.002 },
                        { "loan/borrow", 40.002 },
                        { "loan/repay", 40.002 },
                        { "loan/adjust/ltv", 40.002 },
                        { "loan/customize/margin_call", 40.002 },
                        { "loan/flexible/repay", 40.002 },
                        { "loan/flexible/adjust/ltv", 40.002 },
                        { "loan/vip/repay", 40.002 },
                        { "convert/getQuote", 1.3334 },
                        { "convert/acceptQuote", 3.3335 },
                        { "convert/limit/placeOrder", 3.3335 },
                        { "convert/limit/cancelOrder", 1.3334 },
                        { "portfolio/auto-collection", 150 },
                        { "portfolio/asset-collection", 6 },
                        { "portfolio/bnb-transfer", 150 },
                        { "portfolio/repay-futures-switch", 150 },
                        { "portfolio/repay-futures-negative-balance", 150 },
                        { "lending/auto-invest/plan/add", 0.1 },
                        { "lending/auto-invest/plan/edit", 0.1 },
                        { "lending/auto-invest/plan/edit-status", 0.1 },
                        { "lending/auto-invest/one-off", 0.1 },
                        { "lending/auto-invest/redeem", 0.1 },
                        { "simple-earn/flexible/subscribe", 0.1 },
                        { "simple-earn/locked/subscribe", 0.1 },
                        { "simple-earn/flexible/redeem", 0.1 },
                        { "simple-earn/locked/redeem", 0.1 },
                        { "simple-earn/flexible/setAutoSubscribe", 15 },
                        { "simple-earn/locked/setAutoSubscribe", 15 },
                        { "simple-earn/locked/setRedeemOption", 5 },
                        { "dci/product/subscribe", 0.1 },
                        { "dci/product/auto_compound/edit", 0.1 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "userDataStream", 0.1 },
                        { "userDataStream/isolated", 0.1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "margin/openOrders", 0.1 },
                        { "margin/order", 0.006667 },
                        { "margin/orderList", 0.006667 },
                        { "margin/isolated/account", 2.0001 },
                        { "userDataStream", 0.1 },
                        { "userDataStream/isolated", 0.1 },
                        { "broker/subAccountApi", 1 },
                        { "broker/subAccountApi/ipRestriction/ipList", 1 },
                        { "algo/spot/order", 0.1 },
                        { "algo/futures/order", 0.1 },
                        { "sub-account/subAccountApi/ipRestriction/ipList", 20.001 },
                    } },
                } },
                { "sapiV2", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "eth-staking/account", 15 },
                        { "sub-account/futures/account", 0.1 },
                        { "sub-account/futures/accountSummary", 1 },
                        { "sub-account/futures/positionRisk", 0.1 },
                        { "loan/flexible/ongoing/orders", 30 },
                        { "loan/flexible/borrow/history", 40 },
                        { "loan/flexible/repay/history", 40 },
                        { "loan/flexible/ltv/adjustment/history", 40 },
                        { "loan/flexible/loanable/data", 40 },
                        { "loan/flexible/collateral/data", 40 },
                        { "portfolio/account", 2 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "eth-staking/eth/stake", 15 },
                        { "sub-account/subAccountApi/ipRestriction", 20.001 },
                        { "loan/flexible/borrow", 40.002 },
                        { "loan/flexible/repay", 40.002 },
                        { "loan/flexible/adjust/ltv", 40.002 },
                    } },
                } },
                { "sapiV3", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "sub-account/assets", 0.40002 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "asset/getUserAsset", 0.5 },
                    } },
                } },
                { "sapiV4", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "sub-account/assets", 0.40002 },
                    } },
                } },
                { "dapiPublic", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ping", 1 },
                        { "time", 1 },
                        { "exchangeInfo", 1 },
                        { "depth", new Dictionary<string, object>() {
                            { "cost", 2 },
                            { "byLimit", new List<object>() {new List<object>() {50, 2}, new List<object>() {100, 5}, new List<object>() {500, 10}, new List<object>() {1000, 20}} },
                        } },
                        { "trades", 5 },
                        { "historicalTrades", 20 },
                        { "aggTrades", 20 },
                        { "premiumIndex", 10 },
                        { "fundingRate", 1 },
                        { "klines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "continuousKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "indexPriceKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "markPriceKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "premiumIndexKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "ticker/24hr", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "ticker/price", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 2 },
                        } },
                        { "ticker/bookTicker", new Dictionary<string, object>() {
                            { "cost", 2 },
                            { "noSymbol", 5 },
                        } },
                        { "constituents", 2 },
                        { "openInterest", 1 },
                        { "fundingInfo", 1 },
                    } },
                } },
                { "dapiData", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "delivery-price", 1 },
                        { "openInterestHist", 1 },
                        { "topLongShortAccountRatio", 1 },
                        { "topLongShortPositionRatio", 1 },
                        { "globalLongShortAccountRatio", 1 },
                        { "takerBuySellVol", 1 },
                        { "basis", 1 },
                    } },
                } },
                { "dapiPrivate", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "positionSide/dual", 30 },
                        { "orderAmendment", 1 },
                        { "order", 1 },
                        { "openOrder", 1 },
                        { "openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 5 },
                        } },
                        { "allOrders", new Dictionary<string, object>() {
                            { "cost", 20 },
                            { "noSymbol", 40 },
                        } },
                        { "balance", 1 },
                        { "account", 5 },
                        { "positionMargin/history", 1 },
                        { "positionRisk", 1 },
                        { "userTrades", new Dictionary<string, object>() {
                            { "cost", 20 },
                            { "noSymbol", 40 },
                        } },
                        { "income", 20 },
                        { "leverageBracket", 1 },
                        { "forceOrders", new Dictionary<string, object>() {
                            { "cost", 20 },
                            { "noSymbol", 50 },
                        } },
                        { "adlQuantile", 5 },
                        { "commissionRate", 20 },
                        { "income/asyn", 5 },
                        { "income/asyn/id", 5 },
                        { "trade/asyn", 0.5 },
                        { "trade/asyn/id", 0.5 },
                        { "order/asyn", 0.5 },
                        { "order/asyn/id", 0.5 },
                        { "pmExchangeInfo", 0.5 },
                        { "pmAccountInfo", 0.5 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "positionSide/dual", 1 },
                        { "order", 4 },
                        { "batchOrders", 5 },
                        { "countdownCancelAll", 10 },
                        { "leverage", 1 },
                        { "marginType", 1 },
                        { "positionMargin", 1 },
                        { "listenKey", 1 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "listenKey", 1 },
                        { "order", 1 },
                        { "batchOrders", 5 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "order", 1 },
                        { "allOpenOrders", 1 },
                        { "batchOrders", 5 },
                        { "listenKey", 1 },
                    } },
                } },
                { "dapiPrivateV2", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "leverageBracket", 1 },
                    } },
                } },
                { "fapiPublic", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ping", 1 },
                        { "time", 1 },
                        { "exchangeInfo", 1 },
                        { "depth", new Dictionary<string, object>() {
                            { "cost", 2 },
                            { "byLimit", new List<object>() {new List<object>() {50, 2}, new List<object>() {100, 5}, new List<object>() {500, 10}, new List<object>() {1000, 20}} },
                        } },
                        { "trades", 5 },
                        { "historicalTrades", 20 },
                        { "aggTrades", 20 },
                        { "klines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "continuousKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "markPriceKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "indexPriceKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "premiumIndexKlines", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {99, 1}, new List<object>() {499, 2}, new List<object>() {1000, 5}, new List<object>() {10000, 10}} },
                        } },
                        { "fundingRate", 1 },
                        { "fundingInfo", 1 },
                        { "premiumIndex", 1 },
                        { "ticker/24hr", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "ticker/price", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 2 },
                        } },
                        { "ticker/bookTicker", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 2 },
                        } },
                        { "openInterest", 1 },
                        { "indexInfo", 1 },
                        { "assetIndex", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 10 },
                        } },
                        { "constituents", 2 },
                        { "apiTradingStatus", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 10 },
                        } },
                        { "lvtKlines", 1 },
                        { "convert/exchangeInfo", 4 },
                    } },
                } },
                { "fapiData", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "delivery-price", 1 },
                        { "openInterestHist", 1 },
                        { "topLongShortAccountRatio", 1 },
                        { "topLongShortPositionRatio", 1 },
                        { "globalLongShortAccountRatio", 1 },
                        { "takerlongshortRatio", 1 },
                        { "basis", 1 },
                    } },
                } },
                { "fapiPrivate", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "forceOrders", new Dictionary<string, object>() {
                            { "cost", 20 },
                            { "noSymbol", 50 },
                        } },
                        { "allOrders", 5 },
                        { "openOrder", 1 },
                        { "openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "order", 1 },
                        { "account", 5 },
                        { "balance", 5 },
                        { "leverageBracket", 1 },
                        { "positionMargin/history", 1 },
                        { "positionRisk", 5 },
                        { "positionSide/dual", 30 },
                        { "userTrades", 5 },
                        { "income", 30 },
                        { "commissionRate", 20 },
                        { "rateLimit/order", 1 },
                        { "apiTradingStatus", 1 },
                        { "multiAssetsMargin", 30 },
                        { "apiReferral/ifNewUser", 1 },
                        { "apiReferral/customization", 1 },
                        { "apiReferral/userCustomization", 1 },
                        { "apiReferral/traderNum", 1 },
                        { "apiReferral/overview", 1 },
                        { "apiReferral/tradeVol", 1 },
                        { "apiReferral/rebateVol", 1 },
                        { "apiReferral/traderSummary", 1 },
                        { "adlQuantile", 5 },
                        { "pmAccountInfo", 5 },
                        { "orderAmendment", 1 },
                        { "income/asyn", 1000 },
                        { "income/asyn/id", 10 },
                        { "order/asyn", 1000 },
                        { "order/asyn/id", 10 },
                        { "trade/asyn", 1000 },
                        { "trade/asyn/id", 10 },
                        { "feeBurn", 1 },
                        { "symbolConfig", 5 },
                        { "accountConfig", 5 },
                        { "convert/orderStatus", 5 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "batchOrders", 5 },
                        { "positionSide/dual", 1 },
                        { "positionMargin", 1 },
                        { "marginType", 1 },
                        { "order", 4 },
                        { "leverage", 1 },
                        { "listenKey", 1 },
                        { "countdownCancelAll", 10 },
                        { "multiAssetsMargin", 1 },
                        { "apiReferral/customization", 1 },
                        { "apiReferral/userCustomization", 1 },
                        { "feeBurn", 1 },
                        { "convert/getQuote", 200 },
                        { "convert/acceptQuote", 20 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "listenKey", 1 },
                        { "order", 1 },
                        { "batchOrders", 5 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "batchOrders", 1 },
                        { "order", 1 },
                        { "allOpenOrders", 1 },
                        { "listenKey", 1 },
                    } },
                } },
                { "fapiPublicV2", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ticker/price", 0 },
                    } },
                } },
                { "fapiPrivateV2", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "account", 1 },
                        { "balance", 1 },
                        { "positionRisk", 1 },
                    } },
                } },
                { "fapiPublicV3", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {} },
                } },
                { "fapiPrivateV3", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "account", 1 },
                        { "balance", 1 },
                        { "positionRisk", 1 },
                    } },
                } },
                { "eapiPublic", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ping", 1 },
                        { "time", 1 },
                        { "exchangeInfo", 1 },
                        { "index", 1 },
                        { "ticker", 5 },
                        { "mark", 5 },
                        { "depth", 1 },
                        { "klines", 1 },
                        { "trades", 5 },
                        { "historicalTrades", 20 },
                        { "exerciseHistory", 3 },
                        { "openInterest", 3 },
                    } },
                } },
                { "eapiPrivate", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "account", 3 },
                        { "position", 5 },
                        { "openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "historyOrders", 3 },
                        { "userTrades", 5 },
                        { "exerciseRecord", 5 },
                        { "bill", 1 },
                        { "income/asyn", 5 },
                        { "income/asyn/id", 5 },
                        { "marginAccount", 3 },
                        { "mmp", 1 },
                        { "countdownCancelAll", 1 },
                        { "order", 1 },
                        { "block/order/orders", 5 },
                        { "block/order/execute", 5 },
                        { "block/user-trades", 5 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "order", 1 },
                        { "batchOrders", 5 },
                        { "listenKey", 1 },
                        { "mmpSet", 1 },
                        { "mmpReset", 1 },
                        { "countdownCancelAll", 1 },
                        { "countdownCancelAllHeartBeat", 10 },
                        { "block/order/create", 5 },
                        { "block/order/execute", 5 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "listenKey", 1 },
                        { "block/order/create", 5 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "order", 1 },
                        { "batchOrders", 1 },
                        { "allOpenOrders", 1 },
                        { "allOpenOrdersByUnderlying", 1 },
                        { "listenKey", 1 },
                        { "block/order/create", 5 },
                    } },
                } },
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ping", 0.2 },
                        { "time", 0.2 },
                        { "depth", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "byLimit", new List<object>() {new List<object>() {100, 1}, new List<object>() {500, 5}, new List<object>() {1000, 10}, new List<object>() {5000, 50}} },
                        } },
                        { "trades", 2 },
                        { "aggTrades", 0.4 },
                        { "historicalTrades", 2 },
                        { "klines", 0.4 },
                        { "uiKlines", 0.4 },
                        { "ticker/24hr", new Dictionary<string, object>() {
                            { "cost", 0.4 },
                            { "noSymbol", 16 },
                        } },
                        { "ticker", new Dictionary<string, object>() {
                            { "cost", 0.4 },
                            { "noSymbol", 16 },
                        } },
                        { "ticker/tradingDay", 0.8 },
                        { "ticker/price", new Dictionary<string, object>() {
                            { "cost", 0.4 },
                            { "noSymbol", 0.8 },
                        } },
                        { "ticker/bookTicker", new Dictionary<string, object>() {
                            { "cost", 0.4 },
                            { "noSymbol", 0.8 },
                        } },
                        { "exchangeInfo", 4 },
                        { "avgPrice", 0.4 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "userDataStream", 0.4 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "userDataStream", 0.4 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "userDataStream", 0.4 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "allOrderList", 4 },
                        { "openOrderList", 1.2 },
                        { "orderList", 0.8 },
                        { "order", 0.8 },
                        { "openOrders", new Dictionary<string, object>() {
                            { "cost", 1.2 },
                            { "noSymbol", 16 },
                        } },
                        { "allOrders", 4 },
                        { "account", 4 },
                        { "myTrades", 4 },
                        { "rateLimit/order", 8 },
                        { "myPreventedMatches", 4 },
                        { "myAllocations", 4 },
                        { "account/commission", 4 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "order/oco", 0.2 },
                        { "orderList/oco", 0.2 },
                        { "orderList/oto", 0.2 },
                        { "orderList/otoco", 0.2 },
                        { "sor/order", 0.2 },
                        { "sor/order/test", 0.2 },
                        { "order", 0.2 },
                        { "order/cancelReplace", 0.2 },
                        { "order/test", 0.2 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "openOrders", 0.2 },
                        { "orderList", 0.2 },
                        { "order", 0.2 },
                    } },
                } },
                { "papi", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ping", 0.2 },
                        { "um/order", 1 },
                        { "um/openOrder", 1 },
                        { "um/openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "um/allOrders", 5 },
                        { "cm/order", 1 },
                        { "cm/openOrder", 1 },
                        { "cm/openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "cm/allOrders", 20 },
                        { "um/conditional/openOrder", 1 },
                        { "um/conditional/openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "um/conditional/orderHistory", 1 },
                        { "um/conditional/allOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "cm/conditional/openOrder", 1 },
                        { "cm/conditional/openOrders", new Dictionary<string, object>() {
                            { "cost", 1 },
                            { "noSymbol", 40 },
                        } },
                        { "cm/conditional/orderHistory", 1 },
                        { "cm/conditional/allOrders", 40 },
                        { "margin/order", 10 },
                        { "margin/openOrders", 5 },
                        { "margin/allOrders", 100 },
                        { "margin/orderList", 5 },
                        { "margin/allOrderList", 100 },
                        { "margin/openOrderList", 5 },
                        { "margin/myTrades", 5 },
                        { "balance", 4 },
                        { "account", 4 },
                        { "margin/maxBorrowable", 1 },
                        { "margin/maxWithdraw", 1 },
                        { "um/positionRisk", 1 },
                        { "cm/positionRisk", 0.2 },
                        { "um/positionSide/dual", 6 },
                        { "cm/positionSide/dual", 6 },
                        { "um/userTrades", 5 },
                        { "cm/userTrades", 20 },
                        { "um/leverageBracket", 0.2 },
                        { "cm/leverageBracket", 0.2 },
                        { "margin/forceOrders", 1 },
                        { "um/forceOrders", new Dictionary<string, object>() {
                            { "cost", 20 },
                            { "noSymbol", 50 },
                        } },
                        { "cm/forceOrders", new Dictionary<string, object>() {
                            { "cost", 20 },
                            { "noSymbol", 50 },
                        } },
                        { "um/apiTradingStatus", new Dictionary<string, object>() {
                            { "cost", 0.2 },
                            { "noSymbol", 2 },
                        } },
                        { "um/commissionRate", 4 },
                        { "cm/commissionRate", 4 },
                        { "margin/marginLoan", 2 },
                        { "margin/repayLoan", 2 },
                        { "margin/marginInterestHistory", 0.2 },
                        { "portfolio/interest-history", 10 },
                        { "um/income", 6 },
                        { "cm/income", 6 },
                        { "um/account", 1 },
                        { "cm/account", 1 },
                        { "repay-futures-switch", 6 },
                        { "um/adlQuantile", 5 },
                        { "cm/adlQuantile", 5 },
                        { "um/trade/asyn", 300 },
                        { "um/trade/asyn/id", 2 },
                        { "um/order/asyn", 300 },
                        { "um/order/asyn/id", 2 },
                        { "um/income/asyn", 300 },
                        { "um/income/asyn/id", 2 },
                        { "um/orderAmendment", 1 },
                        { "cm/orderAmendment", 1 },
                        { "um/feeBurn", 30 },
                        { "um/accountConfig", 1 },
                        { "um/symbolConfig", 1 },
                        { "cm/accountConfig", 1 },
                        { "cm/symbolConfig", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "um/order", 1 },
                        { "um/conditional/order", 1 },
                        { "cm/order", 1 },
                        { "cm/conditional/order", 1 },
                        { "margin/order", 1 },
                        { "marginLoan", 100 },
                        { "repayLoan", 100 },
                        { "margin/order/oco", 1 },
                        { "um/leverage", 0.2 },
                        { "cm/leverage", 0.2 },
                        { "um/positionSide/dual", 0.2 },
                        { "cm/positionSide/dual", 0.2 },
                        { "auto-collection", 150 },
                        { "bnb-transfer", 150 },
                        { "repay-futures-switch", 150 },
                        { "repay-futures-negative-balance", 150 },
                        { "listenKey", 0.2 },
                        { "asset-collection", 6 },
                        { "margin/repay-debt", 3000 },
                        { "um/feeBurn", 1 },
                    } },
                    { "put", new Dictionary<string, object>() {
                        { "listenKey", 0.2 },
                        { "um/order", 1 },
                        { "cm/order", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "um/order", 1 },
                        { "um/conditional/order", 1 },
                        { "um/allOpenOrders", 1 },
                        { "um/conditional/allOpenOrders", 1 },
                        { "cm/order", 1 },
                        { "cm/conditional/order", 1 },
                        { "cm/allOpenOrders", 1 },
                        { "cm/conditional/allOpenOrders", 1 },
                        { "margin/order", 2 },
                        { "margin/allOpenOrders", 5 },
                        { "margin/orderList", 2 },
                        { "listenKey", 0.2 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "feeSide", "get" },
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.001") },
                    { "maker", this.parseNumber("0.001") },
                } },
                { "linear", new Dictionary<string, object>() {
                    { "trading", new Dictionary<string, object>() {
                        { "feeSide", "quote" },
                        { "tierBased", true },
                        { "percentage", true },
                        { "taker", this.parseNumber("0.000500") },
                        { "maker", this.parseNumber("0.000200") },
                        { "tiers", new Dictionary<string, object>() {
                            { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.000400")}, new List<object> {this.parseNumber("250"), this.parseNumber("0.000400")}, new List<object> {this.parseNumber("2500"), this.parseNumber("0.000350")}, new List<object> {this.parseNumber("7500"), this.parseNumber("0.000320")}, new List<object> {this.parseNumber("22500"), this.parseNumber("0.000300")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.000270")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.000250")}, new List<object> {this.parseNumber("200000"), this.parseNumber("0.000220")}, new List<object> {this.parseNumber("400000"), this.parseNumber("0.000200")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0.000170")}} },
                            { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.000200")}, new List<object> {this.parseNumber("250"), this.parseNumber("0.000160")}, new List<object> {this.parseNumber("2500"), this.parseNumber("0.000140")}, new List<object> {this.parseNumber("7500"), this.parseNumber("0.000120")}, new List<object> {this.parseNumber("22500"), this.parseNumber("0.000100")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.000080")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.000060")}, new List<object> {this.parseNumber("200000"), this.parseNumber("0.000040")}, new List<object> {this.parseNumber("400000"), this.parseNumber("0.000020")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0")}} },
                        } },
                    } },
                } },
                { "inverse", new Dictionary<string, object>() {
                    { "trading", new Dictionary<string, object>() {
                        { "feeSide", "base" },
                        { "tierBased", true },
                        { "percentage", true },
                        { "taker", this.parseNumber("0.000500") },
                        { "maker", this.parseNumber("0.000100") },
                        { "tiers", new Dictionary<string, object>() {
                            { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.000500")}, new List<object> {this.parseNumber("250"), this.parseNumber("0.000450")}, new List<object> {this.parseNumber("2500"), this.parseNumber("0.000400")}, new List<object> {this.parseNumber("7500"), this.parseNumber("0.000300")}, new List<object> {this.parseNumber("22500"), this.parseNumber("0.000250")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.000240")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.000240")}, new List<object> {this.parseNumber("200000"), this.parseNumber("0.000240")}, new List<object> {this.parseNumber("400000"), this.parseNumber("0.000240")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0.000240")}} },
                            { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.000100")}, new List<object> {this.parseNumber("250"), this.parseNumber("0.000080")}, new List<object> {this.parseNumber("2500"), this.parseNumber("0.000050")}, new List<object> {this.parseNumber("7500"), this.parseNumber("0.0000030")}, new List<object> {this.parseNumber("22500"), this.parseNumber("0")}, new List<object> {this.parseNumber("50000"), this.parseNumber("-0.000050")}, new List<object> {this.parseNumber("100000"), this.parseNumber("-0.000060")}, new List<object> {this.parseNumber("200000"), this.parseNumber("-0.000070")}, new List<object> {this.parseNumber("400000"), this.parseNumber("-0.000080")}, new List<object> {this.parseNumber("750000"), this.parseNumber("-0.000090")}} },
                        } },
                    } },
                } },
                { "option", new Dictionary<string, object>() {} },
            } },
            { "currencies", new Dictionary<string, object>() {
                { "BNFCR", this.safeCurrencyStructure(new Dictionary<string, object>() {
                    { "id", "BNFCR" },
                    { "code", "BNFCR" },
                    { "precision", this.parseNumber("0.001") },
                }) },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "BCC", "BCC" },
                { "YOYO", "YOYOW" },
            } },
            { "precisionMode", TICK_SIZE },
            { "options", new Dictionary<string, object>() {
                { "sandboxMode", false },
                { "fetchMargins", true },
                { "fetchMarkets", new List<object>() {"spot", "linear", "inverse"} },
                { "fetchCurrencies", true },
                { "defaultTimeInForce", "GTC" },
                { "defaultType", "spot" },
                { "defaultSubType", null },
                { "hasAlreadyAuthenticatedSuccessfully", false },
                { "warnOnFetchOpenOrdersWithoutSymbol", true },
                { "throwMarginModeAlreadySet", false },
                { "fetchPositions", "positionRisk" },
                { "recvWindow", multiply(10, 1000) },
                { "timeDifference", 0 },
                { "adjustForTimeDifference", false },
                { "newOrderRespType", new Dictionary<string, object>() {
                    { "market", "FULL" },
                    { "limit", "FULL" },
                } },
                { "quoteOrderQty", true },
                { "broker", new Dictionary<string, object>() {
                    { "spot", "x-R4BD3S82" },
                    { "margin", "x-R4BD3S82" },
                    { "future", "x-xcKtGhcu" },
                    { "delivery", "x-xcKtGhcu" },
                    { "swap", "x-xcKtGhcu" },
                    { "option", "x-xcKtGhcu" },
                } },
                { "accountsByType", new Dictionary<string, object>() {
                    { "main", "MAIN" },
                    { "spot", "MAIN" },
                    { "funding", "FUNDING" },
                    { "margin", "MARGIN" },
                    { "cross", "MARGIN" },
                    { "future", "UMFUTURE" },
                    { "delivery", "CMFUTURE" },
                    { "linear", "UMFUTURE" },
                    { "swap", "UMFUTURE" },
                    { "inverse", "CMFUTURE" },
                    { "option", "OPTION" },
                } },
                { "accountsById", new Dictionary<string, object>() {
                    { "MAIN", "spot" },
                    { "FUNDING", "funding" },
                    { "MARGIN", "margin" },
                    { "UMFUTURE", "linear" },
                    { "CMFUTURE", "inverse" },
                    { "OPTION", "option" },
                } },
                { "networks", new Dictionary<string, object>() {
                    { "ERC20", "ETH" },
                    { "TRC20", "TRX" },
                    { "BEP2", "BNB" },
                    { "BEP20", "BSC" },
                    { "OMNI", "OMNI" },
                    { "EOS", "EOS" },
                    { "SPL", "SOL" },
                } },
                { "reverseNetworks", new Dictionary<string, object>() {
                    { "tronscan.org", "TRC20" },
                    { "etherscan.io", "ERC20" },
                    { "bscscan.com", "BSC" },
                    { "explorer.binance.org", "BEP2" },
                    { "bithomp.com", "XRP" },
                    { "bloks.io", "EOS" },
                    { "stellar.expert", "XLM" },
                    { "blockchair.com/bitcoin", "BTC" },
                    { "blockchair.com/bitcoin-cash", "BCH" },
                    { "blockchair.com/ecash", "XEC" },
                    { "explorer.litecoin.net", "LTC" },
                    { "explorer.avax.network", "AVAX" },
                    { "solscan.io", "SOL" },
                    { "polkadot.subscan.io", "DOT" },
                    { "dashboard.internetcomputer.org", "ICP" },
                    { "explorer.chiliz.com", "CHZ" },
                    { "cardanoscan.io", "ADA" },
                    { "mainnet.theoan.com", "AION" },
                    { "algoexplorer.io", "ALGO" },
                    { "explorer.ambrosus.com", "AMB" },
                    { "viewblock.io/zilliqa", "ZIL" },
                    { "viewblock.io/arweave", "AR" },
                    { "explorer.ark.io", "ARK" },
                    { "atomscan.com", "ATOM" },
                    { "www.mintscan.io", "CTK" },
                    { "explorer.bitcoindiamond.org", "BCD" },
                    { "btgexplorer.com", "BTG" },
                    { "bts.ai", "BTS" },
                    { "explorer.celo.org", "CELO" },
                    { "explorer.nervos.org", "CKB" },
                    { "cerebro.cortexlabs.ai", "CTXC" },
                    { "chainz.cryptoid.info", "VIA" },
                    { "explorer.dcrdata.org", "DCR" },
                    { "digiexplorer.info", "DGB" },
                    { "dock.subscan.io", "DOCK" },
                    { "dogechain.info", "DOGE" },
                    { "explorer.elrond.com", "EGLD" },
                    { "blockscout.com", "ETC" },
                    { "explore-fetchhub.fetch.ai", "FET" },
                    { "filfox.info", "FIL" },
                    { "fio.bloks.io", "FIO" },
                    { "explorer.firo.org", "FIRO" },
                    { "neoscan.io", "NEO" },
                    { "ftmscan.com", "FTM" },
                    { "explorer.gochain.io", "GO" },
                    { "block.gxb.io", "GXS" },
                    { "hash-hash.info", "HBAR" },
                    { "www.hiveblockexplorer.com", "HIVE" },
                    { "explorer.helium.com", "HNT" },
                    { "tracker.icon.foundation", "ICX" },
                    { "www.iostabc.com", "IOST" },
                    { "explorer.iota.org", "IOTA" },
                    { "iotexscan.io", "IOTX" },
                    { "irishub.iobscan.io", "IRIS" },
                    { "kava.mintscan.io", "KAVA" },
                    { "scope.klaytn.com", "KLAY" },
                    { "kmdexplorer.io", "KMD" },
                    { "kusama.subscan.io", "KSM" },
                    { "explorer.lto.network", "LTO" },
                    { "polygonscan.com", "POLYGON" },
                    { "explorer.ont.io", "ONT" },
                    { "minaexplorer.com", "MINA" },
                    { "nanolooker.com", "NANO" },
                    { "explorer.nebulas.io", "NAS" },
                    { "explorer.nbs.plus", "NBS" },
                    { "explorer.nebl.io", "NEBL" },
                    { "nulscan.io", "NULS" },
                    { "nxscan.com", "NXS" },
                    { "explorer.harmony.one", "ONE" },
                    { "explorer.poa.network", "POA" },
                    { "qtum.info", "QTUM" },
                    { "explorer.rsk.co", "RSK" },
                    { "www.oasisscan.com", "ROSE" },
                    { "ravencoin.network", "RVN" },
                    { "sc.tokenview.com", "SC" },
                    { "secretnodes.com", "SCRT" },
                    { "explorer.skycoin.com", "SKY" },
                    { "steemscan.com", "STEEM" },
                    { "explorer.stacks.co", "STX" },
                    { "www.thetascan.io", "THETA" },
                    { "scan.tomochain.com", "TOMO" },
                    { "explore.vechain.org", "VET" },
                    { "explorer.vite.net", "VITE" },
                    { "www.wanscan.org", "WAN" },
                    { "wavesexplorer.com", "WAVES" },
                    { "wax.eosx.io", "WAXP" },
                    { "waltonchain.pro", "WTC" },
                    { "chain.nem.ninja", "XEM" },
                    { "verge-blockchain.info", "XVG" },
                    { "explorer.yoyow.org", "YOYOW" },
                    { "explorer.zcha.in", "ZEC" },
                    { "explorer.zensystem.io", "ZEN" },
                } },
                { "networksById", new Dictionary<string, object>() {
                    { "tronscan.org", "TRC20" },
                    { "etherscan.io", "ERC20" },
                    { "bscscan.com", "BSC" },
                    { "explorer.binance.org", "BEP2" },
                    { "bithomp.com", "XRP" },
                    { "bloks.io", "EOS" },
                    { "stellar.expert", "XLM" },
                    { "blockchair.com/bitcoin", "BTC" },
                    { "blockchair.com/bitcoin-cash", "BCH" },
                    { "blockchair.com/ecash", "XEC" },
                    { "explorer.litecoin.net", "LTC" },
                    { "explorer.avax.network", "AVAX" },
                    { "solscan.io", "SOL" },
                    { "polkadot.subscan.io", "DOT" },
                    { "dashboard.internetcomputer.org", "ICP" },
                    { "explorer.chiliz.com", "CHZ" },
                    { "cardanoscan.io", "ADA" },
                    { "mainnet.theoan.com", "AION" },
                    { "algoexplorer.io", "ALGO" },
                    { "explorer.ambrosus.com", "AMB" },
                    { "viewblock.io/zilliqa", "ZIL" },
                    { "viewblock.io/arweave", "AR" },
                    { "explorer.ark.io", "ARK" },
                    { "atomscan.com", "ATOM" },
                    { "www.mintscan.io", "CTK" },
                    { "explorer.bitcoindiamond.org", "BCD" },
                    { "btgexplorer.com", "BTG" },
                    { "bts.ai", "BTS" },
                    { "explorer.celo.org", "CELO" },
                    { "explorer.nervos.org", "CKB" },
                    { "cerebro.cortexlabs.ai", "CTXC" },
                    { "chainz.cryptoid.info", "VIA" },
                    { "explorer.dcrdata.org", "DCR" },
                    { "digiexplorer.info", "DGB" },
                    { "dock.subscan.io", "DOCK" },
                    { "dogechain.info", "DOGE" },
                    { "explorer.elrond.com", "EGLD" },
                    { "blockscout.com", "ETC" },
                    { "explore-fetchhub.fetch.ai", "FET" },
                    { "filfox.info", "FIL" },
                    { "fio.bloks.io", "FIO" },
                    { "explorer.firo.org", "FIRO" },
                    { "neoscan.io", "NEO" },
                    { "ftmscan.com", "FTM" },
                    { "explorer.gochain.io", "GO" },
                    { "block.gxb.io", "GXS" },
                    { "hash-hash.info", "HBAR" },
                    { "www.hiveblockexplorer.com", "HIVE" },
                    { "explorer.helium.com", "HNT" },
                    { "tracker.icon.foundation", "ICX" },
                    { "www.iostabc.com", "IOST" },
                    { "explorer.iota.org", "IOTA" },
                    { "iotexscan.io", "IOTX" },
                    { "irishub.iobscan.io", "IRIS" },
                    { "kava.mintscan.io", "KAVA" },
                    { "scope.klaytn.com", "KLAY" },
                    { "kmdexplorer.io", "KMD" },
                    { "kusama.subscan.io", "KSM" },
                    { "explorer.lto.network", "LTO" },
                    { "polygonscan.com", "POLYGON" },
                    { "explorer.ont.io", "ONT" },
                    { "minaexplorer.com", "MINA" },
                    { "nanolooker.com", "NANO" },
                    { "explorer.nebulas.io", "NAS" },
                    { "explorer.nbs.plus", "NBS" },
                    { "explorer.nebl.io", "NEBL" },
                    { "nulscan.io", "NULS" },
                    { "nxscan.com", "NXS" },
                    { "explorer.harmony.one", "ONE" },
                    { "explorer.poa.network", "POA" },
                    { "qtum.info", "QTUM" },
                    { "explorer.rsk.co", "RSK" },
                    { "www.oasisscan.com", "ROSE" },
                    { "ravencoin.network", "RVN" },
                    { "sc.tokenview.com", "SC" },
                    { "secretnodes.com", "SCRT" },
                    { "explorer.skycoin.com", "SKY" },
                    { "steemscan.com", "STEEM" },
                    { "explorer.stacks.co", "STX" },
                    { "www.thetascan.io", "THETA" },
                    { "scan.tomochain.com", "TOMO" },
                    { "explore.vechain.org", "VET" },
                    { "explorer.vite.net", "VITE" },
                    { "www.wanscan.org", "WAN" },
                    { "wavesexplorer.com", "WAVES" },
                    { "wax.eosx.io", "WAXP" },
                    { "waltonchain.pro", "WTC" },
                    { "chain.nem.ninja", "XEM" },
                    { "verge-blockchain.info", "XVG" },
                    { "explorer.yoyow.org", "YOYOW" },
                    { "explorer.zcha.in", "ZEC" },
                    { "explorer.zensystem.io", "ZEN" },
                } },
                { "impliedNetworks", new Dictionary<string, object>() {
                    { "ETH", new Dictionary<string, object>() {
                        { "ERC20", "ETH" },
                    } },
                    { "TRX", new Dictionary<string, object>() {
                        { "TRC20", "TRX" },
                    } },
                } },
                { "legalMoney", new Dictionary<string, object>() {
                    { "MXN", true },
                    { "UGX", true },
                    { "SEK", true },
                    { "CHF", true },
                    { "VND", true },
                    { "AED", true },
                    { "DKK", true },
                    { "KZT", true },
                    { "HUF", true },
                    { "PEN", true },
                    { "PHP", true },
                    { "USD", true },
                    { "TRY", true },
                    { "EUR", true },
                    { "NGN", true },
                    { "PLN", true },
                    { "BRL", true },
                    { "ZAR", true },
                    { "KES", true },
                    { "ARS", true },
                    { "RUB", true },
                    { "AUD", true },
                    { "NOK", true },
                    { "CZK", true },
                    { "GBP", true },
                    { "UAH", true },
                    { "GHS", true },
                    { "HKD", true },
                    { "CAD", true },
                    { "INR", true },
                    { "JPY", true },
                    { "NZD", true },
                } },
                { "legalMoneyCurrenciesById", new Dictionary<string, object>() {
                    { "BUSD", "USD" },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "spot", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {
                        { "-1004", typeof(OperationFailed) },
                        { "-1008", typeof(OperationFailed) },
                        { "-1099", typeof(AuthenticationError) },
                        { "-1108", typeof(BadRequest) },
                        { "-1131", typeof(BadRequest) },
                        { "-1134", typeof(BadRequest) },
                        { "-1135", typeof(BadRequest) },
                        { "-1145", typeof(BadRequest) },
                        { "-1151", typeof(BadSymbol) },
                        { "-2008", typeof(AuthenticationError) },
                        { "-2016", typeof(OperationRejected) },
                        { "-2021", typeof(BadResponse) },
                        { "-2022", typeof(BadResponse) },
                        { "-2026", typeof(InvalidOrder) },
                        { "-3000", typeof(OperationFailed) },
                        { "-3001", typeof(AuthenticationError) },
                        { "-3002", typeof(BadSymbol) },
                        { "-3003", typeof(BadRequest) },
                        { "-3004", typeof(OperationRejected) },
                        { "-3005", typeof(BadRequest) },
                        { "-3006", typeof(BadRequest) },
                        { "-3007", typeof(OperationFailed) },
                        { "-3008", typeof(BadRequest) },
                        { "-3009", typeof(OperationRejected) },
                        { "-3010", typeof(BadRequest) },
                        { "-3011", typeof(BadRequest) },
                        { "-3012", typeof(OperationRejected) },
                        { "-3013", typeof(BadRequest) },
                        { "-3014", typeof(AccountSuspended) },
                        { "-3015", typeof(BadRequest) },
                        { "-3016", typeof(BadRequest) },
                        { "-3017", typeof(OperationRejected) },
                        { "-3018", typeof(AccountSuspended) },
                        { "-3019", typeof(AccountSuspended) },
                        { "-3020", typeof(BadRequest) },
                        { "-3021", typeof(BadRequest) },
                        { "-3022", typeof(AccountSuspended) },
                        { "-3023", typeof(OperationRejected) },
                        { "-3024", typeof(OperationRejected) },
                        { "-3025", typeof(BadRequest) },
                        { "-3026", typeof(BadRequest) },
                        { "-3027", typeof(BadSymbol) },
                        { "-3028", typeof(BadSymbol) },
                        { "-3029", typeof(OperationFailed) },
                        { "-3036", typeof(AccountSuspended) },
                        { "-3037", typeof(OperationFailed) },
                        { "-3038", typeof(BadRequest) },
                        { "-3041", typeof(InsufficientFunds) },
                        { "-3042", typeof(BadRequest) },
                        { "-3043", typeof(PermissionDenied) },
                        { "-3044", typeof(OperationFailed) },
                        { "-3045", typeof(OperationRejected) },
                        { "-3999", typeof(PermissionDenied) },
                        { "-4000", typeof(ExchangeError) },
                        { "-4001", typeof(BadRequest) },
                        { "-4002", typeof(BadRequest) },
                        { "-4003", typeof(BadRequest) },
                        { "-4004", typeof(AuthenticationError) },
                        { "-4005", typeof(RateLimitExceeded) },
                        { "-4006", typeof(BadRequest) },
                        { "-4007", typeof(PermissionDenied) },
                        { "-4008", typeof(PermissionDenied) },
                        { "-4009", typeof(ExchangeError) },
                        { "-4010", typeof(PermissionDenied) },
                        { "-4011", typeof(BadRequest) },
                        { "-4012", typeof(PermissionDenied) },
                        { "-4013", typeof(AuthenticationError) },
                        { "-4014", typeof(OperationRejected) },
                        { "-4015", typeof(PermissionDenied) },
                        { "-4016", typeof(PermissionDenied) },
                        { "-4017", typeof(PermissionDenied) },
                        { "-4018", typeof(BadSymbol) },
                        { "-4019", typeof(BadRequest) },
                        { "-4020", typeof(ExchangeError) },
                        { "-4021", typeof(BadRequest) },
                        { "-4022", typeof(BadRequest) },
                        { "-4023", typeof(OperationRejected) },
                        { "-4024", typeof(InsufficientFunds) },
                        { "-4025", typeof(InsufficientFunds) },
                        { "-4026", typeof(InsufficientFunds) },
                        { "-4027", typeof(OperationFailed) },
                        { "-4028", typeof(BadRequest) },
                        { "-4029", typeof(BadRequest) },
                        { "-4030", typeof(BadResponse) },
                        { "-4031", typeof(OperationFailed) },
                        { "-4032", typeof(OperationRejected) },
                        { "-4033", typeof(BadRequest) },
                        { "-4034", typeof(OperationRejected) },
                        { "-4035", typeof(PermissionDenied) },
                        { "-4036", typeof(PermissionDenied) },
                        { "-4037", typeof(OperationFailed) },
                        { "-4038", typeof(OperationFailed) },
                        { "-4039", typeof(PermissionDenied) },
                        { "-4040", typeof(OperationRejected) },
                        { "-4041", typeof(OperationFailed) },
                        { "-4042", typeof(OperationRejected) },
                        { "-4043", typeof(OperationRejected) },
                        { "-4044", typeof(PermissionDenied) },
                        { "-4045", typeof(OperationFailed) },
                        { "-4046", typeof(AuthenticationError) },
                        { "-4047", typeof(BadRequest) },
                        { "-4048", typeof(ExchangeError) },
                        { "-4049", typeof(ExchangeError) },
                        { "-4050", typeof(ExchangeError) },
                        { "-4051", typeof(ExchangeError) },
                        { "-4052", typeof(ExchangeError) },
                        { "-4053", typeof(ExchangeError) },
                        { "-4054", typeof(ExchangeError) },
                        { "-4055", typeof(ExchangeError) },
                        { "-4056", typeof(ExchangeError) },
                        { "-4057", typeof(ExchangeError) },
                        { "-4058", typeof(ExchangeError) },
                        { "-4059", typeof(ExchangeError) },
                        { "-4060", typeof(OperationFailed) },
                        { "-4061", typeof(ExchangeError) },
                        { "-4062", typeof(ExchangeError) },
                        { "-4063", typeof(ExchangeError) },
                        { "-4064", typeof(ExchangeError) },
                        { "-4065", typeof(ExchangeError) },
                        { "-4066", typeof(ExchangeError) },
                        { "-4067", typeof(ExchangeError) },
                        { "-4068", typeof(ExchangeError) },
                        { "-4069", typeof(ExchangeError) },
                        { "-4070", typeof(ExchangeError) },
                        { "-4071", typeof(ExchangeError) },
                        { "-4072", typeof(ExchangeError) },
                        { "-4073", typeof(ExchangeError) },
                        { "-4074", typeof(ExchangeError) },
                        { "-4075", typeof(ExchangeError) },
                        { "-4076", typeof(ExchangeError) },
                        { "-4077", typeof(ExchangeError) },
                        { "-4078", typeof(ExchangeError) },
                        { "-4079", typeof(ExchangeError) },
                        { "-4080", typeof(ExchangeError) },
                        { "-4081", typeof(ExchangeError) },
                        { "-4082", typeof(ExchangeError) },
                        { "-4083", typeof(ExchangeError) },
                        { "-4084", typeof(ExchangeError) },
                        { "-4085", typeof(ExchangeError) },
                        { "-4086", typeof(ExchangeError) },
                        { "-4087", typeof(ExchangeError) },
                        { "-4088", typeof(ExchangeError) },
                        { "-4089", typeof(ExchangeError) },
                        { "-4091", typeof(ExchangeError) },
                        { "-4092", typeof(ExchangeError) },
                        { "-4093", typeof(ExchangeError) },
                        { "-4094", typeof(ExchangeError) },
                        { "-4095", typeof(ExchangeError) },
                        { "-4096", typeof(ExchangeError) },
                        { "-4097", typeof(ExchangeError) },
                        { "-4098", typeof(ExchangeError) },
                        { "-4099", typeof(ExchangeError) },
                        { "-4101", typeof(ExchangeError) },
                        { "-4102", typeof(ExchangeError) },
                        { "-4103", typeof(ExchangeError) },
                        { "-4104", typeof(ExchangeError) },
                        { "-4105", typeof(ExchangeError) },
                        { "-4106", typeof(ExchangeError) },
                        { "-4107", typeof(ExchangeError) },
                        { "-4108", typeof(ExchangeError) },
                        { "-4109", typeof(ExchangeError) },
                        { "-4110", typeof(ExchangeError) },
                        { "-4112", typeof(ExchangeError) },
                        { "-4113", typeof(ExchangeError) },
                        { "-4114", typeof(ExchangeError) },
                        { "-4115", typeof(ExchangeError) },
                        { "-4116", typeof(ExchangeError) },
                        { "-4117", typeof(ExchangeError) },
                        { "-4118", typeof(ExchangeError) },
                        { "-4119", typeof(ExchangeError) },
                        { "-4120", typeof(ExchangeError) },
                        { "-4121", typeof(ExchangeError) },
                        { "-4122", typeof(ExchangeError) },
                        { "-4123", typeof(ExchangeError) },
                        { "-4124", typeof(ExchangeError) },
                        { "-4125", typeof(ExchangeError) },
                        { "-4126", typeof(ExchangeError) },
                        { "-4127", typeof(ExchangeError) },
                        { "-4128", typeof(ExchangeError) },
                        { "-4129", typeof(ExchangeError) },
                        { "-4130", typeof(ExchangeError) },
                        { "-4131", typeof(ExchangeError) },
                        { "-4132", typeof(ExchangeError) },
                        { "-4133", typeof(ExchangeError) },
                        { "-4134", typeof(ExchangeError) },
                        { "-4135", typeof(ExchangeError) },
                        { "-4136", typeof(ExchangeError) },
                        { "-4137", typeof(ExchangeError) },
                        { "-4138", typeof(ExchangeError) },
                        { "-4139", typeof(ExchangeError) },
                        { "-4141", typeof(ExchangeError) },
                        { "-4142", typeof(ExchangeError) },
                        { "-4143", typeof(ExchangeError) },
                        { "-4144", typeof(ExchangeError) },
                        { "-4145", typeof(ExchangeError) },
                        { "-4146", typeof(ExchangeError) },
                        { "-4147", typeof(ExchangeError) },
                        { "-4148", typeof(ExchangeError) },
                        { "-4149", typeof(ExchangeError) },
                        { "-4150", typeof(ExchangeError) },
                        { "-5001", typeof(BadRequest) },
                        { "-5002", typeof(InsufficientFunds) },
                        { "-5003", typeof(InsufficientFunds) },
                        { "-5004", typeof(OperationRejected) },
                        { "-5005", typeof(OperationRejected) },
                        { "-5006", typeof(OperationRejected) },
                        { "-5007", typeof(BadRequest) },
                        { "-5008", typeof(OperationRejected) },
                        { "-5009", typeof(BadSymbol) },
                        { "-5010", typeof(OperationFailed) },
                        { "-5011", typeof(BadRequest) },
                        { "-5012", typeof(OperationFailed) },
                        { "-5013", typeof(InsufficientFunds) },
                        { "-5021", typeof(BadRequest) },
                        { "-5022", typeof(BadRequest) },
                        { "-6001", typeof(BadSymbol) },
                        { "-6003", typeof(PermissionDenied) },
                        { "-6004", typeof(BadRequest) },
                        { "-6005", typeof(BadRequest) },
                        { "-6006", typeof(BadRequest) },
                        { "-6007", typeof(OperationRejected) },
                        { "-6008", typeof(OperationRejected) },
                        { "-6009", typeof(RateLimitExceeded) },
                        { "-6011", typeof(OperationRejected) },
                        { "-6012", typeof(InsufficientFunds) },
                        { "-6013", typeof(BadResponse) },
                        { "-6014", typeof(OperationRejected) },
                        { "-6015", typeof(BadRequest) },
                        { "-6016", typeof(BadRequest) },
                        { "-6017", typeof(PermissionDenied) },
                        { "-6018", typeof(InsufficientFunds) },
                        { "-6019", typeof(OperationRejected) },
                        { "-6020", typeof(BadRequest) },
                        { "-7001", typeof(BadRequest) },
                        { "-7002", typeof(BadRequest) },
                        { "-10001", typeof(OperationFailed) },
                        { "-10002", typeof(BadRequest) },
                        { "-10005", typeof(BadResponse) },
                        { "-10007", typeof(BadRequest) },
                        { "-10008", typeof(BadRequest) },
                        { "-10009", typeof(BadRequest) },
                        { "-10010", typeof(BadRequest) },
                        { "-10011", typeof(InsufficientFunds) },
                        { "-10012", typeof(BadRequest) },
                        { "-10013", typeof(InsufficientFunds) },
                        { "-10015", typeof(OperationFailed) },
                        { "-10016", typeof(OperationFailed) },
                        { "-10017", typeof(OperationRejected) },
                        { "-10018", typeof(BadRequest) },
                        { "-10019", typeof(BadRequest) },
                        { "-10020", typeof(BadRequest) },
                        { "-10021", typeof(InvalidOrder) },
                        { "-10022", typeof(BadRequest) },
                        { "-10023", typeof(OperationFailed) },
                        { "-10024", typeof(BadRequest) },
                        { "-10025", typeof(OperationFailed) },
                        { "-10026", typeof(BadRequest) },
                        { "-10028", typeof(BadRequest) },
                        { "-10029", typeof(OperationRejected) },
                        { "-10030", typeof(OperationRejected) },
                        { "-10031", typeof(OperationRejected) },
                        { "-10032", typeof(OperationFailed) },
                        { "-10034", typeof(OperationRejected) },
                        { "-10039", typeof(OperationRejected) },
                        { "-10040", typeof(OperationRejected) },
                        { "-10041", typeof(OperationFailed) },
                        { "-10042", typeof(BadSymbol) },
                        { "-10043", typeof(OperationRejected) },
                        { "-10044", typeof(OperationRejected) },
                        { "-10045", typeof(OperationRejected) },
                        { "-10046", typeof(OperationRejected) },
                        { "-10047", typeof(PermissionDenied) },
                        { "-11008", typeof(OperationRejected) },
                        { "-12014", typeof(RateLimitExceeded) },
                        { "-13000", typeof(OperationRejected) },
                        { "-13001", typeof(OperationRejected) },
                        { "-13002", typeof(OperationRejected) },
                        { "-13003", typeof(PermissionDenied) },
                        { "-13004", typeof(OperationRejected) },
                        { "-13005", typeof(OperationRejected) },
                        { "-13006", typeof(OperationRejected) },
                        { "-13007", typeof(PermissionDenied) },
                        { "-18002", typeof(OperationRejected) },
                        { "-18003", typeof(OperationRejected) },
                        { "-18004", typeof(OperationRejected) },
                        { "-18005", typeof(PermissionDenied) },
                        { "-18006", typeof(OperationRejected) },
                        { "-18007", typeof(OperationRejected) },
                        { "-21001", typeof(BadRequest) },
                        { "-21002", typeof(BadRequest) },
                        { "-21003", typeof(BadResponse) },
                        { "-21004", typeof(OperationRejected) },
                        { "-21005", typeof(InsufficientFunds) },
                        { "-21006", typeof(OperationFailed) },
                        { "-21007", typeof(OperationFailed) },
                        { "-32603", typeof(BadRequest) },
                        { "400002", typeof(BadRequest) },
                        { "100001003", typeof(AuthenticationError) },
                        { "200003903", typeof(AuthenticationError) },
                    } },
                } },
                { "linear", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {
                        { "-1005", typeof(PermissionDenied) },
                        { "-1008", typeof(OperationFailed) },
                        { "-1011", typeof(PermissionDenied) },
                        { "-1023", typeof(BadRequest) },
                        { "-1099", typeof(AuthenticationError) },
                        { "-1109", typeof(PermissionDenied) },
                        { "-1110", typeof(BadRequest) },
                        { "-1113", typeof(BadRequest) },
                        { "-1122", typeof(BadRequest) },
                        { "-1126", typeof(BadSymbol) },
                        { "-1136", typeof(BadRequest) },
                        { "-2012", typeof(OperationFailed) },
                        { "-2016", typeof(OperationRejected) },
                        { "-2017", typeof(PermissionDenied) },
                        { "-2018", typeof(InsufficientFunds) },
                        { "-2019", typeof(InsufficientFunds) },
                        { "-2020", typeof(OperationFailed) },
                        { "-2021", typeof(OrderImmediatelyFillable) },
                        { "-2022", typeof(InvalidOrder) },
                        { "-2023", typeof(OperationFailed) },
                        { "-2024", typeof(InsufficientFunds) },
                        { "-2025", typeof(OperationRejected) },
                        { "-2026", typeof(InvalidOrder) },
                        { "-2027", typeof(OperationRejected) },
                        { "-2028", typeof(OperationRejected) },
                        { "-4063", typeof(BadRequest) },
                        { "-4064", typeof(BadRequest) },
                        { "-4065", typeof(BadRequest) },
                        { "-4066", typeof(BadRequest) },
                        { "-4069", typeof(BadRequest) },
                        { "-4070", typeof(BadRequest) },
                        { "-4071", typeof(BadRequest) },
                        { "-4072", typeof(OperationRejected) },
                        { "-4073", typeof(BadRequest) },
                        { "-4074", typeof(OperationRejected) },
                        { "-4075", typeof(BadRequest) },
                        { "-4076", typeof(OperationRejected) },
                        { "-4077", typeof(OperationRejected) },
                        { "-4078", typeof(OperationFailed) },
                        { "-4079", typeof(BadRequest) },
                        { "-4080", typeof(PermissionDenied) },
                        { "-4081", typeof(BadRequest) },
                        { "-4085", typeof(BadRequest) },
                        { "-4087", typeof(PermissionDenied) },
                        { "-4088", typeof(PermissionDenied) },
                        { "-4114", typeof(BadRequest) },
                        { "-4115", typeof(BadRequest) },
                        { "-4118", typeof(OperationRejected) },
                        { "-4131", typeof(OperationRejected) },
                        { "-4140", typeof(BadRequest) },
                        { "-4141", typeof(OperationRejected) },
                        { "-4144", typeof(BadSymbol) },
                        { "-4164", typeof(InvalidOrder) },
                        { "-4165", typeof(BadRequest) },
                        { "-4167", typeof(BadRequest) },
                        { "-4168", typeof(BadRequest) },
                        { "-4169", typeof(OperationRejected) },
                        { "-4170", typeof(OperationRejected) },
                        { "-4171", typeof(OperationRejected) },
                        { "-4172", typeof(OperationRejected) },
                        { "-4183", typeof(BadRequest) },
                        { "-4184", typeof(BadRequest) },
                        { "-4192", typeof(PermissionDenied) },
                        { "-4202", typeof(PermissionDenied) },
                        { "-4203", typeof(PermissionDenied) },
                        { "-4205", typeof(PermissionDenied) },
                        { "-4206", typeof(PermissionDenied) },
                        { "-4208", typeof(OperationRejected) },
                        { "-4209", typeof(OperationRejected) },
                        { "-4210", typeof(BadRequest) },
                        { "-4211", typeof(BadRequest) },
                        { "-4400", typeof(PermissionDenied) },
                        { "-4401", typeof(PermissionDenied) },
                        { "-4402", typeof(PermissionDenied) },
                        { "-4403", typeof(PermissionDenied) },
                        { "-5021", typeof(OrderNotFillable) },
                        { "-5022", typeof(OrderNotFillable) },
                        { "-5024", typeof(OperationRejected) },
                        { "-5025", typeof(OperationRejected) },
                        { "-5026", typeof(OperationRejected) },
                        { "-5027", typeof(OperationRejected) },
                        { "-5028", typeof(BadRequest) },
                        { "-5037", typeof(BadRequest) },
                        { "-5038", typeof(BadRequest) },
                        { "-5039", typeof(BadRequest) },
                        { "-5040", typeof(BadRequest) },
                        { "-5041", typeof(OperationFailed) },
                    } },
                } },
                { "inverse", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {
                        { "-1005", typeof(PermissionDenied) },
                        { "-1011", typeof(PermissionDenied) },
                        { "-1023", typeof(BadRequest) },
                        { "-1109", typeof(AuthenticationError) },
                        { "-1110", typeof(BadSymbol) },
                        { "-1113", typeof(BadRequest) },
                        { "-1128", typeof(BadRequest) },
                        { "-1136", typeof(BadRequest) },
                        { "-2016", typeof(OperationRejected) },
                        { "-2018", typeof(InsufficientFunds) },
                        { "-2019", typeof(InsufficientFunds) },
                        { "-2020", typeof(OperationFailed) },
                        { "-2021", typeof(OrderImmediatelyFillable) },
                        { "-2022", typeof(InvalidOrder) },
                        { "-2023", typeof(OperationFailed) },
                        { "-2024", typeof(BadRequest) },
                        { "-2025", typeof(OperationRejected) },
                        { "-2026", typeof(InvalidOrder) },
                        { "-2027", typeof(OperationRejected) },
                        { "-2028", typeof(OperationRejected) },
                        { "-4086", typeof(BadRequest) },
                        { "-4087", typeof(BadSymbol) },
                        { "-4088", typeof(BadRequest) },
                        { "-4089", typeof(PermissionDenied) },
                        { "-4090", typeof(PermissionDenied) },
                        { "-4110", typeof(BadRequest) },
                        { "-4111", typeof(BadRequest) },
                        { "-4112", typeof(OperationRejected) },
                        { "-4113", typeof(OperationRejected) },
                        { "-4150", typeof(OperationRejected) },
                        { "-4151", typeof(BadRequest) },
                        { "-4152", typeof(BadRequest) },
                        { "-4154", typeof(BadRequest) },
                        { "-4155", typeof(BadRequest) },
                        { "-4178", typeof(BadRequest) },
                        { "-4188", typeof(BadRequest) },
                        { "-4192", typeof(PermissionDenied) },
                        { "-4194", typeof(PermissionDenied) },
                        { "-4195", typeof(PermissionDenied) },
                        { "-4196", typeof(BadRequest) },
                        { "-4197", typeof(OperationRejected) },
                        { "-4198", typeof(OperationRejected) },
                        { "-4199", typeof(BadRequest) },
                        { "-4200", typeof(PermissionDenied) },
                        { "-4201", typeof(PermissionDenied) },
                        { "-4202", typeof(OperationRejected) },
                    } },
                } },
                { "option", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {
                        { "-1003", typeof(ExchangeError) },
                        { "-1004", typeof(ExchangeError) },
                        { "-1006", typeof(ExchangeError) },
                        { "-1007", typeof(ExchangeError) },
                        { "-1008", typeof(RateLimitExceeded) },
                        { "-1010", typeof(ExchangeError) },
                        { "-1013", typeof(ExchangeError) },
                        { "-1108", typeof(ExchangeError) },
                        { "-1112", typeof(ExchangeError) },
                        { "-1114", typeof(ExchangeError) },
                        { "-1128", typeof(BadSymbol) },
                        { "-1129", typeof(BadSymbol) },
                        { "-1131", typeof(BadRequest) },
                        { "-2011", typeof(ExchangeError) },
                        { "-2018", typeof(InsufficientFunds) },
                        { "-2027", typeof(InsufficientFunds) },
                        { "-3029", typeof(OperationFailed) },
                        { "-4006", typeof(ExchangeError) },
                        { "-4007", typeof(ExchangeError) },
                        { "-4008", typeof(ExchangeError) },
                        { "-4009", typeof(ExchangeError) },
                        { "-4010", typeof(ExchangeError) },
                        { "-4011", typeof(ExchangeError) },
                        { "-4012", typeof(ExchangeError) },
                        { "-4014", typeof(ExchangeError) },
                        { "-4015", typeof(ExchangeError) },
                        { "-4016", typeof(ExchangeError) },
                        { "-4017", typeof(ExchangeError) },
                        { "-4018", typeof(ExchangeError) },
                        { "-4019", typeof(ExchangeError) },
                        { "-4020", typeof(ExchangeError) },
                        { "-4021", typeof(ExchangeError) },
                        { "-4022", typeof(ExchangeError) },
                        { "-4023", typeof(ExchangeError) },
                        { "-4024", typeof(ExchangeError) },
                        { "-4025", typeof(ExchangeError) },
                        { "-4026", typeof(ExchangeError) },
                        { "-4027", typeof(ExchangeError) },
                        { "-4028", typeof(ExchangeError) },
                        { "-4031", typeof(ExchangeError) },
                        { "-4032", typeof(ExchangeError) },
                        { "-4033", typeof(ExchangeError) },
                        { "-4034", typeof(ExchangeError) },
                        { "-4035", typeof(ExchangeError) },
                        { "-4036", typeof(ExchangeError) },
                        { "-4037", typeof(ExchangeError) },
                        { "-4038", typeof(ExchangeError) },
                        { "-4039", typeof(ExchangeError) },
                        { "-4040", typeof(ExchangeError) },
                        { "-4041", typeof(ExchangeError) },
                        { "-4042", typeof(ExchangeError) },
                        { "-4043", typeof(ExchangeError) },
                        { "-4044", typeof(ExchangeError) },
                        { "-4045", typeof(ExchangeError) },
                        { "-4046", typeof(ExchangeError) },
                        { "-4047", typeof(ExchangeError) },
                        { "-4048", typeof(ExchangeError) },
                        { "-4049", typeof(ExchangeError) },
                        { "-4050", typeof(ExchangeError) },
                        { "-4051", typeof(ExchangeError) },
                        { "-4052", typeof(ExchangeError) },
                        { "-4053", typeof(ExchangeError) },
                        { "-4054", typeof(ExchangeError) },
                        { "-4056", typeof(ExchangeError) },
                        { "-4057", typeof(ExchangeError) },
                        { "-4058", typeof(ExchangeError) },
                        { "-4059", typeof(ExchangeError) },
                        { "-4060", typeof(ExchangeError) },
                        { "-4061", typeof(ExchangeError) },
                        { "-4062", typeof(ExchangeError) },
                        { "-4063", typeof(ExchangeError) },
                        { "-4064", typeof(ExchangeError) },
                        { "-4065", typeof(ExchangeError) },
                        { "-4066", typeof(ExchangeError) },
                        { "-4067", typeof(ExchangeError) },
                        { "-4068", typeof(ExchangeError) },
                        { "-4069", typeof(ExchangeError) },
                        { "-4070", typeof(ExchangeError) },
                        { "-4071", typeof(ExchangeError) },
                        { "-4072", typeof(ExchangeError) },
                        { "-4073", typeof(ExchangeError) },
                        { "-4074", typeof(ExchangeError) },
                        { "-4075", typeof(ExchangeError) },
                        { "-4076", typeof(ExchangeError) },
                        { "-4077", typeof(ExchangeError) },
                        { "-4078", typeof(ExchangeError) },
                        { "-4079", typeof(ExchangeError) },
                        { "-4080", typeof(ExchangeError) },
                        { "-4081", typeof(ExchangeError) },
                        { "-4082", typeof(ExchangeError) },
                        { "-4083", typeof(ExchangeError) },
                        { "-4084", typeof(ExchangeError) },
                        { "-4085", typeof(ExchangeError) },
                        { "-4086", typeof(ExchangeError) },
                        { "-4087", typeof(ExchangeError) },
                        { "-4088", typeof(ExchangeError) },
                        { "-4089", typeof(ExchangeError) },
                        { "-4091", typeof(ExchangeError) },
                        { "-4092", typeof(ExchangeError) },
                        { "-4093", typeof(ExchangeError) },
                        { "-4094", typeof(ExchangeError) },
                        { "-4095", typeof(ExchangeError) },
                        { "-4096", typeof(ExchangeError) },
                        { "-4097", typeof(ExchangeError) },
                        { "-4098", typeof(ExchangeError) },
                        { "-4099", typeof(ExchangeError) },
                        { "-4101", typeof(ExchangeError) },
                        { "-4102", typeof(ExchangeError) },
                        { "-4103", typeof(ExchangeError) },
                        { "-4104", typeof(ExchangeError) },
                        { "-4105", typeof(ExchangeError) },
                        { "-4106", typeof(ExchangeError) },
                        { "-4107", typeof(ExchangeError) },
                        { "-4108", typeof(ExchangeError) },
                        { "-4109", typeof(ExchangeError) },
                        { "-4110", typeof(ExchangeError) },
                        { "-4112", typeof(ExchangeError) },
                        { "-4113", typeof(ExchangeError) },
                        { "-4114", typeof(ExchangeError) },
                        { "-4115", typeof(ExchangeError) },
                        { "-4116", typeof(ExchangeError) },
                        { "-4117", typeof(ExchangeError) },
                        { "-4118", typeof(ExchangeError) },
                        { "-4119", typeof(ExchangeError) },
                        { "-4120", typeof(ExchangeError) },
                        { "-4121", typeof(ExchangeError) },
                        { "-4122", typeof(ExchangeError) },
                        { "-4123", typeof(ExchangeError) },
                        { "-4124", typeof(ExchangeError) },
                        { "-4125", typeof(ExchangeError) },
                        { "-4126", typeof(ExchangeError) },
                        { "-4127", typeof(ExchangeError) },
                        { "-4128", typeof(ExchangeError) },
                        { "-4129", typeof(ExchangeError) },
                        { "-4130", typeof(ExchangeError) },
                        { "-4131", typeof(ExchangeError) },
                        { "-4132", typeof(ExchangeError) },
                        { "-4133", typeof(ExchangeError) },
                        { "-4134", typeof(ExchangeError) },
                        { "-4135", typeof(ExchangeError) },
                        { "-4136", typeof(ExchangeError) },
                        { "-4137", typeof(ExchangeError) },
                        { "-4138", typeof(ExchangeError) },
                        { "-4139", typeof(ExchangeError) },
                        { "-4141", typeof(ExchangeError) },
                        { "-4142", typeof(ExchangeError) },
                        { "-4143", typeof(ExchangeError) },
                        { "-4144", typeof(ExchangeError) },
                        { "-4145", typeof(ExchangeError) },
                        { "-4146", typeof(ExchangeError) },
                        { "-4147", typeof(ExchangeError) },
                        { "-4148", typeof(ExchangeError) },
                        { "-4149", typeof(ExchangeError) },
                        { "-4150", typeof(ExchangeError) },
                        { "-20121", typeof(ExchangeError) },
                        { "-20124", typeof(ExchangeError) },
                        { "-20130", typeof(ExchangeError) },
                        { "-20132", typeof(ExchangeError) },
                        { "-20194", typeof(ExchangeError) },
                        { "-20195", typeof(ExchangeError) },
                        { "-20196", typeof(ExchangeError) },
                        { "-20198", typeof(ExchangeError) },
                        { "-20204", typeof(ExchangeError) },
                    } },
                } },
                { "portfolioMargin", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {
                        { "-1005", typeof(PermissionDenied) },
                        { "-1011", typeof(PermissionDenied) },
                        { "-1023", typeof(BadRequest) },
                        { "-1109", typeof(BadRequest) },
                        { "-1110", typeof(BadSymbol) },
                        { "-1113", typeof(BadRequest) },
                        { "-1128", typeof(BadRequest) },
                        { "-1136", typeof(BadRequest) },
                        { "-2016", typeof(OperationRejected) },
                        { "-2018", typeof(InsufficientFunds) },
                        { "-2019", typeof(InsufficientFunds) },
                        { "-2020", typeof(OrderNotFillable) },
                        { "-2021", typeof(OrderImmediatelyFillable) },
                        { "-2022", typeof(InvalidOrder) },
                        { "-2023", typeof(OperationFailed) },
                        { "-2024", typeof(OperationRejected) },
                        { "-2025", typeof(OperationRejected) },
                        { "-2026", typeof(InvalidOrder) },
                        { "-2027", typeof(OperationRejected) },
                        { "-2028", typeof(OperationRejected) },
                        { "-4063", typeof(BadRequest) },
                        { "-4064", typeof(BadRequest) },
                        { "-4065", typeof(BadRequest) },
                        { "-4066", typeof(BadRequest) },
                        { "-4069", typeof(BadRequest) },
                        { "-4070", typeof(BadRequest) },
                        { "-4071", typeof(BadRequest) },
                        { "-4072", typeof(OperationRejected) },
                        { "-4073", typeof(BadRequest) },
                        { "-4074", typeof(BadRequest) },
                        { "-4075", typeof(BadRequest) },
                        { "-4076", typeof(OperationRejected) },
                        { "-4077", typeof(OperationRejected) },
                        { "-4078", typeof(OperationFailed) },
                        { "-4079", typeof(BadRequest) },
                        { "-4080", typeof(PermissionDenied) },
                        { "-4081", typeof(BadRequest) },
                        { "-4085", typeof(BadRequest) },
                        { "-4086", typeof(BadRequest) },
                        { "-4087", typeof(PermissionDenied) },
                        { "-4088", typeof(PermissionDenied) },
                        { "-4114", typeof(BadRequest) },
                        { "-4115", typeof(BadRequest) },
                        { "-4118", typeof(OperationRejected) },
                        { "-4131", typeof(OperationRejected) },
                        { "-4140", typeof(BadRequest) },
                        { "-4141", typeof(BadRequest) },
                        { "-4144", typeof(BadSymbol) },
                        { "-4161", typeof(OperationRejected) },
                        { "-4164", typeof(OperationRejected) },
                        { "-4165", typeof(BadRequest) },
                        { "-4183", typeof(BadRequest) },
                        { "-4184", typeof(BadRequest) },
                        { "-5021", typeof(OrderNotFillable) },
                        { "-5022", typeof(OrderNotFillable) },
                        { "-20121", typeof(ExchangeError) },
                        { "-20124", typeof(ExchangeError) },
                        { "-20130", typeof(ExchangeError) },
                        { "-20132", typeof(ExchangeError) },
                        { "-20194", typeof(ExchangeError) },
                        { "-20195", typeof(ExchangeError) },
                        { "-20196", typeof(ExchangeError) },
                        { "-20198", typeof(ExchangeError) },
                        { "-20204", typeof(ExchangeError) },
                        { "-21001", typeof(BadRequest) },
                        { "-21002", typeof(BadRequest) },
                        { "-21003", typeof(BadResponse) },
                        { "-21004", typeof(OperationRejected) },
                        { "-21005", typeof(InsufficientFunds) },
                        { "-21006", typeof(OperationFailed) },
                        { "-21007", typeof(OperationFailed) },
                    } },
                } },
                { "exact", new Dictionary<string, object>() {
                    { "-1000", typeof(OperationFailed) },
                    { "-1001", typeof(OperationFailed) },
                    { "-1002", typeof(AuthenticationError) },
                    { "-1003", typeof(RateLimitExceeded) },
                    { "-1004", typeof(OperationRejected) },
                    { "-1006", typeof(OperationFailed) },
                    { "-1007", typeof(RequestTimeout) },
                    { "-1010", typeof(OperationFailed) },
                    { "-1013", typeof(BadRequest) },
                    { "-1014", typeof(InvalidOrder) },
                    { "-1015", typeof(RateLimitExceeded) },
                    { "-1016", typeof(BadRequest) },
                    { "-1020", typeof(BadRequest) },
                    { "-1021", typeof(InvalidNonce) },
                    { "-1022", typeof(AuthenticationError) },
                    { "-1100", typeof(BadRequest) },
                    { "-1101", typeof(BadRequest) },
                    { "-1102", typeof(BadRequest) },
                    { "-1103", typeof(BadRequest) },
                    { "-1104", typeof(BadRequest) },
                    { "-1105", typeof(BadRequest) },
                    { "-1106", typeof(BadRequest) },
                    { "-1108", typeof(BadSymbol) },
                    { "-1111", typeof(BadRequest) },
                    { "-1112", typeof(OperationFailed) },
                    { "-1114", typeof(BadRequest) },
                    { "-1115", typeof(BadRequest) },
                    { "-1116", typeof(BadRequest) },
                    { "-1117", typeof(BadRequest) },
                    { "-1118", typeof(BadRequest) },
                    { "-1119", typeof(BadRequest) },
                    { "-1120", typeof(BadRequest) },
                    { "-1121", typeof(BadSymbol) },
                    { "-1125", typeof(AuthenticationError) },
                    { "-1127", typeof(BadRequest) },
                    { "-1128", typeof(BadRequest) },
                    { "-1130", typeof(BadRequest) },
                    { "-2010", typeof(InvalidOrder) },
                    { "-2011", typeof(OrderNotFound) },
                    { "-2013", typeof(OrderNotFound) },
                    { "-2014", typeof(AuthenticationError) },
                    { "-2015", typeof(AuthenticationError) },
                    { "-4000", typeof(InvalidOrder) },
                    { "-4001", typeof(BadRequest) },
                    { "-4002", typeof(BadRequest) },
                    { "-4003", typeof(BadRequest) },
                    { "-4004", typeof(BadRequest) },
                    { "-4005", typeof(BadRequest) },
                    { "-4006", typeof(BadRequest) },
                    { "-4007", typeof(BadRequest) },
                    { "-4008", typeof(BadRequest) },
                    { "-4009", typeof(BadRequest) },
                    { "-4010", typeof(BadRequest) },
                    { "-4011", typeof(BadRequest) },
                    { "-4012", typeof(BadRequest) },
                    { "-4013", typeof(BadRequest) },
                    { "-4014", typeof(BadRequest) },
                    { "-4015", typeof(BadRequest) },
                    { "-4016", typeof(BadRequest) },
                    { "-4017", typeof(BadRequest) },
                    { "-4018", typeof(BadRequest) },
                    { "-4019", typeof(OperationRejected) },
                    { "-4020", typeof(BadRequest) },
                    { "-4021", typeof(BadRequest) },
                    { "-4022", typeof(BadRequest) },
                    { "-4023", typeof(BadRequest) },
                    { "-4024", typeof(BadRequest) },
                    { "-4025", typeof(BadRequest) },
                    { "-4026", typeof(BadRequest) },
                    { "-4027", typeof(BadRequest) },
                    { "-4028", typeof(BadRequest) },
                    { "-4029", typeof(BadRequest) },
                    { "-4030", typeof(BadRequest) },
                    { "-4031", typeof(BadRequest) },
                    { "-4032", typeof(OperationRejected) },
                    { "-4033", typeof(BadRequest) },
                    { "-4044", typeof(BadRequest) },
                    { "-4045", typeof(OperationRejected) },
                    { "-4046", typeof(OperationRejected) },
                    { "-4047", typeof(OperationRejected) },
                    { "-4048", typeof(OperationRejected) },
                    { "-4049", typeof(BadRequest) },
                    { "-4050", typeof(InsufficientFunds) },
                    { "-4051", typeof(InsufficientFunds) },
                    { "-4052", typeof(OperationRejected) },
                    { "-4053", typeof(BadRequest) },
                    { "-4054", typeof(OperationRejected) },
                    { "-4055", typeof(BadRequest) },
                    { "-4056", typeof(AuthenticationError) },
                    { "-4057", typeof(AuthenticationError) },
                    { "-4058", typeof(BadRequest) },
                    { "-4059", typeof(OperationRejected) },
                    { "-4060", typeof(BadRequest) },
                    { "-4061", typeof(OperationRejected) },
                    { "-4062", typeof(BadRequest) },
                    { "-4067", typeof(OperationRejected) },
                    { "-4068", typeof(OperationRejected) },
                    { "-4082", typeof(BadRequest) },
                    { "-4083", typeof(OperationRejected) },
                    { "-4084", typeof(BadRequest) },
                    { "-4086", typeof(BadRequest) },
                    { "-4104", typeof(BadRequest) },
                    { "-4135", typeof(BadRequest) },
                    { "-4137", typeof(BadRequest) },
                    { "-4138", typeof(BadRequest) },
                    { "-4139", typeof(BadRequest) },
                    { "-4142", typeof(OrderImmediatelyFillable) },
                    { "-20121", typeof(BadSymbol) },
                    { "-20124", typeof(BadRequest) },
                    { "-20130", typeof(BadRequest) },
                    { "-20132", typeof(BadRequest) },
                    { "-20194", typeof(BadRequest) },
                    { "-20195", typeof(BadRequest) },
                    { "-20196", typeof(BadRequest) },
                    { "-20198", typeof(OperationRejected) },
                    { "-20204", typeof(BadRequest) },
                    { "System is under maintenance.", typeof(OnMaintenance) },
                    { "System abnormality", typeof(OperationFailed) },
                    { "You are not authorized to execute this request.", typeof(PermissionDenied) },
                    { "API key does not exist", typeof(AuthenticationError) },
                    { "Order would trigger immediately.", typeof(OrderImmediatelyFillable) },
                    { "Stop price would trigger immediately.", typeof(OrderImmediatelyFillable) },
                    { "Order would immediately match and take.", typeof(OrderImmediatelyFillable) },
                    { "Account has insufficient balance for requested action.", typeof(InsufficientFunds) },
                    { "Rest API trading is not enabled.", typeof(PermissionDenied) },
                    { "This account may not place or cancel orders.", typeof(PermissionDenied) },
                    { "You don't have permission.", typeof(PermissionDenied) },
                    { "Market is closed.", typeof(MarketClosed) },
                    { "Too many requests. Please try again later.", typeof(RateLimitExceeded) },
                    { "This action is disabled on this account.", typeof(AccountSuspended) },
                    { "Limit orders require GTC for this phase.", typeof(BadRequest) },
                    { "This order type is not possible in this trading phase.", typeof(BadRequest) },
                    { "This type of sub-account exceeds the maximum number limit", typeof(OperationRejected) },
                    { "This symbol is restricted for this account.", typeof(PermissionDenied) },
                    { "This symbol is not permitted for this account.", typeof(PermissionDenied) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "has no operation privilege", typeof(PermissionDenied) },
                    { "MAX_POSITION", typeof(BadRequest) },
                } },
            } },
        });
    }

    public virtual object isInverse(object type, object subType = null)
    {
        if (isTrue(isEqual(subType, null)))
        {
            return (isEqual(type, "delivery"));
        } else
        {
            return isEqual(subType, "inverse");
        }
    }

    public virtual object isLinear(object type, object subType = null)
    {
        if (isTrue(isEqual(subType, null)))
        {
            return isTrue((isEqual(type, "future"))) || isTrue((isEqual(type, "swap")));
        } else
        {
            return isEqual(subType, "linear");
        }
    }

    public override void setSandboxMode(object enable)
    {
        base.setSandboxMode(enable);
        ((IDictionary<string,object>)this.options)["sandboxMode"] = enable;
    }

    public override object createExpiredOptionMarket(object symbol)
    {
        // support expired option contracts
        object settle = "USDT";
        object optionParts = ((string)symbol).Split(new [] {((string)"-")}, StringSplitOptions.None).ToList<object>();
        object symbolBase = ((string)symbol).Split(new [] {((string)"/")}, StringSplitOptions.None).ToList<object>();
        object bs = null;
        if (isTrue(isGreaterThan(getIndexOf(symbol, "/"), -1)))
        {
            bs = this.safeString(symbolBase, 0);
        } else
        {
            bs = this.safeString(optionParts, 0);
        }
        object expiry = this.safeString(optionParts, 1);
        object strike = this.safeInteger(optionParts, 2);
        object strikeAsString = this.safeString(optionParts, 2);
        object optionType = this.safeString(optionParts, 3);
        object datetime = this.convertExpireDate(expiry);
        object timestamp = this.parse8601(datetime);
        return new Dictionary<string, object>() {
            { "id", add(add(add(add(add(add(bs, "-"), expiry), "-"), strikeAsString), "-"), optionType) },
            { "symbol", add(add(add(add(add(add(add(add(add(add(bs, "/"), settle), ":"), settle), "-"), expiry), "-"), strikeAsString), "-"), optionType) },
            { "base", bs },
            { "quote", settle },
            { "baseId", bs },
            { "quoteId", settle },
            { "active", null },
            { "type", "option" },
            { "linear", null },
            { "inverse", null },
            { "spot", false },
            { "swap", false },
            { "future", false },
            { "option", true },
            { "margin", false },
            { "contract", true },
            { "contractSize", null },
            { "expiry", timestamp },
            { "expiryDatetime", datetime },
            { "optionType", ((bool) isTrue((isEqual(optionType, "C")))) ? "call" : "put" },
            { "strike", strike },
            { "settle", settle },
            { "settleId", settle },
            { "precision", new Dictionary<string, object>() {
                { "amount", null },
                { "price", null },
            } },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "info", null },
        };
    }

    public override object market(object symbol)
    {
        if (isTrue(isEqual(this.markets, null)))
        {
            throw new ExchangeError ((string)add(this.id, " markets not loaded")) ;
        }
        // defaultType has legacy support on binance
        object defaultType = this.safeString(this.options, "defaultType");
        object defaultSubType = this.safeString(this.options, "defaultSubType");
        object isLegacyLinear = isEqual(defaultType, "future");
        object isLegacyInverse = isEqual(defaultType, "delivery");
        object isLegacy = isTrue(isLegacyLinear) || isTrue(isLegacyInverse);
        if (isTrue((symbol is string)))
        {
            if (isTrue(inOp(this.markets, symbol)))
            {
                object market = getValue(this.markets, symbol);
                // begin diff
                if (isTrue(isTrue(isLegacy) && isTrue(getValue(market, "spot"))))
                {
                    object settle = ((bool) isTrue(isLegacyLinear)) ? getValue(market, "quote") : getValue(market, "base");
                    object futuresSymbol = add(add(symbol, ":"), settle);
                    if (isTrue(inOp(this.markets, futuresSymbol)))
                    {
                        return getValue(this.markets, futuresSymbol);
                    }
                } else
                {
                    return market;
                }
            } else if (isTrue(inOp(this.markets_by_id, symbol)))
            {
                object markets = getValue(this.markets_by_id, symbol);
                // begin diff
                if (isTrue(isLegacyLinear))
                {
                    defaultType = "linear";
                } else if (isTrue(isLegacyInverse))
                {
                    defaultType = "inverse";
                } else if (isTrue(isEqual(defaultType, null)))
                {
                    defaultType = defaultSubType;
                }
                // end diff
                for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
                {
                    object market = getValue(markets, i);
                    if (isTrue(getValue(market, defaultType)))
                    {
                        return market;
                    }
                }
                return getValue(markets, 0);
            } else if (isTrue(isTrue((isGreaterThan(getIndexOf(symbol, "/"), -1))) && isTrue((isLessThan(getIndexOf(symbol, ":"), 0)))))
            {
                // support legacy symbols
                var bsquoteVariable = ((string)symbol).Split(new [] {((string)"/")}, StringSplitOptions.None).ToList<object>();
                var bs = ((IList<object>) bsquoteVariable)[0];
                var quote = ((IList<object>) bsquoteVariable)[1];
                object settle = ((bool) isTrue((isEqual(quote, "USD")))) ? bs : quote;
                object futuresSymbol = add(add(symbol, ":"), settle);
                if (isTrue(inOp(this.markets, futuresSymbol)))
                {
                    return getValue(this.markets, futuresSymbol);
                }
            } else if (isTrue(isTrue((isGreaterThan(getIndexOf(symbol, "-C"), -1))) || isTrue((isGreaterThan(getIndexOf(symbol, "-P"), -1)))))
            {
                return this.createExpiredOptionMarket(symbol);
            }
        }
        throw new BadSymbol ((string)add(add(this.id, " does not have market symbol "), symbol)) ;
    }

    public override object safeMarket(object marketId = null, object market = null, object delimiter = null, object marketType = null)
    {
        object isOption = isTrue((!isEqual(marketId, null))) && isTrue((isTrue((isGreaterThan(getIndexOf(marketId, "-C"), -1))) || isTrue((isGreaterThan(getIndexOf(marketId, "-P"), -1)))));
        if (isTrue(isTrue(isOption) && !isTrue((inOp(this.markets_by_id, marketId)))))
        {
            // handle expired option contracts
            return this.createExpiredOptionMarket(marketId);
        }
        return base.safeMarket(marketId, market, delimiter, marketType);
    }

    public override object costToPrecision(object symbol, object cost)
    {
        return this.decimalToPrecision(cost, TRUNCATE, getValue(getValue(getValue(this.markets, symbol), "precision"), "quote"), this.precisionMode, this.paddingMode);
    }

    public override object currencyToPrecision(object code, object fee, object networkCode = null)
    {
        // info is available in currencies only if the user has configured his api keys
        if (isTrue(!isEqual(this.safeValue(getValue(this.currencies, code), "precision"), null)))
        {
            return this.decimalToPrecision(fee, TRUNCATE, getValue(getValue(this.currencies, code), "precision"), this.precisionMode, this.paddingMode);
        } else
        {
            return this.numberToString(fee);
        }
    }

    public override object nonce()
    {
        return subtract(this.milliseconds(), getValue(this.options, "timeDifference"));
    }

    /**
     * @method
     * @name binance#fetchTime
     * @description fetches the current integer timestamp in milliseconds from the exchange server
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#check-server-time                            // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Check-Server-Time    // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Check-Server-time             // future
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {int} the current integer timestamp in milliseconds from the exchange server
     */
    public async override Task<object> fetchTime(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object defaultType = this.safeString2(this.options, "fetchTime", "defaultType", "spot");
        object type = this.safeString(parameters, "type", defaultType);
        object query = this.omit(parameters, "type");
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchTime", null, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetTime(query);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetTime(query);
        } else
        {
            response = await this.publicGetTime(query);
        }
        return this.safeInteger(response, "serverTime");
    }

    /**
     * @method
     * @name binance#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @see https://developers.binance.com/docs/wallet/capital/all-coins-info
     * @see https://developers.binance.com/docs/margin_trading/market-data/Get-All-Margin-Assets
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an associative dictionary of currencies
     */
    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object fetchCurrenciesEnabled = this.safeBool(this.options, "fetchCurrencies");
        if (!isTrue(fetchCurrenciesEnabled))
        {
            return null;
        }
        // this endpoint requires authentication
        // while fetchCurrencies is a public API method by design
        // therefore we check the keys here
        // and fallback to generating the currencies from the markets
        if (!isTrue(this.checkRequiredCredentials(false)))
        {
            return null;
        }
        // sandbox/testnet does not support sapi endpoints
        object apiBackup = this.safeValue(this.urls, "apiBackup");
        if (isTrue(!isEqual(apiBackup, null)))
        {
            return null;
        }
        object promises = new List<object> {this.sapiGetCapitalConfigGetall(parameters)};
        object fetchMargins = this.safeBool(this.options, "fetchMargins", false);
        if (isTrue(fetchMargins))
        {
            ((IList<object>)promises).Add(this.sapiGetMarginAllPairs(parameters));
        }
        object results = await promiseAll(promises);
        object responseCurrencies = getValue(results, 0);
        object marginablesById = null;
        if (isTrue(fetchMargins))
        {
            object responseMarginables = getValue(results, 1);
            marginablesById = this.indexBy(responseMarginables, "assetName");
        }
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(responseCurrencies)); postFixIncrement(ref i))
        {
            //
            //    {
            //        "coin": "LINK",
            //        "depositAllEnable": true,
            //        "withdrawAllEnable": true,
            //        "name": "ChainLink",
            //        "free": "0",
            //        "locked": "0",
            //        "freeze": "0",
            //        "withdrawing": "0",
            //        "ipoing": "0",
            //        "ipoable": "0",
            //        "storage": "0",
            //        "isLegalMoney": false,
            //        "trading": true,
            //        "networkList": [
            //            {
            //                "network": "BSC",
            //                "coin": "LINK",
            //                "withdrawIntegerMultiple": "0.00000001",
            //                "isDefault": false,
            //                "depositEnable": true,
            //                "withdrawEnable": true,
            //                "depositDesc": "",
            //                "withdrawDesc": "",
            //                "specialTips": "",
            //                "specialWithdrawTips": "The network you have selected is BSC. Please ensure that the withdrawal address supports the Binance Smart Chain network. You will lose your assets if the chosen platform does not support retrievals.",
            //                "name": "BNB Smart Chain (BEP20)",
            //                "resetAddressStatus": false,
            //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
            //                "addressRule": "",
            //                "memoRegex": "",
            //                "withdrawFee": "0.012",
            //                "withdrawMin": "0.024",
            //                "withdrawMax": "9999999999.99999999",
            //                "minConfirm": "15",
            //                "unLockConfirm": "0",
            //                "sameAddress": false,
            //                "estimatedArrivalTime": "5",
            //                "busy": false,
            //                "country": "AE,BINANCE_BAHRAIN_BSC"
            //            },
            //            {
            //                "network": "BNB",
            //                "coin": "LINK",
            //                "withdrawIntegerMultiple": "0.00000001",
            //                "isDefault": false,
            //                "depositEnable": true,
            //                "withdrawEnable": true,
            //                "depositDesc": "",
            //                "withdrawDesc": "",
            //                "specialTips": "Both a MEMO and an Address are required to successfully deposit your LINK BEP2 tokens to Binance.",
            //                "specialWithdrawTips": "",
            //                "name": "BNB Beacon Chain (BEP2)",
            //                "resetAddressStatus": false,
            //                "addressRegex": "^(bnb1)[0-9a-z]{38}$",
            //                "addressRule": "",
            //                "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
            //                "withdrawFee": "0.002",
            //                "withdrawMin": "0.01",
            //                "withdrawMax": "10000000000",
            //                "minConfirm": "1",
            //                "unLockConfirm": "0",
            //                "sameAddress": true,
            //                "estimatedArrivalTime": "5",
            //                "busy": false,
            //                "country": "AE,BINANCE_BAHRAIN_BSC"
            //            },
            //            {
            //                "network": "ETH",
            //                "coin": "LINK",
            //                "withdrawIntegerMultiple": "0.00000001",
            //                "isDefault": true,
            //                "depositEnable": true,
            //                "withdrawEnable": true,
            //                "depositDesc": "",
            //                "withdrawDesc": "",
            //                "name": "Ethereum (ERC20)",
            //                "resetAddressStatus": false,
            //                "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
            //                "addressRule": "",
            //                "memoRegex": "",
            //                "withdrawFee": "0.55",
            //                "withdrawMin": "1.1",
            //                "withdrawMax": "10000000000",
            //                "minConfirm": "12",
            //                "unLockConfirm": "0",
            //                "sameAddress": false,
            //                "estimatedArrivalTime": "5",
            //                "busy": false,
            //                "country": "AE,BINANCE_BAHRAIN_BSC"
            //            }
            //        ]
            //    }
            //
            object entry = getValue(responseCurrencies, i);
            object id = this.safeString(entry, "coin");
            object name = this.safeString(entry, "name");
            object code = this.safeCurrencyCode(id);
            object minPrecision = null;
            object isWithdrawEnabled = true;
            object isDepositEnabled = true;
            object networkList = this.safeList(entry, "networkList", new List<object>() {});
            object fees = new Dictionary<string, object>() {};
            object fee = null;
            object networks = new Dictionary<string, object>() {};
            for (object j = 0; isLessThan(j, getArrayLength(networkList)); postFixIncrement(ref j))
            {
                object networkItem = getValue(networkList, j);
                object network = this.safeString(networkItem, "network");
                object networkCode = this.networkIdToCode(network);
                // const name = this.safeString (networkItem, 'name');
                object withdrawFee = this.safeNumber(networkItem, "withdrawFee");
                object depositEnable = this.safeBool(networkItem, "depositEnable");
                object withdrawEnable = this.safeBool(networkItem, "withdrawEnable");
                isDepositEnabled = isTrue(isDepositEnabled) || isTrue(depositEnable);
                isWithdrawEnabled = isTrue(isWithdrawEnabled) || isTrue(withdrawEnable);
                ((IDictionary<string,object>)fees)[(string)network] = withdrawFee;
                object isDefault = this.safeBool(networkItem, "isDefault");
                if (isTrue(isTrue(isDefault) || isTrue((isEqual(fee, null)))))
                {
                    fee = withdrawFee;
                }
                object precisionTick = this.safeString(networkItem, "withdrawIntegerMultiple");
                // avoid zero values, which are mostly from fiat or leveraged tokens : https://github.com/ccxt/ccxt/pull/14902#issuecomment-1271636731
                // so, when there is zero instead of i.e. 0.001, then we skip those cases, because we don't know the precision - it might be because of network is suspended or other reasons
                if (!isTrue(Precise.stringEq(precisionTick, "0")))
                {
                    minPrecision = ((bool) isTrue((isEqual(minPrecision, null)))) ? precisionTick : Precise.stringMin(minPrecision, precisionTick);
                }
                ((IDictionary<string,object>)networks)[(string)networkCode] = new Dictionary<string, object>() {
                    { "info", networkItem },
                    { "id", network },
                    { "network", networkCode },
                    { "active", isTrue(depositEnable) && isTrue(withdrawEnable) },
                    { "deposit", depositEnable },
                    { "withdraw", withdrawEnable },
                    { "fee", withdrawFee },
                    { "precision", this.parseNumber(precisionTick) },
                    { "limits", new Dictionary<string, object>() {
                        { "withdraw", new Dictionary<string, object>() {
                            { "min", this.safeNumber(networkItem, "withdrawMin") },
                            { "max", this.safeNumber(networkItem, "withdrawMax") },
                        } },
                        { "deposit", new Dictionary<string, object>() {
                            { "min", this.safeNumber(networkItem, "depositDust") },
                            { "max", null },
                        } },
                    } },
                };
            }
            object trading = this.safeBool(entry, "trading");
            object active = (isTrue(isTrue(isWithdrawEnabled) && isTrue(isDepositEnabled)) && isTrue(trading));
            object marginEntry = this.safeDict(marginablesById, id, new Dictionary<string, object>() {});
            //
            //     {
            //         assetName: "BTC",
            //         assetFullName: "Bitcoin",
            //         isBorrowable: true,
            //         isMortgageable: true,
            //         userMinBorrow: "0",
            //         userMinRepay: "0",
            //     }
            //
            ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "name", name },
                { "code", code },
                { "precision", this.parseNumber(minPrecision) },
                { "info", entry },
                { "active", active },
                { "deposit", isDepositEnabled },
                { "withdraw", isWithdrawEnabled },
                { "networks", networks },
                { "fee", fee },
                { "fees", fees },
                { "limits", this.limits },
                { "margin", this.safeBool(marginEntry, "isBorrowable") },
            };
        }
        return result;
    }

    /**
     * @method
     * @name binance#fetchMarkets
     * @description retrieves data on all markets for binance
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#exchange-information                             // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Exchange-Information     // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Exchange-Information              // future
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Exchange-Information                             // option
     * @see https://developers.binance.com/docs/margin_trading/market-data/Get-All-Cross-Margin-Pairs                             // cross margin
     * @see https://developers.binance.com/docs/margin_trading/market-data/Get-All-Isolated-Margin-Symbol                             // isolated margin
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} an array of objects representing market data
     */
    public async override Task<object> fetchMarkets(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object promisesRaw = new List<object>() {};
        object rawFetchMarkets = this.safeList(this.options, "fetchMarkets", new List<object>() {"spot", "linear", "inverse"});
        object sandboxMode = this.safeBool(this.options, "sandboxMode", false);
        object fetchMarkets = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(rawFetchMarkets)); postFixIncrement(ref i))
        {
            object type = getValue(rawFetchMarkets, i);
            if (isTrue(isTrue(isEqual(type, "option")) && isTrue(sandboxMode)))
            {
                continue;
            }
            ((IList<object>)fetchMarkets).Add(type);
        }
        object fetchMargins = this.safeBool(this.options, "fetchMargins", false);
        for (object i = 0; isLessThan(i, getArrayLength(fetchMarkets)); postFixIncrement(ref i))
        {
            object marketType = getValue(fetchMarkets, i);
            if (isTrue(isEqual(marketType, "spot")))
            {
                ((IList<object>)promisesRaw).Add(this.publicGetExchangeInfo(parameters));
                if (isTrue(isTrue(isTrue(fetchMargins) && isTrue(this.checkRequiredCredentials(false))) && !isTrue(sandboxMode)))
                {
                    ((IList<object>)promisesRaw).Add(this.sapiGetMarginAllPairs(parameters));
                    ((IList<object>)promisesRaw).Add(this.sapiGetMarginIsolatedAllPairs(parameters));
                }
            } else if (isTrue(isEqual(marketType, "linear")))
            {
                ((IList<object>)promisesRaw).Add(this.fapiPublicGetExchangeInfo(parameters));
            } else if (isTrue(isEqual(marketType, "inverse")))
            {
                ((IList<object>)promisesRaw).Add(this.dapiPublicGetExchangeInfo(parameters));
            } else if (isTrue(isEqual(marketType, "option")))
            {
                ((IList<object>)promisesRaw).Add(this.eapiPublicGetExchangeInfo(parameters));
            } else
            {
                throw new ExchangeError ((string)add(add(add(this.id, " fetchMarkets() this.options fetchMarkets \""), marketType), "\" is not a supported market type")) ;
            }
        }
        object results = await promiseAll(promisesRaw);
        object markets = new List<object>() {};
        ((IDictionary<string,object>)this.options)["crossMarginPairsData"] = new List<object>() {};
        ((IDictionary<string,object>)this.options)["isolatedMarginPairsData"] = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(results)); postFixIncrement(ref i))
        {
            object res = this.safeValue(results, i);
            if (isTrue(isTrue(fetchMargins) && isTrue(((res is IList<object>) || (res.GetType().IsGenericType && res.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))))
            {
                object keysList = new List<object>(((IDictionary<string,object>)this.indexBy(res, "symbol")).Keys);
                object length = getArrayLength(getValue(this.options, "crossMarginPairsData"));
                // first one is the cross-margin promise
                if (isTrue(isEqual(length, 0)))
                {
                    ((IDictionary<string,object>)this.options)["crossMarginPairsData"] = keysList;
                } else
                {
                    ((IDictionary<string,object>)this.options)["isolatedMarginPairsData"] = keysList;
                }
            } else
            {
                object resultMarkets = this.safeList2(res, "symbols", "optionSymbols", new List<object>() {});
                markets = this.arrayConcat(markets, resultMarkets);
            }
        }
        //
        // spot / margin
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1575416692969,
        //         "rateLimits":[
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
        //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":100},
        //             {"rateLimitType":"ORDERS","interval":"DAY","intervalNum":1,"limit":200000}
        //         ],
        //         "exchangeFilters":[],
        //         "symbols":[
        //             {
        //                 "symbol":"ETHBTC",
        //                 "status":"TRADING",
        //                 "baseAsset":"ETH",
        //                 "baseAssetPrecision":8,
        //                 "quoteAsset":"BTC",
        //                 "quotePrecision":8,
        //                 "baseCommissionPrecision":8,
        //                 "quoteCommissionPrecision":8,
        //                 "orderTypes":["LIMIT","LIMIT_MAKER","MARKET","STOP_LOSS_LIMIT","TAKE_PROFIT_LIMIT"],
        //                 "icebergAllowed":true,
        //                 "ocoAllowed":true,
        //                 "quoteOrderQtyMarketAllowed":true,
        //                 "allowTrailingStop":false,
        //                 "isSpotTradingAllowed":true,
        //                 "isMarginTradingAllowed":true,
        //                 "filters":[
        //                     {"filterType":"PRICE_FILTER","minPrice":"0.00000100","maxPrice":"100000.00000000","tickSize":"0.00000100"},
        //                     {"filterType":"PERCENT_PRICE","multiplierUp":"5","multiplierDown":"0.2","avgPriceMins":5},
        //                     {"filterType":"LOT_SIZE","minQty":"0.00100000","maxQty":"100000.00000000","stepSize":"0.00100000"},
        //                     {"filterType":"MIN_NOTIONAL","minNotional":"0.00010000","applyToMarket":true,"avgPriceMins":5},
        //                     {"filterType":"ICEBERG_PARTS","limit":10},
        //                     {"filterType":"MARKET_LOT_SIZE","minQty":"0.00000000","maxQty":"63100.00000000","stepSize":"0.00000000"},
        //                     {"filterType":"MAX_NUM_ORDERS","maxNumOrders":200},
        //                     {"filterType":"MAX_NUM_ALGO_ORDERS","maxNumAlgoOrders":5}
        //                 ],
        //                 "permissions":["SPOT","MARGIN"]}
        //             },
        //         ],
        //     }
        //
        // cross & isolated pairs response:
        //
        //     [
        //         {
        //           symbol: "BTCUSDT",
        //           base: "BTC",
        //           quote: "USDT",
        //           isMarginTrade: true,
        //           isBuyAllowed: true,
        //           isSellAllowed: true,
        //           id: "376870555451677893", // doesn't exist in isolated
        //         },
        //     ]
        //
        // futures/usdt-margined (fapi)
        //
        //     {
        //         "timezone":"UTC",
        //         "serverTime":1575417244353,
        //         "rateLimits":[
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":1200},
        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":1200}
        //         ],
        //         "exchangeFilters":[],
        //         "symbols":[
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "status":"TRADING",
        //                 "maintMarginPercent":"2.5000",
        //                 "requiredMarginPercent":"5.0000",
        //                 "baseAsset":"BTC",
        //                 "quoteAsset":"USDT",
        //                 "pricePrecision":2,
        //                 "quantityPrecision":3,
        //                 "baseAssetPrecision":8,
        //                 "quotePrecision":8,
        //                 "filters":[
        //                     {"minPrice":"0.01","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.01"},
        //                     {"stepSize":"0.001","filterType":"LOT_SIZE","maxQty":"1000","minQty":"0.001"},
        //                     {"stepSize":"0.001","filterType":"MARKET_LOT_SIZE","maxQty":"1000","minQty":"0.001"},
        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
        //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
        //                 ],
        //                 "orderTypes":["LIMIT","MARKET","STOP"],
        //                 "timeInForce":["GTC","IOC","FOK","GTX"]
        //             }
        //         ]
        //     }
        //
        // delivery/coin-margined (dapi)
        //
        //     {
        //         "timezone": "UTC",
        //         "serverTime": 1597667052958,
        //         "rateLimits": [
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":6000},
        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":6000}
        //         ],
        //         "exchangeFilters": [],
        //         "symbols": [
        //             {
        //                 "symbol": "BTCUSD_200925",
        //                 "pair": "BTCUSD",
        //                 "contractType": "CURRENT_QUARTER",
        //                 "deliveryDate": 1601020800000,
        //                 "onboardDate": 1590739200000,
        //                 "contractStatus": "TRADING",
        //                 "contractSize": 100,
        //                 "marginAsset": "BTC",
        //                 "maintMarginPercent": "2.5000",
        //                 "requiredMarginPercent": "5.0000",
        //                 "baseAsset": "BTC",
        //                 "quoteAsset": "USD",
        //                 "pricePrecision": 1,
        //                 "quantityPrecision": 0,
        //                 "baseAssetPrecision": 8,
        //                 "quotePrecision": 8,
        //                 "equalQtyPrecision": 4,
        //                 "filters": [
        //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
        //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"stepSize":"0","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
        //                     {"multiplierDown":"0.9500","multiplierUp":"1.0500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
        //                 ],
        //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
        //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
        //             },
        //             {
        //                 "symbol": "BTCUSD_PERP",
        //                 "pair": "BTCUSD",
        //                 "contractType": "PERPETUAL",
        //                 "deliveryDate": 4133404800000,
        //                 "onboardDate": 1596006000000,
        //                 "contractStatus": "TRADING",
        //                 "contractSize": 100,
        //                 "marginAsset": "BTC",
        //                 "maintMarginPercent": "2.5000",
        //                 "requiredMarginPercent": "5.0000",
        //                 "baseAsset": "BTC",
        //                 "quoteAsset": "USD",
        //                 "pricePrecision": 1,
        //                 "quantityPrecision": 0,
        //                 "baseAssetPrecision": 8,
        //                 "quotePrecision": 8,
        //                 "equalQtyPrecision": 4,
        //                 "filters": [
        //                     {"minPrice":"0.1","maxPrice":"100000","filterType":"PRICE_FILTER","tickSize":"0.1"},
        //                     {"stepSize":"1","filterType":"LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"stepSize":"1","filterType":"MARKET_LOT_SIZE","maxQty":"100000","minQty":"1"},
        //                     {"limit":200,"filterType":"MAX_NUM_ORDERS"},
        //                     {"multiplierDown":"0.8500","multiplierUp":"1.1500","multiplierDecimal":"4","filterType":"PERCENT_PRICE"}
        //                 ],
        //                 "orderTypes": ["LIMIT","MARKET","STOP","STOP_MARKET","TAKE_PROFIT","TAKE_PROFIT_MARKET","TRAILING_STOP_MARKET"],
        //                 "timeInForce": ["GTC","IOC","FOK","GTX"]
        //             }
        //         ]
        //     }
        //
        // options (eapi)
        //
        //     {
        //         "timezone": "UTC",
        //         "serverTime": 1675912490405,
        //         "optionContracts": [
        //             {
        //                 "id": 1,
        //                 "baseAsset": "SOL",
        //                 "quoteAsset": "USDT",
        //                 "underlying": "SOLUSDT",
        //                 "settleAsset": "USDT"
        //             },
        //             ...
        //         ],
        //         "optionAssets": [
        //             {"id":1,"name":"USDT"}
        //         ],
        //         "optionSymbols": [
        //             {
        //                 "contractId": 3,
        //                 "expiryDate": 1677225600000,
        //                 "filters": [
        //                     {"filterType":"PRICE_FILTER","minPrice":"724.6","maxPrice":"919.2","tickSize":"0.1"},
        //                     {"filterType":"LOT_SIZE","minQty":"0.01","maxQty":"1000","stepSize":"0.01"}
        //                 ],
        //                 "id": 2474,
        //                 "symbol": "ETH-230224-800-C",
        //                 "side": "CALL",
        //                 "strikePrice": "800.00000000",
        //                 "underlying": "ETHUSDT",
        //                 "unit": 1,
        //                 "makerFeeRate": "0.00020000",
        //                 "takerFeeRate": "0.00020000",
        //                 "minQty": "0.01",
        //                 "maxQty": "1000",
        //                 "initialMargin": "0.15000000",
        //                 "maintenanceMargin": "0.07500000",
        //                 "minInitialMargin": "0.10000000",
        //                 "minMaintenanceMargin": "0.05000000",
        //                 "priceScale": 1,
        //                 "quantityScale": 2,
        //                 "quoteAsset": "USDT"
        //             },
        //             ...
        //         ],
        //         "rateLimits": [
        //             {"rateLimitType":"REQUEST_WEIGHT","interval":"MINUTE","intervalNum":1,"limit":400},
        //             {"rateLimitType":"ORDERS","interval":"MINUTE","intervalNum":1,"limit":100},
        //             {"rateLimitType":"ORDERS","interval":"SECOND","intervalNum":10,"limit":30}
        //         ]
        //     }
        //
        if (isTrue(getValue(this.options, "adjustForTimeDifference")))
        {
            await this.loadTimeDifference();
        }
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            ((IList<object>)result).Add(this.parseMarket(getValue(markets, i)));
        }
        return result;
    }

    public override object parseMarket(object market)
    {
        object swap = false;
        object future = false;
        object option = false;
        object underlying = this.safeString(market, "underlying");
        object id = this.safeString(market, "symbol");
        object optionParts = ((string)id).Split(new [] {((string)"-")}, StringSplitOptions.None).ToList<object>();
        object optionBase = this.safeString(optionParts, 0);
        object lowercaseId = this.safeStringLower(market, "symbol");
        object baseId = this.safeString(market, "baseAsset", optionBase);
        object quoteId = this.safeString(market, "quoteAsset");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object contractType = this.safeString(market, "contractType");
        object contract = (inOp(market, "contractType"));
        object expiry = this.safeInteger2(market, "deliveryDate", "expiryDate");
        object settleId = this.safeString(market, "marginAsset");
        if (isTrue(isTrue((isEqual(contractType, "PERPETUAL"))) || isTrue((isEqual(expiry, 4133404800000)))))
        {
            expiry = null;
            swap = true;
        } else if (isTrue(!isEqual(underlying, null)))
        {
            contract = true;
            option = true;
            settleId = ((bool) isTrue((isEqual(settleId, null)))) ? "USDT" : settleId;
        } else if (isTrue(!isEqual(expiry, null)))
        {
            future = true;
        }
        object settle = this.safeCurrencyCode(settleId);
        object spot = !isTrue(contract);
        object filters = this.safeList(market, "filters", new List<object>() {});
        object filtersByType = this.indexBy(filters, "filterType");
        object status = this.safeString2(market, "status", "contractStatus");
        object contractSize = null;
        object fees = this.fees;
        object linear = null;
        object inverse = null;
        object symbol = add(add(bs, "/"), quote);
        object strike = null;
        if (isTrue(contract))
        {
            if (isTrue(swap))
            {
                symbol = add(add(symbol, ":"), settle);
            } else if (isTrue(future))
            {
                symbol = add(add(add(add(symbol, ":"), settle), "-"), this.yymmdd(expiry));
            } else if (isTrue(option))
            {
                strike = this.numberToString(this.parseToNumeric(this.safeString(market, "strikePrice")));
                symbol = add(add(add(add(add(add(add(add(symbol, ":"), settle), "-"), this.yymmdd(expiry)), "-"), strike), "-"), this.safeString(optionParts, 3));
            }
            contractSize = this.safeNumber2(market, "contractSize", "unit", this.parseNumber("1"));
            linear = isEqual(settle, quote);
            inverse = isEqual(settle, bs);
            object feesType = ((bool) isTrue(linear)) ? "linear" : "inverse";
            fees = ((object)this.safeDict(this.fees, feesType, new Dictionary<string, object>() {}));
        }
        object active = (isEqual(status, "TRADING"));
        if (isTrue(spot))
        {
            object permissions = this.safeList(market, "permissions", new List<object>() {});
            for (object j = 0; isLessThan(j, getArrayLength(permissions)); postFixIncrement(ref j))
            {
                if (isTrue(isEqual(getValue(permissions, j), "TRD_GRP_003")))
                {
                    active = false;
                    break;
                }
            }
        }
        object isMarginTradingAllowed = this.safeBool(market, "isMarginTradingAllowed", false);
        object marginModes = null;
        if (isTrue(spot))
        {
            object hasCrossMargin = this.inArray(id, getValue(this.options, "crossMarginPairsData"));
            object hasIsolatedMargin = this.inArray(id, getValue(this.options, "isolatedMarginPairsData"));
            marginModes = new Dictionary<string, object>() {
                { "cross", hasCrossMargin },
                { "isolated", hasIsolatedMargin },
            };
        } else if (isTrue(isTrue(linear) || isTrue(inverse)))
        {
            marginModes = new Dictionary<string, object>() {
                { "cross", true },
                { "isolated", true },
            };
        }
        object unifiedType = null;
        if (isTrue(spot))
        {
            unifiedType = "spot";
        } else if (isTrue(swap))
        {
            unifiedType = "swap";
        } else if (isTrue(future))
        {
            unifiedType = "future";
        } else if (isTrue(option))
        {
            unifiedType = "option";
            active = null;
        }
        object parsedStrike = null;
        if (isTrue(!isEqual(strike, null)))
        {
            parsedStrike = this.parseToNumeric(strike);
        }
        object entry = new Dictionary<string, object>() {
            { "id", id },
            { "lowercaseId", lowercaseId },
            { "symbol", symbol },
            { "base", bs },
            { "quote", quote },
            { "settle", settle },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", settleId },
            { "type", unifiedType },
            { "spot", spot },
            { "margin", isTrue(spot) && isTrue(isMarginTradingAllowed) },
            { "marginModes", marginModes },
            { "swap", swap },
            { "future", future },
            { "option", option },
            { "active", active },
            { "contract", contract },
            { "linear", linear },
            { "inverse", inverse },
            { "taker", getValue(getValue(fees, "trading"), "taker") },
            { "maker", getValue(getValue(fees, "trading"), "maker") },
            { "contractSize", contractSize },
            { "expiry", expiry },
            { "expiryDatetime", this.iso8601(expiry) },
            { "strike", parsedStrike },
            { "optionType", this.safeStringLower(market, "side") },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(this.parsePrecision(this.safeString2(market, "quantityPrecision", "quantityScale"))) },
                { "price", this.parseNumber(this.parsePrecision(this.safeString2(market, "pricePrecision", "priceScale"))) },
                { "base", this.parseNumber(this.parsePrecision(this.safeString(market, "baseAssetPrecision"))) },
                { "quote", this.parseNumber(this.parsePrecision(this.safeString(market, "quotePrecision"))) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "minQty") },
                    { "max", this.safeNumber(market, "maxQty") },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "info", market },
            { "created", this.safeInteger(market, "onboardDate") },
        };
        if (isTrue(inOp(filtersByType, "PRICE_FILTER")))
        {
            object filter = this.safeDict(filtersByType, "PRICE_FILTER", new Dictionary<string, object>() {});
            // PRICE_FILTER reports zero values for maxPrice
            // since they updated filter types in November 2018
            // https://github.com/ccxt/ccxt/issues/4286
            // therefore limits['price']['max'] doesn't have any meaningful value except undefined
            ((IDictionary<string,object>)getValue(entry, "limits"))["price"] = new Dictionary<string, object>() {
                { "min", this.safeNumber(filter, "minPrice") },
                { "max", this.safeNumber(filter, "maxPrice") },
            };
            ((IDictionary<string,object>)getValue(entry, "precision"))["price"] = this.safeNumber(filter, "tickSize");
        }
        if (isTrue(inOp(filtersByType, "LOT_SIZE")))
        {
            object filter = this.safeDict(filtersByType, "LOT_SIZE", new Dictionary<string, object>() {});
            ((IDictionary<string,object>)getValue(entry, "precision"))["amount"] = this.safeNumber(filter, "stepSize");
            ((IDictionary<string,object>)getValue(entry, "limits"))["amount"] = new Dictionary<string, object>() {
                { "min", this.safeNumber(filter, "minQty") },
                { "max", this.safeNumber(filter, "maxQty") },
            };
        }
        if (isTrue(inOp(filtersByType, "MARKET_LOT_SIZE")))
        {
            object filter = this.safeDict(filtersByType, "MARKET_LOT_SIZE", new Dictionary<string, object>() {});
            ((IDictionary<string,object>)getValue(entry, "limits"))["market"] = new Dictionary<string, object>() {
                { "min", this.safeNumber(filter, "minQty") },
                { "max", this.safeNumber(filter, "maxQty") },
            };
        }
        if (isTrue(isTrue((inOp(filtersByType, "MIN_NOTIONAL"))) || isTrue((inOp(filtersByType, "NOTIONAL")))))
        {
            object filter = this.safeDict2(filtersByType, "MIN_NOTIONAL", "NOTIONAL", new Dictionary<string, object>() {});
            ((IDictionary<string,object>)getValue(getValue(entry, "limits"), "cost"))["min"] = this.safeNumber2(filter, "minNotional", "notional");
            ((IDictionary<string,object>)getValue(getValue(entry, "limits"), "cost"))["max"] = this.safeNumber(filter, "maxNotional");
        }
        return entry;
    }

    public virtual object parseBalanceHelper(object entry)
    {
        object account = this.account();
        ((IDictionary<string,object>)account)["used"] = this.safeString(entry, "locked");
        ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "free");
        object interest = this.safeString(entry, "interest");
        object debt = this.safeString(entry, "borrowed");
        ((IDictionary<string,object>)account)["debt"] = Precise.stringAdd(debt, interest);
        return account;
    }

    public virtual object parseBalanceCustom(object response, object type = null, object marginMode = null, object isPortfolioMargin = null)
    {
        isPortfolioMargin ??= false;
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object timestamp = null;
        object isolated = isEqual(marginMode, "isolated");
        object cross = isTrue((isEqual(type, "margin"))) || isTrue((isEqual(marginMode, "cross")));
        if (isTrue(isPortfolioMargin))
        {
            for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
            {
                object entry = getValue(response, i);
                object account = this.account();
                object currencyId = this.safeString(entry, "asset");
                object code = this.safeCurrencyCode(currencyId);
                if (isTrue(isEqual(type, "linear")))
                {
                    ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "umWalletBalance");
                    ((IDictionary<string,object>)account)["used"] = this.safeString(entry, "umUnrealizedPNL");
                } else if (isTrue(isEqual(type, "inverse")))
                {
                    ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "cmWalletBalance");
                    ((IDictionary<string,object>)account)["used"] = this.safeString(entry, "cmUnrealizedPNL");
                } else if (isTrue(cross))
                {
                    object borrowed = this.safeString(entry, "crossMarginBorrowed");
                    object interest = this.safeString(entry, "crossMarginInterest");
                    ((IDictionary<string,object>)account)["debt"] = Precise.stringAdd(borrowed, interest);
                    ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "crossMarginFree");
                    ((IDictionary<string,object>)account)["used"] = this.safeString(entry, "crossMarginLocked");
                    ((IDictionary<string,object>)account)["total"] = this.safeString(entry, "crossMarginAsset");
                } else
                {
                    ((IDictionary<string,object>)account)["total"] = this.safeString(entry, "totalWalletBalance");
                }
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        } else if (isTrue(!isTrue(isolated) && isTrue((isTrue((isEqual(type, "spot"))) || isTrue(cross)))))
        {
            timestamp = this.safeInteger(response, "updateTime");
            object balances = this.safeList2(response, "balances", "userAssets", new List<object>() {});
            for (object i = 0; isLessThan(i, getArrayLength(balances)); postFixIncrement(ref i))
            {
                object balance = getValue(balances, i);
                object currencyId = this.safeString(balance, "asset");
                object code = this.safeCurrencyCode(currencyId);
                object account = this.account();
                ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "free");
                ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "locked");
                if (isTrue(cross))
                {
                    object debt = this.safeString(balance, "borrowed");
                    object interest = this.safeString(balance, "interest");
                    ((IDictionary<string,object>)account)["debt"] = Precise.stringAdd(debt, interest);
                }
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        } else if (isTrue(isolated))
        {
            object assets = this.safeList(response, "assets");
            for (object i = 0; isLessThan(i, getArrayLength(assets)); postFixIncrement(ref i))
            {
                object asset = getValue(assets, i);
                object marketId = this.safeString(asset, "symbol");
                object symbol = this.safeSymbol(marketId, null, null, "spot");
                object bs = this.safeDict(asset, "baseAsset", new Dictionary<string, object>() {});
                object quote = this.safeDict(asset, "quoteAsset", new Dictionary<string, object>() {});
                object baseCode = this.safeCurrencyCode(this.safeString(bs, "asset"));
                object quoteCode = this.safeCurrencyCode(this.safeString(quote, "asset"));
                object subResult = new Dictionary<string, object>() {};
                ((IDictionary<string,object>)subResult)[(string)baseCode] = this.parseBalanceHelper(bs);
                ((IDictionary<string,object>)subResult)[(string)quoteCode] = this.parseBalanceHelper(quote);
                ((IDictionary<string,object>)result)[(string)symbol] = this.safeBalance(subResult);
            }
        } else if (isTrue(isEqual(type, "savings")))
        {
            object positionAmountVos = this.safeList(response, "positionAmountVos", new List<object>() {});
            for (object i = 0; isLessThan(i, getArrayLength(positionAmountVos)); postFixIncrement(ref i))
            {
                object entry = getValue(positionAmountVos, i);
                object currencyId = this.safeString(entry, "asset");
                object code = this.safeCurrencyCode(currencyId);
                object account = this.account();
                object usedAndTotal = this.safeString(entry, "amount");
                ((IDictionary<string,object>)account)["total"] = usedAndTotal;
                ((IDictionary<string,object>)account)["used"] = usedAndTotal;
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        } else if (isTrue(isEqual(type, "funding")))
        {
            for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
            {
                object entry = getValue(response, i);
                object account = this.account();
                object currencyId = this.safeString(entry, "asset");
                object code = this.safeCurrencyCode(currencyId);
                ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "free");
                object frozen = this.safeString(entry, "freeze");
                object withdrawing = this.safeString(entry, "withdrawing");
                object locked = this.safeString(entry, "locked");
                ((IDictionary<string,object>)account)["used"] = Precise.stringAdd(frozen, Precise.stringAdd(locked, withdrawing));
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        } else
        {
            object balances = response;
            if (!isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
            {
                balances = this.safeList(response, "assets", new List<object>() {});
            }
            for (object i = 0; isLessThan(i, getArrayLength(balances)); postFixIncrement(ref i))
            {
                object balance = getValue(balances, i);
                object currencyId = this.safeString(balance, "asset");
                object code = this.safeCurrencyCode(currencyId);
                object account = this.account();
                ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "availableBalance");
                ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "initialMargin");
                ((IDictionary<string,object>)account)["total"] = this.safeString2(balance, "marginBalance", "balance");
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        }
        ((IDictionary<string,object>)result)["timestamp"] = timestamp;
        ((IDictionary<string,object>)result)["datetime"] = this.iso8601(timestamp);
        return ((bool) isTrue(isolated)) ? result : this.safeBalance(result);
    }

    /**
     * @method
     * @name binance#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#account-information-user_data                    // spot
     * @see https://developers.binance.com/docs/margin_trading/account/Query-Cross-Margin-Account-Details                       // cross margin
     * @see https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Account-Info                       // isolated margin
     * @see https://developers.binance.com/docs/wallet/asset/funding-wallet                                                     // funding
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Futures-Account-Balance-V2   // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Futures-Account-Balance               // future
     * @see https://developers.binance.com/docs/derivatives/option/account/Option-Account-Information                           // option
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Account-Balance                            // portfolio margin
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.type] 'future', 'delivery', 'savings', 'funding', or 'spot' or 'papi'
     * @param {string} [params.marginMode] 'cross' or 'isolated', for margin trading, uses this.options.defaultMarginMode if not passed, defaults to undefined/None/null
     * @param {string[]|undefined} [params.symbols] unified market symbols, only used in isolated margin mode
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch the balance for a portfolio margin account
     * @param {string} [params.subType] 'linear' or 'inverse'
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
     */
    public async override Task<object> fetchBalance(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object defaultType = this.safeString2(this.options, "fetchBalance", "defaultType", "spot");
        object type = this.safeString(parameters, "type", defaultType);
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchBalance", null, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchBalance", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object marginMode = null;
        object query = null;
        var marginModequeryVariable = this.handleMarginModeAndParams("fetchBalance", parameters);
        marginMode = ((IList<object>)marginModequeryVariable)[0];
        query = ((IList<object>)marginModequeryVariable)[1];
        query = this.omit(query, "type");
        object response = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(isTrue(isPortfolioMargin) || isTrue((isEqual(type, "papi")))))
        {
            if (isTrue(this.isLinear(type, subType)))
            {
                type = "linear";
            } else if (isTrue(this.isInverse(type, subType)))
            {
                type = "inverse";
            }
            isPortfolioMargin = true;
            response = await this.papiGetBalance(this.extend(request, query));
        } else if (isTrue(this.isLinear(type, subType)))
        {
            type = "linear";
            object useV2 = null;
            var useV2parametersVariable = this.handleOptionAndParams(parameters, "fetchBalance", "useV2", false);
            useV2 = ((IList<object>)useV2parametersVariable)[0];
            parameters = ((IList<object>)useV2parametersVariable)[1];
            parameters = this.extend(request, query);
            if (!isTrue(useV2))
            {
                response = await this.fapiPrivateV3GetAccount(parameters);
            } else
            {
                response = await this.fapiPrivateV2GetAccount(parameters);
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            type = "inverse";
            response = await this.dapiPrivateGetAccount(this.extend(request, query));
        } else if (isTrue(isEqual(marginMode, "isolated")))
        {
            object paramSymbols = this.safeList(parameters, "symbols");
            query = this.omit(query, "symbols");
            if (isTrue(!isEqual(paramSymbols, null)))
            {
                object symbols = "";
                if (isTrue(((paramSymbols is IList<object>) || (paramSymbols.GetType().IsGenericType && paramSymbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
                {
                    symbols = this.marketId(getValue(paramSymbols, 0));
                    for (object i = 1; isLessThan(i, getArrayLength(paramSymbols)); postFixIncrement(ref i))
                    {
                        object symbol = getValue(paramSymbols, i);
                        object id = this.marketId(symbol);
                        symbols = add(symbols, add(",", id));
                    }
                } else
                {
                    symbols = paramSymbols;
                }
                ((IDictionary<string,object>)request)["symbols"] = symbols;
            }
            response = await this.sapiGetMarginIsolatedAccount(this.extend(request, query));
        } else if (isTrue(isTrue((isEqual(type, "margin"))) || isTrue((isEqual(marginMode, "cross")))))
        {
            response = await this.sapiGetMarginAccount(this.extend(request, query));
        } else if (isTrue(isEqual(type, "savings")))
        {
            response = await this.sapiGetLendingUnionAccount(this.extend(request, query));
        } else if (isTrue(isEqual(type, "funding")))
        {
            response = await this.sapiPostAssetGetFundingAsset(this.extend(request, query));
        } else
        {
            response = await this.privateGetAccount(this.extend(request, query));
        }
        //
        // spot
        //
        //     {
        //         "makerCommission": 10,
        //         "takerCommission": 10,
        //         "buyerCommission": 0,
        //         "sellerCommission": 0,
        //         "canTrade": true,
        //         "canWithdraw": true,
        //         "canDeposit": true,
        //         "updateTime": 1575357359602,
        //         "accountType": "MARGIN",
        //         "balances": [
        //             { asset: "BTC", free: "0.00219821", locked: "0.00000000"  },
        //         ]
        //     }
        //
        // margin (cross)
        //
        //     {
        //         "borrowEnabled":true,
        //         "marginLevel":"999.00000000",
        //         "totalAssetOfBtc":"0.00000000",
        //         "totalLiabilityOfBtc":"0.00000000",
        //         "totalNetAssetOfBtc":"0.00000000",
        //         "tradeEnabled":true,
        //         "transferEnabled":true,
        //         "userAssets":[
        //             {"asset":"MATIC","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
        //             {"asset":"VET","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"},
        //             {"asset":"USDT","borrowed":"0.00000000","free":"0.00000000","interest":"0.00000000","locked":"0.00000000","netAsset":"0.00000000"}
        //         ],
        //     }
        //
        // margin (isolated)
        //
        //    {
        //        "info": {
        //            "assets": [
        //                {
        //                    "baseAsset": {
        //                        "asset": "1INCH",
        //                        "borrowEnabled": true,
        //                        "borrowed": "0",
        //                        "free": "0",
        //                        "interest": "0",
        //                        "locked": "0",
        //                        "netAsset": "0",
        //                        "netAssetOfBtc": "0",
        //                        "repayEnabled": true,
        //                        "totalAsset": "0"
        //                    },
        //                    "quoteAsset": {
        //                        "asset": "USDT",
        //                        "borrowEnabled": true,
        //                        "borrowed": "0",
        //                        "free": "11",
        //                        "interest": "0",
        //                        "locked": "0",
        //                        "netAsset": "11",
        //                        "netAssetOfBtc": "0.00054615",
        //                        "repayEnabled": true,
        //                        "totalAsset": "11"
        //                    },
        //                    "symbol": "1INCHUSDT",
        //                    "isolatedCreated": true,
        //                    "marginLevel": "999",
        //                    "marginLevelStatus": "EXCESSIVE",
        //                    "marginRatio": "5",
        //                    "indexPrice": "0.59184331",
        //                    "liquidatePrice": "0",
        //                    "liquidateRate": "0",
        //                    "tradeEnabled": true,
        //                    "enabled": true
        //                },
        //            ]
        //        }
        //    }
        //
        // futures (fapi)
        //
        //     fapiPrivateV3GetAccount
        //
        //     {
        //         "feeTier":0,
        //         "canTrade":true,
        //         "canDeposit":true,
        //         "canWithdraw":true,
        //         "updateTime":0,
        //         "totalInitialMargin":"0.00000000",
        //         "totalMaintMargin":"0.00000000",
        //         "totalWalletBalance":"0.00000000",
        //         "totalUnrealizedProfit":"0.00000000",
        //         "totalMarginBalance":"0.00000000",
        //         "totalPositionInitialMargin":"0.00000000",
        //         "totalOpenOrderInitialMargin":"0.00000000",
        //         "totalCrossWalletBalance":"0.00000000",
        //         "totalCrossUnPnl":"0.00000000",
        //         "availableBalance":"0.00000000",
        //         "maxWithdrawAmount":"0.00000000",
        //         "assets":[
        //             {
        //                 "asset":"BNB",
        //                 "walletBalance":"0.01000000",
        //                 "unrealizedProfit":"0.00000000",
        //                 "marginBalance":"0.01000000",
        //                 "maintMargin":"0.00000000",
        //                 "initialMargin":"0.00000000",
        //                 "positionInitialMargin":"0.00000000",
        //                 "openOrderInitialMargin":"0.00000000",
        //                 "maxWithdrawAmount":"0.01000000",
        //                 "crossWalletBalance":"0.01000000",
        //                 "crossUnPnl":"0.00000000",
        //                 "availableBalance":"0.01000000"
        //             }
        //         ],
        //         "positions":[
        //             {
        //                 "symbol":"BTCUSDT",
        //                 "initialMargin":"0",
        //                 "maintMargin":"0",
        //                 "unrealizedProfit":"0.00000000",
        //                 "positionInitialMargin":"0",
        //                 "openOrderInitialMargin":"0",
        //                 "leverage":"21",
        //                 "isolated":false,
        //                 "entryPrice":"0.00000",
        //                 "maxNotional":"5000000",
        //                 "positionSide":"BOTH"
        //             },
        //         ]
        //     }
        //
        //     fapiPrivateV2GetBalance
        //
        //     [
        //         {
        //             "accountAlias":"FzFzXquXXqoC",
        //             "asset":"BNB",
        //             "balance":"0.01000000",
        //             "crossWalletBalance":"0.01000000",
        //             "crossUnPnl":"0.00000000",
        //             "availableBalance":"0.01000000",
        //             "maxWithdrawAmount":"0.01000000"
        //         }
        //     ]
        //
        // binance pay
        //
        //     [
        //       {
        //         "asset": "BUSD",
        //         "free": "1129.83",
        //         "locked": "0",
        //         "freeze": "0",
        //         "withdrawing": "0"
        //       }
        //     ]
        //
        // portfolio margin
        //
        //     [
        //         {
        //             "asset": "USDT",
        //             "totalWalletBalance": "66.9923261",
        //             "crossMarginAsset": "35.9697141",
        //             "crossMarginBorrowed": "0.0",
        //             "crossMarginFree": "35.9697141",
        //             "crossMarginInterest": "0.0",
        //             "crossMarginLocked": "0.0",
        //             "umWalletBalance": "31.022612",
        //             "umUnrealizedPNL": "0.0",
        //             "cmWalletBalance": "0.0",
        //             "cmUnrealizedPNL": "0.0",
        //             "updateTime": 0,
        //             "negativeBalance": "0.0"
        //         },
        //     ]
        //
        return this.parseBalanceCustom(response, type, marginMode, isPortfolioMargin);
    }

    /**
     * @method
     * @name binance#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#order-book                           // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Order-Book   // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Order-Book            // future
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Order-Book                           // option
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default 100, max 5000, see https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#order-book
        }
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPublicGetDepth(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPublicGetDepth(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPublicGetDepth(this.extend(request, parameters));
        } else
        {
            response = await this.publicGetDepth(this.extend(request, parameters));
        }
        //
        // future
        //
        //     {
        //         "lastUpdateId":333598053905,
        //         "E":1618631511986,
        //         "T":1618631511964,
        //         "bids":[
        //             ["2493.56","20.189"],
        //             ["2493.54","1.000"],
        //             ["2493.51","0.005"]
        //         ],
        //         "asks":[
        //             ["2493.57","0.877"],
        //             ["2493.62","0.063"],
        //             ["2493.71","12.054"],
        //         ]
        //     }
        //
        // options (eapi)
        //
        //     {
        //         "bids": [
        //             ["108.7","16.08"],
        //             ["106","21.29"],
        //             ["82.4","0.02"]
        //         ],
        //         "asks": [
        //             ["111.4","19.52"],
        //             ["119.9","17.6"],
        //             ["141.2","31"]
        //         ],
        //         "T": 1676771382078,
        //         "u": 1015939
        //     }
        //
        object timestamp = this.safeInteger(response, "T");
        object orderbook = this.parseOrderBook(response, symbol, timestamp);
        ((IDictionary<string,object>)orderbook)["nonce"] = this.safeInteger2(response, "lastUpdateId", "u");
        return orderbook;
    }

    public override object parseTicker(object ticker, object market = null)
    {
        // markPrices
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "markPrice": "11793.63104562",  // mark price
        //         "indexPrice": "11781.80495970", // index price
        //         "estimatedSettlePrice": "11781.16138815", // Estimated Settle Price, only useful in the last hour before the settlement starts.
        //         "lastFundingRate": "0.00038246",  // This is the lastest estimated funding rate
        //         "nextFundingTime": 1597392000000,
        //         "interestRate": "0.00010000",
        //         "time": 1597370495002
        //     }
        //
        //     {
        //         "symbol": "ETHBTC",
        //         "priceChange": "0.00068700",
        //         "priceChangePercent": "2.075",
        //         "weightedAvgPrice": "0.03342681",
        //         "prevClosePrice": "0.03310300",
        //         "lastPrice": "0.03378900",
        //         "lastQty": "0.07700000",
        //         "bidPrice": "0.03378900",
        //         "bidQty": "7.16800000",
        //         "askPrice": "0.03379000",
        //         "askQty": "24.00000000",
        //         "openPrice": "0.03310200",
        //         "highPrice": "0.03388900",
        //         "lowPrice": "0.03306900",
        //         "volume": "205478.41000000",
        //         "quoteVolume": "6868.48826294",
        //         "openTime": 1601469986932,
        //         "closeTime": 1601556386932,
        //         "firstId": 196098772,
        //         "lastId": 196186315,
        //         "count": 87544
        //     }
        //
        // coinm
        //
        //     {
        //         "baseVolume": "214549.95171161",
        //         "closeTime": "1621965286847",
        //         "count": "1283779",
        //         "firstId": "152560106",
        //         "highPrice": "39938.3",
        //         "lastId": "153843955",
        //         "lastPrice": "37993.4",
        //         "lastQty": "1",
        //         "lowPrice": "36457.2",
        //         "openPrice": "37783.4",
        //         "openTime": "1621878840000",
        //         "pair": "BTCUSD",
        //         "priceChange": "210.0",
        //         "priceChangePercent": "0.556",
        //         "symbol": "BTCUSD_PERP",
        //         "volume": "81990451",
        //         "weightedAvgPrice": "38215.08713747"
        //     }
        //
        // eapi: fetchTicker, fetchTickers
        //
        //     {
        //         "symbol": "ETH-230510-1825-C",
        //         "priceChange": "-5.1",
        //         "priceChangePercent": "-0.1854",
        //         "lastPrice": "22.4",
        //         "lastQty": "0",
        //         "open": "27.5",
        //         "high": "34.1",
        //         "low": "22.4",
        //         "volume": "6.83",
        //         "amount": "201.44",
        //         "bidPrice": "21.9",
        //         "askPrice": "22.4",
        //         "openTime": 1683614771898,
        //         "closeTime": 1683695017784,
        //         "firstTradeId": 12,
        //         "tradeCount": 22,
        //         "strikePrice": "1825",
        //         "exercisePrice": "1845.95341176"
        //     }
        //
        // spot bidsAsks
        //
        //     {
        //         "symbol":"ETHBTC",
        //         "bidPrice":"0.07466800",
        //         "bidQty":"5.31990000",
        //         "askPrice":"0.07466900",
        //         "askQty":"10.93540000"
        //     }
        //
        // usdm bidsAsks
        //
        //     {
        //         "symbol":"BTCUSDT",
        //         "bidPrice":"21321.90",
        //         "bidQty":"33.592",
        //         "askPrice":"21322.00",
        //         "askQty":"1.427",
        //         "time":"1673899207538"
        //     }
        //
        // coinm bidsAsks
        //
        //     {
        //         "symbol":"BTCUSD_PERP",
        //         "pair":"BTCUSD",
        //         "bidPrice":"21301.2",
        //         "bidQty":"188",
        //         "askPrice":"21301.3",
        //         "askQty":"10302",
        //         "time":"1673899278514"
        //     }
        //
        object timestamp = this.safeInteger2(ticker, "closeTime", "time");
        object marketType = null;
        if (isTrue((inOp(ticker, "time"))))
        {
            marketType = "contract";
        }
        if (isTrue(isEqual(marketType, null)))
        {
            marketType = ((bool) isTrue((inOp(ticker, "bidQty")))) ? "spot" : "contract";
        }
        object marketId = this.safeString(ticker, "symbol");
        object symbol = this.safeSymbol(marketId, market, null, marketType);
        object last = this.safeString(ticker, "lastPrice");
        object wAvg = this.safeString(ticker, "weightedAvgPrice");
        object isCoinm = (inOp(ticker, "baseVolume"));
        object baseVolume = null;
        object quoteVolume = null;
        if (isTrue(isCoinm))
        {
            baseVolume = this.safeString(ticker, "baseVolume");
            // 'volume' field in inverse markets is not quoteVolume, but traded amount (per contracts)
            quoteVolume = Precise.stringMul(baseVolume, wAvg);
        } else
        {
            baseVolume = this.safeString(ticker, "volume");
            quoteVolume = this.safeString2(ticker, "quoteVolume", "amount");
        }
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString2(ticker, "highPrice", "high") },
            { "low", this.safeString2(ticker, "lowPrice", "low") },
            { "bid", this.safeString(ticker, "bidPrice") },
            { "bidVolume", this.safeString(ticker, "bidQty") },
            { "ask", this.safeString(ticker, "askPrice") },
            { "askVolume", this.safeString(ticker, "askQty") },
            { "vwap", wAvg },
            { "open", this.safeString2(ticker, "openPrice", "open") },
            { "close", last },
            { "last", last },
            { "previousClose", this.safeString(ticker, "prevClosePrice") },
            { "change", this.safeString(ticker, "priceChange") },
            { "percentage", this.safeString(ticker, "priceChangePercent") },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "markPrice", this.safeString(ticker, "markPrice") },
            { "indexPrice", this.safeString(ticker, "indexPrice") },
            { "info", ticker },
        }, market);
    }

    /**
     * @method
     * @name binance#fetchStatus
     * @description the latest known information on the availability of the exchange API
     * @see https://developers.binance.com/docs/wallet/others/system-status
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
     */
    public async override Task<object> fetchStatus(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object response = await this.sapiGetSystemStatus(parameters);
        //
        //     {
        //         "status": 0,              // 0: normal，1：system maintenance
        //         "msg": "normal"           // "normal", "system_maintenance"
        //     }
        //
        object statusRaw = this.safeString(response, "status");
        return new Dictionary<string, object>() {
            { "status", this.safeString(new Dictionary<string, object>() {
                { "0", "ok" },
                { "1", "maintenance" },
            }, statusRaw, statusRaw) },
            { "updated", null },
            { "eta", null },
            { "url", null },
            { "info", response },
        };
    }

    /**
     * @method
     * @name binance#fetchTicker
     * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#24hr-ticker-price-change-statistics                           // spot
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#rolling-window-price-change-statistics                        // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/24hr-Ticker-Price-Change-Statistics   // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/24hr-Ticker-Price-Change-Statistics            // future
     * @see https://developers.binance.com/docs/derivatives/option/market-data/24hr-Ticker-Price-Change-Statistics                           // option
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.rolling] (spot only) default false, if true, uses the rolling 24 hour ticker endpoint /api/v3/ticker
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPublicGetTicker(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPublicGetTicker24hr(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPublicGetTicker24hr(this.extend(request, parameters));
        } else
        {
            object rolling = this.safeBool(parameters, "rolling", false);
            parameters = this.omit(parameters, "rolling");
            if (isTrue(rolling))
            {
                response = await this.publicGetTicker(this.extend(request, parameters));
            } else
            {
                response = await this.publicGetTicker24hr(this.extend(request, parameters));
            }
        }
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            object firstTicker = this.safeDict(response, 0, new Dictionary<string, object>() {});
            return this.parseTicker(firstTicker, market);
        }
        return this.parseTicker(response, market);
    }

    /**
     * @method
     * @name binance#fetchBidsAsks
     * @description fetches the bid and ask price and volume for multiple markets
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#symbol-order-book-ticker                         // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Symbol-Order-Book-Ticker // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Symbol-Order-Book-Ticker          // future
     * @param {string[]|undefined} symbols unified symbols of the markets to fetch the bids and asks for, all markets are returned if not assigned
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchBidsAsks(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true, true, true);
        object market = this.getMarketFromSymbols(symbols);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchBidsAsks", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchBidsAsks", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetTickerBookTicker(parameters);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetTickerBookTicker(parameters);
        } else if (isTrue(isEqual(type, "spot")))
        {
            object request = new Dictionary<string, object>() {};
            if (isTrue(!isEqual(symbols, null)))
            {
                ((IDictionary<string,object>)request)["symbols"] = this.json(this.marketIds(symbols));
            }
            response = await this.publicGetTickerBookTicker(this.extend(request, parameters));
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchBidsAsks() does not support "), type), " markets yet")) ;
        }
        return this.parseTickers(response, symbols);
    }

    /**
     * @method
     * @name binance#fetchLastPrices
     * @description fetches the last price for multiple markets
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#symbol-price-ticker                          // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Symbol-Price-Ticker  // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Symbol-Price-Ticker           // future
     * @param {string[]|undefined} symbols unified symbols of the markets to fetch the last prices
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a dictionary of lastprices structures
     */
    public async override Task<object> fetchLastPrices(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true, true, true);
        object market = this.getMarketFromSymbols(symbols);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchLastPrices", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchLastPrices", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicV2GetTickerPrice(parameters);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetTickerPrice(parameters);
        } else if (isTrue(isEqual(type, "spot")))
        {
            response = await this.publicGetTickerPrice(parameters);
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchLastPrices() does not support "), type), " markets yet")) ;
        }
        return this.parseLastPrices(response, symbols);
    }

    public override object parseLastPrice(object entry, object market = null)
    {
        //
        // spot
        //
        //     {
        //         "symbol": "LTCBTC",
        //         "price": "4.00000200"
        //     }
        //
        // usdm (swap/future)
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "price": "6000.01",
        //         "time": 1589437530011   // Transaction time
        //     }
        //
        //
        // coinm (swap/future)
        //
        //     {
        //         "symbol": "BTCUSD_200626", // symbol ("BTCUSD_200626", "BTCUSD_PERP", etc..)
        //         "ps": "BTCUSD", // pair
        //         "price": "9647.8",
        //         "time": 1591257246176
        //     }
        //
        object timestamp = this.safeInteger(entry, "time");
        object type = ((bool) isTrue((isEqual(timestamp, null)))) ? "spot" : "swap";
        object marketId = this.safeString(entry, "symbol");
        market = this.safeMarket(marketId, market, null, type);
        object price = this.safeNumber(entry, "price");
        return new Dictionary<string, object>() {
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "price", price },
            { "side", null },
            { "info", entry },
        };
    }

    /**
     * @method
     * @name binance#fetchTickers
     * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#24hr-ticker-price-change-statistics                          // spot
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/24hr-Ticker-Price-Change-Statistics  // swap
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/24hr-Ticker-Price-Change-Statistics           // future
     * @see https://developers.binance.com/docs/derivatives/option/market-data/24hr-Ticker-Price-Change-Statistics                          // option
     * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @param {string} [params.type] 'spot', 'option', use params["subType"] for swap and future markets
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true, true, true);
        object market = this.getMarketFromSymbols(symbols);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchTickers", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchTickers", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetTicker24hr(parameters);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetTicker24hr(parameters);
        } else if (isTrue(isEqual(type, "spot")))
        {
            object request = new Dictionary<string, object>() {};
            if (isTrue(!isEqual(symbols, null)))
            {
                ((IDictionary<string,object>)request)["symbols"] = this.json(this.marketIds(symbols));
            }
            response = await this.publicGetTicker24hr(this.extend(request, parameters));
        } else if (isTrue(isEqual(type, "option")))
        {
            response = await this.eapiPublicGetTicker(parameters);
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchTickers() does not support "), type), " markets yet")) ;
        }
        return this.parseTickers(response, symbols);
    }

    /**
     * @method
     * @name binance#fetchMarkPrice
     * @description fetches mark price for the market
     * @see https://binance-docs.github.io/apidocs/futures/en/#mark-price
     * @see https://binance-docs.github.io/apidocs/delivery/en/#index-price-and-mark-price
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchMarkPrice(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchMarkPrice", market, parameters, "swap");
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchMarkPrice", market, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetPremiumIndex(this.extend(request, parameters));
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetPremiumIndex(this.extend(request, parameters));
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchMarkPrice() does not support "), type), " markets yet")) ;
        }
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            return this.parseTicker(this.safeDict(response, 0, new Dictionary<string, object>() {}), market);
        }
        return this.parseTicker(response, market);
    }

    /**
     * @method
     * @name binance#fetchMarkPrices
     * @description fetches mark prices for multiple markets
     * @see https://binance-docs.github.io/apidocs/futures/en/#mark-price
     * @see https://binance-docs.github.io/apidocs/delivery/en/#index-price-and-mark-price
     * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchMarkPrices(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true, true, true);
        object market = this.getMarketFromSymbols(symbols);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchMarkPrices", market, parameters, "swap");
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchMarkPrices", market, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetPremiumIndex(parameters);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetPremiumIndex(parameters);
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchMarkPrices() does not support "), type), " markets yet")) ;
        }
        return this.parseTickers(response, symbols);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        // when api method = publicGetKlines || fapiPublicGetKlines || dapiPublicGetKlines
        //     [
        //         1591478520000, // open time
        //         "0.02501300",  // open
        //         "0.02501800",  // high
        //         "0.02500000",  // low
        //         "0.02500000",  // close
        //         "22.19000000", // volume
        //         1591478579999, // close time
        //         "0.55490906",  // quote asset volume, base asset volume for dapi
        //         40,            // number of trades
        //         "10.92900000", // taker buy base asset volume
        //         "0.27336462",  // taker buy quote asset volume
        //         "0"            // ignore
        //     ]
        //
        //  when api method = fapiPublicGetMarkPriceKlines || fapiPublicGetIndexPriceKlines
        //     [
        //         [
        //         1591256460000,          // Open time
        //         "9653.29201333",        // Open
        //         "9654.56401333",        // High
        //         "9653.07367333",        // Low
        //         "9653.07367333",        // Close (or latest price)
        //         "0",                    // Ignore
        //         1591256519999,          // Close time
        //         "0",                    // Ignore
        //         60,                     // Number of bisic data
        //         "0",                    // Ignore
        //         "0",                    // Ignore
        //         "0"                     // Ignore
        //         ]
        //     ]
        //
        // options
        //
        //     {
        //         "open": "32.2",
        //         "high": "32.2",
        //         "low": "32.2",
        //         "close": "32.2",
        //         "volume": "0",
        //         "interval": "5m",
        //         "tradeCount": 0,
        //         "takerVolume": "0",
        //         "takerAmount": "0",
        //         "amount": "0",
        //         "openTime": 1677096900000,
        //         "closeTime": 1677097200000
        //     }
        //
        object inverse = this.safeBool(market, "inverse");
        object volumeIndex = ((bool) isTrue(inverse)) ? 7 : 5;
        return new List<object> {this.safeInteger2(ohlcv, 0, "openTime"), this.safeNumber2(ohlcv, 1, "open"), this.safeNumber2(ohlcv, 2, "high"), this.safeNumber2(ohlcv, 3, "low"), this.safeNumber2(ohlcv, 4, "close"), this.safeNumber2(ohlcv, volumeIndex, "volume")};
    }

    /**
     * @method
     * @name binance#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#klinecandlestick-data
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Index-Price-Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Mark-Price-Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Premium-Index-Kline-Data
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Index-Price-Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Mark-Price-Kline-Candlestick-Data
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Premium-Index-Kline-Data
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.price] "mark" or "index" for mark price and index price candles
     * @param {int} [params.until] timestamp in ms of the latest candle to fetch
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchOHLCV", "paginate", false);
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDeterministic("fetchOHLCV", symbol, since, limit, timeframe, parameters, 1000);
        }
        object market = this.market(symbol);
        // binance docs say that the default limit 500, max 1500 for futures, max 1000 for spot markets
        // the reality is that the time range wider than 500 candles won't work right
        object defaultLimit = 500;
        object maxLimit = 1500;
        object price = this.safeString(parameters, "price");
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, new List<object>() {"price", "until"});
        if (isTrue(isTrue(isTrue(!isEqual(since, null)) && isTrue(!isEqual(until, null))) && isTrue(isEqual(limit, null))))
        {
            limit = maxLimit;
        }
        limit = ((bool) isTrue((isEqual(limit, null)))) ? defaultLimit : mathMin(limit, maxLimit);
        object request = new Dictionary<string, object>() {
            { "interval", this.safeString(this.timeframes, timeframe, timeframe) },
            { "limit", limit },
        };
        object marketId = getValue(market, "id");
        if (isTrue(isEqual(price, "index")))
        {
            object parts = ((string)marketId).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
            object pair = this.safeString(parts, 0);
            ((IDictionary<string,object>)request)["pair"] = pair; // Index price takes this argument instead of symbol
        } else
        {
            ((IDictionary<string,object>)request)["symbol"] = marketId;
        }
        // const duration = this.parseTimeframe (timeframe);
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
            //
            // It didn't work before without the endTime
            // https://github.com/ccxt/ccxt/issues/8454
            //
            if (isTrue(getValue(market, "inverse")))
            {
                if (isTrue(isGreaterThan(since, 0)))
                {
                    object duration = this.parseTimeframe(timeframe);
                    object endTime = this.sum(since, subtract(multiply(multiply(limit, duration), 1000), 1));
                    object now = this.milliseconds();
                    ((IDictionary<string,object>)request)["endTime"] = mathMin(now, endTime);
                }
            }
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["endTime"] = until;
        }
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPublicGetKlines(this.extend(request, parameters));
        } else if (isTrue(isEqual(price, "mark")))
        {
            if (isTrue(getValue(market, "inverse")))
            {
                response = await this.dapiPublicGetMarkPriceKlines(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPublicGetMarkPriceKlines(this.extend(request, parameters));
            }
        } else if (isTrue(isEqual(price, "index")))
        {
            if (isTrue(getValue(market, "inverse")))
            {
                response = await this.dapiPublicGetIndexPriceKlines(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPublicGetIndexPriceKlines(this.extend(request, parameters));
            }
        } else if (isTrue(isEqual(price, "premiumIndex")))
        {
            if (isTrue(getValue(market, "inverse")))
            {
                response = await this.dapiPublicGetPremiumIndexKlines(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPublicGetPremiumIndexKlines(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPublicGetKlines(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPublicGetKlines(this.extend(request, parameters));
        } else
        {
            response = await this.publicGetKlines(this.extend(request, parameters));
        }
        //
        //     [
        //         [1591478520000,"0.02501300","0.02501800","0.02500000","0.02500000","22.19000000",1591478579999,"0.55490906",40,"10.92900000","0.27336462","0"],
        //         [1591478580000,"0.02499600","0.02500900","0.02499400","0.02500300","21.34700000",1591478639999,"0.53370468",24,"7.53800000","0.18850725","0"],
        //         [1591478640000,"0.02500800","0.02501100","0.02500300","0.02500800","154.14200000",1591478699999,"3.85405839",97,"5.32300000","0.13312641","0"],
        //     ]
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "open": "32.2",
        //             "high": "32.2",
        //             "low": "32.2",
        //             "close": "32.2",
        //             "volume": "0",
        //             "interval": "5m",
        //             "tradeCount": 0,
        //             "takerVolume": "0",
        //             "takerAmount": "0",
        //             "amount": "0",
        //             "openTime": 1677096900000,
        //             "closeTime": 1677097200000
        //         }
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        if (isTrue(inOp(trade, "isDustTrade")))
        {
            return this.parseDustTrade(trade, market);
        }
        //
        // aggregate trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
        //
        //     {
        //         "a": 26129,         // Aggregate tradeId
        //         "p": "0.01633102",  // Price
        //         "q": "4.70443515",  // Quantity
        //         "f": 27781,         // First tradeId
        //         "l": 27781,         // Last tradeId
        //         "T": 1498793709153, // Timestamp
        //         "m": true,          // Was the buyer the maker?
        //         "M": true           // Was the trade the best price match?
        //     }
        //
        // REST: aggregate trades for swap & future (both linear and inverse)
        //
        //     {
        //         "a": "269772814",
        //         "p": "25864.1",
        //         "q": "3",
        //         "f": "662149354",
        //         "l": "662149355",
        //         "T": "1694209776022",
        //         "m": false,
        //     }
        //
        // recent public trades and old public trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#recent-trades-list
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#old-trade-lookup-market_data
        //
        //     {
        //         "id": 28457,
        //         "price": "4.00000100",
        //         "qty": "12.00000000",
        //         "time": 1499865549590,
        //         "isBuyerMaker": true,
        //         "isBestMatch": true
        //     }
        //
        // private trades
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#account-trade-list-user_data
        //
        //     {
        //         "symbol": "BNBBTC",
        //         "id": 28457,
        //         "orderId": 100234,
        //         "price": "4.00000100",
        //         "qty": "12.00000000",
        //         "commission": "10.10000000",
        //         "commissionAsset": "BNB",
        //         "time": 1499865549590,
        //         "isBuyer": true,
        //         "isMaker": false,
        //         "isBestMatch": true
        //     }
        //
        // futures trades
        //
        //     {
        //       "accountId": 20,
        //       "buyer": False,
        //       "commission": "-0.07819010",
        //       "commissionAsset": "USDT",
        //       "counterPartyId": 653,
        //       "id": 698759,
        //       "maker": False,
        //       "orderId": 25851813,
        //       "price": "7819.01",
        //       "qty": "0.002",
        //       "quoteQty": "0.01563",
        //       "realizedPnl": "-0.91539999",
        //       "side": "SELL",
        //       "symbol": "BTCUSDT",
        //       "time": 1569514978020
        //     }
        //     {
        //       "symbol": "BTCUSDT",
        //       "id": 477128891,
        //       "orderId": 13809777875,
        //       "side": "SELL",
        //       "price": "38479.55",
        //       "qty": "0.001",
        //       "realizedPnl": "-0.00009534",
        //       "marginAsset": "USDT",
        //       "quoteQty": "38.47955",
        //       "commission": "-0.00076959",
        //       "commissionAsset": "USDT",
        //       "time": 1612733566708,
        //       "positionSide": "BOTH",
        //       "maker": true,
        //       "buyer": false
        //     }
        //
        // { respType: FULL }
        //
        //     {
        //       "price": "4000.00000000",
        //       "qty": "1.00000000",
        //       "commission": "4.00000000",
        //       "commissionAsset": "USDT",
        //       "tradeId": "1234",
        //     }
        //
        // options: fetchMyTrades
        //
        //     {
        //         "id": 1125899906844226012,
        //         "tradeId": 73,
        //         "orderId": 4638761100843040768,
        //         "symbol": "ETH-230211-1500-C",
        //         "price": "18.70000000",
        //         "quantity": "-0.57000000",
        //         "fee": "0.17305890",
        //         "realizedProfit": "-3.53400000",
        //         "side": "SELL",
        //         "type": "LIMIT",
        //         "volatility": "0.30000000",
        //         "liquidity": "MAKER",
        //         "time": 1676085216845,
        //         "priceScale": 1,
        //         "quantityScale": 2,
        //         "optionSide": "CALL",
        //         "quoteAsset": "USDT"
        //     }
        //
        // options: fetchTrades
        //
        //     {
        //         "id": 1,
        //         "symbol": "ETH-230216-1500-C",
        //         "price": "35.5",
        //         "qty": "0.03",
        //         "quoteQty": "1.065",
        //         "side": 1,
        //         "time": 1676366446072
        //     }
        //
        // fetchMyTrades: linear portfolio margin
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "id": 4575108247,
        //         "orderId": 261942655610,
        //         "side": "SELL",
        //         "price": "47263.40",
        //         "qty": "0.010",
        //         "realizedPnl": "27.38400000",
        //         "marginAsset": "USDT",
        //         "quoteQty": "472.63",
        //         "commission": "0.18905360",
        //         "commissionAsset": "USDT",
        //         "time": 1707530039409,
        //         "buyer": false,
        //         "maker": false,
        //         "positionSide": "LONG"
        //     }
        //
        // fetchMyTrades: inverse portfolio margin
        //
        //     {
        //         "symbol": "ETHUSD_PERP",
        //         "id": 701907838,
        //         "orderId": 71548909034,
        //         "pair": "ETHUSD",
        //         "side": "SELL",
        //         "price": "2498.15",
        //         "qty": "1",
        //         "realizedPnl": "0.00012517",
        //         "marginAsset": "ETH",
        //         "baseQty": "0.00400296",
        //         "commission": "0.00000160",
        //         "commissionAsset": "ETH",
        //         "time": 1707530317519,
        //         "positionSide": "LONG",
        //         "buyer": false,
        //         "maker": false
        //     }
        //
        // fetchMyTrades: spot margin portfolio margin
        //
        //     {
        //         "symbol": "ADAUSDT",
        //         "id": 470227543,
        //         "orderId": 4421170947,
        //         "price": "0.53880000",
        //         "qty": "10.00000000",
        //         "quoteQty": "5.38800000",
        //         "commission": "0.00538800",
        //         "commissionAsset": "USDT",
        //         "time": 1707545780522,
        //         "isBuyer": false,
        //         "isMaker": false,
        //         "isBestMatch": true
        //     }
        //
        object timestamp = this.safeInteger2(trade, "T", "time");
        object amount = this.safeString2(trade, "q", "qty");
        amount = this.safeString(trade, "quantity", amount);
        object marketId = this.safeString(trade, "symbol");
        object isSpotTrade = isTrue(isTrue(isTrue((inOp(trade, "isIsolated"))) || isTrue((inOp(trade, "M")))) || isTrue((inOp(trade, "orderListId")))) || isTrue((inOp(trade, "isMaker")));
        object marketType = ((bool) isTrue(isSpotTrade)) ? "spot" : "contract";
        market = this.safeMarket(marketId, market, null, marketType);
        object symbol = getValue(market, "symbol");
        object side = null;
        object buyerMaker = this.safeBool2(trade, "m", "isBuyerMaker");
        object takerOrMaker = null;
        if (isTrue(!isEqual(buyerMaker, null)))
        {
            side = ((bool) isTrue(buyerMaker)) ? "sell" : "buy"; // this is reversed intentionally
        } else if (isTrue(inOp(trade, "side")))
        {
            side = this.safeStringLower(trade, "side");
        } else
        {
            if (isTrue(inOp(trade, "isBuyer")))
            {
                side = ((bool) isTrue(getValue(trade, "isBuyer"))) ? "buy" : "sell"; // this is a true side
            }
        }
        object fee = null;
        if (isTrue(inOp(trade, "commission")))
        {
            fee = new Dictionary<string, object>() {
                { "cost", this.safeString(trade, "commission") },
                { "currency", this.safeCurrencyCode(this.safeString(trade, "commissionAsset")) },
            };
        }
        if (isTrue(inOp(trade, "isMaker")))
        {
            takerOrMaker = ((bool) isTrue(getValue(trade, "isMaker"))) ? "maker" : "taker";
        }
        if (isTrue(inOp(trade, "maker")))
        {
            takerOrMaker = ((bool) isTrue(getValue(trade, "maker"))) ? "maker" : "taker";
        }
        if (isTrue(isTrue((inOp(trade, "optionSide"))) || isTrue(getValue(market, "option"))))
        {
            object settle = this.safeCurrencyCode(this.safeString(trade, "quoteAsset", "USDT"));
            takerOrMaker = this.safeStringLower(trade, "liquidity");
            if (isTrue(inOp(trade, "fee")))
            {
                fee = new Dictionary<string, object>() {
                    { "cost", this.safeString(trade, "fee") },
                    { "currency", settle },
                };
            }
            if (isTrue(isTrue((!isEqual(side, "buy"))) && isTrue((!isEqual(side, "sell")))))
            {
                side = ((bool) isTrue((isEqual(side, "1")))) ? "buy" : "sell";
            }
            if (isTrue(inOp(trade, "optionSide")))
            {
                if (isTrue(!isEqual(side, "buy")))
                {
                    amount = Precise.stringMul("-1", amount);
                }
            }
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "id", this.safeStringN(trade, new List<object>() {"t", "a", "tradeId", "id"}) },
            { "order", this.safeString(trade, "orderId") },
            { "type", this.safeStringLower(trade, "type") },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", this.safeString2(trade, "p", "price") },
            { "amount", amount },
            { "cost", this.safeString2(trade, "quoteQty", "baseQty") },
            { "fee", fee },
        }, market);
    }

    /**
     * @method
     * @name binance#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * Default fetchTradesMethod
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#compressedaggregate-trades-list                          // publicGetAggTrades (spot)
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Compressed-Aggregate-Trades-List // fapiPublicGetAggTrades (swap)
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Compressed-Aggregate-Trades-List          // dapiPublicGetAggTrades (future)
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Recent-Trades-List                                       // eapiPublicGetTrades (option)
     * Other fetchTradesMethod
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#recent-trades-list                                       // publicGetTrades (spot)
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Recent-Trades-List               // fapiPublicGetTrades (swap)
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Recent-Trades-List                        // dapiPublicGetTrades (future)
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#old-trade-lookup                                         // publicGetHistoricalTrades (spot)
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Old-Trades-Lookup                // fapiPublicGetHistoricalTrades (swap)
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Old-Trades-Lookup                         // dapiPublicGetHistoricalTrades (future)
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Old-Trades-Lookup                                        // eapiPublicGetHistoricalTrades (option)
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int} [since] only used when fetchTradesMethod is 'publicGetAggTrades', 'fapiPublicGetAggTrades', or 'dapiPublicGetAggTrades'
     * @param {int} [limit] default 500, max 1000
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] only used when fetchTradesMethod is 'publicGetAggTrades', 'fapiPublicGetAggTrades', or 'dapiPublicGetAggTrades'
     * @param {int} [params.fetchTradesMethod] 'publicGetAggTrades' (spot default), 'fapiPublicGetAggTrades' (swap default), 'dapiPublicGetAggTrades' (future default), 'eapiPublicGetTrades' (option default), 'publicGetTrades', 'fapiPublicGetTrades', 'dapiPublicGetTrades', 'publicGetHistoricalTrades', 'fapiPublicGetHistoricalTrades', 'dapiPublicGetHistoricalTrades', 'eapiPublicGetHistoricalTrades'
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     *
     * EXCHANGE SPECIFIC PARAMETERS
     * @param {int} [params.fromId] trade id to fetch from, default gets most recent trades, not used when fetchTradesMethod is 'publicGetTrades', 'fapiPublicGetTrades', 'dapiPublicGetTrades', or 'eapiPublicGetTrades'
     * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchTrades", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDynamic("fetchTrades", symbol, since, limit, parameters);
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (!isTrue(getValue(market, "option")))
        {
            if (isTrue(!isEqual(since, null)))
            {
                ((IDictionary<string,object>)request)["startTime"] = since;
                // https://github.com/ccxt/ccxt/issues/6400
                // https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
                ((IDictionary<string,object>)request)["endTime"] = this.sum(since, 3600000);
            }
            object until = this.safeInteger(parameters, "until");
            if (isTrue(!isEqual(until, null)))
            {
                ((IDictionary<string,object>)request)["endTime"] = until;
            }
        }
        if (isTrue(!isEqual(limit, null)))
        {
            object isFutureOrSwap = (isTrue(getValue(market, "swap")) || isTrue(getValue(market, "future")));
            ((IDictionary<string,object>)request)["limit"] = ((bool) isTrue(isFutureOrSwap)) ? mathMin(limit, 1000) : limit; // default = 500, maximum = 1000
        }
        object method = this.safeString(this.options, "fetchTradesMethod");
        method = this.safeString2(parameters, "fetchTradesMethod", "method", method);
        parameters = this.omit(parameters, new List<object>() {"until", "fetchTradesMethod"});
        object response = null;
        if (isTrue(isTrue(getValue(market, "option")) || isTrue(isEqual(method, "eapiPublicGetTrades"))))
        {
            response = await this.eapiPublicGetTrades(this.extend(request, parameters));
        } else if (isTrue(isTrue(getValue(market, "linear")) || isTrue(isEqual(method, "fapiPublicGetAggTrades"))))
        {
            response = await this.fapiPublicGetAggTrades(this.extend(request, parameters));
        } else if (isTrue(isTrue(getValue(market, "inverse")) || isTrue(isEqual(method, "dapiPublicGetAggTrades"))))
        {
            response = await this.dapiPublicGetAggTrades(this.extend(request, parameters));
        } else
        {
            response = await this.publicGetAggTrades(this.extend(request, parameters));
        }
        //
        // Caveats:
        // - default limit (500) applies only if no other parameters set, trades up
        //   to the maximum limit may be returned to satisfy other parameters
        // - if both limit and time window is set and time window contains more
        //   trades than the limit then the last trades from the window are returned
        // - "tradeId" accepted and returned by this method is "aggregate" trade id
        //   which is different from actual trade id
        // - setting both fromId and time window results in error
        //
        // aggregate trades
        //
        //     [
        //         {
        //             "a": 26129,         // Aggregate tradeId
        //             "p": "0.01633102",  // Price
        //             "q": "4.70443515",  // Quantity
        //             "f": 27781,         // First tradeId
        //             "l": 27781,         // Last tradeId
        //             "T": 1498793709153, // Timestamp
        //             "m": true,          // Was the buyer the maker?
        //             "M": true           // Was the trade the best price match?
        //         }
        //     ]
        //
        // inverse (swap & future)
        //
        //     [
        //      {
        //         "a": "269772814",
        //         "p": "25864.1",
        //         "q": "3",
        //         "f": "662149354",
        //         "l": "662149355",
        //         "T": "1694209776022",
        //         "m": false,
        //      },
        //     ]
        //
        // recent public trades and historical public trades
        //
        //     [
        //         {
        //             "id": 28457,
        //             "price": "4.00000100",
        //             "qty": "12.00000000",
        //             "time": 1499865549590,
        //             "isBuyerMaker": true,
        //             "isBestMatch": true
        //         }
        //     ]
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "id": 1,
        //             "symbol": "ETH-230216-1500-C",
        //             "price": "35.5",
        //             "qty": "0.03",
        //             "quoteQty": "1.065",
        //             "side": 1,
        //             "time": 1676366446072
        //         },
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    /**
     * @method
     * @name binance#editSpotOrder
     * @ignore
     * @description edit a trade order
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#cancel-an-existing-order-and-send-a-new-order-trade
     * @param {string} id cancel order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit' or 'STOP_LOSS' or 'STOP_LOSS_LIMIT' or 'TAKE_PROFIT' or 'TAKE_PROFIT_LIMIT' or 'STOP'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> editSpotOrder(object id, object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " editSpotOrder() does not support "), getValue(market, "type")), " orders")) ;
        }
        object payload = this.editSpotOrderRequest(id, symbol, type, side, amount, price, parameters);
        object response = await this.privatePostOrderCancelReplace(payload);
        //
        // spot
        //
        //     {
        //         "cancelResult": "SUCCESS",
        //         "newOrderResult": "SUCCESS",
        //         "cancelResponse": {
        //             "symbol": "BTCUSDT",
        //             "origClientOrderId": "web_3f6286480b194b079870ac75fb6978b7",
        //             "orderId": 16383156620,
        //             "orderListId": -1,
        //             "clientOrderId": "Azt6foVTTgHPNhqBf41TTt",
        //             "price": "14000.00000000",
        //             "origQty": "0.00110000",
        //             "executedQty": "0.00000000",
        //             "cummulativeQuoteQty": "0.00000000",
        //             "status": "CANCELED",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY"
        //         },
        //         "newOrderResponse": {
        //             "symbol": "BTCUSDT",
        //             "orderId": 16383176297,
        //             "orderListId": -1,
        //             "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
        //             "transactTime": 1670891847932,
        //             "price": "13500.00000000",
        //             "origQty": "0.00085000",
        //             "executedQty": "0.00000000",
        //             "cummulativeQuoteQty": "0.00000000",
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "fills": []
        //         }
        //     }
        //
        object data = this.safeDict(response, "newOrderResponse");
        return this.parseOrder(data, market);
    }

    public virtual object editSpotOrderRequest(object id, object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @ignore
        * @name binance#editSpotOrderRequest
        * @description helper function to build request for editSpotOrder
        * @param {string} id order id to be edited
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit' or 'STOP_LOSS' or 'STOP_LOSS_LIMIT' or 'TAKE_PROFIT' or 'TAKE_PROFIT_LIMIT' or 'STOP'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        * @param {object} params extra parameters specific to the exchange API endpoint
        * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
        * @returns {object} request to be sent to the exchange
        */
        parameters ??= new Dictionary<string, object>();
        object market = this.market(symbol);
        object clientOrderId = this.safeStringN(parameters, new List<object>() {"newClientOrderId", "clientOrderId", "origClientOrderId"});
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "side", ((string)side).ToUpper() },
        };
        object initialUppercaseType = ((string)type).ToUpper();
        object uppercaseType = initialUppercaseType;
        object postOnly = this.isPostOnly(isEqual(initialUppercaseType, "MARKET"), isEqual(initialUppercaseType, "LIMIT_MAKER"), parameters);
        if (isTrue(postOnly))
        {
            uppercaseType = "LIMIT_MAKER";
        }
        ((IDictionary<string,object>)request)["type"] = uppercaseType;
        object stopPrice = this.safeNumber2(parameters, "stopPrice", "triggerPrice");
        if (isTrue(!isEqual(stopPrice, null)))
        {
            if (isTrue(isEqual(uppercaseType, "MARKET")))
            {
                uppercaseType = "STOP_LOSS";
            } else if (isTrue(isEqual(uppercaseType, "LIMIT")))
            {
                uppercaseType = "STOP_LOSS_LIMIT";
            }
        }
        object validOrderTypes = this.safeList(getValue(market, "info"), "orderTypes");
        if (!isTrue(this.inArray(uppercaseType, validOrderTypes)))
        {
            if (isTrue(!isEqual(initialUppercaseType, uppercaseType)))
            {
                throw new InvalidOrder ((string)add(add(add(add(add(this.id, " stopPrice parameter is not allowed for "), symbol), " "), type), " orders")) ;
            } else
            {
                throw new InvalidOrder ((string)add(add(add(add(add(this.id, " "), type), " is not a valid order type for the "), symbol), " market")) ;
            }
        }
        if (isTrue(isEqual(clientOrderId, null)))
        {
            object broker = this.safeDict(this.options, "broker");
            if (isTrue(!isEqual(broker, null)))
            {
                object brokerId = this.safeString(broker, "spot");
                if (isTrue(!isEqual(brokerId, null)))
                {
                    ((IDictionary<string,object>)request)["newClientOrderId"] = add(brokerId, this.uuid22());
                }
            }
        } else
        {
            ((IDictionary<string,object>)request)["newClientOrderId"] = clientOrderId;
        }
        ((IDictionary<string,object>)request)["newOrderRespType"] = this.safeValue(getValue(this.options, "newOrderRespType"), type, "RESULT"); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
        object timeInForceIsRequired = false;
        object priceIsRequired = false;
        object stopPriceIsRequired = false;
        object quantityIsRequired = false;
        if (isTrue(isEqual(uppercaseType, "MARKET")))
        {
            object quoteOrderQty = this.safeBool(this.options, "quoteOrderQty", true);
            if (isTrue(quoteOrderQty))
            {
                object quoteOrderQtyNew = this.safeValue2(parameters, "quoteOrderQty", "cost");
                object precision = getValue(getValue(market, "precision"), "price");
                if (isTrue(!isEqual(quoteOrderQtyNew, null)))
                {
                    ((IDictionary<string,object>)request)["quoteOrderQty"] = this.decimalToPrecision(quoteOrderQtyNew, TRUNCATE, precision, this.precisionMode);
                } else if (isTrue(!isEqual(price, null)))
                {
                    object amountString = this.numberToString(amount);
                    object priceString = this.numberToString(price);
                    object quoteOrderQuantity = Precise.stringMul(amountString, priceString);
                    ((IDictionary<string,object>)request)["quoteOrderQty"] = this.decimalToPrecision(quoteOrderQuantity, TRUNCATE, precision, this.precisionMode);
                } else
                {
                    quantityIsRequired = true;
                }
            } else
            {
                quantityIsRequired = true;
            }
        } else if (isTrue(isEqual(uppercaseType, "LIMIT")))
        {
            priceIsRequired = true;
            timeInForceIsRequired = true;
            quantityIsRequired = true;
        } else if (isTrue(isTrue((isEqual(uppercaseType, "STOP_LOSS"))) || isTrue((isEqual(uppercaseType, "TAKE_PROFIT")))))
        {
            stopPriceIsRequired = true;
            quantityIsRequired = true;
        } else if (isTrue(isTrue((isEqual(uppercaseType, "STOP_LOSS_LIMIT"))) || isTrue((isEqual(uppercaseType, "TAKE_PROFIT_LIMIT")))))
        {
            quantityIsRequired = true;
            stopPriceIsRequired = true;
            priceIsRequired = true;
            timeInForceIsRequired = true;
        } else if (isTrue(isEqual(uppercaseType, "LIMIT_MAKER")))
        {
            priceIsRequired = true;
            quantityIsRequired = true;
        }
        if (isTrue(quantityIsRequired))
        {
            ((IDictionary<string,object>)request)["quantity"] = this.amountToPrecision(symbol, amount);
        }
        if (isTrue(priceIsRequired))
        {
            if (isTrue(isEqual(price, null)))
            {
                throw new InvalidOrder ((string)add(add(add(this.id, " editOrder() requires a price argument for a "), type), " order")) ;
            }
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        if (isTrue(isTrue(timeInForceIsRequired) && isTrue((isEqual(this.safeString(parameters, "timeInForce"), null)))))
        {
            ((IDictionary<string,object>)request)["timeInForce"] = getValue(this.options, "defaultTimeInForce"); // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
        }
        if (isTrue(stopPriceIsRequired))
        {
            if (isTrue(isEqual(stopPrice, null)))
            {
                throw new InvalidOrder ((string)add(add(add(this.id, " editOrder() requires a stopPrice extra param for a "), type), " order")) ;
            } else
            {
                ((IDictionary<string,object>)request)["stopPrice"] = this.priceToPrecision(symbol, stopPrice);
            }
        }
        ((IDictionary<string,object>)request)["cancelReplaceMode"] = "STOP_ON_FAILURE"; // If the cancel request fails, the new order placement will not be attempted.
        object cancelId = this.safeString2(parameters, "cancelNewClientOrderId", "cancelOrigClientOrderId");
        if (isTrue(isEqual(cancelId, null)))
        {
            ((IDictionary<string,object>)request)["cancelOrderId"] = id; // user can provide either cancelOrderId, cancelOrigClientOrderId or cancelOrigClientOrderId
        }
        // remove timeInForce from params because PO is only used by this.isPostOnly and it's not a valid value for Binance
        if (isTrue(isEqual(this.safeString(parameters, "timeInForce"), "PO")))
        {
            parameters = this.omit(parameters, new List<object>() {"timeInForce"});
        }
        parameters = this.omit(parameters, new List<object>() {"quoteOrderQty", "cost", "stopPrice", "newClientOrderId", "clientOrderId", "postOnly"});
        return this.extend(request, parameters);
    }

    public virtual object editContractOrderRequest(object id, object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "contract")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " editContractOrder() does not support "), getValue(market, "type")), " orders")) ;
        }
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "side", ((string)side).ToUpper() },
        };
        object clientOrderId = this.safeStringN(parameters, new List<object>() {"newClientOrderId", "clientOrderId", "origClientOrderId"});
        ((IDictionary<string,object>)request)["orderId"] = id;
        ((IDictionary<string,object>)request)["quantity"] = this.amountToPrecision(symbol, amount);
        if (isTrue(!isEqual(price, null)))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            ((IDictionary<string,object>)request)["origClientOrderId"] = clientOrderId;
        }
        parameters = this.omit(parameters, new List<object>() {"clientOrderId", "newClientOrderId"});
        return request;
    }

    /**
     * @method
     * @name binance#editContractOrder
     * @description edit a trade order
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Order
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Modify-Order
     * @param {string} id cancel order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> editContractOrder(object id, object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = this.editContractOrderRequest(id, symbol, type, side, amount, price, parameters);
        object response = null;
        if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPrivatePutOrder(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPrivatePutOrder(this.extend(request, parameters));
        }
        //
        // swap and future
        //
        //     {
        //         "orderId": 151007482392,
        //         "symbol": "BTCUSDT",
        //         "status": "NEW",
        //         "clientOrderId": "web_pCCGp9AIHjziKLlpGpXI",
        //         "price": "25000",
        //         "avgPrice": "0.00000",
        //         "origQty": "0.001",
        //         "executedQty": "0",
        //         "cumQty": "0",
        //         "cumQuote": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "updateTime": 1684300587845
        //     }
        //
        return this.parseOrder(response, market);
    }

    /**
     * @method
     * @name binance#editOrder
     * @description edit a trade order
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#cancel-an-existing-order-and-send-a-new-order-trade
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Order
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Modify-Order
     * @param {string} id cancel order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> editOrder(object id, object symbol, object type, object side, object amount = null, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (isTrue(getValue(market, "option")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " editOrder() does not support "), getValue(market, "type")), " orders")) ;
        }
        if (isTrue(getValue(market, "spot")))
        {
            return await this.editSpotOrder(id, symbol, type, side, amount, price, parameters);
        } else
        {
            return await this.editContractOrder(id, symbol, type, side, amount, price, parameters);
        }
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "NEW", "open" },
            { "PARTIALLY_FILLED", "open" },
            { "ACCEPTED", "open" },
            { "FILLED", "closed" },
            { "CANCELED", "canceled" },
            { "CANCELLED", "canceled" },
            { "PENDING_CANCEL", "canceling" },
            { "REJECTED", "rejected" },
            { "EXPIRED", "expired" },
            { "EXPIRED_IN_MATCH", "expired" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // spot
        //
        //     {
        //         "symbol": "LTCBTC",
        //         "orderId": 1,
        //         "clientOrderId": "myOrder1",
        //         "price": "0.1",
        //         "origQty": "1.0",
        //         "executedQty": "0.0",
        //         "cummulativeQuoteQty": "0.0",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "stopPrice": "0.0",
        //         "icebergQty": "0.0",
        //         "time": 1499827319559,
        //         "updateTime": 1499827319559,
        //         "isWorking": true
        //     }
        //
        // spot: editOrder
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "orderId": 16383176297,
        //         "orderListId": -1,
        //         "clientOrderId": "x-R4BD3S8222ecb58eb9074fb1be018c",
        //         "transactTime": 1670891847932,
        //         "price": "13500.00000000",
        //         "origQty": "0.00085000",
        //         "executedQty": "0.00000000",
        //         "cummulativeQuoteQty": "0.00000000",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "fills": []
        //     }
        //
        // swap and future: editOrder
        //
        //     {
        //         "orderId": 151007482392,
        //         "symbol": "BTCUSDT",
        //         "status": "NEW",
        //         "clientOrderId": "web_pCCGp9AIHjziKLlpGpXI",
        //         "price": "25000",
        //         "avgPrice": "0.00000",
        //         "origQty": "0.001",
        //         "executedQty": "0",
        //         "cumQty": "0",
        //         "cumQuote": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "updateTime": 1684300587845
        //     }
        //
        // futures
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "orderId": 1,
        //         "clientOrderId": "myOrder1",
        //         "price": "0.1",
        //         "origQty": "1.0",
        //         "executedQty": "1.0",
        //         "cumQuote": "10.0",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "stopPrice": "0.0",
        //         "updateTime": 1499827319559
        //     }
        //
        // createOrder with { "newOrderRespType": "FULL" }
        //
        //     {
        //       "symbol": "BTCUSDT",
        //       "orderId": 5403233939,
        //       "orderListId": -1,
        //       "clientOrderId": "x-R4BD3S825e669e75b6c14f69a2c43e",
        //       "transactTime": 1617151923742,
        //       "price": "0.00000000",
        //       "origQty": "0.00050000",
        //       "executedQty": "0.00050000",
        //       "cummulativeQuoteQty": "29.47081500",
        //       "status": "FILLED",
        //       "timeInForce": "GTC",
        //       "type": "MARKET",
        //       "side": "BUY",
        //       "fills": [
        //         {
        //           "price": "58941.63000000",
        //           "qty": "0.00050000",
        //           "commission": "0.00007050",
        //           "commissionAsset": "BNB",
        //           "tradeId": 737466631
        //         }
        //       ]
        //     }
        //
        // delivery
        //
        //     {
        //       "orderId": "18742727411",
        //       "symbol": "ETHUSD_PERP",
        //       "pair": "ETHUSD",
        //       "status": "FILLED",
        //       "clientOrderId": "x-xcKtGhcu3e2d1503fdd543b3b02419",
        //       "price": "0",
        //       "avgPrice": "4522.14",
        //       "origQty": "1",
        //       "executedQty": "1",
        //       "cumBase": "0.00221134",
        //       "timeInForce": "GTC",
        //       "type": "MARKET",
        //       "reduceOnly": false,
        //       "closePosition": false,
        //       "side": "SELL",
        //       "positionSide": "BOTH",
        //       "stopPrice": "0",
        //       "workingType": "CONTRACT_PRICE",
        //       "priceProtect": false,
        //       "origType": "MARKET",
        //       "time": "1636061952660",
        //       "updateTime": "1636061952660"
        //     }
        //
        // option: createOrder, fetchOrder, fetchOpenOrders, fetchOrders
        //
        //     {
        //         "orderId": 4728833085436977152,
        //         "symbol": "ETH-230211-1500-C",
        //         "price": "10.0",
        //         "quantity": "1.00",
        //         "executedQty": "0.00",
        //         "fee": "0",
        //         "side": "BUY",
        //         "type": "LIMIT",
        //         "timeInForce": "GTC",
        //         "reduceOnly": false,
        //         "postOnly": false,
        //         "createTime": 1676083034462,
        //         "updateTime": 1676083034462,
        //         "status": "ACCEPTED",
        //         "avgPrice": "0",
        //         "source": "API",
        //         "clientOrderId": "",
        //         "priceScale": 1,
        //         "quantityScale": 2,
        //         "optionSide": "CALL",
        //         "quoteAsset": "USDT",
        //         "lastTrade": {"id":"69","time":"1676084430567","price":"24.9","qty":"1.00"},
        //         "mmp": false
        //     }
        //
        // cancelOrders/createOrders
        //
        //     {
        //         "code": -4005,
        //         "msg": "Quantity greater than max quantity."
        //     }
        //
        // createOrder, fetchOpenOrders, fetchOrder, cancelOrder, fetchOrders: portfolio margin linear swap and future
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "side": "BUY",
        //         "executedQty": "0.000",
        //         "orderId": 258649539704,
        //         "goodTillDate": 0,
        //         "avgPrice": "0",
        //         "origQty": "0.010",
        //         "clientOrderId": "x-xcKtGhcu02573c6f15e544e990057b",
        //         "positionSide": "BOTH",
        //         "cumQty": "0.000",
        //         "updateTime": 1707110415436,
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "price": "35000.00",
        //         "cumQuote": "0.00000",
        //         "selfTradePreventionMode": "NONE",
        //         "timeInForce": "GTC",
        //         "status": "NEW"
        //     }
        //
        // createOrder, fetchOpenOrders, fetchOrder, cancelOrder, fetchOrders: portfolio margin inverse swap and future
        //
        //     {
        //         "symbol": "ETHUSD_PERP",
        //         "side": "BUY",
        //         "cumBase": "0",
        //         "executedQty": "0",
        //         "orderId": 71275227732,
        //         "avgPrice": "0.00",
        //         "origQty": "1",
        //         "clientOrderId": "x-xcKtGhcuca5af3acfb5044198c5398",
        //         "positionSide": "BOTH",
        //         "cumQty": "0",
        //         "updateTime": 1707110994334,
        //         "type": "LIMIT",
        //         "pair": "ETHUSD",
        //         "reduceOnly": false,
        //         "price": "2000",
        //         "timeInForce": "GTC",
        //         "status": "NEW"
        //     }
        //
        // createOrder, fetchOpenOrders, fetchOpenOrder: portfolio margin linear swap and future conditional
        //
        //     {
        //         "newClientStrategyId": "x-xcKtGhcu27f109953d6e4dc0974006",
        //         "strategyId": 3645916,
        //         "strategyStatus": "NEW",
        //         "strategyType": "STOP",
        //         "origQty": "0.010",
        //         "price": "35000.00",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "45000.00",
        //         "symbol": "BTCUSDT",
        //         "timeInForce": "GTC",
        //         "bookTime": 1707112625879,
        //         "updateTime": 1707112625879,
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "goodTillDate": 0,
        //         "selfTradePreventionMode": "NONE"
        //     }
        //
        // createOrder, fetchOpenOrders: portfolio margin inverse swap and future conditional
        //
        //     {
        //         "newClientStrategyId": "x-xcKtGhcuc6b86f053bb34933850739",
        //         "strategyId": 1423462,
        //         "strategyStatus": "NEW",
        //         "strategyType": "STOP",
        //         "origQty": "1",
        //         "price": "2000",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "3000",
        //         "symbol": "ETHUSD_PERP",
        //         "timeInForce": "GTC",
        //         "bookTime": 1707113098840,
        //         "updateTime": 1707113098840,
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false
        //     }
        //
        // createOrder, cancelAllOrders, cancelOrder: portfolio margin spot margin
        //
        //     {
        //         "clientOrderId": "x-R4BD3S82e9ef29d8346440f0b28b86",
        //         "cummulativeQuoteQty": "0.00000000",
        //         "executedQty": "0.00000000",
        //         "fills": [],
        //         "orderId": 24684460474,
        //         "origQty": "0.00100000",
        //         "price": "35000.00000000",
        //         "selfTradePreventionMode": "EXPIRE_MAKER",
        //         "side": "BUY",
        //         "status": "NEW",
        //         "symbol": "BTCUSDT",
        //         "timeInForce": "GTC",
        //         "transactTime": 1707113538870,
        //         "type": "LIMIT"
        //     }
        //
        // fetchOpenOrders, fetchOrder, fetchOrders: portfolio margin spot margin
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "orderId": 24700763749,
        //         "clientOrderId": "x-R4BD3S826f724c2a4af6425f98c7b6",
        //         "price": "35000.00000000",
        //         "origQty": "0.00100000",
        //         "executedQty": "0.00000000",
        //         "cummulativeQuoteQty": "0.00000000",
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //         "stopPrice": "0.00000000",
        //         "icebergQty": "0.00000000",
        //         "time": 1707199187679,
        //         "updateTime": 1707199187679,
        //         "isWorking": true,
        //         "accountId": 200180970,
        //         "selfTradePreventionMode": "EXPIRE_MAKER",
        //         "preventedMatchId": null,
        //         "preventedQuantity": null
        //     }
        //
        // cancelOrder: portfolio margin linear and inverse swap conditional
        //
        //     {
        //         "strategyId": 3733211,
        //         "newClientStrategyId": "x-xcKtGhcuaf166172ed504cd1bc0396",
        //         "strategyType": "STOP",
        //         "strategyStatus": "CANCELED",
        //         "origQty": "0.010",
        //         "price": "35000.00",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "50000.00", // ignored with trailing orders
        //         "symbol": "BTCUSDT",
        //         "timeInForce": "GTC",
        //         "activatePrice": null,  // only return with trailing orders
        //         "priceRate": null,      // only return with trailing orders
        //         "bookTime": 1707270098774,
        //         "updateTime": 1707270119261,
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "goodTillDate": 0,
        //         "selfTradePreventionMode": "NONE"
        //     }
        //
        // fetchOrders: portfolio margin linear and inverse swap conditional
        //
        //     {
        //         "newClientStrategyId": "x-xcKtGhcuaf166172ed504cd1bc0396",
        //         "strategyId": 3733211,
        //         "strategyStatus": "CANCELLED",
        //         "strategyType": "STOP",
        //         "origQty": "0.010",
        //         "price": "35000",
        //         "orderId": 0,
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "50000",
        //         "symbol": "BTCUSDT",
        //         "type": "LIMIT",
        //         "bookTime": 1707270098774,
        //         "updateTime": 1707270119261,
        //         "timeInForce": "GTC",
        //         "triggerTime": 0,
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "goodTillDate": 0,
        //         "selfTradePreventionMode": "NONE"
        //     }
        //
        // fetchOpenOrder: linear swap
        //
        //     {
        //         "orderId": 3697213934,
        //         "symbol": "BTCUSDT",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcufb20c5a7761a4aa09aa156",
        //         "price": "33000.00",
        //         "avgPrice": "0.00000",
        //         "origQty": "0.010",
        //         "executedQty": "0.000",
        //         "cumQuote": "0.00000",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0.00",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "priceMatch": "NONE",
        //         "selfTradePreventionMode": "NONE",
        //         "goodTillDate": 0,
        //         "time": 1707892893502,
        //         "updateTime": 1707892893515
        //     }
        //
        // fetchOpenOrder: inverse swap
        //
        //     {
        //         "orderId": 597368542,
        //         "symbol": "BTCUSD_PERP",
        //         "pair": "BTCUSD",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcubbde7ba93b1a4ab881eff3",
        //         "price": "35000",
        //         "avgPrice": "0",
        //         "origQty": "1",
        //         "executedQty": "0",
        //         "cumBase": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "time": 1707893453199,
        //         "updateTime": 1707893453199
        //     }
        //
        // fetchOpenOrder: linear portfolio margin
        //
        //     {
        //         "orderId": 264895013409,
        //         "symbol": "BTCUSDT",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcu6278f1adbdf14f74ab432e",
        //         "price": "35000",
        //         "avgPrice": "0",
        //         "origQty": "0.010",
        //         "executedQty": "0",
        //         "cumQuote": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "origType": "LIMIT",
        //         "time": 1707893839364,
        //         "updateTime": 1707893839364,
        //         "goodTillDate": 0,
        //         "selfTradePreventionMode": "NONE"
        //     }
        //
        // fetchOpenOrder: inverse portfolio margin
        //
        //     {
        //         "orderId": 71790316950,
        //         "symbol": "ETHUSD_PERP",
        //         "pair": "ETHUSD",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcuec11030474204ab08ba2c2",
        //         "price": "2500",
        //         "avgPrice": "0",
        //         "origQty": "1",
        //         "executedQty": "0",
        //         "cumBase": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "origType": "LIMIT",
        //         "time": 1707894181694,
        //         "updateTime": 1707894181694
        //     }
        //
        // fetchOpenOrder: inverse portfolio margin conditional
        //
        //     {
        //         "newClientStrategyId": "x-xcKtGhcu2da9c765294b433994ffce",
        //         "strategyId": 1423501,
        //         "strategyStatus": "NEW",
        //         "strategyType": "STOP",
        //         "origQty": "1",
        //         "price": "2500",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "stopPrice": "4000",
        //         "symbol": "ETHUSD_PERP",
        //         "bookTime": 1707894782679,
        //         "updateTime": 1707894782679,
        //         "timeInForce": "GTC",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false
        //     }
        //
        object code = this.safeString(order, "code");
        if (isTrue(!isEqual(code, null)))
        {
            // cancelOrders/createOrders might have a partial success
            return this.safeOrder(new Dictionary<string, object>() {
                { "info", order },
                { "status", "rejected" },
            }, market);
        }
        object status = this.parseOrderStatus(this.safeString2(order, "status", "strategyStatus"));
        object marketId = this.safeString(order, "symbol");
        object isContract = isTrue((inOp(order, "positionSide"))) || isTrue((inOp(order, "cumQuote")));
        object marketType = ((bool) isTrue(isContract)) ? "contract" : "spot";
        object symbol = this.safeSymbol(marketId, market, null, marketType);
        object filled = this.safeString(order, "executedQty", "0");
        object timestamp = this.safeIntegerN(order, new List<object>() {"time", "createTime", "workingTime", "transactTime", "updateTime"}); // order of the keys matters here
        object lastTradeTimestamp = null;
        if (isTrue(isTrue((inOp(order, "transactTime"))) || isTrue((inOp(order, "updateTime")))))
        {
            object timestampValue = this.safeInteger2(order, "updateTime", "transactTime");
            if (isTrue(isEqual(status, "open")))
            {
                if (isTrue(Precise.stringGt(filled, "0")))
                {
                    lastTradeTimestamp = timestampValue;
                }
            } else if (isTrue(isEqual(status, "closed")))
            {
                lastTradeTimestamp = timestampValue;
            }
        }
        object lastUpdateTimestamp = this.safeInteger2(order, "transactTime", "updateTime");
        object average = this.safeString(order, "avgPrice");
        object price = this.safeString(order, "price");
        object amount = this.safeString2(order, "origQty", "quantity");
        // - Spot/Margin market: cummulativeQuoteQty
        // - Futures market: cumQuote.
        //   Note this is not the actual cost, since Binance futures uses leverage to calculate margins.
        object cost = this.safeString2(order, "cummulativeQuoteQty", "cumQuote");
        cost = this.safeString(order, "cumBase", cost);
        object type = this.safeStringLower(order, "type");
        object side = this.safeStringLower(order, "side");
        object fills = this.safeList(order, "fills", new List<object>() {});
        object timeInForce = this.safeString(order, "timeInForce");
        if (isTrue(isEqual(timeInForce, "GTX")))
        {
            // GTX means "Good Till Crossing" and is an equivalent way of saying Post Only
            timeInForce = "PO";
        }
        object postOnly = isTrue((isEqual(type, "limit_maker"))) || isTrue((isEqual(timeInForce, "PO")));
        if (isTrue(isEqual(type, "limit_maker")))
        {
            type = "limit";
        }
        object stopPriceString = this.safeString(order, "stopPrice");
        object stopPrice = this.parseNumber(this.omitZero(stopPriceString));
        object feeCost = this.safeNumber(order, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", this.safeString(order, "quoteAsset") },
                { "cost", feeCost },
                { "rate", null },
            };
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString2(order, "strategyId", "orderId") },
            { "clientOrderId", this.safeString2(order, "clientOrderId", "newClientStrategyId") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", lastTradeTimestamp },
            { "lastUpdateTimestamp", lastUpdateTimestamp },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", timeInForce },
            { "postOnly", postOnly },
            { "reduceOnly", this.safeBool(order, "reduceOnly") },
            { "side", side },
            { "price", price },
            { "triggerPrice", stopPrice },
            { "amount", amount },
            { "cost", cost },
            { "average", average },
            { "filled", filled },
            { "remaining", null },
            { "status", status },
            { "fee", fee },
            { "trades", fills },
        }, market);
    }

    /**
     * @method
     * @name binance#createOrders
     * @description *contract only* create a list of trade orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Place-Multiple-Orders
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Place-Multiple-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Place-Multiple-Orders
     * @param {Array} orders list of orders to create, each object should contain the parameters required by createOrder, namely symbol, type, side, amount, price and params
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createOrders(object orders, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object ordersRequests = new List<object>() {};
        object orderSymbols = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
        {
            object rawOrder = getValue(orders, i);
            object marketId = this.safeString(rawOrder, "symbol");
            ((IList<object>)orderSymbols).Add(marketId);
            object type = this.safeString(rawOrder, "type");
            object side = this.safeString(rawOrder, "side");
            object amount = this.safeValue(rawOrder, "amount");
            object price = this.safeValue(rawOrder, "price");
            object orderParams = this.safeDict(rawOrder, "params", new Dictionary<string, object>() {});
            object orderRequest = this.createOrderRequest(marketId, type, side, amount, price, orderParams);
            ((IList<object>)ordersRequests).Add(orderRequest);
        }
        orderSymbols = this.marketSymbols(orderSymbols, null, false, true, true);
        object market = this.market(getValue(orderSymbols, 0));
        if (isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " createOrders() does not support "), getValue(market, "type")), " orders")) ;
        }
        object response = null;
        object request = new Dictionary<string, object>() {
            { "batchOrders", ordersRequests },
        };
        request = this.extend(request, parameters);
        if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPrivatePostBatchOrders(request);
        } else if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPrivatePostBatchOrders(request);
        } else
        {
            response = await this.dapiPrivatePostBatchOrders(request);
        }
        //
        //   [
        //       {
        //          "code": -4005,
        //          "msg": "Quantity greater than max quantity."
        //       },
        //       {
        //          "orderId": 650640530,
        //          "symbol": "LTCUSDT",
        //          "status": "NEW",
        //          "clientOrderId": "x-xcKtGhcu32184eb13585491289bbaf",
        //          "price": "54.00",
        //          "avgPrice": "0.00",
        //          "origQty": "0.100",
        //          "executedQty": "0.000",
        //          "cumQty": "0.000",
        //          "cumQuote": "0.00000",
        //          "timeInForce": "GTC",
        //          "type": "LIMIT",
        //          "reduceOnly": false,
        //          "closePosition": false,
        //          "side": "BUY",
        //          "positionSide": "BOTH",
        //          "stopPrice": "0.00",
        //          "workingType": "CONTRACT_PRICE",
        //          "priceProtect": false,
        //          "origType": "LIMIT",
        //          "priceMatch": "NONE",
        //          "selfTradePreventionMode": "NONE",
        //          "goodTillDate": 0,
        //          "updateTime": 1698073926929
        //       }
        //   ]
        //
        return this.parseOrders(response);
    }

    /**
     * @method
     * @name binance#createOrder
     * @description create a trade order
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#new-order-trade
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#test-new-order-trade
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/New-Order
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/New-Order
     * @see https://developers.binance.com/docs/derivatives/option/trade/New-Order
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#sor
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#test-new-order-using-sor-trade
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-UM-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-CM-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-Margin-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-UM-Conditional-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/New-CM-Conditional-Order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit' or 'STOP_LOSS' or 'STOP_LOSS_LIMIT' or 'TAKE_PROFIT' or 'TAKE_PROFIT_LIMIT' or 'STOP'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of you want to trade in units of the base currency
     * @param {float} [price] the price that the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.reduceOnly] for swap and future reduceOnly is a string 'true' or 'false' that cant be sent with close position set to true or in hedge mode. For spot margin and option reduceOnly is a boolean.
     * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
     * @param {boolean} [params.sor] *spot only* whether to use SOR (Smart Order Routing) or not, default is false
     * @param {boolean} [params.test] *spot only* whether to use the test endpoint or not, default is false
     * @param {float} [params.trailingPercent] the percent to trail away from the current market price
     * @param {float} [params.trailingTriggerPrice] the price to trigger a trailing order, default uses the price argument
     * @param {float} [params.triggerPrice] the price that a trigger order is triggered at
     * @param {float} [params.stopLossPrice] the price that a stop loss order is triggered at
     * @param {float} [params.takeProfitPrice] the price that a take profit order is triggered at
     * @param {boolean} [params.portfolioMargin] set to true if you would like to create an order in a portfolio margin account
     * @param {string} [params.stopLossOrTakeProfit] 'stopLoss' or 'takeProfit', required for spot trailing orders
     * @param {string} [params.positionSide] *swap and portfolio margin only* "BOTH" for one-way mode, "LONG" for buy side of hedged mode, "SHORT" for sell side of hedged mode
     * @param {bool} [params.hedged] *swap and portfolio margin only* true for hedged mode, false for one way mode, default is false
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object marketType = this.safeString(parameters, "type", getValue(market, "type"));
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("createOrder", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "createOrder", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object triggerPrice = this.safeString2(parameters, "triggerPrice", "stopPrice");
        object stopLossPrice = this.safeString(parameters, "stopLossPrice");
        object takeProfitPrice = this.safeString(parameters, "takeProfitPrice");
        object trailingPercent = this.safeString2(parameters, "trailingPercent", "callbackRate");
        object isTrailingPercentOrder = !isEqual(trailingPercent, null);
        object isStopLoss = !isEqual(stopLossPrice, null);
        object isTakeProfit = !isEqual(takeProfitPrice, null);
        object isConditional = isTrue(isTrue(isTrue((!isEqual(triggerPrice, null))) || isTrue(isTrailingPercentOrder)) || isTrue(isStopLoss)) || isTrue(isTakeProfit);
        object sor = this.safeBool2(parameters, "sor", "SOR", false);
        object test = this.safeBool(parameters, "test", false);
        parameters = this.omit(parameters, new List<object>() {"sor", "SOR", "test"});
        if (isTrue(isPortfolioMargin))
        {
            ((IDictionary<string,object>)parameters)["portfolioMargin"] = isPortfolioMargin;
        }
        object request = this.createOrderRequest(symbol, type, side, amount, price, parameters);
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPrivatePostOrder(request);
        } else if (isTrue(sor))
        {
            if (isTrue(test))
            {
                response = await this.privatePostSorOrderTest(request);
            } else
            {
                response = await this.privatePostSorOrder(request);
            }
        } else if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiPostUmConditionalOrder(request);
                } else
                {
                    response = await this.papiPostUmOrder(request);
                }
            } else
            {
                response = await this.fapiPrivatePostOrder(request);
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiPostCmConditionalOrder(request);
                } else
                {
                    response = await this.papiPostCmOrder(request);
                }
            } else
            {
                response = await this.dapiPrivatePostOrder(request);
            }
        } else if (isTrue(isTrue(isTrue(isEqual(marketType, "margin")) || isTrue(!isEqual(marginMode, null))) || isTrue(isPortfolioMargin)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiPostMarginOrder(request);
            } else
            {
                response = await this.sapiPostMarginOrder(request);
            }
        } else
        {
            if (isTrue(test))
            {
                response = await this.privatePostOrderTest(request);
            } else
            {
                response = await this.privatePostOrder(request);
            }
        }
        return this.parseOrder(response, market);
    }

    public virtual object createOrderRequest(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @ignore
        * @name binance#createOrderRequest
        * @description helper function to build the request
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much you want to trade in units of the base currency
        * @param {float} [price] the price that the order is to be fulfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} request to be sent to the exchange
        */
        parameters ??= new Dictionary<string, object>();
        object market = this.market(symbol);
        object marketType = this.safeString(parameters, "type", getValue(market, "type"));
        object clientOrderId = this.safeString2(parameters, "newClientOrderId", "clientOrderId");
        object initialUppercaseType = ((string)type).ToUpper();
        object isMarketOrder = isEqual(initialUppercaseType, "MARKET");
        object isLimitOrder = isEqual(initialUppercaseType, "LIMIT");
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "side", ((string)side).ToUpper() },
        };
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "createOrder", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("createOrder", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object reduceOnly = this.safeBool(parameters, "reduceOnly", false);
        if (isTrue(isTrue(isTrue((isEqual(marketType, "margin"))) || isTrue((!isEqual(marginMode, null)))) || isTrue(getValue(market, "option"))))
        {
            // for swap and future reduceOnly is a string that cant be sent with close position set to true or in hedge mode
            parameters = this.omit(parameters, "reduceOnly");
            if (isTrue(getValue(market, "option")))
            {
                ((IDictionary<string,object>)request)["reduceOnly"] = reduceOnly;
            } else
            {
                if (isTrue(reduceOnly))
                {
                    ((IDictionary<string,object>)request)["sideEffectType"] = "AUTO_REPAY";
                }
            }
        }
        object triggerPrice = this.safeString2(parameters, "triggerPrice", "stopPrice");
        object stopLossPrice = this.safeString(parameters, "stopLossPrice", triggerPrice); // fallback to stopLoss
        object takeProfitPrice = this.safeString(parameters, "takeProfitPrice");
        object trailingDelta = this.safeString(parameters, "trailingDelta");
        object trailingTriggerPrice = this.safeString2(parameters, "trailingTriggerPrice", "activationPrice");
        object trailingPercent = this.safeStringN(parameters, new List<object>() {"trailingPercent", "callbackRate", "trailingDelta"});
        object priceMatch = this.safeString(parameters, "priceMatch");
        object isTrailingPercentOrder = !isEqual(trailingPercent, null);
        object isStopLoss = isTrue(!isEqual(stopLossPrice, null)) || isTrue(!isEqual(trailingDelta, null));
        object isTakeProfit = !isEqual(takeProfitPrice, null);
        object isTriggerOrder = !isEqual(triggerPrice, null);
        object isConditional = isTrue(isTrue(isTrue(isTriggerOrder) || isTrue(isTrailingPercentOrder)) || isTrue(isStopLoss)) || isTrue(isTakeProfit);
        object isPortfolioMarginConditional = (isTrue(isPortfolioMargin) && isTrue(isConditional));
        object isPriceMatch = !isEqual(priceMatch, null);
        object uppercaseType = ((string)type).ToUpper();
        object stopPrice = null;
        if (isTrue(isTrailingPercentOrder))
        {
            if (isTrue(getValue(market, "swap")))
            {
                uppercaseType = "TRAILING_STOP_MARKET";
                ((IDictionary<string,object>)request)["callbackRate"] = trailingPercent;
                if (isTrue(!isEqual(trailingTriggerPrice, null)))
                {
                    ((IDictionary<string,object>)request)["activationPrice"] = this.priceToPrecision(symbol, trailingTriggerPrice);
                }
            } else
            {
                if (isTrue(isMarketOrder))
                {
                    throw new InvalidOrder ((string)add(add(add(add(add(this.id, " trailingPercent orders are not supported for "), symbol), " "), type), " orders")) ;
                }
                object stopLossOrTakeProfit = this.safeString(parameters, "stopLossOrTakeProfit");
                parameters = this.omit(parameters, "stopLossOrTakeProfit");
                if (isTrue(isTrue(!isEqual(stopLossOrTakeProfit, "stopLoss")) && isTrue(!isEqual(stopLossOrTakeProfit, "takeProfit"))))
                {
                    throw new InvalidOrder ((string)add(add(this.id, symbol), " trailingPercent orders require a stopLossOrTakeProfit parameter of either stopLoss or takeProfit")) ;
                }
                if (isTrue(isEqual(stopLossOrTakeProfit, "stopLoss")))
                {
                    uppercaseType = "STOP_LOSS_LIMIT";
                } else if (isTrue(isEqual(stopLossOrTakeProfit, "takeProfit")))
                {
                    uppercaseType = "TAKE_PROFIT_LIMIT";
                }
                if (isTrue(!isEqual(trailingTriggerPrice, null)))
                {
                    stopPrice = this.priceToPrecision(symbol, trailingTriggerPrice);
                }
                object trailingPercentConverted = Precise.stringMul(trailingPercent, "100");
                ((IDictionary<string,object>)request)["trailingDelta"] = trailingPercentConverted;
            }
        } else if (isTrue(isStopLoss))
        {
            stopPrice = stopLossPrice;
            if (isTrue(isMarketOrder))
            {
                // spot STOP_LOSS market orders are not a valid order type
                uppercaseType = ((bool) isTrue(getValue(market, "contract"))) ? "STOP_MARKET" : "STOP_LOSS";
            } else if (isTrue(isLimitOrder))
            {
                uppercaseType = ((bool) isTrue(getValue(market, "contract"))) ? "STOP" : "STOP_LOSS_LIMIT";
            }
        } else if (isTrue(isTakeProfit))
        {
            stopPrice = takeProfitPrice;
            if (isTrue(isMarketOrder))
            {
                // spot TAKE_PROFIT market orders are not a valid order type
                uppercaseType = ((bool) isTrue(getValue(market, "contract"))) ? "TAKE_PROFIT_MARKET" : "TAKE_PROFIT";
            } else if (isTrue(isLimitOrder))
            {
                uppercaseType = ((bool) isTrue(getValue(market, "contract"))) ? "TAKE_PROFIT" : "TAKE_PROFIT_LIMIT";
            }
        }
        if (isTrue(getValue(market, "option")))
        {
            if (isTrue(isEqual(type, "market")))
            {
                throw new InvalidOrder ((string)add(add(add(add(add(this.id, " "), type), " is not a valid order type for the "), symbol), " market")) ;
            }
        } else
        {
            object validOrderTypes = this.safeList(getValue(market, "info"), "orderTypes");
            if (!isTrue(this.inArray(uppercaseType, validOrderTypes)))
            {
                if (isTrue(!isEqual(initialUppercaseType, uppercaseType)))
                {
                    throw new InvalidOrder ((string)add(add(add(add(add(this.id, " stopPrice parameter is not allowed for "), symbol), " "), type), " orders")) ;
                } else
                {
                    throw new InvalidOrder ((string)add(add(add(add(add(this.id, " "), type), " is not a valid order type for the "), symbol), " market")) ;
                }
            }
        }
        object clientOrderIdRequest = ((bool) isTrue(isPortfolioMarginConditional)) ? "newClientStrategyId" : "newClientOrderId";
        if (isTrue(isEqual(clientOrderId, null)))
        {
            object broker = this.safeDict(this.options, "broker", new Dictionary<string, object>() {});
            object defaultId = ((bool) isTrue((getValue(market, "contract")))) ? "x-xcKtGhcu" : "x-R4BD3S82";
            object brokerId = this.safeString(broker, marketType, defaultId);
            ((IDictionary<string,object>)request)[(string)clientOrderIdRequest] = add(brokerId, this.uuid22());
        } else
        {
            ((IDictionary<string,object>)request)[(string)clientOrderIdRequest] = clientOrderId;
        }
        object postOnly = null;
        if (!isTrue(isPortfolioMargin))
        {
            postOnly = this.isPostOnly(isMarketOrder, isEqual(initialUppercaseType, "LIMIT_MAKER"), parameters);
            if (isTrue(isTrue(getValue(market, "spot")) || isTrue(isEqual(marketType, "margin"))))
            {
                // only supported for spot/margin api (all margin markets are spot markets)
                if (isTrue(postOnly))
                {
                    uppercaseType = "LIMIT_MAKER";
                }
                if (isTrue(isEqual(marginMode, "isolated")))
                {
                    ((IDictionary<string,object>)request)["isIsolated"] = true;
                }
            }
        } else
        {
            postOnly = this.isPostOnly(isMarketOrder, isEqual(initialUppercaseType, "LIMIT_MAKER"), parameters);
            if (isTrue(postOnly))
            {
                if (!isTrue(getValue(market, "contract")))
                {
                    uppercaseType = "LIMIT_MAKER";
                } else
                {
                    ((IDictionary<string,object>)request)["timeInForce"] = "GTX";
                }
            }
        }
        // handle newOrderRespType response type
        if (isTrue(isTrue((isTrue((isEqual(marketType, "spot"))) || isTrue((isEqual(marketType, "margin"))))) && !isTrue(isPortfolioMargin)))
        {
            ((IDictionary<string,object>)request)["newOrderRespType"] = this.safeString(getValue(this.options, "newOrderRespType"), type, "FULL"); // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
        } else
        {
            // swap, futures and options
            ((IDictionary<string,object>)request)["newOrderRespType"] = "RESULT"; // "ACK", "RESULT", default "ACK"
        }
        object typeRequest = ((bool) isTrue(isPortfolioMarginConditional)) ? "strategyType" : "type";
        ((IDictionary<string,object>)request)[(string)typeRequest] = uppercaseType;
        // additional required fields depending on the order type
        object timeInForceIsRequired = false;
        object priceIsRequired = false;
        object stopPriceIsRequired = false;
        object quantityIsRequired = false;
        //
        // spot/margin
        //
        //     LIMIT                timeInForce, quantity, price
        //     MARKET               quantity or quoteOrderQty
        //     STOP_LOSS            quantity, stopPrice
        //     STOP_LOSS_LIMIT      timeInForce, quantity, price, stopPrice
        //     TAKE_PROFIT          quantity, stopPrice
        //     TAKE_PROFIT_LIMIT    timeInForce, quantity, price, stopPrice
        //     LIMIT_MAKER          quantity, price
        //
        // futures
        //
        //     LIMIT                timeInForce, quantity, price
        //     MARKET               quantity
        //     STOP/TAKE_PROFIT     quantity, price, stopPrice
        //     STOP_MARKET          stopPrice
        //     TAKE_PROFIT_MARKET   stopPrice
        //     TRAILING_STOP_MARKET callbackRate
        //
        if (isTrue(isEqual(uppercaseType, "MARKET")))
        {
            if (isTrue(getValue(market, "spot")))
            {
                object quoteOrderQty = this.safeBool(this.options, "quoteOrderQty", true);
                if (isTrue(quoteOrderQty))
                {
                    object quoteOrderQtyNew = this.safeString2(parameters, "quoteOrderQty", "cost");
                    object precision = getValue(getValue(market, "precision"), "price");
                    if (isTrue(!isEqual(quoteOrderQtyNew, null)))
                    {
                        ((IDictionary<string,object>)request)["quoteOrderQty"] = this.decimalToPrecision(quoteOrderQtyNew, TRUNCATE, precision, this.precisionMode);
                    } else if (isTrue(!isEqual(price, null)))
                    {
                        object amountString = this.numberToString(amount);
                        object priceString = this.numberToString(price);
                        object quoteOrderQuantity = Precise.stringMul(amountString, priceString);
                        ((IDictionary<string,object>)request)["quoteOrderQty"] = this.decimalToPrecision(quoteOrderQuantity, TRUNCATE, precision, this.precisionMode);
                    } else
                    {
                        quantityIsRequired = true;
                    }
                } else
                {
                    quantityIsRequired = true;
                }
            } else
            {
                quantityIsRequired = true;
            }
        } else if (isTrue(isEqual(uppercaseType, "LIMIT")))
        {
            priceIsRequired = true;
            timeInForceIsRequired = true;
            quantityIsRequired = true;
        } else if (isTrue(isTrue((isEqual(uppercaseType, "STOP_LOSS"))) || isTrue((isEqual(uppercaseType, "TAKE_PROFIT")))))
        {
            stopPriceIsRequired = true;
            quantityIsRequired = true;
            if (isTrue(isTrue(getValue(market, "linear")) || isTrue(getValue(market, "inverse"))))
            {
                priceIsRequired = true;
            }
        } else if (isTrue(isTrue((isEqual(uppercaseType, "STOP_LOSS_LIMIT"))) || isTrue((isEqual(uppercaseType, "TAKE_PROFIT_LIMIT")))))
        {
            quantityIsRequired = true;
            stopPriceIsRequired = true;
            priceIsRequired = true;
            timeInForceIsRequired = true;
        } else if (isTrue(isEqual(uppercaseType, "LIMIT_MAKER")))
        {
            priceIsRequired = true;
            quantityIsRequired = true;
        } else if (isTrue(isEqual(uppercaseType, "STOP")))
        {
            quantityIsRequired = true;
            stopPriceIsRequired = true;
            priceIsRequired = true;
        } else if (isTrue(isTrue((isEqual(uppercaseType, "STOP_MARKET"))) || isTrue((isEqual(uppercaseType, "TAKE_PROFIT_MARKET")))))
        {
            object closePosition = this.safeBool(parameters, "closePosition");
            if (isTrue(isEqual(closePosition, null)))
            {
                quantityIsRequired = true;
            }
            stopPriceIsRequired = true;
        } else if (isTrue(isEqual(uppercaseType, "TRAILING_STOP_MARKET")))
        {
            quantityIsRequired = true;
            if (isTrue(isEqual(trailingPercent, null)))
            {
                throw new InvalidOrder ((string)add(add(add(this.id, " createOrder() requires a trailingPercent param for a "), type), " order")) ;
            }
        }
        if (isTrue(quantityIsRequired))
        {
            // portfolio margin has a different amount precision
            if (isTrue(isPortfolioMargin))
            {
                ((IDictionary<string,object>)request)["quantity"] = this.parseToNumeric(amount);
            } else
            {
                object marketAmountPrecision = this.safeString(getValue(market, "precision"), "amount");
                object isPrecisionAvailable = (!isEqual(marketAmountPrecision, null));
                if (isTrue(isPrecisionAvailable))
                {
                    ((IDictionary<string,object>)request)["quantity"] = this.amountToPrecision(symbol, amount);
                } else
                {
                    ((IDictionary<string,object>)request)["quantity"] = this.parseToNumeric(amount); // some options don't have the precision available
                }
            }
        }
        if (isTrue(isTrue(priceIsRequired) && !isTrue(isPriceMatch)))
        {
            if (isTrue(isEqual(price, null)))
            {
                throw new InvalidOrder ((string)add(add(add(this.id, " createOrder() requires a price argument for a "), type), " order")) ;
            }
            object pricePrecision = this.safeString(getValue(market, "precision"), "price");
            object isPricePrecisionAvailable = (!isEqual(pricePrecision, null));
            if (isTrue(isPricePrecisionAvailable))
            {
                ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            } else
            {
                ((IDictionary<string,object>)request)["price"] = this.parseToNumeric(price); // some options don't have the precision available
            }
        }
        if (isTrue(stopPriceIsRequired))
        {
            if (isTrue(getValue(market, "contract")))
            {
                if (isTrue(isEqual(stopPrice, null)))
                {
                    throw new InvalidOrder ((string)add(add(add(this.id, " createOrder() requires a stopPrice extra param for a "), type), " order")) ;
                }
            } else
            {
                // check for delta price as well
                if (isTrue(isTrue(isTrue(isEqual(trailingDelta, null)) && isTrue(isEqual(stopPrice, null))) && isTrue(isEqual(trailingPercent, null))))
                {
                    throw new InvalidOrder ((string)add(add(add(this.id, " createOrder() requires a stopPrice, trailingDelta or trailingPercent param for a "), type), " order")) ;
                }
            }
            if (isTrue(!isEqual(stopPrice, null)))
            {
                ((IDictionary<string,object>)request)["stopPrice"] = this.priceToPrecision(symbol, stopPrice);
            }
        }
        if (isTrue(isTrue(isTrue(timeInForceIsRequired) && isTrue((isEqual(this.safeString(parameters, "timeInForce"), null)))) && isTrue((isEqual(this.safeString(request, "timeInForce"), null)))))
        {
            ((IDictionary<string,object>)request)["timeInForce"] = getValue(this.options, "defaultTimeInForce"); // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
        }
        if (isTrue(isTrue(!isTrue(isPortfolioMargin) && isTrue(getValue(market, "contract"))) && isTrue(postOnly)))
        {
            ((IDictionary<string,object>)request)["timeInForce"] = "GTX";
        }
        // remove timeInForce from params because PO is only used by this.isPostOnly and it's not a valid value for Binance
        if (isTrue(isEqual(this.safeString(parameters, "timeInForce"), "PO")))
        {
            parameters = this.omit(parameters, "timeInForce");
        }
        object hedged = this.safeBool(parameters, "hedged", false);
        if (isTrue(isTrue(!isTrue(getValue(market, "spot")) && !isTrue(getValue(market, "option"))) && isTrue(hedged)))
        {
            if (isTrue(reduceOnly))
            {
                parameters = this.omit(parameters, "reduceOnly");
                side = ((bool) isTrue((isEqual(side, "buy")))) ? "sell" : "buy";
            }
            ((IDictionary<string,object>)request)["positionSide"] = ((bool) isTrue((isEqual(side, "buy")))) ? "LONG" : "SHORT";
        }
        object requestParams = this.omit(parameters, new List<object>() {"type", "newClientOrderId", "clientOrderId", "postOnly", "stopLossPrice", "takeProfitPrice", "stopPrice", "triggerPrice", "trailingTriggerPrice", "trailingPercent", "quoteOrderQty", "cost", "test", "hedged"});
        return this.extend(request, requestParams);
    }

    /**
     * @method
     * @name binance#createMarketOrderWithCost
     * @description create a market order by providing the symbol, side and cost
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#new-order-trade
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} side 'buy' or 'sell'
     * @param {float} cost how much you want to trade in units of the quote currency
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createMarketOrderWithCost(object symbol, object side, object cost, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(this.id, " createMarketOrderWithCost() supports spot orders only")) ;
        }
        ((IDictionary<string,object>)parameters)["cost"] = cost;
        return await this.createOrder(symbol, "market", side, cost, null, parameters);
    }

    /**
     * @method
     * @name binance#createMarketBuyOrderWithCost
     * @description create a market buy order by providing the symbol and cost
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#new-order-trade
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {float} cost how much you want to trade in units of the quote currency
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createMarketBuyOrderWithCost(object symbol, object cost, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(this.id, " createMarketBuyOrderWithCost() supports spot orders only")) ;
        }
        ((IDictionary<string,object>)parameters)["cost"] = cost;
        return await this.createOrder(symbol, "market", "buy", cost, null, parameters);
    }

    /**
     * @method
     * @name binance#createMarketSellOrderWithCost
     * @description create a market sell order by providing the symbol and cost
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#new-order-trade
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {float} cost how much you want to trade in units of the quote currency
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createMarketSellOrderWithCost(object symbol, object cost, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(this.id, " createMarketSellOrderWithCost() supports spot orders only")) ;
        }
        ((IDictionary<string,object>)parameters)["quoteOrderQty"] = cost;
        return await this.createOrder(symbol, "market", "sell", cost, null, parameters);
    }

    /**
     * @method
     * @name binance#fetchOrder
     * @description fetches information on an order made by the user
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#query-order-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Query-Order
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Query-Order
     * @see https://developers.binance.com/docs/derivatives/option/trade/Query-Single-Order
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-UM-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-CM-Order
     * @param {string} id the order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch an order in a portfolio margin account
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object defaultType = this.safeString2(this.options, "fetchOrder", "defaultType", "spot");
        object type = this.safeString(parameters, "type", defaultType);
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("fetchOrder", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchOrder", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object clientOrderId = this.safeString2(parameters, "origClientOrderId", "clientOrderId");
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            if (isTrue(getValue(market, "option")))
            {
                ((IDictionary<string,object>)request)["clientOrderId"] = clientOrderId;
            } else
            {
                ((IDictionary<string,object>)request)["origClientOrderId"] = clientOrderId;
            }
        } else
        {
            ((IDictionary<string,object>)request)["orderId"] = id;
        }
        parameters = this.omit(parameters, new List<object>() {"type", "clientOrderId", "origClientOrderId"});
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPrivateGetOrder(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmOrder(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivateGetOrder(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmOrder(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivateGetOrder(this.extend(request, parameters));
            }
        } else if (isTrue(isTrue(isTrue((isEqual(type, "margin"))) || isTrue((!isEqual(marginMode, null)))) || isTrue(isPortfolioMargin)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetMarginOrder(this.extend(request, parameters));
            } else
            {
                if (isTrue(isEqual(marginMode, "isolated")))
                {
                    ((IDictionary<string,object>)request)["isIsolated"] = true;
                }
                response = await this.sapiGetMarginOrder(this.extend(request, parameters));
            }
        } else
        {
            response = await this.privateGetOrder(this.extend(request, parameters));
        }
        return this.parseOrder(response, market);
    }

    /**
     * @method
     * @name binance#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#all-orders-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/All-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/All-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Query-Option-Order-History
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-All-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Conditional-Orders
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
     * @param {int} [params.until] the latest time in ms to fetch orders for
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch orders in a portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to fetch portfolio margin account stop or conditional orders
     * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchOrders", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDynamic("fetchOrders", symbol, since, limit, parameters);
        }
        object market = this.market(symbol);
        object defaultType = this.safeString2(this.options, "fetchOrders", "defaultType", getValue(market, "type"));
        object type = this.safeString(parameters, "type", defaultType);
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("fetchOrders", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchOrders", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object isConditional = this.safeBoolN(parameters, new List<object>() {"stop", "trigger", "conditional"});
        parameters = this.omit(parameters, new List<object>() {"stop", "trigger", "conditional", "type"});
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        var requestparametersVariable = this.handleUntilOption("endTime", request, parameters);
        request = ((IList<object>)requestparametersVariable)[0];
        parameters = ((IList<object>)requestparametersVariable)[1];
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPrivateGetHistoryOrders(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiGetUmConditionalAllOrders(this.extend(request, parameters));
                } else
                {
                    response = await this.papiGetUmAllOrders(this.extend(request, parameters));
                }
            } else
            {
                response = await this.fapiPrivateGetAllOrders(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiGetCmConditionalAllOrders(this.extend(request, parameters));
                } else
                {
                    response = await this.papiGetCmAllOrders(this.extend(request, parameters));
                }
            } else
            {
                response = await this.dapiPrivateGetAllOrders(this.extend(request, parameters));
            }
        } else
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetMarginAllOrders(this.extend(request, parameters));
            } else if (isTrue(isTrue(isEqual(type, "margin")) || isTrue(!isEqual(marginMode, null))))
            {
                if (isTrue(isEqual(marginMode, "isolated")))
                {
                    ((IDictionary<string,object>)request)["isIsolated"] = true;
                }
                response = await this.sapiGetMarginAllOrders(this.extend(request, parameters));
            } else
            {
                response = await this.privateGetAllOrders(this.extend(request, parameters));
            }
        }
        //
        //  spot
        //
        //     [
        //         {
        //             "symbol": "LTCBTC",
        //             "orderId": 1,
        //             "clientOrderId": "myOrder1",
        //             "price": "0.1",
        //             "origQty": "1.0",
        //             "executedQty": "0.0",
        //             "cummulativeQuoteQty": "0.0",
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "stopPrice": "0.0",
        //             "icebergQty": "0.0",
        //             "time": 1499827319559,
        //             "updateTime": 1499827319559,
        //             "isWorking": true
        //         }
        //     ]
        //
        //  futures
        //
        //     [
        //         {
        //             "symbol": "BTCUSDT",
        //             "orderId": 1,
        //             "clientOrderId": "myOrder1",
        //             "price": "0.1",
        //             "origQty": "1.0",
        //             "executedQty": "1.0",
        //             "cumQuote": "10.0",
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "stopPrice": "0.0",
        //             "updateTime": 1499827319559
        //         }
        //     ]
        //
        // options
        //
        //     [
        //         {
        //             "orderId": 4728833085436977152,
        //             "symbol": "ETH-230211-1500-C",
        //             "price": "10.0",
        //             "quantity": "1.00",
        //             "executedQty": "0.00",
        //             "fee": "0",
        //             "side": "BUY",
        //             "type": "LIMIT",
        //             "timeInForce": "GTC",
        //             "reduceOnly": false,
        //             "postOnly": false,
        //             "createTime": 1676083034462,
        //             "updateTime": 1676083034462,
        //             "status": "ACCEPTED",
        //             "avgPrice": "0",
        //             "source": "API",
        //             "clientOrderId": "",
        //             "priceScale": 1,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "quoteAsset": "USDT",
        //             "lastTrade": {"id":"69","time":"1676084430567","price":"24.9","qty":"1.00"},
        //             "mmp": false
        //         }
        //     ]
        //
        // inverse portfolio margin
        //
        //     [
        //         {
        //             "orderId": 71328442983,
        //             "symbol": "ETHUSD_PERP",
        //             "pair": "ETHUSD",
        //             "status": "CANCELED",
        //             "clientOrderId": "x-xcKtGhcu4b3e3d8515dd4dc5ba9ccc",
        //             "price": "2000",
        //             "avgPrice": "0.00",
        //             "origQty": "1",
        //             "executedQty": "0",
        //             "cumBase": "0",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "reduceOnly": false,
        //             "side": "BUY",
        //             "origType": "LIMIT",
        //             "time": 1707197843046,
        //             "updateTime": 1707197941373,
        //             "positionSide": "BOTH"
        //         },
        //     ]
        //
        // linear portfolio margin
        //
        //     [
        //         {
        //             "orderId": 259235347005,
        //             "symbol": "BTCUSDT",
        //             "status": "CANCELED",
        //             "clientOrderId": "x-xcKtGhcu402881c9103f42bdb4183b",
        //             "price": "35000",
        //             "avgPrice": "0.00000",
        //             "origQty": "0.010",
        //             "executedQty": "0",
        //             "cumQuote": "0",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "reduceOnly": false,
        //             "side": "BUY",
        //             "origType": "LIMIT",
        //             "time": 1707194702167,
        //             "updateTime": 1707197804748,
        //             "positionSide": "BOTH",
        //             "selfTradePreventionMode": "NONE",
        //             "goodTillDate": 0
        //         },
        //     ]
        //
        // conditional portfolio margin
        //
        //     [
        //         {
        //             "newClientStrategyId": "x-xcKtGhcuaf166172ed504cd1bc0396",
        //             "strategyId": 3733211,
        //             "strategyStatus": "CANCELLED",
        //             "strategyType": "STOP",
        //             "origQty": "0.010",
        //             "price": "35000",
        //             "orderId": 0,
        //             "reduceOnly": false,
        //             "side": "BUY",
        //             "positionSide": "BOTH",
        //             "stopPrice": "50000",
        //             "symbol": "BTCUSDT",
        //             "type": "LIMIT",
        //             "bookTime": 1707270098774,
        //             "updateTime": 1707270119261,
        //             "timeInForce": "GTC",
        //             "triggerTime": 0,
        //             "workingType": "CONTRACT_PRICE",
        //             "priceProtect": false,
        //             "goodTillDate": 0,
        //             "selfTradePreventionMode": "NONE"
        //         },
        //     ]
        //
        // spot margin portfolio margin
        //
        //     [
        //         {
        //             "symbol": "BTCUSDT",
        //             "orderId": 24684460474,
        //             "clientOrderId": "x-R4BD3S82e9ef29d8346440f0b28b86",
        //             "price": "35000.00000000",
        //             "origQty": "0.00100000",
        //             "executedQty": "0.00000000",
        //             "cummulativeQuoteQty": "0.00000000",
        //             "status": "CANCELED",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "stopPrice": "0.00000000",
        //             "icebergQty": "0.00000000",
        //             "time": 1707113538870,
        //             "updateTime": 1707113797688,
        //             "isWorking": true,
        //             "accountId": 200180970,
        //             "selfTradePreventionMode": "EXPIRE_MAKER",
        //             "preventedMatchId": null,
        //             "preventedQuantity": null
        //         },
        //     ]
        //
        return this.parseOrders(response, market, since, limit);
    }

    /**
     * @method
     * @name binance#fetchOpenOrders
     * @description fetch all unfilled currently open orders
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#current-open-orders-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Current-All-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Current-All-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Query-Current-Open-Option-Orders
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-UM-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-UM-Open-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-CM-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-Current-CM-Open-Conditional-Orders
     * @param {string} symbol unified market symbol
     * @param {int} [since] the earliest time in ms to fetch open orders for
     * @param {int} [limit] the maximum number of open orders structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch open orders in the portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to fetch portfolio margin account conditional orders
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object type = null;
        object request = new Dictionary<string, object>() {};
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("fetchOpenOrders", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchOpenOrders", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object isConditional = this.safeBoolN(parameters, new List<object>() {"stop", "trigger", "conditional"});
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
            object defaultType = this.safeString2(this.options, "fetchOpenOrders", "defaultType", "spot");
            object marketType = ((bool) isTrue((inOp(market, "type")))) ? getValue(market, "type") : defaultType;
            type = this.safeString(parameters, "type", marketType);
        } else if (isTrue(getValue(this.options, "warnOnFetchOpenOrdersWithoutSymbol")))
        {
            throw new ExchangeError ((string)add(add(add(this.id, " fetchOpenOrders() WARNING: fetching open orders without specifying a symbol has stricter rate limits (10 times more for spot, 40 times more for other markets) compared to requesting with symbol argument. To acknowledge this warning, set "), this.id), ".options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.")) ;
        } else
        {
            object defaultType = this.safeString2(this.options, "fetchOpenOrders", "defaultType", "spot");
            type = this.safeString(parameters, "type", defaultType);
        }
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchOpenOrders", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        parameters = this.omit(parameters, new List<object>() {"type", "stop", "trigger", "conditional"});
        object response = null;
        if (isTrue(isEqual(type, "option")))
        {
            if (isTrue(!isEqual(since, null)))
            {
                ((IDictionary<string,object>)request)["startTime"] = since;
            }
            if (isTrue(!isEqual(limit, null)))
            {
                ((IDictionary<string,object>)request)["limit"] = limit;
            }
            response = await this.eapiPrivateGetOpenOrders(this.extend(request, parameters));
        } else if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiGetUmConditionalOpenOrders(this.extend(request, parameters));
                } else
                {
                    response = await this.papiGetUmOpenOrders(this.extend(request, parameters));
                }
            } else
            {
                response = await this.fapiPrivateGetOpenOrders(this.extend(request, parameters));
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiGetCmConditionalOpenOrders(this.extend(request, parameters));
                } else
                {
                    response = await this.papiGetCmOpenOrders(this.extend(request, parameters));
                }
            } else
            {
                response = await this.dapiPrivateGetOpenOrders(this.extend(request, parameters));
            }
        } else if (isTrue(isTrue(isTrue(isEqual(type, "margin")) || isTrue(!isEqual(marginMode, null))) || isTrue(isPortfolioMargin)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetMarginOpenOrders(this.extend(request, parameters));
            } else
            {
                if (isTrue(isEqual(marginMode, "isolated")))
                {
                    ((IDictionary<string,object>)request)["isIsolated"] = true;
                    if (isTrue(isEqual(symbol, null)))
                    {
                        throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument for isolated markets")) ;
                    }
                }
                response = await this.sapiGetMarginOpenOrders(this.extend(request, parameters));
            }
        } else
        {
            response = await this.privateGetOpenOrders(this.extend(request, parameters));
        }
        return this.parseOrders(response, market, since, limit);
    }

    /**
     * @method
     * @name binance#fetchOpenOrder
     * @description fetch an open order by the id
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Query-Current-Open-Order
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Query-Current-Open-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-UM-Open-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-UM-Open-Conditional-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-CM-Open-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Current-CM-Open-Conditional-Order
     * @param {string} id order id
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.trigger] set to true if you would like to fetch portfolio margin account stop or conditional orders
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> fetchOpenOrder(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchOpenOrder", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object isConditional = this.safeBoolN(parameters, new List<object>() {"stop", "trigger", "conditional"});
        parameters = this.omit(parameters, new List<object>() {"stop", "trigger", "conditional"});
        object isPortfolioMarginConditional = (isTrue(isPortfolioMargin) && isTrue(isConditional));
        object orderIdRequest = ((bool) isTrue(isPortfolioMarginConditional)) ? "strategyId" : "orderId";
        ((IDictionary<string,object>)request)[(string)orderIdRequest] = id;
        object response = null;
        if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiGetUmConditionalOpenOrder(this.extend(request, parameters));
                } else
                {
                    response = await this.papiGetUmOpenOrder(this.extend(request, parameters));
                }
            } else
            {
                response = await this.fapiPrivateGetOpenOrder(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiGetCmConditionalOpenOrder(this.extend(request, parameters));
                } else
                {
                    response = await this.papiGetCmOpenOrder(this.extend(request, parameters));
                }
            } else
            {
                response = await this.dapiPrivateGetOpenOrder(this.extend(request, parameters));
            }
        } else
        {
            if (isTrue(getValue(market, "option")))
            {
                throw new NotSupported ((string)add(this.id, " fetchOpenOrder() does not support option markets")) ;
            } else if (isTrue(getValue(market, "spot")))
            {
                throw new NotSupported ((string)add(this.id, " fetchOpenOrder() does not support spot markets")) ;
            }
        }
        //
        // linear swap
        //
        //     {
        //         "orderId": 3697213934,
        //         "symbol": "BTCUSDT",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcufb20c5a7761a4aa09aa156",
        //         "price": "33000.00",
        //         "avgPrice": "0.00000",
        //         "origQty": "0.010",
        //         "executedQty": "0.000",
        //         "cumQuote": "0.00000",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0.00",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "priceMatch": "NONE",
        //         "selfTradePreventionMode": "NONE",
        //         "goodTillDate": 0,
        //         "time": 1707892893502,
        //         "updateTime": 1707892893515
        //     }
        //
        // inverse swap
        //
        //     {
        //         "orderId": 597368542,
        //         "symbol": "BTCUSD_PERP",
        //         "pair": "BTCUSD",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcubbde7ba93b1a4ab881eff3",
        //         "price": "35000",
        //         "avgPrice": "0",
        //         "origQty": "1",
        //         "executedQty": "0",
        //         "cumBase": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "BUY",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "time": 1707893453199,
        //         "updateTime": 1707893453199
        //     }
        //
        // linear portfolio margin
        //
        //     {
        //         "orderId": 264895013409,
        //         "symbol": "BTCUSDT",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcu6278f1adbdf14f74ab432e",
        //         "price": "35000",
        //         "avgPrice": "0",
        //         "origQty": "0.010",
        //         "executedQty": "0",
        //         "cumQuote": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "origType": "LIMIT",
        //         "time": 1707893839364,
        //         "updateTime": 1707893839364,
        //         "goodTillDate": 0,
        //         "selfTradePreventionMode": "NONE"
        //     }
        //
        // inverse portfolio margin
        //
        //     {
        //         "orderId": 71790316950,
        //         "symbol": "ETHUSD_PERP",
        //         "pair": "ETHUSD",
        //         "status": "NEW",
        //         "clientOrderId": "x-xcKtGhcuec11030474204ab08ba2c2",
        //         "price": "2500",
        //         "avgPrice": "0",
        //         "origQty": "1",
        //         "executedQty": "0",
        //         "cumBase": "0",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "origType": "LIMIT",
        //         "time": 1707894181694,
        //         "updateTime": 1707894181694
        //     }
        //
        // linear portfolio margin conditional
        //
        //     {
        //         "newClientStrategyId": "x-xcKtGhcu2205fde44418483ca21874",
        //         "strategyId": 4084339,
        //         "strategyStatus": "NEW",
        //         "strategyType": "STOP",
        //         "origQty": "0.010",
        //         "price": "35000",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "stopPrice": "60000",
        //         "symbol": "BTCUSDT",
        //         "bookTime": 1707894490094,
        //         "updateTime": 1707894490094,
        //         "timeInForce": "GTC",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "goodTillDate": 0,
        //         "selfTradePreventionMode": "NONE"
        //     }
        //
        // inverse portfolio margin conditional
        //
        //     {
        //         "newClientStrategyId": "x-xcKtGhcu2da9c765294b433994ffce",
        //         "strategyId": 1423501,
        //         "strategyStatus": "NEW",
        //         "strategyType": "STOP",
        //         "origQty": "1",
        //         "price": "2500",
        //         "reduceOnly": false,
        //         "side": "BUY",
        //         "positionSide": "LONG",
        //         "stopPrice": "4000",
        //         "symbol": "ETHUSD_PERP",
        //         "bookTime": 1707894782679,
        //         "updateTime": 1707894782679,
        //         "timeInForce": "GTC",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false
        //     }
        //
        return this.parseOrder(response, market);
    }

    /**
     * @method
     * @name binance#fetchClosedOrders
     * @description fetches information on multiple closed orders made by the user
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#all-orders-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/All-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/All-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Query-Option-Order-History
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-All-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Conditional-Orders
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch orders in a portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to fetch portfolio margin account stop or conditional orders
     * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchClosedOrders() requires a symbol argument")) ;
        }
        object orders = await this.fetchOrders(symbol, since, null, parameters);
        object filteredOrders = this.filterBy(orders, "status", "closed");
        return this.filterBySinceLimit(filteredOrders, since, limit);
    }

    /**
     * @method
     * @name binance#fetchCanceledOrders
     * @description fetches information on multiple canceled orders made by the user
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#all-orders-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/All-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/All-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Query-Option-Order-History
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-All-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Conditional-Orders
     * @param {string} symbol unified market symbol of the market the orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch orders in a portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to fetch portfolio margin account stop or conditional orders
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> fetchCanceledOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchCanceledOrders() requires a symbol argument")) ;
        }
        object orders = await this.fetchOrders(symbol, since, null, parameters);
        object filteredOrders = this.filterBy(orders, "status", "canceled");
        return this.filterBySinceLimit(filteredOrders, since, limit);
    }

    /**
     * @method
     * @name binance#fetchCanceledAndClosedOrders
     * @description fetches information on multiple canceled orders made by the user
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#all-orders-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/All-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/All-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Query-Option-Order-History
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-All-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-UM-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-All-CM-Conditional-Orders
     * @param {string} symbol unified market symbol of the market the orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch orders in a portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to fetch portfolio margin account stop or conditional orders
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchCanceledAndClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchCanceledAndClosedOrders() requires a symbol argument")) ;
        }
        object orders = await this.fetchOrders(symbol, since, null, parameters);
        object canceledOrders = this.filterBy(orders, "status", "canceled");
        object closedOrders = this.filterBy(orders, "status", "closed");
        object filteredOrders = this.arrayConcat(canceledOrders, closedOrders);
        object sortedOrders = this.sortBy(filteredOrders, "timestamp");
        return this.filterBySinceLimit(sortedOrders, since, limit);
    }

    /**
     * @method
     * @name binance#cancelOrder
     * @description cancels an open order
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#cancel-order-trade
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Cancel-Order
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Cancel-Order
     * @see https://developers.binance.com/docs/derivatives/option/trade/Cancel-Option-Order
     * @see https://developers.binance.com/docs/margin_trading/trade/Margin-Account-Cancel-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-UM-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-CM-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-UM-Conditional-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-CM-Conditional-Order
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-Margin-Account-Order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to cancel an order in a portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to cancel a portfolio margin account conditional order
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object defaultType = this.safeString2(this.options, "cancelOrder", "defaultType", "spot");
        object type = this.safeString(parameters, "type", defaultType);
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("cancelOrder", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "cancelOrder", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object isConditional = this.safeBoolN(parameters, new List<object>() {"stop", "trigger", "conditional"});
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object clientOrderId = this.safeStringN(parameters, new List<object>() {"origClientOrderId", "clientOrderId", "newClientStrategyId"});
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            if (isTrue(getValue(market, "option")))
            {
                ((IDictionary<string,object>)request)["clientOrderId"] = clientOrderId;
            } else
            {
                if (isTrue(isTrue(isPortfolioMargin) && isTrue(isConditional)))
                {
                    ((IDictionary<string,object>)request)["newClientStrategyId"] = clientOrderId;
                } else
                {
                    ((IDictionary<string,object>)request)["origClientOrderId"] = clientOrderId;
                }
            }
        } else
        {
            if (isTrue(isTrue(isPortfolioMargin) && isTrue(isConditional)))
            {
                ((IDictionary<string,object>)request)["strategyId"] = id;
            } else
            {
                ((IDictionary<string,object>)request)["orderId"] = id;
            }
        }
        parameters = this.omit(parameters, new List<object>() {"type", "origClientOrderId", "clientOrderId", "newClientStrategyId", "stop", "trigger", "conditional"});
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPrivateDeleteOrder(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiDeleteUmConditionalOrder(this.extend(request, parameters));
                } else
                {
                    response = await this.papiDeleteUmOrder(this.extend(request, parameters));
                }
            } else
            {
                response = await this.fapiPrivateDeleteOrder(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiDeleteCmConditionalOrder(this.extend(request, parameters));
                } else
                {
                    response = await this.papiDeleteCmOrder(this.extend(request, parameters));
                }
            } else
            {
                response = await this.dapiPrivateDeleteOrder(this.extend(request, parameters));
            }
        } else if (isTrue(isTrue(isTrue((isEqual(type, "margin"))) || isTrue((!isEqual(marginMode, null)))) || isTrue(isPortfolioMargin)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiDeleteMarginOrder(this.extend(request, parameters));
            } else
            {
                if (isTrue(isEqual(marginMode, "isolated")))
                {
                    ((IDictionary<string,object>)request)["isIsolated"] = true;
                }
                response = await this.sapiDeleteMarginOrder(this.extend(request, parameters));
            }
        } else
        {
            response = await this.privateDeleteOrder(this.extend(request, parameters));
        }
        return this.parseOrder(response, market);
    }

    /**
     * @method
     * @name binance#cancelAllOrders
     * @description cancel all open orders in a market
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#cancel-all-open-orders-on-a-symbol-trade
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Cancel-All-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/option/trade/Cancel-all-Option-orders-on-specific-symbol
     * @see https://developers.binance.com/docs/margin_trading/trade/Margin-Account-Cancel-All-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-UM-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-UM-Open-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-CM-Open-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-All-CM-Open-Conditional-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Cancel-Margin-Account-All-Open-Orders-on-a-Symbol
     * @param {string} symbol unified market symbol of the market to cancel orders in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.marginMode] 'cross' or 'isolated', for spot margin trading
     * @param {boolean} [params.portfolioMargin] set to true if you would like to cancel orders in a portfolio margin account
     * @param {boolean} [params.stop] set to true if you would like to cancel portfolio margin account conditional orders
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelAllOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "cancelAllOrders", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object isConditional = this.safeBoolN(parameters, new List<object>() {"stop", "trigger", "conditional"});
        object type = this.safeString(parameters, "type", getValue(market, "type"));
        parameters = this.omit(parameters, new List<object>() {"type", "stop", "trigger", "conditional"});
        object marginMode = null;
        var marginModeparametersVariable = this.handleMarginModeAndParams("cancelAllOrders", parameters);
        marginMode = ((IList<object>)marginModeparametersVariable)[0];
        parameters = ((IList<object>)marginModeparametersVariable)[1];
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPrivateDeleteAllOpenOrders(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiDeleteUmConditionalAllOpenOrders(this.extend(request, parameters));
                } else
                {
                    response = await this.papiDeleteUmAllOpenOrders(this.extend(request, parameters));
                }
            } else
            {
                response = await this.fapiPrivateDeleteAllOpenOrders(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                if (isTrue(isConditional))
                {
                    response = await this.papiDeleteCmConditionalAllOpenOrders(this.extend(request, parameters));
                } else
                {
                    response = await this.papiDeleteCmAllOpenOrders(this.extend(request, parameters));
                }
            } else
            {
                response = await this.dapiPrivateDeleteAllOpenOrders(this.extend(request, parameters));
            }
        } else if (isTrue(isTrue(isTrue((isEqual(type, "margin"))) || isTrue((!isEqual(marginMode, null)))) || isTrue(isPortfolioMargin)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiDeleteMarginAllOpenOrders(this.extend(request, parameters));
            } else
            {
                if (isTrue(isEqual(marginMode, "isolated")))
                {
                    ((IDictionary<string,object>)request)["isIsolated"] = true;
                }
                response = await this.sapiDeleteMarginOpenOrders(this.extend(request, parameters));
            }
        } else
        {
            response = await this.privateDeleteOpenOrders(this.extend(request, parameters));
        }
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            return this.parseOrders(response, market);
        } else
        {
            return new List<object> {this.safeOrder(new Dictionary<string, object>() {
    { "info", response },
})};
        }
    }

    /**
     * @method
     * @name binance#cancelOrders
     * @description cancel multiple orders
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Cancel-Multiple-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Cancel-Multiple-Orders
     * @param {string[]} ids order ids
     * @param {string} [symbol] unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     *
     * EXCHANGE SPECIFIC PARAMETERS
     * @param {string[]} [params.origClientOrderIdList] max length 10 e.g. ["my_id_1","my_id_2"], encode the double quotes. No space after comma
     * @param {int[]} [params.recvWindow]
     * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> cancelOrders(object ids, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "contract")))
        {
            throw new BadRequest ((string)add(this.id, " cancelOrders is only supported for swap markets.")) ;
        }
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "orderidlist", ids },
        };
        object response = null;
        if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPrivateDeleteBatchOrders(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPrivateDeleteBatchOrders(this.extend(request, parameters));
        }
        //
        //    [
        //        {
        //            "clientOrderId": "myOrder1",
        //            "cumQty": "0",
        //            "cumQuote": "0",
        //            "executedQty": "0",
        //            "orderId": 283194212,
        //            "origQty": "11",
        //            "origType": "TRAILING_STOP_MARKET",
        //            "price": "0",
        //            "reduceOnly": false,
        //            "side": "BUY",
        //            "positionSide": "SHORT",
        //            "status": "CANCELED",
        //            "stopPrice": "9300",                  // please ignore when order type is TRAILING_STOP_MARKET
        //            "closePosition": false,               // if Close-All
        //            "symbol": "BTCUSDT",
        //            "timeInForce": "GTC",
        //            "type": "TRAILING_STOP_MARKET",
        //            "activatePrice": "9020",              // activation price, only return with TRAILING_STOP_MARKET order
        //            "priceRate": "0.3",                   // callback rate, only return with TRAILING_STOP_MARKET order
        //            "updateTime": 1571110484038,
        //            "workingType": "CONTRACT_PRICE",
        //            "priceProtect": false,                // if conditional order trigger is protected
        //            "priceMatch": "NONE",                 // price match mode
        //            "selfTradePreventionMode": "NONE",    // self trading preventation mode
        //            "goodTillDate": 0                     // order pre-set auot cancel time for TIF GTD order
        //        },
        //        {
        //            "code": -2011,
        //            "msg": "Unknown order sent."
        //        }
        //    ]
        //
        return this.parseOrders(response, market);
    }

    /**
     * @method
     * @name binance#fetchOrderTrades
     * @description fetch all the trades made from a single order
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#account-trade-list-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Account-Trade-List
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Account-Trade-List
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Trade-List
     * @param {string} id order id
     * @param {string} symbol unified market symbol
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trades to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrderTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object type = this.safeString(parameters, "type", getValue(market, "type"));
        parameters = this.omit(parameters, "type");
        if (isTrue(!isEqual(type, "spot")))
        {
            throw new NotSupported ((string)add(this.id, " fetchOrderTrades() supports spot markets only")) ;
        }
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        return await this.fetchMyTrades(symbol, since, limit, this.extend(request, parameters));
    }

    /**
     * @method
     * @name binance#fetchMyTrades
     * @description fetch all trades made by the user
     * @see https://developers.binance.com/docs/binance-spot-api-docs/rest-api#account-trade-list-user_data
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Account-Trade-List
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Account-Trade-List
     * @see https://developers.binance.com/docs/margin_trading/trade/Query-Margin-Account-Trade-List
     * @see https://developers.binance.com/docs/derivatives/option/trade/Account-Trade-List
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/UM-Account-Trade-List
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/CM-Account-Trade-List
     * @param {string} symbol unified market symbol
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trades structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {int} [params.until] the latest time in ms to fetch entries for
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch trades for a portfolio margin account
     * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchMyTrades", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDynamic("fetchMyTrades", symbol, since, limit, parameters);
        }
        object request = new Dictionary<string, object>() {};
        object market = null;
        object type = null;
        object marginMode = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchMyTrades", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object endTime = this.safeInteger2(parameters, "until", "endTime");
        if (isTrue(!isEqual(since, null)))
        {
            object startTime = since;
            ((IDictionary<string,object>)request)["startTime"] = startTime;
            // If startTime and endTime are both not sent, then the last 7 days' data will be returned.
            // The time between startTime and endTime cannot be longer than 7 days.
            // The parameter fromId cannot be sent with startTime or endTime.
            object currentTimestamp = this.milliseconds();
            object oneWeek = multiply(multiply(multiply(multiply(7, 24), 60), 60), 1000);
            if (isTrue(isGreaterThanOrEqual((subtract(currentTimestamp, startTime)), oneWeek)))
            {
                if (isTrue(isTrue((isEqual(endTime, null))) && isTrue(getValue(market, "linear"))))
                {
                    endTime = this.sum(startTime, oneWeek);
                    endTime = mathMin(endTime, currentTimestamp);
                }
            }
        }
        if (isTrue(!isEqual(endTime, null)))
        {
            ((IDictionary<string,object>)request)["endTime"] = endTime;
            parameters = this.omit(parameters, new List<object>() {"endTime", "until"});
        }
        if (isTrue(!isEqual(limit, null)))
        {
            if (isTrue(isTrue((isEqual(type, "option"))) || isTrue(getValue(market, "contract"))))
            {
                limit = mathMin(limit, 1000); // above 1000, returns error
            }
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = null;
        if (isTrue(isEqual(type, "option")))
        {
            response = await this.eapiPrivateGetUserTrades(this.extend(request, parameters));
        } else
        {
            if (isTrue(isEqual(symbol, null)))
            {
                throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
            }
            var marginModeparametersVariable = this.handleMarginModeAndParams("fetchMyTrades", parameters);
            marginMode = ((IList<object>)marginModeparametersVariable)[0];
            parameters = ((IList<object>)marginModeparametersVariable)[1];
            object isPortfolioMargin = null;
            var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchMyTrades", "papi", "portfolioMargin", false);
            isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
            parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
            if (isTrue(isTrue(isEqual(type, "spot")) || isTrue(isEqual(type, "margin"))))
            {
                if (isTrue(isPortfolioMargin))
                {
                    response = await this.papiGetMarginMyTrades(this.extend(request, parameters));
                } else if (isTrue(isTrue((isEqual(type, "margin"))) || isTrue((!isEqual(marginMode, null)))))
                {
                    if (isTrue(isEqual(marginMode, "isolated")))
                    {
                        ((IDictionary<string,object>)request)["isIsolated"] = true;
                    }
                    response = await this.sapiGetMarginMyTrades(this.extend(request, parameters));
                } else
                {
                    response = await this.privateGetMyTrades(this.extend(request, parameters));
                }
            } else if (isTrue(getValue(market, "linear")))
            {
                if (isTrue(isPortfolioMargin))
                {
                    response = await this.papiGetUmUserTrades(this.extend(request, parameters));
                } else
                {
                    response = await this.fapiPrivateGetUserTrades(this.extend(request, parameters));
                }
            } else if (isTrue(getValue(market, "inverse")))
            {
                if (isTrue(isPortfolioMargin))
                {
                    response = await this.papiGetCmUserTrades(this.extend(request, parameters));
                } else
                {
                    response = await this.dapiPrivateGetUserTrades(this.extend(request, parameters));
                }
            }
        }
        //
        // spot trade
        //
        //     [
        //         {
        //             "symbol": "BNBBTC",
        //             "id": 28457,
        //             "orderId": 100234,
        //             "price": "4.00000100",
        //             "qty": "12.00000000",
        //             "commission": "10.10000000",
        //             "commissionAsset": "BNB",
        //             "time": 1499865549590,
        //             "isBuyer": true,
        //             "isMaker": false,
        //             "isBestMatch": true,
        //         }
        //     ]
        //
        // futures trade
        //
        //     [
        //         {
        //             "accountId": 20,
        //             "buyer": False,
        //             "commission": "-0.07819010",
        //             "commissionAsset": "USDT",
        //             "counterPartyId": 653,
        //             "id": 698759,
        //             "maker": False,
        //             "orderId": 25851813,
        //             "price": "7819.01",
        //             "qty": "0.002",
        //             "quoteQty": "0.01563",
        //             "realizedPnl": "-0.91539999",
        //             "side": "SELL",
        //             "symbol": "BTCUSDT",
        //             "time": 1569514978020
        //         }
        //     ]
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "id": 1125899906844226012,
        //             "tradeId": 73,
        //             "orderId": 4638761100843040768,
        //             "symbol": "ETH-230211-1500-C",
        //             "price": "18.70000000",
        //             "quantity": "-0.57000000",
        //             "fee": "0.17305890",
        //             "realizedProfit": "-3.53400000",
        //             "side": "SELL",
        //             "type": "LIMIT",
        //             "volatility": "0.30000000",
        //             "liquidity": "MAKER",
        //             "time": 1676085216845,
        //             "priceScale": 1,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "quoteAsset": "USDT"
        //         }
        //     ]
        //
        // linear portfolio margin
        //
        //     [
        //         {
        //             "symbol": "BTCUSDT",
        //             "id": 4575108247,
        //             "orderId": 261942655610,
        //             "side": "SELL",
        //             "price": "47263.40",
        //             "qty": "0.010",
        //             "realizedPnl": "27.38400000",
        //             "marginAsset": "USDT",
        //             "quoteQty": "472.63",
        //             "commission": "0.18905360",
        //             "commissionAsset": "USDT",
        //             "time": 1707530039409,
        //             "buyer": false,
        //             "maker": false,
        //             "positionSide": "LONG"
        //         }
        //     ]
        //
        // inverse portfolio margin
        //
        //     [
        //         {
        //             "symbol": "ETHUSD_PERP",
        //             "id": 701907838,
        //             "orderId": 71548909034,
        //             "pair": "ETHUSD",
        //             "side": "SELL",
        //             "price": "2498.15",
        //             "qty": "1",
        //             "realizedPnl": "0.00012517",
        //             "marginAsset": "ETH",
        //             "baseQty": "0.00400296",
        //             "commission": "0.00000160",
        //             "commissionAsset": "ETH",
        //             "time": 1707530317519,
        //             "positionSide": "LONG",
        //             "buyer": false,
        //             "maker": false
        //         }
        //     ]
        //
        // spot margin portfolio margin
        //
        //     [
        //         {
        //             "symbol": "ADAUSDT",
        //             "id": 470227543,
        //             "orderId": 4421170947,
        //             "price": "0.53880000",
        //             "qty": "10.00000000",
        //             "quoteQty": "5.38800000",
        //             "commission": "0.00538800",
        //             "commissionAsset": "USDT",
        //             "time": 1707545780522,
        //             "isBuyer": false,
        //             "isMaker": false,
        //             "isBestMatch": true
        //         }
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    /**
     * @method
     * @name binance#fetchMyDustTrades
     * @description fetch all dust trades made by the user
     * @see https://developers.binance.com/docs/wallet/asset/dust-log
     * @param {string} symbol not used by binance fetchMyDustTrades ()
     * @param {int} [since] the earliest time in ms to fetch my dust trades for
     * @param {int} [limit] the maximum number of dust trades to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.type] 'spot' or 'margin', default spot
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    public async virtual Task<object> fetchMyDustTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        //
        // Binance provides an opportunity to trade insignificant (i.e. non-tradable and non-withdrawable)
        // token leftovers (of any asset) into `BNB` coin which in turn can be used to pay trading fees with it.
        // The corresponding trades history is called the `Dust Log` and can be requested via the following end-point:
        // https://github.com/binance-exchange/binance-official-api-docs/blob/master/wapi-api.md#dustlog-user_data
        //
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
            ((IDictionary<string,object>)request)["endTime"] = this.sum(since, 7776000000);
        }
        object accountType = this.safeStringUpper(parameters, "type");
        parameters = this.omit(parameters, "type");
        if (isTrue(!isEqual(accountType, null)))
        {
            ((IDictionary<string,object>)request)["accountType"] = accountType;
        }
        object response = await this.sapiGetAssetDribblet(this.extend(request, parameters));
        //     {
        //       "total": "4",
        //       "userAssetDribblets": [
        //         {
        //           "operateTime": "1627575731000",
        //           "totalServiceChargeAmount": "0.00001453",
        //           "totalTransferedAmount": "0.00072693",
        //           "transId": "70899815863",
        //           "userAssetDribbletDetails": [
        //             {
        //               "fromAsset": "LTC",
        //               "amount": "0.000006",
        //               "transferedAmount": "0.00000267",
        //               "serviceChargeAmount": "0.00000005",
        //               "operateTime": "1627575731000",
        //               "transId": "70899815863"
        //             },
        //             {
        //               "fromAsset": "GBP",
        //               "amount": "0.15949157",
        //               "transferedAmount": "0.00072426",
        //               "serviceChargeAmount": "0.00001448",
        //               "operateTime": "1627575731000",
        //               "transId": "70899815863"
        //             }
        //           ]
        //         },
        //       ]
        //     }
        object results = this.safeList(response, "userAssetDribblets", new List<object>() {});
        object rows = this.safeInteger(response, "total", 0);
        object data = new List<object>() {};
        for (object i = 0; isLessThan(i, rows); postFixIncrement(ref i))
        {
            object logs = this.safeList(getValue(results, i), "userAssetDribbletDetails", new List<object>() {});
            for (object j = 0; isLessThan(j, getArrayLength(logs)); postFixIncrement(ref j))
            {
                ((IDictionary<string,object>)getValue(logs, j))["isDustTrade"] = true;
                ((IList<object>)data).Add(getValue(logs, j));
            }
        }
        object trades = this.parseTrades(data, null, since, limit);
        return this.filterBySinceLimit(trades, since, limit);
    }

    public virtual object parseDustTrade(object trade, object market = null)
    {
        //
        //     {
        //       "fromAsset": "USDT",
        //       "amount": "0.009669",
        //       "transferedAmount": "0.00002992",
        //       "serviceChargeAmount": "0.00000059",
        //       "operateTime": "1628076010000",
        //       "transId": "71416578712",
        //       "isDustTrade": true
        //     }
        //
        object orderId = this.safeString(trade, "transId");
        object timestamp = this.safeInteger(trade, "operateTime");
        object currencyId = this.safeString(trade, "fromAsset");
        object tradedCurrency = this.safeCurrencyCode(currencyId);
        object bnb = this.currency("BNB");
        object earnedCurrency = getValue(bnb, "code");
        object applicantSymbol = add(add(earnedCurrency, "/"), tradedCurrency);
        object tradedCurrencyIsQuote = false;
        if (isTrue(inOp(this.markets, applicantSymbol)))
        {
            tradedCurrencyIsQuote = true;
        }
        object feeCostString = this.safeString(trade, "serviceChargeAmount");
        object fee = new Dictionary<string, object>() {
            { "currency", earnedCurrency },
            { "cost", this.parseNumber(feeCostString) },
        };
        object symbol = null;
        object amountString = null;
        object costString = null;
        object side = null;
        if (isTrue(tradedCurrencyIsQuote))
        {
            symbol = applicantSymbol;
            amountString = this.safeString(trade, "transferedAmount");
            costString = this.safeString(trade, "amount");
            side = "buy";
        } else
        {
            symbol = add(add(tradedCurrency, "/"), earnedCurrency);
            amountString = this.safeString(trade, "amount");
            costString = this.safeString(trade, "transferedAmount");
            side = "sell";
        }
        object priceString = null;
        if (isTrue(!isEqual(costString, null)))
        {
            if (isTrue(amountString))
            {
                priceString = Precise.stringDiv(costString, amountString);
            }
        }
        object id = null;
        object amount = this.parseNumber(amountString);
        object price = this.parseNumber(priceString);
        object cost = this.parseNumber(costString);
        object type = null;
        object takerOrMaker = null;
        return new Dictionary<string, object>() {
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "order", orderId },
            { "type", type },
            { "takerOrMaker", takerOrMaker },
            { "side", side },
            { "amount", amount },
            { "price", price },
            { "cost", cost },
            { "fee", fee },
            { "info", trade },
        };
    }

    /**
     * @method
     * @name binance#fetchDeposits
     * @description fetch all deposits made to an account
     * @see https://developers.binance.com/docs/wallet/capital/deposite-history
     * @see https://developers.binance.com/docs/fiat/rest-api/Get-Fiat-Deposit-Withdraw-History
     * @param {string} code unified currency code
     * @param {int} [since] the earliest time in ms to fetch deposits for
     * @param {int} [limit] the maximum number of deposits structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {bool} [params.fiat] if true, only fiat deposits will be returned
     * @param {int} [params.until] the latest time in ms to fetch entries for
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchDeposits", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDynamic("fetchDeposits", code, since, limit, parameters);
        }
        object currency = null;
        object response = null;
        object request = new Dictionary<string, object>() {};
        object legalMoney = this.safeDict(this.options, "legalMoney", new Dictionary<string, object>() {});
        object fiatOnly = this.safeBool(parameters, "fiat", false);
        parameters = this.omit(parameters, "fiatOnly");
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, "until");
        if (isTrue(isTrue(fiatOnly) || isTrue((inOp(legalMoney, code)))))
        {
            if (isTrue(!isEqual(code, null)))
            {
                currency = this.currency(code);
            }
            ((IDictionary<string,object>)request)["transactionType"] = 0;
            if (isTrue(!isEqual(since, null)))
            {
                ((IDictionary<string,object>)request)["beginTime"] = since;
            }
            if (isTrue(!isEqual(until, null)))
            {
                ((IDictionary<string,object>)request)["endTime"] = until;
            }
            object raw = await this.sapiGetFiatOrders(this.extend(request, parameters));
            response = this.safeList(raw, "data", new List<object>() {});
        } else
        {
            if (isTrue(!isEqual(code, null)))
            {
                currency = this.currency(code);
                ((IDictionary<string,object>)request)["coin"] = getValue(currency, "id");
            }
            if (isTrue(!isEqual(since, null)))
            {
                ((IDictionary<string,object>)request)["startTime"] = since;
                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                object endTime = this.sum(since, 7776000000);
                if (isTrue(!isEqual(until, null)))
                {
                    endTime = mathMin(endTime, until);
                }
                ((IDictionary<string,object>)request)["endTime"] = endTime;
            }
            if (isTrue(!isEqual(limit, null)))
            {
                ((IDictionary<string,object>)request)["limit"] = limit;
            }
            response = await this.sapiGetCapitalDepositHisrec(this.extend(request, parameters));
        }
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            ((IDictionary<string,object>)getValue(response, i))["type"] = "deposit";
        }
        return this.parseTransactions(response, currency, since, limit);
    }

    /**
     * @method
     * @name binance#fetchWithdrawals
     * @description fetch all withdrawals made from an account
     * @see https://developers.binance.com/docs/wallet/capital/withdraw-history
     * @see https://developers.binance.com/docs/fiat/rest-api/Get-Fiat-Deposit-Withdraw-History
     * @param {string} code unified currency code
     * @param {int} [since] the earliest time in ms to fetch withdrawals for
     * @param {int} [limit] the maximum number of withdrawals structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {bool} [params.fiat] if true, only fiat withdrawals will be returned
     * @param {int} [params.until] the latest time in ms to fetch withdrawals for
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchWithdrawals", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDynamic("fetchWithdrawals", code, since, limit, parameters);
        }
        object legalMoney = this.safeDict(this.options, "legalMoney", new Dictionary<string, object>() {});
        object fiatOnly = this.safeBool(parameters, "fiat", false);
        parameters = this.omit(parameters, "fiatOnly");
        object request = new Dictionary<string, object>() {};
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, "until");
            ((IDictionary<string,object>)request)["endTime"] = until;
        }
        object response = null;
        object currency = null;
        if (isTrue(isTrue(fiatOnly) || isTrue((inOp(legalMoney, code)))))
        {
            if (isTrue(!isEqual(code, null)))
            {
                currency = this.currency(code);
            }
            ((IDictionary<string,object>)request)["transactionType"] = 1;
            if (isTrue(!isEqual(since, null)))
            {
                ((IDictionary<string,object>)request)["beginTime"] = since;
            }
            object raw = await this.sapiGetFiatOrders(this.extend(request, parameters));
            response = this.safeList(raw, "data", new List<object>() {});
        } else
        {
            if (isTrue(!isEqual(code, null)))
            {
                currency = this.currency(code);
                ((IDictionary<string,object>)request)["coin"] = getValue(currency, "id");
            }
            if (isTrue(!isEqual(since, null)))
            {
                ((IDictionary<string,object>)request)["startTime"] = since;
                // max 3 months range https://github.com/ccxt/ccxt/issues/6495
                ((IDictionary<string,object>)request)["endTime"] = this.sum(since, 7776000000);
            }
            if (isTrue(!isEqual(limit, null)))
            {
                ((IDictionary<string,object>)request)["limit"] = limit;
            }
            response = await this.sapiGetCapitalWithdrawHistory(this.extend(request, parameters));
        }
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            ((IDictionary<string,object>)getValue(response, i))["type"] = "withdrawal";
        }
        return this.parseTransactions(response, currency, since, limit);
    }

    public virtual object parseTransactionStatusByType(object status, object type = null)
    {
        if (isTrue(isEqual(type, null)))
        {
            return status;
        }
        object statusesByType = new Dictionary<string, object>() {
            { "deposit", new Dictionary<string, object>() {
                { "0", "pending" },
                { "1", "ok" },
                { "6", "ok" },
                { "Processing", "pending" },
                { "Failed", "failed" },
                { "Successful", "ok" },
                { "Refunding", "canceled" },
                { "Refunded", "canceled" },
                { "Refund Failed", "failed" },
            } },
            { "withdrawal", new Dictionary<string, object>() {
                { "0", "pending" },
                { "1", "canceled" },
                { "2", "pending" },
                { "3", "failed" },
                { "4", "pending" },
                { "5", "failed" },
                { "6", "ok" },
                { "Processing", "pending" },
                { "Failed", "failed" },
                { "Successful", "ok" },
                { "Refunding", "canceled" },
                { "Refunded", "canceled" },
                { "Refund Failed", "failed" },
            } },
        };
        object statuses = this.safeDict(statusesByType, type, new Dictionary<string, object>() {});
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // fetchDeposits
        //
        //     {
        //       "amount": "4500",
        //       "coin": "USDT",
        //       "network": "BSC",
        //       "status": 1,
        //       "address": "0xc9c923c87347ca0f3451d6d308ce84f691b9f501",
        //       "addressTag": "",
        //       "txId": "Internal transfer 51376627901",
        //       "insertTime": 1618394381000,
        //       "transferType": 1,
        //       "confirmTimes": "1/15"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //       "id": "69e53ad305124b96b43668ceab158a18",
        //       "amount": "28.75",
        //       "transactionFee": "0.25",
        //       "coin": "XRP",
        //       "status": 6,
        //       "address": "r3T75fuLjX51mmfb5Sk1kMNuhBgBPJsjza",
        //       "addressTag": "101286922",
        //       "txId": "19A5B24ED0B697E4F0E9CD09FCB007170A605BC93C9280B9E6379C5E6EF0F65A",
        //       "applyTime": "2021-04-15 12:09:16",
        //       "network": "XRP",
        //       "transferType": 0
        //     }
        //
        // fiat transaction
        // withdraw
        //     {
        //       "orderNo": "CJW684897551397171200",
        //       "fiatCurrency": "GBP",
        //       "indicatedAmount": "29.99",
        //       "amount": "28.49",
        //       "totalFee": "1.50",
        //       "method": "bank transfer",
        //       "status": "Successful",
        //       "createTime": 1614898701000,
        //       "updateTime": 1614898820000
        //     }
        //
        // deposit
        //     {
        //       "orderNo": "25ced37075c1470ba8939d0df2316e23",
        //       "fiatCurrency": "EUR",
        //       "transactionType": 0,
        //       "indicatedAmount": "15.00",
        //       "amount": "15.00",
        //       "totalFee": "0.00",
        //       "method": "card",
        //       "status": "Failed",
        //       "createTime": "1627501026000",
        //       "updateTime": "1627501027000"
        //     }
        //
        // withdraw
        //
        //    { id: "9a67628b16ba4988ae20d329333f16bc" }
        //
        object id = this.safeString2(transaction, "id", "orderNo");
        object address = this.safeString(transaction, "address");
        object tag = this.safeString(transaction, "addressTag"); // set but unused
        if (isTrue(!isEqual(tag, null)))
        {
            if (isTrue(isLessThan(((string)tag).Length, 1)))
            {
                tag = null;
            }
        }
        object txid = this.safeString(transaction, "txId");
        if (isTrue(isTrue((!isEqual(txid, null))) && isTrue((isGreaterThanOrEqual(getIndexOf(txid, "Internal transfer "), 0)))))
        {
            txid = slice(txid, 18, null);
        }
        object currencyId = this.safeString2(transaction, "coin", "fiatCurrency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object timestamp = null;
        timestamp = this.safeInteger2(transaction, "insertTime", "createTime");
        if (isTrue(isEqual(timestamp, null)))
        {
            timestamp = this.parse8601(this.safeString(transaction, "applyTime"));
        }
        object updated = this.safeInteger2(transaction, "successTime", "updateTime");
        object type = this.safeString(transaction, "type");
        if (isTrue(isEqual(type, null)))
        {
            object txType = this.safeString(transaction, "transactionType");
            if (isTrue(!isEqual(txType, null)))
            {
                type = ((bool) isTrue((isEqual(txType, "0")))) ? "deposit" : "withdrawal";
            }
            object legalMoneyCurrenciesById = this.safeDict(this.options, "legalMoneyCurrenciesById");
            code = this.safeString(legalMoneyCurrenciesById, code, code);
        }
        object status = this.parseTransactionStatusByType(this.safeString(transaction, "status"), type);
        object amount = this.safeNumber(transaction, "amount");
        object feeCost = this.safeNumber2(transaction, "transactionFee", "totalFee");
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", code },
                { "cost", feeCost },
            };
        }
        object internalInteger = this.safeInteger(transaction, "transferType");
        object intern = null;
        if (isTrue(!isEqual(internalInteger, null)))
        {
            intern = ((bool) isTrue(internalInteger)) ? true : false;
        }
        object network = this.safeString(transaction, "network");
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", txid },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", network },
            { "address", address },
            { "addressTo", address },
            { "addressFrom", null },
            { "tag", tag },
            { "tagTo", tag },
            { "tagFrom", null },
            { "type", type },
            { "amount", amount },
            { "currency", code },
            { "status", status },
            { "updated", updated },
            { "internal", intern },
            { "comment", null },
            { "fee", fee },
        };
    }

    public virtual object parseTransferStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "CONFIRMED", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        // transfer
        //
        //     {
        //         "tranId":13526853623
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         "timestamp": 1614640878000,
        //         "asset": "USDT",
        //         "amount": "25",
        //         "type": "MAIN_UMFUTURE",
        //         "status": "CONFIRMED",
        //         "tranId": 43000126248
        //     }
        //
        //     {
        //             "orderType": "C2C", // Enum：PAY(C2B Merchant Acquiring Payment), PAY_REFUND(C2B Merchant Acquiring Payment,refund), C2C(C2C Transfer Payment),CRYPTO_BOX(Crypto box), CRYPTO_BOX_RF(Crypto Box, refund), C2C_HOLDING(Transfer to new Binance user), C2C_HOLDING_RF(Transfer to new Binance user,refund), PAYOUT(B2C Disbursement Payment), REMITTANCE（Send cash)
        //             "transactionId": "M_P_71505104267788288",
        //             "transactionTime": 1610090460133, //trade timestamp
        //             "amount": "23.72469206", //order amount(up to 8 decimal places), positive is income, negative is expenditure
        //             "currency": "BNB",
        //             "walletType": 1, //main wallet type, 1 for funding wallet, 2 for spot wallet, 3 for fiat wallet, 4 or 6 for card payment, 5 for earn wallet
        //             "walletTypes": [1,2], //array format，there are multiple values when using combination payment
        //             "fundsDetail": [ // details
        //                     {
        //                         "currency": "USDT", //asset
        //                         "amount": "1.2",
        //                         "walletAssetCost":[ //details of asset cost per wallet
        //                             {"1":"0.6"},
        //                             {"2":"0.6"}
        //                         ]
        //                     },
        //                     {
        //                         "currency": "ETH",
        //                         "amount": "0.0001",
        //                         "walletAssetCost":[
        //                             {"1":"0.00005"},
        //                             {"2":"0.00005"}
        //                         ]
        //                     }
        //                 ],
        //             "payerInfo":{
        //                     "name":"Jack", //nickname or merchant name
        //                     "type":"USER", //account type，USER for personal，MERCHANT for merchant
        //                     "binanceId":"12345678", //binance uid
        //                     "accountId":"67736251" //binance pay id
        //                 },
        //             "receiverInfo":{
        //                     "name":"Alan", //nickname or merchant name
        //                     "type":"MERCHANT", //account type，USER for personal，MERCHANT for merchant
        //                     "email":"alan@binance.com", //email
        //                     "binanceId":"34355667", //binance uid
        //                     "accountId":"21326891", //binance pay id
        //                     "countryCode":"1", //International area code
        //                     "phoneNumber":"8057651210",
        //                     "mobileCode":"US", //country code
        //                     "extend":[ //extension field
        //                             "institutionName": "",
        //                             "cardNumber": "",
        //                             "digitalWalletId": ""
        //                     ]
        //                 }
        //             }
        object id = this.safeString2(transfer, "tranId", "transactionId");
        object currencyId = this.safeString2(transfer, "asset", "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object amount = this.safeNumber(transfer, "amount");
        object type = this.safeString(transfer, "type");
        object fromAccount = null;
        object toAccount = null;
        object accountsById = this.safeDict(this.options, "accountsById", new Dictionary<string, object>() {});
        if (isTrue(!isEqual(type, null)))
        {
            object parts = ((string)type).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
            fromAccount = this.safeValue(parts, 0);
            toAccount = this.safeValue(parts, 1);
            fromAccount = this.safeString(accountsById, fromAccount, fromAccount);
            toAccount = this.safeString(accountsById, toAccount, toAccount);
        }
        object walletType = this.safeInteger(transfer, "walletType");
        if (isTrue(!isEqual(walletType, null)))
        {
            object payer = this.safeDict(transfer, "payerInfo", new Dictionary<string, object>() {});
            object receiver = this.safeDict(transfer, "receiverInfo", new Dictionary<string, object>() {});
            fromAccount = this.safeString(payer, "accountId");
            toAccount = this.safeString(receiver, "accountId");
        }
        object timestamp = this.safeInteger2(transfer, "timestamp", "transactionTime");
        object status = this.parseTransferStatus(this.safeString(transfer, "status"));
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "currency", code },
            { "amount", amount },
            { "fromAccount", fromAccount },
            { "toAccount", toAccount },
            { "status", status },
        };
    }

    public override object parseIncome(object income, object market = null)
    {
        //
        //     {
        //       "symbol": "ETHUSDT",
        //       "incomeType": "FUNDING_FEE",
        //       "income": "0.00134317",
        //       "asset": "USDT",
        //       "time": "1621584000000",
        //       "info": "FUNDING_FEE",
        //       "tranId": "4480321991774044580",
        //       "tradeId": ""
        //     }
        //
        object marketId = this.safeString(income, "symbol");
        object currencyId = this.safeString(income, "asset");
        object timestamp = this.safeInteger(income, "time");
        return new Dictionary<string, object>() {
            { "info", income },
            { "symbol", this.safeSymbol(marketId, market, null, "swap") },
            { "code", this.safeCurrencyCode(currencyId) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "id", this.safeString(income, "tranId") },
            { "amount", this.safeNumber(income, "income") },
        };
    }

    /**
     * @method
     * @name binance#transfer
     * @description transfer currency internally between wallets on the same account
     * @see https://developers.binance.com/docs/wallet/asset/user-universal-transfer
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount account to transfer from
     * @param {string} toAccount account to transfer to
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.type] exchange specific transfer type
     * @param {string} [params.symbol] the unified symbol, required for isolated margin transfers
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
        };
        ((IDictionary<string,object>)request)["type"] = this.safeString(parameters, "type");
        parameters = this.omit(parameters, "type");
        if (isTrue(isEqual(getValue(request, "type"), null)))
        {
            object symbol = this.safeString(parameters, "symbol");
            object market = null;
            if (isTrue(!isEqual(symbol, null)))
            {
                market = this.market(symbol);
                parameters = this.omit(parameters, "symbol");
            }
            object fromId = ((string)this.convertTypeToAccount(fromAccount)).ToUpper();
            object toId = ((string)this.convertTypeToAccount(toAccount)).ToUpper();
            object isolatedSymbol = null;
            if (isTrue(!isEqual(market, null)))
            {
                isolatedSymbol = getValue(market, "id");
            }
            if (isTrue(isEqual(fromId, "ISOLATED")))
            {
                if (isTrue(isEqual(symbol, null)))
                {
                    throw new ArgumentsRequired ((string)add(add(this.id, " transfer () requires params[\"symbol\"] when fromAccount is "), fromAccount)) ;
                }
            }
            if (isTrue(isEqual(toId, "ISOLATED")))
            {
                if (isTrue(isEqual(symbol, null)))
                {
                    throw new ArgumentsRequired ((string)add(add(this.id, " transfer () requires params[\"symbol\"] when toAccount is "), toAccount)) ;
                }
            }
            object accountsById = this.safeDict(this.options, "accountsById", new Dictionary<string, object>() {});
            object fromIsolated = !isTrue((inOp(accountsById, fromId)));
            object toIsolated = !isTrue((inOp(accountsById, toId)));
            if (isTrue(isTrue(fromIsolated) && isTrue((isEqual(market, null)))))
            {
                isolatedSymbol = fromId; // allow user provide symbol as the from/to account
            }
            if (isTrue(isTrue(toIsolated) && isTrue((isEqual(market, null)))))
            {
                isolatedSymbol = toId;
            }
            if (isTrue(isTrue(fromIsolated) || isTrue(toIsolated)))
            {
                object fromFuture = isTrue(isEqual(fromId, "UMFUTURE")) || isTrue(isEqual(fromId, "CMFUTURE"));
                object toFuture = isTrue(isEqual(toId, "UMFUTURE")) || isTrue(isEqual(toId, "CMFUTURE"));
                object fromSpot = isEqual(fromId, "MAIN");
                object toSpot = isEqual(toId, "MAIN");
                object funding = isTrue(isEqual(fromId, "FUNDING")) || isTrue(isEqual(toId, "FUNDING"));
                object option = isTrue(isEqual(fromId, "OPTION")) || isTrue(isEqual(toId, "OPTION"));
                object prohibitedWithIsolated = isTrue(isTrue(isTrue(fromFuture) || isTrue(toFuture)) || isTrue(funding)) || isTrue(option);
                if (isTrue(isTrue((isTrue(fromIsolated) || isTrue(toIsolated))) && isTrue(prohibitedWithIsolated)))
                {
                    throw new BadRequest ((string)add(add(add(add(this.id, " transfer () does not allow transfers between "), fromAccount), " and "), toAccount)) ;
                } else if (isTrue(isTrue(toSpot) && isTrue(fromIsolated)))
                {
                    fromId = "ISOLATED_MARGIN";
                    ((IDictionary<string,object>)request)["fromSymbol"] = isolatedSymbol;
                } else if (isTrue(isTrue(fromSpot) && isTrue(toIsolated)))
                {
                    toId = "ISOLATED_MARGIN";
                    ((IDictionary<string,object>)request)["toSymbol"] = isolatedSymbol;
                } else
                {
                    if (isTrue(isTrue(fromIsolated) && isTrue(toIsolated)))
                    {
                        ((IDictionary<string,object>)request)["fromSymbol"] = fromId;
                        ((IDictionary<string,object>)request)["toSymbol"] = toId;
                        fromId = "ISOLATEDMARGIN";
                        toId = "ISOLATEDMARGIN";
                    } else
                    {
                        if (isTrue(fromIsolated))
                        {
                            ((IDictionary<string,object>)request)["fromSymbol"] = isolatedSymbol;
                            fromId = "ISOLATEDMARGIN";
                        }
                        if (isTrue(toIsolated))
                        {
                            ((IDictionary<string,object>)request)["toSymbol"] = isolatedSymbol;
                            toId = "ISOLATEDMARGIN";
                        }
                    }
                }
                ((IDictionary<string,object>)request)["type"] = add(add(fromId, "_"), toId);
            } else
            {
                ((IDictionary<string,object>)request)["type"] = add(add(fromId, "_"), toId);
            }
        }
        object response = await this.sapiPostAssetTransfer(this.extend(request, parameters));
        //
        //     {
        //         "tranId":13526853623
        //     }
        //
        return this.parseTransfer(response, currency);
    }

    /**
     * @method
     * @name binance#fetchTransfers
     * @description fetch a history of internal transfers made on an account
     * @see https://developers.binance.com/docs/wallet/asset/query-user-universal-transfer
     * @param {string} code unified currency code of the currency transferred
     * @param {int} [since] the earliest time in ms to fetch transfers for
     * @param {int} [limit] the maximum number of transfers structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] the latest time in ms to fetch transfers for
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.internal] default false, when true will fetch pay trade history
     * @returns {object[]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    public async override Task<object> fetchTransfers(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object intern = this.safeBool(parameters, "internal");
        parameters = this.omit(parameters, "internal");
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchTransfers", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(isTrue(paginate) && !isTrue(intern)))
        {
            return await this.fetchPaginatedCallDynamic("fetchTransfers", code, since, limit, parameters);
        }
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {};
        object limitKey = "limit";
        if (!isTrue(intern))
        {
            object defaultType = this.safeString2(this.options, "fetchTransfers", "defaultType", "spot");
            object fromAccount = this.safeString(parameters, "fromAccount", defaultType);
            object defaultTo = ((bool) isTrue((isEqual(fromAccount, "future")))) ? "spot" : "future";
            object toAccount = this.safeString(parameters, "toAccount", defaultTo);
            object type = this.safeString(parameters, "type");
            object accountsByType = this.safeDict(this.options, "accountsByType", new Dictionary<string, object>() {});
            object fromId = this.safeString(accountsByType, fromAccount);
            object toId = this.safeString(accountsByType, toAccount);
            if (isTrue(isEqual(type, null)))
            {
                if (isTrue(isEqual(fromId, null)))
                {
                    object keys = new List<object>(((IDictionary<string,object>)accountsByType).Keys);
                    throw new ExchangeError ((string)add(add(this.id, " fromAccount parameter must be one of "), String.Join(", ", ((IList<object>)keys).ToArray()))) ;
                }
                if (isTrue(isEqual(toId, null)))
                {
                    object keys = new List<object>(((IDictionary<string,object>)accountsByType).Keys);
                    throw new ExchangeError ((string)add(add(this.id, " toAccount parameter must be one of "), String.Join(", ", ((IList<object>)keys).ToArray()))) ;
                }
                type = add(add(fromId, "_"), toId);
            }
            ((IDictionary<string,object>)request)["type"] = type;
            limitKey = "size";
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)[(string)limitKey] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, "until");
            ((IDictionary<string,object>)request)["endTime"] = until;
        }
        object response = null;
        if (isTrue(intern))
        {
            response = await this.sapiGetPayTransactions(this.extend(request, parameters));
        } else
        {
            response = await this.sapiGetAssetTransfer(this.extend(request, parameters));
        }
        object rows = this.safeList2(response, "rows", "data", new List<object>() {});
        return this.parseTransfers(rows, currency, since, limit);
    }

    /**
     * @method
     * @name binance#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @see https://developers.binance.com/docs/wallet/capital/deposite-address
     * @param {string} code unified currency code
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.network] network for fetch deposit address
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(currency, "id") },
        };
        object networks = this.safeDict(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            ((IDictionary<string,object>)request)["network"] = network;
            parameters = this.omit(parameters, "network");
        }
        // has support for the 'network' parameter
        object response = await this.sapiGetCapitalDepositAddress(this.extend(request, parameters));
        //
        //     {
        //         "currency": "XRP",
        //         "address": "rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh",
        //         "tag": "108618262",
        //         "info": {
        //             "coin": "XRP",
        //             "address": "rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh",
        //             "tag": "108618262",
        //             "url": "https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh"
        //         }
        //     }
        //
        return this.parseDepositAddress(response, currency);
    }

    public override object parseDepositAddress(object response, object currency = null)
    {
        //
        //     {
        //         "currency": "XRP",
        //         "address": "rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh",
        //         "tag": "108618262",
        //         "info": {
        //             "coin": "XRP",
        //             "address": "rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh",
        //             "tag": "108618262",
        //             "url": "https://bithomp.com/explorer/rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh"
        //         }
        //     }
        //
        object info = this.safeDict(response, "info", new Dictionary<string, object>() {});
        object url = this.safeString(info, "url");
        object address = this.safeString(response, "address");
        object currencyId = this.safeString(response, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object impliedNetwork = null;
        if (isTrue(!isEqual(url, null)))
        {
            object reverseNetworks = this.safeDict(this.options, "reverseNetworks", new Dictionary<string, object>() {});
            object parts = ((string)url).Split(new [] {((string)"/")}, StringSplitOptions.None).ToList<object>();
            object topLevel = this.safeString(parts, 2);
            if (isTrue(isTrue((isEqual(topLevel, "blockchair.com"))) || isTrue((isEqual(topLevel, "viewblock.io")))))
            {
                object subLevel = this.safeString(parts, 3);
                if (isTrue(!isEqual(subLevel, null)))
                {
                    topLevel = add(add(topLevel, "/"), subLevel);
                }
            }
            impliedNetwork = this.safeString(reverseNetworks, topLevel);
            object impliedNetworks = this.safeDict(this.options, "impliedNetworks", new Dictionary<string, object>() {
                { "ETH", new Dictionary<string, object>() {
                    { "ERC20", "ETH" },
                } },
                { "TRX", new Dictionary<string, object>() {
                    { "TRC20", "TRX" },
                } },
            });
            if (isTrue(inOp(impliedNetworks, code)))
            {
                object conversion = this.safeDict(impliedNetworks, code, new Dictionary<string, object>() {});
                impliedNetwork = this.safeString(conversion, impliedNetwork, impliedNetwork);
            }
        }
        object tag = this.safeString(response, "tag", "");
        if (isTrue(isEqual(((string)tag).Length, 0)))
        {
            tag = null;
        }
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "info", response },
            { "currency", code },
            { "network", impliedNetwork },
            { "address", address },
            { "tag", tag },
        };
    }

    /**
     * @method
     * @name binance#fetchTransactionFees
     * @deprecated
     * @description please use fetchDepositWithdrawFees instead
     * @see https://developers.binance.com/docs/wallet/capital/all-coins-info
     * @param {string[]|undefined} codes not used by binance fetchTransactionFees ()
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    public async override Task<object> fetchTransactionFees(object codes = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.sapiGetCapitalConfigGetall(parameters);
        //
        //  [
        //     {
        //       "coin": "BAT",
        //       "depositAllEnable": true,
        //       "withdrawAllEnable": true,
        //       "name": "Basic Attention Token",
        //       "free": "0",
        //       "locked": "0",
        //       "freeze": "0",
        //       "withdrawing": "0",
        //       "ipoing": "0",
        //       "ipoable": "0",
        //       "storage": "0",
        //       "isLegalMoney": false,
        //       "trading": true,
        //       "networkList": [
        //         {
        //           "network": "BNB",
        //           "coin": "BAT",
        //           "withdrawIntegerMultiple": "0.00000001",
        //           "isDefault": false,
        //           "depositEnable": true,
        //           "withdrawEnable": true,
        //           "depositDesc": '',
        //           "withdrawDesc": '',
        //           "specialTips": "The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.",
        //           "name": "BEP2",
        //           "resetAddressStatus": false,
        //           "addressRegex": "^(bnb1)[0-9a-z]{38}$",
        //           "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
        //           "withdrawFee": "0.27",
        //           "withdrawMin": "0.54",
        //           "withdrawMax": "10000000000",
        //           "minConfirm": "1",
        //           "unLockConfirm": "0"
        //         },
        //         {
        //           "network": "BSC",
        //           "coin": "BAT",
        //           "withdrawIntegerMultiple": "0.00000001",
        //           "isDefault": false,
        //           "depositEnable": true,
        //           "withdrawEnable": true,
        //           "depositDesc": '',
        //           "withdrawDesc": '',
        //           "specialTips": "The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 9766e.",
        //           "name": "BEP20 (BSC)",
        //           "resetAddressStatus": false,
        //           "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
        //           "memoRegex": '',
        //           "withdrawFee": "0.27",
        //           "withdrawMin": "0.54",
        //           "withdrawMax": "10000000000",
        //           "minConfirm": "15",
        //           "unLockConfirm": "0"
        //         },
        //         {
        //           "network": "ETH",
        //           "coin": "BAT",
        //           "withdrawIntegerMultiple": "0.00000001",
        //           "isDefault": true,
        //           "depositEnable": true,
        //           "withdrawEnable": true,
        //           "depositDesc": '',
        //           "withdrawDesc": '',
        //           "specialTips": "The name of this asset is Basic Attention Token. Please ensure you are depositing Basic Attention Token (BAT) tokens under the contract address ending in 887ef.",
        //           "name": "ERC20",
        //           "resetAddressStatus": false,
        //           "addressRegex": "^(0x)[0-9A-Fa-f]{40}$",
        //           "memoRegex": '',
        //           "withdrawFee": "27",
        //           "withdrawMin": "54",
        //           "withdrawMax": "10000000000",
        //           "minConfirm": "12",
        //           "unLockConfirm": "0"
        //         }
        //       ]
        //     }
        //  ]
        //
        object withdrawFees = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object currencyId = this.safeString(entry, "coin");
            object code = this.safeCurrencyCode(currencyId);
            object networkList = this.safeList(entry, "networkList", new List<object>() {});
            ((IDictionary<string,object>)withdrawFees)[(string)code] = new Dictionary<string, object>() {};
            for (object j = 0; isLessThan(j, getArrayLength(networkList)); postFixIncrement(ref j))
            {
                object networkEntry = getValue(networkList, j);
                object networkId = this.safeString(networkEntry, "network");
                object networkCode = this.safeCurrencyCode(networkId);
                object fee = this.safeNumber(networkEntry, "withdrawFee");
                ((IDictionary<string,object>)getValue(withdrawFees, code))[(string)networkCode] = fee;
            }
        }
        return new Dictionary<string, object>() {
            { "withdraw", withdrawFees },
            { "deposit", new Dictionary<string, object>() {} },
            { "info", response },
        };
    }

    /**
     * @method
     * @name binance#fetchDepositWithdrawFees
     * @description fetch deposit and withdraw fees
     * @see https://developers.binance.com/docs/wallet/capital/all-coins-info
     * @param {string[]|undefined} codes not used by binance fetchDepositWithdrawFees ()
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    public async override Task<object> fetchDepositWithdrawFees(object codes = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.sapiGetCapitalConfigGetall(parameters);
        //
        //    [
        //        {
        //            "coin": "BAT",
        //            "depositAllEnable": true,
        //            "withdrawAllEnable": true,
        //            "name": "Basic Attention Token",
        //            "free": "0",
        //            "locked": "0",
        //            "freeze": "0",
        //            "withdrawing": "0",
        //            "ipoing": "0",
        //            "ipoable": "0",
        //            "storage": "0",
        //            "isLegalMoney": false,
        //            "trading": true,
        //            "networkList": [
        //                {
        //                    "network": "BNB",
        //                    "coin": "BAT",
        //                    "withdrawIntegerMultiple": "0.00000001",
        //                    "isDefault": false,
        //                    "depositEnable": true,
        //                    "withdrawEnable": true,
        //                    "depositDesc": '',
        //                    "withdrawDesc": '',
        //                    "specialTips": "The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.",
        //                    "name": "BEP2",
        //                    "resetAddressStatus": false,
        //                    "addressRegex": "^(bnb1)[0-9a-z]{38}$",
        //                    "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
        //                    "withdrawFee": "0.27",
        //                    "withdrawMin": "0.54",
        //                    "withdrawMax": "10000000000",
        //                    "minConfirm": "1",
        //                    "unLockConfirm": "0"
        //                },
        //                ...
        //            ]
        //        }
        //    ]
        //
        return this.parseDepositWithdrawFees(response, codes, "coin");
    }

    public override object parseDepositWithdrawFee(object fee, object currency = null)
    {
        //
        //    {
        //        "coin": "BAT",
        //        "depositAllEnable": true,
        //        "withdrawAllEnable": true,
        //        "name": "Basic Attention Token",
        //        "free": "0",
        //        "locked": "0",
        //        "freeze": "0",
        //        "withdrawing": "0",
        //        "ipoing": "0",
        //        "ipoable": "0",
        //        "storage": "0",
        //        "isLegalMoney": false,
        //        "trading": true,
        //        "networkList": [
        //            {
        //                "network": "BNB",
        //                "coin": "BAT",
        //                "withdrawIntegerMultiple": "0.00000001",
        //                "isDefault": false,
        //                "depositEnable": true,
        //                "withdrawEnable": true,
        //                "depositDesc": '',
        //                "withdrawDesc": '',
        //                "specialTips": "The name of this asset is Basic Attention Token (BAT). Both a MEMO and an Address are required to successfully deposit your BEP2 tokens to Binance.",
        //                "name": "BEP2",
        //                "resetAddressStatus": false,
        //                "addressRegex": "^(bnb1)[0-9a-z]{38}$",
        //                "memoRegex": "^[0-9A-Za-z\\-_]{1,120}$",
        //                "withdrawFee": "0.27",
        //                "withdrawMin": "0.54",
        //                "withdrawMax": "10000000000",
        //                "minConfirm": "1",
        //                "unLockConfirm": "0"
        //            },
        //            ...
        //        ]
        //    }
        //
        object networkList = this.safeList(fee, "networkList", new List<object>() {});
        object result = this.depositWithdrawFee(fee);
        for (object j = 0; isLessThan(j, getArrayLength(networkList)); postFixIncrement(ref j))
        {
            object networkEntry = getValue(networkList, j);
            object networkId = this.safeString(networkEntry, "network");
            object networkCode = this.networkIdToCode(networkId);
            object withdrawFee = this.safeNumber(networkEntry, "withdrawFee");
            object isDefault = this.safeBool(networkEntry, "isDefault");
            if (isTrue(isEqual(isDefault, true)))
            {
                ((IDictionary<string,object>)result)["withdraw"] = new Dictionary<string, object>() {
                    { "fee", withdrawFee },
                    { "percentage", null },
                };
            }
            ((IDictionary<string,object>)getValue(result, "networks"))[(string)networkCode] = new Dictionary<string, object>() {
                { "withdraw", new Dictionary<string, object>() {
                    { "fee", withdrawFee },
                    { "percentage", null },
                } },
                { "deposit", new Dictionary<string, object>() {
                    { "fee", null },
                    { "percentage", null },
                } },
            };
        }
        return result;
    }

    /**
     * @method
     * @name binance#withdraw
     * @description make a withdrawal
     * @see https://developers.binance.com/docs/wallet/capital/withdraw
     * @param {string} code unified currency code
     * @param {float} amount the amount to withdraw
     * @param {string} address the address to withdraw to
     * @param {string} tag
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(currency, "id") },
            { "address", address },
            { "amount", this.currencyToPrecision(code, amount) },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((IDictionary<string,object>)request)["addressTag"] = tag;
        }
        object networks = this.safeDict(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            ((IDictionary<string,object>)request)["network"] = network;
            parameters = this.omit(parameters, "network");
        }
        object response = await this.sapiPostCapitalWithdrawApply(this.extend(request, parameters));
        //     { id: '9a67628b16ba4988ae20d329333f16bc' }
        return this.parseTransaction(response, currency);
    }

    public virtual object parseTradingFee(object fee, object market = null)
    {
        //
        // spot
        //     [
        //       {
        //         "symbol": "BTCUSDT",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       }
        //     ]
        //
        // swap
        //     {
        //         "symbol": "BTCUSD_PERP",
        //         "makerCommissionRate": "0.00015",  // 0.015%
        //         "takerCommissionRate": "0.00040"   // 0.040%
        //     }
        //
        object marketId = this.safeString(fee, "symbol");
        object symbol = this.safeSymbol(marketId, market, null, "spot");
        return new Dictionary<string, object>() {
            { "info", fee },
            { "symbol", symbol },
            { "maker", this.safeNumber2(fee, "makerCommission", "makerCommissionRate") },
            { "taker", this.safeNumber2(fee, "takerCommission", "takerCommissionRate") },
            { "percentage", null },
            { "tierBased", null },
        };
    }

    /**
     * @method
     * @name binance#fetchTradingFee
     * @description fetch the trading fees for a market
     * @see https://developers.binance.com/docs/wallet/asset/trade-fee
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/User-Commission-Rate
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/User-Commission-Rate
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-User-Commission-Rate-for-UM
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-User-Commission-Rate-for-CM
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch trading fees in a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
     */
    public async override Task<object> fetchTradingFee(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object type = getValue(market, "type");
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchTradingFee", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchTradingFee", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object isLinear = this.isLinear(type, subType);
        object isInverse = this.isInverse(type, subType);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = null;
        if (isTrue(isLinear))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmCommissionRate(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivateGetCommissionRate(this.extend(request, parameters));
            }
        } else if (isTrue(isInverse))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmCommissionRate(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivateGetCommissionRate(this.extend(request, parameters));
            }
        } else
        {
            response = await this.sapiGetAssetTradeFee(this.extend(request, parameters));
        }
        //
        // spot
        //
        //     [
        //       {
        //         "symbol": "BTCUSDT",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       }
        //     ]
        //
        // swap
        //
        //     {
        //         "symbol": "BTCUSD_PERP",
        //         "makerCommissionRate": "0.00015",  // 0.015%
        //         "takerCommissionRate": "0.00040"   // 0.040%
        //     }
        //
        object data = response;
        if (isTrue(((data is IList<object>) || (data.GetType().IsGenericType && data.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            data = this.safeDict(data, 0, new Dictionary<string, object>() {});
        }
        return this.parseTradingFee(data, market);
    }

    /**
     * @method
     * @name binance#fetchTradingFees
     * @description fetch the trading fees for multiple markets
     * @see https://developers.binance.com/docs/wallet/asset/trade-fee
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Account-Information
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Config
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
     */
    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchTradingFees", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchTradingFees", null, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isSpotOrMargin = isTrue((isEqual(type, "spot"))) || isTrue((isEqual(type, "margin")));
        object isLinear = this.isLinear(type, subType);
        object isInverse = this.isInverse(type, subType);
        object response = null;
        if (isTrue(isSpotOrMargin))
        {
            response = await this.sapiGetAssetTradeFee(parameters);
        } else if (isTrue(isLinear))
        {
            response = await this.fapiPrivateGetAccountConfig(parameters);
        } else if (isTrue(isInverse))
        {
            response = await this.dapiPrivateGetAccount(parameters);
        }
        //
        // sapi / spot
        //
        //    [
        //       {
        //         "symbol": "ZRXBNB",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       },
        //       {
        //         "symbol": "ZRXBTC",
        //         "makerCommission": "0.001",
        //         "takerCommission": "0.001"
        //       },
        //    ]
        //
        // fapi / future / linear
        //
        //     {
        //         "feeTier": 0,       // account commisssion tier
        //         "canTrade": true,   // if can trade
        //         "canDeposit": true,     // if can transfer in asset
        //         "canWithdraw": true,    // if can transfer out asset
        //         "updateTime": 0,
        //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
        //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
        //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
        //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
        //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
        //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
        //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
        //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
        //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
        //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
        //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
        //         ...
        //     }
        //
        // dapi / delivery / inverse
        //
        //     {
        //         "canDeposit": true,
        //         "canTrade": true,
        //         "canWithdraw": true,
        //         "feeTier": 2,
        //         "updateTime": 0
        //     }
        //
        if (isTrue(isSpotOrMargin))
        {
            //
            //    [
            //       {
            //         "symbol": "ZRXBNB",
            //         "makerCommission": "0.001",
            //         "takerCommission": "0.001"
            //       },
            //       {
            //         "symbol": "ZRXBTC",
            //         "makerCommission": "0.001",
            //         "takerCommission": "0.001"
            //       },
            //    ]
            //
            object result = new Dictionary<string, object>() {};
            for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
            {
                object fee = this.parseTradingFee(getValue(response, i));
                object symbol = getValue(fee, "symbol");
                ((IDictionary<string,object>)result)[(string)symbol] = fee;
            }
            return result;
        } else if (isTrue(isLinear))
        {
            //
            //     {
            //         "feeTier": 0,       // account commisssion tier
            //         "canTrade": true,   // if can trade
            //         "canDeposit": true,     // if can transfer in asset
            //         "canWithdraw": true,    // if can transfer out asset
            //         "updateTime": 0,
            //         "totalInitialMargin": "0.00000000",    // total initial margin required with current mark price (useless with isolated positions), only for USDT asset
            //         "totalMaintMargin": "0.00000000",     // total maintenance margin required, only for USDT asset
            //         "totalWalletBalance": "23.72469206",     // total wallet balance, only for USDT asset
            //         "totalUnrealizedProfit": "0.00000000",   // total unrealized profit, only for USDT asset
            //         "totalMarginBalance": "23.72469206",     // total margin balance, only for USDT asset
            //         "totalPositionInitialMargin": "0.00000000",    // initial margin required for positions with current mark price, only for USDT asset
            //         "totalOpenOrderInitialMargin": "0.00000000",   // initial margin required for open orders with current mark price, only for USDT asset
            //         "totalCrossWalletBalance": "23.72469206",      // crossed wallet balance, only for USDT asset
            //         "totalCrossUnPnl": "0.00000000",      // unrealized profit of crossed positions, only for USDT asset
            //         "availableBalance": "23.72469206",       // available balance, only for USDT asset
            //         "maxWithdrawAmount": "23.72469206"     // maximum amount for transfer out, only for USDT asset
            //         ...
            //     }
            //
            object symbols = new List<object>(((IDictionary<string,object>)this.markets).Keys);
            object result = new Dictionary<string, object>() {};
            object feeTier = this.safeInteger(response, "feeTier");
            object feeTiers = getValue(getValue(getValue(this.fees, "linear"), "trading"), "tiers");
            object maker = getValue(getValue(getValue(feeTiers, "maker"), feeTier), 1);
            object taker = getValue(getValue(getValue(feeTiers, "taker"), feeTier), 1);
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                object market = getValue(this.markets, symbol);
                if (isTrue(getValue(market, "linear")))
                {
                    ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                        { "info", new Dictionary<string, object>() {
                            { "feeTier", feeTier },
                        } },
                        { "symbol", symbol },
                        { "maker", maker },
                        { "taker", taker },
                    };
                }
            }
            return result;
        } else if (isTrue(isInverse))
        {
            //
            //     {
            //         "canDeposit": true,
            //         "canTrade": true,
            //         "canWithdraw": true,
            //         "feeTier": 2,
            //         "updateTime": 0
            //     }
            //
            object symbols = new List<object>(((IDictionary<string,object>)this.markets).Keys);
            object result = new Dictionary<string, object>() {};
            object feeTier = this.safeInteger(response, "feeTier");
            object feeTiers = getValue(getValue(getValue(this.fees, "inverse"), "trading"), "tiers");
            object maker = getValue(getValue(getValue(feeTiers, "maker"), feeTier), 1);
            object taker = getValue(getValue(getValue(feeTiers, "taker"), feeTier), 1);
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                object market = getValue(this.markets, symbol);
                if (isTrue(getValue(market, "inverse")))
                {
                    ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                        { "info", new Dictionary<string, object>() {
                            { "feeTier", feeTier },
                        } },
                        { "symbol", symbol },
                        { "maker", maker },
                        { "taker", taker },
                    };
                }
            }
            return result;
        }
        return null;
    }

    /**
     * @method
     * @name binance#futuresTransfer
     * @ignore
     * @description transfer between futures account
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/New-Future-Account-Transfer
     * @param {string} code unified currency code
     * @param {float} amount the amount to transfer
     * @param {string} type 1 - transfer from spot account to USDT-Ⓜ futures account, 2 - transfer from USDT-Ⓜ futures account to spot account, 3 - transfer from spot account to COIN-Ⓜ futures account, 4 - transfer from COIN-Ⓜ futures account to spot account
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {float} params.recvWindow
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=futures-transfer-structure}
     */
    public async virtual Task<object> futuresTransfer(object code, object amount, object type, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isTrue((isLessThan(type, 1))) || isTrue((isGreaterThan(type, 4)))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " type must be between 1 and 4")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", amount },
            { "type", type },
        };
        object response = await this.sapiPostFuturesTransfer(this.extend(request, parameters));
        //
        //   {
        //       "tranId": 100000001
        //   }
        //
        return this.parseTransfer(response, currency);
    }

    /**
     * @method
     * @name binance#fetchFundingRate
     * @description fetch the current funding rate
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Mark-Price
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Index-Price-and-Mark-Price
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
     */
    public async override Task<object> fetchFundingRate(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = null;
        if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPublicGetPremiumIndex(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPublicGetPremiumIndex(this.extend(request, parameters));
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchFundingRate() supports linear and inverse contracts only")) ;
        }
        if (isTrue(getValue(market, "inverse")))
        {
            response = getValue(response, 0);
        }
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "markPrice": "45802.81129892",
        //         "indexPrice": "45745.47701915",
        //         "estimatedSettlePrice": "45133.91753671",
        //         "lastFundingRate": "0.00063521",
        //         "interestRate": "0.00010000",
        //         "nextFundingTime": "1621267200000",
        //         "time": "1621252344001"
        //     }
        //
        return this.parseFundingRate(response, market);
    }

    /**
     * @method
     * @name binance#fetchFundingRateHistory
     * @description fetches historical funding rate prices
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Get-Funding-Rate-History
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Get-Funding-Rate-History-of-Perpetual-Futures
     * @param {string} symbol unified symbol of the market to fetch the funding rate history for
     * @param {int} [since] timestamp in ms of the earliest funding rate to fetch
     * @param {int} [limit] the maximum amount of [funding rate structures]{@link https://docs.ccxt.com/#/?id=funding-rate-history-structure} to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest funding rate
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object[]} a list of [funding rate structures]{@link https://docs.ccxt.com/#/?id=funding-rate-history-structure}
     */
    public async override Task<object> fetchFundingRateHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchFundingRateHistory", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDeterministic("fetchFundingRateHistory", symbol, since, limit, "8h", parameters);
        }
        object defaultType = this.safeString2(this.options, "fetchFundingRateHistory", "defaultType", "future");
        object type = this.safeString(parameters, "type", defaultType);
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchFundingRateHistory", market, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        parameters = this.omit(parameters, "type");
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        object until = this.safeInteger(parameters, "until"); // unified in milliseconds
        object endTime = this.safeInteger(parameters, "endTime", until); // exchange-specific in milliseconds
        parameters = this.omit(parameters, new List<object>() {"endTime", "until"});
        if (isTrue(!isEqual(endTime, null)))
        {
            ((IDictionary<string,object>)request)["endTime"] = endTime;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetFundingRate(this.extend(request, parameters));
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetFundingRate(this.extend(request, parameters));
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchFundingRateHistory() is not supported for "), type), " markets")) ;
        }
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "fundingRate": "0.00063521",
        //         "fundingTime": "1621267200000",
        //     }
        //
        object rates = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object timestamp = this.safeInteger(entry, "fundingTime");
            ((IList<object>)rates).Add(new Dictionary<string, object>() {
                { "info", entry },
                { "symbol", this.safeSymbol(this.safeString(entry, "symbol"), null, null, "swap") },
                { "fundingRate", this.safeNumber(entry, "fundingRate") },
                { "timestamp", timestamp },
                { "datetime", this.iso8601(timestamp) },
            });
        }
        object sorted = this.sortBy(rates, "timestamp");
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }

    /**
     * @method
     * @name binance#fetchFundingRates
     * @description fetch the funding rate for multiple markets
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Mark-Price
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Index-Price-and-Mark-Price
     * @param {string[]|undefined} symbols list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object[]} a list of [funding rate structures]{@link https://docs.ccxt.com/#/?id=funding-rates-structure}, indexed by market symbols
     */
    public async override Task<object> fetchFundingRates(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object defaultType = this.safeString2(this.options, "fetchFundingRates", "defaultType", "future");
        object type = this.safeString(parameters, "type", defaultType);
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchFundingRates", null, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object query = this.omit(parameters, "type");
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetPremiumIndex(query);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetPremiumIndex(query);
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchFundingRates() supports linear and inverse contracts only")) ;
        }
        object result = this.parseFundingRates(response);
        return this.filterByArray(result, "symbol", symbols);
    }

    public override object parseFundingRate(object contract, object market = null)
    {
        // ensure it matches with https://www.binance.com/en/futures/funding-history/0
        //
        // fetchFundingRate, fetchFundingRates
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "markPrice": "45802.81129892",
        //         "indexPrice": "45745.47701915",
        //         "estimatedSettlePrice": "45133.91753671",
        //         "lastFundingRate": "0.00063521",
        //         "interestRate": "0.00010000",
        //         "nextFundingTime": "1621267200000",
        //         "time": "1621252344001"
        //     }
        //
        // fetchFundingInterval, fetchFundingIntervals
        //
        //     {
        //         "symbol": "BLZUSDT",
        //         "adjustedFundingRateCap": "0.03000000",
        //         "adjustedFundingRateFloor": "-0.03000000",
        //         "fundingIntervalHours": 4,
        //         "disclaimer": false
        //     }
        //
        object timestamp = this.safeInteger(contract, "time");
        object marketId = this.safeString(contract, "symbol");
        object symbol = this.safeSymbol(marketId, market, null, "contract");
        object markPrice = this.safeNumber(contract, "markPrice");
        object indexPrice = this.safeNumber(contract, "indexPrice");
        object interestRate = this.safeNumber(contract, "interestRate");
        object estimatedSettlePrice = this.safeNumber(contract, "estimatedSettlePrice");
        object fundingRate = this.safeNumber(contract, "lastFundingRate");
        object fundingTime = this.safeInteger(contract, "nextFundingTime");
        object interval = this.safeString(contract, "fundingIntervalHours");
        object intervalString = null;
        if (isTrue(!isEqual(interval, null)))
        {
            intervalString = add(interval, "h");
        }
        return new Dictionary<string, object>() {
            { "info", contract },
            { "symbol", symbol },
            { "markPrice", markPrice },
            { "indexPrice", indexPrice },
            { "interestRate", interestRate },
            { "estimatedSettlePrice", estimatedSettlePrice },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "fundingRate", fundingRate },
            { "fundingTimestamp", fundingTime },
            { "fundingDatetime", this.iso8601(fundingTime) },
            { "nextFundingRate", null },
            { "nextFundingTimestamp", null },
            { "nextFundingDatetime", null },
            { "previousFundingRate", null },
            { "previousFundingTimestamp", null },
            { "previousFundingDatetime", null },
            { "interval", intervalString },
        };
    }

    public virtual object parseAccountPositions(object account, object filterClosed = null)
    {
        filterClosed ??= false;
        object positions = this.safeList(account, "positions");
        object assets = this.safeList(account, "assets", new List<object>() {});
        object balances = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(assets)); postFixIncrement(ref i))
        {
            object entry = getValue(assets, i);
            object currencyId = this.safeString(entry, "asset");
            object code = this.safeCurrencyCode(currencyId);
            object crossWalletBalance = this.safeString(entry, "crossWalletBalance");
            object crossUnPnl = this.safeString(entry, "crossUnPnl");
            ((IDictionary<string,object>)balances)[(string)code] = new Dictionary<string, object>() {
                { "crossMargin", Precise.stringAdd(crossWalletBalance, crossUnPnl) },
                { "crossWalletBalance", crossWalletBalance },
            };
        }
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(positions)); postFixIncrement(ref i))
        {
            object position = getValue(positions, i);
            object marketId = this.safeString(position, "symbol");
            object market = this.safeMarket(marketId, null, null, "contract");
            object code = ((bool) isTrue(getValue(market, "linear"))) ? getValue(market, "quote") : getValue(market, "base");
            object maintenanceMargin = this.safeString(position, "maintMargin");
            // check for maintenance margin so empty positions are not returned
            object isPositionOpen = isTrue((!isEqual(maintenanceMargin, "0"))) && isTrue((!isEqual(maintenanceMargin, "0.00000000")));
            if (isTrue(!isTrue(filterClosed) || isTrue(isPositionOpen)))
            {
                // sometimes not all the codes are correctly returned...
                if (isTrue(inOp(balances, code)))
                {
                    object parsed = this.parseAccountPosition(this.extend(position, new Dictionary<string, object>() {
                        { "crossMargin", getValue(getValue(balances, code), "crossMargin") },
                        { "crossWalletBalance", getValue(getValue(balances, code), "crossWalletBalance") },
                    }), market);
                    ((IList<object>)result).Add(parsed);
                }
            }
        }
        return result;
    }

    public virtual object parseAccountPosition(object position, object market = null)
    {
        //
        // usdm
        //
        // v3 (similar for cross & isolated)
        //
        //    {
        //        "symbol": "WLDUSDT",
        //        "positionSide": "BOTH",
        //        "positionAmt": "-849",
        //        "unrealizedProfit": "11.17920750",
        //        "notional": "-1992.46079250",
        //        "isolatedMargin": "0",
        //        "isolatedWallet": "0",
        //        "initialMargin": "99.62303962",
        //        "maintMargin": "11.95476475",
        //        "updateTime": "1721995760449"
        //        "leverage": "50",                        // in v2
        //        "entryPrice": "2.34",                    // in v2
        //        "positionInitialMargin": "118.82116614", // in v2
        //        "openOrderInitialMargin": "0",           // in v2
        //        "isolated": false,                       // in v2
        //        "breakEvenPrice": "2.3395788",           // in v2
        //        "maxNotional": "25000",                  // in v2
        //        "bidNotional": "0",                      // in v2
        //        "askNotional": "0"                       // in v2
        //    }
        //
        // coinm
        //
        //     {
        //       "symbol": "BTCUSD_210625",
        //       "initialMargin": "0.00024393",
        //       "maintMargin": "0.00002439",
        //       "unrealizedProfit": "-0.00000163",
        //       "positionInitialMargin": "0.00024393",
        //       "openOrderInitialMargin": "0",
        //       "leverage": "10",
        //       "isolated": false,
        //       "positionSide": "BOTH",
        //       "entryPrice": "41021.20000069",
        //       "maxQty": "100",
        //       "notionalValue": "0.00243939",
        //       "isolatedWallet": "0",
        //       "crossMargin": "0.314"
        //       "crossWalletBalance": "34",
        //     }
        //
        // linear portfolio margin
        //
        //     {
        //         "symbol": "CTSIUSDT",
        //         "initialMargin": "0",
        //         "maintMargin": "0",
        //         "unrealizedProfit": "0.00000000",
        //         "positionInitialMargin": "0",
        //         "openOrderInitialMargin": "0",
        //         "leverage": "20",
        //         "entryPrice": "0.0",
        //         "maxNotional": "25000",
        //         "bidNotional": "0",
        //         "askNotional": "0",
        //         "positionSide": "SHORT",
        //         "positionAmt": "0",
        //         "updateTime": 0,
        //         "notional": "0",
        //         "breakEvenPrice": "0.0"
        //     }
        //
        // inverse portoflio margin
        //
        //     {
        //         "symbol": "TRXUSD_PERP",
        //         "initialMargin": "0",
        //         "maintMargin": "0",
        //         "unrealizedProfit": "0.00000000",
        //         "positionInitialMargin": "0",
        //         "openOrderInitialMargin": "0",
        //         "leverage": "20",
        //         "entryPrice": "0.00000000",
        //         "positionSide": "SHORT",
        //         "positionAmt": "0",
        //         "maxQty": "5000000",
        //         "updateTime": 0,
        //         "notionalValue": "0",
        //         "breakEvenPrice": "0.00000000"
        //     }
        //
        object marketId = this.safeString(position, "symbol");
        market = this.safeMarket(marketId, market, null, "contract");
        object symbol = this.safeString(market, "symbol");
        object leverageString = this.safeString(position, "leverage");
        object leverage = ((bool) isTrue((!isEqual(leverageString, null)))) ? parseInt(leverageString) : null;
        object initialMarginString = this.safeString(position, "initialMargin");
        object initialMargin = this.parseNumber(initialMarginString);
        object initialMarginPercentageString = null;
        if (isTrue(!isEqual(leverageString, null)))
        {
            initialMarginPercentageString = Precise.stringDiv("1", leverageString, 8);
            object rational = this.isRoundNumber(mod(1000, leverage));
            if (!isTrue(rational))
            {
                initialMarginPercentageString = Precise.stringDiv(Precise.stringAdd(initialMarginPercentageString, "1e-8"), "1", 8);
            }
        }
        // as oppose to notionalValue
        object usdm = (inOp(position, "notional"));
        object maintenanceMarginString = this.safeString(position, "maintMargin");
        object maintenanceMargin = this.parseNumber(maintenanceMarginString);
        object entryPriceString = this.safeString(position, "entryPrice");
        object entryPrice = this.parseNumber(entryPriceString);
        object notionalString = this.safeString2(position, "notional", "notionalValue");
        object notionalStringAbs = Precise.stringAbs(notionalString);
        object notional = this.parseNumber(notionalStringAbs);
        object contractsString = this.safeString(position, "positionAmt");
        object contractsStringAbs = Precise.stringAbs(contractsString);
        if (isTrue(isEqual(contractsString, null)))
        {
            object entryNotional = Precise.stringMul(Precise.stringMul(leverageString, initialMarginString), entryPriceString);
            object contractSizeNew = this.safeString(market, "contractSize");
            contractsString = Precise.stringDiv(entryNotional, contractSizeNew);
            contractsStringAbs = Precise.stringDiv(Precise.stringAdd(contractsString, "0.5"), "1", 0);
        }
        object contracts = this.parseNumber(contractsStringAbs);
        object leverageBrackets = this.safeDict(this.options, "leverageBrackets", new Dictionary<string, object>() {});
        object leverageBracket = this.safeList(leverageBrackets, symbol, new List<object>() {});
        object maintenanceMarginPercentageString = null;
        for (object i = 0; isLessThan(i, getArrayLength(leverageBracket)); postFixIncrement(ref i))
        {
            object bracket = getValue(leverageBracket, i);
            if (isTrue(Precise.stringLt(notionalStringAbs, getValue(bracket, 0))))
            {
                break;
            }
            maintenanceMarginPercentageString = getValue(bracket, 1);
        }
        object maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);
        object unrealizedPnlString = this.safeString(position, "unrealizedProfit");
        object unrealizedPnl = this.parseNumber(unrealizedPnlString);
        object timestamp = this.safeInteger(position, "updateTime");
        if (isTrue(isEqual(timestamp, 0)))
        {
            timestamp = null;
        }
        object isolated = this.safeBool(position, "isolated");
        if (isTrue(isEqual(isolated, null)))
        {
            object isolatedMarginRaw = this.safeString(position, "isolatedMargin");
            isolated = !isTrue(Precise.stringEq(isolatedMarginRaw, "0"));
        }
        object marginMode = null;
        object collateralString = null;
        object walletBalance = null;
        if (isTrue(isolated))
        {
            marginMode = "isolated";
            walletBalance = this.safeString(position, "isolatedWallet");
            collateralString = Precise.stringAdd(walletBalance, unrealizedPnlString);
        } else
        {
            marginMode = "cross";
            walletBalance = this.safeString(position, "crossWalletBalance");
            collateralString = this.safeString(position, "crossMargin");
        }
        object collateral = this.parseNumber(collateralString);
        object marginRatio = null;
        object side = null;
        object percentage = null;
        object liquidationPriceStringRaw = null;
        object liquidationPrice = null;
        object contractSize = this.safeValue(market, "contractSize");
        object contractSizeString = this.numberToString(contractSize);
        if (isTrue(Precise.stringEquals(notionalString, "0")))
        {
            entryPrice = null;
        } else
        {
            side = ((bool) isTrue(Precise.stringLt(notionalString, "0"))) ? "short" : "long";
            marginRatio = this.parseNumber(Precise.stringDiv(Precise.stringAdd(Precise.stringDiv(maintenanceMarginString, collateralString), "5e-5"), "1", 4));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), "100"));
            if (isTrue(usdm))
            {
                // calculate liquidation price
                //
                // liquidationPrice = (walletBalance / (contracts * (±1 + mmp))) + (±entryPrice / (±1 + mmp))
                //
                // mmp = maintenanceMarginPercentage
                // where ± is negative for long and positive for short
                // TODO: calculate liquidation price for coinm contracts
                object onePlusMaintenanceMarginPercentageString = null;
                object entryPriceSignString = entryPriceString;
                if (isTrue(isEqual(side, "short")))
                {
                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd("1", maintenanceMarginPercentageString);
                } else
                {
                    onePlusMaintenanceMarginPercentageString = Precise.stringAdd("-1", maintenanceMarginPercentageString);
                    entryPriceSignString = Precise.stringMul("-1", entryPriceSignString);
                }
                object leftSide = Precise.stringDiv(walletBalance, Precise.stringMul(contractsStringAbs, onePlusMaintenanceMarginPercentageString));
                object rightSide = Precise.stringDiv(entryPriceSignString, onePlusMaintenanceMarginPercentageString);
                liquidationPriceStringRaw = Precise.stringAdd(leftSide, rightSide);
            } else
            {
                // calculate liquidation price
                //
                // liquidationPrice = (contracts * contractSize(±1 - mmp)) / (±1/entryPrice * contracts * contractSize - walletBalance)
                //
                object onePlusMaintenanceMarginPercentageString = null;
                object entryPriceSignString = entryPriceString;
                if (isTrue(isEqual(side, "short")))
                {
                    onePlusMaintenanceMarginPercentageString = Precise.stringSub("1", maintenanceMarginPercentageString);
                } else
                {
                    onePlusMaintenanceMarginPercentageString = Precise.stringSub("-1", maintenanceMarginPercentageString);
                    entryPriceSignString = Precise.stringMul("-1", entryPriceSignString);
                }
                object size = Precise.stringMul(contractsStringAbs, contractSizeString);
                object leftSide = Precise.stringMul(size, onePlusMaintenanceMarginPercentageString);
                object rightSide = Precise.stringSub(Precise.stringMul(Precise.stringDiv("1", entryPriceSignString), size), walletBalance);
                liquidationPriceStringRaw = Precise.stringDiv(leftSide, rightSide);
            }
            object pricePrecision = this.precisionFromString(this.safeString(getValue(market, "precision"), "price"));
            object pricePrecisionPlusOne = add(pricePrecision, 1);
            object pricePrecisionPlusOneString = ((object)pricePrecisionPlusOne).ToString();
            // round half up
            var rounder = new Precise(add("5e-", pricePrecisionPlusOneString));
            object rounderString = ((object)rounder).ToString();
            object liquidationPriceRoundedString = Precise.stringAdd(rounderString, liquidationPriceStringRaw);
            object truncatedLiquidationPrice = Precise.stringDiv(liquidationPriceRoundedString, "1", pricePrecision);
            if (isTrue(isEqual(getValue(truncatedLiquidationPrice, 0), "-")))
            {
                // user cannot be liquidated
                // since he has more collateral than the size of the position
                truncatedLiquidationPrice = null;
            }
            liquidationPrice = this.parseNumber(truncatedLiquidationPrice);
        }
        object positionSide = this.safeString(position, "positionSide");
        object hedged = !isEqual(positionSide, "BOTH");
        return new Dictionary<string, object>() {
            { "info", position },
            { "id", null },
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "initialMargin", initialMargin },
            { "initialMarginPercentage", this.parseNumber(initialMarginPercentageString) },
            { "maintenanceMargin", maintenanceMargin },
            { "maintenanceMarginPercentage", maintenanceMarginPercentage },
            { "entryPrice", entryPrice },
            { "notional", notional },
            { "leverage", this.parseNumber(leverageString) },
            { "unrealizedPnl", unrealizedPnl },
            { "contracts", contracts },
            { "contractSize", contractSize },
            { "marginRatio", marginRatio },
            { "liquidationPrice", liquidationPrice },
            { "markPrice", null },
            { "collateral", collateral },
            { "marginMode", marginMode },
            { "side", side },
            { "hedged", hedged },
            { "percentage", percentage },
        };
    }

    public virtual object parsePositionRisk(object position, object market = null)
    {
        //
        // usdm
        //
        //  {
        //     symbol: "WLDUSDT",
        //     positionSide: "BOTH",
        //     positionAmt: "5",
        //     entryPrice: "2.3483",
        //     breakEvenPrice: "2.349356735",
        //     markPrice: "2.39560000",
        //     unRealizedProfit: "0.23650000",
        //     liquidationPrice: "0",
        //     isolatedMargin: "0",
        //     notional: "11.97800000",
        //     isolatedWallet: "0",
        //     updateTime: "1722062678998",
        //     initialMargin: "2.39560000",         // not in v2
        //     maintMargin: "0.07186800",           // not in v2
        //     positionInitialMargin: "2.39560000", // not in v2
        //     openOrderInitialMargin: "0",         // not in v2
        //     adl: "2",                            // not in v2
        //     bidNotional: "0",                    // not in v2
        //     askNotional: "0",                    // not in v2
        //     marginAsset: "USDT",                 // not in v2
        //     // the below fields are only in v2
        //     leverage: "5",
        //     maxNotionalValue: "6000000",
        //     marginType: "cross",
        //     isAutoAddMargin: "false",
        //     isolated: false,
        //     adlQuantile: "2",
        //
        // coinm
        //
        //     {
        //       "symbol": "BTCUSD_PERP",
        //       "positionAmt": "2",
        //       "entryPrice": "37643.10000021",
        //       "markPrice": "38103.05510455",
        //       "unRealizedProfit": "0.00006413",
        //       "liquidationPrice": "25119.97445760",
        //       "leverage": "2",
        //       "maxQty": "1500",
        //       "marginType": "isolated",
        //       "isolatedMargin": "0.00274471",
        //       "isAutoAddMargin": "false",
        //       "positionSide": "BOTH",
        //       "notionalValue": "0.00524892",
        //       "isolatedWallet": "0.00268058"
        //     }
        //
        // inverse portfolio margin
        //
        //     {
        //         "symbol": "ETHUSD_PERP",
        //         "positionAmt": "1",
        //         "entryPrice": "2422.400000007",
        //         "markPrice": "2424.51267823",
        //         "unRealizedProfit": "0.0000036",
        //         "liquidationPrice": "293.57678898",
        //         "leverage": "100",
        //         "positionSide": "LONG",
        //         "updateTime": 1707371941861,
        //         "maxQty": "15",
        //         "notionalValue": "0.00412454",
        //         "breakEvenPrice": "2423.368960034"
        //     }
        //
        // linear portfolio margin
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "positionAmt": "0.01",
        //         "entryPrice": "44525.0",
        //         "markPrice": "45464.1735922",
        //         "unRealizedProfit": "9.39173592",
        //         "liquidationPrice": "38007.16308568",
        //         "leverage": "100",
        //         "positionSide": "LONG",
        //         "updateTime": 1707371879042,
        //         "maxNotionalValue": "500000.0",
        //         "notional": "454.64173592",
        //         "breakEvenPrice": "44542.81"
        //     }
        //
        object marketId = this.safeString(position, "symbol");
        market = this.safeMarket(marketId, market, null, "contract");
        object symbol = this.safeString(market, "symbol");
        object isolatedMarginString = this.safeString(position, "isolatedMargin");
        object leverageBrackets = this.safeDict(this.options, "leverageBrackets", new Dictionary<string, object>() {});
        object leverageBracket = this.safeList(leverageBrackets, symbol, new List<object>() {});
        object notionalString = this.safeString2(position, "notional", "notionalValue");
        object notionalStringAbs = Precise.stringAbs(notionalString);
        object maintenanceMarginPercentageString = null;
        for (object i = 0; isLessThan(i, getArrayLength(leverageBracket)); postFixIncrement(ref i))
        {
            object bracket = getValue(leverageBracket, i);
            if (isTrue(Precise.stringLt(notionalStringAbs, getValue(bracket, 0))))
            {
                break;
            }
            maintenanceMarginPercentageString = getValue(bracket, 1);
        }
        object notional = this.parseNumber(notionalStringAbs);
        object contractsAbs = Precise.stringAbs(this.safeString(position, "positionAmt"));
        object contracts = this.parseNumber(contractsAbs);
        object unrealizedPnlString = this.safeString(position, "unRealizedProfit");
        object unrealizedPnl = this.parseNumber(unrealizedPnlString);
        object liquidationPriceString = this.omitZero(this.safeString(position, "liquidationPrice"));
        object liquidationPrice = this.parseNumber(liquidationPriceString);
        object collateralString = null;
        object marginMode = this.safeString(position, "marginType");
        if (isTrue(isTrue(isEqual(marginMode, null)) && isTrue(!isEqual(isolatedMarginString, null))))
        {
            marginMode = ((bool) isTrue(Precise.stringEq(isolatedMarginString, "0"))) ? "cross" : "isolated";
        }
        object side = null;
        if (isTrue(Precise.stringGt(notionalString, "0")))
        {
            side = "long";
        } else if (isTrue(Precise.stringLt(notionalString, "0")))
        {
            side = "short";
        }
        object entryPriceString = this.safeString(position, "entryPrice");
        object entryPrice = this.parseNumber(entryPriceString);
        object contractSize = this.safeValue(market, "contractSize");
        object contractSizeString = this.numberToString(contractSize);
        // as oppose to notionalValue
        object linear = (inOp(position, "notional"));
        if (isTrue(isEqual(marginMode, "cross")))
        {
            // calculate collateral
            object precision = this.safeDict(market, "precision", new Dictionary<string, object>() {});
            object basePrecisionValue = this.safeString(precision, "base");
            object quotePrecisionValue = this.safeString2(precision, "quote", "price");
            object precisionIsUndefined = isTrue((isEqual(basePrecisionValue, null))) && isTrue((isEqual(quotePrecisionValue, null)));
            if (!isTrue(precisionIsUndefined))
            {
                if (isTrue(linear))
                {
                    // walletBalance = (liquidationPrice * (±1 + mmp) ± entryPrice) * contracts
                    object onePlusMaintenanceMarginPercentageString = null;
                    object entryPriceSignString = entryPriceString;
                    if (isTrue(isEqual(side, "short")))
                    {
                        onePlusMaintenanceMarginPercentageString = Precise.stringAdd("1", maintenanceMarginPercentageString);
                        entryPriceSignString = Precise.stringMul("-1", entryPriceSignString);
                    } else
                    {
                        onePlusMaintenanceMarginPercentageString = Precise.stringAdd("-1", maintenanceMarginPercentageString);
                    }
                    object inner = Precise.stringMul(liquidationPriceString, onePlusMaintenanceMarginPercentageString);
                    object leftSide = Precise.stringAdd(inner, entryPriceSignString);
                    object quotePrecision = this.precisionFromString(this.safeString2(precision, "quote", "price"));
                    if (isTrue(!isEqual(quotePrecision, null)))
                    {
                        collateralString = Precise.stringDiv(Precise.stringMul(leftSide, contractsAbs), "1", quotePrecision);
                    }
                } else
                {
                    // walletBalance = (contracts * contractSize) * (±1/entryPrice - (±1 - mmp) / liquidationPrice)
                    object onePlusMaintenanceMarginPercentageString = null;
                    object entryPriceSignString = entryPriceString;
                    if (isTrue(isEqual(side, "short")))
                    {
                        onePlusMaintenanceMarginPercentageString = Precise.stringSub("1", maintenanceMarginPercentageString);
                    } else
                    {
                        onePlusMaintenanceMarginPercentageString = Precise.stringSub("-1", maintenanceMarginPercentageString);
                        entryPriceSignString = Precise.stringMul("-1", entryPriceSignString);
                    }
                    object leftSide = Precise.stringMul(contractsAbs, contractSizeString);
                    object rightSide = Precise.stringSub(Precise.stringDiv("1", entryPriceSignString), Precise.stringDiv(onePlusMaintenanceMarginPercentageString, liquidationPriceString));
                    object basePrecision = this.precisionFromString(this.safeString(precision, "base"));
                    if (isTrue(!isEqual(basePrecision, null)))
                    {
                        collateralString = Precise.stringDiv(Precise.stringMul(leftSide, rightSide), "1", basePrecision);
                    }
                }
            }
        } else
        {
            collateralString = this.safeString(position, "isolatedMargin");
        }
        collateralString = ((bool) isTrue((isEqual(collateralString, null)))) ? "0" : collateralString;
        object collateral = this.parseNumber(collateralString);
        object markPrice = this.parseNumber(this.omitZero(this.safeString(position, "markPrice")));
        object timestamp = this.safeInteger(position, "updateTime");
        if (isTrue(isEqual(timestamp, 0)))
        {
            timestamp = null;
        }
        object maintenanceMarginPercentage = this.parseNumber(maintenanceMarginPercentageString);
        object maintenanceMarginString = Precise.stringMul(maintenanceMarginPercentageString, notionalStringAbs);
        if (isTrue(isEqual(maintenanceMarginString, null)))
        {
            // for a while, this new value was a backup to the existing calculations, but in future we might prioritize this
            maintenanceMarginString = this.safeString(position, "maintMargin");
        }
        object maintenanceMargin = this.parseNumber(maintenanceMarginString);
        object initialMarginString = null;
        object initialMarginPercentageString = null;
        object leverageString = this.safeString(position, "leverage");
        if (isTrue(!isEqual(leverageString, null)))
        {
            object leverage = parseInt(leverageString);
            object rational = this.isRoundNumber(mod(1000, leverage));
            initialMarginPercentageString = Precise.stringDiv("1", leverageString, 8);
            if (!isTrue(rational))
            {
                initialMarginPercentageString = Precise.stringAdd(initialMarginPercentageString, "1e-8");
            }
            object unrounded = Precise.stringMul(notionalStringAbs, initialMarginPercentageString);
            initialMarginString = Precise.stringDiv(unrounded, "1", 8);
        } else
        {
            initialMarginString = this.safeString(position, "initialMargin");
            object unrounded = Precise.stringMul(initialMarginString, "1");
            initialMarginPercentageString = Precise.stringDiv(unrounded, notionalStringAbs, 8);
        }
        object marginRatio = null;
        object percentage = null;
        if (!isTrue(Precise.stringEquals(collateralString, "0")))
        {
            marginRatio = this.parseNumber(Precise.stringDiv(Precise.stringAdd(Precise.stringDiv(maintenanceMarginString, collateralString), "5e-5"), "1", 4));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringDiv(unrealizedPnlString, initialMarginString, 4), "100"));
        }
        object positionSide = this.safeString(position, "positionSide");
        object hedged = !isEqual(positionSide, "BOTH");
        return new Dictionary<string, object>() {
            { "info", position },
            { "id", null },
            { "symbol", symbol },
            { "contracts", contracts },
            { "contractSize", contractSize },
            { "unrealizedPnl", unrealizedPnl },
            { "leverage", this.parseNumber(leverageString) },
            { "liquidationPrice", liquidationPrice },
            { "collateral", collateral },
            { "notional", notional },
            { "markPrice", markPrice },
            { "entryPrice", entryPrice },
            { "timestamp", timestamp },
            { "initialMargin", this.parseNumber(initialMarginString) },
            { "initialMarginPercentage", this.parseNumber(initialMarginPercentageString) },
            { "maintenanceMargin", maintenanceMargin },
            { "maintenanceMarginPercentage", maintenanceMarginPercentage },
            { "marginRatio", marginRatio },
            { "datetime", this.iso8601(timestamp) },
            { "marginMode", marginMode },
            { "marginType", marginMode },
            { "side", side },
            { "hedged", hedged },
            { "percentage", percentage },
            { "stopLossPrice", null },
            { "takeProfitPrice", null },
        };
    }

    public async virtual Task<object> loadLeverageBrackets(object reload = null, object parameters = null)
    {
        reload ??= false;
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // by default cache the leverage bracket
        // it contains useful stuff like the maintenance margin and initial margin for positions
        object leverageBrackets = this.safeDict(this.options, "leverageBrackets");
        if (isTrue(isTrue((isEqual(leverageBrackets, null))) || isTrue((reload))))
        {
            object defaultType = this.safeString(this.options, "defaultType", "future");
            object type = this.safeString(parameters, "type", defaultType);
            object query = this.omit(parameters, "type");
            object subType = null;
            var subTypeparametersVariable = this.handleSubTypeAndParams("loadLeverageBrackets", null, parameters, "linear");
            subType = ((IList<object>)subTypeparametersVariable)[0];
            parameters = ((IList<object>)subTypeparametersVariable)[1];
            object isPortfolioMargin = null;
            var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "loadLeverageBrackets", "papi", "portfolioMargin", false);
            isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
            parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
            object response = null;
            if (isTrue(this.isLinear(type, subType)))
            {
                if (isTrue(isPortfolioMargin))
                {
                    response = await this.papiGetUmLeverageBracket(query);
                } else
                {
                    response = await this.fapiPrivateGetLeverageBracket(query);
                }
            } else if (isTrue(this.isInverse(type, subType)))
            {
                if (isTrue(isPortfolioMargin))
                {
                    response = await this.papiGetCmLeverageBracket(query);
                } else
                {
                    response = await this.dapiPrivateV2GetLeverageBracket(query);
                }
            } else
            {
                throw new NotSupported ((string)add(this.id, " loadLeverageBrackets() supports linear and inverse contracts only")) ;
            }
            ((IDictionary<string,object>)this.options)["leverageBrackets"] = new Dictionary<string, object>() {};
            for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
            {
                object entry = getValue(response, i);
                object marketId = this.safeString(entry, "symbol");
                object symbol = this.safeSymbol(marketId, null, null, "contract");
                object brackets = this.safeList(entry, "brackets", new List<object>() {});
                object result = new List<object>() {};
                for (object j = 0; isLessThan(j, getArrayLength(brackets)); postFixIncrement(ref j))
                {
                    object bracket = getValue(brackets, j);
                    object floorValue = this.safeString2(bracket, "notionalFloor", "qtyFloor");
                    object maintenanceMarginPercentage = this.safeString(bracket, "maintMarginRatio");
                    ((IList<object>)result).Add(new List<object>() {floorValue, maintenanceMarginPercentage});
                }
                ((IDictionary<string,object>)getValue(this.options, "leverageBrackets"))[(string)symbol] = result;
            }
        }
        return getValue(this.options, "leverageBrackets");
    }

    /**
     * @method
     * @name binance#fetchLeverageTiers
     * @description retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Notional-and-Leverage-Brackets
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Notional-Bracket-for-Symbol
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/UM-Notional-and-Leverage-Brackets
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/CM-Notional-and-Leverage-Brackets
     * @param {string[]|undefined} symbols list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch the leverage tiers for a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a dictionary of [leverage tiers structures]{@link https://docs.ccxt.com/#/?id=leverage-tiers-structure}, indexed by market symbols
     */
    public async override Task<object> fetchLeverageTiers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchLeverageTiers", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchLeverageTiers", null, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchLeverageTiers", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmLeverageBracket(parameters);
            } else
            {
                response = await this.fapiPrivateGetLeverageBracket(parameters);
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmLeverageBracket(parameters);
            } else
            {
                response = await this.dapiPrivateV2GetLeverageBracket(parameters);
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchLeverageTiers() supports linear and inverse contracts only")) ;
        }
        //
        // usdm
        //
        //    [
        //        {
        //            "symbol": "SUSHIUSDT",
        //            "brackets": [
        //                {
        //                    "bracket": 1,
        //                    "initialLeverage": 50,
        //                    "notionalCap": 50000,
        //                    "notionalFloor": 0,
        //                    "maintMarginRatio": 0.01,
        //                    "cum": 0.0
        //                },
        //                ...
        //            ]
        //        }
        //    ]
        //
        // coinm
        //
        //     [
        //         {
        //             "symbol":"XRPUSD_210326",
        //             "brackets":[
        //                 {
        //                     "bracket":1,
        //                     "initialLeverage":20,
        //                     "qtyCap":500000,
        //                     "qtyFloor":0,
        //                     "maintMarginRatio":0.0185,
        //                     "cum":0.0
        //                 }
        //             ]
        //         }
        //     ]
        //
        return this.parseLeverageTiers(response, symbols, "symbol");
    }

    public override object parseMarketLeverageTiers(object info, object market = null)
    {
        /**
         * @ignore
         * @method
         * @param {object} info Exchange response for 1 market
         * @param {object} market CCXT market
         */
        //
        //    {
        //        "symbol": "SUSHIUSDT",
        //        "brackets": [
        //            {
        //                "bracket": 1,
        //                "initialLeverage": 50,
        //                "notionalCap": 50000,
        //                "notionalFloor": 0,
        //                "maintMarginRatio": 0.01,
        //                "cum": 0.0
        //            },
        //            ...
        //        ]
        //    }
        //
        object marketId = this.safeString(info, "symbol");
        market = this.safeMarket(marketId, market, null, "contract");
        object brackets = this.safeList(info, "brackets", new List<object>() {});
        object tiers = new List<object>() {};
        for (object j = 0; isLessThan(j, getArrayLength(brackets)); postFixIncrement(ref j))
        {
            object bracket = getValue(brackets, j);
            ((IList<object>)tiers).Add(new Dictionary<string, object>() {
                { "tier", this.safeNumber(bracket, "bracket") },
                { "symbol", this.safeSymbol(marketId, market) },
                { "currency", getValue(market, "quote") },
                { "minNotional", this.safeNumber2(bracket, "notionalFloor", "qtyFloor") },
                { "maxNotional", this.safeNumber2(bracket, "notionalCap", "qtyCap") },
                { "maintenanceMarginRate", this.safeNumber(bracket, "maintMarginRatio") },
                { "maxLeverage", this.safeNumber(bracket, "initialLeverage") },
                { "info", bracket },
            });
        }
        return tiers;
    }

    /**
     * @method
     * @name binance#fetchPosition
     * @description fetch data on an open position
     * @see https://developers.binance.com/docs/derivatives/option/trade/Option-Position-Information
     * @param {string} symbol unified market symbol of the market the position is held in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    public async override Task<object> fetchPosition(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (!isTrue(getValue(market, "option")))
        {
            throw new NotSupported ((string)add(this.id, " fetchPosition() supports option markets only")) ;
        }
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.eapiPrivateGetPosition(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "entryPrice": "27.70000000",
        //             "symbol": "ETH-230426-1850-C",
        //             "side": "LONG",
        //             "quantity": "0.50000000",
        //             "reducibleQty": "0.50000000",
        //             "markValue": "10.250000000",
        //             "ror": "-0.2599",
        //             "unrealizedPNL": "-3.600000000",
        //             "markPrice": "20.5",
        //             "strikePrice": "1850.00000000",
        //             "positionCost": "13.85000000",
        //             "expiryDate": 1682496000000,
        //             "priceScale": 1,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "quoteAsset": "USDT",
        //             "time": 1682492427106
        //         }
        //     ]
        //
        return this.parsePosition(getValue(response, 0), market);
    }

    /**
     * @method
     * @name binance#fetchOptionPositions
     * @description fetch data on open options positions
     * @see https://developers.binance.com/docs/derivatives/option/trade/Option-Position-Information
     * @param {string[]|undefined} symbols list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [position structures]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    public async virtual Task<object> fetchOptionPositions(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbols, null)))
        {
            object symbol = null;
            if (isTrue(((symbols is IList<object>) || (symbols.GetType().IsGenericType && symbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
            {
                object symbolsLength = getArrayLength(symbols);
                if (isTrue(isGreaterThan(symbolsLength, 1)))
                {
                    throw new BadRequest ((string)add(this.id, " fetchPositions() symbols argument cannot contain more than 1 symbol")) ;
                }
                symbol = getValue(symbols, 0);
            } else
            {
                symbol = symbols;
            }
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        object response = await this.eapiPrivateGetPosition(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "entryPrice": "27.70000000",
        //             "symbol": "ETH-230426-1850-C",
        //             "side": "LONG",
        //             "quantity": "0.50000000",
        //             "reducibleQty": "0.50000000",
        //             "markValue": "10.250000000",
        //             "ror": "-0.2599",
        //             "unrealizedPNL": "-3.600000000",
        //             "markPrice": "20.5",
        //             "strikePrice": "1850.00000000",
        //             "positionCost": "13.85000000",
        //             "expiryDate": 1682496000000,
        //             "priceScale": 1,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "quoteAsset": "USDT",
        //             "time": 1682492427106
        //         }
        //     ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            ((IList<object>)result).Add(this.parsePosition(getValue(response, i), market));
        }
        return this.filterByArrayPositions(result, "symbol", symbols, false);
    }

    public override object parsePosition(object position, object market = null)
    {
        //
        //     {
        //         "entryPrice": "27.70000000",
        //         "symbol": "ETH-230426-1850-C",
        //         "side": "LONG",
        //         "quantity": "0.50000000",
        //         "reducibleQty": "0.50000000",
        //         "markValue": "10.250000000",
        //         "ror": "-0.2599",
        //         "unrealizedPNL": "-3.600000000",
        //         "markPrice": "20.5",
        //         "strikePrice": "1850.00000000",
        //         "positionCost": "13.85000000",
        //         "expiryDate": 1682496000000,
        //         "priceScale": 1,
        //         "quantityScale": 2,
        //         "optionSide": "CALL",
        //         "quoteAsset": "USDT",
        //         "time": 1682492427106
        //     }
        //
        object marketId = this.safeString(position, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object side = this.safeStringLower(position, "side");
        object quantity = this.safeString(position, "quantity");
        if (isTrue(!isEqual(side, "long")))
        {
            quantity = Precise.stringMul("-1", quantity);
        }
        object timestamp = this.safeInteger(position, "time");
        return this.safePosition(new Dictionary<string, object>() {
            { "info", position },
            { "id", null },
            { "symbol", symbol },
            { "entryPrice", this.safeNumber(position, "entryPrice") },
            { "markPrice", this.safeNumber(position, "markPrice") },
            { "notional", this.safeNumber(position, "markValue") },
            { "collateral", this.safeNumber(position, "positionCost") },
            { "unrealizedPnl", this.safeNumber(position, "unrealizedPNL") },
            { "side", side },
            { "contracts", this.parseNumber(quantity) },
            { "contractSize", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "hedged", null },
            { "maintenanceMargin", null },
            { "maintenanceMarginPercentage", null },
            { "initialMargin", null },
            { "initialMarginPercentage", null },
            { "leverage", null },
            { "liquidationPrice", null },
            { "marginRatio", null },
            { "marginMode", null },
            { "percentage", null },
        });
    }

    /**
     * @method
     * @name binance#fetchPositions
     * @description fetch all open positions
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Account-Information
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Position-Information
     * @see https://developers.binance.com/docs/derivatives/option/trade/Option-Position-Information
     * @param {string[]} [symbols] list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {object} [params.params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.method] method name to call, "positionRisk", "account" or "option", default is "positionRisk"
     * @param {bool} [params.useV2] set to true if you want to use the obsolete endpoint, where some more additional fields were provided
     * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
     */
    public async override Task<object> fetchPositions(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object defaultMethod = null;
        var defaultMethodparametersVariable = this.handleOptionAndParams(parameters, "fetchPositions", "method");
        defaultMethod = ((IList<object>)defaultMethodparametersVariable)[0];
        parameters = ((IList<object>)defaultMethodparametersVariable)[1];
        if (isTrue(isEqual(defaultMethod, null)))
        {
            object options = this.safeDict(this.options, "fetchPositions");
            if (isTrue(isEqual(options, null)))
            {
                defaultMethod = this.safeString(this.options, "fetchPositions", "positionRisk");
            } else
            {
                defaultMethod = "positionRisk";
            }
        }
        if (isTrue(isEqual(defaultMethod, "positionRisk")))
        {
            return await this.fetchPositionsRisk(symbols, parameters);
        } else if (isTrue(isEqual(defaultMethod, "account")))
        {
            return await this.fetchAccountPositions(symbols, parameters);
        } else if (isTrue(isEqual(defaultMethod, "option")))
        {
            return await this.fetchOptionPositions(symbols, parameters);
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, ".options[\"fetchPositions\"][\"method\"] or params[\"method\"] = \""), defaultMethod), "\" is invalid, please choose between \"account\", \"positionRisk\" and \"option\"")) ;
        }
    }

    /**
     * @method
     * @name binance#fetchAccountPositions
     * @ignore
     * @description fetch account positions
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Account-Information
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Position-Information
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V3
     * @param {string[]} [symbols] list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch positions in a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @param {boolean} [params.filterClosed] set to true if you would like to filter out closed positions, default is false
     * @param {boolean} [params.useV2] set to true if you want to use obsolete endpoint, where some more additional fields were provided
     * @returns {object} data on account positions
     */
    public async virtual Task<object> fetchAccountPositions(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(symbols, null)))
        {
            if (!isTrue(((symbols is IList<object>) || (symbols.GetType().IsGenericType && symbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
            {
                throw new ArgumentsRequired ((string)add(this.id, " fetchPositions() requires an array argument for symbols")) ;
            }
        }
        await this.loadMarkets();
        await this.loadLeverageBrackets(false, parameters);
        object defaultType = this.safeString(this.options, "defaultType", "future");
        object type = this.safeString(parameters, "type", defaultType);
        parameters = this.omit(parameters, "type");
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchAccountPositions", null, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchAccountPositions", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmAccount(parameters);
            } else
            {
                object useV2 = null;
                var useV2parametersVariable = this.handleOptionAndParams(parameters, "fetchAccountPositions", "useV2", false);
                useV2 = ((IList<object>)useV2parametersVariable)[0];
                parameters = ((IList<object>)useV2parametersVariable)[1];
                if (!isTrue(useV2))
                {
                    response = await this.fapiPrivateV3GetAccount(parameters);
                } else
                {
                    response = await this.fapiPrivateV2GetAccount(parameters);
                }
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmAccount(parameters);
            } else
            {
                response = await this.dapiPrivateGetAccount(parameters);
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchPositions() supports linear and inverse contracts only")) ;
        }
        object filterClosed = null;
        var filterClosedparametersVariable = this.handleOptionAndParams(parameters, "fetchAccountPositions", "filterClosed", false);
        filterClosed = ((IList<object>)filterClosedparametersVariable)[0];
        parameters = ((IList<object>)filterClosedparametersVariable)[1];
        object result = this.parseAccountPositions(response, filterClosed);
        symbols = this.marketSymbols(symbols);
        return this.filterByArrayPositions(result, "symbol", symbols, false);
    }

    /**
     * @method
     * @name binance#fetchPositionsRisk
     * @ignore
     * @description fetch positions risk
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Position-Information
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-UM-Position-Information
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Query-CM-Position-Information
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V3
     * @param {string[]|undefined} symbols list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch positions for a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @param {bool} [params.useV2] set to true if you want to use the obsolete endpoint, where some more additional fields were provided
     * @returns {object} data on the positions risk
     */
    public async override Task<object> fetchPositionsRisk(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(symbols, null)))
        {
            if (!isTrue(((symbols is IList<object>) || (symbols.GetType().IsGenericType && symbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
            {
                throw new ArgumentsRequired ((string)add(this.id, " fetchPositionsRisk() requires an array argument for symbols")) ;
            }
        }
        await this.loadMarkets();
        await this.loadLeverageBrackets(false, parameters);
        object request = new Dictionary<string, object>() {};
        object defaultType = "future";
        defaultType = this.safeString(this.options, "defaultType", defaultType);
        object type = this.safeString(parameters, "type", defaultType);
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchPositionsRisk", null, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchPositionsRisk", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        parameters = this.omit(parameters, "type");
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmPositionRisk(this.extend(request, parameters));
            } else
            {
                object useV2 = null;
                var useV2parametersVariable = this.handleOptionAndParams(parameters, "fetchPositionsRisk", "useV2", false);
                useV2 = ((IList<object>)useV2parametersVariable)[0];
                parameters = ((IList<object>)useV2parametersVariable)[1];
                parameters = this.extend(request, parameters);
                if (!isTrue(useV2))
                {
                    response = await this.fapiPrivateV3GetPositionRisk(parameters);
                } else
                {
                    response = await this.fapiPrivateV2GetPositionRisk(parameters);
                }
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmPositionRisk(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivateGetPositionRisk(this.extend(request, parameters));
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchPositionsRisk() supports linear and inverse contracts only")) ;
        }
        // ### Response examples ###
        //
        // For One-way position mode:
        //
        //     [
        //         {
        //             "symbol": "BTCUSDT",
        //             "positionSide": "BOTH",
        //             "positionAmt": "0.000",
        //             "entryPrice": "0.00000",
        //             "markPrice": "6679.50671178",
        //             "unRealizedProfit": "0.00000000",
        //             "liquidationPrice": "0",
        //             "isolatedMargin": "0.00000000",
        //             "marginType": "isolated",
        //             "isAutoAddMargin": "false",
        //             "leverage": "10",
        //             "maxNotionalValue": "20000000",
        //             "updateTime": 0
        //        }
        //     ]
        //
        // For Hedge position mode:
        //
        //     [
        //         {
        //             "entryPrice": "6563.66500",
        //             "marginType": "isolated",
        //             "isAutoAddMargin": "false",
        //             "isolatedMargin": "15517.54150468",
        //             "leverage": "10",
        //             "liquidationPrice": "5930.78",
        //             "markPrice": "6679.50671178",
        //             "maxNotionalValue": "20000000",
        //             "positionSide": "LONG",
        //             "positionAmt": "20.000", // negative value for 'SHORT'
        //             "symbol": "BTCUSDT",
        //             "unRealizedProfit": "2316.83423560"
        //             "updateTime": 1625474304765
        //         },
        //         .. second dict is similar, but with `positionSide: SHORT`
        //     ]
        //
        // inverse portfolio margin:
        //
        //     [
        //         {
        //             "symbol": "ETHUSD_PERP",
        //             "positionAmt": "1",
        //             "entryPrice": "2422.400000007",
        //             "markPrice": "2424.51267823",
        //             "unRealizedProfit": "0.0000036",
        //             "liquidationPrice": "293.57678898",
        //             "leverage": "100",
        //             "positionSide": "LONG",
        //             "updateTime": 1707371941861,
        //             "maxQty": "15",
        //             "notionalValue": "0.00412454",
        //             "breakEvenPrice": "2423.368960034"
        //         }
        //     ]
        //
        // linear portfolio margin:
        //
        //     [
        //         {
        //             "symbol": "BTCUSDT",
        //             "positionAmt": "0.01",
        //             "entryPrice": "44525.0",
        //             "markPrice": "45464.1735922",
        //             "unRealizedProfit": "9.39173592",
        //             "liquidationPrice": "38007.16308568",
        //             "leverage": "100",
        //             "positionSide": "LONG",
        //             "updateTime": 1707371879042,
        //             "maxNotionalValue": "500000.0",
        //             "notional": "454.64173592",
        //             "breakEvenPrice": "44542.81"
        //         }
        //     ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object rawPosition = getValue(response, i);
            object entryPriceString = this.safeString(rawPosition, "entryPrice");
            if (isTrue(Precise.stringGt(entryPriceString, "0")))
            {
                ((IList<object>)result).Add(this.parsePositionRisk(getValue(response, i)));
            }
        }
        symbols = this.marketSymbols(symbols);
        return this.filterByArrayPositions(result, "symbol", symbols, false);
    }

    /**
     * @method
     * @name binance#fetchFundingHistory
     * @description fetch the history of funding payments paid and received on this account
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Income-History
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Get-Income-History
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Income-History
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Income-History
     * @param {string} symbol unified market symbol
     * @param {int} [since] the earliest time in ms to fetch funding history for
     * @param {int} [limit] the maximum number of funding history structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest funding history entry
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch the funding history for a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a [funding history structure]{@link https://docs.ccxt.com/#/?id=funding-history-structure}
     */
    public async override Task<object> fetchFundingHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {
            { "incomeType", "FUNDING_FEE" },
        };
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
            if (!isTrue(getValue(market, "swap")))
            {
                throw new NotSupported ((string)add(this.id, " fetchFundingHistory() supports swap contracts only")) ;
            }
        }
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchFundingHistory", market, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchFundingHistory", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        var requestparametersVariable = this.handleUntilOption("endTime", request, parameters);
        request = ((IList<object>)requestparametersVariable)[0];
        parameters = ((IList<object>)requestparametersVariable)[1];
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object defaultType = this.safeString2(this.options, "fetchFundingHistory", "defaultType", "future");
        object type = this.safeString(parameters, "type", defaultType);
        parameters = this.omit(parameters, "type");
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmIncome(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivateGetIncome(this.extend(request, parameters));
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmIncome(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivateGetIncome(this.extend(request, parameters));
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchFundingHistory() supports linear and inverse contracts only")) ;
        }
        return this.parseIncomes(response, market, since, limit);
    }

    /**
     * @method
     * @name binance#setLeverage
     * @description set the level of leverage for a market
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Initial-Leverage
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Change-Initial-Leverage
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-UM-Initial-Leverage
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Change-CM-Initial-Leverage
     * @param {float} leverage the rate of leverage
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to set the leverage for a trading pair in a portfolio margin account
     * @returns {object} response from the exchange
     */
    public async override Task<object> setLeverage(object leverage, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " setLeverage() requires a symbol argument")) ;
        }
        // WARNING: THIS WILL INCREASE LIQUIDATION PRICE FOR OPEN ISOLATED LONG POSITIONS
        // AND DECREASE LIQUIDATION PRICE FOR OPEN ISOLATED SHORT POSITIONS
        if (isTrue(isTrue((isLessThan(leverage, 1))) || isTrue((isGreaterThan(leverage, 125)))))
        {
            throw new BadRequest ((string)add(this.id, " leverage should be between 1 and 125")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "leverage", leverage },
        };
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "setLeverage", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object response = null;
        if (isTrue(getValue(market, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiPostUmLeverage(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivatePostLeverage(this.extend(request, parameters));
            }
        } else if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiPostCmLeverage(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivatePostLeverage(this.extend(request, parameters));
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " setLeverage() supports linear and inverse contracts only")) ;
        }
        return response;
    }

    /**
     * @method
     * @name binance#setMarginMode
     * @description set margin mode to 'cross' or 'isolated'
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Margin-Type
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Change-Margin-Type
     * @param {string} marginMode 'cross' or 'isolated'
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} response from the exchange
     */
    public async override Task<object> setMarginMode(object marginMode, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " setMarginMode() requires a symbol argument")) ;
        }
        //
        // { "code": -4048 , "msg": "Margin type cannot be changed if there exists position." }
        //
        // or
        //
        // { "code": 200, "msg": "success" }
        //
        marginMode = ((string)marginMode).ToUpper();
        if (isTrue(isEqual(marginMode, "CROSS")))
        {
            marginMode = "CROSSED";
        }
        if (isTrue(isTrue((!isEqual(marginMode, "ISOLATED"))) && isTrue((!isEqual(marginMode, "CROSSED")))))
        {
            throw new BadRequest ((string)add(this.id, " marginMode must be either isolated or cross")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "marginType", marginMode },
        };
        object response = null;
        try
        {
            if (isTrue(getValue(market, "linear")))
            {
                response = await this.fapiPrivatePostMarginType(this.extend(request, parameters));
            } else if (isTrue(getValue(market, "inverse")))
            {
                response = await this.dapiPrivatePostMarginType(this.extend(request, parameters));
            } else
            {
                throw new NotSupported ((string)add(this.id, " setMarginMode() supports linear and inverse contracts only")) ;
            }
        } catch(Exception e)
        {
            // not an error
            // https://github.com/ccxt/ccxt/issues/11268
            // https://github.com/ccxt/ccxt/pull/11624
            // POST https://fapi.binance.com/fapi/v1/marginType 400 Bad Request
            // binanceusdm
            if (isTrue(e is MarginModeAlreadySet))
            {
                object throwMarginModeAlreadySet = this.safeBool(this.options, "throwMarginModeAlreadySet", false);
                if (isTrue(throwMarginModeAlreadySet))
                {
                    throw e;
                } else
                {
                    response = new Dictionary<string, object>() {
                        { "code", -4046 },
                        { "msg", "No need to change margin type." },
                    };
                }
            } else
            {
                throw e;
            }
        }
        return response;
    }

    /**
     * @method
     * @name binance#setPositionMode
     * @description set hedged to true or false for a market
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Change-Position-Mode
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Change-Position-Mode
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Current-Position-Mode
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Current-Position-Mode
     * @param {bool} hedged set to true to use dualSidePosition
     * @param {string} symbol not used by binance setPositionMode ()
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to set the position mode for a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} response from the exchange
     */
    public async override Task<object> setPositionMode(object hedged, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object defaultType = this.safeString(this.options, "defaultType", "future");
        object type = this.safeString(parameters, "type", defaultType);
        parameters = this.omit(parameters, new List<object>() {"type"});
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("setPositionMode", null, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "setPositionMode", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object dualSidePosition = null;
        if (isTrue(hedged))
        {
            dualSidePosition = "true";
        } else
        {
            dualSidePosition = "false";
        }
        object request = new Dictionary<string, object>() {
            { "dualSidePosition", dualSidePosition },
        };
        object response = null;
        if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiPostCmPositionSideDual(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivatePostPositionSideDual(this.extend(request, parameters));
            }
        } else if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiPostUmPositionSideDual(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivatePostPositionSideDual(this.extend(request, parameters));
            }
        } else
        {
            throw new BadRequest ((string)add(this.id, " setPositionMode() supports linear and inverse contracts only")) ;
        }
        //
        //     {
        //       "code": 200,
        //       "msg": "success"
        //     }
        //
        return response;
    }

    /**
     * @method
     * @name binance#fetchLeverages
     * @description fetch the set leverage for all markets
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Account-Information
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Account-Detail
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Account-Detail
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Symbol-Config
     * @param {string[]} [symbols] a list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a list of [leverage structures]{@link https://docs.ccxt.com/#/?id=leverage-structure}
     */
    public async override Task<object> fetchLeverages(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.loadLeverageBrackets(false, parameters);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchLeverages", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchLeverages", null, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchLeverages", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmAccount(parameters);
            } else
            {
                response = await this.fapiPrivateGetSymbolConfig(parameters);
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmAccount(parameters);
            } else
            {
                response = await this.dapiPrivateGetAccount(parameters);
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchLeverages() supports linear and inverse contracts only")) ;
        }
        object leverages = this.safeList(response, "positions", new List<object>() {});
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            leverages = response;
        }
        return this.parseLeverages(leverages, symbols, "symbol");
    }

    public override object parseLeverage(object leverage, object market = null)
    {
        object marketId = this.safeString(leverage, "symbol");
        object marginModeRaw = this.safeBool(leverage, "isolated");
        object marginMode = null;
        if (isTrue(!isEqual(marginModeRaw, null)))
        {
            marginMode = ((bool) isTrue(marginModeRaw)) ? "isolated" : "cross";
        }
        object marginTypeRaw = this.safeStringLower(leverage, "marginType");
        if (isTrue(!isEqual(marginTypeRaw, null)))
        {
            marginMode = ((bool) isTrue((isEqual(marginTypeRaw, "crossed")))) ? "cross" : "isolated";
        }
        object side = this.safeStringLower(leverage, "positionSide");
        object longLeverage = null;
        object shortLeverage = null;
        object leverageValue = this.safeInteger(leverage, "leverage");
        if (isTrue(isTrue((isEqual(side, null))) || isTrue((isEqual(side, "both")))))
        {
            longLeverage = leverageValue;
            shortLeverage = leverageValue;
        } else if (isTrue(isEqual(side, "long")))
        {
            longLeverage = leverageValue;
        } else if (isTrue(isEqual(side, "short")))
        {
            shortLeverage = leverageValue;
        }
        return new Dictionary<string, object>() {
            { "info", leverage },
            { "symbol", this.safeSymbol(marketId, market) },
            { "marginMode", marginMode },
            { "longLeverage", longLeverage },
            { "shortLeverage", shortLeverage },
        };
    }

    /**
     * @method
     * @name binance#fetchSettlementHistory
     * @description fetches historical settlement records
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Historical-Exercise-Records
     * @param {string} symbol unified market symbol of the settlement history
     * @param {int} [since] timestamp in ms
     * @param {int} [limit] number of records, default 100, max 100
     * @param {object} [params] exchange specific params
     * @returns {object[]} a list of [settlement history objects]{@link https://docs.ccxt.com/#/?id=settlement-history-structure}
     */
    public async virtual Task<object> fetchSettlementHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = ((bool) isTrue((isEqual(symbol, null)))) ? null : this.market(symbol);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchSettlementHistory", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        if (isTrue(!isEqual(type, "option")))
        {
            throw new NotSupported ((string)add(this.id, " fetchSettlementHistory() supports option markets only")) ;
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            symbol = getValue(market, "symbol");
            ((IDictionary<string,object>)request)["underlying"] = add(getValue(market, "baseId"), getValue(market, "quoteId"));
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.eapiPublicGetExerciseHistory(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "symbol": "ETH-230223-1900-P",
        //             "strikePrice": "1900",
        //             "realStrikePrice": "1665.5897334",
        //             "expiryDate": 1677139200000,
        //             "strikeResult": "REALISTIC_VALUE_STRICKEN"
        //         }
        //     ]
        //
        object settlements = this.parseSettlements(response, market);
        object sorted = this.sortBy(settlements, "timestamp");
        return this.filterBySymbolSinceLimit(sorted, symbol, since, limit);
    }

    /**
     * @method
     * @name binance#fetchMySettlementHistory
     * @description fetches historical settlement records of the user
     * @see https://developers.binance.com/docs/derivatives/option/trade/User-Exercise-Record
     * @param {string} symbol unified market symbol of the settlement history
     * @param {int} [since] timestamp in ms
     * @param {int} [limit] number of records
     * @param {object} [params] exchange specific params
     * @returns {object[]} a list of [settlement history objects]
     */
    public async virtual Task<object> fetchMySettlementHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = ((bool) isTrue((isEqual(symbol, null)))) ? null : this.market(symbol);
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchMySettlementHistory", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        if (isTrue(!isEqual(type, "option")))
        {
            throw new NotSupported ((string)add(this.id, " fetchMySettlementHistory() supports option markets only")) ;
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.eapiPrivateGetExerciseRecord(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": "1125899906842897036",
        //             "currency": "USDT",
        //             "symbol": "BTC-230728-30000-C",
        //             "exercisePrice": "30000.00000000",
        //             "markPrice": "29160.71284993",
        //             "quantity": "1.00000000",
        //             "amount": "0.00000000",
        //             "fee": "0.00000000",
        //             "createDate": 1690531200000,
        //             "priceScale": 0,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "positionSide": "LONG",
        //             "quoteAsset": "USDT"
        //         }
        //     ]
        //
        object settlements = this.parseSettlements(response, market);
        object sorted = this.sortBy(settlements, "timestamp");
        return this.filterBySymbolSinceLimit(sorted, getValue(market, "symbol"), since, limit);
    }

    public virtual object parseSettlement(object settlement, object market)
    {
        //
        // fetchSettlementHistory
        //
        //     {
        //         "symbol": "ETH-230223-1900-P",
        //         "strikePrice": "1900",
        //         "realStrikePrice": "1665.5897334",
        //         "expiryDate": 1677139200000,
        //         "strikeResult": "REALISTIC_VALUE_STRICKEN"
        //     }
        //
        // fetchMySettlementHistory
        //
        //     {
        //         "id": "1125899906842897036",
        //         "currency": "USDT",
        //         "symbol": "BTC-230728-30000-C",
        //         "exercisePrice": "30000.00000000",
        //         "markPrice": "29160.71284993",
        //         "quantity": "1.00000000",
        //         "amount": "0.00000000",
        //         "fee": "0.00000000",
        //         "createDate": 1690531200000,
        //         "priceScale": 0,
        //         "quantityScale": 2,
        //         "optionSide": "CALL",
        //         "positionSide": "LONG",
        //         "quoteAsset": "USDT"
        //     }
        //
        object timestamp = this.safeInteger2(settlement, "expiryDate", "createDate");
        object marketId = this.safeString(settlement, "symbol");
        return new Dictionary<string, object>() {
            { "info", settlement },
            { "symbol", this.safeSymbol(marketId, market) },
            { "price", this.safeNumber2(settlement, "realStrikePrice", "exercisePrice") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
    }

    public virtual object parseSettlements(object settlements, object market)
    {
        //
        // fetchSettlementHistory
        //
        //     [
        //         {
        //             "symbol": "ETH-230223-1900-P",
        //             "strikePrice": "1900",
        //             "realStrikePrice": "1665.5897334",
        //             "expiryDate": 1677139200000,
        //             "strikeResult": "EXTRINSIC_VALUE_EXPIRED"
        //         }
        //     ]
        //
        // fetchMySettlementHistory
        //
        //     [
        //         {
        //             "id": "1125899906842897036",
        //             "currency": "USDT",
        //             "symbol": "BTC-230728-30000-C",
        //             "exercisePrice": "30000.00000000",
        //             "markPrice": "29160.71284993",
        //             "quantity": "1.00000000",
        //             "amount": "0.00000000",
        //             "fee": "0.00000000",
        //             "createDate": 1690531200000,
        //             "priceScale": 0,
        //             "quantityScale": 2,
        //             "optionSide": "CALL",
        //             "positionSide": "LONG",
        //             "quoteAsset": "USDT"
        //         }
        //     ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(settlements)); postFixIncrement(ref i))
        {
            ((IList<object>)result).Add(this.parseSettlement(getValue(settlements, i), market));
        }
        return result;
    }

    /**
     * @method
     * @name binance#fetchLedgerEntry
     * @description fetch the history of changes, actions done by the user or operations that altered the balance of the user
     * @see https://developers.binance.com/docs/derivatives/option/account/Account-Funding-Flow
     * @param {string} id the identification number of the ledger entry
     * @param {string} code unified currency code
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    public async override Task<object> fetchLedgerEntry(object id, object code = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchLedgerEntry", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        if (isTrue(!isEqual(type, "option")))
        {
            throw new BadRequest ((string)add(this.id, " fetchLedgerEntry() can only be used for type option")) ;
        }
        this.checkRequiredArgument("fetchLedgerEntry", code, "code");
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "recordId", id },
            { "currency", getValue(currency, "id") },
        };
        object response = await this.eapiPrivateGetBill(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": "1125899906845701870",
        //             "asset": "USDT",
        //             "amount": "-0.16518203",
        //             "type": "FEE",
        //             "createDate": 1676621042489
        //         }
        //     ]
        //
        object first = this.safeDict(response, 0, response);
        return this.parseLedgerEntry(first, currency);
    }

    /**
     * @method
     * @name binance#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered the balance of the user
     * @see https://developers.binance.com/docs/derivatives/option/account/Account-Funding-Flow
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Income-History
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Get-Income-History
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-UM-Income-History
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-CM-Income-History
     * @param {string} [code] unified currency code
     * @param {int} [since] timestamp in ms of the earliest ledger entry
     * @param {int} [limit] max number of ledger entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest ledger entry
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch the ledger for a portfolio margin account
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    public async override Task<object> fetchLedger(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchLedger", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDynamic("fetchLedger", code, since, limit, parameters);
        }
        object type = null;
        object subType = null;
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {};
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchLedger", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchLedger", null, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, "until");
            ((IDictionary<string,object>)request)["endTime"] = until;
        }
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchLedger", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(type, "option")))
        {
            this.checkRequiredArgument("fetchLedger", code, "code");
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
            response = await this.eapiPrivateGetBill(this.extend(request, parameters));
        } else if (isTrue(this.isLinear(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmIncome(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivateGetIncome(this.extend(request, parameters));
            }
        } else if (isTrue(this.isInverse(type, subType)))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmIncome(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivateGetIncome(this.extend(request, parameters));
            }
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchLedger() supports contract wallets only")) ;
        }
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "id": "1125899906845701870",
        //             "asset": "USDT",
        //             "amount": "-0.16518203",
        //             "type": "FEE",
        //             "createDate": 1676621042489
        //         }
        //     ]
        //
        // futures (fapi, dapi, papi)
        //
        //     [
        //         {
        //             "symbol": "",
        //             "incomeType": "TRANSFER",
        //             "income": "10.00000000",
        //             "asset": "USDT",
        //             "time": 1677645250000,
        //             "info": "TRANSFER",
        //             "tranId": 131001573082,
        //             "tradeId": ""
        //         }
        //     ]
        //
        return this.parseLedger(response, currency, since, limit);
    }

    public override object parseLedgerEntry(object item, object currency = null)
    {
        //
        // options (eapi)
        //
        //     {
        //         "id": "1125899906845701870",
        //         "asset": "USDT",
        //         "amount": "-0.16518203",
        //         "type": "FEE",
        //         "createDate": 1676621042489
        //     }
        //
        // futures (fapi, dapi, papi)
        //
        //     {
        //         "symbol": "",
        //         "incomeType": "TRANSFER",
        //         "income": "10.00000000",
        //         "asset": "USDT",
        //         "time": 1677645250000,
        //         "info": "TRANSFER",
        //         "tranId": 131001573082,
        //         "tradeId": ""
        //     }
        //
        object amount = this.safeString2(item, "amount", "income");
        object direction = null;
        if (isTrue(Precise.stringLe(amount, "0")))
        {
            direction = "out";
            amount = Precise.stringMul("-1", amount);
        } else
        {
            direction = "in";
        }
        object currencyId = this.safeString(item, "asset");
        object code = this.safeCurrencyCode(currencyId, currency);
        currency = this.safeCurrency(currencyId, currency);
        object timestamp = this.safeInteger2(item, "createDate", "time");
        object type = this.safeString2(item, "type", "incomeType");
        return this.safeLedgerEntry(new Dictionary<string, object>() {
            { "info", item },
            { "id", this.safeString2(item, "id", "tranId") },
            { "direction", direction },
            { "account", null },
            { "referenceAccount", null },
            { "referenceId", this.safeString(item, "tradeId") },
            { "type", this.parseLedgerEntryType(type) },
            { "currency", code },
            { "amount", this.parseNumber(amount) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "before", null },
            { "after", null },
            { "status", null },
            { "fee", null },
        }, currency);
    }

    public virtual object parseLedgerEntryType(object type)
    {
        object ledgerType = new Dictionary<string, object>() {
            { "FEE", "fee" },
            { "FUNDING_FEE", "fee" },
            { "OPTIONS_PREMIUM_FEE", "fee" },
            { "POSITION_LIMIT_INCREASE_FEE", "fee" },
            { "CONTRACT", "trade" },
            { "REALIZED_PNL", "trade" },
            { "TRANSFER", "transfer" },
            { "CROSS_COLLATERAL_TRANSFER", "transfer" },
            { "INTERNAL_TRANSFER", "transfer" },
            { "COIN_SWAP_DEPOSIT", "deposit" },
            { "COIN_SWAP_WITHDRAW", "withdrawal" },
            { "OPTIONS_SETTLE_PROFIT", "settlement" },
            { "DELIVERED_SETTELMENT", "settlement" },
            { "WELCOME_BONUS", "cashback" },
            { "CONTEST_REWARD", "cashback" },
            { "COMMISSION_REBATE", "rebate" },
            { "API_REBATE", "rebate" },
            { "REFERRAL_KICKBACK", "referral" },
            { "COMMISSION", "commission" },
        };
        return this.safeString(ledgerType, type, type);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object urls = ((object)this.urls);
        if (!isTrue((inOp(getValue(urls, "api"), api))))
        {
            throw new NotSupported ((string)add(add(add(this.id, " does not have a testnet/sandbox URL for "), api), " endpoints")) ;
        }
        object url = getValue(getValue(this.urls, "api"), api);
        url = add(url, add("/", path));
        if (isTrue(isEqual(path, "historicalTrades")))
        {
            if (isTrue(this.apiKey))
            {
                headers = new Dictionary<string, object>() {
                    { "X-MBX-APIKEY", this.apiKey },
                };
            } else
            {
                throw new AuthenticationError ((string)add(this.id, " historicalTrades endpoint requires `apiKey` credential")) ;
            }
        }
        object userDataStream = isTrue((isEqual(path, "userDataStream"))) || isTrue((isEqual(path, "listenKey")));
        if (isTrue(userDataStream))
        {
            if (isTrue(this.apiKey))
            {
                // v1 special case for userDataStream
                headers = new Dictionary<string, object>() {
                    { "X-MBX-APIKEY", this.apiKey },
                    { "Content-Type", "application/x-www-form-urlencoded" },
                };
                if (isTrue(!isEqual(method, "GET")))
                {
                    body = this.urlencode(parameters);
                }
            } else
            {
                throw new AuthenticationError ((string)add(this.id, " userDataStream endpoint requires `apiKey` credential")) ;
            }
        } else if (isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue((isEqual(api, "private"))) || isTrue((isEqual(api, "eapiPrivate")))) || isTrue((isTrue(isEqual(api, "sapi")) && isTrue(!isEqual(path, "system/status"))))) || isTrue((isEqual(api, "sapiV2")))) || isTrue((isEqual(api, "sapiV3")))) || isTrue((isEqual(api, "sapiV4")))) || isTrue((isEqual(api, "dapiPrivate")))) || isTrue((isEqual(api, "dapiPrivateV2")))) || isTrue((isEqual(api, "fapiPrivate")))) || isTrue((isEqual(api, "fapiPrivateV2")))) || isTrue((isEqual(api, "fapiPrivateV3")))) || isTrue((isTrue(isEqual(api, "papi")) && isTrue(!isEqual(path, "ping"))))))
        {
            this.checkRequiredCredentials();
            if (isTrue(isTrue(isEqual(method, "POST")) && isTrue((isTrue((isEqual(path, "order"))) || isTrue((isEqual(path, "sor/order")))))))
            {
                // inject in implicit API calls
                object newClientOrderId = this.safeString(parameters, "newClientOrderId");
                if (isTrue(isEqual(newClientOrderId, null)))
                {
                    object isSpotOrMargin = (isTrue(isGreaterThan(getIndexOf(api, "sapi"), -1)) || isTrue(isEqual(api, "private")));
                    object marketType = ((bool) isTrue(isSpotOrMargin)) ? "spot" : "future";
                    object defaultId = ((bool) isTrue((!isTrue(isSpotOrMargin)))) ? "x-xcKtGhcu" : "x-R4BD3S82";
                    object broker = this.safeDict(this.options, "broker", new Dictionary<string, object>() {});
                    object brokerId = this.safeString(broker, marketType, defaultId);
                    ((IDictionary<string,object>)parameters)["newClientOrderId"] = add(brokerId, this.uuid22());
                }
            }
            object query = null;
            // handle batchOrders
            if (isTrue(isTrue((isEqual(path, "batchOrders"))) && isTrue((isEqual(method, "POST")))))
            {
                object batchOrders = this.safeValue(parameters, "batchOrders");
                object queryBatch = (this.json(batchOrders));
                ((IDictionary<string,object>)parameters)["batchOrders"] = queryBatch;
            }
            object defaultRecvWindow = this.safeInteger(this.options, "recvWindow");
            object extendedParams = this.extend(new Dictionary<string, object>() {
                { "timestamp", this.nonce() },
            }, parameters);
            if (isTrue(!isEqual(defaultRecvWindow, null)))
            {
                ((IDictionary<string,object>)extendedParams)["recvWindow"] = defaultRecvWindow;
            }
            object recvWindow = this.safeInteger(parameters, "recvWindow");
            if (isTrue(!isEqual(recvWindow, null)))
            {
                ((IDictionary<string,object>)extendedParams)["recvWindow"] = recvWindow;
            }
            if (isTrue(isTrue((isEqual(api, "sapi"))) && isTrue((isEqual(path, "asset/dust")))))
            {
                query = this.urlencodeWithArrayRepeat(extendedParams);
            } else if (isTrue(isTrue(isTrue(isTrue(isTrue((isEqual(path, "batchOrders"))) || isTrue((isGreaterThanOrEqual(getIndexOf(path, "sub-account"), 0)))) || isTrue((isEqual(path, "capital/withdraw/apply")))) || isTrue((isGreaterThanOrEqual(getIndexOf(path, "staking"), 0)))) || isTrue((isGreaterThanOrEqual(getIndexOf(path, "simple-earn"), 0)))))
            {
                if (isTrue(isTrue((isEqual(method, "DELETE"))) && isTrue((isEqual(path, "batchOrders")))))
                {
                    object orderidlist = this.safeList(extendedParams, "orderidlist", new List<object>() {});
                    object origclientorderidlist = this.safeList(extendedParams, "origclientorderidlist", new List<object>() {});
                    extendedParams = this.omit(extendedParams, new List<object>() {"orderidlist", "origclientorderidlist"});
                    query = this.rawencode(extendedParams);
                    object orderidlistLength = getArrayLength(orderidlist);
                    object origclientorderidlistLength = getArrayLength(origclientorderidlist);
                    if (isTrue(isGreaterThan(orderidlistLength, 0)))
                    {
                        query = add(add(add(add(query, "&"), "orderidlist=%5B"), String.Join("%2C", ((IList<object>)orderidlist).ToArray())), "%5D");
                    }
                    if (isTrue(isGreaterThan(origclientorderidlistLength, 0)))
                    {
                        query = add(add(add(add(query, "&"), "origclientorderidlist=%5B"), String.Join("%2C", ((IList<object>)origclientorderidlist).ToArray())), "%5D");
                    }
                } else
                {
                    query = this.rawencode(extendedParams);
                }
            } else
            {
                query = this.urlencode(extendedParams);
            }
            object signature = null;
            if (isTrue(isGreaterThan(getIndexOf(this.secret, "PRIVATE KEY"), -1)))
            {
                if (isTrue(isGreaterThan(((string)this.secret).Length, 120)))
                {
                    signature = this.encodeURIComponent(rsa(query, this.secret, sha256));
                } else
                {
                    signature = this.encodeURIComponent(eddsa(this.encode(query), this.secret, ed25519));
                }
            } else
            {
                signature = this.hmac(this.encode(query), this.encode(this.secret), sha256);
            }
            query = add(query, add(add("&", "signature="), signature));
            headers = new Dictionary<string, object>() {
                { "X-MBX-APIKEY", this.apiKey },
            };
            if (isTrue(isTrue((isEqual(method, "GET"))) || isTrue((isEqual(method, "DELETE")))))
            {
                url = add(url, add("?", query));
            } else
            {
                body = query;
                ((IDictionary<string,object>)headers)["Content-Type"] = "application/x-www-form-urlencoded";
            }
        } else
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public virtual object getExceptionsByUrl(object url, object exactOrBroad)
    {
        object marketType = null;
        object hostname = ((bool) isTrue((!isEqual(this.hostname, null)))) ? this.hostname : "binance.com";
        if (isTrue(((string)url).StartsWith(((string)add(add("https://api.", hostname), "/")))))
        {
            marketType = "spot";
        } else if (isTrue(((string)url).StartsWith(((string)add(add("https://dapi.", hostname), "/")))))
        {
            marketType = "inverse";
        } else if (isTrue(((string)url).StartsWith(((string)add(add("https://fapi.", hostname), "/")))))
        {
            marketType = "linear";
        } else if (isTrue(((string)url).StartsWith(((string)add(add("https://eapi.", hostname), "/")))))
        {
            marketType = "option";
        } else if (isTrue(((string)url).StartsWith(((string)add(add("https://papi.", hostname), "/")))))
        {
            marketType = "portfoliomargin";
        }
        if (isTrue(!isEqual(marketType, null)))
        {
            object exceptionsForMarketType = this.safeDict(this.exceptions, marketType, new Dictionary<string, object>() {});
            return this.safeDict(exceptionsForMarketType, exactOrBroad, new Dictionary<string, object>() {});
        }
        return new Dictionary<string, object>() {};
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isTrue((isEqual(code, 418))) || isTrue((isEqual(code, 429)))))
        {
            throw new DDoSProtection ((string)add(add(add(add(add(add(this.id, " "), ((object)code).ToString()), " "), reason), " "), body)) ;
        }
        // error response in a form: { "code": -1013, "msg": "Invalid quantity." }
        // following block cointains legacy checks against message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if (isTrue(isGreaterThanOrEqual(code, 400)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(body, "Price * QTY is zero or less"), 0)))
            {
                throw new InvalidOrder ((string)add(add(this.id, " order cost = amount * price is zero or less "), body)) ;
            }
            if (isTrue(isGreaterThanOrEqual(getIndexOf(body, "LOT_SIZE"), 0)))
            {
                throw new InvalidOrder ((string)add(add(this.id, " order amount should be evenly divisible by lot size "), body)) ;
            }
            if (isTrue(isGreaterThanOrEqual(getIndexOf(body, "PRICE_FILTER"), 0)))
            {
                throw new InvalidOrder ((string)add(add(this.id, " order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid value in general, use this.priceToPrecision (symbol, amount) "), body)) ;
            }
        }
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        // response in format {'msg': 'The coin does not exist.', 'success': true/false}
        object success = this.safeBool(response, "success", true);
        if (!isTrue(success))
        {
            object messageNew = this.safeString(response, "msg");
            object parsedMessage = null;
            if (isTrue(!isEqual(messageNew, null)))
            {
                try
                {
                    parsedMessage = parseJson(messageNew);
                } catch(Exception e)
                {
                    // do nothing
                    parsedMessage = null;
                }
                if (isTrue(!isEqual(parsedMessage, null)))
                {
                    response = parsedMessage;
                }
            }
        }
        object message = this.safeString(response, "msg");
        if (isTrue(!isEqual(message, null)))
        {
            this.throwExactlyMatchedException(this.getExceptionsByUrl(url, "exact"), message, add(add(this.id, " "), message));
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, add(add(this.id, " "), message));
            this.throwBroadlyMatchedException(this.getExceptionsByUrl(url, "broad"), message, add(add(this.id, " "), message));
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, add(add(this.id, " "), message));
        }
        // checks against error codes
        object error = this.safeString(response, "code");
        if (isTrue(!isEqual(error, null)))
        {
            // https://github.com/ccxt/ccxt/issues/6501
            // https://github.com/ccxt/ccxt/issues/7742
            if (isTrue(isTrue((isEqual(error, "200"))) || isTrue(Precise.stringEquals(error, "0"))))
            {
                return null;
            }
            // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
            // despite that their message is very confusing, it is raised by Binance
            // on a temporary ban, the API key is valid, but disabled for a while
            if (isTrue(isTrue((isEqual(error, "-2015"))) && isTrue(getValue(this.options, "hasAlreadyAuthenticatedSuccessfully"))))
            {
                throw new DDoSProtection ((string)add(add(this.id, " "), body)) ;
            }
            object feedback = add(add(this.id, " "), body);
            if (isTrue(isEqual(message, "No need to change margin type.")))
            {
                throw new MarginModeAlreadySet ((string)feedback) ;
            }
            this.throwExactlyMatchedException(this.getExceptionsByUrl(url, "exact"), error, feedback);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), error, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        if (!isTrue(success))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), body)) ;
        }
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            // cancelOrders returns an array like this: [{"code":-2011,"msg":"Unknown order sent."}]
            object arrayLength = getArrayLength(response);
            if (isTrue(isEqual(arrayLength, 1)))
            {
                object element = getValue(response, 0);
                object errorCode = this.safeString(element, "code");
                if (isTrue(!isEqual(errorCode, null)))
                {
                    this.throwExactlyMatchedException(this.getExceptionsByUrl(url, "exact"), errorCode, add(add(this.id, " "), body));
                    this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, add(add(this.id, " "), body));
                }
            }
        }
        return null;
    }

    public override object calculateRateLimiterCost(object api, object method, object path, object parameters, object config = null)
    {
        config ??= new Dictionary<string, object>();
        if (isTrue(isTrue((inOp(config, "noCoin"))) && !isTrue((inOp(parameters, "coin")))))
        {
            return getValue(config, "noCoin");
        } else if (isTrue(isTrue((inOp(config, "noSymbol"))) && !isTrue((inOp(parameters, "symbol")))))
        {
            return getValue(config, "noSymbol");
        } else if (isTrue(isTrue((inOp(config, "noPoolId"))) && !isTrue((inOp(parameters, "poolId")))))
        {
            return getValue(config, "noPoolId");
        } else if (isTrue(isTrue((inOp(config, "byLimit"))) && isTrue((inOp(parameters, "limit")))))
        {
            object limit = getValue(parameters, "limit");
            object byLimit = ((object)getValue(config, "byLimit"));
            for (object i = 0; isLessThan(i, getArrayLength(byLimit)); postFixIncrement(ref i))
            {
                object entry = getValue(byLimit, i);
                if (isTrue(isLessThanOrEqual(limit, getValue(entry, 0))))
                {
                    return getValue(entry, 1);
                }
            }
        }
        return this.safeValue(config, "cost", 1);
    }

    public async override Task<object> request(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null, object config = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        config ??= new Dictionary<string, object>();
        object response = await this.fetch2(path, api, method, parameters, headers, body, config);
        // a workaround for {"code":-2015,"msg":"Invalid API-key, IP, or permissions for action."}
        if (isTrue(isEqual(api, "private")))
        {
            ((IDictionary<string,object>)this.options)["hasAlreadyAuthenticatedSuccessfully"] = true;
        }
        return response;
    }

    public async virtual Task<object> modifyMarginHelper(object symbol, object amount, object addOrReduce, object parameters = null)
    {
        // used to modify isolated positions
        parameters ??= new Dictionary<string, object>();
        object defaultType = this.safeString(this.options, "defaultType", "future");
        if (isTrue(isEqual(defaultType, "spot")))
        {
            defaultType = "future";
        }
        object type = this.safeString(parameters, "type", defaultType);
        if (isTrue(isTrue((isEqual(type, "margin"))) || isTrue((isEqual(type, "spot")))))
        {
            throw new NotSupported ((string)add(this.id, " add / reduce margin only supported with type future or delivery")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        amount = this.amountToPrecision(symbol, amount);
        object request = new Dictionary<string, object>() {
            { "type", addOrReduce },
            { "symbol", getValue(market, "id") },
            { "amount", amount },
        };
        object response = null;
        object code = null;
        if (isTrue(getValue(market, "linear")))
        {
            code = getValue(market, "quote");
            response = await this.fapiPrivatePostPositionMargin(this.extend(request, parameters));
        } else
        {
            code = getValue(market, "base");
            response = await this.dapiPrivatePostPositionMargin(this.extend(request, parameters));
        }
        //
        //     {
        //         "code": 200,
        //         "msg": "Successfully modify position margin.",
        //         "amount": 0.001,
        //         "type": 1
        //     }
        //
        return this.extend(this.parseMarginModification(response, market), new Dictionary<string, object>() {
            { "code", code },
        });
    }

    public override object parseMarginModification(object data, object market = null)
    {
        //
        // add/reduce margin
        //
        //     {
        //         "code": 200,
        //         "msg": "Successfully modify position margin.",
        //         "amount": 0.001,
        //         "type": 1
        //     }
        //
        // fetchMarginAdjustmentHistory
        //
        //    {
        //        symbol: "XRPUSDT",
        //        type: "1",
        //        deltaType: "TRADE",
        //        amount: "2.57148240",
        //        asset: "USDT",
        //        time: "1711046271555",
        //        positionSide: "BOTH",
        //        clientTranId: ""
        //    }
        //
        object rawType = this.safeInteger(data, "type");
        object errorCode = this.safeString(data, "code");
        object marketId = this.safeString(data, "symbol");
        object timestamp = this.safeInteger(data, "time");
        market = this.safeMarket(marketId, market, null, "swap");
        object noErrorCode = isEqual(errorCode, null);
        object success = isEqual(errorCode, "200");
        return new Dictionary<string, object>() {
            { "info", data },
            { "symbol", getValue(market, "symbol") },
            { "type", ((bool) isTrue((isEqual(rawType, 1)))) ? "add" : "reduce" },
            { "marginMode", "isolated" },
            { "amount", this.safeNumber(data, "amount") },
            { "code", this.safeString(data, "asset") },
            { "total", null },
            { "status", ((bool) isTrue((isTrue(success) || isTrue(noErrorCode)))) ? "ok" : "failed" },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
    }

    /**
     * @method
     * @name binance#reduceMargin
     * @description remove margin from a position
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Isolated-Position-Margin
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Modify-Isolated-Position-Margin
     * @param {string} symbol unified market symbol
     * @param {float} amount the amount of margin to remove
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=reduce-margin-structure}
     */
    public async override Task<object> reduceMargin(object symbol, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.modifyMarginHelper(symbol, amount, 2, parameters);
    }

    /**
     * @method
     * @name binance#addMargin
     * @description add margin
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Modify-Isolated-Position-Margin
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Modify-Isolated-Position-Margin
     * @param {string} symbol unified market symbol
     * @param {float} amount amount of margin to add
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [margin structure]{@link https://docs.ccxt.com/#/?id=add-margin-structure}
     */
    public async override Task<object> addMargin(object symbol, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.modifyMarginHelper(symbol, amount, 1, parameters);
    }

    /**
     * @method
     * @name binance#fetchCrossBorrowRate
     * @description fetch the rate of interest to borrow a currency for margin trading
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Margin-Interest-Rate-History
     * @param {string} code unified currency code
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    public async override Task<object> fetchCrossBorrowRate(object code, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
        };
        object response = await this.sapiGetMarginInterestRateHistory(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "asset": "USDT",
        //             "timestamp": 1638230400000,
        //             "dailyInterestRate": "0.0006",
        //             "vipLevel": 0
        //         },
        //     ]
        //
        object rate = this.safeDict(response, 0);
        return this.parseBorrowRate(rate);
    }

    /**
     * @method
     * @name binance#fetchIsolatedBorrowRate
     * @description fetch the rate of interest to borrow a currency for margin trading
     * @see https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Fee-Data
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     *
     * EXCHANGE SPECIFIC PARAMETERS
     * @param {object} [params.vipLevel] user's current specific margin data will be returned if viplevel is omitted
     * @returns {object} an [isolated borrow rate structure]{@link https://docs.ccxt.com/#/?id=isolated-borrow-rate-structure}
     */
    public async override Task<object> fetchIsolatedBorrowRate(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "symbol", symbol },
        };
        object borrowRates = await this.fetchIsolatedBorrowRates(this.extend(request, parameters));
        return this.safeDict(borrowRates, symbol);
    }

    /**
     * @method
     * @name binance#fetchIsolatedBorrowRates
     * @description fetch the borrow interest rates of all currencies
     * @see https://developers.binance.com/docs/margin_trading/account/Query-Isolated-Margin-Fee-Data
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {object} [params.symbol] unified market symbol
     *
     * EXCHANGE SPECIFIC PARAMETERS
     * @param {object} [params.vipLevel] user's current specific margin data will be returned if viplevel is omitted
     * @returns {object} a [borrow rate structure]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    public async override Task<object> fetchIsolatedBorrowRates(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object symbol = this.safeString(parameters, "symbol");
        parameters = this.omit(parameters, "symbol");
        if (isTrue(!isEqual(symbol, null)))
        {
            object market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        object response = await this.sapiGetMarginIsolatedMarginData(this.extend(request, parameters));
        //
        //    [
        //        {
        //            "vipLevel": 0,
        //            "symbol": "BTCUSDT",
        //            "leverage": "10",
        //            "data": [
        //                {
        //                    "coin": "BTC",
        //                    "dailyInterest": "0.00026125",
        //                    "borrowLimit": "270"
        //                },
        //                {
        //                    "coin": "USDT",
        //                    "dailyInterest": "0.000475",
        //                    "borrowLimit": "2100000"
        //                }
        //            ]
        //        }
        //    ]
        //
        return this.parseIsolatedBorrowRates(response);
    }

    /**
     * @method
     * @name binance#fetchBorrowRateHistory
     * @description retrieves a history of a currencies borrow interest rate at specific time slots
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Margin-Interest-Rate-History
     * @param {string} code unified currency code
     * @param {int} [since] timestamp for the earliest borrow rate
     * @param {int} [limit] the maximum number of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure} to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} an array of [borrow rate structures]{@link https://docs.ccxt.com/#/?id=borrow-rate-structure}
     */
    public async virtual Task<object> fetchBorrowRateHistory(object code, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(limit, null)))
        {
            limit = 93;
        } else if (isTrue(isGreaterThan(limit, 93)))
        {
            throw new BadRequest ((string)add(this.id, " fetchBorrowRateHistory() limit parameter cannot exceed 92")) ;
        }
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "limit", limit },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
            object endTime = subtract(this.sum(since, multiply(limit, 86400000)), 1); // required when startTime is further than 93 days in the past
            object now = this.milliseconds();
            ((IDictionary<string,object>)request)["endTime"] = mathMin(endTime, now); // cannot have an endTime later than current time
        }
        object response = await this.sapiGetMarginInterestRateHistory(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "asset": "USDT",
        //             "timestamp": 1638230400000,
        //             "dailyInterestRate": "0.0006",
        //             "vipLevel": 0
        //         },
        //     ]
        //
        return this.parseBorrowRateHistory(response, code, since, limit);
    }

    public override object parseBorrowRate(object info, object currency = null)
    {
        //
        //    {
        //        "asset": "USDT",
        //        "timestamp": 1638230400000,
        //        "dailyInterestRate": "0.0006",
        //        "vipLevel": 0
        //    }
        //
        object timestamp = this.safeInteger(info, "timestamp");
        object currencyId = this.safeString(info, "asset");
        return new Dictionary<string, object>() {
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "rate", this.safeNumber(info, "dailyInterestRate") },
            { "period", 86400000 },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "info", info },
        };
    }

    public override object parseIsolatedBorrowRate(object info, object market = null)
    {
        //
        //    {
        //        "vipLevel": 0,
        //        "symbol": "BTCUSDT",
        //        "leverage": "10",
        //        "data": [
        //            {
        //                "coin": "BTC",
        //                "dailyInterest": "0.00026125",
        //                "borrowLimit": "270"
        //            },
        //            {
        //                "coin": "USDT",
        //                "dailyInterest": "0.000475",
        //                "borrowLimit": "2100000"
        //            }
        //        ]
        //    }
        //
        object marketId = this.safeString(info, "symbol");
        market = this.safeMarket(marketId, market, null, "spot");
        object data = this.safeList(info, "data");
        object baseInfo = this.safeDict(data, 0);
        object quoteInfo = this.safeDict(data, 1);
        return new Dictionary<string, object>() {
            { "info", info },
            { "symbol", this.safeString(market, "symbol") },
            { "base", this.safeString(baseInfo, "coin") },
            { "baseRate", this.safeNumber(baseInfo, "dailyInterest") },
            { "quote", this.safeString(quoteInfo, "coin") },
            { "quoteRate", this.safeNumber(quoteInfo, "dailyInterest") },
            { "period", 86400000 },
            { "timestamp", null },
            { "datetime", null },
        };
    }

    /**
     * @method
     * @name binance#createGiftCode
     * @description create gift code
     * @see https://developers.binance.com/docs/gift_card/market-data/Create-a-single-token-gift-card
     * @param {string} code gift code
     * @param {float} amount amount of currency for the gift
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} The gift code id, code, currency and amount
     */
    public async virtual Task<object> createGiftCode(object code, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        // ensure you have enough token in your funding account before calling this code
        object request = new Dictionary<string, object>() {
            { "token", getValue(currency, "id") },
            { "amount", amount },
        };
        object response = await this.sapiPostGiftcardCreateCode(this.extend(request, parameters));
        //
        //     {
        //         "code": "000000",
        //         "message": "success",
        //         "data": { referenceNo: "0033002404219823", code: "AP6EXTLKNHM6CEX7" },
        //         "success": true
        //     }
        //
        object data = this.safeDict(response, "data");
        object giftcardCode = this.safeString(data, "code");
        object id = this.safeString(data, "referenceNo");
        return new Dictionary<string, object>() {
            { "info", response },
            { "id", id },
            { "code", giftcardCode },
            { "currency", code },
            { "amount", amount },
        };
    }

    /**
     * @method
     * @name binance#redeemGiftCode
     * @description redeem gift code
     * @see https://developers.binance.com/docs/gift_card/market-data/Redeem-a-Binance-Gift-Card
     * @param {string} giftcardCode
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} response from the exchange
     */
    public async virtual Task<object> redeemGiftCode(object giftcardCode, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "code", giftcardCode },
        };
        object response = await this.sapiPostGiftcardRedeemCode(this.extend(request, parameters));
        //
        //     {
        //         "code": "000000",
        //         "message": "success",
        //         "data": {
        //             "referenceNo": "0033002404219823",
        //             "identityNo": "10316431732801474560"
        //         },
        //         "success": true
        //     }
        //
        return response;
    }

    /**
     * @method
     * @name binance#verifyGiftCode
     * @description verify gift code
     * @see https://developers.binance.com/docs/gift_card/market-data/Verify-Binance-Gift-Card-by-Gift-Card-Number
     * @param {string} id reference number id
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} response from the exchange
     */
    public async virtual Task<object> verifyGiftCode(object id, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "referenceNo", id },
        };
        object response = await this.sapiGetGiftcardVerify(this.extend(request, parameters));
        //
        //     {
        //         "code": "000000",
        //         "message": "success",
        //         "data": { valid: true },
        //         "success": true
        //     }
        //
        return response;
    }

    /**
     * @method
     * @name binance#fetchBorrowInterest
     * @description fetch the interest owed by the user for borrowing currency for margin trading
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-Interest-History
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/account/Get-Margin-BorrowLoan-Interest-History
     * @param {string} [code] unified currency code
     * @param {string} [symbol] unified market symbol when fetch interest in isolated markets
     * @param {int} [since] the earliest time in ms to fetch borrrow interest for
     * @param {int} [limit] the maximum number of structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch the borrow interest in a portfolio margin account
     * @returns {object[]} a list of [borrow interest structures]{@link https://docs.ccxt.com/#/?id=borrow-interest-structure}
     */
    public async override Task<object> fetchBorrowInterest(object code = null, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchBorrowInterest", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(code, null)))
        {
            object currency = this.currency(code);
            ((IDictionary<string,object>)request)["asset"] = getValue(currency, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["size"] = limit;
        }
        var requestparametersVariable = this.handleUntilOption("endTime", request, parameters);
        request = ((IList<object>)requestparametersVariable)[0];
        parameters = ((IList<object>)requestparametersVariable)[1];
        object response = null;
        if (isTrue(isPortfolioMargin))
        {
            response = await this.papiGetMarginMarginInterestHistory(this.extend(request, parameters));
        } else
        {
            if (isTrue(!isEqual(symbol, null)))
            {
                market = this.market(symbol);
                ((IDictionary<string,object>)request)["isolatedSymbol"] = getValue(market, "id");
            }
            response = await this.sapiGetMarginInterestHistory(this.extend(request, parameters));
        }
        //
        // spot margin
        //
        //     {
        //         "rows":[
        //             {
        //                 "isolatedSymbol": "BNBUSDT", // isolated symbol, will not be returned for crossed margin
        //                 "asset": "BNB",
        //                 "interest": "0.02414667",
        //                 "interestAccuredTime": 1566813600000,
        //                 "interestRate": "0.01600000",
        //                 "principal": "36.22000000",
        //                 "type": "ON_BORROW"
        //             }
        //         ],
        //         "total": 1
        //     }
        //
        // spot margin portfolio margin
        //
        //     {
        //         "total": 49,
        //         "rows": [
        //             {
        //                 "txId": 1656187724899910076,
        //                 "interestAccuredTime": 1707541200000,
        //                 "asset": "USDT",
        //                 "rawAsset": "USDT",
        //                 "principal": "0.00011146",
        //                 "interest": "0.00000001",
        //                 "interestRate": "0.00089489",
        //                 "type": "PERIODIC"
        //             },
        //         ]
        //     }
        //
        object rows = this.safeList(response, "rows");
        object interest = this.parseBorrowInterests(rows, market);
        return this.filterByCurrencySinceLimit(interest, code, since, limit);
    }

    public override object parseBorrowInterest(object info, object market = null)
    {
        object symbol = this.safeString(info, "isolatedSymbol");
        object timestamp = this.safeInteger(info, "interestAccuredTime");
        object marginMode = ((bool) isTrue((isEqual(symbol, null)))) ? "cross" : "isolated";
        return new Dictionary<string, object>() {
            { "info", info },
            { "symbol", symbol },
            { "currency", this.safeCurrencyCode(this.safeString(info, "asset")) },
            { "interest", this.safeNumber(info, "interest") },
            { "interestRate", this.safeNumber(info, "interestRate") },
            { "amountBorrowed", this.safeNumber(info, "principal") },
            { "marginMode", marginMode },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
    }

    /**
     * @method
     * @name binance#repayCrossMargin
     * @description repay borrowed margin and interest
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Repay
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-Account-Borrow-Repay
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Repay-Debt
     * @param {string} code unified currency code of the currency to repay
     * @param {float} amount the amount to repay
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to repay margin in a portfolio margin account
     * @param {string} [params.repayCrossMarginMethod] *portfolio margin only* 'papiPostRepayLoan' (default), 'papiPostMarginRepayDebt' (alternative)
     * @param {string} [params.specifyRepayAssets] *portfolio margin papiPostMarginRepayDebt only* specific asset list to repay debt
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    public async override Task<object> repayCrossMargin(object code, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
        };
        object response = null;
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "repayCrossMargin", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        if (isTrue(isPortfolioMargin))
        {
            object method = null;
            var methodparametersVariable = this.handleOptionAndParams2(parameters, "repayCrossMargin", "repayCrossMarginMethod", "method");
            method = ((IList<object>)methodparametersVariable)[0];
            parameters = ((IList<object>)methodparametersVariable)[1];
            if (isTrue(isEqual(method, "papiPostMarginRepayDebt")))
            {
                response = await this.papiPostMarginRepayDebt(this.extend(request, parameters));
            } else
            {
                response = await this.papiPostRepayLoan(this.extend(request, parameters));
            }
        } else
        {
            ((IDictionary<string,object>)request)["isIsolated"] = "FALSE";
            ((IDictionary<string,object>)request)["type"] = "REPAY";
            response = await this.sapiPostMarginBorrowRepay(this.extend(request, parameters));
        }
        return this.parseMarginLoan(response, currency);
    }

    /**
     * @method
     * @name binance#repayIsolatedMargin
     * @description repay borrowed margin and interest
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-Account-Borrow-Repay
     * @param {string} symbol unified market symbol, required for isolated margin
     * @param {string} code unified currency code of the currency to repay
     * @param {float} amount the amount to repay
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    public async override Task<object> repayIsolatedMargin(object symbol, object code, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "symbol", getValue(market, "id") },
            { "isIsolated", "TRUE" },
            { "type", "REPAY" },
        };
        object response = await this.sapiPostMarginBorrowRepay(this.extend(request, parameters));
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        return this.parseMarginLoan(response, currency);
    }

    /**
     * @method
     * @name binance#borrowCrossMargin
     * @description create a loan to borrow margin
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-Account-Borrow-Repay
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Margin-Account-Borrow
     * @param {string} code unified currency code of the currency to borrow
     * @param {float} amount the amount to borrow
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {boolean} [params.portfolioMargin] set to true if you would like to borrow margin in a portfolio margin account
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    public async override Task<object> borrowCrossMargin(object code, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
        };
        object response = null;
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "borrowCrossMargin", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        if (isTrue(isPortfolioMargin))
        {
            response = await this.papiPostMarginLoan(this.extend(request, parameters));
        } else
        {
            ((IDictionary<string,object>)request)["isIsolated"] = "FALSE";
            ((IDictionary<string,object>)request)["type"] = "BORROW";
            response = await this.sapiPostMarginBorrowRepay(this.extend(request, parameters));
        }
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        return this.parseMarginLoan(response, currency);
    }

    /**
     * @method
     * @name binance#borrowIsolatedMargin
     * @description create a loan to borrow margin
     * @see https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-Account-Borrow-Repay
     * @param {string} symbol unified market symbol, required for isolated margin
     * @param {string} code unified currency code of the currency to borrow
     * @param {float} amount the amount to borrow
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [margin loan structure]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    public async override Task<object> borrowIsolatedMargin(object symbol, object code, object amount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "symbol", getValue(market, "id") },
            { "isIsolated", "TRUE" },
            { "type", "BORROW" },
        };
        object response = await this.sapiPostMarginBorrowRepay(this.extend(request, parameters));
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        return this.parseMarginLoan(response, currency);
    }

    public virtual object parseMarginLoan(object info, object currency = null)
    {
        //
        //     {
        //         "tranId": 108988250265,
        //         "clientTag":""
        //     }
        //
        // repayCrossMargin alternative endpoint
        //
        //     {
        //         "asset": "USDC",
        //         "amount": 10,
        //         "specifyRepayAssets": null,
        //         "updateTime": 1727170761267,
        //         "success": true
        //     }
        //
        object currencyId = this.safeString(info, "asset");
        object timestamp = this.safeInteger(info, "updateTime");
        return new Dictionary<string, object>() {
            { "id", this.safeInteger(info, "tranId") },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "amount", this.safeNumber(info, "amount") },
            { "symbol", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "info", info },
        };
    }

    /**
     * @method
     * @name binance#fetchOpenInterestHistory
     * @description Retrieves the open interest history of a currency
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Open-Interest-Statistics
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Open-Interest-Statistics
     * @param {string} symbol Unified CCXT market symbol
     * @param {string} timeframe "5m","15m","30m","1h","2h","4h","6h","12h", or "1d"
     * @param {int} [since] the time(ms) of the earliest record to retrieve as a unix timestamp
     * @param {int} [limit] default 30, max 500
     * @param {object} [params] exchange specific parameters
     * @param {int} [params.until] the time(ms) of the latest record to retrieve as a unix timestamp
     * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @returns {object} an array of [open interest structure]{@link https://docs.ccxt.com/#/?id=open-interest-structure}
     */
    public async override Task<object> fetchOpenInterestHistory(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "5m";
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(timeframe, "1m")))
        {
            throw new BadRequest ((string)add(this.id, "fetchOpenInterestHistory cannot use the 1m timeframe")) ;
        }
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchOpenInterestHistory", "paginate", false);
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDeterministic("fetchOpenInterestHistory", symbol, since, limit, timeframe, parameters, 500);
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "period", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object symbolKey = ((bool) isTrue(getValue(market, "linear"))) ? "symbol" : "pair";
        ((IDictionary<string,object>)request)[(string)symbolKey] = getValue(market, "id");
        if (isTrue(getValue(market, "inverse")))
        {
            ((IDictionary<string,object>)request)["contractType"] = this.safeString(parameters, "contractType", "CURRENT_QUARTER");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        object until = this.safeInteger(parameters, "until"); // unified in milliseconds
        object endTime = this.safeInteger(parameters, "endTime", until); // exchange-specific in milliseconds
        parameters = this.omit(parameters, new List<object>() {"endTime", "until"});
        if (isTrue(endTime))
        {
            ((IDictionary<string,object>)request)["endTime"] = endTime;
        } else if (isTrue(since))
        {
            if (isTrue(isEqual(limit, null)))
            {
                limit = 30; // Exchange default
            }
            object duration = this.parseTimeframe(timeframe);
            ((IDictionary<string,object>)request)["endTime"] = this.sum(since, multiply(multiply(duration, limit), 1000));
        }
        object response = null;
        if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiDataGetOpenInterestHist(this.extend(request, parameters));
        } else
        {
            response = await this.fapiDataGetOpenInterestHist(this.extend(request, parameters));
        }
        //
        //  [
        //      {
        //          "symbol":"BTCUSDT",
        //          "sumOpenInterest":"75375.61700000",
        //          "sumOpenInterestValue":"3248828883.71251440",
        //          "timestamp":1642179900000
        //      },
        //      ...
        //  ]
        //
        return this.parseOpenInterests(response, market, since, limit);
    }

    /**
     * @method
     * @name binance#fetchOpenInterest
     * @description retrieves the open interest of a contract trading pair
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Open-Interest
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Open-Interest
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Open-Interest
     * @param {string} symbol unified CCXT market symbol
     * @param {object} [params] exchange specific parameters
     * @returns {object} an open interest structure{@link https://docs.ccxt.com/#/?id=open-interest-structure}
     */
    public async override Task<object> fetchOpenInterest(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {};
        if (isTrue(getValue(market, "option")))
        {
            ((IDictionary<string,object>)request)["underlyingAsset"] = getValue(market, "baseId");
            if (isTrue(isEqual(getValue(market, "expiry"), null)))
            {
                throw new NotSupported ((string)add(add(this.id, " fetchOpenInterest does not support "), symbol)) ;
            }
            ((IDictionary<string,object>)request)["expiration"] = this.yymmdd(getValue(market, "expiry"));
        } else
        {
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        object response = null;
        if (isTrue(getValue(market, "option")))
        {
            response = await this.eapiPublicGetOpenInterest(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPublicGetOpenInterest(this.extend(request, parameters));
        } else
        {
            response = await this.fapiPublicGetOpenInterest(this.extend(request, parameters));
        }
        //
        // futures (fapi)
        //
        //     {
        //         "symbol": "ETHUSDT_230331",
        //         "openInterest": "23581.677",
        //         "time": 1677356872265
        //     }
        //
        // futures (dapi)
        //
        //     {
        //         "symbol": "ETHUSD_PERP",
        //         "pair": "ETHUSD",
        //         "openInterest": "26542436",
        //         "contractType": "PERPETUAL",
        //         "time": 1677360272224
        //     }
        //
        // options (eapi)
        //
        //     [
        //         {
        //             "symbol": "ETH-230225-1625-C",
        //             "sumOpenInterest": "460.50",
        //             "sumOpenInterestUsd": "734957.4358092150",
        //             "timestamp": "1677304860000"
        //         }
        //     ]
        //
        if (isTrue(getValue(market, "option")))
        {
            symbol = getValue(market, "symbol");
            object result = this.parseOpenInterests(response, market);
            for (object i = 0; isLessThan(i, getArrayLength(result)); postFixIncrement(ref i))
            {
                object item = getValue(result, i);
                if (isTrue(isEqual(getValue(item, "symbol"), symbol)))
                {
                    return item;
                }
            }
        } else
        {
            return this.parseOpenInterest(response, market);
        }
        return null;
    }

    public override object parseOpenInterest(object interest, object market = null)
    {
        object timestamp = this.safeInteger2(interest, "timestamp", "time");
        object id = this.safeString(interest, "symbol");
        object amount = this.safeNumber2(interest, "sumOpenInterest", "openInterest");
        object value = this.safeNumber2(interest, "sumOpenInterestValue", "sumOpenInterestUsd");
        // Inverse returns the number of contracts different from the base or quote volume in this case
        // compared with https://www.binance.com/en/futures/funding-history/quarterly/4
        return this.safeOpenInterest(new Dictionary<string, object>() {
            { "symbol", this.safeSymbol(id, market, null, "contract") },
            { "baseVolume", ((bool) isTrue(getValue(market, "inverse"))) ? null : amount },
            { "quoteVolume", value },
            { "openInterestAmount", amount },
            { "openInterestValue", value },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "info", interest },
        }, market);
    }

    /**
     * @method
     * @name binance#fetchMyLiquidations
     * @description retrieves the users liquidated positions
     * @see https://developers.binance.com/docs/margin_trading/trade/Get-Force-Liquidation-Record
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Users-Force-Orders
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Users-Force-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Users-UM-Force-Orders
     * @see https://developers.binance.com/docs/derivatives/portfolio-margin/trade/Query-Users-CM-Force-Orders
     * @param {string} [symbol] unified CCXT market symbol
     * @param {int} [since] the earliest time in ms to fetch liquidations for
     * @param {int} [limit] the maximum number of liquidation structures to retrieve
     * @param {object} [params] exchange specific parameters for the binance api endpoint
     * @param {int} [params.until] timestamp in ms of the latest liquidation
     * @param {boolean} [params.paginate] *spot only* default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
     * @param {boolean} [params.portfolioMargin] set to true if you would like to fetch liquidations in a portfolio margin account
     * @param {string} [params.type] "spot"
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} an array of [liquidation structures]{@link https://docs.ccxt.com/#/?id=liquidation-structure}
     */
    public async override Task<object> fetchMyLiquidations(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchMyLiquidations", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallIncremental("fetchMyLiquidations", symbol, since, limit, parameters, "current", 100);
        }
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("fetchMyLiquidations", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchMyLiquidations", market, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object isPortfolioMargin = null;
        var isPortfolioMarginparametersVariable = this.handleOptionAndParams2(parameters, "fetchMyLiquidations", "papi", "portfolioMargin", false);
        isPortfolioMargin = ((IList<object>)isPortfolioMarginparametersVariable)[0];
        parameters = ((IList<object>)isPortfolioMarginparametersVariable)[1];
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(type, "spot")))
        {
            ((IDictionary<string,object>)request)["autoCloseType"] = "LIQUIDATION";
        }
        if (isTrue(!isEqual(market, null)))
        {
            object symbolKey = ((bool) isTrue(getValue(market, "spot"))) ? "isolatedSymbol" : "symbol";
            if (!isTrue(isPortfolioMargin))
            {
                ((IDictionary<string,object>)request)[(string)symbolKey] = getValue(market, "id");
            }
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            if (isTrue(isEqual(type, "spot")))
            {
                ((IDictionary<string,object>)request)["size"] = limit;
            } else
            {
                ((IDictionary<string,object>)request)["limit"] = limit;
            }
        }
        var requestparametersVariable = this.handleUntilOption("endTime", request, parameters);
        request = ((IList<object>)requestparametersVariable)[0];
        parameters = ((IList<object>)requestparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(type, "spot")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetMarginForceOrders(this.extend(request, parameters));
            } else
            {
                response = await this.sapiGetMarginForceLiquidationRec(this.extend(request, parameters));
            }
        } else if (isTrue(isEqual(subType, "linear")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetUmForceOrders(this.extend(request, parameters));
            } else
            {
                response = await this.fapiPrivateGetForceOrders(this.extend(request, parameters));
            }
        } else if (isTrue(isEqual(subType, "inverse")))
        {
            if (isTrue(isPortfolioMargin))
            {
                response = await this.papiGetCmForceOrders(this.extend(request, parameters));
            } else
            {
                response = await this.dapiPrivateGetForceOrders(this.extend(request, parameters));
            }
        } else
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchMyLiquidations() does not support "), getValue(market, "type")), " markets")) ;
        }
        //
        // margin
        //
        //     {
        //         "rows": [
        //             {
        //                 "avgPrice": "0.00388359",
        //                 "executedQty": "31.39000000",
        //                 "orderId": 180015097,
        //                 "price": "0.00388110",
        //                 "qty": "31.39000000",
        //                 "side": "SELL",
        //                 "symbol": "BNBBTC",
        //                 "timeInForce": "GTC",
        //                 "isIsolated": true,
        //                 "updatedTime": 1558941374745
        //             }
        //         ],
        //         "total": 1
        //     }
        //
        // linear
        //
        //     [
        //         {
        //             "orderId": 6071832819,
        //             "symbol": "BTCUSDT",
        //             "status": "FILLED",
        //             "clientOrderId": "autoclose-1596107620040000020",
        //             "price": "10871.09",
        //             "avgPrice": "10913.21000",
        //             "origQty": "0.001",
        //             "executedQty": "0.001",
        //             "cumQuote": "10.91321",
        //             "timeInForce": "IOC",
        //             "type": "LIMIT",
        //             "reduceOnly": false,
        //             "closePosition": false,
        //             "side": "SELL",
        //             "positionSide": "BOTH",
        //             "stopPrice": "0",
        //             "workingType": "CONTRACT_PRICE",
        //             "origType": "LIMIT",
        //             "time": 1596107620044,
        //             "updateTime": 1596107620087
        //         },
        //     ]
        //
        // inverse
        //
        //     [
        //         {
        //             "orderId": 165123080,
        //             "symbol": "BTCUSD_200925",
        //             "pair": "BTCUSD",
        //             "status": "FILLED",
        //             "clientOrderId": "autoclose-1596542005017000006",
        //             "price": "11326.9",
        //             "avgPrice": "11326.9",
        //             "origQty": "1",
        //             "executedQty": "1",
        //             "cumBase": "0.00882854",
        //             "timeInForce": "IOC",
        //             "type": "LIMIT",
        //             "reduceOnly": false,
        //             "closePosition": false,
        //             "side": "SELL",
        //             "positionSide": "BOTH",
        //             "stopPrice": "0",
        //             "workingType": "CONTRACT_PRICE",
        //             "priceProtect": false,
        //             "origType": "LIMIT",
        //             "time": 1596542005019,
        //             "updateTime": 1596542005050
        //         },
        //     ]
        //
        object liquidations = this.safeList(response, "rows", response);
        return this.parseLiquidations(liquidations, market, since, limit);
    }

    public override object parseLiquidation(object liquidation, object market = null)
    {
        //
        // margin
        //
        //     {
        //         "avgPrice": "0.00388359",
        //         "executedQty": "31.39000000",
        //         "orderId": 180015097,
        //         "price": "0.00388110",
        //         "qty": "31.39000000",
        //         "side": "SELL",
        //         "symbol": "BNBBTC",
        //         "timeInForce": "GTC",
        //         "isIsolated": true,
        //         "updatedTime": 1558941374745
        //     }
        //
        // linear
        //
        //     {
        //         "orderId": 6071832819,
        //         "symbol": "BTCUSDT",
        //         "status": "FILLED",
        //         "clientOrderId": "autoclose-1596107620040000020",
        //         "price": "10871.09",
        //         "avgPrice": "10913.21000",
        //         "origQty": "0.001",
        //         "executedQty": "0.001",
        //         "cumQuote": "10.91321",
        //         "timeInForce": "IOC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "SELL",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0",
        //         "workingType": "CONTRACT_PRICE",
        //         "origType": "LIMIT",
        //         "time": 1596107620044,
        //         "updateTime": 1596107620087
        //     }
        //
        // inverse
        //
        //     {
        //         "orderId": 165123080,
        //         "symbol": "BTCUSD_200925",
        //         "pair": "BTCUSD",
        //         "status": "FILLED",
        //         "clientOrderId": "autoclose-1596542005017000006",
        //         "price": "11326.9",
        //         "avgPrice": "11326.9",
        //         "origQty": "1",
        //         "executedQty": "1",
        //         "cumBase": "0.00882854",
        //         "timeInForce": "IOC",
        //         "type": "LIMIT",
        //         "reduceOnly": false,
        //         "closePosition": false,
        //         "side": "SELL",
        //         "positionSide": "BOTH",
        //         "stopPrice": "0",
        //         "workingType": "CONTRACT_PRICE",
        //         "priceProtect": false,
        //         "origType": "LIMIT",
        //         "time": 1596542005019,
        //         "updateTime": 1596542005050
        //     }
        //
        object marketId = this.safeString(liquidation, "symbol");
        object timestamp = this.safeInteger2(liquidation, "updatedTime", "updateTime");
        return this.safeLiquidation(new Dictionary<string, object>() {
            { "info", liquidation },
            { "symbol", this.safeSymbol(marketId, market) },
            { "contracts", this.safeNumber(liquidation, "executedQty") },
            { "contractSize", this.safeNumber(market, "contractSize") },
            { "price", this.safeNumber(liquidation, "avgPrice") },
            { "baseValue", this.safeNumber(liquidation, "cumBase") },
            { "quoteValue", this.safeNumber(liquidation, "cumQuote") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        });
    }

    /**
     * @method
     * @name binance#fetchGreeks
     * @description fetches an option contracts greeks, financial metrics used to measure the factors that affect the price of an options contract
     * @see https://developers.binance.com/docs/derivatives/option/market-data/Option-Mark-Price
     * @param {string} symbol unified symbol of the market to fetch greeks for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [greeks structure]{@link https://docs.ccxt.com/#/?id=greeks-structure}
     */
    public async override Task<object> fetchGreeks(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.eapiPublicGetMark(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "symbol": "BTC-231229-40000-C",
        //             "markPrice": "2012",
        //             "bidIV": "0.60236275",
        //             "askIV": "0.62267244",
        //             "markIV": "0.6125176",
        //             "delta": "0.39111646",
        //             "theta": "-32.13948531",
        //             "gamma": "0.00004656",
        //             "vega": "51.70062218",
        //             "highPriceLimit": "6474",
        //             "lowPriceLimit": "5"
        //         }
        //     ]
        //
        return this.parseGreeks(getValue(response, 0), market);
    }

    public override object parseGreeks(object greeks, object market = null)
    {
        //
        //     {
        //         "symbol": "BTC-231229-40000-C",
        //         "markPrice": "2012",
        //         "bidIV": "0.60236275",
        //         "askIV": "0.62267244",
        //         "markIV": "0.6125176",
        //         "delta": "0.39111646",
        //         "theta": "-32.13948531",
        //         "gamma": "0.00004656",
        //         "vega": "51.70062218",
        //         "highPriceLimit": "6474",
        //         "lowPriceLimit": "5"
        //     }
        //
        object marketId = this.safeString(greeks, "symbol");
        object symbol = this.safeSymbol(marketId, market);
        return new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "delta", this.safeNumber(greeks, "delta") },
            { "gamma", this.safeNumber(greeks, "gamma") },
            { "theta", this.safeNumber(greeks, "theta") },
            { "vega", this.safeNumber(greeks, "vega") },
            { "rho", null },
            { "bidSize", null },
            { "askSize", null },
            { "bidImpliedVolatility", this.safeNumber(greeks, "bidIV") },
            { "askImpliedVolatility", this.safeNumber(greeks, "askIV") },
            { "markImpliedVolatility", this.safeNumber(greeks, "markIV") },
            { "bidPrice", null },
            { "askPrice", null },
            { "markPrice", this.safeNumber(greeks, "markPrice") },
            { "lastPrice", null },
            { "underlyingPrice", null },
            { "info", greeks },
        };
    }

    public async override Task<object> fetchTradingLimits(object symbols = null, object parameters = null)
    {
        // this method should not be called directly, use loadTradingLimits () instead
        parameters ??= new Dictionary<string, object>();
        object markets = await this.fetchMarkets();
        object tradingLimits = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object market = getValue(markets, i);
            object symbol = getValue(market, "symbol");
            if (isTrue(isTrue((isEqual(symbols, null))) || isTrue((this.inArray(symbol, symbols)))))
            {
                ((IDictionary<string,object>)tradingLimits)[(string)symbol] = getValue(getValue(market, "limits"), "amount");
            }
        }
        return tradingLimits;
    }

    /**
     * @method
     * @name binance#fetchPositionMode
     * @description fetchs the position mode, hedged or one way, hedged for binance is set identically for all linear markets or all inverse markets
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Get-Current-Position-Mode
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Get-Current-Position-Mode
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} an object detailing whether the market is in hedged or one-way mode
     */
    public async virtual Task<object> fetchPositionMode(object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchPositionMode", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(subType, "linear")))
        {
            response = await this.fapiPrivateGetPositionSideDual(parameters);
        } else if (isTrue(isEqual(subType, "inverse")))
        {
            response = await this.dapiPrivateGetPositionSideDual(parameters);
        } else
        {
            throw new BadRequest ((string)add(this.id, " fetchPositionMode requires either a symbol argument or params[\"subType\"]")) ;
        }
        //
        //    {
        //        dualSidePosition: false
        //    }
        //
        object dualSidePosition = this.safeBool(response, "dualSidePosition");
        return new Dictionary<string, object>() {
            { "info", response },
            { "hedged", dualSidePosition },
        };
    }

    /**
     * @method
     * @name binance#fetchMarginModes
     * @description fetches margin modes ("isolated" or "cross") that the market for the symbol in in, with symbol=undefined all markets for a subType (linear/inverse) are returned
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Account-Information
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Symbol-Config
     * @param {string[]} symbols unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a list of [margin mode structures]{@link https://docs.ccxt.com/#/?id=margin-mode-structure}
     */
    public async override Task<object> fetchMarginModes(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbols, null)))
        {
            symbols = this.marketSymbols(symbols);
            market = this.market(getValue(symbols, 0));
        }
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchMarginMode", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(subType, "linear")))
        {
            response = await this.fapiPrivateGetSymbolConfig(parameters);
        } else if (isTrue(isEqual(subType, "inverse")))
        {
            response = await this.dapiPrivateGetAccount(parameters);
        } else
        {
            throw new BadRequest ((string)add(this.id, " fetchMarginModes () supports linear and inverse subTypes only")) ;
        }
        object assets = this.safeList(response, "positions", new List<object>() {});
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            assets = response;
        }
        return this.parseMarginModes(assets, symbols, "symbol", "swap");
    }

    /**
     * @method
     * @name binance#fetchMarginMode
     * @description fetches the margin mode of a specific symbol
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Symbol-Config
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/Account-Information
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object} a [margin mode structure]{@link https://docs.ccxt.com/#/?id=margin-mode-structure}
     */
    public async override Task<object> fetchMarginMode(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchMarginMode", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(subType, "linear")))
        {
            object request = new Dictionary<string, object>() {
                { "symbol", getValue(market, "id") },
            };
            response = await this.fapiPrivateGetSymbolConfig(this.extend(request, parameters));
        } else if (isTrue(isEqual(subType, "inverse")))
        {
            object fetchMarginModesResponse = await this.fetchMarginModes(new List<object>() {symbol}, parameters);
            return getValue(fetchMarginModesResponse, symbol);
        } else
        {
            throw new BadRequest ((string)add(this.id, " fetchMarginMode () supports linear and inverse subTypes only")) ;
        }
        return this.parseMarginMode(getValue(response, 0), market);
    }

    public override object parseMarginMode(object marginMode, object market = null)
    {
        object marketId = this.safeString(marginMode, "symbol");
        market = this.safeMarket(marketId, market);
        object marginModeRaw = this.safeBool(marginMode, "isolated");
        object reMarginMode = null;
        if (isTrue(!isEqual(marginModeRaw, null)))
        {
            reMarginMode = ((bool) isTrue(marginModeRaw)) ? "isolated" : "cross";
        }
        object marginTypeRaw = this.safeStringLower(marginMode, "marginType");
        if (isTrue(!isEqual(marginTypeRaw, null)))
        {
            reMarginMode = ((bool) isTrue((isEqual(marginTypeRaw, "crossed")))) ? "cross" : "isolated";
        }
        return new Dictionary<string, object>() {
            { "info", marginMode },
            { "symbol", getValue(market, "symbol") },
            { "marginMode", reMarginMode },
        };
    }

    /**
     * @method
     * @name binance#fetchOption
     * @description fetches option data that is commonly found in an option chain
     * @see https://developers.binance.com/docs/derivatives/option/market-data/24hr-Ticker-Price-Change-Statistics
     * @param {string} symbol unified market symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [option chain structure]{@link https://docs.ccxt.com/#/?id=option-chain-structure}
     */
    public async override Task<object> fetchOption(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.eapiPublicGetTicker(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "symbol": "BTC-241227-80000-C",
        //             "priceChange": "0",
        //             "priceChangePercent": "0",
        //             "lastPrice": "2750",
        //             "lastQty": "0",
        //             "open": "2750",
        //             "high": "2750",
        //             "low": "2750",
        //             "volume": "0",
        //             "amount": "0",
        //             "bidPrice": "4880",
        //             "askPrice": "0",
        //             "openTime": 0,
        //             "closeTime": 0,
        //             "firstTradeId": 0,
        //             "tradeCount": 0,
        //             "strikePrice": "80000",
        //             "exercisePrice": "63944.09893617"
        //         }
        //     ]
        //
        object chain = this.safeDict(response, 0, new Dictionary<string, object>() {});
        return this.parseOption(chain, null, market);
    }

    public override object parseOption(object chain, object currency = null, object market = null)
    {
        //
        //     {
        //         "symbol": "BTC-241227-80000-C",
        //         "priceChange": "0",
        //         "priceChangePercent": "0",
        //         "lastPrice": "2750",
        //         "lastQty": "0",
        //         "open": "2750",
        //         "high": "2750",
        //         "low": "2750",
        //         "volume": "0",
        //         "amount": "0",
        //         "bidPrice": "4880",
        //         "askPrice": "0",
        //         "openTime": 0,
        //         "closeTime": 0,
        //         "firstTradeId": 0,
        //         "tradeCount": 0,
        //         "strikePrice": "80000",
        //         "exercisePrice": "63944.09893617"
        //     }
        //
        object marketId = this.safeString(chain, "symbol");
        market = this.safeMarket(marketId, market);
        return new Dictionary<string, object>() {
            { "info", chain },
            { "currency", null },
            { "symbol", getValue(market, "symbol") },
            { "timestamp", null },
            { "datetime", null },
            { "impliedVolatility", null },
            { "openInterest", null },
            { "bidPrice", this.safeNumber(chain, "bidPrice") },
            { "askPrice", this.safeNumber(chain, "askPrice") },
            { "midPrice", null },
            { "markPrice", null },
            { "lastPrice", this.safeNumber(chain, "lastPrice") },
            { "underlyingPrice", this.safeNumber(chain, "exercisePrice") },
            { "change", this.safeNumber(chain, "priceChange") },
            { "percentage", this.safeNumber(chain, "priceChangePercent") },
            { "baseVolume", this.safeNumber(chain, "volume") },
            { "quoteVolume", null },
        };
    }

    /**
     * @method
     * @name binance#fetchMarginAdjustmentHistory
     * @description fetches the history of margin added or reduced from contract isolated positions
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Get-Position-Margin-Change-History
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/Get-Position-Margin-Change-History
     * @param {string} symbol unified market symbol
     * @param {string} [type] "add" or "reduce"
     * @param {int} [since] timestamp in ms of the earliest change to fetch
     * @param {int} [limit] the maximum amount of changes to fetch
     * @param {object} params extra parameters specific to the exchange api endpoint
     * @param {int} [params.until] timestamp in ms of the latest change to fetch
     * @returns {object[]} a list of [margin structures]{@link https://docs.ccxt.com/#/?id=margin-loan-structure}
     */
    public async override Task<object> fetchMarginAdjustmentHistory(object symbol = null, object type = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMarginAdjustmentHistory () requires a symbol argument")) ;
        }
        object market = this.market(symbol);
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, "until");
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(type, null)))
        {
            ((IDictionary<string,object>)request)["type"] = ((bool) isTrue((isEqual(type, "add")))) ? 1 : 2;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["endTime"] = until;
        }
        object response = null;
        if (isTrue(getValue(market, "linear")))
        {
            response = await this.fapiPrivateGetPositionMarginHistory(this.extend(request, parameters));
        } else if (isTrue(getValue(market, "inverse")))
        {
            response = await this.dapiPrivateGetPositionMarginHistory(this.extend(request, parameters));
        } else
        {
            throw new BadRequest ((string)add(add(this.id, "fetchMarginAdjustmentHistory () is not supported for markets of type "), getValue(market, "type"))) ;
        }
        //
        //    [
        //        {
        //            symbol: "XRPUSDT",
        //            type: "1",
        //            deltaType: "TRADE",
        //            amount: "2.57148240",
        //            asset: "USDT",
        //            time: "1711046271555",
        //            positionSide: "BOTH",
        //            clientTranId: ""
        //        }
        //        ...
        //    ]
        //
        object modifications = this.parseMarginModifications(response);
        return this.filterBySymbolSinceLimit(modifications, symbol, since, limit);
    }

    /**
     * @method
     * @name binance#fetchConvertCurrencies
     * @description fetches all available currencies that can be converted
     * @see https://developers.binance.com/docs/convert/market-data/Query-order-quantity-precision-per-asset
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an associative dictionary of currencies
     */
    public async override Task<object> fetchConvertCurrencies(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.sapiGetConvertAssetInfo(parameters);
        //
        //     [
        //         {
        //             "asset": "BTC",
        //             "fraction": 8
        //         },
        //     ]
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object entry = getValue(response, i);
            object id = this.safeString(entry, "asset");
            object code = this.safeCurrencyCode(id);
            ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                { "info", entry },
                { "id", id },
                { "code", code },
                { "networks", null },
                { "type", null },
                { "name", null },
                { "active", null },
                { "deposit", null },
                { "withdraw", null },
                { "fee", null },
                { "precision", this.parseNumber(this.parsePrecision(this.safeString(entry, "fraction"))) },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "deposit", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "created", null },
            };
        }
        return result;
    }

    /**
     * @method
     * @name binance#fetchConvertQuote
     * @description fetch a quote for converting from one currency to another
     * @see https://developers.binance.com/docs/convert/trade/Send-quote-request
     * @param {string} fromCode the currency that you want to sell and convert from
     * @param {string} toCode the currency that you want to buy and convert into
     * @param {float} amount how much you want to trade in units of the from currency
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.walletType] either 'SPOT' or 'FUNDING', the default is 'SPOT'
     * @returns {object} a [conversion structure]{@link https://docs.ccxt.com/#/?id=conversion-structure}
     */
    public async override Task<object> fetchConvertQuote(object fromCode, object toCode, object amount = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(amount, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchConvertQuote() requires an amount argument")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "fromAsset", fromCode },
            { "toAsset", toCode },
            { "fromAmount", amount },
        };
        object response = await this.sapiPostConvertGetQuote(this.extend(request, parameters));
        //
        //     {
        //         "quoteId":"12415572564",
        //         "ratio":"38163.7",
        //         "inverseRatio":"0.0000262",
        //         "validTimestamp":1623319461670,
        //         "toAmount":"3816.37",
        //         "fromAmount":"0.1"
        //     }
        //
        object fromCurrency = this.currency(fromCode);
        object toCurrency = this.currency(toCode);
        return this.parseConversion(response, fromCurrency, toCurrency);
    }

    /**
     * @method
     * @name binance#createConvertTrade
     * @description convert from one currency to another
     * @see https://developers.binance.com/docs/convert/trade/Accept-Quote
     * @param {string} id the id of the trade that you want to make
     * @param {string} fromCode the currency that you want to sell and convert from
     * @param {string} toCode the currency that you want to buy and convert into
     * @param {float} [amount] how much you want to trade in units of the from currency
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [conversion structure]{@link https://docs.ccxt.com/#/?id=conversion-structure}
     */
    public async virtual Task<object> createConvertTrade(object id, object fromCode, object toCode, object amount = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object response = null;
        if (isTrue(isTrue((isEqual(fromCode, "BUSD"))) || isTrue((isEqual(toCode, "BUSD")))))
        {
            if (isTrue(isEqual(amount, null)))
            {
                throw new ArgumentsRequired ((string)add(this.id, " createConvertTrade() requires an amount argument")) ;
            }
            ((IDictionary<string,object>)request)["clientTranId"] = id;
            ((IDictionary<string,object>)request)["asset"] = fromCode;
            ((IDictionary<string,object>)request)["targetAsset"] = toCode;
            ((IDictionary<string,object>)request)["amount"] = amount;
            response = await this.sapiPostAssetConvertTransfer(this.extend(request, parameters));
        } else
        {
            ((IDictionary<string,object>)request)["quoteId"] = id;
            response = await this.sapiPostConvertAcceptQuote(this.extend(request, parameters));
        }
        object fromCurrency = this.currency(fromCode);
        object toCurrency = this.currency(toCode);
        return this.parseConversion(response, fromCurrency, toCurrency);
    }

    /**
     * @method
     * @name binance#fetchConvertTrade
     * @description fetch the data for a conversion trade
     * @see https://developers.binance.com/docs/convert/trade/Order-Status
     * @param {string} id the id of the trade that you want to fetch
     * @param {string} [code] the unified currency code of the conversion trade
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [conversion structure]{@link https://docs.ccxt.com/#/?id=conversion-structure}
     */
    public async virtual Task<object> fetchConvertTrade(object id, object code = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object response = null;
        if (isTrue(isEqual(code, "BUSD")))
        {
            object msInDay = 86400000;
            object now = this.milliseconds();
            if (isTrue(!isEqual(code, null)))
            {
                object currency = this.currency(code);
                ((IDictionary<string,object>)request)["asset"] = getValue(currency, "id");
            }
            ((IDictionary<string,object>)request)["tranId"] = id;
            ((IDictionary<string,object>)request)["startTime"] = subtract(now, msInDay);
            ((IDictionary<string,object>)request)["endTime"] = now;
            response = await this.sapiGetAssetConvertTransferQueryByPage(this.extend(request, parameters));
        } else
        {
            ((IDictionary<string,object>)request)["orderId"] = id;
            response = await this.sapiGetConvertOrderStatus(this.extend(request, parameters));
        }
        object data = response;
        if (isTrue(isEqual(code, "BUSD")))
        {
            object rows = this.safeList(response, "rows", new List<object>() {});
            data = this.safeDict(rows, 0, new Dictionary<string, object>() {});
        }
        object fromCurrencyId = this.safeString2(data, "deductedAsset", "fromAsset");
        object toCurrencyId = this.safeString2(data, "targetAsset", "toAsset");
        object fromCurrency = null;
        object toCurrency = null;
        if (isTrue(!isEqual(fromCurrencyId, null)))
        {
            fromCurrency = this.currency(fromCurrencyId);
        }
        if (isTrue(!isEqual(toCurrencyId, null)))
        {
            toCurrency = this.currency(toCurrencyId);
        }
        return this.parseConversion(data, fromCurrency, toCurrency);
    }

    /**
     * @method
     * @name binance#fetchConvertTradeHistory
     * @description fetch the users history of conversion trades
     * @see https://developers.binance.com/docs/convert/trade/Get-Convert-Trade-History
     * @param {string} [code] the unified currency code
     * @param {int} [since] the earliest time in ms to fetch conversions for
     * @param {int} [limit] the maximum number of conversion structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest conversion to fetch
     * @returns {object[]} a list of [conversion structures]{@link https://docs.ccxt.com/#/?id=conversion-structure}
     */
    public async virtual Task<object> fetchConvertTradeHistory(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object msInThirtyDays = 2592000000;
        object now = this.milliseconds();
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        } else
        {
            ((IDictionary<string,object>)request)["startTime"] = subtract(now, msInThirtyDays);
        }
        object endTime = this.safeInteger2(parameters, "endTime", "until");
        if (isTrue(!isEqual(endTime, null)))
        {
            ((IDictionary<string,object>)request)["endTime"] = endTime;
        } else
        {
            ((IDictionary<string,object>)request)["endTime"] = now;
        }
        parameters = this.omit(parameters, "until");
        object response = null;
        object responseQuery = null;
        object fromCurrencyKey = null;
        object toCurrencyKey = null;
        if (isTrue(isEqual(code, "BUSD")))
        {
            object currency = this.currency(code);
            ((IDictionary<string,object>)request)["asset"] = getValue(currency, "id");
            if (isTrue(!isEqual(limit, null)))
            {
                ((IDictionary<string,object>)request)["size"] = limit;
            }
            fromCurrencyKey = "deductedAsset";
            toCurrencyKey = "targetAsset";
            responseQuery = "rows";
            response = await this.sapiGetAssetConvertTransferQueryByPage(this.extend(request, parameters));
        } else
        {
            if (isTrue(isGreaterThan((subtract(getValue(request, "endTime"), getValue(request, "startTime"))), msInThirtyDays)))
            {
                throw new BadRequest ((string)add(this.id, " fetchConvertTradeHistory () the max interval between startTime and endTime is 30 days.")) ;
            }
            if (isTrue(!isEqual(limit, null)))
            {
                ((IDictionary<string,object>)request)["limit"] = limit;
            }
            fromCurrencyKey = "fromAsset";
            toCurrencyKey = "toAsset";
            responseQuery = "list";
            response = await this.sapiGetConvertTradeFlow(this.extend(request, parameters));
        }
        object rows = this.safeList(response, responseQuery, new List<object>() {});
        return this.parseConversions(rows, code, fromCurrencyKey, toCurrencyKey, since, limit);
    }

    public override object parseConversion(object conversion, object fromCurrency = null, object toCurrency = null)
    {
        //
        // fetchConvertQuote
        //
        //     {
        //         "quoteId":"12415572564",
        //         "ratio":"38163.7",
        //         "inverseRatio":"0.0000262",
        //         "validTimestamp":1623319461670,
        //         "toAmount":"3816.37",
        //         "fromAmount":"0.1"
        //     }
        //
        // createConvertTrade
        //
        //     {
        //         "orderId":"933256278426274426",
        //         "createTime":1623381330472,
        //         "orderStatus":"PROCESS"
        //     }
        //
        // createConvertTrade BUSD
        //
        //     {
        //         "tranId": 118263407119,
        //         "status": "S"
        //     }
        //
        // fetchConvertTrade, fetchConvertTradeHistory BUSD
        //
        //     {
        //         "tranId": 118263615991,
        //         "type": 244,
        //         "time": 1664442078000,
        //         "deductedAsset": "BUSD",
        //         "deductedAmount": "1",
        //         "targetAsset": "USDC",
        //         "targetAmount": "1",
        //         "status": "S",
        //         "accountType": "MAIN"
        //     }
        //
        // fetchConvertTrade
        //
        //     {
        //         "orderId":933256278426274426,
        //         "orderStatus":"SUCCESS",
        //         "fromAsset":"BTC",
        //         "fromAmount":"0.00054414",
        //         "toAsset":"USDT",
        //         "toAmount":"20",
        //         "ratio":"36755",
        //         "inverseRatio":"0.00002721",
        //         "createTime":1623381330472
        //     }
        //
        // fetchConvertTradeHistory
        //
        //     {
        //         "quoteId": "f3b91c525b2644c7bc1e1cd31b6e1aa6",
        //         "orderId": 940708407462087195,
        //         "orderStatus": "SUCCESS",
        //         "fromAsset": "USDT",
        //         "fromAmount": "20",
        //         "toAsset": "BNB",
        //         "toAmount": "0.06154036",
        //         "ratio": "0.00307702",
        //         "inverseRatio": "324.99",
        //         "createTime": 1624248872184
        //     }
        //
        object timestamp = this.safeIntegerN(conversion, new List<object>() {"time", "validTimestamp", "createTime"});
        object fromCur = this.safeString2(conversion, "deductedAsset", "fromAsset");
        object fromCode = this.safeCurrencyCode(fromCur, fromCurrency);
        object to = this.safeString2(conversion, "targetAsset", "toAsset");
        object toCode = this.safeCurrencyCode(to, toCurrency);
        return new Dictionary<string, object>() {
            { "info", conversion },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "id", this.safeStringN(conversion, new List<object>() {"tranId", "orderId", "quoteId"}) },
            { "fromCurrency", fromCode },
            { "fromAmount", this.safeNumber2(conversion, "deductedAmount", "fromAmount") },
            { "toCurrency", toCode },
            { "toAmount", this.safeNumber2(conversion, "targetAmount", "toAmount") },
            { "price", null },
            { "fee", null },
        };
    }

    /**
     * @method
     * @name binance#fetchFundingIntervals
     * @description fetch the funding rate interval for multiple markets
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Get-Funding-Info
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Get-Funding-Info
     * @param {string[]} [symbols] list of unified market symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.subType] "linear" or "inverse"
     * @returns {object[]} a list of [funding rate structures]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
     */
    public async override Task<object> fetchFundingIntervals(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbols, null)))
        {
            symbols = this.marketSymbols(symbols);
            market = this.market(getValue(symbols, 0));
        }
        object type = "swap";
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchFundingIntervals", market, parameters, "linear");
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(this.isLinear(type, subType)))
        {
            response = await this.fapiPublicGetFundingInfo(parameters);
        } else if (isTrue(this.isInverse(type, subType)))
        {
            response = await this.dapiPublicGetFundingInfo(parameters);
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchFundingIntervals() supports linear and inverse swap contracts only")) ;
        }
        //
        //     [
        //         {
        //             "symbol": "BLZUSDT",
        //             "adjustedFundingRateCap": "0.03000000",
        //             "adjustedFundingRateFloor": "-0.03000000",
        //             "fundingIntervalHours": 4,
        //             "disclaimer": false
        //         },
        //     ]
        //
        object result = this.parseFundingRates(response, market);
        return this.filterByArray(result, "symbol", symbols);
    }

    /**
     * @method
     * @name binance#fetchLongShortRatioHistory
     * @description fetches the long short ratio history for a unified market symbol
     * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/market-data/rest-api/Long-Short-Ratio
     * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/market-data/Long-Short-Ratio
     * @param {string} symbol unified symbol of the market to fetch the long short ratio for
     * @param {string} [timeframe] the period for the ratio, default is 24 hours
     * @param {int} [since] the earliest time in ms to fetch ratios for
     * @param {int} [limit] the maximum number of long short ratio structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest ratio to fetch
     * @returns {object[]} an array of [long short ratio structures]{@link https://docs.ccxt.com/#/?id=long-short-ratio-structure}
     */
    public async override Task<object> fetchLongShortRatioHistory(object symbol = null, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (isTrue(isEqual(timeframe, null)))
        {
            timeframe = "1d";
        }
        object request = new Dictionary<string, object>() {
            { "period", timeframe },
        };
        var requestparametersVariable = this.handleUntilOption("endTime", request, parameters);
        request = ((IList<object>)requestparametersVariable)[0];
        parameters = ((IList<object>)requestparametersVariable)[1];
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object subType = null;
        var subTypeparametersVariable = this.handleSubTypeAndParams("fetchLongShortRatioHistory", market, parameters);
        subType = ((IList<object>)subTypeparametersVariable)[0];
        parameters = ((IList<object>)subTypeparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(subType, "linear")))
        {
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
            response = await this.fapiDataGetGlobalLongShortAccountRatio(this.extend(request, parameters));
        } else if (isTrue(isEqual(subType, "inverse")))
        {
            ((IDictionary<string,object>)request)["pair"] = getValue(getValue(market, "info"), "pair");
            response = await this.dapiDataGetGlobalLongShortAccountRatio(this.extend(request, parameters));
        } else
        {
            throw new BadRequest ((string)add(this.id, " fetchLongShortRatioHistory() supports linear and inverse subTypes only")) ;
        }
        return this.parseLongShortRatioHistory(response, market);
    }

    public override object parseLongShortRatio(object info, object market = null)
    {
        //
        // linear
        //
        //     {
        //         "symbol": "BTCUSDT",
        //         "longAccount": "0.4558",
        //         "longShortRatio": "0.8376",
        //         "shortAccount": "0.5442",
        //         "timestamp": 1726790400000
        //     }
        //
        // inverse
        //
        //     {
        //         "longAccount": "0.7262",
        //         "longShortRatio": "2.6523",
        //         "shortAccount": "0.2738",
        //         "pair": "BTCUSD",
        //         "timestamp": 1726790400000
        //     }
        //
        object marketId = this.safeString(info, "symbol");
        object timestamp = this.safeIntegerOmitZero(info, "timestamp");
        return new Dictionary<string, object>() {
            { "info", info },
            { "symbol", this.safeSymbol(marketId, market, null, "contract") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "timeframe", null },
            { "longShortRatio", this.safeNumber(info, "longShortRatio") },
        };
    }
}
