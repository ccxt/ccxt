namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class kuna : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "kuna" },
            { "name", "Kuna" },
            { "countries", new List<object>() {"UA"} },
            { "rateLimit", 1000 },
            { "version", "v4" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "cancelOrders", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", true },
                { "createOrder", true },
                { "createPostOnlyOrder", false },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", false },
                { "createStopOrder", true },
                { "fetchBalance", true },
                { "fetchBorrowInterest", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", true },
                { "fetchDeposit", true },
                { "fetchDepositAddress", true },
                { "fetchDeposits", true },
                { "fetchDepositsWithdrawals", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchIsolatedPositions", false },
                { "fetchL3OrderBook", true },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarketLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", "emulated" },
                { "fetchOpenInterest", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrdersByStatus", true },
                { "fetchPosition", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchTransactions", false },
                { "fetchTransfers", false },
                { "fetchWithdrawAddresses", false },
                { "fetchWithdrawal", true },
                { "fetchWithdrawals", true },
                { "reduceMargin", false },
                { "repayCrossMargin", false },
                { "repayIsolatedMargin", false },
                { "setLeverage", false },
                { "setMargin", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "signIn", false },
                { "transfer", false },
                { "withdraw", true },
            } },
            { "timeframes", null },
            { "urls", new Dictionary<string, object>() {
                { "extension", ".json" },
                { "referral", "https://kuna.io?r=kunaid-gvfihe8az7o4" },
                { "logo", "https://user-images.githubusercontent.com/51840849/87153927-f0578b80-c2c0-11ea-84b6-74612568e9e1.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "xreserve", "https://api.xreserve.fund" },
                    { "v3", "https://api.kuna.io" },
                    { "v4", "https://api.kuna.io" },
                    { "public", "https://kuna.io" },
                    { "private", "https://kuna.io" },
                } },
                { "www", "https://kuna.io" },
                { "doc", "https://kuna.io/documents/api" },
                { "fees", "https://kuna.io/documents/api" },
            } },
            { "api", new Dictionary<string, object>() {
                { "xreserve", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "nonce", 1 },
                        { "fee", 1 },
                        { "delegated-transactions", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "delegate-transfer", 1 },
                    } },
                } },
                { "v4", new Dictionary<string, object>() {
                    { "private", new Dictionary<string, object>() {
                        { "get", new Dictionary<string, object>() {
                            { "private/me", 1 },
                            { "private/getBalance", 1 },
                            { "order/private/active", 1 },
                            { "order/private/history", 1 },
                            { "order/private/{id}/trades", 1 },
                            { "order/private/details/{id}", 1 },
                            { "trade/private/history", 1 },
                            { "transaction/private/{hash}", 1 },
                            { "deposit/private/preRequest", 1 },
                            { "deposit/private/crypto/address", 1 },
                            { "deposit/private/crypto/getMerchantAddress", 1 },
                            { "deposit/private/history", 1 },
                            { "deposit/private/details/{depositId}", 1 },
                            { "withdraw/private/preRequest", 1 },
                            { "withdraw/private/history", 1 },
                            { "withdraw/private/details/{withdrawId}", 1 },
                            { "kuna-code/{id}", 1 },
                            { "kuna-code/{code}/check", 1 },
                            { "kuna-code/issued-by-me", 1 },
                            { "kuna-code/redeemed-by-me", 1 },
                        } },
                        { "post", new Dictionary<string, object>() {
                            { "order/private/create", 1 },
                            { "order/private/cancel", 1 },
                            { "order/private/cancel/multi", 1 },
                            { "deposit/private/crypto/generateAddress", 1 },
                            { "deposit/private/crypto/generateMerchantAddress", 1 },
                            { "withdraw/private/create", 1 },
                            { "kuna-code", 1 },
                        } },
                        { "put", new Dictionary<string, object>() {
                            { "kuna-code/redeem", 1 },
                        } },
                    } },
                    { "public", new Dictionary<string, object>() {
                        { "get", new Dictionary<string, object>() {
                            { "public/timestamp", 1 },
                            { "public/fees", 1 },
                            { "public/currencies?type={type}", 1 },
                            { "public/currencies", 1 },
                            { "markets/public/getAll", 1 },
                            { "markets/public/tickers?pairs={pairs}", 1 },
                            { "order/public/book/{pairs}", 1 },
                            { "trade/public/book/{pairs}", 1 },
                        } },
                    } },
                } },
                { "v3", new Dictionary<string, object>() {
                    { "public", new Dictionary<string, object>() {
                        { "get", new Dictionary<string, object>() {
                            { "timestamp", 1 },
                            { "currencies", 1 },
                            { "markets", 1 },
                            { "tickers", 1 },
                            { "k", 1 },
                            { "trades_history", 1 },
                            { "fees", 1 },
                            { "exchange-rates", 1 },
                            { "exchange-rates/currency", 1 },
                            { "book/market", 1 },
                            { "kuna_codes/code/check", 1 },
                            { "landing_page_statistic", 1 },
                            { "translations/locale", 1 },
                            { "trades/market/hist", 1 },
                        } },
                        { "post", new Dictionary<string, object>() {
                            { "http_test", 1 },
                            { "deposit_channels", 1 },
                            { "withdraw_channels", 1 },
                            { "subscription_plans", 1 },
                            { "send_to", 1 },
                            { "confirm_token", 1 },
                            { "kunaid", 1 },
                            { "withdraw/prerequest", 1 },
                            { "deposit/prerequest", 1 },
                            { "deposit/exchange-rates", 1 },
                        } },
                    } },
                    { "sign", new Dictionary<string, object>() {
                        { "get", new Dictionary<string, object>() {
                            { "reset_password/token", 1 },
                        } },
                        { "post", new Dictionary<string, object>() {
                            { "signup/google", 1 },
                            { "signup/resend_confirmation", 1 },
                            { "signup", 1 },
                            { "signin", 1 },
                            { "signin/two_factor", 1 },
                            { "signin/resend_confirm_device", 1 },
                            { "signin/confirm_device", 1 },
                            { "reset_password", 1 },
                            { "cool-signin", 1 },
                        } },
                        { "put", new Dictionary<string, object>() {
                            { "reset_password/token", 1 },
                            { "signup/code/confirm", 1 },
                        } },
                    } },
                    { "private", new Dictionary<string, object>() {
                        { "post", new Dictionary<string, object>() {
                            { "auth/w/order/submit", 1 },
                            { "auth/r/orders", 1 },
                            { "auth/r/orders/market", 1 },
                            { "auth/r/orders/markets", 1 },
                            { "auth/api_tokens/delete", 1 },
                            { "auth/api_tokens/create", 1 },
                            { "auth/api_tokens", 1 },
                            { "auth/signin_history/uniq", 1 },
                            { "auth/signin_history", 1 },
                            { "auth/disable_withdraw_confirmation", 1 },
                            { "auth/change_password", 1 },
                            { "auth/deposit_address", 1 },
                            { "auth/announcements/accept", 1 },
                            { "auth/announcements/unaccepted", 1 },
                            { "auth/otp/deactivate", 1 },
                            { "auth/otp/activate", 1 },
                            { "auth/otp/secret", 1 },
                            { "auth/r/order/market/:order_id/trades", 1 },
                            { "auth/r/orders/market/hist", 1 },
                            { "auth/r/orders/hist", 1 },
                            { "auth/r/orders/hist/markets", 1 },
                            { "auth/r/orders/details", 1 },
                            { "auth/assets-history", 1 },
                            { "auth/assets-history/withdraws", 1 },
                            { "auth/assets-history/deposits", 1 },
                            { "auth/r/wallets", 1 },
                            { "auth/markets/favorites", 1 },
                            { "auth/markets/favorites/list", 1 },
                            { "auth/me/update", 1 },
                            { "auth/me", 1 },
                            { "auth/fund_sources", 1 },
                            { "auth/fund_sources/list", 1 },
                            { "auth/withdraw/resend_confirmation", 1 },
                            { "auth/withdraw", 1 },
                            { "auth/withdraw/details", 1 },
                            { "auth/withdraw/info", 1 },
                            { "auth/payment_addresses", 1 },
                            { "auth/deposit/prerequest", 1 },
                            { "auth/deposit/exchange-rates", 1 },
                            { "auth/deposit", 1 },
                            { "auth/deposit/details", 1 },
                            { "auth/deposit/info", 1 },
                            { "auth/kuna_codes/count", 1 },
                            { "auth/kuna_codes/details", 1 },
                            { "auth/kuna_codes/edit", 1 },
                            { "auth/kuna_codes/send-pdf", 1 },
                            { "auth/kuna_codes", 1 },
                            { "auth/kuna_codes/redeemed-by-me", 1 },
                            { "auth/kuna_codes/issued-by-me", 1 },
                            { "auth/payment_requests/invoice", 1 },
                            { "auth/payment_requests/type", 1 },
                            { "auth/referral_program/weekly_earnings", 1 },
                            { "auth/referral_program/stats", 1 },
                            { "auth/merchant/payout_services", 1 },
                            { "auth/merchant/withdraw", 1 },
                            { "auth/merchant/payment_services", 1 },
                            { "auth/merchant/deposit", 1 },
                            { "auth/verification/auth_token", 1 },
                            { "auth/kunaid_purchase/create", 1 },
                            { "auth/devices/list", 1 },
                            { "auth/sessions/list", 1 },
                            { "auth/subscriptions/reactivate", 1 },
                            { "auth/subscriptions/cancel", 1 },
                            { "auth/subscriptions/prolong", 1 },
                            { "auth/subscriptions/create", 1 },
                            { "auth/subscriptions/list", 1 },
                            { "auth/kuna_ids/list", 1 },
                            { "order/cancel/multi", 1 },
                            { "order/cancel", 1 },
                        } },
                        { "put", new Dictionary<string, object>() {
                            { "auth/fund_sources/id", 1 },
                            { "auth/kuna_codes/redeem", 1 },
                        } },
                        { "delete", new Dictionary<string, object>() {
                            { "auth/markets/favorites", 1 },
                            { "auth/fund_sources", 1 },
                            { "auth/devices", 1 },
                            { "auth/devices/list", 1 },
                            { "auth/sessions/list", 1 },
                            { "auth/sessions", 1 },
                        } },
                    } },
                } },
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"depth", "k_with_pending_trades", "k", "markets", "order_book", "order_book/{market}", "tickers", "tickers/{market}", "timestamp", "trades", "trades/{market}"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"members/me", "deposits", "deposit", "deposit_address", "orders", "order", "trades/my", "withdraws", "withdraw"} },
                    { "post", new List<object>() {"orders", "orders/multi", "orders/clear", "order/delete", "withdraw"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.0025") },
                    { "maker", this.parseNumber("0.0025") },
                } },
                { "funding", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {
                        { "UAH", "1%" },
                        { "BTC", 0.001 },
                        { "BCH", 0.001 },
                        { "ETH", 0.01 },
                        { "WAVES", 0.01 },
                        { "GOL", 0 },
                        { "GBG", 0 },
                    } },
                    { "deposit", new Dictionary<string, object>() {} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "PLA", "Plair" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "ARGUMENT_VALIDATION_ERROR", typeof(BadRequest) },
                { "PAYMENT_METHOD_NOT_SUPPORTED", typeof(BadRequest) },
                { "NOT_FOUND", typeof(OrderNotFound) },
                { "INVALID:ORDER_SIZE", typeof(InvalidOrder) },
                { "WrongRequestException", typeof(BadRequest) },
                { "INSUFFICIENT_FUNDS", typeof(InsufficientFunds) },
                { "2002", typeof(InsufficientFunds) },
                { "2003", typeof(OrderNotFound) },
            } },
            { "options", new Dictionary<string, object>() {} },
        });
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://docs.kuna.io/docs/get-time-on-the-server
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.v4PublicGetPublicTimestamp(parameters);
        //
        //    {
        //        "data": {
        //            "timestamp": 1686740531,
        //            "timestamp_miliseconds": 1686740531725,
        //        }
        //    }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        return this.safeInteger(data, "timestamp_miliseconds");
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @see https://docs.kuna.io/docs/get-information-about-available-currencies
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.v4PublicGetPublicCurrencies(parameters);
        //
        //    {
        //        "data": [
        //            {
        //                "code": "BTC",
        //                "name": "Bitcoin",
        //                "payload": {
        //                    "chart": "https://kuna-pro.kuna.io/bitcoin-chart",
        //                    "icons": {
        //                        "svg": "https://kuna-pro.kuna.io/icon-btc-svg",
        //                        "png2x": "https://kuna-pro.kuna.io/icon-btc-png2x",
        //                        "png3x": "https://kuna-pro.kuna.io/icon-btc-png3x",
        //                        "svgXL": "https://kuna-pro.kuna.io/icon-btc-svg"
        //                    },
        //                    "pngChart": "https://kuna-pro.kuna.io/png-bitcoin-chart"
        //                },
        //                "position": 1,
        //                "precision": 8,
        //                "tradePrecision": 6,
        //                "type": "Crypto"
        //            }
        //        ]
        //    }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        return this.parseCurrencies(data);
    }

    public virtual object parseCurrencies(object currencies, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        currencies = this.toArray(currencies);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(currencies)); postFixIncrement(ref i))
        {
            object currency = this.parseCurrency(getValue(currencies, i));
            ((IDictionary<string,object>)result)[(string)getValue(currency, "code")] = currency;
        }
        return result;
    }

    public virtual object parseCurrency(object currency)
    {
        //
        //    {
        //        "code": "BTC",
        //        "name": "Bitcoin",
        //        "payload": {
        //            "chart": "https://kuna-pro.kuna.io/bitcoin-chart",
        //            "icons": {
        //                "svg": "https://kuna-pro.kuna.io/icon-btc-svg",
        //                "png2x": "https://kuna-pro.kuna.io/icon-btc-png2x",
        //                "png3x": "https://kuna-pro.kuna.io/icon-btc-png3x",
        //                "svgXL": "https://kuna-pro.kuna.io/icon-btc-svg"
        //            },
        //            "pngChart": "https://kuna-pro.kuna.io/png-bitcoin-chart"
        //        },
        //        "position": 1,
        //        "precision": 8,
        //        "tradePrecision": 6,
        //        "type": "Crypto"
        //    }
        //
        object currencyId = this.safeString(currency, "code");
        object precision = this.safeString(currency, "precision");
        object tradePrecision = this.safeString(currency, "tradePrecision");
        return new Dictionary<string, object>() {
            { "info", currency },
            { "id", currencyId },
            { "code", this.safeCurrencyCode(currencyId) },
            { "type", null },
            { "margin", null },
            { "name", this.safeString(currency, "name") },
            { "active", null },
            { "deposit", null },
            { "withdraw", null },
            { "fee", null },
            { "precision", Precise.stringMin(precision, tradePrecision) },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "withdraw", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "networks", new Dictionary<string, object>() {} },
        };
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchMarkets
        * @description retrieves data on all markets for kuna
        * @see https://docs.kuna.io/docs/get-all-traded-markets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.v4PublicGetMarketsPublicGetAll(parameters);
        //
        //    {
        //        "data": [
        //            {
        //                "pair": "BTC_USDT",               // Traded pair of assets
        //                "baseAsset": {                    // The base asset of the traded pair, the one to sell or buy as a result of the trade
        //                    "code": "BTC",
        //                    "precision": 6               // Maximum amount of digits for the decimal part of a number
        //                },
        //                "quoteAsset": {                   // The quoted asset of the traded pair, the one to use to sell or buy the base asset
        //                    "code": "USDT",
        //                    "precision": 2                // Maximum amount of digits for the decimal part of a number
        //                },
        //                "tickerPriceChange": "-0.07"      // Relative change compared with the last tick
        //            }
        //        ]
        //    }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object markets = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object item = getValue(data, i);
            object marketId = this.safeString(item, "pair");
            object baseAsset = this.safeValue(item, "baseAsset");
            object quoteAsset = this.safeValue(item, "quoteAsset");
            object baseId = this.safeString(baseAsset, "code");
            object quoteId = this.safeString(quoteAsset, "code");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object basePrecision = this.safeString(baseAsset, "precision");
            object quotePrecision = this.safeString(quoteAsset, "precision");
            ((IList<object>)markets).Add(new Dictionary<string, object>() {
                { "id", marketId },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", null },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(basePrecision)) },
                    { "price", this.parseNumber(this.parsePrecision(quotePrecision)) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", item },
            });
        }
        return markets;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://docs.kuna.io/docs/get-public-orders-book
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] 5, 10, 20, 50, 100, 500, or 1000 (default)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pairs", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["level"] = limit;
        }
        object response = await this.v4PublicGetOrderPublicBookPairs(this.extend(request, parameters));
        //
        //      {
        //          "data": {
        //              "asks": [               // An array of sell orders
        //                  [
        //                      "16950",        // Sell price, level 1
        //                      "0.001"         // Sell quantity, level 1
        //                  ],
        //                  [
        //                      "17000",        // Sell price, level 2
        //                      "0.01"          // Sell quantity, level 2
        //                  ]
        //              ],
        //              "bids": [               // An array of buy orders
        //                  [
        //                      "16700",        // Sell price, level 1
        //                      "0.01"          // Sell quantity, level 1
        //                  ],
        //                  [
        //                      "16000",        // Sell price, level 2
        //                      "0.001"         // Sell quantity, level 2
        //                  ]
        //              ]
        //          }
        //      }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrderBook(data, getValue(market, "symbol"), null, "bids", "asks", 0, 1);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //    {
        //        "pair": "BTC_USDT",                                   // Traded pair
        //        "percentagePriceChange": "-0.03490931899641581",      // Relative price change, in percent
        //        "price": "27900",                                     // Current median price
        //        "equivalentPrice": "",                                // TBD
        //        "high": "29059.69",                                   // Highest price
        //        "low": "27900",                                       // Lowest price
        //        "baseVolume": "2.9008499999999993",                   // Traded volume as base
        //        "quoteVolume": "82251.41477976",                      // Traded volume as quote
        //        "bestBidPrice": "27926.91",                           // The best bid price now
        //        "bestAskPrice": "27970.02",                           // The best ask price now
        //        "priceChange": "-973.9700000000012"                   // Absolute price change
        //    }
        //
        object marketId = this.safeString(ticker, "pair");
        return this.safeTicker(new Dictionary<string, object>() {
            { "info", ticker },
            { "symbol", this.safeSymbol(marketId, market) },
            { "timestamp", null },
            { "datetime", null },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bestBidPrice") },
            { "ask", this.safeString(ticker, "bestAskPrice") },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", null },
            { "last", null },
            { "previousClose", null },
            { "change", this.safeString(ticker, "priceChange") },
            { "percentage", this.safeString(ticker, "percentagePriceChange") },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "baseVolume") },
            { "quoteVolume", this.safeString(ticker, "quoteVolume") },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market. The average is not returned in the response, but the median can be accessed via response['info']['price']
        * @see https://docs.kuna.io/docs/get-market-info-by-tickers
        * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(symbols, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchTickers () requires a symbols argument")) ;
        }
        symbols = this.marketSymbols(symbols);
        object marketIds = this.marketIds(symbols);
        object request = new Dictionary<string, object>() {
            { "pairs", String.Join(",", ((IList<object>)marketIds).ToArray()) },
        };
        object response = await this.v4PublicGetMarketsPublicTickersPairsPairs(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "pair": "BTC_USDT",                                   // Traded pair
        //                "percentagePriceChange": "-0.03490931899641581",      // Relative price change, in percent
        //                "price": "27900",                                     // Current median price
        //                "equivalentPrice": "",                                // TBD
        //                "high": "29059.69",                                   // Highest price
        //                "low": "27900",                                       // Lowest price
        //                "baseVolume": "2.9008499999999993",                   // Traded volume as base
        //                "quoteVolume": "82251.41477976",                      // Traded volume as quote
        //                "bestBidPrice": "27926.91",                           // The best bid price now
        //                "bestAskPrice": "27970.02",                           // The best ask price now
        //                "priceChange": "-973.9700000000012"                   // Absolute price change
        //            }
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTickers(data, symbols, parameters);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://docs.kuna.io/docs/get-market-info-by-tickers
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pairs", getValue(market, "id") },
        };
        object response = await this.v4PublicGetMarketsPublicTickersPairsPairs(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "pair": "BTC_USDT",                                   // Traded pair
        //                "percentagePriceChange": "-0.03490931899641581",      // Relative price change, in percent
        //                "price": "27900",                                     // Current median price
        //                "equivalentPrice": "",                                // TBD
        //                "high": "29059.69",                                   // Highest price
        //                "low": "27900",                                       // Lowest price
        //                "baseVolume": "2.9008499999999993",                   // Traded volume as base
        //                "quoteVolume": "82251.41477976",                      // Traded volume as quote
        //                "bestBidPrice": "27926.91",                           // The best bid price now
        //                "bestAskPrice": "27970.02",                           // The best ask price now
        //                "priceChange": "-973.9700000000012"                   // Absolute price change
        //            }
        //            ...
        //        ]
        //    }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object ticker = this.safeDict(data, 0);
        return this.parseTicker(ticker, market);
    }

    public async override Task<object> fetchL3OrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * TODO: double check
        * @method
        * @name kuna#fetchL3OrderBook
        * @description fetches level 3 information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified market symbol
        * @param {int} [limit] max number of orders to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order book structure]{@link https://docs.ccxt.com/#/?id=order-book-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrderBook(symbol, limit, parameters);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://docs.kuna.io/docs/get-public-trades-book
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] between 1 and 100, 25 by default
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pairs", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.v4PublicGetTradePublicBookPairs(this.extend(request, parameters));
        //
        //    {
        //        'data': [
        //            {
        //                'createdAt': '2024-03-02T00:10:49.385Z',
        //                'id': '3b42878a-3688-4bc1-891e-5cc2fc902142',
        //                'matchPrice': '62181.31',
        //                'matchQuantity': '0.00568',
        //                'pair': 'BTC_USDT',
        //                'quoteQuantity': '353.1898408',
        //                'side': 'Bid'
        //            },
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //    {
        //        "id": "3e5591ba-2778-4d85-8851-54284045ea44",       // Unique identifier of a trade
        //        "pair": "BTC_USDT",                                 // Market pair that is being traded
        //        "quoteQuantity": "11528.8118",                      // Qty of the quote asset, USDT in this example
        //        "matchPrice": "18649",                              // Exchange price at the moment of execution
        //        "matchQuantity": "0.6182",                          // Qty of the base asset, BTC in this example
        //        "createdAt": "2022-09-23T14:30:41.486Z",            // Date-time of trade execution, UTC
        //        "side": "Ask"                                       // Trade type: `Ask` or `Bid`. Bid for buying base asset, Ask for selling base asset (e.g. for BTC_USDT trading pair, BTC is the base asset).
        //    }
        //
        // fetchMyTrades, fetchOrder (private)
        //
        //    {
        //        "id": "edb17459-c9bf-4148-9ae6-7367d7f55d71",        // Unique identifier of a trade
        //        "orderId": "a80bec3f-4ffa-45c1-9d78-f6301e9748fe",   // Unique identifier of an order associated with the trade
        //        "pair": "BTC_USDT",                                  // Traded pair, base asset first, followed by quoted asset
        //        "quantity": "1.5862",                                // Traded quantity of base asset
        //        "price": "19087",                                    // Price of the trade
        //        "isTaker": true,                                     // Various fees for Makers and Takers; "Market" orders are always `true`
        //        "fee": "0.0039655",                                  // Exchange commission fee
        //        "feeCurrency": "BTC",                                // Currency of the commission
        //        "isBuyer": true,                                     // Buy or sell the base asset
        //        "quoteQuantity": "30275.7994",                       // Quote asset quantity spent to fulfill the base amount
        //        "createdAt": "2022-09-29T13:43:53.824Z",             // Date-time of trade execution, UTC
        //    }
        //
        object datetime = this.safeString(trade, "createdAt");
        object marketId = this.safeString(trade, "pair");
        object isTaker = this.safeValue(trade, "isMaker");
        object side = this.safeStringLower(trade, "side");
        if (isTrue(isEqual(side, null)))
        {
            object isBuyer = this.safeValue(trade, "isBuyer");
            side = ((bool) isTrue(isBuyer)) ? "buy" : "sell";
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", this.safeString(trade, "id") },
            { "symbol", this.safeSymbol(marketId, market) },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "type", null },
            { "side", side },
            { "order", this.safeString(trade, "orderId") },
            { "takerOrMaker", ((bool) isTrue(isTaker)) ? "taker" : "maker" },
            { "price", this.safeString2(trade, "matchPrice", "price") },
            { "amount", this.safeString2(trade, "matchQuantity", "quantity") },
            { "cost", this.safeString(trade, "quoteQuantity") },
            { "fee", new Dictionary<string, object>() {
                { "cost", this.safeString(trade, "fee") },
                { "currency", this.safeCurrencyCode(this.safeString(trade, "feeCurrency")) },
                { "rate", null },
            } },
        }, market);
    }

    public override object parseBalance(object response)
    {
        //
        //    [
        //        {
        //            "currency": "UAH",
        //            "balance": "7134.6",
        //            "lockBalance": "100"
        //        }
        //        ...
        //    ]
        //
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object balance = getValue(response, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "balance");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "lockBalance");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.v4PrivateGetPrivateGetBalance(parameters);
        //
        //    {
        //        "data": [{
        //            "currency": "UAH",                    // Wallet currency
        //            "balance": "7134.6",                  // Available balance, precision depends on the currency
        //            "lockBalance": "100"                  // Minimum amount locked on the balance
        //        }]
        //    }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        return this.parseBalance(data);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#createOrder
        * @description create a trade order
        * @see https://docs.kuna.io/docs/create-a-new-order-private
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {float} [params.triggerPrice] the price at which a trigger order is triggered at
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.id] id must be a UUID format, if you do not specify id, it will be generated automatically.
        * @param {float} [params.quoteQuantity] the max quantity of the quote asset to use for selling/buying
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object triggerPrice = this.safeString2(parameters, "triggerPrice", "stopPrice");
        parameters = this.omit(parameters, new List<object>() {"triggerPrice", "stopPrice"});
        object capitalizedType = this.capitalize(type);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
            { "orderSide", ((bool) isTrue((isEqual(side, "buy")))) ? "Bid" : "Ask" },
            { "quantity", this.numberToString(amount) },
            { "type", capitalizedType },
        };
        if (isTrue(isEqual(capitalizedType, "Limit")))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(getValue(market, "symbol"), price);
        }
        if (isTrue(!isEqual(triggerPrice, null)))
        {
            if (isTrue(isEqual(capitalizedType, "Market")))
            {
                throw new BadRequest ((string)add(this.id, " createOrder () cannot place trigger market orders, or trigger limit")) ;
            }
            ((IDictionary<string,object>)request)["stopPrice"] = this.priceToPrecision(getValue(market, "symbol"), triggerPrice);
            if (isTrue(!isEqual(capitalizedType, "TakeProfitLimit")))
            {
                ((IDictionary<string,object>)request)["type"] = "StopLossLimit";
            }
        }
        object response = await this.v4PrivatePostOrderPrivateCreate(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "b0fcb54c-2278-4f16-a300-02765faad8b0",     // ID  of your newly created order
        //            "type": "Limit",                                  // Type of an order
        //            "quantity": "0.06",                               // Original order quantity
        //            "executedQuantity": "0",                          // Traded quantity in stock (>0 if traded)
        //            "pair": "BTC_USDT",                               // Traded pair
        //            "price": "26440.46",                              // Price of the trade
        //            "status": "Open",                                 // The status of the order
        //            "createdAt": "2023-07-11T08:01:30.550Z",          // Date-time of order creation, UTC
        //            "updatedAt": "2023-07-11T08:01:30.550Z"           // Date-time of the last update of the order, UTC
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrder(data, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        object response = await this.v4PrivatePostOrderPrivateCancel(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "success": true
        //        }
        //    }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object order = this.parseOrder(data, market);
        ((IDictionary<string,object>)order)["id"] = id;
        return order;
    }

    public async virtual Task<object> cancelOrders(object ids, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#cancelOrder
        * @description cancels an open order
        * @param {string} ids order ids
        * @param {string} symbol not used by kuna cancelOrder
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderIds", ids },
        };
        object response = await this.v4PrivatePostOrderPrivateCancelMulti(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "id": "c7fc5b2b-bd9d-48c1-a458-a83412669fe2",   // Unique identifier of a canceled order
        //                "success": true                                 // Status for this order
        //            },
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOrders(data);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "Canceled", "canceled" },
            { "Closed", "filled" },
            { "Pending", "open" },
            { "Open", "open" },
            { "done", "closed" },
            { "wait", "open" },
            { "cancel", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder, fetchOrder, fetchOpenOrders, fetchOrdersByStatus
        //
        //    {
        //        "id": "5992a049-8612-409d-8599-2c3d7298b106",     // Unique identifier of an order
        //        "type": "Limit",                                  // Type of an order
        //        "quantity": "5",                                  // Original order quantity
        //        "executedQuantity": "0",                          // Traded quantity in stock (>0 if traded)
        //        "cumulativeQuoteQty": "0",                        // *absent on createOrder* Traded quantity in money (>0 if traded)
        //        "cost": "0.05",                                   // Total amount
        //        "side": "Bid",                                    // *absent on createOrder* Bid for buying base asset, Ask for selling base asset. FYI: For BTC_USDT trading pair, BTC is the base asset
        //        "pair": "TRX_USDT",                               // Traded pair
        //        "price": "0.01",                                  // Price of the trade
        //        "status": "Open",                                 // The status of the order
        //        "createdAt": "2023-07-11T07:04:20.131Z",          // Date-time of order creation, UTC
        //        "updatedAt": "2023-07-11T07:04:20.131Z"           // Date-time of the last update of the order, UTC
        //        "closedAt": "2023-05-08T08:53:58.333Z"            // *absent on fetchOpenOrders/createOrder* Date-time of order finish time, UTC
        //        "trades": [                                       // * fetchOrder only *
        //            {
        //                "id": "15ff497c-8d25-4155-8184-bb1f905cce1e",              // Unique identifier of a trade
        //                "orderId": "4b9b9705-e85f-4180-bdec-219fbf025fa3",         // Unique identifier of an associated order
        //                "pair": "BTC_USDT",                                        // Traded pair
        //                "quantity": "0.00054",                                     // Traded quantity
        //                "price": "27770",                                          // Traded price
        //                "isTaker": false,                                          // Various fees for Makers and Takers; "Market" orders are always `true`
        //                "fee": "0.000001350",                                      // Exchange commission fee
        //                "feeCurrency": "BTC",                                      // Currency of the commission
        //                "isBuyer": true,                                           // Buy or sell the base asset
        //                "quoteQuantity": "14.9958",                                // Quote asset quantity
        //                "createdAt": "2023-05-08T08:53:58.332Z"                    // Date-time of trade execution, UTC
        //            }
        //        ]
        //    }
        //
        // cancelOrder, cancelOrders
        //
        //    {
        //        "id": "c7fc5b2b-bd9d-48c1-a458-a83412669fe2",   // Unique identifier of a canceled order *absent on cancelOrder*
        //        "success": true                                 // Status for this order
        //    }
        //
        object marketId = this.safeString(order, "pair");
        object datetime = this.safeString(order, "createdAt");
        object triggerPrice = this.safeString(order, "stopPrice");
        object side = this.safeString(order, "side");
        if (isTrue(isEqual(side, "Bid")))
        {
            side = "buy";
        } else if (isTrue(isEqual(side, "Ask")))
        {
            side = "sell";
        }
        object trades = this.safeValue(order, "trades", new List<object>() {});
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString2(order, "id", "orderId") },
            { "clientOrderId", null },
            { "symbol", this.safeSymbol(marketId, market) },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "lastTradeTimestamp", this.parse8601(this.safeString(order, "updatedAt")) },
            { "status", this.parseOrderStatus(this.safeString(order, "status")) },
            { "type", this.safeStringLower(order, "type") },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", this.safeString(order, "price") },
            { "stopPrice", triggerPrice },
            { "triggerPrice", triggerPrice },
            { "amount", this.safeString(order, "quantity") },
            { "filled", this.safeString(order, "executedQuantity") },
            { "remaining", null },
            { "trades", this.parseTrades(trades) },
            { "cost", this.safeString(order, "cost") },
            { "average", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://docs.kuna.io/docs/get-order-details-by-id
        * @param {string} symbol not used by kuna fetchOrder
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {boolean} [params.withTrades] default == true, specify if the response should include trades associated with the order
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
            { "withTrades", true },
        };
        object response = await this.v4PrivateGetOrderPrivateDetailsId(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "4b9b9705-e85f-4180-bdec-219fbf025fa3",
        //            "type": "Limit",
        //            "quantity": "0.00054",
        //            "executedQuantity": "0.00054",
        //            "cumulativeQuoteQty": "14.99580",
        //            "cost": "14.9958",
        //            "side": "Bid",
        //            "pair": "BTC_USDT",
        //            "price": "27770",
        //            "status": "Closed",
        //            "createdAt": "2023-05-08T08:39:46.708Z",
        //            "updatedAt": "2023-05-08T08:53:58.332Z",
        //            "closedAt": "2023-05-08T08:53:58.333Z",
        //            "trades": [
        //                {
        //                    "id": "15ff497c-8d25-4155-8184-bb1f905cce1e",              // Unique identifier of a trade
        //                    "orderId": "4b9b9705-e85f-4180-bdec-219fbf025fa3",         // Unique identifier of an associated order
        //                    "pair": "BTC_USDT",                                        // Traded pair
        //                    "quantity": "0.00054",                                     // Traded quantity
        //                    "price": "27770",                                          // Traded price
        //                    "isTaker": false,                                          // Various fees for Makers and Takers; "Market" orders are always `true`
        //                    "fee": "0.000001350",                                      // Exchange commission fee
        //                    "feeCurrency": "BTC",                                      // Currency of the commission
        //                    "isBuyer": true,                                           // Buy or sell the base asset
        //                    "quoteQuantity": "14.9958",                                // Quote asset quantity
        //                    "createdAt": "2023-05-08T08:53:58.332Z"                    // Date-time of trade execution, UTC
        //                }
        //            ]
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrder(data);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://docs.kuna.io/docs/get-active-client-orders-private
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] 1-100, the maximum number of open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest timestamp (ms) to fetch orders for
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.sort] asc (oldest-on-top) or desc (newest-on-top)
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, new List<object>() {"until"});
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pairs"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["end"] = this.iso8601(until);
        }
        object response = await this.v4PrivateGetOrderPrivateActive(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "id": "5992a049-8612-409d-8599-2c3d7298b106",            // Unique identifier of an order
        //                "type": "Limit",                                         // Type of an order
        //                "quantity": "5",                                         // Original order quantity
        //                "executedQuantity": "0",                                 // Traded quantity in stock (>0 if traded)
        //                "cumulativeQuoteQty": "0",                               // Traded quantity in money (>0 if traded)
        //                "cost": "0.05",                                          // Total amount
        //                "side": "Bid",                                           // Bid for buying base asset, Ask for selling base asset. FYI: For BTC_USDT trading pair, BTC is the base asset
        //                "pair": "TRX_USDT",                                      // Traded pair
        //                "price": "0.01",                                         // Price of the trade
        //                "status": "Open",                                        // The status of the order
        //                "createdAt": "2023-07-11T07:04:20.131Z",                 // Date-time of order creation, UTC
        //                "updatedAt": "2023-07-11T07:04:20.131Z"                  // Date-time of the last update of the order, UTC
        //            }
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://docs.kuna.io/docs/get-private-orders-history
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch orders for
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.sort] asc (oldest-on-top) or desc (newest-on-top)
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("closed", symbol, since, limit, parameters);
    }

    public async virtual Task<object> fetchOrdersByStatus(object status, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchOrdersByStatus
        * @description fetch a list of orders
        * @see https://docs.kuna.io/docs/get-private-orders-history
        * @param {string} status canceled, closed, expired, open, pending, rejected, or waitStop
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] 1-100, the maximum number of open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest timestamp (ms) to fetch orders for
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.sort] asc (oldest-on-top) or desc (newest-on-top)
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(status, "open")))
        {
            return this.fetchOpenOrders(symbol, since, limit, parameters);
        }
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, new List<object>() {"until"});
        object market = null;
        object request = new Dictionary<string, object>() {
            { "status", this.capitalize(status) },
        };
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pairs"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["end"] = this.iso8601(until);
        }
        object response = await this.v4PrivateGetOrderPrivateHistory(request);
        //
        //    {
        //        "data": [
        //            {
        //                "id": "4b9b9705-e85f-4180-bdec-219fbf025fa3",           // Unique identifier of an order
        //                "type": "Limit",                                        // Type of an order
        //                "quantity": "0.00054",                                  // Original order quantity
        //                "executedQuantity": "0.00054",                          // Traded quantity in stock (>0 if traded)
        //                "cumulativeQuoteQty": "14.99580",                       // Traded quantity in money (>0 if traded)
        //                "cost": "14.9958",                                      // Total amount
        //                "side": "Bid",                                          // Bid for buying base asset, Ask for selling base asset. FYI: For BTC_USDT trading pair, BTC is the base asset
        //                "pair": "BTC_USDT",                                     // Traded pair
        //                "price": "27770",                                       // Price of the trade
        //                "status": "Closed",                                     // The status of the order
        //                "createdAt": "2023-05-08T08:39:46.708Z",                // Date-time of order creation, UTC
        //                "updatedAt": "2023-05-08T08:53:58.332Z",                // Date-time of the last update of the order, UTC
        //                "closedAt": "2023-05-08T08:53:58.333Z"                  // Date-time of order finish time, UTC
        //            },
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://docs.kuna.io/docs/get-private-trades-history
        * @param {string} symbol unified market symbol
        * @param {int} [since] not used by kuna fetchMyTrades
        * @param {int} [limit] not used by kuna fetchMyTrades
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.orderId] UUID of an order, to receive trades for this order only
        * @param {string} [params.sort] asc (oldest-on-top) or desc (newest-on-top)
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(market, "id");
        }
        object response = await this.v4PrivateGetTradePrivateHistory(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "id": "edb17459-c9bf-4148-9ae6-7367d7f55d71",        // Unique identifier of a trade
        //                "orderId": "a80bec3f-4ffa-45c1-9d78-f6301e9748fe",   // Unique identifier of an order associated with the trade
        //                "pair": "BTC_USDT",                                  // Traded pair, base asset first, followed by quoted asset
        //                "quantity": "1.5862",                                // Traded quantity of base asset
        //                "price": "19087",                                    // Price of the trade
        //                "isTaker": true,                                     // Various fees for Makers and Takers; "Market" orders are always `true`
        //                "fee": "0.0039655",                                  // Exchange commission fee
        //                "feeCurrency": "BTC",                                // Currency of the commission
        //                "isBuyer": true,                                     // Buy or sell the base asset
        //                "quoteQuantity": "30275.7994",                       // Quote asset quantity spent to fulfill the base amount
        //                "createdAt": "2022-09-29T13:43:53.824Z",             // Date-time of trade execution, UTC
        //            },
        //        ]
        //    }
        //
        object data = this.safeList(response, "data");
        return this.parseTrades(data, market, since, limit);
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#withdraw
        * @description make a withdrawal
        * @see https://docs.kuna.io/docs/create-a-withdraw
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.chain] the chain to withdraw to
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.id] id must be a uuid format, if you do not specify id, it will be generated automatically
        * @param {boolean} [params.withdrawAll] this field says that the amount should also include a fee
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        this.checkAddress(address);
        object chain = this.safeString2(parameters, "chain", "network");
        parameters = this.omit(parameters, new List<object>() {"chain", "network"});
        await this.loadMarkets();
        object currency = this.currency(code);
        if (isTrue(isEqual(chain, null)))
        {
            if (isTrue(isGreaterThan(getIndexOf(getValue(currency, "code"), "USD"), 0)))
            {
                throw new ArgumentsRequired ((string)add(add(this.id, " withdraw () requires an extra parameter params[\"network\"] to withdraw "), getValue(currency, "code"))) ;
            } else
            {
                chain = ((string)getValue(currency, "id")).ToUpper();
            }
        }
        object networkId = this.networkCodeToId(chain);
        object request = new Dictionary<string, object>() {
            { "currency", networkId },
            { "amount", amount },
            { "address", address },
            { "paymentMethod", chain },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((IDictionary<string,object>)request)["paymentId"] = tag;
        }
        object response = await this.v4PrivatePostWithdrawPrivateCreate(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "edb17459-c9bf-4148-9ae6-7367d7f55d71",     // unique identifier of a withdraw
        //            "status": "waitingForConfirmation"                // status of a withdraw, if you turn off withdrawal confirmation by email, it will return "processing" status, which means that the transaction is already being processed on our side
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTransaction(data, currency);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchWithdrawals
        * @description fetch all withdrawals made to an account
        * @see https://docs.kuna.io/docs/get-withdraw-history
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch deposits for
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.status] Created, Canceled, PartiallyProcessed, Processing, Processed, WaitForConfirmation, Pending, AmlChecking
        * @param {string} [params.sortField] amount (sorting by time), createdAt (sorting by date)
        * @param {string} [params.sortOrder] asc (oldest-on-top), or desc (newest-on-top, default)
        * @param {int} [params.skip] 0 - ... Select the number of transactions to skip
        * @param {string} [params.address]
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, "until");
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            ((IDictionary<string,object>)request)["currency"] = code;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["dateFrom"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["take"] = limit;
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["dateTo"] = this.iso8601(until);
        }
        object response = await this.v4PrivateGetWithdrawPrivateHistory(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "id": "e9aa15b8-9c19-42eb-800a-026a7a153990",                                 // Unique identifier of withdrawal
        //                "amount": "10.75",                                                            // Amount deducted from your account
        //                "asset": "USDT",                                                              // Withdrawal currency
        //                "merchantId": "16214228-5c0c-5abc-be6a-c90259b21d4e",                         // Internal ID (not for use)
        //                "paymentCode": "TRX",                                                         // Blockchain name
        //                "status": "Processed",                                                        // Withdrawal status
        //                "type": "Withdraw",                                                           // Transaction type
        //                "reason": [],                                                                 // Reason for manual transaction processing
        //                "address": "TL3CWAwviQQYSnzHT4RotCWYnarnunQM46",                              // Withdrawal address
        //                "memo": "",                                                                   // Withdrawal memo
        //                "txId": "5ecc4e559b528c57be6723ac960a38211fbd3101ef4b59008452b3bd88c84621",   // Withdrawal transaction hash
        //                "fee": "0.75",                                                                // Withdrawal fee
        //                "processedAmount": "10",                                                      // Withdrawal amount
        //                "createdAt": "2023-06-09T11:33:02.383Z",                                      // Withdrawal creation date
        //                "updatedAt": "2023-06-09T11:34:25.317Z"                                       // Date of final withdrawal status
        //            },
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency);
    }

    public async virtual Task<object> fetchWithdrawal(object id, object code = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchWithdrawal
        * @description fetch data on a currency withdrawal via the withdrawal id
        * @see https://docs.kuna.io/docs/get-withdraw-details-by-id
        * @param {string} id withdrawal id
        * @param {string} code not used by kuna.fetchWithdrawal
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "withdrawId", id },
        };
        object response = await this.v4PrivateGetWithdrawPrivateDetailsWithdrawId(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "e9aa15b8-9c19-42eb-800a-026a7a153990",                                 // Unique identifier of withdrawal
        //            "amount": "10.75",                                                            // Amount deducted from your account
        //            "asset": "USDT",                                                              // Withdrawal currency
        //            "merchantId": "16214228-5c0c-5abc-be6a-c90259b21d4e",                         // Internal ID (not for use)
        //            "paymentCode": "TRX",                                                         // Blockchain name
        //            "status": "Processed",                                                        // Withdrawal status
        //            "type": "Withdraw",                                                           // Transaction type
        //            "reason": [],                                                                 // Reason for manual transaction processing
        //            "address": "TL3CWAwviQQYSnzHT4RotCWYnarnunQM46",                              // Withdrawal address
        //            "memo": "",                                                                   // Withdrawal memo
        //            "txId": "5ecc4e559b528c57be6723ac960a38211fbd3101ef4b59008452b3bd88c84621",   // Withdrawal transaction hash
        //            "fee": "0.75",                                                                // Withdrawal fee
        //            "processedAmount": "10",                                                      // Withdrawal amount
        //            "createdAt": "2023-06-09T11:33:02.383Z",                                      // Withdrawal creation date
        //            "updatedAt": "2023-06-09T11:34:25.317Z"                                       // Date of final withdrawal status
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTransaction(data);
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name kuna#createDepositAddress
        * @description create a currency deposit address
        * @see https://docs.kuna.io/docs/generate-a-constant-crypto-address-for-deposit
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "source", getValue(currency, "id") },
        };
        object response = await this.v4PrivatePostDepositPrivateCryptoGenerateAddress(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "1300c2b6-ree4-4f1e-2a9d-e0f7ed0991a7",                // ID of your address
        //            "source": "BTC",                                             // Blockchain name for which you want to get the address to deposit into the account
        //            "address": "bc1qm6xfv0qsaaanx0egn6hca5vgsd4r7ak9ttha2a"      // Your deposit address
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseDepositAddress(data, currency);
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @see https://docs.kuna.io/docs/find-crypto-address-for-deposit
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "source", ((string)getValue(currency, "id")).ToUpper() },
        };
        object response = await this.v4PrivateGetDepositPrivateCryptoAddress(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "c52b6646-fb91-4760-b147-a4f952e8652c",             // ID of the address.
        //            "source": "BTC",                                          // Blockchain name for which you want to get the address to deposit into the account.
        //            "address": "bc1qm6xfv0qsaaanx0egn6hca5vgsd4r7ak9ttha2a"   // Your deposit address
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseDepositAddress(data, currency);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        //
        //    {
        //        "id": "c52b6646-fb91-4760-b147-a4f952e8652c",             // ID of the address.
        //        "source": "BTC",                                          // Blockchain name for which you want to get the address to deposit into the account.
        //        "address": "bc1qm6xfv0qsaaanx0egn6hca5vgsd4r7ak9ttha2a"   // Your deposit address
        //    }
        //
        object currencyId = this.safeString(depositAddress, "source");
        return new Dictionary<string, object>() {
            { "info", this.safeString(depositAddress, "") },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "network", null },
            { "address", this.safeString(depositAddress, "address") },
            { "tag", null },
        };
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "Created", "pending" },
            { "Canceled", "canceled" },
            { "PartiallyProcessed", "pending" },
            { "Processing", "pending" },
            { "Processed", "ok" },
            { "WaitForConfirmation", "pending" },
            { "Pending", "pending" },
            { "AmlChecking", "pending" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://docs.kuna.io/docs/get-deposit-history
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch deposits for
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.status] Created, Canceled, PartiallyProcessed, Processing, Processed, WaitForConfirmation, Pending, AmlChecking
        * @param {string} [params.sortField] amount (sorting by time), createdAt (sorting by date)
        * @param {string} [params.sortOrder] asc (oldest-on-top), or desc (newest-on-top, default)
        * @param {int} [params.skip] 0 - ... Select the number of transactions to skip
        * @param {string} [params.address]
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, "until");
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            ((IDictionary<string,object>)request)["currency"] = code;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["dateFrom"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["take"] = limit;
        }
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["dateTo"] = this.iso8601(until);
        }
        object response = await this.v4PrivateGetDepositPrivateHistory(this.extend(request, parameters));
        //
        //    {
        //        "data": [
        //            {
        //                "id": "a201cb3c-5830-57ac-ad2c-f6a588dd55eb",                               // Unique ID of deposit
        //                "amount": "9.9",                                                            // Amount credited to your account
        //                "asset": "USDT",                                                            // Deposit currency
        //                "merchantId": "16214228-5c0c-5abc-be6a-c90259b21d4e",                       // Internal ID (not for use)
        //                "paymentCode": "TRX",                                                       // Blockchain name
        //                "status": "Processed",                                                      // Transactions status
        //                "type": "Deposit",                                                          // Transaction type
        //                "reason": [],                                                               // Reason for manual transaction processing
        //                "address": "TNeBQz8RyGGiAYAR7r8G6QGxtTWDkpH4dV",                            // Deposit address
        //                "memo": "",                                                                 // Deposit memo
        //                "txId": "8a0b0c5a2ac5679879b71b2fa63b0a5c39f90bc8ff6c41e708906b398ac3d4ef", // Deposit transaction hash
        //                "fee": "0.1",                                                               // Deposit fee
        //                "processedAmount": "10",                                                    // Amount of deposit
        //                "createdAt": "2023-06-13T12:55:01.256Z",                                    // Deposit receipt date
        //                "updatedAt": "2023-06-13T12:55:01.696Z"                                     // Deposit credit date
        //            },
        //            ...
        //        ]
        //    }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency);
    }

    public async virtual Task<object> fetchDeposit(object id, object code = null, object parameters = null)
    {
        /**
        * @method
        * @name kuna#fetchDeposit
        * @description fetch data on a currency deposit via the deposit id
        * @see https://docs.kuna.io/docs/get-deposit-details-by-id
        * @param {string} id deposit id
        * @param {string} code filter by currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {
            { "depositId", id },
        };
        object response = await this.v4PrivateGetDepositPrivateDetailsDepositId(this.extend(request, parameters));
        //
        //    {
        //        "data": {
        //            "id": "a201cb3c-5830-57ac-ad2c-f6a588dd55eb",                               // Unique ID of deposit
        //            "amount": "9.9",                                                            // Amount credited to your account
        //            "asset": "USDT",                                                            // Deposit currency
        //            "merchantId": "16214228-5c0c-5abc-be6a-c90259b21d4e",                       // Internal ID (not for use)
        //            "paymentCode": "TRX",                                                       // Blockchain name
        //            "status": "Processed",                                                      // Transactions status
        //            "type": "Deposit",                                                          // Transaction type
        //            "reason": [],                                                               // Reason for manual transaction processing
        //            "address": "TNeBQz8RyGGiAYAR7r8G6QGxtTWDkpH4dV",                            // Deposit address
        //            "memo": "",                                                                 // Deposit memo
        //            "txId": "8a0b0c5a2ac5679879b71b2fa63b0a5c39f90bc8ff6c41e708906b398ac3d4ef", // Deposit transaction hash
        //            "fee": "0.1",                                                               // Deposit fee
        //            "processedAmount": "10",                                                    // Amount of deposit
        //            "createdAt": "2023-06-13T12:55:01.256Z",                                    // Deposit receipt date
        //            "updatedAt": "2023-06-13T12:55:01.696Z"                                     // Deposit credit date
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTransaction(data, currency);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        //    {
        //        "id": "a201cb3c-5830-57ac-ad2c-f6a588dd55eb",                               // Unique ID of deposit
        //        "amount": "9.9",                                                            // Amount credited to your account
        //        "asset": "USDT",                                                            // Deposit currency
        //        "merchantId": "16214228-5c0c-5abc-be6a-c90259b21d4e",                       // Internal ID (not for use)
        //        "paymentCode": "TRX",                                                       // Blockchain name
        //        "status": "Processed",                                                      // Transactions status
        //        "type": "Deposit",                                                          // Transaction type
        //        "reason": [],                                                               // Reason for manual transaction processing
        //        "address": "TNeBQz8RyGGiAYAR7r8G6QGxtTWDkpH4dV",                            // Deposit address
        //        "memo": "",                                                                 // Deposit memo
        //        "txId": "8a0b0c5a2ac5679879b71b2fa63b0a5c39f90bc8ff6c41e708906b398ac3d4ef", // Deposit transaction hash
        //        "fee": "0.1",                                                               // Deposit fee
        //        "processedAmount": "10",                                                    // Amount of deposit
        //        "createdAt": "2023-06-13T12:55:01.256Z",                                    // Deposit receipt date
        //        "updatedAt": "2023-06-13T12:55:01.696Z"                                     // Deposit credit date
        //    }
        //
        object datetime = this.safeString(transaction, "createdAt");
        object currencyId = this.safeString(transaction, "asset");
        object code = this.safeCurrencyCode(currencyId, currency);
        object networkId = this.safeString(transaction, "paymentCode");
        object type = this.safeStringLower(transaction, "type");
        object address = this.safeString(transaction, "address");
        object isDeposit = (isEqual(type, "deposit"));
        object parsedType = ((bool) isTrue(isDeposit)) ? type : "withdrawal";
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", this.safeString(transaction, "id") },
            { "txid", this.safeString(transaction, "txId") },
            { "currency", code },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "network", this.networkIdToCode(networkId) },
            { "addressFrom", null },
            { "address", address },
            { "addressTo", address },
            { "amount", this.safeNumber(transaction, "amount") },
            { "type", parsedType },
            { "status", this.parseTransactionStatus(this.safeString(transaction, "status")) },
            { "updated", this.parse8601(this.safeString(transaction, "updatedAt")) },
            { "tagFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "comment", this.safeString(transaction, "memo") },
            { "internal", null },
            { "fee", new Dictionary<string, object>() {
                { "cost", this.safeNumber(transaction, "fee") },
                { "currency", code },
            } },
        };
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public virtual object encodeParams(object parameters)
    {
        if (isTrue(inOp(parameters, "orders")))
        {
            object orders = getValue(parameters, "orders");
            object query = this.urlencode(this.keysort(this.omit(parameters, "orders")));
            for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
            {
                object order = getValue(orders, i);
                object keys = new List<object>(((IDictionary<string,object>)order).Keys);
                for (object k = 0; isLessThan(k, getArrayLength(keys)); postFixIncrement(ref k))
                {
                    object key = getValue(keys, k);
                    object value = getValue(order, key);
                    query = add(query, add(add(add("&orders%5B%5D%5B", key), "%5D="), ((object)value).ToString()));
                }
            }
            return query;
        }
        return this.urlencode(this.keysort(parameters));
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = null;
        if (isTrue(((api is IList<object>) || (api.GetType().IsGenericType && api.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            object isGet = isEqual(method, "GET");
            object version = this.safeString(api, 0);
            object access = this.safeString(api, 1);
            if (isTrue(isEqual(version, "v3")))
            {
                url = add(add(add(add(getValue(getValue(this.urls, "api"), version), "/"), version), "/"), this.implodeParams(path, parameters));
                if (isTrue(isEqual(access, "public")))
                {
                    if (isTrue(isGet))
                    {
                        if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
                        {
                            url = add(url, add("?", this.urlencode(parameters)));
                        }
                    } else if (isTrue(isTrue((isEqual(method, "POST"))) || isTrue((isEqual(method, "PUT")))))
                    {
                        headers = new Dictionary<string, object>() {
                            { "Content-Type", "application/json" },
                        };
                        body = this.json(parameters);
                    }
                } else if (isTrue(isEqual(access, "private")))
                {
                    throw new NotSupported ((string)add(this.id, " private v3 API is not supported yet")) ;
                }
            } else if (isTrue(isEqual(version, "v4")))
            {
                object extractedParams = this.extractParams(path);
                object urlPath = add(add(add("/", version), "/"), this.implodeParams(path, parameters));
                parameters = this.omit(parameters, extractedParams);
                if (isTrue(isGet))
                {
                    object paramsList = new List<object>(((IDictionary<string,object>)parameters).Keys);
                    object numParams = getArrayLength(paramsList);
                    if (isTrue(isGreaterThan(numParams, 0)))
                    {
                        urlPath = add(urlPath, add("?", this.urlencode(parameters)));
                    }
                }
                if (isTrue(isEqual(access, "private")))
                {
                    object nonce = ((object)this.nonce()).ToString();
                    object auth = add(urlPath, nonce);
                    if (isTrue(isGet))
                    {
                        auth = add(auth, this.json(new Dictionary<string, object>() {}));
                    } else
                    {
                        auth = add(auth, this.json(parameters));
                        body = parameters;
                    }
                    headers = new Dictionary<string, object>() {
                        { "Content-Type", "application/json" },
                        { "accept", "application/json" },
                        { "nonce", nonce },
                        { "public-key", this.apiKey },
                        { "signature", this.hmac(this.encode(auth), this.encode(this.secret), sha384, "hex") },
                    };
                    object account = this.safeString(this.options, "account");
                    if (isTrue(isEqual(account, "pro")))
                    {
                        ((IDictionary<string,object>)headers)["account"] = "pro";
                    }
                }
                url = add(getValue(getValue(this.urls, "api"), version), urlPath);
            }
        } else
        {
            object request = add(add(add("/api/", this.version), "/"), this.implodeParams(path, parameters));
            if (isTrue(inOp(this.urls, "extension")))
            {
                request = add(request, getValue(this.urls, "extension"));
            }
            object query = this.omit(parameters, this.extractParams(path));
            url = add(getValue(getValue(this.urls, "api"), api), request);
            if (isTrue(isEqual(api, "public")))
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            } else
            {
                this.checkRequiredCredentials();
                object nonce = ((object)this.nonce()).ToString();
                object queryInner = this.encodeParams(this.extend(new Dictionary<string, object>() {
                    { "access_key", this.apiKey },
                    { "tonce", nonce },
                }, parameters));
                object auth = add(add(add(add(method, "|"), request), "|"), queryInner);
                object signed = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
                object suffix = add(add(query, "&signature="), signed);
                if (isTrue(isEqual(method, "GET")))
                {
                    url = add(url, add("?", suffix));
                } else
                {
                    body = suffix;
                    headers = new Dictionary<string, object>() {
                        { "Content-Type", "application/x-www-form-urlencoded" },
                    };
                }
            }
        }
        if (isTrue(!isEqual(body, null)))
        {
            body = json(body);
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        //
        //    {
        //        "errors": [
        //            {
        //                "extensions": {
        //                    "code": "IP_NOT_IN_WHITE_LIST"
        //                },
        //                "code": "IP_NOT_IN_WHITE_LIST"
        //            }
        //        ]
        //    }
        //
        object errors = this.safeValue(response, "errors");
        if (isTrue(isTrue((isEqual(response, null))) && isTrue((isEqual(errors, null)))))
        {
            return null;
        }
        if (isTrue(isTrue((!isEqual(errors, null))) || isTrue((isEqual(code, 400)))))
        {
            object error = this.safeValue(errors, 0);
            if (isTrue(isEqual(error, null)))
            {
                error = this.safeValue(response, "error");
            }
            object errorCode = this.safeString(error, "code");
            object feedback = add(add(this.id, " "), this.json(response));
            this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
