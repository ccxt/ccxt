namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class mercado : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "mercado" },
            { "name", "Mercado Bitcoin" },
            { "countries", new List<object>() {"BR"} },
            { "rateLimit", 1000 },
            { "version", "v3" },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createMarketOrder", true },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistory", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", "emulated" },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", false },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "15m", "15m" },
                { "1h", "1h" },
                { "3h", "3h" },
                { "1d", "1d" },
                { "1w", "1w" },
                { "1M", "1M" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27837060-e7c58714-60ea-11e7-9192-f05e86adb83f.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://www.mercadobitcoin.net/api" },
                    { "private", "https://www.mercadobitcoin.net/tapi" },
                    { "v4Public", "https://www.mercadobitcoin.com.br/v4" },
                    { "v4PublicNet", "https://api.mercadobitcoin.net/api/v4" },
                } },
                { "www", "https://www.mercadobitcoin.com.br" },
                { "doc", new List<object>() {"https://www.mercadobitcoin.com.br/api-doc", "https://www.mercadobitcoin.com.br/trade-api"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"coins", "{coin}/orderbook/", "{coin}/ticker/", "{coin}/trades/", "{coin}/trades/{from}/", "{coin}/trades/{from}/{to}", "{coin}/day-summary/{year}/{month}/{day}/"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"cancel_order", "get_account_info", "get_order", "get_withdrawal", "list_system_messages", "list_orders", "list_orderbook", "place_buy_order", "place_sell_order", "place_market_buy_order", "place_market_sell_order", "withdraw_coin"} },
                } },
                { "v4Public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"{coin}/candle/"} },
                } },
                { "v4PublicNet", new Dictionary<string, object>() {
                    { "get", new List<object>() {"candles"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", 0.003 },
                    { "taker", 0.007 },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "limits", new Dictionary<string, object>() {
                    { "BTC", 0.001 },
                    { "BCH", 0.001 },
                    { "ETH", 0.01 },
                    { "LTC", 0.01 },
                    { "XRP", 0.1 },
                } },
            } },
            { "precisionMode", TICK_SIZE },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchMarkets
        * @description retrieves data on all markets for mercado
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetCoins(parameters);
        //
        //     [
        //         "BCH",
        //         "BTC",
        //         "ETH",
        //         "LTC",
        //         "XRP",
        //         "MBPRK01",
        //         "MBPRK02",
        //         "MBPRK03",
        //         "MBPRK04",
        //         "MBCONS01",
        //         "USDC",
        //         "WBX",
        //         "CHZ",
        //         "MBCONS02",
        //         "PAXG",
        //         "MBVASCO01",
        //         "LINK"
        //     ]
        //
        object result = new List<object>() {};
        object amountLimits = this.safeValue(this.options, "limits", new Dictionary<string, object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object coin = getValue(response, i);
            object baseId = coin;
            object quoteId = "BRL";
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object id = add(quote, bs);
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", null },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber("1e-8") },
                    { "price", this.parseNumber("1e-5") },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(amountLimits, baseId) },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", this.parseNumber("1e-5") },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", coin },
            });
        }
        return result;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(market, "base") },
        };
        object response = await this.publicGetCoinOrderbook(this.extend(request, parameters));
        return this.parseOrderBook(response, getValue(market, "symbol"));
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "high":"103.96000000",
        //         "low":"95.00000000",
        //         "vol":"2227.67806598",
        //         "last":"97.91591000",
        //         "buy":"95.52760000",
        //         "sell":"97.91475000",
        //         "open":"99.79955000",
        //         "date":1643382606
        //     }
        //
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.safeTimestamp(ticker, "date");
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "buy") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "sell") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "vol") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(market, "base") },
        };
        object response = await this.publicGetCoinTicker(this.extend(request, parameters));
        object ticker = this.safeValue(response, "ticker", new Dictionary<string, object>() {});
        //
        //     {
        //         "ticker": {
        //             "high":"1549.82293000",
        //             "low":"1503.00011000",
        //             "vol":"81.82827101",
        //             "last":"1533.15000000",
        //             "buy":"1533.21018000",
        //             "sell":"1540.09000000",
        //             "open":"1524.71089000",
        //             "date":1643691671
        //         }
        //     }
        //
        return this.parseTicker(ticker, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        object timestamp = this.safeTimestamp2(trade, "date", "executed_timestamp");
        market = this.safeMarket(null, market);
        object id = this.safeString2(trade, "tid", "operation_id");
        object type = null;
        object side = this.safeString(trade, "type");
        object price = this.safeString(trade, "price");
        object amount = this.safeString2(trade, "amount", "quantity");
        object feeCost = this.safeString(trade, "fee_rate");
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", null },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", null },
            { "type", type },
            { "side", side },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object method = "publicGetCoinTrades";
        object request = new Dictionary<string, object>() {
            { "coin", getValue(market, "base") },
        };
        if (isTrue(!isEqual(since, null)))
        {
            method = add(method, "From");
            ((IDictionary<string,object>)request)["from"] = this.parseToInt(divide(since, 1000));
        }
        object to = this.safeInteger(parameters, "to");
        if (isTrue(!isEqual(to, null)))
        {
            method = add(method, "To");
        }
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        return this.parseTrades(response, market, since, limit);
    }

    public override object parseBalance(object response)
    {
        object data = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object balances = this.safeValue(data, "balance", new Dictionary<string, object>() {});
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object currencyIds = new List<object>(((IDictionary<string,object>)balances).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object code = this.safeCurrencyCode(currencyId);
            if (isTrue(inOp(balances, currencyId)))
            {
                object balance = this.safeValue(balances, currencyId, new Dictionary<string, object>() {});
                object account = this.account();
                ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "available");
                ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "total");
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetAccountInfo(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin_pair", getValue(market, "id") },
        };
        object method = add(this.capitalize(side), "Order");
        if (isTrue(isEqual(type, "limit")))
        {
            method = add("privatePostPlace", method);
            ((IDictionary<string,object>)request)["limit_price"] = this.priceToPrecision(getValue(market, "symbol"), price);
            ((IDictionary<string,object>)request)["quantity"] = this.amountToPrecision(getValue(market, "symbol"), amount);
        } else
        {
            method = add("privatePostPlaceMarket", method);
            if (isTrue(isEqual(side, "buy")))
            {
                if (isTrue(isEqual(price, null)))
                {
                    throw new InvalidOrder ((string)add(this.id, " createOrder() requires the price argument with market buy orders to calculate total order cost (amount to spend), where cost = amount * price. Supply a price argument to createOrder() call if you want the cost to be calculated for you from price and amount")) ;
                }
                ((IDictionary<string,object>)request)["cost"] = this.priceToPrecision(getValue(market, "symbol"), multiply(amount, price));
            } else
            {
                ((IDictionary<string,object>)request)["quantity"] = this.amountToPrecision(getValue(market, "symbol"), amount);
            }
        }
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        // TODO: replace this with a call to parseOrder for unification
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", response },
            { "id", ((object)getValue(getValue(getValue(response, "response_data"), "order"), "order_id")).ToString() },
        }, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin_pair", getValue(market, "id") },
            { "order_id", id },
        };
        object response = await this.privatePostCancelOrder(this.extend(request, parameters));
        //
        //     {
        //         "response_data": {
        //             "order": {
        //                 "order_id": 2176769,
        //                 "coin_pair": "BRLBCH",
        //                 "order_type": 2,
        //                 "status": 3,
        //                 "has_fills": false,
        //                 "quantity": "0.10000000",
        //                 "limit_price": "1996.15999",
        //                 "executed_quantity": "0.00000000",
        //                 "executed_price_avg": "0.00000",
        //                 "fee": "0.00000000",
        //                 "created_timestamp": "1536956488",
        //                 "updated_timestamp": "1536956499",
        //                 "operations": []
        //             }
        //         },
        //         "status_code": 100,
        //         "server_unix_timestamp": "1536956499"
        //     }
        //
        object responseData = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object order = this.safeDict(responseData, "order", new Dictionary<string, object>() {});
        return this.parseOrder(order, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "2", "open" },
            { "3", "canceled" },
            { "4", "closed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //     {
        //         "order_id": 4,
        //         "coin_pair": "BRLBTC",
        //         "order_type": 1,
        //         "status": 2,
        //         "has_fills": true,
        //         "quantity": "2.00000000",
        //         "limit_price": "900.00000",
        //         "executed_quantity": "1.00000000",
        //         "executed_price_avg": "900.00000",
        //         "fee": "0.00300000",
        //         "created_timestamp": "1453838494",
        //         "updated_timestamp": "1453838494",
        //         "operations": [
        //             {
        //                 "operation_id": 1,
        //                 "quantity": "1.00000000",
        //                 "price": "900.00000",
        //                 "fee_rate": "0.30",
        //                 "executed_timestamp": "1453838494",
        //             },
        //         ],
        //     }
        //
        object id = this.safeString(order, "order_id");
        object order_type = this.safeString(order, "order_type");
        object side = null;
        if (isTrue(inOp(order, "order_type")))
        {
            side = ((bool) isTrue((isEqual(order_type, "1")))) ? "buy" : "sell";
        }
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object marketId = this.safeString(order, "coin_pair");
        market = this.safeMarket(marketId, market);
        object timestamp = this.safeTimestamp(order, "created_timestamp");
        object fee = new Dictionary<string, object>() {
            { "cost", this.safeString(order, "fee") },
            { "currency", getValue(market, "quote") },
        };
        object price = this.safeString(order, "limit_price");
        // price = this.safeNumber (order, 'executed_price_avg', price);
        object average = this.safeString(order, "executed_price_avg");
        object amount = this.safeString(order, "quantity");
        object filled = this.safeString(order, "executed_quantity");
        object lastTradeTimestamp = this.safeTimestamp(order, "updated_timestamp");
        object rawTrades = this.safeValue(order, "operations", new List<object>() {});
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", lastTradeTimestamp },
            { "symbol", getValue(market, "symbol") },
            { "type", "limit" },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "average", average },
            { "amount", amount },
            { "filled", filled },
            { "remaining", null },
            { "status", status },
            { "fee", fee },
            { "trades", rawTrades },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin_pair", getValue(market, "id") },
            { "order_id", parseInt(id) },
        };
        object response = await this.privatePostGetOrder(this.extend(request, parameters));
        object responseData = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object order = this.safeDict(responseData, "order");
        return this.parseOrder(order, market);
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#withdraw
        * @description make a withdrawal
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(currency, "id") },
            { "quantity", toFixed(amount, 10) },
            { "address", address },
        };
        if (isTrue(isEqual(code, "BRL")))
        {
            object account_ref = (inOp(parameters, "account_ref"));
            if (!isTrue(account_ref))
            {
                throw new ArgumentsRequired ((string)add(add(this.id, " withdraw() requires account_ref parameter to withdraw "), code)) ;
            }
        } else if (isTrue(!isEqual(code, "LTC")))
        {
            object tx_fee = (inOp(parameters, "tx_fee"));
            if (!isTrue(tx_fee))
            {
                throw new ArgumentsRequired ((string)add(add(this.id, " withdraw() requires tx_fee parameter to withdraw "), code)) ;
            }
            if (isTrue(isEqual(code, "XRP")))
            {
                if (isTrue(isEqual(tag, null)))
                {
                    if (!isTrue((inOp(parameters, "destination_tag"))))
                    {
                        throw new ArgumentsRequired ((string)add(add(this.id, " withdraw() requires a tag argument or destination_tag parameter to withdraw "), code)) ;
                    }
                } else
                {
                    ((IDictionary<string,object>)request)["destination_tag"] = tag;
                }
            }
        }
        object response = await this.privatePostWithdrawCoin(this.extend(request, parameters));
        //
        //     {
        //         "response_data": {
        //             "withdrawal": {
        //                 "id": 1,
        //                 "coin": "BRL",
        //                 "quantity": "300.56",
        //                 "net_quantity": "291.68",
        //                 "fee": "8.88",
        //                 "account": "bco: 341, ag: 1111, cta: 23456-X",
        //                 "status": 1,
        //                 "created_timestamp": "1453912088",
        //                 "updated_timestamp": "1453912088"
        //             }
        //         },
        //         "status_code": 100,
        //         "server_unix_timestamp": "1453912088"
        //     }
        //
        object responseData = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object withdrawal = this.safeDict(responseData, "withdrawal");
        return this.parseTransaction(withdrawal, currency);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        //     {
        //         "id": 1,
        //         "coin": "BRL",
        //         "quantity": "300.56",
        //         "net_quantity": "291.68",
        //         "fee": "8.88",
        //         "account": "bco: 341, ag: 1111, cta: 23456-X",
        //         "status": 1,
        //         "created_timestamp": "1453912088",
        //         "updated_timestamp": "1453912088"
        //     }
        //
        currency = this.safeCurrency(null, currency);
        return new Dictionary<string, object>() {
            { "id", this.safeString(transaction, "id") },
            { "txid", null },
            { "timestamp", null },
            { "datetime", null },
            { "network", null },
            { "addressFrom", null },
            { "address", null },
            { "addressTo", null },
            { "amount", null },
            { "type", null },
            { "currency", getValue(currency, "code") },
            { "status", null },
            { "updated", null },
            { "tagFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "comment", null },
            { "internal", null },
            { "fee", null },
            { "info", transaction },
        };
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        return new List<object> {this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "15m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "resolution", this.safeString(this.timeframes, timeframe, timeframe) },
            { "symbol", add(add(getValue(market, "base"), "-"), getValue(market, "quote")) },
        };
        if (isTrue(isEqual(limit, null)))
        {
            limit = 100; // set some default limit, as it's required if user doesn't provide it
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["from"] = this.parseToInt(divide(since, 1000));
            ((IDictionary<string,object>)request)["to"] = this.sum(getValue(request, "from"), multiply(limit, this.parseTimeframe(timeframe)));
        } else
        {
            ((IDictionary<string,object>)request)["to"] = this.seconds();
            ((IDictionary<string,object>)request)["from"] = subtract(getValue(request, "to"), (multiply(limit, this.parseTimeframe(timeframe))));
        }
        object response = await this.v4PublicNetGetCandles(this.extend(request, parameters));
        object candles = this.convertTradingViewToOHLCV(response, "t", "o", "h", "l", "c", "v");
        return this.parseOHLCVs(candles, market, timeframe, since, limit);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin_pair", getValue(market, "id") },
        };
        object response = await this.privatePostListOrders(this.extend(request, parameters));
        object responseData = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object orders = this.safeList(responseData, "orders", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of open order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin_pair", getValue(market, "id") },
            { "status_list", "[2]" },
        };
        object response = await this.privatePostListOrders(this.extend(request, parameters));
        object responseData = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object orders = this.safeList(responseData, "orders", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name mercado#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin_pair", getValue(market, "id") },
            { "has_fills", true },
        };
        object response = await this.privatePostListOrders(this.extend(request, parameters));
        object responseData = this.safeValue(response, "response_data", new Dictionary<string, object>() {});
        object ordersRaw = this.safeValue(responseData, "orders", new List<object>() {});
        object orders = this.parseOrders(ordersRaw, market, since, limit);
        object trades = this.ordersToTrades(orders);
        return this.filterBySymbolSinceLimit(trades, getValue(market, "symbol"), since, limit);
    }

    public virtual object ordersToTrades(object orders)
    {
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
        {
            object trades = this.safeValue(getValue(orders, i), "trades", new List<object>() {});
            for (object y = 0; isLessThan(y, getArrayLength(trades)); postFixIncrement(ref y))
            {
                ((IList<object>)result).Add(getValue(trades, y));
            }
        }
        return result;
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(getValue(getValue(this.urls, "api"), api), "/");
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isTrue(isTrue((isEqual(api, "public"))) || isTrue((isEqual(api, "v4Public")))) || isTrue((isEqual(api, "v4PublicNet")))))
        {
            url = add(url, this.implodeParams(path, parameters));
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            url = add(url, add(this.version, "/"));
            object nonce = this.nonce();
            body = this.urlencode(this.extend(new Dictionary<string, object>() {
                { "tapi_method", path },
                { "tapi_nonce", nonce },
            }, parameters));
            object auth = add(add(add(add("/tapi/", this.version), "/"), "?"), body);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
                { "TAPI-ID", this.apiKey },
                { "TAPI-MAC", this.hmac(this.encode(auth), this.encode(this.secret), sha512) },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        //
        // todo add a unified standard handleErrors with this.exceptions in describe()
        //
        //     {"status":503,"message":"Maintenancing, try again later","result":null}
        //
        object errorMessage = this.safeValue(response, "error_message");
        if (isTrue(!isEqual(errorMessage, null)))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), this.json(response))) ;
        }
        return null;
    }
}
