namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class bitbns : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "bitbns" },
            { "name", "Bitbns" },
            { "countries", new List<object>() {"IN"} },
            { "rateLimit", 1000 },
            { "certified", false },
            { "version", "v2" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", null },
                { "swap", false },
                { "future", false },
                { "option", null },
                { "cancelAllOrders", false },
                { "cancelOrder", true },
                { "createOrder", true },
                { "fetchBalance", true },
                { "fetchDepositAddress", true },
                { "fetchDeposits", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchPositionMode", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchStatus", true },
                { "fetchTicker", "emulated" },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", true },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "hostname", "bitbns.com" },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/117201933-e7a6e780-adf5-11eb-9d80-98fc2a21c3d6.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "www", "https://{hostname}" },
                    { "v1", "https://api.{hostname}/api/trade/v1" },
                    { "v2", "https://api.{hostname}/api/trade/v2" },
                } },
                { "www", "https://bitbns.com" },
                { "referral", "https://ref.bitbns.com/1090961" },
                { "doc", new List<object>() {"https://bitbns.com/trade/#/api-trading/"} },
                { "fees", "https://bitbns.com/fees" },
            } },
            { "api", new Dictionary<string, object>() {
                { "www", new Dictionary<string, object>() {
                    { "get", new List<object>() {"order/fetchMarkets", "order/fetchTickers", "order/fetchOrderbook", "order/getTickerWithVolume", "exchangeData/ohlc", "exchangeData/orderBook", "exchangeData/tradedetails"} },
                } },
                { "v1", new Dictionary<string, object>() {
                    { "get", new List<object>() {"platform/status", "tickers", "orderbook/sell/{symbol}", "orderbook/buy/{symbol}"} },
                    { "post", new List<object>() {"currentCoinBalance/EVERYTHING", "getApiUsageStatus/USAGE", "getOrderSocketToken/USAGE", "currentCoinBalance/{symbol}", "orderStatus/{symbol}", "depositHistory/{symbol}", "withdrawHistory/{symbol}", "withdrawHistoryAll/{symbol}", "depositHistoryAll/{symbol}", "listOpenOrders/{symbol}", "listOpenStopOrders/{symbol}", "getCoinAddress/{symbol}", "placeSellOrder/{symbol}", "placeBuyOrder/{symbol}", "buyStopLoss/{symbol}", "sellStopLoss/{symbol}", "cancelOrder/{symbol}", "cancelStopLossOrder/{symbol}", "listExecutedOrders/{symbol}", "placeMarketOrder/{symbol}", "placeMarketOrderQnty/{symbol}"} },
                } },
                { "v2", new Dictionary<string, object>() {
                    { "post", new List<object>() {"orders", "cancel", "getordersnew", "marginOrders"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "feeSide", "quote" },
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.0025") },
                    { "maker", this.parseNumber("0.0025") },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "400", typeof(BadRequest) },
                    { "409", typeof(BadSymbol) },
                    { "416", typeof(InsufficientFunds) },
                    { "417", typeof(OrderNotFound) },
                } },
                { "broad", new Dictionary<string, object>() {} },
            } },
        });
    }

    public async override Task<object> fetchStatus(object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchStatus
        * @description the latest known information on the availability of the exchange API
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.v1GetPlatformStatus(parameters);
        //
        //     {
        //         "data":{
        //             "BTC":{"status":1},
        //             "ETH":{"status":1},
        //             "XRP":{"status":1},
        //         },
        //         "status":1,
        //         "error":null,
        //         "code":200
        //     }
        //
        object statusRaw = this.safeString(response, "status");
        return new Dictionary<string, object>() {
            { "status", this.safeString(new Dictionary<string, object>() {
                { "1", "ok" },
            }, statusRaw, statusRaw) },
            { "updated", null },
            { "eta", null },
            { "url", null },
            { "info", response },
        };
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchMarkets
        * @description retrieves data on all markets for bitbns
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.wwwGetOrderFetchMarkets(parameters);
        //
        //     [
        //         {
        //             "id":"BTC",
        //             "symbol":"BTC/INR",
        //             "base":"BTC",
        //             "quote":"INR",
        //             "baseId":"BTC",
        //             "quoteId":"",
        //             "active":true,
        //             "limits":{
        //                 "amount":{"min":"0.00017376","max":20},
        //                 "price":{"min":2762353.2359999996,"max":6445490.883999999},
        //                 "cost":{"min":800,"max":128909817.67999998}
        //             },
        //             "precision":{
        //                 "amount":8,
        //                 "price":2
        //             },
        //             "info":{}
        //         },
        //     ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object market = getValue(response, i);
            object id = this.safeString(market, "id");
            object baseId = this.safeString(market, "base");
            object quoteId = this.safeString(market, "quote");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object marketPrecision = this.safeValue(market, "precision", new Dictionary<string, object>() {});
            object marketLimits = this.safeValue(market, "limits", new Dictionary<string, object>() {});
            object amountLimits = this.safeValue(marketLimits, "amount", new Dictionary<string, object>() {});
            object priceLimits = this.safeValue(marketLimits, "price", new Dictionary<string, object>() {});
            object costLimits = this.safeValue(marketLimits, "cost", new Dictionary<string, object>() {});
            object usdt = (isEqual(quoteId, "USDT"));
            // INR markets don't need a _INR prefix
            object uppercaseId = ((bool) isTrue(usdt)) ? (add(add(baseId, "_"), quoteId)) : baseId;
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "uppercaseId", uppercaseId },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", null },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(this.safeString(marketPrecision, "amount"))) },
                    { "price", this.parseNumber(this.parsePrecision(this.safeString(marketPrecision, "price"))) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(amountLimits, "min") },
                        { "max", this.safeNumber(amountLimits, "max") },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", this.safeNumber(priceLimits, "min") },
                        { "max", this.safeNumber(priceLimits, "max") },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", this.safeNumber(costLimits, "min") },
                        { "max", this.safeNumber(costLimits, "max") },
                    } },
                } },
                { "created", null },
                { "info", market },
            });
        }
        return result;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default 100, max 5000, see https://github.com/binance-exchange/binance-official-api-docs/blob/master/rest-api.md#order-book
        }
        object response = await this.wwwGetOrderFetchOrderbook(this.extend(request, parameters));
        //
        //     {
        //         "bids":[
        //             [49352.04,0.843948],
        //             [49352.03,0.742048],
        //             [49349.78,0.686239],
        //         ],
        //         "asks":[
        //             [49443.59,0.065137],
        //             [49444.63,0.098211],
        //             [49449.01,0.066309],
        //         ],
        //         "timestamp":1619172786577,
        //         "datetime":"2021-04-23T10:13:06.577Z",
        //         "nonce":""
        //     }
        //
        object timestamp = this.safeInteger(response, "timestamp");
        return this.parseOrderBook(response, getValue(market, "symbol"), timestamp);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "symbol":"BTC/INR",
        //         "info":{
        //             "highest_buy_bid":4368494.31,
        //             "lowest_sell_bid":4374835.09,
        //             "last_traded_price":4374835.09,
        //             "yes_price":4531016.27,
        //             "volume":{"max":"4569119.23","min":"4254552.13","volume":62.17722344}
        //         },
        //         "timestamp":1619100020845,
        //         "datetime":1619100020845,
        //         "high":"4569119.23",
        //         "low":"4254552.13",
        //         "bid":4368494.31,
        //         "bidVolume":"",
        //         "ask":4374835.09,
        //         "askVolume":"",
        //         "vwap":"",
        //         "open":4531016.27,
        //         "close":4374835.09,
        //         "last":4374835.09,
        //         "baseVolume":62.17722344,
        //         "quoteVolume":"",
        //         "previousClose":"",
        //         "change":-156181.1799999997,
        //         "percentage":-3.446934874943623,
        //         "average":4452925.68
        //     }
        //
        object timestamp = this.safeInteger(ticker, "timestamp");
        object marketId = this.safeString(ticker, "symbol");
        object symbol = this.safeSymbol(marketId, market);
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", this.safeString(ticker, "bidVolume") },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", this.safeString(ticker, "askVolume") },
            { "vwap", this.safeString(ticker, "vwap") },
            { "open", this.safeString(ticker, "open") },
            { "close", last },
            { "last", last },
            { "previousClose", this.safeString(ticker, "previousClose") },
            { "change", this.safeString(ticker, "change") },
            { "percentage", this.safeString(ticker, "percentage") },
            { "average", this.safeString(ticker, "average") },
            { "baseVolume", this.safeString(ticker, "baseVolume") },
            { "quoteVolume", this.safeString(ticker, "quoteVolume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.wwwGetOrderFetchTickers(parameters);
        //
        //     {
        //         "BTC/INR":{
        //             "symbol":"BTC/INR",
        //             "info":{
        //                 "highest_buy_bid":4368494.31,
        //                 "lowest_sell_bid":4374835.09,
        //                 "last_traded_price":4374835.09,
        //                 "yes_price":4531016.27,
        //                 "volume":{"max":"4569119.23","min":"4254552.13","volume":62.17722344}
        //             },
        //             "timestamp":1619100020845,
        //             "datetime":1619100020845,
        //             "high":"4569119.23",
        //             "low":"4254552.13",
        //             "bid":4368494.31,
        //             "bidVolume":"",
        //             "ask":4374835.09,
        //             "askVolume":"",
        //             "vwap":"",
        //             "open":4531016.27,
        //             "close":4374835.09,
        //             "last":4374835.09,
        //             "baseVolume":62.17722344,
        //             "quoteVolume":"",
        //             "previousClose":"",
        //             "change":-156181.1799999997,
        //             "percentage":-3.446934874943623,
        //             "average":4452925.68
        //         }
        //     }
        //
        return this.parseTickers(response, symbols);
    }

    public override object parseBalance(object response)
    {
        object timestamp = null;
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object keys = new List<object>(((IDictionary<string,object>)data).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object key = getValue(keys, i);
            object parts = ((string)key).Split(new [] {((string)"availableorder")}, StringSplitOptions.None).ToList<object>();
            object numParts = getArrayLength(parts);
            if (isTrue(isGreaterThan(numParts, 1)))
            {
                object currencyId = this.safeString(parts, 1);
                // note that "Money" stands for INR - the only fiat in bitbns
                object account = this.account();
                ((IDictionary<string,object>)account)["free"] = this.safeString(data, key);
                ((IDictionary<string,object>)account)["used"] = this.safeString(data, add("inorder", currencyId));
                if (isTrue(isEqual(currencyId, "Money")))
                {
                    currencyId = "INR";
                }
                object code = this.safeCurrencyCode(currencyId);
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.v1PostCurrentCoinBalanceEVERYTHING(parameters);
        //
        //     {
        //         "data":{
        //             "availableorderMoney":12.34, // INR
        //             "availableorderBTC":0,
        //             "availableorderXRP":0,
        //             "inorderMoney":0, // INR
        //             "inorderBTC":0,
        //             "inorderXRP":0,
        //             "inorderNEO":0,
        //         },
        //         "status":1,
        //         "error":null,
        //         "code":200
        //     }
        //
        // note that "Money" stands for INR - the only fiat in bitbns
        return this.parseBalance(response);
    }

    public virtual object parseStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "-1", "cancelled" },
            { "0", "open" },
            { "1", "open" },
            { "2", "done" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //
        //     {
        //         "data": "Successfully placed bid to purchase currency",
        //         "status": 1,
        //         "error": null,
        //         "id": 5424475,
        //         "code": 200
        //     }
        //
        // fetchOpenOrders, fetchOrder
        //
        //    {
        //        "entry_id": 5424475,
        //        "btc": 0.01,
        //        "rate": 2000,
        //        "time": "2021-04-25T17:05:42.000Z",
        //        "type": 0,
        //        "status": 0
        //        "t_rate": 0.45,                       // only stop orders
        //        "trail": 0                            // only stop orders
        //    }
        //
        // cancelOrder
        //
        //    {
        //        "data": "Successfully cancelled the order",
        //        "status": 1,
        //        "error": null,
        //        "code": 200
        //    }
        //
        object id = this.safeString2(order, "id", "entry_id");
        object datetime = this.safeString(order, "time");
        object triggerPrice = this.safeString(order, "t_rate");
        object side = this.safeString(order, "type");
        if (isTrue(isEqual(side, "0")))
        {
            side = "buy";
        } else if (isTrue(isEqual(side, "1")))
        {
            side = "sell";
        }
        object data = this.safeString(order, "data");
        object status = this.safeString(order, "status");
        if (isTrue(isEqual(data, "Successfully cancelled the order")))
        {
            status = "cancelled";
        } else
        {
            status = this.parseStatus(status);
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", this.parse8601(datetime) },
            { "datetime", datetime },
            { "lastTradeTimestamp", null },
            { "symbol", this.safeString(market, "symbol") },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", this.safeString(order, "rate") },
            { "stopPrice", triggerPrice },
            { "triggerPrice", triggerPrice },
            { "amount", this.safeString(order, "btc") },
            { "cost", null },
            { "average", null },
            { "filled", null },
            { "remaining", null },
            { "status", status },
            { "fee", new Dictionary<string, object>() {
                { "cost", null },
                { "currency", null },
                { "rate", null },
            } },
            { "trades", null },
        }, market);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#createOrder
        * @description create a trade order
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-2/place-orders
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-1/market-orders-quantity  // market orders
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {float} [params.triggerPrice] the price at which a trigger order is triggered at
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {float} [params.target_rate] *requires params.trail_rate when set, type must be 'limit'* a bracket order is placed when set
        * @param {float} [params.trail_rate] *requires params.target_rate when set, type must be 'limit'* a bracket order is placed when set
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object triggerPrice = this.safeStringN(parameters, new List<object>() {"triggerPrice", "stopPrice", "t_rate"});
        object targetRate = this.safeString(parameters, "target_rate");
        object trailRate = this.safeString(parameters, "trail_rate");
        parameters = this.omit(parameters, new List<object>() {"triggerPrice", "stopPrice", "trail_rate", "target_rate", "t_rate"});
        object request = new Dictionary<string, object>() {
            { "side", ((string)side).ToUpper() },
            { "symbol", getValue(market, "uppercaseId") },
            { "quantity", this.amountToPrecision(symbol, amount) },
        };
        object method = "v2PostOrders";
        if (isTrue(isEqual(type, "limit")))
        {
            ((IDictionary<string,object>)request)["rate"] = this.priceToPrecision(symbol, price);
        } else
        {
            method = "v1PostPlaceMarketOrderQntySymbol";
            ((IDictionary<string,object>)request)["market"] = getValue(market, "quoteId");
        }
        if (isTrue(!isEqual(triggerPrice, null)))
        {
            ((IDictionary<string,object>)request)["t_rate"] = this.priceToPrecision(symbol, triggerPrice);
        }
        if (isTrue(!isEqual(targetRate, null)))
        {
            ((IDictionary<string,object>)request)["target_rate"] = this.priceToPrecision(symbol, targetRate);
        }
        if (isTrue(!isEqual(trailRate, null)))
        {
            ((IDictionary<string,object>)request)["trail_rate"] = this.priceToPrecision(symbol, trailRate);
        }
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        //
        //     {
        //         "data":"Successfully placed bid to purchase currency",
        //         "status":1,
        //         "error":null,
        //         "id":5424475,
        //         "code":200
        //     }
        //
        return this.parseOrder(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#cancelOrder
        * @description cancels an open order
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-2/cancel-orders
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-1/cancel-stop-loss-orders
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {boolean} [params.trigger] true if cancelling a trigger order
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object isTrigger = this.safeValue2(parameters, "trigger", "stop");
        parameters = this.omit(parameters, new List<object>() {"trigger", "stop"});
        object request = new Dictionary<string, object>() {
            { "entry_id", id },
            { "symbol", getValue(market, "uppercaseId") },
        };
        object response = null;
        object tail = ((bool) isTrue(isTrigger)) ? "StopLossOrder" : "Order";
        object quoteSide = ((bool) isTrue((isEqual(getValue(market, "quoteId"), "USDT")))) ? "usdtcancel" : "cancel";
        quoteSide = add(quoteSide, tail);
        ((IDictionary<string,object>)request)["side"] = quoteSide;
        response = await this.v2PostCancel(this.extend(request, parameters));
        return this.parseOrder(response, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-1/order-status
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "entry_id", id },
        };
        object trigger = this.safeValue2(parameters, "trigger", "stop");
        if (isTrue(trigger))
        {
            throw new BadRequest ((string)add(this.id, " fetchOrder cannot fetch stop orders")) ;
        }
        object response = await this.v1PostOrderStatusSymbol(this.extend(request, parameters));
        //
        //     {
        //         "data":[
        //             {
        //                 "entry_id":5424475,
        //                 "btc":0.01,
        //                 "rate":2000,
        //                 "time":"2021-04-25T17:05:42.000Z",
        //                 "type":0,
        //                 "status":0,
        //                 "total":0.01,
        //                 "avg_cost":null,
        //                 "side":"BUY",
        //                 "amount":0.01,
        //                 "remaining":0.01,
        //                 "filled":0,
        //                 "cost":null,
        //                 "fee":0.05
        //             }
        //         ],
        //         "status":1,
        //         "error":null,
        //         "code":200
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object first = this.safeDict(data, 0);
        return this.parseOrder(first, market);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-2/order-status-limit
        * @see https://docs.bitbns.com/bitbns/rest-endpoints/order-apis/version-2/order-status-limit/order-status-stop-limit
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {boolean} [params.trigger] true if fetching trigger orders
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object isTrigger = this.safeValue2(parameters, "trigger", "stop");
        parameters = this.omit(parameters, new List<object>() {"trigger", "stop"});
        object quoteSide = ((bool) isTrue((isEqual(getValue(market, "quoteId"), "USDT")))) ? "usdtListOpen" : "listOpen";
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "uppercaseId") },
            { "page", 0 },
            { "side", ((bool) isTrue(isTrigger)) ? (add(quoteSide, "StopOrders")) : (add(quoteSide, "Orders")) },
        };
        object response = await this.v2PostGetordersnew(this.extend(request, parameters));
        //
        //     {
        //         "data":[
        //             {
        //                 "entry_id":5424475,
        //                 "btc":0.01,
        //                 "rate":2000,
        //                 "time":"2021-04-25T17:05:42.000Z",
        //                 "type":0,
        //                 "status":0
        //                 "t_rate":0.45,                       // only stop orders
        //                 "type":1,                            // only stop orders
        //                 "trail":0                            // only stop orders
        //             }
        //         ],
        //         "status":1,
        //         "error":null,
        //         "code":200
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchMyTrades
        //
        //     {
        //         "type": "BTC Sell order executed",
        //         "typeI": 6,
        //         "crypto": 5000,
        //         "amount": 35.4,
        //         "rate": 709800,
        //         "date": "2020-05-22T15:05:34.000Z",
        //         "unit": "INR",
        //         "factor": 100000000,
        //         "fee": 0.09,
        //         "delh_btc": -5000,
        //         "delh_inr": 0,
        //         "del_btc": 0,
        //         "del_inr": 35.4,
        //         "id": "2938823"
        //     }
        //
        // fetchTrades
        //
        //     {
        //         "tradeId":"1909151",
        //         "price":"61904.6300",
        //         "quote_volume":1618.05,
        //         "base_volume":0.02607254,
        //         "timestamp":1634548602000,
        //         "type":"buy"
        //     }
        //
        market = this.safeMarket(null, market);
        object orderId = this.safeString2(trade, "id", "tradeId");
        object timestamp = this.parse8601(this.safeString(trade, "date"));
        timestamp = this.safeInteger(trade, "timestamp", timestamp);
        object priceString = this.safeString2(trade, "rate", "price");
        object amountString = this.safeString(trade, "amount");
        object side = this.safeStringLower(trade, "type");
        if (isTrue(!isEqual(side, null)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(side, "buy"), 0)))
            {
                side = "buy";
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(side, "sell"), 0)))
            {
                side = "sell";
            }
        }
        object factor = this.safeString(trade, "factor");
        object costString = null;
        if (isTrue(!isEqual(factor, null)))
        {
            amountString = Precise.stringDiv(amountString, factor);
        } else
        {
            amountString = this.safeString(trade, "base_volume");
            costString = this.safeString(trade, "quote_volume");
        }
        object symbol = getValue(market, "symbol");
        object fee = null;
        object feeCostString = this.safeString(trade, "fee");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyCode = getValue(market, "quote");
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrencyCode },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "id", orderId },
            { "order", orderId },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", costString },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "page", 0 },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["since"] = this.iso8601(since);
        }
        object response = await this.v1PostListExecutedOrdersSymbol(this.extend(request, parameters));
        //
        //     {
        //         "data": [
        //             {
        //                 "type": "BTC Sell order executed",
        //                 "typeI": 6,
        //                 "crypto": 5000,
        //                 "amount": 35.4,
        //                 "rate": 709800,
        //                 "date": "2020-05-22T15:05:34.000Z",
        //                 "unit": "INR",
        //                 "factor": 100000000,
        //                 "fee": 0.09,
        //                 "delh_btc": -5000,
        //                 "delh_inr": 0,
        //                 "del_btc": 0,
        //                 "del_inr": 35.4,
        //                 "id": "2938823"
        //             },
        //             {
        //                 "type": "BTC Sell order executed",
        //                 "typeI": 6,
        //                 "crypto": 195000,
        //                 "amount": 1380.58,
        //                 "rate": 709765.5,
        //                 "date": "2020-05-22T15:05:34.000Z",
        //                 "unit": "INR",
        //                 "factor": 100000000,
        //                 "fee": 3.47,
        //                 "delh_btc": -195000,
        //                 "delh_inr": 0,
        //                 "del_btc": 0,
        //                 "del_inr": 1380.58,
        //                 "id": "2938823"
        //             }
        //         ],
        //         "status": 1,
        //         "error": null,
        //         "code": 200
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, market, since, limit);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(market, "baseId") },
            { "market", getValue(market, "quoteId") },
        };
        object response = await this.wwwGetExchangeDataTradedetails(this.extend(request, parameters));
        //
        //     [
        //         {"tradeId":"1909151","price":"61904.6300","quote_volume":1618.05,"base_volume":0.02607254,"timestamp":1634548602000,"type":"buy"},
        //         {"tradeId":"1909153","price":"61893.9000","quote_volume":16384.42,"base_volume":0.26405767,"timestamp":1634548999000,"type":"sell"},
        //         {"tradeId":"1909155","price":"61853.1100","quote_volume":2304.37,"base_volume":0.03716263,"timestamp":1634549670000,"type":"sell"}
        //     }
        //
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchDeposits
        * @description fetch all deposits made to an account
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchDeposits() requires a currency code argument")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(currency, "id") },
            { "page", 0 },
        };
        object response = await this.v1PostDepositHistorySymbol(this.extend(request, parameters));
        //
        //     {
        //         "data":[
        //             {
        //                 "type":"USDT deposited",
        //                 "typeI":1,
        //                 "amount":100,
        //                 "date":"2021-04-24T14:56:04.000Z",
        //                 "unit":"USDT",
        //                 "factor":100,
        //                 "fee":0,
        //                 "delh_btc":0,
        //                 "delh_inr":0,
        //                 "rate":0,
        //                 "del_btc":10000,
        //                 "del_inr":0
        //             }
        //         ],
        //         "status":1,
        //         "error":null,
        //         "code":200
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchWithdrawals() requires a currency code argument")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(currency, "id") },
            { "page", 0 },
        };
        object response = await this.v1PostWithdrawHistorySymbol(this.extend(request, parameters));
        //
        //     ...
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit);
    }

    public virtual object parseTransactionStatusByType(object status, object type = null)
    {
        object statusesByType = new Dictionary<string, object>() {
            { "deposit", new Dictionary<string, object>() {
                { "0", "pending" },
                { "1", "ok" },
            } },
            { "withdrawal", new Dictionary<string, object>() {
                { "0", "pending" },
                { "1", "canceled" },
                { "2", "pending" },
                { "3", "failed" },
                { "4", "pending" },
                { "5", "failed" },
                { "6", "ok" },
            } },
        };
        object statuses = this.safeValue(statusesByType, type, new Dictionary<string, object>() {});
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // fetchDeposits
        //
        //     {
        //         "type":"USDT deposited",
        //         "typeI":1,
        //         "amount":100,
        //         "date":"2021-04-24T14:56:04.000Z",
        //         "unit":"USDT",
        //         "factor":100,
        //         "fee":0,
        //         "delh_btc":0,
        //         "delh_inr":0,
        //         "rate":0,
        //         "del_btc":10000,
        //         "del_inr":0
        //     }
        //
        // fetchWithdrawals
        //
        //     ...
        //
        object currencyId = this.safeString(transaction, "unit");
        object code = this.safeCurrencyCode(currencyId, currency);
        object timestamp = this.parse8601(this.safeString2(transaction, "date", "timestamp"));
        object type = this.safeString(transaction, "type");
        object expTime = this.safeString(transaction, "expTime", "");
        object status = null;
        if (isTrue(!isEqual(type, null)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(type, "deposit"), 0)))
            {
                type = "deposit";
                status = "ok";
            } else if (isTrue(isTrue(isGreaterThanOrEqual(getIndexOf(type, "withdraw"), 0)) || isTrue(isGreaterThanOrEqual(getIndexOf(expTime, "withdraw"), 0))))
            {
                type = "withdrawal";
            }
        }
        // const status = this.parseTransactionStatusByType (this.safeString (transaction, 'status'), type);
        object amount = this.safeNumber(transaction, "amount");
        object feeCost = this.safeNumber(transaction, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", code },
                { "cost", feeCost },
            };
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", null },
            { "txid", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "address", null },
            { "addressTo", null },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "type", type },
            { "amount", amount },
            { "currency", code },
            { "status", status },
            { "updated", null },
            { "comment", null },
            { "internal", null },
            { "fee", fee },
        };
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name bitbns#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(currency, "id") },
        };
        object response = await this.v1PostGetCoinAddressSymbol(this.extend(request, parameters));
        //
        //     {
        //         "data":{
        //             "token":"0x680dee9edfff0c397736e10b017cf6a0aee4ba31",
        //             "expiry":"2022-04-24 22:30:11"
        //         },
        //         "status":1,
        //         "error":null
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object address = this.safeString(data, "token");
        object tag = this.safeString(data, "tag");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "currency", code },
            { "address", address },
            { "tag", tag },
            { "network", null },
            { "info", response },
        };
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "www";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object urls = ((object)this.urls);
        if (!isTrue((inOp(getValue(urls, "api"), api))))
        {
            throw new ExchangeError ((string)add(add(add(this.id, " does not have a testnet/sandbox URL for "), api), " endpoints")) ;
        }
        if (isTrue(!isEqual(api, "www")))
        {
            this.checkRequiredCredentials();
            headers = new Dictionary<string, object>() {
                { "X-BITBNS-APIKEY", this.apiKey },
            };
        }
        object baseUrl = this.implodeHostname(getValue(getValue(this.urls, "api"), api));
        object url = add(add(baseUrl, "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        object nonce = ((object)this.nonce()).ToString();
        if (isTrue(isEqual(method, "GET")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else if (isTrue(isEqual(method, "POST")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                body = this.json(query);
            } else
            {
                body = "{}";
            }
            object auth = new Dictionary<string, object>() {
                { "timeStamp_nonce", nonce },
                { "body", body },
            };
            object payload = this.stringToBase64(this.json(auth));
            object signature = this.hmac(this.encode(payload), this.encode(this.secret), sha512);
            ((IDictionary<string,object>)headers)["X-BITBNS-PAYLOAD"] = payload;
            ((IDictionary<string,object>)headers)["X-BITBNS-SIGNATURE"] = signature;
            ((IDictionary<string,object>)headers)["Content-Type"] = "application/x-www-form-urlencoded";
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        //
        //     {"msg":"Invalid Request","status":-1,"code":400}
        //     {"data":[],"status":0,"error":"Nothing to show","code":417}
        //
        object code = this.safeString(response, "code");
        object message = this.safeString(response, "msg");
        object error = isTrue(isTrue((!isEqual(code, null))) && isTrue((!isEqual(code, "200")))) && isTrue((!isEqual(code, "204")));
        if (isTrue(isTrue(error) || isTrue((!isEqual(message, null)))))
        {
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), code, feedback);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
