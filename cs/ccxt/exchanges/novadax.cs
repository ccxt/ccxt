namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class novadax : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "novadax" },
            { "name", "NovaDAX" },
            { "countries", new List<object>() {"BR"} },
            { "rateLimit", 10 },
            { "version", "v1" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createMarketBuyOrderWithCost", true },
                { "createMarketOrderWithCost", false },
                { "createMarketSellOrderWithCost", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", true },
                { "createStopOrder", true },
                { "fetchAccounts", true },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", true },
                { "fetchDepositsWithdrawals", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchOrderTrades", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchTransactions", "emulated" },
                { "fetchWithdrawals", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", true },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "ONE_MIN" },
                { "5m", "FIVE_MIN" },
                { "15m", "FIFTEEN_MIN" },
                { "30m", "HALF_HOU" },
                { "1h", "ONE_HOU" },
                { "1d", "ONE_DAY" },
                { "1w", "ONE_WEE" },
                { "1M", "ONE_MON" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/92337550-2b085500-f0b3-11ea-98e7-5794fb07dd3b.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.novadax.com" },
                    { "private", "https://api.novadax.com" },
                } },
                { "www", "https://www.novadax.com.br" },
                { "doc", new List<object>() {"https://doc.novadax.com/pt-BR/"} },
                { "fees", "https://www.novadax.com.br/fees-and-limits" },
                { "referral", "https://www.novadax.com.br/?s=ccxt" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "common/symbol", 1 },
                        { "common/symbols", 1 },
                        { "common/timestamp", 1 },
                        { "market/tickers", 5 },
                        { "market/ticker", 1 },
                        { "market/depth", 1 },
                        { "market/trades", 5 },
                        { "market/kline/history", 5 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "orders/get", 1 },
                        { "orders/list", 10 },
                        { "orders/fill", 3 },
                        { "orders/fills", 10 },
                        { "account/getBalance", 1 },
                        { "account/subs", 1 },
                        { "account/subs/balance", 1 },
                        { "account/subs/transfer/record", 10 },
                        { "wallet/query/deposit-withdraw", 3 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "orders/create", 5 },
                        { "orders/batch-create", 50 },
                        { "orders/cancel", 1 },
                        { "orders/batch-cancel", 10 },
                        { "orders/cancel-by-symbol", 10 },
                        { "account/subs/transfer", 5 },
                        { "wallet/withdraw/coin", 3 },
                        { "account/withdraw/coin", 3 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.005") },
                    { "maker", this.parseNumber("0.0025") },
                } },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "A99999", typeof(ExchangeError) },
                    { "A10001", typeof(BadRequest) },
                    { "A10002", typeof(ExchangeError) },
                    { "A10003", typeof(AuthenticationError) },
                    { "A10004", typeof(RateLimitExceeded) },
                    { "A10005", typeof(PermissionDenied) },
                    { "A10006", typeof(AccountSuspended) },
                    { "A10007", typeof(AccountNotEnabled) },
                    { "A10011", typeof(BadSymbol) },
                    { "A10012", typeof(BadSymbol) },
                    { "A10013", typeof(OnMaintenance) },
                    { "A30001", typeof(OrderNotFound) },
                    { "A30002", typeof(InvalidOrder) },
                    { "A30003", typeof(InvalidOrder) },
                    { "A30004", typeof(InvalidOrder) },
                    { "A30005", typeof(InvalidOrder) },
                    { "A30006", typeof(InvalidOrder) },
                    { "A30007", typeof(InsufficientFunds) },
                    { "A30008", typeof(InvalidOrder) },
                    { "A30009", typeof(InvalidOrder) },
                    { "A30010", typeof(CancelPending) },
                    { "A30011", typeof(InvalidOrder) },
                    { "A30012", typeof(InvalidOrder) },
                    { "A40004", typeof(InsufficientFunds) },
                } },
                { "broad", new Dictionary<string, object>() {} },
            } },
            { "options", new Dictionary<string, object>() {
                { "fetchOHLCV", new Dictionary<string, object>() {
                    { "volume", "amount" },
                } },
                { "transfer", new Dictionary<string, object>() {
                    { "fillResponseFromRequest", true },
                } },
            } },
        });
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://doc.novadax.com/en-US/#get-current-system-time
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetCommonTimestamp(parameters);
        //
        //     {
        //         "code":"A10000",
        //         "data":1599090512080,
        //         "message":"Success"
        //     }
        //
        return this.safeInteger(response, "data");
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchMarkets
        * @description retrieves data on all markets for novadax
        * @see https://doc.novadax.com/en-US/#get-all-supported-trading-symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetCommonSymbols(parameters);
        //
        //     {
        //         "code":"A10000",
        //         "data":[
        //             {
        //                 "amountPrecision":8,
        //                 "baseCurrency":"BTC",
        //                 "minOrderAmount":"0.001",
        //                 "minOrderValue":"25",
        //                 "pricePrecision":2,
        //                 "quoteCurrency":"BRL",
        //                 "status":"ONLINE",
        //                 "symbol":"BTC_BRL",
        //                 "valuePrecision":2
        //             },
        //         ],
        //         "message":"Success"
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        return this.parseMarkets(data);
    }

    public override object parseMarket(object market)
    {
        object baseId = this.safeString(market, "baseCurrency");
        object quoteId = this.safeString(market, "quoteCurrency");
        object id = this.safeString(market, "symbol");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object status = this.safeString(market, "status");
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", (isEqual(status, "ONLINE")) },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "amountPrecision"))) },
                { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "pricePrecision"))) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "minOrderAmount") },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "minOrderValue") },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        };
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // fetchTicker, fetchTickers
        //
        //     {
        //         "ask":"61946.1",
        //         "baseVolume24h":"164.41930186",
        //         "bid":"61815",
        //         "high24h":"64930.72",
        //         "lastPrice":"61928.41",
        //         "low24h":"61156.32",
        //         "open24h":"64512.46",
        //         "quoteVolume24h":"10308157.95",
        //         "symbol":"BTC_BRL",
        //         "timestamp":1599091115090
        //     }
        //
        object timestamp = this.safeInteger(ticker, "timestamp");
        object marketId = this.safeString(ticker, "symbol");
        object symbol = this.safeSymbol(marketId, market, "_");
        object open = this.safeString(ticker, "open24h");
        object last = this.safeString(ticker, "lastPrice");
        object baseVolume = this.safeString(ticker, "baseVolume24h");
        object quoteVolume = this.safeString(ticker, "quoteVolume24h");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high24h") },
            { "low", this.safeString(ticker, "low24h") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://doc.novadax.com/en-US/#get-latest-ticker-for-specific-pair
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetMarketTicker(this.extend(request, parameters));
        //
        //     {
        //         "code":"A10000",
        //         "data":{
        //             "ask":"61946.1",
        //             "baseVolume24h":"164.41930186",
        //             "bid":"61815",
        //             "high24h":"64930.72",
        //             "lastPrice":"61928.41",
        //             "low24h":"61156.32",
        //             "open24h":"64512.46",
        //             "quoteVolume24h":"10308157.95",
        //             "symbol":"BTC_BRL",
        //             "timestamp":1599091115090
        //         },
        //         "message":"Success"
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTicker(data, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://doc.novadax.com/en-US/#get-latest-tickers-for-all-trading-pairs
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.publicGetMarketTickers(parameters);
        //
        //     {
        //         "code":"A10000",
        //         "data":[
        //             {
        //                 "ask":"61879.36",
        //                 "baseVolume24h":"164.40955092",
        //                 "bid":"61815",
        //                 "high24h":"64930.72",
        //                 "lastPrice":"61820.04",
        //                 "low24h":"61156.32",
        //                 "open24h":"64624.19",
        //                 "quoteVolume24h":"10307493.92",
        //                 "symbol":"BTC_BRL",
        //                 "timestamp":1599091291083
        //             },
        //         ],
        //         "message":"Success"
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object ticker = this.parseTicker(getValue(data, i));
            object symbol = getValue(ticker, "symbol");
            ((IDictionary<string,object>)result)[(string)symbol] = ticker;
        }
        return this.filterByArrayTickers(result, "symbol", symbols);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://doc.novadax.com/en-US/#get-market-depth
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default 10, max 20
        }
        object response = await this.publicGetMarketDepth(this.extend(request, parameters));
        //
        //     {
        //         "code":"A10000",
        //         "data":{
        //             "asks":[
        //                 ["0.037159","0.3741"],
        //                 ["0.037215","0.2706"],
        //                 ["0.037222","1.8459"],
        //             ],
        //             "bids":[
        //                 ["0.037053","0.3857"],
        //                 ["0.036969","0.8101"],
        //                 ["0.036953","1.5226"],
        //             ],
        //             "timestamp":1599280414448
        //         },
        //         "message":"Success"
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object timestamp = this.safeInteger(data, "timestamp");
        return this.parseOrderBook(data, getValue(market, "symbol"), timestamp, "bids", "asks");
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // public fetchTrades
        //
        //     {
        //         "amount":"0.0632",
        //         "price":"0.037288",
        //         "side":"BUY",
        //         "timestamp":1599279694576
        //     }
        //
        // private fetchOrderTrades
        //
        //      {
        //          "id": "608717046691139584",
        //          "orderId": "608716957545402368",
        //          "symbol": "BTC_BRL",
        //          "side": "BUY",
        //          "amount": "0.0988",
        //          "price": "45514.76",
        //          "fee": "0.0000988 BTC",
        //          "feeAmount": "0.0000988",
        //          "feeCurrency": "BTC",
        //          "role": "MAKER",
        //          "timestamp": 1565171053345
        //       }
        //
        // private fetchMyTrades (same endpoint as fetchOrderTrades)
        //
        //      {
        //          "id": "608717046691139584",
        //          "orderId": "608716957545402368",
        //          "symbol": "BTC_BRL",
        //          "side": "BUY",
        //          "amount": "0.0988",
        //          "price": "45514.76",
        //          "fee": "0.0000988 BTC",
        //          "feeAmount": "0.0000988",
        //          "feeCurrency": "BTC",
        //          "role": "MAKER",
        //          "timestamp": 1565171053345
        //       }
        //
        object id = this.safeString(trade, "id");
        object orderId = this.safeString(trade, "orderId");
        object timestamp = this.safeInteger(trade, "timestamp");
        object side = this.safeStringLower(trade, "side");
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "amount");
        object marketId = this.safeString(trade, "symbol");
        object symbol = this.safeSymbol(marketId, market, "_");
        object takerOrMaker = this.safeStringLower(trade, "role");
        object feeString = this.safeString(trade, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeString, null)))
        {
            object feeCurrencyId = this.safeString(trade, "feeCurrency");
            object feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = new Dictionary<string, object>() {
                { "cost", this.safeString(trade, "feeAmount") },
                { "currency", feeCurrencyCode },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "order", orderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", null },
            { "side", side },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "takerOrMaker", takerOrMaker },
            { "fee", fee },
            { "info", trade },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://doc.novadax.com/en-US/#get-recent-trades
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default 100
        }
        object response = await this.publicGetMarketTrades(this.extend(request, parameters));
        //
        //     {
        //         "code":"A10000",
        //         "data":[
        //             {"amount":"0.0632","price":"0.037288","side":"BUY","timestamp":1599279694576},
        //             {"amount":"0.0052","price":"0.03715","side":"SELL","timestamp":1599276606852},
        //             {"amount":"0.0058","price":"0.037188","side":"SELL","timestamp":1599275187812},
        //         ],
        //         "message":"Success"
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, market, since, limit);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://doc.novadax.com/en-US/#get-kline-data
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "unit", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        object duration = this.parseTimeframe(timeframe);
        object now = this.seconds();
        if (isTrue(isEqual(limit, null)))
        {
            limit = 3000; // max
        }
        if (isTrue(isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["from"] = subtract(now, multiply(limit, duration));
            ((IDictionary<string,object>)request)["to"] = now;
        } else
        {
            object startFrom = this.parseToInt(divide(since, 1000));
            ((IDictionary<string,object>)request)["from"] = startFrom;
            ((IDictionary<string,object>)request)["to"] = this.sum(startFrom, multiply(limit, duration));
        }
        object response = await this.publicGetMarketKlineHistory(this.extend(request, parameters));
        //
        //     {
        //         "code": "A10000",
        //         "data": [
        //             {
        //                 "amount": 8.25709100,
        //                 "closePrice": 62553.20,
        //                 "count": 29,
        //                 "highPrice": 62592.87,
        //                 "lowPrice": 62553.20,
        //                 "openPrice": 62554.23,
        //                 "score": 1602501480,
        //                 "symbol": "BTC_BRL",
        //                 "vol": 516784.2504067500
        //             }
        //         ],
        //         "message": "Success"
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     {
        //         "amount": 8.25709100,
        //         "closePrice": 62553.20,
        //         "count": 29,
        //         "highPrice": 62592.87,
        //         "lowPrice": 62553.20,
        //         "openPrice": 62554.23,
        //         "score": 1602501480,
        //         "symbol": "BTC_BRL",
        //         "vol": 516784.2504067500
        //     }
        //
        object options = this.safeValue(this.options, "fetchOHLCV", new Dictionary<string, object>() {});
        object volumeField = this.safeString(options, "volume", "amount"); // or vol
        return new List<object> {this.safeTimestamp(ohlcv, "score"), this.safeNumber(ohlcv, "openPrice"), this.safeNumber(ohlcv, "highPrice"), this.safeNumber(ohlcv, "lowPrice"), this.safeNumber(ohlcv, "closePrice"), this.safeNumber(ohlcv, volumeField)};
    }

    public override object parseBalance(object response)
    {
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object balance = getValue(data, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "balance");
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "available");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "hold");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://doc.novadax.com/en-US/#get-account-balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetAccountGetBalance(parameters);
        //
        //     {
        //         "code": "A10000",
        //         "data": [
        //             {
        //                 "available": "1.23",
        //                 "balance": "0.23",
        //                 "currency": "BTC",
        //                 "hold": "1"
        //             }
        //         ],
        //         "message": "Success"
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#createOrder
        * @description create a trade order
        * @see https://doc.novadax.com/en-US/#order-introduction
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much you want to trade in units of the base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {float} [params.cost] for spot market buy orders, the quote quantity that can be used as an alternative for the amount
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object uppercaseType = ((string)type).ToUpper();
        object uppercaseSide = ((string)side).ToUpper();
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "side", uppercaseSide },
        };
        object stopPrice = this.safeValue2(parameters, "triggerPrice", "stopPrice");
        if (isTrue(isEqual(stopPrice, null)))
        {
            if (isTrue(isTrue((isEqual(uppercaseType, "STOP_LIMIT"))) || isTrue((isEqual(uppercaseType, "STOP_MARKET")))))
            {
                throw new ArgumentsRequired ((string)add(add(add(this.id, " createOrder() requires a stopPrice parameter for "), uppercaseType), " orders")) ;
            }
        } else
        {
            if (isTrue(isEqual(uppercaseType, "LIMIT")))
            {
                uppercaseType = "STOP_LIMIT";
            } else if (isTrue(isEqual(uppercaseType, "MARKET")))
            {
                uppercaseType = "STOP_MARKET";
            }
            object defaultOperator = ((bool) isTrue((isEqual(uppercaseSide, "BUY")))) ? "LTE" : "GTE";
            ((IDictionary<string,object>)request)["operator"] = this.safeString(parameters, "operator", defaultOperator);
            ((IDictionary<string,object>)request)["stopPrice"] = this.priceToPrecision(symbol, stopPrice);
            parameters = this.omit(parameters, new List<object>() {"triggerPrice", "stopPrice"});
        }
        if (isTrue(isTrue((isEqual(uppercaseType, "LIMIT"))) || isTrue((isEqual(uppercaseType, "STOP_LIMIT")))))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            ((IDictionary<string,object>)request)["amount"] = this.amountToPrecision(symbol, amount);
        } else if (isTrue(isTrue((isEqual(uppercaseType, "MARKET"))) || isTrue((isEqual(uppercaseType, "STOP_MARKET")))))
        {
            if (isTrue(isEqual(uppercaseSide, "SELL")))
            {
                ((IDictionary<string,object>)request)["amount"] = this.amountToPrecision(symbol, amount);
            } else if (isTrue(isEqual(uppercaseSide, "BUY")))
            {
                object quoteAmount = null;
                object createMarketBuyOrderRequiresPrice = true;
                var createMarketBuyOrderRequiresPriceparametersVariable = this.handleOptionAndParams(parameters, "createOrder", "createMarketBuyOrderRequiresPrice", true);
                createMarketBuyOrderRequiresPrice = ((IList<object>)createMarketBuyOrderRequiresPriceparametersVariable)[0];
                parameters = ((IList<object>)createMarketBuyOrderRequiresPriceparametersVariable)[1];
                object cost = this.safeNumber2(parameters, "cost", "value");
                parameters = this.omit(parameters, "cost");
                if (isTrue(!isEqual(cost, null)))
                {
                    quoteAmount = this.costToPrecision(symbol, cost);
                } else if (isTrue(createMarketBuyOrderRequiresPrice))
                {
                    if (isTrue(isEqual(price, null)))
                    {
                        throw new InvalidOrder ((string)add(this.id, " createOrder() requires the price argument for market buy orders to calculate the total cost to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option or param to false and pass the cost to spend (quote quantity) in the amount argument")) ;
                    } else
                    {
                        object amountString = this.numberToString(amount);
                        object priceString = this.numberToString(price);
                        object costRequest = Precise.stringMul(amountString, priceString);
                        quoteAmount = this.costToPrecision(symbol, costRequest);
                    }
                } else
                {
                    quoteAmount = this.costToPrecision(symbol, amount);
                }
                ((IDictionary<string,object>)request)["value"] = quoteAmount;
            }
        }
        ((IDictionary<string,object>)request)["type"] = uppercaseType;
        object response = await this.privatePostOrdersCreate(this.extend(request, parameters));
        //
        //     {
        //         "code": "A10000",
        //         "data": {
        //             "amount": "0.001",
        //             "averagePrice": null,
        //             "filledAmount": "0",
        //             "filledFee": "0",
        //             "filledValue": "0",
        //             "id": "870613508008464384",
        //             "operator": "GTE",
        //             "price": "210000",
        //             "side": "BUY",
        //             "status": "SUBMITTED",
        //             "stopPrice": "211000",
        //             "symbol": "BTC_BRL",
        //             "timestamp": 1627612035528,
        //             "type": "STOP_LIMIT",
        //             "value": "210"
        //         },
        //         "message": "Success"
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrder(data, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#cancelOrder
        * @description cancels an open order
        * @see https://doc.novadax.com/en-US/#cancel-an-order
        * @param {string} id order id
        * @param {string} symbol not used by novadax cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privatePostOrdersCancel(this.extend(request, parameters));
        //
        //     {
        //         "code": "A10000",
        //         "data": {
        //             "result": true
        //         },
        //         "message": "Success"
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrder(data);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://doc.novadax.com/en-US/#get-order-details
        * @param {string} symbol not used by novadax fetchOrder
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privateGetOrdersGet(this.extend(request, parameters));
        //
        //     {
        //         "code": "A10000",
        //         "data": {
        //             "id": "608695623247466496",
        //             "symbol": "BTC_BRL",
        //             "type": "MARKET",
        //             "side": "SELL",
        //             "price": null,
        //             "averagePrice": "0",
        //             "amount": "0.123",
        //             "filledAmount": "0",
        //             "value": null,
        //             "filledValue": "0",
        //             "filledFee": "0",
        //             "status": "REJECTED",
        //             "timestamp": 1565165945588
        //         },
        //         "message": "Success"
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrder(data);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://doc.novadax.com/en-US/#get-order-history
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default 100, max 100
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["fromTimestamp"] = since;
        }
        object response = await this.privateGetOrdersList(this.extend(request, parameters));
        //
        //     {
        //         "code": "A10000",
        //         "data": [
        //             {
        //                 "id": "608695678650028032",
        //                 "symbol": "BTC_BRL",
        //                 "type": "MARKET",
        //                 "side": "SELL",
        //                 "price": null,
        //                 "averagePrice": "0",
        //                 "amount": "0.123",
        //                 "filledAmount": "0",
        //                 "value": null,
        //                 "filledValue": "0",
        //                 "filledFee": "0",
        //                 "status": "REJECTED",
        //                 "timestamp": 1565165958796
        //             },
        //         ],
        //         "message": "Success"
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://doc.novadax.com/en-US/#get-order-history
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "status", "SUBMITTED,PROCESSING,PARTIAL_FILLED,CANCELING" },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://doc.novadax.com/en-US/#get-order-history
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "status", "FILLED,CANCELED,REJECTED" },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @see https://doc.novadax.com/en-US/#get-order-match-details
        * @param {string} id order id
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privateGetOrdersFill(this.extend(request, parameters));
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object data = this.safeValue(response, "data", new List<object>() {});
        //
        //      {
        //          "code": "A10000",
        //          "data": [
        //              {
        //                  "id": "608717046691139584",
        //                  "orderId": "608716957545402368",
        //                  "symbol": "BTC_BRL",
        //                  "side": "BUY",
        //                  "amount": "0.0988",
        //                  "price": "45514.76",
        //                  "fee": "0.0000988 BTC",
        //                  "feeAmount": "0.0000988",
        //                  "feeCurrency": "BTC",
        //                  "role": "MAKER",
        //                  "timestamp": 1565171053345
        //              },
        //          ],
        //          "message": "Success"
        //      }
        //
        return this.parseTrades(data, market, since, limit);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "SUBMITTED", "open" },
            { "PROCESSING", "open" },
            { "PARTIAL_FILLED", "open" },
            { "CANCELING", "open" },
            { "FILLED", "closed" },
            { "CANCELED", "canceled" },
            { "REJECTED", "rejected" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder, fetchOrders, fetchOrder
        //
        //     {
        //         "amount": "0.001",
        //         "averagePrice": null,
        //         "filledAmount": "0",
        //         "filledFee": "0",
        //         "filledValue": "0",
        //         "id": "870613508008464384",
        //         "operator": "GTE",
        //         "price": "210000",
        //         "side": "BUY",
        //         "status": "SUBMITTED",
        //         "stopPrice": "211000",
        //         "symbol": "BTC_BRL",
        //         "timestamp": 1627612035528,
        //         "type": "STOP_LIMIT",
        //         "value": "210"
        //     }
        //
        // cancelOrder
        //
        //     {
        //         "result": true
        //     }
        //
        object id = this.safeString(order, "id");
        object amount = this.safeString(order, "amount");
        object price = this.safeString(order, "price");
        object cost = this.safeString2(order, "filledValue", "value");
        object type = this.safeStringLower(order, "type");
        object side = this.safeStringLower(order, "side");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object timestamp = this.safeInteger(order, "timestamp");
        object average = this.safeString(order, "averagePrice");
        object filled = this.safeString(order, "filledAmount");
        object fee = null;
        object feeCost = this.safeNumber(order, "filledFee");
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", null },
            };
        }
        object marketId = this.safeString(order, "symbol");
        object symbol = this.safeSymbol(marketId, market, "_");
        object stopPrice = this.safeNumber(order, "stopPrice");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "info", order },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", stopPrice },
            { "triggerPrice", stopPrice },
            { "amount", amount },
            { "cost", cost },
            { "average", average },
            { "filled", filled },
            { "remaining", null },
            { "status", status },
            { "fee", fee },
            { "trades", null },
        }, market);
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name novadax#transfer
        * @description transfer currency internally between wallets on the same account
        * @see https://doc.novadax.com/en-US/#get-sub-account-transfer
        * @param {string} code unified currency code
        * @param {float} amount amount to transfer
        * @param {string} fromAccount account to transfer from
        * @param {string} toAccount account to transfer to
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        if (isTrue(isTrue(!isEqual(fromAccount, "main")) && isTrue(!isEqual(toAccount, "main"))))
        {
            throw new ExchangeError ((string)add(this.id, " transfer() supports transfers between main account and subaccounts only")) ;
        }
        // master-transfer-in = from master account to subaccount
        // master-transfer-out = from subaccount to master account
        object type = ((bool) isTrue((isEqual(fromAccount, "main")))) ? "master-transfer-in" : "master-transfer-out";
        object request = new Dictionary<string, object>() {
            { "transferAmount", this.currencyToPrecision(code, amount) },
            { "currency", getValue(currency, "id") },
            { "subId", ((bool) isTrue((isEqual(type, "master-transfer-in")))) ? toAccount : fromAccount },
            { "transferType", type },
        };
        object response = await this.privatePostAccountSubsTransfer(this.extend(request, parameters));
        //
        //    {
        //        "code":"A10000",
        //        "message":"Success",
        //        "data":40
        //    }
        //
        object transfer = this.parseTransfer(response, currency);
        object transferOptions = this.safeValue(this.options, "transfer", new Dictionary<string, object>() {});
        object fillResponseFromRequest = this.safeBool(transferOptions, "fillResponseFromRequest", true);
        if (isTrue(fillResponseFromRequest))
        {
            ((IDictionary<string,object>)transfer)["fromAccount"] = fromAccount;
            ((IDictionary<string,object>)transfer)["toAccount"] = toAccount;
            ((IDictionary<string,object>)transfer)["amount"] = amount;
        }
        return transfer;
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        //    {
        //        "code":"A10000",
        //        "message":"Success",
        //        "data":40
        //    }
        //
        object id = this.safeString(transfer, "data");
        object status = this.safeString(transfer, "message");
        object currencyCode = this.safeCurrencyCode(null, currency);
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", id },
            { "amount", null },
            { "currency", currencyCode },
            { "fromAccount", null },
            { "toAccount", null },
            { "timestamp", null },
            { "datetime", null },
            { "status", status },
        };
    }

    public virtual object parseTransferStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "SUCCESS", "pending" },
        };
        return this.safeString(statuses, status, "failed");
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#withdraw
        * @description make a withdrawal
        * @see https://doc.novadax.com/en-US/#send-cryptocurrencies
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "code", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "wallet", address },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((IDictionary<string,object>)request)["tag"] = tag;
        }
        object response = await this.privatePostAccountWithdrawCoin(this.extend(request, parameters));
        //
        //     {
        //         "code":"A10000",
        //         "data": "DR123",
        //         "message":"Success"
        //     }
        //
        return this.parseTransaction(response, currency);
    }

    public async override Task<object> fetchAccounts(object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchAccounts
        * @description fetch all the accounts associated with a profile
        * @see https://doc.novadax.com/en-US/#get-sub-account-list
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.privateGetAccountSubs(parameters);
        //
        //     {
        //         "code": "A10000",
        //         "data": [
        //             {
        //                 "subId": "CA648856083527372800",
        //                 "state": "Normal",
        //                 "subAccount": "003",
        //                 "subIdentify": "003"
        //             }
        //         ],
        //         "message": "Success"
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object account = getValue(data, i);
            object accountId = this.safeString(account, "subId");
            object type = this.safeString(account, "subAccount");
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", accountId },
                { "type", type },
                { "currency", null },
                { "info", account },
            });
        }
        return result;
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://doc.novadax.com/en-US/#wallet-records-of-deposits-and-withdraws
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "type", "coin_in" },
        };
        return await this.fetchDepositsWithdrawals(code, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://doc.novadax.com/en-US/#wallet-records-of-deposits-and-withdraws
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "type", "coin_out" },
        };
        return await this.fetchDepositsWithdrawals(code, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchDepositsWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchDepositsWithdrawals
        * @description fetch history of deposits and withdrawals
        * @see https://doc.novadax.com/en-US/#wallet-records-of-deposits-and-withdraws
        * @param {string} [code] unified currency code for the currency of the deposit/withdrawals, default is undefined
        * @param {int} [since] timestamp in ms of the earliest deposit/withdrawal, default is undefined
        * @param {int} [limit] max number of deposit/withdrawals to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["size"] = limit;
        }
        object response = await this.privateGetWalletQueryDepositWithdraw(this.extend(request, parameters));
        //
        //     {
        //         "code": "A10000",
        //         "data": [
        //             {
        //                 "id": "DR562339304588709888",
        //                 "type": "COIN_IN",
        //                 "currency": "XLM",
        //                 "chain": "XLM",
        //                 "address": "GCUTK7KHPJC3ZQJ3OMWWFHAK2OXIBRD4LNZQRCCOVE7A2XOPP2K5PU5Q",
        //                 "addressTag": "1000009",
        //                 "amount": 1.0,
        //                 "state": "SUCCESS",
        //                 "txHash": "39210645748822f8d4ce673c7559aa6622e6e9cdd7073bc0fcae14b1edfda5f4",
        //                 "createdAt": 1554113737000,
        //                 "updatedAt": 1601371273000
        //             }
        //         ],
        //         "message": "Success"
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit);
    }

    public virtual object parseTransactionStatus(object status)
    {
        // Pending the record is wait broadcast to chain
        // x/M confirming the comfirming state of tx, the M is total confirmings needed
        // SUCCESS the record is success full
        // FAIL the record failed
        object parts = ((string)status).Split(new [] {((string)" ")}, StringSplitOptions.None).ToList<object>();
        status = this.safeString(parts, 1, status);
        object statuses = new Dictionary<string, object>() {
            { "Pending", "pending" },
            { "confirming", "pending" },
            { "SUCCESS", "ok" },
            { "FAIL", "failed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // withdraw
        //
        //     {
        //         "code":"A10000",
        //         "data": "DR123",
        //         "message":"Success"
        //     }
        //
        // fetchDepositsWithdrawals
        //
        //     {
        //         "id": "DR562339304588709888",
        //         "type": "COIN_IN",
        //         "currency": "XLM",
        //         "chain": "XLM",
        //         "address": "GCUTK7KHPJC3ZQJ3OMWWFHAK2OXIBRD4LNZQRCCOVE7A2XOPP2K5PU5Q",
        //         "addressTag": "1000009",
        //         "amount": 1.0,
        //         "state": "SUCCESS",
        //         "txHash": "39210645748822f8d4ce673c7559aa6622e6e9cdd7073bc0fcae14b1edfda5f4",
        //         "createdAt": 1554113737000,
        //         "updatedAt": 1601371273000
        //     }
        //
        object id = this.safeString2(transaction, "id", "data");
        object type = this.safeString(transaction, "type");
        if (isTrue(isEqual(type, "COIN_IN")))
        {
            type = "deposit";
        } else if (isTrue(isEqual(type, "COIN_OUT")))
        {
            type = "withdraw";
        }
        object amount = this.safeNumber(transaction, "amount");
        object address = this.safeString(transaction, "address");
        object tag = this.safeString(transaction, "addressTag");
        object txid = this.safeString(transaction, "txHash");
        object timestamp = this.safeInteger(transaction, "createdAt");
        object updated = this.safeInteger(transaction, "updatedAt");
        object currencyId = this.safeString(transaction, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object status = this.parseTransactionStatus(this.safeString(transaction, "state"));
        object network = this.safeString(transaction, "chain");
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "currency", code },
            { "amount", amount },
            { "network", network },
            { "address", address },
            { "addressTo", address },
            { "addressFrom", null },
            { "tag", tag },
            { "tagTo", tag },
            { "tagFrom", null },
            { "status", status },
            { "type", type },
            { "updated", updated },
            { "txid", txid },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "comment", null },
            { "internal", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
                { "rate", null },
            } },
        };
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name novadax#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://doc.novadax.com/en-US/#get-order-history
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["fromTimestamp"] = since;
        }
        object response = await this.privateGetOrdersFills(this.extend(request, parameters));
        //
        //      {
        //          "code": "A10000",
        //          "data": [
        //              {
        //                  "id": "608717046691139584",
        //                  "orderId": "608716957545402368",
        //                  "symbol": "BTC_BRL",
        //                  "side": "BUY",
        //                  "amount": "0.0988",
        //                  "price": "45514.76",
        //                  "fee": "0.0000988 BTC",
        //                  "feeAmount": "0.0000988",
        //                  "feeCurrency": "BTC",
        //                  "role": "MAKER",
        //                  "timestamp": 1565171053345
        //              },
        //          ],
        //          "message": "Success"
        //      }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, market, since, limit);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object request = add(add(add("/", this.version), "/"), this.implodeParams(path, parameters));
        object url = add(getValue(getValue(this.urls, "api"), api), request);
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object timestamp = ((object)this.milliseconds()).ToString();
            headers = new Dictionary<string, object>() {
                { "X-Nova-Access-Key", this.apiKey },
                { "X-Nova-Timestamp", timestamp },
            };
            object queryString = null;
            if (isTrue(isEqual(method, "POST")))
            {
                body = this.json(query);
                queryString = this.hash(this.encode(body), md5);
                ((IDictionary<string,object>)headers)["Content-Type"] = "application/json";
            } else
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
                queryString = this.urlencode(this.keysort(query));
            }
            object auth = add(add(add(add(add(add(method, "\n"), request), "\n"), queryString), "\n"), timestamp); // eslint-disable-line quotes
            ((IDictionary<string,object>)headers)["X-Nova-Signature"] = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        //
        //     {"code":"A10003","data":[],"message":"Authentication failed, Invalid accessKey."}
        //
        object errorCode = this.safeString(response, "code");
        if (isTrue(!isEqual(errorCode, "A10000")))
        {
            object message = this.safeString(response, "message");
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
