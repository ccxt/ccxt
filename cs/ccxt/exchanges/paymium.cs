namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class paymium : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "paymium" },
            { "name", "Paymium" },
            { "countries", new List<object>() {"FR", "EU"} },
            { "rateLimit", 2000 },
            { "version", "v1" },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", true },
                { "margin", null },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "cancelOrder", true },
                { "createDepositAddress", true },
                { "createOrder", true },
                { "fetchBalance", true },
                { "fetchDepositAddress", true },
                { "fetchDepositAddresses", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchMarkOHLCV", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOrderBook", true },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "transfer", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/51840849/87153930-f0f02200-c2c0-11ea-9c0a-40337375ae89.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://paymium.com/api" },
                } },
                { "www", "https://www.paymium.com" },
                { "fees", "https://www.paymium.com/page/help/fees" },
                { "doc", new List<object>() {"https://github.com/Paymium/api-documentation", "https://www.paymium.com/page/developers", "https://paymium.github.io/api-documentation/"} },
                { "referral", "https://www.paymium.com/page/sign-up?referral=eDAzPoRQFMvaAB8sf-qj" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"countries", "currencies", "data/{currency}/ticker", "data/{currency}/trades", "data/{currency}/depth", "bitcoin_charts/{id}/trades", "bitcoin_charts/{id}/depth"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"user", "user/addresses", "user/addresses/{address}", "user/orders", "user/orders/{uuid}", "user/price_alerts", "merchant/get_payment/{uuid}"} },
                    { "post", new List<object>() {"user/addresses", "user/orders", "user/withdrawals", "user/email_transfers", "user/payment_requests", "user/price_alerts", "merchant/create_payment"} },
                    { "delete", new List<object>() {"user/orders/{uuid}", "user/orders/{uuid}/cancel", "user/price_alerts/{id}"} },
                } },
            } },
            { "markets", new Dictionary<string, object>() {
                { "BTC/EUR", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "eur" },
                    { "symbol", "BTC/EUR" },
                    { "base", "BTC" },
                    { "quote", "EUR" },
                    { "baseId", "btc" },
                    { "quoteId", "eur" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("-0.001") },
                    { "taker", this.parseNumber("0.005") },
                } },
            } },
            { "precisionMode", TICK_SIZE },
        });
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object currencies = new List<object>(((IDictionary<string,object>)this.currencies).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencies)); postFixIncrement(ref i))
        {
            object code = getValue(currencies, i);
            object currency = this.currency(code);
            object currencyId = getValue(currency, "id");
            object free = add("balance_", currencyId);
            if (isTrue(inOp(response, free)))
            {
                object account = this.account();
                object used = add("locked_", currencyId);
                ((IDictionary<string,object>)account)["free"] = this.safeString(response, free);
                ((IDictionary<string,object>)account)["used"] = this.safeString(response, used);
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name paymium#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://paymium.github.io/api-documentation/#tag/User/paths/~1user/get
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetUser(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name paymium#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://paymium.github.io/api-documentation/#tag/Public-data/paths/~1data~1%7Bcurrency%7D~1depth/get
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
        };
        object response = await this.publicGetDataCurrencyDepth(this.extend(request, parameters));
        return this.parseOrderBook(response, getValue(market, "symbol"), null, "bids", "asks", "price", "amount");
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // {
        //     "high":"33740.82",
        //     "low":"32185.15",
        //     "volume":"4.7890433",
        //     "bid":"33313.53",
        //     "ask":"33497.97",
        //     "midpoint":"33405.75",
        //     "vwap":"32802.5263553",
        //     "at":1643381654,
        //     "price":"33143.91",
        //     "open":"33116.86",
        //     "variation":"0.0817",
        //     "currency":"EUR",
        //     "trade_id":"ce2f5152-3ac5-412d-9b24-9fa72338474c",
        //     "size":"0.00041087"
        // }
        //
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.safeTimestamp(ticker, "at");
        object vwap = this.safeString(ticker, "vwap");
        object baseVolume = this.safeString(ticker, "volume");
        object quoteVolume = Precise.stringMul(baseVolume, vwap);
        object last = this.safeString(ticker, "price");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", vwap },
            { "open", this.safeString(ticker, "open") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", this.safeString(ticker, "variation") },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name paymium#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://paymium.github.io/api-documentation/#tag/Public-data/paths/~1data~1%7Bcurrency%7D~1ticker/get
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
        };
        object ticker = await this.publicGetDataCurrencyTicker(this.extend(request, parameters));
        //
        // {
        //     "high":"33740.82",
        //     "low":"32185.15",
        //     "volume":"4.7890433",
        //     "bid":"33313.53",
        //     "ask":"33497.97",
        //     "midpoint":"33405.75",
        //     "vwap":"32802.5263553",
        //     "at":1643381654,
        //     "price":"33143.91",
        //     "open":"33116.86",
        //     "variation":"0.0817",
        //     "currency":"EUR",
        //     "trade_id":"ce2f5152-3ac5-412d-9b24-9fa72338474c",
        //     "size":"0.00041087"
        // }
        //
        return this.parseTicker(ticker, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        object timestamp = this.safeTimestamp(trade, "created_at_int");
        object id = this.safeString(trade, "uuid");
        market = this.safeMarket(null, market);
        object side = this.safeString(trade, "side");
        object price = this.safeString(trade, "price");
        object amountField = add("traded_", ((string)getValue(market, "base")).ToLower());
        object amount = this.safeString(trade, amountField);
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "order", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name paymium#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://paymium.github.io/api-documentation/#tag/Public-data/paths/~1data~1%7Bcurrency%7D~1trades/get
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(market, "id") },
        };
        object response = await this.publicGetDataCurrencyTrades(this.extend(request, parameters));
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name paymium#createDepositAddress
        * @description create a currency deposit address
        * @see https://paymium.github.io/api-documentation/#tag/User/paths/~1user~1addresses/post
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostUserAddresses(parameters);
        //
        //     {
        //         "address": "1HdjGr6WCTcnmW1tNNsHX7fh4Jr5C2PeKe",
        //         "valid_until": 1620041926,
        //         "currency": "BTC",
        //         "label": "Savings"
        //     }
        //
        return this.parseDepositAddress(response);
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name paymium#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @see https://paymium.github.io/api-documentation/#tag/User/paths/~1user~1addresses~1%7Baddress%7D/get
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "address", code },
        };
        object response = await this.privateGetUserAddressesAddress(this.extend(request, parameters));
        //
        //     {
        //         "address": "1HdjGr6WCTcnmW1tNNsHX7fh4Jr5C2PeKe",
        //         "valid_until": 1620041926,
        //         "currency": "BTC",
        //         "label": "Savings"
        //     }
        //
        return this.parseDepositAddress(response);
    }

    public async override Task<object> fetchDepositAddresses(object codes = null, object parameters = null)
    {
        /**
        * @method
        * @name paymium#fetchDepositAddresses
        * @description fetch deposit addresses for multiple currencies and chain types
        * @see https://paymium.github.io/api-documentation/#tag/User/paths/~1user~1addresses/get
        * @param {string[]|undefined} codes list of unified currency codes, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [address structures]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetUserAddresses(parameters);
        //
        //     [
        //         {
        //             "address": "1HdjGr6WCTcnmW1tNNsHX7fh4Jr5C2PeKe",
        //             "valid_until": 1620041926,
        //             "currency": "BTC",
        //             "label": "Savings"
        //         }
        //     ]
        //
        return this.parseDepositAddresses(response, codes);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        //
        //     {
        //         "address": "1HdjGr6WCTcnmW1tNNsHX7fh4Jr5C2PeKe",
        //         "valid_until": 1620041926,
        //         "currency": "BTC",
        //         "label": "Savings"
        //     }
        //
        object address = this.safeString(depositAddress, "address");
        object currencyId = this.safeString(depositAddress, "currency");
        return new Dictionary<string, object>() {
            { "info", depositAddress },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "address", address },
            { "tag", null },
            { "network", null },
        };
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name paymium#createOrder
        * @description create a trade order
        * @see https://paymium.github.io/api-documentation/#tag/Order/paths/~1user~1orders/post
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "type", add(this.capitalize(type), "Order") },
            { "currency", getValue(market, "id") },
            { "direction", side },
            { "amount", amount },
        };
        if (isTrue(!isEqual(type, "market")))
        {
            ((IDictionary<string,object>)request)["price"] = price;
        }
        object response = await this.privatePostUserOrders(this.extend(request, parameters));
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", response },
            { "id", getValue(response, "uuid") },
        }, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name paymium#cancelOrder
        * @description cancels an open order
        * @see https://paymium.github.io/api-documentation/#tag/Order/paths/~1user~1orders~1%7Buuid%7D/delete
        * @see https://paymium.github.io/api-documentation/#tag/Order/paths/~1user~1orders~1%7Buuid%7D~1cancel/delete
        * @param {string} id order id
        * @param {string} symbol not used by paymium cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "uuid", id },
        };
        return await this.privateDeleteUserOrdersUuidCancel(this.extend(request, parameters));
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name paymium#transfer
        * @description transfer currency internally between wallets on the same account
        * @see https://paymium.github.io/api-documentation/#tag/Transfer/paths/~1user~1email_transfers/post
        * @param {string} code unified currency code
        * @param {float} amount amount to transfer
        * @param {string} fromAccount account to transfer from
        * @param {string} toAccount account to transfer to
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        if (isTrue(isLessThan(getIndexOf(toAccount, "@"), 0)))
        {
            throw new ExchangeError ((string)add(this.id, " transfer() only allows transfers to an email address")) ;
        }
        if (isTrue(isTrue(!isEqual(code, "BTC")) && isTrue(!isEqual(code, "EUR"))))
        {
            throw new ExchangeError ((string)add(this.id, " transfer() only allows BTC or EUR")) ;
        }
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "email", toAccount },
        };
        object response = await this.privatePostUserEmailTransfers(this.extend(request, parameters));
        //
        //     {
        //         "uuid": "968f4580-e26c-4ad8-8bcd-874d23d55296",
        //         "type": "Transfer",
        //         "currency": "BTC",
        //         "currency_amount": "string",
        //         "created_at": "2013-10-24T10:34:37.000Z",
        //         "updated_at": "2013-10-24T10:34:37.000Z",
        //         "amount": "1.0",
        //         "state": "executed",
        //         "currency_fee": "0.0",
        //         "btc_fee": "0.0",
        //         "comment": "string",
        //         "traded_btc": "string",
        //         "traded_currency": "string",
        //         "direction": "buy",
        //         "price": "string",
        //         "account_operations": [
        //             {
        //                 "uuid": "968f4580-e26c-4ad8-8bcd-874d23d55296",
        //                 "amount": "1.0",
        //                 "currency": "BTC",
        //                 "created_at": "2013-10-24T10:34:37.000Z",
        //                 "created_at_int": 1389094259,
        //                 "name": "account_operation",
        //                 "address": "1FPDBXNqSkZMsw1kSkkajcj8berxDQkUoc",
        //                 "tx_hash": "string",
        //                 "is_trading_account": true
        //             }
        //         ]
        //     }
        //
        return this.parseTransfer(response, currency);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        //     {
        //         "uuid": "968f4580-e26c-4ad8-8bcd-874d23d55296",
        //         "type": "Transfer",
        //         "currency": "BTC",
        //         "currency_amount": "string",
        //         "created_at": "2013-10-24T10:34:37.000Z",
        //         "updated_at": "2013-10-24T10:34:37.000Z",
        //         "amount": "1.0",
        //         "state": "executed",
        //         "currency_fee": "0.0",
        //         "btc_fee": "0.0",
        //         "comment": "string",
        //         "traded_btc": "string",
        //         "traded_currency": "string",
        //         "direction": "buy",
        //         "price": "string",
        //         "account_operations": [
        //             {
        //                 "uuid": "968f4580-e26c-4ad8-8bcd-874d23d55296",
        //                 "amount": "1.0",
        //                 "currency": "BTC",
        //                 "created_at": "2013-10-24T10:34:37.000Z",
        //                 "created_at_int": 1389094259,
        //                 "name": "account_operation",
        //                 "address": "1FPDBXNqSkZMsw1kSkkajcj8berxDQkUoc",
        //                 "tx_hash": "string",
        //                 "is_trading_account": true
        //             }
        //         ]
        //     }
        //
        object currencyId = this.safeString(transfer, "currency");
        object updatedAt = this.safeString(transfer, "updated_at");
        object timetstamp = this.parseDate(updatedAt);
        object accountOperations = this.safeValue(transfer, "account_operations");
        object firstOperation = this.safeValue(accountOperations, 0, new Dictionary<string, object>() {});
        object status = this.safeString(transfer, "state");
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", this.safeString(transfer, "uuid") },
            { "timestamp", timetstamp },
            { "datetime", this.iso8601(timetstamp) },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "amount", this.safeNumber(transfer, "amount") },
            { "fromAccount", null },
            { "toAccount", this.safeString(firstOperation, "address") },
            { "status", this.parseTransferStatus(status) },
        };
    }

    public virtual object parseTransferStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "executed", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.version), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object auth = add(nonce, url);
            headers = new Dictionary<string, object>() {
                { "Api-Key", this.apiKey },
                { "Api-Nonce", nonce },
            };
            if (isTrue(isEqual(method, "POST")))
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    body = this.json(query);
                    auth = add(auth, body);
                    ((IDictionary<string,object>)headers)["Content-Type"] = "application/json";
                }
            } else
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    object queryString = this.urlencode(query);
                    auth = add(auth, queryString);
                    url = add(url, add("?", queryString));
                }
            }
            ((IDictionary<string,object>)headers)["Api-Signature"] = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        object errors = this.safeValue(response, "errors");
        if (isTrue(!isEqual(errors, null)))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), this.json(response))) ;
        }
        return null;
    }
}
