namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class tradeogre : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "tradeogre" },
            { "name", "tradeogre" },
            { "countries", new List<object>() {} },
            { "rateLimit", 100 },
            { "version", "v2" },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "cancelOrders", false },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", false },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "createOrders", false },
                { "createPostOnlyOrder", false },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchAccounts", false },
                { "fetchBalance", true },
                { "fetchBorrowInterest", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDeposit", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", false },
                { "fetchDepositsWithdrawals", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLedger", false },
                { "fetchLedgerEntry", false },
                { "fetchLeverageTiers", false },
                { "fetchMarketLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", false },
                { "fetchOHLCV", false },
                { "fetchOpenInterest", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", false },
                { "fetchOrders", false },
                { "fetchOrderTrades", false },
                { "fetchPermissions", false },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", false },
                { "fetchTrades", true },
                { "fetchTradingLimits", false },
                { "fetchTransactionFee", false },
                { "fetchTransactionFees", false },
                { "fetchTransactions", false },
                { "fetchTransfers", false },
                { "fetchWithdrawAddresses", false },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMargin", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "signIn", false },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "referral", "" },
                { "logo", "https://github.com/ccxt/ccxt/assets/43336371/3aa748b7-ea44-45e9-a9e7-b1d207a2578a" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://tradeogre.com/api/v1" },
                } },
                { "www", "https://tradeogre.com" },
                { "doc", "https://tradeogre.com/help/api" },
                { "fees", "https://tradeogre.com/help/fees" },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("0.002") },
                    { "taker", this.parseNumber("0.002") },
                } },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "markets", 1 },
                        { "orders/{market}", 1 },
                        { "ticker/{market}", 1 },
                        { "history/{market}", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "account/balance", 1 },
                        { "account/balances", 1 },
                        { "account/order/{uuid}", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "order/buy", 1 },
                        { "order/sell", 1 },
                        { "order/cancel", 1 },
                        { "orders", 1 },
                        { "account/orders", 1 },
                    } },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {} },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "Must be authorized", typeof(AuthenticationError) },
                    { "Market not found", typeof(BadRequest) },
                    { "Insufficient funds", typeof(InsufficientFunds) },
                    { "Order not found", typeof(BadRequest) },
                } },
            } },
            { "options", new Dictionary<string, object>() {} },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#fetchMarkets
        * @description retrieves data on all markets for bigone
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#markets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetMarkets(parameters);
        //
        //   [
        //       {
        //          "AEON-BTC": {
        //             "initialprice": "0.00022004",
        //             "price": "0.00025992",
        //             "high": "0.00025992",
        //             "low": "0.00022003",
        //             "volume": "0.00359066",
        //             "bid": "0.00022456",
        //             "ask": "0.00025993"
        //          }
        //       }
        //   ]
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object rawMarket = getValue(response, i);
            object keys = new List<object>(((IDictionary<string,object>)rawMarket).Keys);
            object id = this.safeString(keys, 0);
            object keyParts = ((string)id).Split(new [] {((string)"-")}, StringSplitOptions.None).ToList<object>();
            object baseId = this.safeString(keyParts, 0);
            object quoteId = this.safeString(keyParts, 1);
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object market = this.safeMarketStructure(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", true },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "taker", getValue(getValue(this.fees, "trading"), "taker") },
                { "maker", getValue(getValue(this.fees, "trading"), "taker") },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision("8")) },
                    { "price", this.parseNumber(this.parsePrecision("8")) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", rawMarket },
            });
            ((IList<object>)result).Add(market);
        }
        return result;
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.publicGetTickerMarket(this.extend(request, parameters));
        //
        //   {
        //       "success":true,
        //       "initialprice":"0.02502002",
        //       "price":"0.02500000",
        //       "high":"0.03102001",
        //       "low":"0.02500000",
        //       "volume":"0.15549958",
        //       "bid":"0.02420000",
        //       "ask":"0.02625000"
        //   }
        //
        return this.parseTicker(response, market);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //  {
        //       "success":true,
        //       "initialprice":"0.02502002",
        //       "price":"0.02500000",
        //       "high":"0.03102001",
        //       "low":"0.02500000",
        //       "volume":"0.15549958",
        //       "bid":"0.02420000",
        //       "ask":"0.02625000"
        //   }
        //
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", this.safeString(market, "symbol") },
            { "timestamp", null },
            { "datetime", null },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", null },
            { "last", null },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.publicGetOrdersMarket(this.extend(request, parameters));
        //
        // {
        //     "success": true,
        //     "buy": {
        //        "0.02425501": "36.46986607",
        //        "0.02425502": "93.64201137",
        //        "0.02425503": "19.02000000",
        //        "0.02425515": "115.49000000"
        // }
        //
        object rawBids = this.safeDict(response, "buy", new Dictionary<string, object>() {});
        object rawAsks = this.safeDict(response, "sell", new Dictionary<string, object>() {});
        object rawOrderbook = new Dictionary<string, object>() {
            { "bids", rawBids },
            { "asks", rawAsks },
        };
        object orderbook = this.parseOrderBook(rawOrderbook, symbol);
        return orderbook;
    }

    public override object parseBidsAsks(object bidasks, object priceKey = null, object amountKey = null, object countOrIdKey = null)
    {
        priceKey ??= 0;
        amountKey ??= 1;
        countOrIdKey ??= 2;
        object prices = new List<object>(((IDictionary<string,object>)bidasks).Keys);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(prices)); postFixIncrement(ref i))
        {
            object priceString = this.safeString(prices, i);
            object price = this.safeNumber(prices, i);
            object volume = this.safeNumber(bidasks, priceString);
            ((IList<object>)result).Add(new List<object>() {price, volume});
        }
        return result;
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum number of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} params.lastId order id
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.publicGetHistoryMarket(this.extend(request, parameters));
        return this.parseTrades(response, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        //  {
        //      "date":1515128233,
        //      "type":"sell",
        //      "price":"0.02454320",
        //      "quantity":"0.17614230"
        //  }
        //
        object timestamp = this.safeIntegerProduct(trade, "date", 1000);
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", this.safeString(market, "symbol") },
            { "order", null },
            { "type", null },
            { "side", this.safeString(trade, "type") },
            { "takerOrMaker", null },
            { "price", this.safeString(trade, "price") },
            { "amount", this.safeString(trade, "quantity") },
            { "cost", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
            } },
        }, market);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetAccountBalances(parameters);
        object result = this.safeDict(response, "balances", new Dictionary<string, object>() {});
        return this.parseBalance(result);
    }

    public override object parseBalance(object response)
    {
        //
        //    {
        //        "USDT": "12"
        //    }
        //
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object keys = new List<object>(((IDictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object currencyId = getValue(keys, i);
            object balance = getValue(response, currencyId);
            object code = this.safeCurrencyCode(currencyId);
            object account = new Dictionary<string, object>() {
                { "total", balance },
            };
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type must be 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} price the price at which the order is to be fullfilled, in units of the quote currency
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (isTrue(isEqual(type, "market")))
        {
            throw new BadRequest ((string)add(this.id, " createOrder does not support market orders")) ;
        }
        if (isTrue(isEqual(price, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " createOrder requires a limit parameter")) ;
        }
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "quantity", this.parseToNumeric(this.amountToPrecision(symbol, amount)) },
            { "price", this.parseToNumeric(this.priceToPrecision(symbol, price)) },
        };
        object response = null;
        if (isTrue(isEqual(side, "buy")))
        {
            response = await this.privatePostOrderBuy(this.extend(request, parameters));
        } else
        {
            response = await this.privatePostOrderSell(this.extend(request, parameters));
        }
        return this.parseOrder(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#cancelOrder
        * @description cancels an open order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "uuid", id },
        };
        object response = await this.privatePostOrderCancel(this.extend(request, parameters));
        return this.parseOrder(response);
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#cancelAllOrders
        * @description cancel all open orders
        * @param {string} symbol alpaca cancelAllOrders cannot setting symbol, it will cancel all open orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.cancelOrder("all", symbol, parameters);
        return new List<object>() {response};
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name tradeogre#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            ((IDictionary<string,object>)request)["market"] = getValue(market, "id");
        }
        object response = await this.privatePostAccountOrders(this.extend(request, parameters));
        return this.parseOrders(response, market, since, limit);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-status
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "uuid", id },
        };
        object response = await this.privateGetAccountOrderUuid(this.extend(request, parameters));
        return this.parseOrder(response, null);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //
        // {
        //     "uuid": "a40ac710-8dc5-b5a8-aa69-389715197b14",
        //     "date": 1514876938,
        //     "type": "sell",
        //     "price": "0.02621960",
        //     "quantity": "1.55772526",
        //     "market": "XMR-BTC"
        // }
        //
        object timestamp = this.safeIntegerProduct(order, "date", 1000);
        object marketId = this.safeString(order, "market");
        market = this.safeMarket(marketId, market);
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString(order, "uuid") },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", getValue(market, "symbol") },
            { "type", null },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", this.safeString(order, "type") },
            { "price", this.safeString(order, "price") },
            { "stopPrice", null },
            { "amount", this.safeString(order, "quantity") },
            { "cost", null },
            { "average", null },
            { "filled", this.safeString(order, "fulfilled") },
            { "remaining", null },
            { "status", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
            } },
            { "trades", null },
        }, market);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.implodeParams(path, parameters));
        parameters = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(method, "GET")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        }
        if (isTrue(isEqual(api, "private")))
        {
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
                { "Referer", "CCXT" },
                { "authorization", add("Basic ", this.stringToBase64(add(add(this.apiKey, ":"), this.secret))) },
            };
            if (isTrue(!isEqual(method, "GET")))
            {
                body = this.urlencode(parameters);
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (!isTrue((inOp(response, "success"))))
        {
            return null;
        }
        //
        //  {"success":false,"error":"Must be authorized"}
        //
        object success = this.safeBool(response, "success");
        if (isTrue(success))
        {
            return null;
        }
        object successString = this.safeString(response, "success");
        if (isTrue(isEqual(successString, "true")))
        {
            return null;
        }
        object error = this.safeValue(response, "error");
        object errorCode = this.safeString(error, "code");
        object feedback = add(add(this.id, " "), this.json(response));
        this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
        throw new ExchangeError ((string)feedback) ;
    }
}
