namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class deribit : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "deribit" },
            { "name", "Deribit" },
            { "countries", new List<object>() {"NL"} },
            { "version", "v2" },
            { "userAgent", null },
            { "rateLimit", 50 },
            { "pro", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", false },
                { "margin", false },
                { "swap", true },
                { "future", true },
                { "option", true },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "cancelOrders", false },
                { "createDepositAddress", true },
                { "createOrder", true },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", true },
                { "createStopOrder", true },
                { "createTrailingAmountOrder", true },
                { "editOrder", true },
                { "fetchAccounts", true },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", true },
                { "fetchDeposit", false },
                { "fetchDepositAddress", true },
                { "fetchDeposits", true },
                { "fetchDepositWithdrawFees", true },
                { "fetchFundingRate", true },
                { "fetchFundingRateHistory", true },
                { "fetchGreeks", true },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverageTiers", false },
                { "fetchLiquidations", true },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyLiquidations", true },
                { "fetchMySettlementHistory", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenOrders", true },
                { "fetchOption", true },
                { "fetchOptionChain", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchOrderTrades", true },
                { "fetchPosition", true },
                { "fetchPositionMode", false },
                { "fetchPositions", true },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchStatus", true },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTransactions", false },
                { "fetchTransfer", false },
                { "fetchTransfers", true },
                { "fetchUnderlyingAssets", false },
                { "fetchVolatilityHistory", true },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", true },
                { "sandbox", true },
                { "transfer", true },
                { "withdraw", true },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1" },
                { "3m", "3" },
                { "5m", "5" },
                { "10m", "10" },
                { "15m", "15" },
                { "30m", "30" },
                { "1h", "60" },
                { "2h", "120" },
                { "3h", "180" },
                { "6h", "360" },
                { "12h", "720" },
                { "1d", "1D" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "test", new Dictionary<string, object>() {
                    { "rest", "https://test.deribit.com" },
                } },
                { "logo", "https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://www.deribit.com" },
                } },
                { "www", "https://www.deribit.com" },
                { "doc", new List<object>() {"https://docs.deribit.com/v2", "https://github.com/deribit"} },
                { "fees", "https://www.deribit.com/pages/information/fees" },
                { "referral", new Dictionary<string, object>() {
                    { "url", "https://www.deribit.com/reg-1189.4038" },
                    { "discount", 0.1 },
                } },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "auth", 1 },
                        { "exchange_token", 1 },
                        { "fork_token", 1 },
                        { "set_heartbeat", 1 },
                        { "disable_heartbeat", 1 },
                        { "get_time", 1 },
                        { "hello", 1 },
                        { "status", 1 },
                        { "test", 1 },
                        { "subscribe", 1 },
                        { "unsubscribe", 1 },
                        { "unsubscribe_all", 1 },
                        { "get_announcements", 1 },
                        { "get_book_summary_by_currency", 1 },
                        { "get_book_summary_by_instrument", 1 },
                        { "get_contract_size", 1 },
                        { "get_currencies", 1 },
                        { "get_delivery_prices", 1 },
                        { "get_funding_chart_data", 1 },
                        { "get_funding_rate_history", 1 },
                        { "get_funding_rate_value", 1 },
                        { "get_historical_volatility", 1 },
                        { "get_index", 1 },
                        { "get_index_price", 1 },
                        { "get_index_price_names", 1 },
                        { "get_instrument", 1 },
                        { "get_instruments", 1 },
                        { "get_last_settlements_by_currency", 1 },
                        { "get_last_settlements_by_instrument", 1 },
                        { "get_last_trades_by_currency", 1 },
                        { "get_last_trades_by_currency_and_time", 1 },
                        { "get_last_trades_by_instrument", 1 },
                        { "get_last_trades_by_instrument_and_time", 1 },
                        { "get_mark_price_history", 1 },
                        { "get_order_book", 1 },
                        { "get_trade_volumes", 1 },
                        { "get_tradingview_chart_data", 1 },
                        { "get_volatility_index_data", 1 },
                        { "ticker", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "logout", 1 },
                        { "enable_cancel_on_disconnect", 1 },
                        { "disable_cancel_on_disconnect", 1 },
                        { "get_cancel_on_disconnect", 1 },
                        { "subscribe", 1 },
                        { "unsubscribe", 1 },
                        { "unsubscribe_all", 1 },
                        { "change_api_key_name", 1 },
                        { "change_scope_in_api_key", 1 },
                        { "change_subaccount_name", 1 },
                        { "create_api_key", 1 },
                        { "create_subaccount", 1 },
                        { "disable_api_key", 1 },
                        { "disable_tfa_for_subaccount", 1 },
                        { "enable_affiliate_program", 1 },
                        { "enable_api_key", 1 },
                        { "get_access_log", 1 },
                        { "get_account_summary", 1 },
                        { "get_affiliate_program_info", 1 },
                        { "get_email_language", 1 },
                        { "get_new_announcements", 1 },
                        { "get_portfolio_margins", 1 },
                        { "get_position", 1 },
                        { "get_positions", 1 },
                        { "get_subaccounts", 1 },
                        { "get_subaccounts_details", 1 },
                        { "get_transaction_log", 1 },
                        { "list_api_keys", 1 },
                        { "remove_api_key", 1 },
                        { "remove_subaccount", 1 },
                        { "reset_api_key", 1 },
                        { "set_announcement_as_read", 1 },
                        { "set_api_key_as_default", 1 },
                        { "set_email_for_subaccount", 1 },
                        { "set_email_language", 1 },
                        { "set_password_for_subaccount", 1 },
                        { "toggle_notifications_from_subaccount", 1 },
                        { "toggle_subaccount_login", 1 },
                        { "execute_block_trade", 4 },
                        { "get_block_trade", 1 },
                        { "get_last_block_trades_by_currency", 1 },
                        { "invalidate_block_trade_signature", 1 },
                        { "verify_block_trade", 4 },
                        { "buy", 4 },
                        { "sell", 4 },
                        { "edit", 4 },
                        { "edit_by_label", 4 },
                        { "cancel", 4 },
                        { "cancel_all", 4 },
                        { "cancel_all_by_currency", 4 },
                        { "cancel_all_by_instrument", 4 },
                        { "cancel_by_label", 4 },
                        { "close_position", 4 },
                        { "get_margins", 1 },
                        { "get_mmp_config", 1 },
                        { "get_open_orders_by_currency", 1 },
                        { "get_open_orders_by_instrument", 1 },
                        { "get_order_history_by_currency", 1 },
                        { "get_order_history_by_instrument", 1 },
                        { "get_order_margin_by_ids", 1 },
                        { "get_order_state", 1 },
                        { "get_stop_order_history", 1 },
                        { "get_trigger_order_history", 1 },
                        { "get_user_trades_by_currency", 1 },
                        { "get_user_trades_by_currency_and_time", 1 },
                        { "get_user_trades_by_instrument", 1 },
                        { "get_user_trades_by_instrument_and_time", 1 },
                        { "get_user_trades_by_order", 1 },
                        { "reset_mmp", 1 },
                        { "set_mmp_config", 1 },
                        { "get_settlement_history_by_instrument", 1 },
                        { "get_settlement_history_by_currency", 1 },
                        { "cancel_transfer_by_id", 1 },
                        { "cancel_withdrawal", 1 },
                        { "create_deposit_address", 1 },
                        { "get_current_deposit_address", 1 },
                        { "get_deposits", 1 },
                        { "get_transfers", 1 },
                        { "get_withdrawals", 1 },
                        { "submit_transfer_to_subaccount", 1 },
                        { "submit_transfer_to_user", 1 },
                        { "withdraw", 1 },
                    } },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "9999", typeof(PermissionDenied) },
                { "10000", typeof(AuthenticationError) },
                { "10001", typeof(ExchangeError) },
                { "10002", typeof(InvalidOrder) },
                { "10003", typeof(InvalidOrder) },
                { "10004", typeof(OrderNotFound) },
                { "10005", typeof(InvalidOrder) },
                { "10006", typeof(InvalidOrder) },
                { "10007", typeof(InvalidOrder) },
                { "10008", typeof(InvalidOrder) },
                { "10009", typeof(InsufficientFunds) },
                { "10010", typeof(OrderNotFound) },
                { "10011", typeof(InvalidOrder) },
                { "10012", typeof(InvalidOrder) },
                { "10013", typeof(PermissionDenied) },
                { "10014", typeof(PermissionDenied) },
                { "10015", typeof(PermissionDenied) },
                { "10016", typeof(PermissionDenied) },
                { "10017", typeof(PermissionDenied) },
                { "10018", typeof(PermissionDenied) },
                { "10019", typeof(PermissionDenied) },
                { "10020", typeof(ExchangeError) },
                { "10021", typeof(InvalidOrder) },
                { "10022", typeof(InvalidOrder) },
                { "10023", typeof(InvalidOrder) },
                { "10024", typeof(InvalidOrder) },
                { "10025", typeof(InvalidOrder) },
                { "10026", typeof(InvalidOrder) },
                { "10027", typeof(InvalidOrder) },
                { "10028", typeof(DDoSProtection) },
                { "10029", typeof(OrderNotFound) },
                { "10030", typeof(ExchangeError) },
                { "10031", typeof(ExchangeError) },
                { "10032", typeof(InvalidOrder) },
                { "10033", typeof(NotSupported) },
                { "10034", typeof(InvalidOrder) },
                { "10035", typeof(InvalidOrder) },
                { "10036", typeof(InvalidOrder) },
                { "10040", typeof(ExchangeNotAvailable) },
                { "10041", typeof(OnMaintenance) },
                { "10043", typeof(InvalidOrder) },
                { "10044", typeof(InvalidOrder) },
                { "10045", typeof(InvalidOrder) },
                { "10046", typeof(InvalidOrder) },
                { "10047", typeof(DDoSProtection) },
                { "10048", typeof(ExchangeError) },
                { "11008", typeof(InvalidOrder) },
                { "11029", typeof(BadRequest) },
                { "11030", typeof(ExchangeError) },
                { "11031", typeof(ExchangeError) },
                { "11035", typeof(DDoSProtection) },
                { "11036", typeof(InvalidOrder) },
                { "11037", typeof(BadRequest) },
                { "11038", typeof(InvalidOrder) },
                { "11039", typeof(InvalidOrder) },
                { "11041", typeof(InvalidOrder) },
                { "11042", typeof(PermissionDenied) },
                { "11043", typeof(BadRequest) },
                { "11044", typeof(InvalidOrder) },
                { "11045", typeof(BadRequest) },
                { "11046", typeof(BadRequest) },
                { "11047", typeof(BadRequest) },
                { "11048", typeof(ExchangeError) },
                { "11049", typeof(BadRequest) },
                { "11050", typeof(BadRequest) },
                { "11051", typeof(OnMaintenance) },
                { "11052", typeof(ExchangeError) },
                { "11053", typeof(ExchangeError) },
                { "11090", typeof(InvalidAddress) },
                { "11091", typeof(InvalidAddress) },
                { "11092", typeof(InvalidAddress) },
                { "11093", typeof(DDoSProtection) },
                { "11094", typeof(ExchangeError) },
                { "11095", typeof(ExchangeError) },
                { "11096", typeof(ExchangeError) },
                { "12000", typeof(AuthenticationError) },
                { "12001", typeof(DDoSProtection) },
                { "12002", typeof(ExchangeError) },
                { "12998", typeof(AuthenticationError) },
                { "12003", typeof(AuthenticationError) },
                { "12004", typeof(AuthenticationError) },
                { "12005", typeof(AuthenticationError) },
                { "12100", typeof(ExchangeError) },
                { "12999", typeof(AuthenticationError) },
                { "13000", typeof(AuthenticationError) },
                { "13001", typeof(AuthenticationError) },
                { "13002", typeof(PermissionDenied) },
                { "13003", typeof(AuthenticationError) },
                { "13004", typeof(AuthenticationError) },
                { "13005", typeof(AuthenticationError) },
                { "13006", typeof(AuthenticationError) },
                { "13007", typeof(AuthenticationError) },
                { "13008", typeof(ExchangeError) },
                { "13009", typeof(AuthenticationError) },
                { "13010", typeof(BadRequest) },
                { "13011", typeof(BadRequest) },
                { "13012", typeof(PermissionDenied) },
                { "13013", typeof(BadRequest) },
                { "13014", typeof(BadRequest) },
                { "13015", typeof(BadRequest) },
                { "13016", typeof(BadRequest) },
                { "13017", typeof(ExchangeError) },
                { "13018", typeof(ExchangeError) },
                { "13019", typeof(ExchangeError) },
                { "13020", typeof(ExchangeError) },
                { "13021", typeof(PermissionDenied) },
                { "13025", typeof(ExchangeError) },
                { "-32602", typeof(BadRequest) },
                { "-32601", typeof(BadRequest) },
                { "-32700", typeof(BadRequest) },
                { "-32000", typeof(BadRequest) },
                { "11054", typeof(InvalidOrder) },
            } },
            { "precisionMode", TICK_SIZE },
            { "options", new Dictionary<string, object>() {
                { "code", "BTC" },
                { "fetchBalance", new Dictionary<string, object>() {
                    { "code", "BTC" },
                } },
                { "fetchPositions", new Dictionary<string, object>() {
                    { "code", "BTC" },
                } },
                { "transfer", new Dictionary<string, object>() {
                    { "method", "privateGetSubmitTransferToSubaccount" },
                } },
            } },
        });
    }

    public override object createExpiredOptionMarket(object symbol)
    {
        // support expired option contracts
        object quote = "USD";
        object settle = null;
        object optionParts = ((string)symbol).Split(new [] {((string)"-")}, StringSplitOptions.None).ToList<object>();
        object symbolBase = ((string)symbol).Split(new [] {((string)"/")}, StringSplitOptions.None).ToList<object>();
        object bs = null;
        object expiry = null;
        if (isTrue(isGreaterThan(getIndexOf(symbol, "/"), -1)))
        {
            bs = this.safeString(symbolBase, 0);
            expiry = this.safeString(optionParts, 1);
            if (isTrue(isGreaterThan(getIndexOf(symbol, "USDC"), -1)))
            {
                bs = add(bs, "_USDC");
            }
        } else
        {
            bs = this.safeString(optionParts, 0);
            expiry = this.convertMarketIdExpireDate(this.safeString(optionParts, 1));
        }
        if (isTrue(isGreaterThan(getIndexOf(symbol, "USDC"), -1)))
        {
            quote = "USDC";
            settle = "USDC";
        } else
        {
            settle = bs;
        }
        object splitBase = bs;
        if (isTrue(isGreaterThan(getIndexOf(bs, "_"), -1)))
        {
            object splitSymbol = ((string)bs).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
            splitBase = this.safeString(splitSymbol, 0);
        }
        object strike = this.safeString(optionParts, 2);
        object optionType = this.safeString(optionParts, 3);
        object datetime = this.convertExpireDate(expiry);
        object timestamp = this.parse8601(datetime);
        return new Dictionary<string, object>() {
            { "id", add(add(add(add(add(add(bs, "-"), this.convertExpireDateToMarketIdDate(expiry)), "-"), strike), "-"), optionType) },
            { "symbol", add(add(add(add(add(add(add(add(add(add(splitBase, "/"), quote), ":"), settle), "-"), expiry), "-"), strike), "-"), optionType) },
            { "base", bs },
            { "quote", quote },
            { "settle", settle },
            { "baseId", bs },
            { "quoteId", quote },
            { "settleId", settle },
            { "active", false },
            { "type", "option" },
            { "linear", null },
            { "inverse", null },
            { "spot", false },
            { "swap", false },
            { "future", false },
            { "option", true },
            { "margin", false },
            { "contract", true },
            { "contractSize", null },
            { "expiry", timestamp },
            { "expiryDatetime", datetime },
            { "optionType", ((bool) isTrue((isEqual(optionType, "C")))) ? "call" : "put" },
            { "strike", this.parseNumber(strike) },
            { "precision", new Dictionary<string, object>() {
                { "amount", null },
                { "price", null },
            } },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "info", null },
        };
    }

    public override object safeMarket(object marketId = null, object market = null, object delimiter = null, object marketType = null)
    {
        object isOption = isTrue((!isEqual(marketId, null))) && isTrue((isTrue((((string)marketId).EndsWith(((string)"-C")))) || isTrue((((string)marketId).EndsWith(((string)"-P"))))));
        if (isTrue(isTrue(isOption) && !isTrue((inOp(this.markets_by_id, marketId)))))
        {
            // handle expired option contracts
            return this.createExpiredOptionMarket(marketId);
        }
        return base.safeMarket(marketId, market, delimiter, marketType);
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://docs.deribit.com/#public-get_time
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetGetTime(parameters);
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": 1583922446019,
        //         "usIn": 1583922446019955,
        //         "usOut": 1583922446019956,
        //         "usDiff": 1,
        //         "testnet": false
        //     }
        //
        return this.safeInteger(response, "result");
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @see https://docs.deribit.com/#public-get_currencies
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetGetCurrencies(parameters);
        //
        //    {
        //      "jsonrpc": "2.0",
        //      "result": [
        //        {
        //          "withdrawal_priorities": [],
        //          "withdrawal_fee": 0.01457324,
        //          "min_withdrawal_fee": 0.000001,
        //          "min_confirmations": 1,
        //          "fee_precision": 8,
        //          "currency_long": "Solana",
        //          "currency": "SOL",
        //          "coin_type": "SOL"
        //        },
        //        ...
        //      ],
        //      "usIn": 1688652701456124,
        //      "usOut": 1688652701456390,
        //      "usDiff": 266,
        //      "testnet": true
        //    }
        //
        object data = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object currency = getValue(data, i);
            object currencyId = this.safeString(currency, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object name = this.safeString(currency, "currency_long");
            ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                { "info", currency },
                { "code", code },
                { "id", currencyId },
                { "name", name },
                { "active", null },
                { "deposit", null },
                { "withdraw", null },
                { "fee", this.safeNumber(currency, "withdrawal_fee") },
                { "precision", this.parseNumber(this.parsePrecision(this.safeString(currency, "fee_precision"))) },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "deposit", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "networks", null },
            };
        }
        return result;
    }

    public virtual object codeFromOptions(object methodName, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object defaultCode = this.safeValue(this.options, "code", "BTC");
        object options = this.safeValue(this.options, methodName, new Dictionary<string, object>() {});
        object code = this.safeValue(options, "code", defaultCode);
        return this.safeValue(parameters, "code", code);
    }

    public async override Task<object> fetchStatus(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchStatus
        * @description the latest known information on the availability of the exchange API
        * @see https://docs.deribit.com/#public-status
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [status structure]{@link https://docs.ccxt.com/#/?id=exchange-status-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetStatus(parameters);
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "locked": "false" // true, partial, false
        //         },
        //         "usIn": 1650641690226788,
        //         "usOut": 1650641690226836,
        //         "usDiff": 48,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result");
        object locked = this.safeString(result, "locked");
        object updateTime = this.safeIntegerProduct(response, "usIn", 0.001, this.milliseconds());
        return new Dictionary<string, object>() {
            { "status", ((bool) isTrue((isEqual(locked, "false")))) ? "ok" : "maintenance" },
            { "updated", updateTime },
            { "eta", null },
            { "url", null },
            { "info", response },
        };
    }

    public async override Task<object> fetchAccounts(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchAccounts
        * @description fetch all the accounts associated with a profile
        * @see https://docs.deribit.com/#private-get_subaccounts
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetGetSubaccounts(parameters);
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": [{
        //                 "username": "someusername",
        //                 "type": "main",
        //                 "system_name": "someusername",
        //                 "security_keys_enabled": false,
        //                 "security_keys_assignments": [],
        //                 "receive_notifications": false,
        //                 "login_enabled": true,
        //                 "is_password": true,
        //                 "id": "238216",
        //                 "email": "pablo@abcdef.com"
        //             },
        //             {
        //                 "username": "someusername_1",
        //                 "type": "subaccount",
        //                 "system_name": "someusername_1",
        //                 "security_keys_enabled": false,
        //                 "security_keys_assignments": [],
        //                 "receive_notifications": false,
        //                 "login_enabled": false,
        //                 "is_password": false,
        //                 "id": "245499",
        //                 "email": "pablo@abcdef.com"
        //             }
        //         ],
        //         "usIn": "1652736468292006",
        //         "usOut": "1652736468292377",
        //         "usDiff": "371",
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new List<object>() {});
        return this.parseAccounts(result);
    }

    public override object parseAccount(object account)
    {
        //
        //      {
        //          "username": "someusername_1",
        //          "type": "subaccount",
        //          "system_name": "someusername_1",
        //          "security_keys_enabled": false,
        //          "security_keys_assignments": [],
        //          "receive_notifications": false,
        //          "login_enabled": false,
        //          "is_password": false,
        //          "id": "245499",
        //          "email": "pablo@abcdef.com"
        //      }
        //
        return new Dictionary<string, object>() {
            { "info", account },
            { "id", this.safeString(account, "id") },
            { "type", this.safeString(account, "type") },
            { "code", this.safeCurrencyCode(null, currency) },
        };
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchMarkets
        * @description retrieves data on all markets for deribit
        * @see https://docs.deribit.com/#public-get_currencies
        * @see https://docs.deribit.com/#public-get_instruments
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object instrumentsResponses = new List<object>() {};
        object result = new List<object>() {};
        object parsedMarkets = new Dictionary<string, object>() {};
        object fetchAllMarkets = null;
        var fetchAllMarketsparametersVariable = this.handleOptionAndParams(parameters, "fetchMarkets", "fetchAllMarkets", true);
        fetchAllMarkets = ((IList<object>)fetchAllMarketsparametersVariable)[0];
        parameters = ((IList<object>)fetchAllMarketsparametersVariable)[1];
        if (isTrue(fetchAllMarkets))
        {
            object instrumentsResponse = await this.publicGetGetInstruments(parameters);
            ((IList<object>)instrumentsResponses).Add(instrumentsResponse);
        } else
        {
            object currenciesResponse = await this.publicGetGetCurrencies(parameters);
            //
            //     {
            //         "jsonrpc": "2.0",
            //         "result": [
            //             {
            //                 "withdrawal_priorities": [
            //                     { value: 0.15, name: "very_low" },
            //                     { value: 1.5, name: "very_high" },
            //                 ],
            //                 "withdrawal_fee": 0.0005,
            //                 "min_withdrawal_fee": 0.0005,
            //                 "min_confirmations": 1,
            //                 "fee_precision": 4,
            //                 "currency_long": "Bitcoin",
            //                 "currency": "BTC",
            //                 "coin_type": "BITCOIN"
            //             }
            //         ],
            //         "usIn": 1583761588590479,
            //         "usOut": 1583761588590544,
            //         "usDiff": 65,
            //         "testnet": false
            //     }
            //
            object currenciesResult = this.safeValue(currenciesResponse, "result", new List<object>() {});
            for (object i = 0; isLessThan(i, getArrayLength(currenciesResult)); postFixIncrement(ref i))
            {
                object currencyId = this.safeString(getValue(currenciesResult, i), "currency");
                object request = new Dictionary<string, object>() {
                    { "currency", currencyId },
                };
                object instrumentsResponse = await this.publicGetGetInstruments(this.extend(request, parameters));
                //
                //     {
                //         "jsonrpc":"2.0",
                //         "result":[
                //             {
                //                 "tick_size":0.0005,
                //                 "taker_commission":0.0003,
                //                 "strike":52000.0,
                //                 "settlement_period":"month",
                //                 "settlement_currency":"BTC",
                //                 "quote_currency":"BTC",
                //                 "option_type":"put", // put, call
                //                 "min_trade_amount":0.1,
                //                 "maker_commission":0.0003,
                //                 "kind":"option",
                //                 "is_active":true,
                //                 "instrument_name":"BTC-24JUN22-52000-P",
                //                 "expiration_timestamp":1656057600000,
                //                 "creation_timestamp":1648199543000,
                //                 "counter_currency":"USD",
                //                 "contract_size":1.0,
                //                 "block_trade_commission":0.0003,
                //                 "base_currency":"BTC"
                //             },
                //             {
                //                 "tick_size":0.5,
                //                 "taker_commission":0.0005,
                //                 "settlement_period":"month", // month, week
                //                 "settlement_currency":"BTC",
                //                 "quote_currency":"USD",
                //                 "min_trade_amount":10.0,
                //                 "max_liquidation_commission":0.0075,
                //                 "max_leverage":50,
                //                 "maker_commission":0.0,
                //                 "kind":"future",
                //                 "is_active":true,
                //                 "instrument_name":"BTC-27MAY22",
                //                 "future_type":"reversed",
                //                 "expiration_timestamp":1653638400000,
                //                 "creation_timestamp":1648195209000,
                //                 "counter_currency":"USD",
                //                 "contract_size":10.0,
                //                 "block_trade_commission":0.0001,
                //                 "base_currency":"BTC"
                //             },
                //             {
                //                 "tick_size":0.5,
                //                 "taker_commission":0.0005,
                //                 "settlement_period":"perpetual",
                //                 "settlement_currency":"BTC",
                //                 "quote_currency":"USD",
                //                 "min_trade_amount":10.0,
                //                 "max_liquidation_commission":0.0075,
                //                 "max_leverage":50,
                //                 "maker_commission":0.0,
                //                 "kind":"future",
                //                 "is_active":true,
                //                 "instrument_name":"BTC-PERPETUAL",
                //                 "future_type":"reversed",
                //                 "expiration_timestamp":32503708800000,
                //                 "creation_timestamp":1534242287000,
                //                 "counter_currency":"USD",
                //                 "contract_size":10.0,
                //                 "block_trade_commission":0.0001,
                //                 "base_currency":"BTC"
                //             },
                //         ],
                //         "usIn":1648691472831791,
                //         "usOut":1648691472831896,
                //         "usDiff":105,
                //         "testnet":false
                //     }
                //
                ((IList<object>)instrumentsResponses).Add(instrumentsResponse);
            }
        }
        for (object i = 0; isLessThan(i, getArrayLength(instrumentsResponses)); postFixIncrement(ref i))
        {
            object instrumentsResult = this.safeValue(getValue(instrumentsResponses, i), "result", new List<object>() {});
            for (object k = 0; isLessThan(k, getArrayLength(instrumentsResult)); postFixIncrement(ref k))
            {
                object market = getValue(instrumentsResult, k);
                object kind = this.safeString(market, "kind");
                object isSpot = (isEqual(kind, "spot"));
                object id = this.safeString(market, "instrument_name");
                object baseId = this.safeString(market, "base_currency");
                object quoteId = this.safeString(market, "counter_currency");
                object settleId = this.safeString(market, "settlement_currency");
                object bs = this.safeCurrencyCode(baseId);
                object quote = this.safeCurrencyCode(quoteId);
                object settle = this.safeCurrencyCode(settleId);
                object settlementPeriod = this.safeValue(market, "settlement_period");
                object swap = (isEqual(settlementPeriod, "perpetual"));
                object future = !isTrue(swap) && isTrue((isGreaterThanOrEqual(getIndexOf(kind, "future"), 0)));
                object option = (isGreaterThanOrEqual(getIndexOf(kind, "option"), 0));
                object isComboMarket = isGreaterThanOrEqual(getIndexOf(kind, "combo"), 0);
                object expiry = this.safeInteger(market, "expiration_timestamp");
                object strike = null;
                object optionType = null;
                object symbol = id;
                object type = "swap";
                if (isTrue(future))
                {
                    type = "future";
                } else if (isTrue(option))
                {
                    type = "option";
                } else if (isTrue(isSpot))
                {
                    type = "spot";
                }
                if (isTrue(isSpot))
                {
                    symbol = add(add(bs, "/"), quote);
                } else if (!isTrue(isComboMarket))
                {
                    symbol = add(add(add(add(bs, "/"), quote), ":"), settle);
                    if (isTrue(isTrue(option) || isTrue(future)))
                    {
                        symbol = add(add(symbol, "-"), this.yymmdd(expiry, ""));
                        if (isTrue(option))
                        {
                            strike = this.safeNumber(market, "strike");
                            optionType = this.safeString(market, "option_type");
                            object letter = ((bool) isTrue((isEqual(optionType, "call")))) ? "C" : "P";
                            symbol = add(add(add(add(symbol, "-"), this.numberToString(strike)), "-"), letter);
                        }
                    }
                }
                object parsedMarketValue = this.safeValue(parsedMarkets, symbol);
                if (isTrue(parsedMarketValue))
                {
                    continue;
                }
                ((IDictionary<string,object>)parsedMarkets)[(string)symbol] = true;
                object minTradeAmount = this.safeNumber(market, "min_trade_amount");
                object tickSize = this.safeNumber(market, "tick_size");
                ((IList<object>)result).Add(new Dictionary<string, object>() {
                    { "id", id },
                    { "symbol", symbol },
                    { "base", bs },
                    { "quote", quote },
                    { "settle", settle },
                    { "baseId", baseId },
                    { "quoteId", quoteId },
                    { "settleId", settleId },
                    { "type", type },
                    { "spot", isSpot },
                    { "margin", false },
                    { "swap", swap },
                    { "future", future },
                    { "option", option },
                    { "active", this.safeValue(market, "is_active") },
                    { "contract", !isTrue(isSpot) },
                    { "linear", (isEqual(settle, quote)) },
                    { "inverse", (!isEqual(settle, quote)) },
                    { "taker", this.safeNumber(market, "taker_commission") },
                    { "maker", this.safeNumber(market, "maker_commission") },
                    { "contractSize", this.safeNumber(market, "contract_size") },
                    { "expiry", expiry },
                    { "expiryDatetime", this.iso8601(expiry) },
                    { "strike", strike },
                    { "optionType", optionType },
                    { "precision", new Dictionary<string, object>() {
                        { "amount", minTradeAmount },
                        { "price", tickSize },
                    } },
                    { "limits", new Dictionary<string, object>() {
                        { "leverage", new Dictionary<string, object>() {
                            { "min", null },
                            { "max", null },
                        } },
                        { "amount", new Dictionary<string, object>() {
                            { "min", minTradeAmount },
                            { "max", null },
                        } },
                        { "price", new Dictionary<string, object>() {
                            { "min", tickSize },
                            { "max", null },
                        } },
                        { "cost", new Dictionary<string, object>() {
                            { "min", null },
                            { "max", null },
                        } },
                    } },
                    { "created", this.safeInteger(market, "creation_timestamp") },
                    { "info", market },
                });
            }
        }
        return result;
    }

    public override object parseBalance(object balance)
    {
        object result = new Dictionary<string, object>() {
            { "info", balance },
        };
        object currencyId = this.safeString(balance, "currency");
        object currencyCode = this.safeCurrencyCode(currencyId);
        object account = this.account();
        ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "available_funds");
        ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "maintenance_margin");
        ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "equity");
        ((IDictionary<string,object>)result)[(string)currencyCode] = account;
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://docs.deribit.com/#private-get_account_summary
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object code = this.codeFromOptions("fetchBalance", parameters);
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object response = await this.privateGetGetAccountSummary(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "total_pl": 0,
        //             "session_upl": 0,
        //             "session_rpl": 0,
        //             "session_funding": 0,
        //             "portfolio_margining_enabled": false,
        //             "options_vega": 0,
        //             "options_theta": 0,
        //             "options_session_upl": 0,
        //             "options_session_rpl": 0,
        //             "options_pl": 0,
        //             "options_gamma": 0,
        //             "options_delta": 0,
        //             "margin_balance": 0.00062359,
        //             "maintenance_margin": 0,
        //             "limits": {
        //                 "non_matching_engine_burst": 300,
        //                 "non_matching_engine": 200,
        //                 "matching_engine_burst": 20,
        //                 "matching_engine": 2
        //             },
        //             "initial_margin": 0,
        //             "futures_session_upl": 0,
        //             "futures_session_rpl": 0,
        //             "futures_pl": 0,
        //             "equity": 0.00062359,
        //             "deposit_address": "13tUtNsJSZa1F5GeCmwBywVrymHpZispzw",
        //             "delta_total": 0,
        //             "currency": "BTC",
        //             "balance": 0.00062359,
        //             "available_withdrawal_funds": 0.00062359,
        //             "available_funds": 0.00062359
        //         },
        //         "usIn": 1583775838115975,
        //         "usOut": 1583775838116520,
        //         "usDiff": 545,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        return this.parseBalance(result);
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name deribit#createDepositAddress
        * @description create a currency deposit address
        * @see https://docs.deribit.com/#private-create_deposit_address
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object response = await this.privateGetCreateDepositAddress(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 7538,
        //         "result": {
        //             "address": "2N8udZGBc1hLRCFsU9kGwMPpmYUwMFTuCwB",
        //             "creation_timestamp": 1550575165170,
        //             "currency": "BTC",
        //             "type": "deposit"
        //         }
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object address = this.safeString(result, "address");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "currency", code },
            { "address", address },
            { "tag", null },
            { "info", response },
        };
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @see https://docs.deribit.com/#private-get_current_deposit_address
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object response = await this.privateGetGetCurrentDepositAddress(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "type": "deposit",
        //             "status": "ready",
        //             "requires_confirmation": true,
        //             "currency": "BTC",
        //             "creation_timestamp": 1514694684651,
        //             "address": "13tUtNsJSZa1F5GeCmwBywVrymHpZispzw"
        //         },
        //         "usIn": 1583785137274288,
        //         "usOut": 1583785137274454,
        //         "usDiff": 166,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object address = this.safeString(result, "address");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "currency", code },
            { "address", address },
            { "tag", null },
            { "network", null },
            { "info", response },
        };
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // fetchTicker /public/ticker
        //
        //     {
        //         "timestamp": 1583778859480,
        //         "stats": { volume: 60627.57263769, low: 7631.5, high: 8311.5 },
        //         "state": "open",
        //         "settlement_price": 7903.21,
        //         "open_interest": 111543850,
        //         "min_price": 7634,
        //         "max_price": 7866.51,
        //         "mark_price": 7750.02,
        //         "last_price": 7750.5,
        //         "instrument_name": "BTC-PERPETUAL",
        //         "index_price": 7748.01,
        //         "funding_8h": 0.0000026,
        //         "current_funding": 0,
        //         "best_bid_price": 7750,
        //         "best_bid_amount": 19470,
        //         "best_ask_price": 7750.5,
        //         "best_ask_amount": 343280
        //     }
        //
        // fetchTicker /public/get_book_summary_by_instrument
        // fetchTickers /public/get_book_summary_by_currency
        //
        //     {
        //         "volume": 124.1,
        //         "underlying_price": 7856.445926872601,
        //         "underlying_index": "SYN.BTC-10MAR20",
        //         "quote_currency": "USD",
        //         "open_interest": 121.8,
        //         "mid_price": 0.01975,
        //         "mark_price": 0.01984559,
        //         "low": 0.0095,
        //         "last": 0.0205,
        //         "interest_rate": 0,
        //         "instrument_name": "BTC-10MAR20-7750-C",
        //         "high": 0.0295,
        //         "estimated_delivery_price": 7856.29,
        //         "creation_timestamp": 1583783678366,
        //         "bid_price": 0.0185,
        //         "base_currency": "BTC",
        //         "ask_price": 0.021
        //     },
        //
        object timestamp = this.safeInteger2(ticker, "timestamp", "creation_timestamp");
        object marketId = this.safeString(ticker, "instrument_name");
        object symbol = this.safeSymbol(marketId, market);
        object last = this.safeString2(ticker, "last_price", "last");
        object stats = this.safeValue(ticker, "stats", ticker);
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString2(stats, "high", "max_price") },
            { "low", this.safeString2(stats, "low", "min_price") },
            { "bid", this.safeString2(ticker, "best_bid_price", "bid_price") },
            { "bidVolume", this.safeString(ticker, "best_bid_amount") },
            { "ask", this.safeString2(ticker, "best_ask_price", "ask_price") },
            { "askVolume", this.safeString(ticker, "best_ask_amount") },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", null },
            { "quoteVolume", this.safeString(stats, "volume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://docs.deribit.com/#public-ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "timestamp": 1583778859480,
        //             "stats": { volume: 60627.57263769, low: 7631.5, high: 8311.5 },
        //             "state": "open",
        //             "settlement_price": 7903.21,
        //             "open_interest": 111543850,
        //             "min_price": 7634,
        //             "max_price": 7866.51,
        //             "mark_price": 7750.02,
        //             "last_price": 7750.5,
        //             "instrument_name": "BTC-PERPETUAL",
        //             "index_price": 7748.01,
        //             "funding_8h": 0.0000026,
        //             "current_funding": 0,
        //             "best_bid_price": 7750,
        //             "best_bid_amount": 19470,
        //             "best_ask_price": 7750.5,
        //             "best_ask_amount": 343280
        //         },
        //         "usIn": 1583778859483941,
        //         "usOut": 1583778859484075,
        //         "usDiff": 134,
        //         "testnet": false
        //     }
        //
        object result = this.safeDict(response, "result");
        return this.parseTicker(result, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://docs.deribit.com/#public-get_book_summary_by_currency
        * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.code] *required* the currency code to fetch the tickers for, eg. 'BTC', 'ETH'
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object code = this.safeString2(parameters, "code", "currency");
        parameters = this.omit(parameters, new List<object>() {"code"});
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchTickers requires a currency/code (eg: BTC/ETH/USDT) parameter to fetch tickers for")) ;
        }
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object response = await this.publicGetGetBookSummaryByCurrency(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": [
        //             {
        //                 "volume": 124.1,
        //                 "underlying_price": 7856.445926872601,
        //                 "underlying_index": "SYN.BTC-10MAR20",
        //                 "quote_currency": "USD",
        //                 "open_interest": 121.8,
        //                 "mid_price": 0.01975,
        //                 "mark_price": 0.01984559,
        //                 "low": 0.0095,
        //                 "last": 0.0205,
        //                 "interest_rate": 0,
        //                 "instrument_name": "BTC-10MAR20-7750-C",
        //                 "high": 0.0295,
        //                 "estimated_delivery_price": 7856.29,
        //                 "creation_timestamp": 1583783678366,
        //                 "bid_price": 0.0185,
        //                 "base_currency": "BTC",
        //                 "ask_price": 0.021
        //             },
        //         ],
        //         "usIn": 1583783678361966,
        //         "usOut": 1583783678372069,
        //         "usDiff": 10103,
        //         "testnet": false
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        object tickers = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(result)); postFixIncrement(ref i))
        {
            object ticker = this.parseTicker(getValue(result, i));
            object symbol = getValue(ticker, "symbol");
            ((IDictionary<string,object>)tickers)[(string)symbol] = ticker;
        }
        return this.filterByArrayTickers(tickers, "symbol", symbols);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://docs.deribit.com/#public-get_tradingview_chart_data
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {boolean} [params.paginate] whether to paginate the results, set to false by default
        * @param {int} [params.until] the latest time in ms to fetch ohlcv for
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchOHLCV", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDeterministic("fetchOHLCV", symbol, since, limit, timeframe, parameters, 5000);
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "resolution", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        object duration = this.parseTimeframe(timeframe);
        object now = this.milliseconds();
        if (isTrue(isEqual(since, null)))
        {
            if (isTrue(isEqual(limit, null)))
            {
                limit = 1000; // at max, it provides 5000 bars, but we set generous default here
            }
            ((IDictionary<string,object>)request)["start_timestamp"] = subtract(now, multiply(multiply((subtract(limit, 1)), duration), 1000));
            ((IDictionary<string,object>)request)["end_timestamp"] = now;
        } else
        {
            since = mathMax(subtract(since, 1), 0);
            ((IDictionary<string,object>)request)["start_timestamp"] = since;
            if (isTrue(isEqual(limit, null)))
            {
                ((IDictionary<string,object>)request)["end_timestamp"] = now;
            } else
            {
                ((IDictionary<string,object>)request)["end_timestamp"] = this.sum(since, multiply(multiply(limit, duration), 1000));
            }
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, "until");
            ((IDictionary<string,object>)request)["end_timestamp"] = until;
        }
        object response = await this.publicGetGetTradingviewChartData(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "volume": [ 3.6680847969999992, 22.682721123, 3.011587939, 0 ],
        //             "ticks": [ 1583916960000, 1583917020000, 1583917080000, 1583917140000 ],
        //             "status": "ok",
        //             "open": [ 7834, 7839, 7833.5, 7833 ],
        //             "low": [ 7834, 7833.5, 7832.5, 7833 ],
        //             "high": [ 7839.5, 7839, 7833.5, 7833 ],
        //             "cost": [ 28740, 177740, 23590, 0 ],
        //             "close": [ 7839.5, 7833.5, 7833, 7833 ]
        //         },
        //         "usIn": 1583917166709801,
        //         "usOut": 1583917166710175,
        //         "usDiff": 374,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object ohlcvs = this.convertTradingViewToOHLCV(result, "ticks", "open", "high", "low", "close", "volume", true);
        return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //      {
        //          "trade_seq":132564271,
        //          "trade_id":"195402220",
        //          "timestamp":1639684927932,
        //          "tick_direction":0,
        //          "price":47946.5,
        //          "mark_price":47944.13,
        //          "instrument_name":"BTC-PERPETUAL",
        //          "index_price":47925.45,
        //          "direction":"buy",
        //          "amount":580.0
        //      }
        //
        //
        // fetchMyTrades, fetchOrderTrades (private)
        //
        //     {
        //         "trade_seq": 3,
        //         "trade_id": "ETH-34066",
        //         "timestamp": 1550219814585,
        //         "tick_direction": 1,
        //         "state": "open",
        //         "self_trade": false,
        //         "reduce_only": false,
        //         "price": 0.04,
        //         "post_only": false,
        //         "order_type": "limit",
        //         "order_id": "ETH-334607",
        //         "matching_id": null,
        //         "liquidity": "M",
        //         "iv": 56.83,
        //         "instrument_name": "ETH-22FEB19-120-C",
        //         "index_price": 121.37,
        //         "fee_currency": "ETH",
        //         "fee": 0.0011,
        //         "direction": "buy",
        //         "amount": 11
        //     }
        //
        object id = this.safeString(trade, "trade_id");
        object marketId = this.safeString(trade, "instrument_name");
        object symbol = this.safeSymbol(marketId, market);
        object timestamp = this.safeInteger(trade, "timestamp");
        object side = this.safeString(trade, "direction");
        object priceString = this.safeString(trade, "price");
        market = this.safeMarket(marketId, market);
        // Amount for inverse perpetual and futures is in USD which in ccxt is the cost
        // For options amount and linear is in corresponding cryptocurrency contracts, e.g., BTC or ETH
        object amount = this.safeString(trade, "amount");
        object cost = Precise.stringMul(amount, priceString);
        if (isTrue(getValue(market, "inverse")))
        {
            cost = Precise.stringDiv(amount, priceString);
        }
        object liquidity = this.safeString(trade, "liquidity");
        object takerOrMaker = null;
        if (isTrue(!isEqual(liquidity, null)))
        {
            // M = maker, T = taker, MT = both
            takerOrMaker = ((bool) isTrue((isEqual(liquidity, "M")))) ? "maker" : "taker";
        }
        object feeCostString = this.safeString(trade, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyId = this.safeString(trade, "fee_currency");
            object feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrencyCode },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "order", this.safeString(trade, "order_id") },
            { "type", this.safeString(trade, "order_type") },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", priceString },
            { "amount", amount },
            { "cost", cost },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchTrades
        * @see https://docs.deribit.com/#public-get_last_trades_by_instrument
        * @see https://docs.deribit.com/#public-get_last_trades_by_instrument_and_time
        * @description get the list of most recent trades for a particular symbol.
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch trades for
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "include_old", true },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_timestamp"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = mathMin(limit, 1000); // default 10
        }
        object until = this.safeInteger2(parameters, "until", "end_timestamp");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_timestamp"] = until;
        }
        object response = null;
        if (isTrue(isTrue((isEqual(since, null))) && !isTrue((inOp(request, "end_timestamp")))))
        {
            response = await this.publicGetGetLastTradesByInstrument(this.extend(request, parameters));
        } else
        {
            response = await this.publicGetGetLastTradesByInstrumentAndTime(this.extend(request, parameters));
        }
        //
        //      {
        //          "jsonrpc":"2.0",
        //          "result": {
        //              "trades": [
        //                  {
        //                      "trade_seq":132564271,
        //                      "trade_id":"195402220",
        //                      "timestamp":1639684927932,
        //                      "tick_direction":0,
        //                      "price":47946.5,
        //                      "mark_price":47944.13,
        //                      "instrument_name":"BTC-PERPETUAL",
        //                      "index_price":47925.45,
        //                      "direction":"buy","amount":580.0
        //                  }
        //              ],
        //              "has_more":true
        //          },
        //          "usIn":1639684931934671,
        //          "usOut":1639684931935337,
        //          "usDiff":666,
        //          "testnet":false
        //      }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object trades = this.safeList(result, "trades", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://docs.deribit.com/#private-get_account_summary
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object code = this.codeFromOptions("fetchTradingFees", parameters);
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "extended", true },
        };
        object response = await this.privateGetGetAccountSummary(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "total_pl": 0,
        //             "session_upl": 0,
        //             "session_rpl": 0,
        //             "session_funding": 0,
        //             "portfolio_margining_enabled": false,
        //             "options_vega": 0,
        //             "options_theta": 0,
        //             "options_session_upl": 0,
        //             "options_session_rpl": 0,
        //             "options_pl": 0,
        //             "options_gamma": 0,
        //             "options_delta": 0,
        //             "margin_balance": 0.00062359,
        //             "maintenance_margin": 0,
        //             "limits": {
        //                 "non_matching_engine_burst": 300,
        //                 "non_matching_engine": 200,
        //                 "matching_engine_burst": 20,
        //                 "matching_engine": 2
        //             },
        //             "initial_margin": 0,
        //             "futures_session_upl": 0,
        //             "futures_session_rpl": 0,
        //             "futures_pl": 0,
        //             "equity": 0.00062359,
        //             "deposit_address": "13tUtNsJSZa1F5GeCmwBywVrymHpZispzw",
        //             "delta_total": 0,
        //             "currency": "BTC",
        //             "balance": 0.00062359,
        //             "available_withdrawal_funds": 0.00062359,
        //             "available_funds": 0.00062359,
        //             "fees": [
        //                 "currency": '',
        //                 "instrument_type": "perpetual",
        //                 "fee_type": "relative",
        //                 "maker_fee": 0,
        //                 "taker_fee": 0,
        //             ],
        //         },
        //         "usIn": 1583775838115975,
        //         "usOut": 1583775838116520,
        //         "usDiff": 545,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object fees = this.safeValue(result, "fees", new List<object>() {});
        object perpetualFee = new Dictionary<string, object>() {};
        object futureFee = new Dictionary<string, object>() {};
        object optionFee = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(fees)); postFixIncrement(ref i))
        {
            object fee = getValue(fees, i);
            object instrumentType = this.safeString(fee, "instrument_type");
            if (isTrue(isEqual(instrumentType, "future")))
            {
                futureFee = new Dictionary<string, object>() {
                    { "info", fee },
                    { "maker", this.safeNumber(fee, "maker_fee") },
                    { "taker", this.safeNumber(fee, "taker_fee") },
                };
            } else if (isTrue(isEqual(instrumentType, "perpetual")))
            {
                perpetualFee = new Dictionary<string, object>() {
                    { "info", fee },
                    { "maker", this.safeNumber(fee, "maker_fee") },
                    { "taker", this.safeNumber(fee, "taker_fee") },
                };
            } else if (isTrue(isEqual(instrumentType, "option")))
            {
                optionFee = new Dictionary<string, object>() {
                    { "info", fee },
                    { "maker", this.safeNumber(fee, "maker_fee") },
                    { "taker", this.safeNumber(fee, "taker_fee") },
                };
            }
        }
        object parsedFees = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            object market = this.market(symbol);
            object fee = new Dictionary<string, object>() {
                { "info", market },
                { "symbol", symbol },
                { "percentage", true },
                { "tierBased", true },
                { "maker", getValue(market, "maker") },
                { "taker", getValue(market, "taker") },
            };
            if (isTrue(getValue(market, "swap")))
            {
                fee = this.extend(fee, perpetualFee);
            } else if (isTrue(getValue(market, "future")))
            {
                fee = this.extend(fee, futureFee);
            } else if (isTrue(getValue(market, "option")))
            {
                fee = this.extend(fee, optionFee);
            }
            ((IDictionary<string,object>)parsedFees)[(string)symbol] = fee;
        }
        return parsedFees;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://docs.deribit.com/#public-get_order_book
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["depth"] = limit;
        }
        object response = await this.publicGetGetOrderBook(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "timestamp": 1583781354740,
        //             "stats": { volume: 61249.66735634, low: 7631.5, high: 8311.5 },
        //             "state": "open",
        //             "settlement_price": 7903.21,
        //             "open_interest": 111536690,
        //             "min_price": 7695.13,
        //             "max_price": 7929.49,
        //             "mark_price": 7813.06,
        //             "last_price": 7814.5,
        //             "instrument_name": "BTC-PERPETUAL",
        //             "index_price": 7810.12,
        //             "funding_8h": 0.0000031,
        //             "current_funding": 0,
        //             "change_id": 17538025952,
        //             "bids": [
        //                 [7814, 351820],
        //                 [7813.5, 207490],
        //                 [7813, 32160],
        //             ],
        //             "best_bid_price": 7814,
        //             "best_bid_amount": 351820,
        //             "best_ask_price": 7814.5,
        //             "best_ask_amount": 11880,
        //             "asks": [
        //                 [7814.5, 11880],
        //                 [7815, 18100],
        //                 [7815.5, 2640],
        //             ],
        //         },
        //         "usIn": 1583781354745804,
        //         "usOut": 1583781354745932,
        //         "usDiff": 128,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object timestamp = this.safeInteger(result, "timestamp");
        object nonce = this.safeInteger(result, "change_id");
        object orderbook = this.parseOrderBook(result, getValue(market, "symbol"), timestamp);
        ((IDictionary<string,object>)orderbook)["nonce"] = nonce;
        return orderbook;
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "open", "open" },
            { "cancelled", "canceled" },
            { "filled", "closed" },
            { "rejected", "rejected" },
            { "untriggered", "open" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseTimeInForce(object timeInForce)
    {
        object timeInForces = new Dictionary<string, object>() {
            { "good_til_cancelled", "GTC" },
            { "fill_or_kill", "FOK" },
            { "immediate_or_cancel", "IOC" },
        };
        return this.safeString(timeInForces, timeInForce, timeInForce);
    }

    public virtual object parseOrderType(object orderType)
    {
        object orderTypes = new Dictionary<string, object>() {
            { "stop_limit", "limit" },
            { "take_limit", "limit" },
            { "stop_market", "market" },
            { "take_market", "market" },
        };
        return this.safeString(orderTypes, orderType, orderType);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //
        //     {
        //         "time_in_force": "good_til_cancelled",
        //         "reduce_only": false,
        //         "profit_loss": 0,
        //         "price": "market_price",
        //         "post_only": false,
        //         "order_type": "market",
        //         "order_state": "filled",
        //         "order_id": "ETH-349249",
        //         "max_show": 40,
        //         "last_update_timestamp": 1550657341322,
        //         "label": "market0000234",
        //         "is_liquidation": false,
        //         "instrument_name": "ETH-PERPETUAL",
        //         "filled_amount": 40,
        //         "direction": "buy",
        //         "creation_timestamp": 1550657341322,
        //         "commission": 0.000139,
        //         "average_price": 143.81,
        //         "api": true,
        //         "amount": 40,
        //         "trades": [], // injected by createOrder
        //     }
        //
        object marketId = this.safeString(order, "instrument_name");
        market = this.safeMarket(marketId, market);
        object timestamp = this.safeInteger(order, "creation_timestamp");
        object lastUpdate = this.safeInteger(order, "last_update_timestamp");
        object id = this.safeString(order, "order_id");
        object priceString = this.safeString(order, "price");
        if (isTrue(isEqual(priceString, "market_price")))
        {
            priceString = null;
        }
        object averageString = this.safeString(order, "average_price");
        // Inverse contracts amount is in USD which in ccxt is the cost
        // For options and Linear contracts amount is in corresponding cryptocurrency, e.g., BTC or ETH
        object filledString = this.safeString(order, "filled_amount");
        object amount = this.safeString(order, "amount");
        object cost = Precise.stringMul(filledString, averageString);
        if (isTrue(getValue(market, "inverse")))
        {
            if (isTrue(!isEqual(averageString, "0")))
            {
                cost = Precise.stringDiv(amount, averageString);
            }
        }
        object lastTradeTimestamp = null;
        if (isTrue(!isEqual(filledString, null)))
        {
            object isFilledPositive = Precise.stringGt(filledString, "0");
            if (isTrue(isFilledPositive))
            {
                lastTradeTimestamp = lastUpdate;
            }
        }
        object status = this.parseOrderStatus(this.safeString(order, "order_state"));
        object side = this.safeStringLower(order, "direction");
        object feeCostString = this.safeString(order, "commission");
        object fee = null;
        if (isTrue(!isEqual(feeCostString, null)))
        {
            feeCostString = Precise.stringAbs(feeCostString);
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", getValue(market, "base") },
            };
        }
        object rawType = this.safeString(order, "order_type");
        object type = this.parseOrderType(rawType);
        // injected in createOrder
        object trades = this.safeValue(order, "trades");
        object timeInForce = this.parseTimeInForce(this.safeString(order, "time_in_force"));
        object stopPrice = this.safeValue(order, "stop_price");
        object postOnly = this.safeValue(order, "post_only");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", lastTradeTimestamp },
            { "symbol", getValue(market, "symbol") },
            { "type", type },
            { "timeInForce", timeInForce },
            { "postOnly", postOnly },
            { "side", side },
            { "price", priceString },
            { "stopPrice", stopPrice },
            { "triggerPrice", stopPrice },
            { "amount", amount },
            { "cost", cost },
            { "average", averageString },
            { "filled", filledString },
            { "remaining", null },
            { "status", status },
            { "fee", fee },
            { "trades", trades },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://docs.deribit.com/#private-get_order_state
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object response = await this.privateGetGetOrderState(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 4316,
        //         "result": {
        //             "time_in_force": "good_til_cancelled",
        //             "reduce_only": false,
        //             "profit_loss": 0.051134,
        //             "price": 118.94,
        //             "post_only": false,
        //             "order_type": "limit",
        //             "order_state": "filled",
        //             "order_id": "ETH-331562",
        //             "max_show": 37,
        //             "last_update_timestamp": 1550219810944,
        //             "label": "",
        //             "is_liquidation": false,
        //             "instrument_name": "ETH-PERPETUAL",
        //             "filled_amount": 37,
        //             "direction": "sell",
        //             "creation_timestamp": 1550219749176,
        //             "commission": 0.000031,
        //             "average_price": 118.94,
        //             "api": false,
        //             "amount": 37
        //         }
        //     }
        //
        object result = this.safeDict(response, "result");
        return this.parseOrder(result, market);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#createOrder
        * @description create a trade order
        * @see https://docs.deribit.com/#private-buy
        * @see https://docs.deribit.com/#private-sell
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much you want to trade in units of the base currency. For inverse perpetual and futures the amount is in the quote currency USD. For options it is in the underlying assets base currency.
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.trigger] the trigger type 'index_price', 'mark_price', or 'last_price', default is 'last_price'
        * @param {float} [params.trailingAmount] the quote amount to trail away from the current market price
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "amount", this.amountToPrecision(symbol, amount) },
            { "type", type },
        };
        object trigger = this.safeString(parameters, "trigger", "last_price");
        object timeInForce = this.safeStringUpper(parameters, "timeInForce");
        object reduceOnly = this.safeValue2(parameters, "reduceOnly", "reduce_only");
        // only stop loss sell orders are allowed when price crossed from above
        object stopLossPrice = this.safeValue(parameters, "stopLossPrice");
        // only take profit buy orders are allowed when price crossed from below
        object takeProfitPrice = this.safeValue(parameters, "takeProfitPrice");
        object trailingAmount = this.safeString2(parameters, "trailingAmount", "trigger_offset");
        object isTrailingAmountOrder = !isEqual(trailingAmount, null);
        object isStopLimit = isEqual(type, "stop_limit");
        object isStopMarket = isEqual(type, "stop_market");
        object isTakeLimit = isEqual(type, "take_limit");
        object isTakeMarket = isEqual(type, "take_market");
        object isStopLossOrder = isTrue(isTrue(isStopLimit) || isTrue(isStopMarket)) || isTrue((!isEqual(stopLossPrice, null)));
        object isTakeProfitOrder = isTrue(isTrue(isTakeLimit) || isTrue(isTakeMarket)) || isTrue((!isEqual(takeProfitPrice, null)));
        if (isTrue(isTrue(isStopLossOrder) && isTrue(isTakeProfitOrder)))
        {
            throw new InvalidOrder ((string)add(this.id, " createOrder () only allows one of stopLossPrice or takeProfitPrice to be specified")) ;
        }
        object isStopOrder = isTrue(isStopLossOrder) || isTrue(isTakeProfitOrder);
        object isLimitOrder = isTrue(isTrue((isEqual(type, "limit"))) || isTrue(isStopLimit)) || isTrue(isTakeLimit);
        object isMarketOrder = isTrue(isTrue((isEqual(type, "market"))) || isTrue(isStopMarket)) || isTrue(isTakeMarket);
        object exchangeSpecificPostOnly = this.safeValue(parameters, "post_only");
        object postOnly = this.isPostOnly(isMarketOrder, exchangeSpecificPostOnly, parameters);
        if (isTrue(isLimitOrder))
        {
            ((IDictionary<string,object>)request)["type"] = "limit";
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        } else
        {
            ((IDictionary<string,object>)request)["type"] = "market";
        }
        if (isTrue(isTrailingAmountOrder))
        {
            ((IDictionary<string,object>)request)["trigger"] = trigger;
            ((IDictionary<string,object>)request)["type"] = "trailing_stop";
            ((IDictionary<string,object>)request)["trigger_offset"] = this.parseToNumeric(trailingAmount);
        } else if (isTrue(isStopOrder))
        {
            object triggerPrice = ((bool) isTrue((!isEqual(stopLossPrice, null)))) ? stopLossPrice : takeProfitPrice;
            ((IDictionary<string,object>)request)["trigger_price"] = this.priceToPrecision(symbol, triggerPrice);
            ((IDictionary<string,object>)request)["trigger"] = trigger;
            if (isTrue(isStopLossOrder))
            {
                if (isTrue(isMarketOrder))
                {
                    // stop_market (sell only)
                    ((IDictionary<string,object>)request)["type"] = "stop_market";
                } else
                {
                    // stop_limit (sell only)
                    ((IDictionary<string,object>)request)["type"] = "stop_limit";
                }
            } else
            {
                if (isTrue(isMarketOrder))
                {
                    // take_market (buy only)
                    ((IDictionary<string,object>)request)["type"] = "take_market";
                } else
                {
                    // take_limit (buy only)
                    ((IDictionary<string,object>)request)["type"] = "take_limit";
                }
            }
        }
        if (isTrue(reduceOnly))
        {
            ((IDictionary<string,object>)request)["reduce_only"] = true;
        }
        if (isTrue(postOnly))
        {
            ((IDictionary<string,object>)request)["post_only"] = true;
            ((IDictionary<string,object>)request)["reject_post_only"] = true;
        }
        if (isTrue(!isEqual(timeInForce, null)))
        {
            if (isTrue(isEqual(timeInForce, "GTC")))
            {
                ((IDictionary<string,object>)request)["time_in_force"] = "good_til_cancelled";
            }
            if (isTrue(isEqual(timeInForce, "IOC")))
            {
                ((IDictionary<string,object>)request)["time_in_force"] = "immediate_or_cancel";
            }
            if (isTrue(isEqual(timeInForce, "FOK")))
            {
                ((IDictionary<string,object>)request)["time_in_force"] = "fill_or_kill";
            }
        }
        parameters = this.omit(parameters, new List<object>() {"timeInForce", "stopLossPrice", "takeProfitPrice", "postOnly", "reduceOnly", "trailingAmount"});
        object response = null;
        if (isTrue(isEqual(this.capitalize(side), "Buy")))
        {
            response = await this.privateGetBuy(this.extend(request, parameters));
        } else
        {
            response = await this.privateGetSell(this.extend(request, parameters));
        }
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 5275,
        //         "result": {
        //             "trades": [
        //                 {
        //                     "trade_seq": 14151,
        //                     "trade_id": "ETH-37435",
        //                     "timestamp": 1550657341322,
        //                     "tick_direction": 2,
        //                     "state": "closed",
        //                     "self_trade": false,
        //                     "price": 143.81,
        //                     "order_type": "market",
        //                     "order_id": "ETH-349249",
        //                     "matching_id": null,
        //                     "liquidity": "T",
        //                     "label": "market0000234",
        //                     "instrument_name": "ETH-PERPETUAL",
        //                     "index_price": 143.73,
        //                     "fee_currency": "ETH",
        //                     "fee": 0.000139,
        //                     "direction": "buy",
        //                     "amount": 40
        //                 }
        //             ],
        //             "order": {
        //                 "time_in_force": "good_til_cancelled",
        //                 "reduce_only": false,
        //                 "profit_loss": 0,
        //                 "price": "market_price",
        //                 "post_only": false,
        //                 "order_type": "market",
        //                 "order_state": "filled",
        //                 "order_id": "ETH-349249",
        //                 "max_show": 40,
        //                 "last_update_timestamp": 1550657341322,
        //                 "label": "market0000234",
        //                 "is_liquidation": false,
        //                 "instrument_name": "ETH-PERPETUAL",
        //                 "filled_amount": 40,
        //                 "direction": "buy",
        //                 "creation_timestamp": 1550657341322,
        //                 "commission": 0.000139,
        //                 "average_price": 143.81,
        //                 "api": true,
        //                 "amount": 40
        //             }
        //         }
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object order = this.safeValue(result, "order");
        object trades = this.safeValue(result, "trades", new List<object>() {});
        ((IDictionary<string,object>)order)["trades"] = trades;
        return this.parseOrder(order, market);
    }

    public async override Task<object> editOrder(object id, object symbol, object type, object side, object amount = null, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#editOrder
        * @description edit a trade order
        * @see https://docs.deribit.com/#private-edit
        * @param {string} id edit order id
        * @param {string} [symbol] unified symbol of the market to edit an order in
        * @param {string} [type] 'market' or 'limit'
        * @param {string} [side] 'buy' or 'sell'
        * @param {float} amount how much you want to trade in units of the base currency, inverse swap and future use the quote currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the base currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {float} [params.trailingAmount] the quote amount to trail away from the current market price
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(amount, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " editOrder() requires an amount argument")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
            { "amount", this.amountToPrecision(symbol, amount) },
        };
        if (isTrue(!isEqual(price, null)))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        object trailingAmount = this.safeString2(parameters, "trailingAmount", "trigger_offset");
        object isTrailingAmountOrder = !isEqual(trailingAmount, null);
        if (isTrue(isTrailingAmountOrder))
        {
            ((IDictionary<string,object>)request)["trigger_offset"] = this.parseToNumeric(trailingAmount);
            parameters = this.omit(parameters, "trigger_offset");
        }
        object response = await this.privateGetEdit(this.extend(request, parameters));
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object order = this.safeValue(result, "order");
        object trades = this.safeValue(result, "trades", new List<object>() {});
        ((IDictionary<string,object>)order)["trades"] = trades;
        return this.parseOrder(order);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#cancelOrder
        * @description cancels an open order
        * @see https://docs.deribit.com/#private-cancel
        * @param {string} id order id
        * @param {string} symbol not used by deribit cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        object response = await this.privateGetCancel(this.extend(request, parameters));
        object result = this.safeDict(response, "result", new Dictionary<string, object>() {});
        return this.parseOrder(result);
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#cancelAllOrders
        * @description cancel all open orders
        * @see https://docs.deribit.com/#private-cancel_all
        * @see https://docs.deribit.com/#private-cancel_all_by_instrument
        * @param {string} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object response = null;
        if (isTrue(isEqual(symbol, null)))
        {
            response = await this.privateGetCancelAll(this.extend(request, parameters));
        } else
        {
            object market = this.market(symbol);
            ((IDictionary<string,object>)request)["instrument_name"] = getValue(market, "id");
            response = await this.privateGetCancelAllByInstrument(this.extend(request, parameters));
        }
        return response;
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://docs.deribit.com/#private-get_open_orders_by_currency
        * @see https://docs.deribit.com/#private-get_open_orders_by_instrument
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        object response = null;
        if (isTrue(isEqual(symbol, null)))
        {
            object code = this.codeFromOptions("fetchOpenOrders", parameters);
            object currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
            response = await this.privateGetGetOpenOrdersByCurrency(this.extend(request, parameters));
        } else
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["instrument_name"] = getValue(market, "id");
            response = await this.privateGetGetOpenOrdersByInstrument(this.extend(request, parameters));
        }
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseOrders(result, market, since, limit);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://docs.deribit.com/#private-get_order_history_by_currency
        * @see https://docs.deribit.com/#private-get_order_history_by_instrument
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        object response = null;
        if (isTrue(isEqual(symbol, null)))
        {
            object code = this.codeFromOptions("fetchClosedOrders", parameters);
            object currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
            response = await this.privateGetGetOrderHistoryByCurrency(this.extend(request, parameters));
        } else
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["instrument_name"] = getValue(market, "id");
            response = await this.privateGetGetOrderHistoryByInstrument(this.extend(request, parameters));
        }
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseOrders(result, market, since, limit);
    }

    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @see https://docs.deribit.com/#private-get_user_trades_by_order
        * @param {string} id order id
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        object response = await this.privateGetGetUserTradesByOrder(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 9367,
        //         "result": {
        //             "trades": [
        //                 {
        //                     "trade_seq": 3,
        //                     "trade_id": "ETH-34066",
        //                     "timestamp": 1550219814585,
        //                     "tick_direction": 1,
        //                     "state": "open",
        //                     "self_trade": false,
        //                     "reduce_only": false,
        //                     "price": 0.04,
        //                     "post_only": false,
        //                     "order_type": "limit",
        //                     "order_id": "ETH-334607",
        //                     "matching_id": null,
        //                     "liquidity": "M",
        //                     "iv": 56.83,
        //                     "instrument_name": "ETH-22FEB19-120-C",
        //                     "index_price": 121.37,
        //                     "fee_currency": "ETH",
        //                     "fee": 0.0011,
        //                     "direction": "buy",
        //                     "amount": 11
        //                 },
        //             ],
        //             "has_more": true
        //         }
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseTrades(result, null, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://docs.deribit.com/#private-get_user_trades_by_currency
        * @see https://docs.deribit.com/#private-get_user_trades_by_currency_and_time
        * @see https://docs.deribit.com/#private-get_user_trades_by_instrument
        * @see https://docs.deribit.com/#private-get_user_trades_by_instrument_and_time
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "include_old", true },
        };
        object market = null;
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit; // default 10
        }
        object response = null;
        if (isTrue(isEqual(symbol, null)))
        {
            object code = this.codeFromOptions("fetchMyTrades", parameters);
            object currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
            if (isTrue(isEqual(since, null)))
            {
                response = await this.privateGetGetUserTradesByCurrency(this.extend(request, parameters));
            } else
            {
                ((IDictionary<string,object>)request)["start_timestamp"] = since;
                response = await this.privateGetGetUserTradesByCurrencyAndTime(this.extend(request, parameters));
            }
        } else
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["instrument_name"] = getValue(market, "id");
            if (isTrue(isEqual(since, null)))
            {
                response = await this.privateGetGetUserTradesByInstrument(this.extend(request, parameters));
            } else
            {
                ((IDictionary<string,object>)request)["start_timestamp"] = since;
                response = await this.privateGetGetUserTradesByInstrumentAndTime(this.extend(request, parameters));
            }
        }
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 9367,
        //         "result": {
        //             "trades": [
        //                 {
        //                     "trade_seq": 3,
        //                     "trade_id": "ETH-34066",
        //                     "timestamp": 1550219814585,
        //                     "tick_direction": 1,
        //                     "state": "open",
        //                     "self_trade": false,
        //                     "reduce_only": false,
        //                     "price": 0.04,
        //                     "post_only": false,
        //                     "order_type": "limit",
        //                     "order_id": "ETH-334607",
        //                     "matching_id": null,
        //                     "liquidity": "M",
        //                     "iv": 56.83,
        //                     "instrument_name": "ETH-22FEB19-120-C",
        //                     "index_price": 121.37,
        //                     "fee_currency": "ETH",
        //                     "fee": 0.0011,
        //                     "direction": "buy",
        //                     "amount": 11
        //                 },
        //             ],
        //             "has_more": true
        //         }
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object trades = this.safeList(result, "trades", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://docs.deribit.com/#private-get_deposits
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchDeposits() requires a currency code argument")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.privateGetGetDeposits(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 5611,
        //         "result": {
        //             "count": 1,
        //             "data": [
        //                 {
        //                     "address": "2N35qDKDY22zmJq9eSyiAerMD4enJ1xx6ax",
        //                     "amount": 5,
        //                     "currency": "BTC",
        //                     "received_timestamp": 1549295017670,
        //                     "state": "completed",
        //                     "transaction_id": "230669110fdaf0a0dbcdc079b6b8b43d5af29cc73683835b9bc6b3406c065fda",
        //                     "updated_timestamp": 1549295130159
        //                 }
        //             ]
        //         }
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object data = this.safeList(result, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit, parameters);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://docs.deribit.com/#private-get_withdrawals
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchWithdrawals() requires a currency code argument")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.privateGetGetWithdrawals(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 2745,
        //         "result": {
        //             "count": 1,
        //             "data": [
        //                 {
        //                     "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
        //                     "amount": 0.5,
        //                     "confirmed_timestamp": null,
        //                     "created_timestamp": 1550571443070,
        //                     "currency": "BTC",
        //                     "fee": 0.0001,
        //                     "id": 1,
        //                     "priority": 0.15,
        //                     "state": "unconfirmed",
        //                     "transaction_id": null,
        //                     "updated_timestamp": 1550571443070
        //                 }
        //             ]
        //         }
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object data = this.safeList(result, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit, parameters);
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "completed", "ok" },
            { "unconfirmed", "pending" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // fetchWithdrawals
        //
        //     {
        //         "address": "2NBqqD5GRJ8wHy1PYyCXTe9ke5226FhavBz",
        //         "amount": 0.5,
        //         "confirmed_timestamp": null,
        //         "created_timestamp": 1550571443070,
        //         "currency": "BTC",
        //         "fee": 0.0001,
        //         "id": 1,
        //         "priority": 0.15,
        //         "state": "unconfirmed",
        //         "transaction_id": null,
        //         "updated_timestamp": 1550571443070
        //     }
        //
        // fetchDeposits
        //
        //     {
        //         "address": "2N35qDKDY22zmJq9eSyiAerMD4enJ1xx6ax",
        //         "amount": 5,
        //         "currency": "BTC",
        //         "received_timestamp": 1549295017670,
        //         "state": "completed",
        //         "transaction_id": "230669110fdaf0a0dbcdc079b6b8b43d5af29cc73683835b9bc6b3406c065fda",
        //         "updated_timestamp": 1549295130159
        //     }
        //
        object currencyId = this.safeString(transaction, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object timestamp = this.safeInteger2(transaction, "created_timestamp", "received_timestamp");
        object updated = this.safeInteger(transaction, "updated_timestamp");
        object status = this.parseTransactionStatus(this.safeString(transaction, "state"));
        object address = this.safeString(transaction, "address");
        object feeCost = this.safeNumber(transaction, "fee");
        object type = "deposit";
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            type = "withdrawal";
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", code },
            };
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", this.safeString(transaction, "id") },
            { "txid", this.safeString(transaction, "transaction_id") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "address", address },
            { "addressTo", address },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "type", type },
            { "amount", this.safeNumber(transaction, "amount") },
            { "currency", code },
            { "status", status },
            { "updated", updated },
            { "network", null },
            { "internal", null },
            { "comment", null },
            { "fee", fee },
        };
    }

    public override object parsePosition(object position, object market = null)
    {
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 404,
        //         "result": {
        //             "average_price": 0,
        //             "delta": 0,
        //             "direction": "buy",
        //             "estimated_liquidation_price": 0,
        //             "floating_profit_loss": 0,
        //             "index_price": 3555.86,
        //             "initial_margin": 0,
        //             "instrument_name": "BTC-PERPETUAL",
        //             "leverage": 100,
        //             "kind": "future",
        //             "maintenance_margin": 0,
        //             "mark_price": 3556.62,
        //             "open_orders_margin": 0.000165889,
        //             "realized_profit_loss": 0,
        //             "settlement_price": 3555.44,
        //             "size": 0,
        //             "size_currency": 0,
        //             "total_profit_loss": 0
        //         }
        //     }
        //
        object contract = this.safeString(position, "instrument_name");
        market = this.safeMarket(contract, market);
        object side = this.safeString(position, "direction");
        side = ((bool) isTrue((isEqual(side, "buy")))) ? "long" : "short";
        object unrealizedPnl = this.safeString(position, "floating_profit_loss");
        object initialMarginString = this.safeString(position, "initial_margin");
        object notionalString = this.safeString(position, "size_currency");
        object maintenanceMarginString = this.safeString(position, "maintenance_margin");
        object currentTime = this.milliseconds();
        return this.safePosition(new Dictionary<string, object>() {
            { "info", position },
            { "id", null },
            { "symbol", this.safeString(market, "symbol") },
            { "timestamp", currentTime },
            { "datetime", this.iso8601(currentTime) },
            { "lastUpdateTimestamp", null },
            { "initialMargin", this.parseNumber(initialMarginString) },
            { "initialMarginPercentage", this.parseNumber(Precise.stringMul(Precise.stringDiv(initialMarginString, notionalString), "100")) },
            { "maintenanceMargin", this.parseNumber(maintenanceMarginString) },
            { "maintenanceMarginPercentage", this.parseNumber(Precise.stringMul(Precise.stringDiv(maintenanceMarginString, notionalString), "100")) },
            { "entryPrice", this.safeNumber(position, "average_price") },
            { "notional", this.parseNumber(notionalString) },
            { "leverage", this.safeInteger(position, "leverage") },
            { "unrealizedPnl", this.parseNumber(unrealizedPnl) },
            { "contracts", null },
            { "contractSize", this.safeNumber(market, "contractSize") },
            { "marginRatio", null },
            { "liquidationPrice", this.safeNumber(position, "estimated_liquidation_price") },
            { "markPrice", this.safeNumber(position, "mark_price") },
            { "lastPrice", null },
            { "collateral", null },
            { "marginMode", null },
            { "side", side },
            { "percentage", null },
            { "hedged", null },
            { "stopLossPrice", null },
            { "takeProfitPrice", null },
        });
    }

    public async override Task<object> fetchPosition(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchPosition
        * @description fetch data on a single open contract trade position
        * @see https://docs.deribit.com/#private-get_position
        * @param {string} symbol unified market symbol of the market the position is held in, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
        };
        object response = await this.privateGetGetPosition(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 404,
        //         "result": {
        //             "average_price": 0,
        //             "delta": 0,
        //             "direction": "buy",
        //             "estimated_liquidation_price": 0,
        //             "floating_profit_loss": 0,
        //             "index_price": 3555.86,
        //             "initial_margin": 0,
        //             "instrument_name": "BTC-PERPETUAL",
        //             "leverage": 100,
        //             "kind": "future",
        //             "maintenance_margin": 0,
        //             "mark_price": 3556.62,
        //             "open_orders_margin": 0.000165889,
        //             "realized_profit_loss": 0,
        //             "settlement_price": 3555.44,
        //             "size": 0,
        //             "size_currency": 0,
        //             "total_profit_loss": 0
        //         }
        //     }
        //
        object result = this.safeDict(response, "result");
        return this.parsePosition(result);
    }

    public async override Task<object> fetchPositions(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchPositions
        * @description fetch all open positions
        * @see https://docs.deribit.com/#private-get_positions
        * @param {string[]|undefined} symbols list of unified market symbols
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.kind] market type filter for positions 'future', 'option', 'spot', 'future_combo' or 'option_combo'
        * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object kind = this.safeString(parameters, "kind");
        object code = null;
        if (isTrue(isEqual(symbols, null)))
        {
            code = this.codeFromOptions("fetchPositions", parameters);
        } else if (isTrue((symbols is string)))
        {
            code = symbols;
            symbols = null; // fix https://github.com/ccxt/ccxt/issues/13961
        } else
        {
            if (isTrue(((symbols is IList<object>) || (symbols.GetType().IsGenericType && symbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
            {
                object length = getArrayLength(symbols);
                if (isTrue(!isEqual(length, 1)))
                {
                    throw new BadRequest ((string)add(this.id, " fetchPositions() symbols argument cannot contain more than 1 symbol")) ;
                }
                object market = this.market(getValue(symbols, 0));
                object settle = getValue(market, "settle");
                code = ((bool) isTrue((!isEqual(settle, null)))) ? settle : getValue(market, "base");
                kind = getValue(getValue(market, "info"), "kind");
            }
        }
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        if (isTrue(!isEqual(kind, null)))
        {
            ((IDictionary<string,object>)request)["kind"] = kind;
        }
        object response = await this.privateGetGetPositions(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 2236,
        //         "result": [
        //             {
        //                 "average_price": 7440.18,
        //                 "delta": 0.006687487,
        //                 "direction": "buy",
        //                 "estimated_liquidation_price": 1.74,
        //                 "floating_profit_loss": 0,
        //                 "index_price": 7466.79,
        //                 "initial_margin": 0.000197283,
        //                 "instrument_name": "BTC-PERPETUAL",
        //                 "kind": "future",
        //                 "leverage": 34,
        //                 "maintenance_margin": 0.000143783,
        //                 "mark_price": 7476.65,
        //                 "open_orders_margin": 0.000197288,
        //                 "realized_funding": -1e-8,
        //                 "realized_profit_loss": -9e-9,
        //                 "settlement_price": 7476.65,
        //                 "size": 50,
        //                 "size_currency": 0.006687487,
        //                 "total_profit_loss": 0.000032781
        //             },
        //         ]
        //     }
        //
        object result = this.safeList(response, "result");
        return this.parsePositions(result, symbols);
    }

    public async virtual Task<object> fetchVolatilityHistory(object code, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchVolatilityHistory
        * @description fetch the historical volatility of an option market based on an underlying asset
        * @see https://docs.deribit.com/#public-get_historical_volatility
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [volatility history objects]{@link https://docs.ccxt.com/#/?id=volatility-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        object response = await this.publicGetGetHistoricalVolatility(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": [
        //             [1640142000000,63.828320460740585],
        //             [1640142000000,63.828320460740585],
        //             [1640145600000,64.03821964123213]
        //         ],
        //         "usIn": 1641515379467734,
        //         "usOut": 1641515379468095,
        //         "usDiff": 361,
        //         "testnet": false
        //     }
        //
        return this.parseVolatilityHistory(response);
    }

    public virtual object parseVolatilityHistory(object volatility)
    {
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": [
        //             [1640142000000,63.828320460740585],
        //             [1640142000000,63.828320460740585],
        //             [1640145600000,64.03821964123213]
        //         ],
        //         "usIn": 1641515379467734,
        //         "usOut": 1641515379468095,
        //         "usDiff": 361,
        //         "testnet": false
        //     }
        //
        object volatilityResult = this.safeValue(volatility, "result", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(volatilityResult)); postFixIncrement(ref i))
        {
            object timestamp = this.safeInteger(getValue(volatilityResult, i), 0);
            object volatilityObj = this.safeNumber(getValue(volatilityResult, i), 1);
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "info", volatilityObj },
                { "timestamp", timestamp },
                { "datetime", this.iso8601(timestamp) },
                { "volatility", volatilityObj },
            });
        }
        return result;
    }

    public async virtual Task<object> fetchTransfers(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchTransfers
        * @description fetch a history of internal transfers made on an account
        * @see https://docs.deribit.com/#private-get_transfers
        * @param {string} code unified currency code of the currency transferred
        * @param {int} [since] the earliest time in ms to fetch transfers for
        * @param {int} [limit] the maximum number of  transfers structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchTransfers() requires a currency code argument")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.privateGetGetTransfers(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 7606,
        //         "result": {
        //             "count": 2,
        //             "data": [
        //                 {
        //                     "amount": 0.2,
        //                     "created_timestamp": 1550579457727,
        //                     "currency": "BTC",
        //                     "direction": "payment",
        //                     "id": 2,
        //                     "other_side": "2MzyQc5Tkik61kJbEpJV5D5H9VfWHZK9Sgy",
        //                     "state": "prepared",
        //                     "type": "user",
        //                     "updated_timestamp": 1550579457727
        //                 },
        //                 {
        //                     "amount": 0.3,
        //                     "created_timestamp": 1550579255800,
        //                     "currency": "BTC",
        //                     "direction": "payment",
        //                     "id": 1,
        //                     "other_side": "new_user_1_1",
        //                     "state": "confirmed",
        //                     "type": "subaccount",
        //                     "updated_timestamp": 1550579255800
        //                 }
        //             ]
        //         }
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object transfers = this.safeList(result, "data", new List<object>() {});
        return this.parseTransfers(transfers, currency, since, limit, parameters);
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name deribit#transfer
        * @description transfer currency internally between wallets on the same account
        * @see https://docs.deribit.com/#private-submit_transfer_to_user
        * @see https://docs.deribit.com/#private-submit_transfer_to_subaccount
        * @param {string} code unified currency code
        * @param {float} amount amount to transfer
        * @param {string} fromAccount account to transfer from
        * @param {string} toAccount account to transfer to
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "amount", amount },
            { "currency", getValue(currency, "id") },
            { "destination", toAccount },
        };
        object method = this.safeString(parameters, "method");
        parameters = this.omit(parameters, "method");
        if (isTrue(isEqual(method, null)))
        {
            object transferOptions = this.safeValue(this.options, "transfer", new Dictionary<string, object>() {});
            method = this.safeString(transferOptions, "method", "privateGetSubmitTransferToSubaccount");
        }
        object response = null;
        if (isTrue(isEqual(method, "privateGetSubmitTransferToUser")))
        {
            response = await this.privateGetSubmitTransferToUser(this.extend(request, parameters));
        } else
        {
            response = await this.privateGetSubmitTransferToSubaccount(this.extend(request, parameters));
        }
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 9421,
        //         "result": {
        //             "updated_timestamp": 1550232862350,
        //             "type": "user",
        //             "state": "prepared",
        //             "other_side": "0x4aa0753d798d668056920094d65321a8e8913e26",
        //             "id": 3,
        //             "direction": "payment",
        //             "currency": "ETH",
        //             "created_timestamp": 1550232862350,
        //             "amount": 13.456
        //         }
        //     }
        //
        object result = this.safeDict(response, "result", new Dictionary<string, object>() {});
        return this.parseTransfer(result, currency);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        //     {
        //         "updated_timestamp": 1550232862350,
        //         "type": "user",
        //         "state": "prepared",
        //         "other_side": "0x4aa0753d798d668056920094d65321a8e8913e26",
        //         "id": 3,
        //         "direction": "payment",
        //         "currency": "ETH",
        //         "created_timestamp": 1550232862350,
        //         "amount": 13.456
        //     }
        //
        object timestamp = this.safeTimestamp(transfer, "created_timestamp");
        object status = this.safeString(transfer, "state");
        object account = this.safeString(transfer, "other_side");
        object direction = this.safeString(transfer, "direction");
        object currencyId = this.safeString(transfer, "currency");
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", this.safeString(transfer, "id") },
            { "status", this.parseTransferStatus(status) },
            { "amount", this.safeNumber(transfer, "amount") },
            { "code", this.safeCurrencyCode(currencyId, currency) },
            { "fromAccount", ((bool) isTrue(!isEqual(direction, "payment"))) ? account : null },
            { "toAccount", ((bool) isTrue(isEqual(direction, "payment"))) ? account : null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
    }

    public virtual object parseTransferStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "prepared", "pending" },
            { "confirmed", "ok" },
            { "cancelled", "cancelled" },
            { "waiting_for_admin", "pending" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#withdraw
        * @description make a withdrawal
        * @see https://docs.deribit.com/#private-withdraw
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "address", address },
            { "amount", amount },
        };
        if (isTrue(!isEqual(this.twofa, null)))
        {
            ((IDictionary<string,object>)request)["tfa"] = totp(this.twofa);
        }
        object response = await this.privateGetWithdraw(this.extend(request, parameters));
        return this.parseTransaction(response, currency);
    }

    public override object parseDepositWithdrawFee(object fee, object currency = null)
    {
        //
        //    {
        //      "withdrawal_priorities": [],
        //      "withdrawal_fee": 0.01457324,
        //      "min_withdrawal_fee": 0.000001,
        //      "min_confirmations": 1,
        //      "fee_precision": 8,
        //      "currency_long": "Solana",
        //      "currency": "SOL",
        //      "coin_type": "SOL"
        //    }
        //
        return new Dictionary<string, object>() {
            { "info", fee },
            { "withdraw", new Dictionary<string, object>() {
                { "fee", this.safeNumber(fee, "withdrawal_fee") },
                { "percentage", false },
            } },
            { "deposit", new Dictionary<string, object>() {
                { "fee", null },
                { "percentage", null },
            } },
            { "networks", new Dictionary<string, object>() {} },
        };
    }

    public async override Task<object> fetchDepositWithdrawFees(object codes = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchDepositWithdrawFees
        * @description fetch deposit and withdraw fees
        * @see https://docs.deribit.com/#public-get_currencies
        * @param {string[]|undefined} codes list of unified currency codes
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetGetCurrencies(parameters);
        //
        //    {
        //      "jsonrpc": "2.0",
        //      "result": [
        //        {
        //          "withdrawal_priorities": [],
        //          "withdrawal_fee": 0.01457324,
        //          "min_withdrawal_fee": 0.000001,
        //          "min_confirmations": 1,
        //          "fee_precision": 8,
        //          "currency_long": "Solana",
        //          "currency": "SOL",
        //          "coin_type": "SOL"
        //        },
        //        ...
        //      ],
        //      "usIn": 1688652701456124,
        //      "usOut": 1688652701456390,
        //      "usDiff": 266,
        //      "testnet": true
        //    }
        //
        object data = this.safeList(response, "result", new List<object>() {});
        return this.parseDepositWithdrawFees(data, codes, "currency");
    }

    public async override Task<object> fetchFundingRate(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchFundingRate
        * @description fetch the current funding rate
        * @see https://docs.deribit.com/#public-get_funding_rate_value
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.start_timestamp] fetch funding rate starting from this timestamp
        * @param {int} [params.end_timestamp] fetch funding rate ending at this timestamp
        * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object time = this.milliseconds();
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "start_timestamp", subtract(time, (multiply(multiply(multiply(8, 60), 60), 1000))) },
            { "end_timestamp", time },
        };
        object response = await this.publicGetGetFundingRateValue(this.extend(request, parameters));
        //
        //   {
        //       "jsonrpc":"2.0",
        //       "result":"0",
        //       "usIn":"1691161645596519",
        //       "usOut":"1691161645597149",
        //       "usDiff":"630",
        //       "testnet":false
        //   }
        //
        return this.parseFundingRate(response, market);
    }

    public async override Task<object> fetchFundingRateHistory(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchFundingRateHistory
        * @description fetch the current funding rate
        * @see https://docs.deribit.com/#public-get_funding_rate_history
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.end_timestamp] fetch funding rate ending at this timestamp
        * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
        * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchFundingRateHistory", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallDeterministic("fetchFundingRateHistory", symbol, since, limit, "8h", parameters, 720);
        }
        object time = this.milliseconds();
        object month = multiply(multiply(multiply(multiply(30, 24), 60), 60), 1000);
        if (isTrue(isEqual(since, null)))
        {
            since = subtract(time, month);
        }
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "start_timestamp", subtract(since, 1) },
            { "end_timestamp", time },
        };
        object response = await this.publicGetGetFundingRateHistory(this.extend(request, parameters));
        //
        //    {
        //        "jsonrpc": "2.0",
        //        "id": 7617,
        //        "result": [
        //          {
        //            "timestamp": 1569891600000,
        //            "index_price": 8222.87,
        //            "prev_index_price": 8305.72,
        //            "interest_8h": -0.00009234260068476106,
        //            "interest_1h": -4.739622041017375e-7
        //          }
        //        ]
        //    }
        //
        object rates = new List<object>() {};
        object result = this.safeValue(response, "result", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(result)); postFixIncrement(ref i))
        {
            object fr = getValue(result, i);
            object rate = this.parseFundingRate(fr, market);
            ((IList<object>)rates).Add(rate);
        }
        return this.filterBySymbolSinceLimit(rates, symbol, since, limit);
    }

    public override object parseFundingRate(object contract, object market = null)
    {
        //
        //   {
        //       "jsonrpc":"2.0",
        //       "result":"0",
        //       "usIn":"1691161645596519",
        //       "usOut":"1691161645597149",
        //       "usDiff":"630",
        //       "testnet":false
        //   }
        // history
        //   {
        //     "timestamp": 1569891600000,
        //     "index_price": 8222.87,
        //     "prev_index_price": 8305.72,
        //     "interest_8h": -0.00009234260068476106,
        //     "interest_1h": -4.739622041017375e-7
        //   }
        //
        object timestamp = this.safeInteger(contract, "timestamp");
        object datetime = this.iso8601(timestamp);
        object result = this.safeNumber2(contract, "result", "interest_8h");
        return new Dictionary<string, object>() {
            { "info", contract },
            { "symbol", this.safeSymbol(null, market) },
            { "markPrice", null },
            { "indexPrice", this.safeNumber(contract, "index_price") },
            { "interestRate", null },
            { "estimatedSettlePrice", null },
            { "timestamp", timestamp },
            { "datetime", datetime },
            { "fundingRate", result },
            { "fundingTimestamp", null },
            { "fundingDatetime", null },
            { "nextFundingRate", null },
            { "nextFundingTimestamp", null },
            { "nextFundingDatetime", null },
            { "previousFundingRate", null },
            { "previousFundingTimestamp", null },
            { "previousFundingDatetime", null },
        };
    }

    public async override Task<object> fetchLiquidations(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchLiquidations
        * @description retrieves the public liquidations of a trading pair
        * @see https://docs.deribit.com/#public-get_last_settlements_by_currency
        * @param {string} symbol unified CCXT market symbol
        * @param {int} [since] the earliest time in ms to fetch liquidations for
        * @param {int} [limit] the maximum number of liquidation structures to retrieve
        * @param {object} [params] exchange specific parameters for the deribit api endpoint
        * @param {boolean} [params.paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-params)
        * @returns {object} an array of [liquidation structures]{@link https://docs.ccxt.com/#/?id=liquidation-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object paginate = false;
        var paginateparametersVariable = this.handleOptionAndParams(parameters, "fetchLiquidations", "paginate");
        paginate = ((IList<object>)paginateparametersVariable)[0];
        parameters = ((IList<object>)paginateparametersVariable)[1];
        if (isTrue(paginate))
        {
            return await this.fetchPaginatedCallCursor("fetchLiquidations", symbol, since, limit, parameters, "continuation", "continuation", null);
        }
        object market = this.market(symbol);
        if (isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchLiquidations() does not support "), getValue(market, "type")), " markets")) ;
        }
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "type", "bankruptcy" },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["search_start_timestamp"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.publicGetGetLastSettlementsByInstrument(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "settlements": [
        //                 {
        //                     "type": "bankruptcy",
        //                     "timestamp": 1696579200041,
        //                     "funded": 10000.0,
        //                     "session_bankrupcy": 10000.0
        //                     "session_profit_loss": 112951.68715857354,
        //                     "session_tax": 0.15,
        //                     "session_tax_rate": 0.0015,
        //                     "socialized": 0.001,
        //                 },
        //             ],
        //             "continuation": "5dHzoGyD8Hs8KURoUhfgXgHpJTA5oyapoudSmNeAfEftqRbjNE6jNNUpo2oCu1khnZL9ao"
        //         },
        //         "usIn": 1696652052254890,
        //         "usOut": 1696652052255733,
        //         "usDiff": 843,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object cursor = this.safeString(result, "continuation");
        object settlements = this.safeValue(result, "settlements", new List<object>() {});
        object settlementsWithCursor = this.addPaginationCursorToResult(cursor, settlements);
        return this.parseLiquidations(settlementsWithCursor, market, since, limit);
    }

    public virtual object addPaginationCursorToResult(object cursor, object data)
    {
        if (isTrue(!isEqual(cursor, null)))
        {
            object dataLength = getArrayLength(data);
            if (isTrue(isGreaterThan(dataLength, 0)))
            {
                object first = getValue(data, 0);
                object last = getValue(data, subtract(dataLength, 1));
                ((IDictionary<string,object>)first)["continuation"] = cursor;
                ((IDictionary<string,object>)last)["continuation"] = cursor;
                ((List<object>)data)[Convert.ToInt32(0)] = first;
                ((List<object>)data)[Convert.ToInt32(subtract(dataLength, 1))] = last;
            }
        }
        return data;
    }

    public async override Task<object> fetchMyLiquidations(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchMyLiquidations
        * @description retrieves the users liquidated positions
        * @see https://docs.deribit.com/#private-get_settlement_history_by_instrument
        * @param {string} symbol unified CCXT market symbol
        * @param {int} [since] the earliest time in ms to fetch liquidations for
        * @param {int} [limit] the maximum number of liquidation structures to retrieve
        * @param {object} [params] exchange specific parameters for the deribit api endpoint
        * @returns {object} an array of [liquidation structures]{@link https://docs.ccxt.com/#/?id=liquidation-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyLiquidations() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        if (isTrue(getValue(market, "spot")))
        {
            throw new NotSupported ((string)add(add(add(this.id, " fetchMyLiquidations() does not support "), getValue(market, "type")), " markets")) ;
        }
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
            { "type", "bankruptcy" },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["search_start_timestamp"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object response = await this.privateGetGetSettlementHistoryByInstrument(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "settlements": [
        //                 {
        //                     "type": "bankruptcy",
        //                     "timestamp": 1696579200041,
        //                     "funded": 10000.0,
        //                     "session_bankrupcy": 10000.0
        //                     "session_profit_loss": 112951.68715857354,
        //                     "session_tax": 0.15,
        //                     "session_tax_rate": 0.0015,
        //                     "socialized": 0.001,
        //                 },
        //             ],
        //             "continuation": "5dHzoGyD8Hs8KURoUhfgXgHpJTA5oyapoudSmNeAfEftqRbjNE6jNNUpo2oCu1khnZL9ao"
        //         },
        //         "usIn": 1696652052254890,
        //         "usOut": 1696652052255733,
        //         "usDiff": 843,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object settlements = this.safeList(result, "settlements", new List<object>() {});
        return this.parseLiquidations(settlements, market, since, limit);
    }

    public override object parseLiquidation(object liquidation, object market = null)
    {
        //
        //     {
        //         "type": "bankruptcy",
        //         "timestamp": 1696579200041,
        //         "funded": 1,
        //         "session_bankrupcy": 0.001,
        //         "session_profit_loss": 0.001,
        //         "session_tax": 0.0015,
        //         "session_tax_rate": 0.0015,
        //         "socialized": 0.001,
        //     }
        //
        object timestamp = this.safeInteger(liquidation, "timestamp");
        return this.safeLiquidation(new Dictionary<string, object>() {
            { "info", liquidation },
            { "symbol", this.safeSymbol(null, market) },
            { "contracts", null },
            { "contractSize", this.safeNumber(market, "contractSize") },
            { "price", null },
            { "baseValue", this.safeNumber(liquidation, "session_bankrupcy") },
            { "quoteValue", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        });
    }

    public async override Task<object> fetchGreeks(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchGreeks
        * @description fetches an option contracts greeks, financial metrics used to measure the factors that affect the price of an options contract
        * @see https://docs.deribit.com/#public-ticker
        * @param {string} symbol unified symbol of the market to fetch greeks for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [greeks structure]{@link https://docs.ccxt.com/#/?id=greeks-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": {
        //             "estimated_delivery_price": 36552.72,
        //             "best_bid_amount": 0.2,
        //             "best_ask_amount": 9.1,
        //             "interest_rate": 0.0,
        //             "best_bid_price": 0.214,
        //             "best_ask_price": 0.219,
        //             "open_interest": 368.8,
        //             "settlement_price": 0.22103022,
        //             "last_price": 0.215,
        //             "bid_iv": 60.51,
        //             "ask_iv": 61.88,
        //             "mark_iv": 61.27,
        //             "underlying_index": "BTC-27SEP24",
        //             "underlying_price": 38992.71,
        //             "min_price": 0.1515,
        //             "max_price": 0.326,
        //             "mark_price": 0.2168,
        //             "instrument_name": "BTC-27SEP24-40000-C",
        //             "index_price": 36552.72,
        //             "greeks": {
        //                 "rho": 130.63998,
        //                 "theta": -13.48784,
        //                 "vega": 141.90146,
        //                 "gamma": 0.00002,
        //                 "delta": 0.59621
        //             },
        //             "stats": {
        //                 "volume_usd": 100453.9,
        //                 "volume": 12.0,
        //                 "price_change": -2.2727,
        //                 "low": 0.2065,
        //                 "high": 0.238
        //             },
        //             "state": "open",
        //             "timestamp": 1699578548021
        //         },
        //         "usIn": 1699578548308414,
        //         "usOut": 1699578548308606,
        //         "usDiff": 192,
        //         "testnet": false
        //     }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        return this.parseGreeks(result, market);
    }

    public override object parseGreeks(object greeks, object market = null)
    {
        //
        //     {
        //         "estimated_delivery_price": 36552.72,
        //         "best_bid_amount": 0.2,
        //         "best_ask_amount": 9.1,
        //         "interest_rate": 0.0,
        //         "best_bid_price": 0.214,
        //         "best_ask_price": 0.219,
        //         "open_interest": 368.8,
        //         "settlement_price": 0.22103022,
        //         "last_price": 0.215,
        //         "bid_iv": 60.51,
        //         "ask_iv": 61.88,
        //         "mark_iv": 61.27,
        //         "underlying_index": "BTC-27SEP24",
        //         "underlying_price": 38992.71,
        //         "min_price": 0.1515,
        //         "max_price": 0.326,
        //         "mark_price": 0.2168,
        //         "instrument_name": "BTC-27SEP24-40000-C",
        //         "index_price": 36552.72,
        //         "greeks": {
        //             "rho": 130.63998,
        //             "theta": -13.48784,
        //             "vega": 141.90146,
        //             "gamma": 0.00002,
        //             "delta": 0.59621
        //         },
        //         "stats": {
        //             "volume_usd": 100453.9,
        //             "volume": 12.0,
        //             "price_change": -2.2727,
        //             "low": 0.2065,
        //             "high": 0.238
        //         },
        //         "state": "open",
        //         "timestamp": 1699578548021
        //     }
        //
        object timestamp = this.safeInteger(greeks, "timestamp");
        object marketId = this.safeString(greeks, "instrument_name");
        object symbol = this.safeSymbol(marketId, market);
        object stats = this.safeValue(greeks, "greeks", new Dictionary<string, object>() {});
        return new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "delta", this.safeNumber(stats, "delta") },
            { "gamma", this.safeNumber(stats, "gamma") },
            { "theta", this.safeNumber(stats, "theta") },
            { "vega", this.safeNumber(stats, "vega") },
            { "rho", this.safeNumber(stats, "rho") },
            { "bidSize", this.safeNumber(greeks, "best_bid_amount") },
            { "askSize", this.safeNumber(greeks, "best_ask_amount") },
            { "bidImpliedVolatility", this.safeNumber(greeks, "bid_iv") },
            { "askImpliedVolatility", this.safeNumber(greeks, "ask_iv") },
            { "markImpliedVolatility", this.safeNumber(greeks, "mark_iv") },
            { "bidPrice", this.safeNumber(greeks, "best_bid_price") },
            { "askPrice", this.safeNumber(greeks, "best_ask_price") },
            { "markPrice", this.safeNumber(greeks, "mark_price") },
            { "lastPrice", this.safeNumber(greeks, "last_price") },
            { "underlyingPrice", this.safeNumber(greeks, "underlying_price") },
            { "info", greeks },
        };
    }

    public async override Task<object> fetchOption(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOption
        * @description fetches option data that is commonly found in an option chain
        * @see https://docs.deribit.com/#public-get_book_summary_by_instrument
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [option chain structure]{@link https://docs.ccxt.com/#/?id=option-chain-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "instrument_name", getValue(market, "id") },
        };
        object response = await this.publicGetGetBookSummaryByInstrument(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": [
        //             {
        //                 "mid_price": 0.04025,
        //                 "volume_usd": 11045.12,
        //                 "quote_currency": "BTC",
        //                 "estimated_delivery_price": 65444.72,
        //                 "creation_timestamp": 1711100949273,
        //                 "base_currency": "BTC",
        //                 "underlying_index": "BTC-27DEC24",
        //                 "underlying_price": 73742.14,
        //                 "volume": 4.0,
        //                 "interest_rate": 0.0,
        //                 "price_change": -6.9767,
        //                 "open_interest": 274.2,
        //                 "ask_price": 0.042,
        //                 "bid_price": 0.0385,
        //                 "instrument_name": "BTC-27DEC24-240000-C",
        //                 "mark_price": 0.04007735,
        //                 "last": 0.04,
        //                 "low": 0.04,
        //                 "high": 0.043
        //             }
        //         ],
        //         "usIn": 1711100949273223,
        //         "usOut": 1711100949273580,
        //         "usDiff": 357,
        //         "testnet": false
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        object chain = this.safeDict(result, 0, new Dictionary<string, object>() {});
        return this.parseOption(chain, null, market);
    }

    public async override Task<object> fetchOptionChain(object code, object parameters = null)
    {
        /**
        * @method
        * @name deribit#fetchOptionChain
        * @description fetches data for an underlying asset that is commonly found in an option chain
        * @see https://docs.deribit.com/#public-get_book_summary_by_currency
        * @param {string} currency base currency to fetch an option chain for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [option chain structures]{@link https://docs.ccxt.com/#/?id=option-chain-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "kind", "option" },
        };
        object response = await this.publicGetGetBookSummaryByCurrency(this.extend(request, parameters));
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "result": [
        //             {
        //                 "mid_price": 0.4075,
        //                 "volume_usd": 2836.83,
        //                 "quote_currency": "BTC",
        //                 "estimated_delivery_price": 65479.26,
        //                 "creation_timestamp": 1711101594477,
        //                 "base_currency": "BTC",
        //                 "underlying_index": "BTC-28JUN24",
        //                 "underlying_price": 68827.27,
        //                 "volume": 0.1,
        //                 "interest_rate": 0.0,
        //                 "price_change": 0.0,
        //                 "open_interest": 364.1,
        //                 "ask_price": 0.411,
        //                 "bid_price": 0.404,
        //                 "instrument_name": "BTC-28JUN24-42000-C",
        //                 "mark_price": 0.40752052,
        //                 "last": 0.423,
        //                 "low": 0.423,
        //                 "high": 0.423
        //             }
        //         ],
        //         "usIn": 1711101594456388,
        //         "usOut": 1711101594484065,
        //         "usDiff": 27677,
        //         "testnet": false
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseOptionChain(result, "base_currency", "instrument_name");
    }

    public override object parseOption(object chain, object currency = null, object market = null)
    {
        //
        //     {
        //         "mid_price": 0.04025,
        //         "volume_usd": 11045.12,
        //         "quote_currency": "BTC",
        //         "estimated_delivery_price": 65444.72,
        //         "creation_timestamp": 1711100949273,
        //         "base_currency": "BTC",
        //         "underlying_index": "BTC-27DEC24",
        //         "underlying_price": 73742.14,
        //         "volume": 4.0,
        //         "interest_rate": 0.0,
        //         "price_change": -6.9767,
        //         "open_interest": 274.2,
        //         "ask_price": 0.042,
        //         "bid_price": 0.0385,
        //         "instrument_name": "BTC-27DEC24-240000-C",
        //         "mark_price": 0.04007735,
        //         "last": 0.04,
        //         "low": 0.04,
        //         "high": 0.043
        //     }
        //
        object marketId = this.safeString(chain, "instrument_name");
        market = this.safeMarket(marketId, market);
        object currencyId = this.safeString(chain, "base_currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object timestamp = this.safeInteger(chain, "timestamp");
        return new Dictionary<string, object>() {
            { "info", chain },
            { "currency", code },
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "impliedVolatility", null },
            { "openInterest", this.safeNumber(chain, "open_interest") },
            { "bidPrice", this.safeNumber(chain, "bid_price") },
            { "askPrice", this.safeNumber(chain, "ask_price") },
            { "midPrice", this.safeNumber(chain, "mid_price") },
            { "markPrice", this.safeNumber(chain, "mark_price") },
            { "lastPrice", this.safeNumber(chain, "last") },
            { "underlyingPrice", this.safeNumber(chain, "underlying_price") },
            { "change", null },
            { "percentage", this.safeNumber(chain, "price_change") },
            { "baseVolume", this.safeNumber(chain, "volume") },
            { "quoteVolume", this.safeNumber(chain, "volume_usd") },
        };
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object request = add(add(add(add(add(add("/", "api/"), this.version), "/"), api), "/"), path);
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                request = add(request, add("?", this.urlencode(parameters)));
            }
        }
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object timestamp = ((object)this.milliseconds()).ToString();
            object requestBody = "";
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                request = add(request, add("?", this.urlencode(parameters)));
            }
            object requestData = add(add(add(add(add(method, "\n"), request), "\n"), requestBody), "\n"); // eslint-disable-line quotes
            object auth = add(add(add(add(timestamp, "\n"), nonce), "\n"), requestData); // eslint-disable-line quotes
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
            headers = new Dictionary<string, object>() {
                { "Authorization", add(add(add(add(add(add(add(add("deri-hmac-sha256 id=", this.apiKey), ",ts="), timestamp), ",sig="), signature), ","), "nonce="), nonce) },
            };
        }
        object url = add(getValue(getValue(this.urls, "api"), "rest"), request);
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (!isTrue(response))
        {
            return null;  // fallback to default error handler
        }
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "error": {
        //             "message": "Invalid params",
        //             "data": { reason: "invalid currency", param: "currency" },
        //             "code": -32602
        //         },
        //         "testnet": false,
        //         "usIn": 1583763842150374,
        //         "usOut": 1583763842150410,
        //         "usDiff": 36
        //     }
        //
        object error = this.safeValue(response, "error");
        if (isTrue(!isEqual(error, null)))
        {
            object errorCode = this.safeString(error, "code");
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
