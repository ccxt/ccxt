namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class oceanex : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "oceanex" },
            { "name", "OceanEx" },
            { "countries", new List<object>() {"BS"} },
            { "version", "v1" },
            { "rateLimit", 3000 },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/58385970-794e2d80-8001-11e9-889c-0567cd79b78e.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://api.oceanex.pro" },
                } },
                { "www", "https://www.oceanex.pro.com" },
                { "doc", "https://api.oceanex.pro/doc/v1" },
                { "referral", "https://oceanex.pro/signup?referral=VE24QX" },
            } },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", null },
                { "future", null },
                { "option", null },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "cancelOrders", true },
                { "createMarketOrder", true },
                { "createOrder", true },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchMarkets", true },
                { "fetchOHLCV", true },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", true },
                { "fetchOrders", true },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTransactionFees", null },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1" },
                { "5m", "5" },
                { "15m", "15" },
                { "30m", "30" },
                { "1h", "60" },
                { "2h", "120" },
                { "4h", "240" },
                { "6h", "360" },
                { "12h", "720" },
                { "1d", "1440" },
                { "3d", "4320" },
                { "1w", "10080" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"markets", "tickers/{pair}", "tickers_multi", "order_book", "order_book/multi", "fees/trading", "trades", "timestamp"} },
                    { "post", new List<object>() {"k"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"key", "members/me", "orders", "orders/filter"} },
                    { "post", new List<object>() {"orders", "orders/multi", "order/delete", "order/delete/multi", "orders/clear"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "maker", this.parseNumber("0.001") },
                    { "taker", this.parseNumber("0.001") },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "PLA", "Plair" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "codes", new Dictionary<string, object>() {
                    { "-1", typeof(BadRequest) },
                    { "-2", typeof(BadRequest) },
                    { "1001", typeof(BadRequest) },
                    { "1004", typeof(ArgumentsRequired) },
                    { "1006", typeof(AuthenticationError) },
                    { "1008", typeof(AuthenticationError) },
                    { "1010", typeof(AuthenticationError) },
                    { "1011", typeof(PermissionDenied) },
                    { "2001", typeof(AuthenticationError) },
                    { "2002", typeof(InvalidOrder) },
                    { "2004", typeof(OrderNotFound) },
                    { "9003", typeof(PermissionDenied) },
                } },
                { "exact", new Dictionary<string, object>() {
                    { "market does not have a valid value", typeof(BadRequest) },
                    { "side does not have a valid value", typeof(BadRequest) },
                    { "Account::AccountError: Cannot lock funds", typeof(InsufficientFunds) },
                    { "The account does not exist", typeof(AuthenticationError) },
                } },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchMarkets
        * @description retrieves data on all markets for oceanex
        * @see https://api.oceanex.pro/doc/v1/#markets-post
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "show_details", true },
        };
        object response = await this.publicGetMarkets(this.extend(request, parameters));
        //
        //    {
        //        "id": "xtzusdt",
        //        "name": "XTZ/USDT",
        //        "ask_precision": "8",
        //        "bid_precision": "8",
        //        "enabled": true,
        //        "price_precision": "4",
        //        "amount_precision": "3",
        //        "usd_precision": "4",
        //        "minimum_trading_amount": "1.0"
        //    },
        //
        object markets = this.safeValue(response, "data", new List<object>() {});
        return this.parseMarkets(markets);
    }

    public override object parseMarket(object market)
    {
        object id = this.safeValue(market, "id");
        object name = this.safeValue(market, "name");
        var baseIdquoteIdVariable = ((string)name).Split(new [] {((string)"/")}, StringSplitOptions.None).ToList<object>();
        var baseId = ((IList<object>) baseIdquoteIdVariable)[0];
        var quoteId = ((IList<object>) baseIdquoteIdVariable)[1];
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        baseId = ((string)baseId).ToLower();
        quoteId = ((string)quoteId).ToLower();
        object symbol = add(add(bs, "/"), quote);
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", symbol },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", null },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "amount_precision"))) },
                { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "price_precision"))) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "minimum_trading_amount") },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        };
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://api.oceanex.pro/doc/v1/#ticker-post
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object response = await this.publicGetTickersPair(this.extend(request, parameters));
        //
        //     {
        //         "code":0,
        //         "message":"Operation successful",
        //         "data": {
        //             "at":1559431729,
        //             "ticker": {
        //                 "buy":"0.0065",
        //                 "sell":"0.00677",
        //                 "low":"0.00677",
        //                 "high":"0.00677",
        //                 "last":"0.00677",
        //                 "vol":"2000.0"
        //             }
        //         }
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTicker(data, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://api.oceanex.pro/doc/v1/#multiple-tickers-post
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        if (isTrue(isEqual(symbols, null)))
        {
            symbols = this.symbols;
        }
        object marketIds = this.marketIds(symbols);
        object request = new Dictionary<string, object>() {
            { "markets", marketIds },
        };
        object response = await this.publicGetTickersMulti(this.extend(request, parameters));
        //
        //     {
        //         "code":0,
        //         "message":"Operation successful",
        //         "data": {
        //             "at":1559431729,
        //             "ticker": {
        //                 "buy":"0.0065",
        //                 "sell":"0.00677",
        //                 "low":"0.00677",
        //                 "high":"0.00677",
        //                 "last":"0.00677",
        //                 "vol":"2000.0"
        //             }
        //         }
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object ticker = getValue(data, i);
            object marketId = this.safeString(ticker, "market");
            object market = this.safeMarket(marketId);
            object symbol = getValue(market, "symbol");
            ((IDictionary<string,object>)result)[(string)symbol] = this.parseTicker(ticker, market);
        }
        return this.filterByArrayTickers(result, "symbol", symbols);
    }

    public override object parseTicker(object data, object market = null)
    {
        //
        //         {
        //             "at":1559431729,
        //             "ticker": {
        //                 "buy":"0.0065",
        //                 "sell":"0.00677",
        //                 "low":"0.00677",
        //                 "high":"0.00677",
        //                 "last":"0.00677",
        //                 "vol":"2000.0"
        //             }
        //         }
        //
        object ticker = this.safeValue(data, "ticker", new Dictionary<string, object>() {});
        object timestamp = this.safeTimestamp(data, "at");
        object symbol = this.safeSymbol(null, market);
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "buy") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "sell") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", this.safeString(ticker, "last") },
            { "last", this.safeString(ticker, "last") },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://api.oceanex.pro/doc/v1/#order-book-post
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetOrderBook(this.extend(request, parameters));
        //
        //     {
        //         "code":0,
        //         "message":"Operation successful",
        //         "data": {
        //             "timestamp":1559433057,
        //             "asks": [
        //                 ["100.0","20.0"],
        //                 ["4.74","2000.0"],
        //                 ["1.74","4000.0"],
        //             ],
        //             "bids":[
        //                 ["0.0065","5482873.4"],
        //                 ["0.00649","4781956.2"],
        //                 ["0.00648","2876006.8"],
        //             ],
        //         }
        //     }
        //
        object orderbook = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object timestamp = this.safeTimestamp(orderbook, "timestamp");
        return this.parseOrderBook(orderbook, symbol, timestamp);
    }

    public async override Task<object> fetchOrderBooks(object symbols = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchOrderBooks
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
        * @see https://api.oceanex.pro/doc/v1/#multiple-order-books-post
        * @param {string[]|undefined} symbols list of unified market symbols, all symbols fetched if undefined, default is undefined
        * @param {int} [limit] max number of entries per orderbook to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbol
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(symbols, null)))
        {
            symbols = this.symbols;
        }
        object marketIds = this.marketIds(symbols);
        object request = new Dictionary<string, object>() {
            { "markets", marketIds },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetOrderBookMulti(this.extend(request, parameters));
        //
        //     {
        //         "code":0,
        //         "message":"Operation successful",
        //         "data": [
        //             {
        //                 "timestamp":1559433057,
        //                 "market": "bagvet",
        //                 "asks": [
        //                     ["100.0","20.0"],
        //                     ["4.74","2000.0"],
        //                     ["1.74","4000.0"],
        //                 ],
        //                 "bids":[
        //                     ["0.0065","5482873.4"],
        //                     ["0.00649","4781956.2"],
        //                     ["0.00648","2876006.8"],
        //                 ],
        //             },
        //             ...,
        //         ],
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object orderbook = getValue(data, i);
            object marketId = this.safeString(orderbook, "market");
            object symbol = this.safeSymbol(marketId);
            object timestamp = this.safeTimestamp(orderbook, "timestamp");
            ((IDictionary<string,object>)result)[(string)symbol] = this.parseOrderBook(orderbook, symbol, timestamp);
        }
        return result;
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://api.oceanex.pro/doc/v1/#trades-post
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = mathMin(limit, 1000);
        }
        object response = await this.publicGetTrades(this.extend(request, parameters));
        //
        //      {
        //          "code":0,
        //          "message":"Operation successful",
        //          "data": [
        //              {
        //                  "id":220247666,
        //                  "price":"3098.62",
        //                  "volume":"0.00196",
        //                  "funds":"6.0732952",
        //                  "market":"ethusdt",
        //                  "created_at":"2022-04-19T19:03:15Z",
        //                  "created_on":1650394995,
        //                  "side":"bid"
        //              },
        //          ]
        //      }
        //
        object data = this.safeList(response, "data");
        return this.parseTrades(data, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //      {
        //          "id":220247666,
        //          "price":"3098.62",
        //          "volume":"0.00196",
        //          "funds":"6.0732952",
        //          "market":"ethusdt",
        //          "created_at":"2022-04-19T19:03:15Z",
        //          "created_on":1650394995,
        //          "side":"bid"
        //      }
        //
        object side = this.safeValue(trade, "side");
        if (isTrue(isEqual(side, "bid")))
        {
            side = "buy";
        } else if (isTrue(isEqual(side, "ask")))
        {
            side = "sell";
        }
        object marketId = this.safeValue(trade, "market");
        object symbol = this.safeSymbol(marketId, market);
        object timestamp = this.safeTimestamp(trade, "created_on");
        if (isTrue(isEqual(timestamp, null)))
        {
            timestamp = this.parse8601(this.safeString(trade, "created_at"));
        }
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "volume");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "id", this.safeString(trade, "id") },
            { "order", null },
            { "type", "limit" },
            { "takerOrMaker", null },
            { "side", side },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://api.oceanex.pro/doc/v1/#api-server-time-post
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetTimestamp(parameters);
        //
        //     {"code":0,"message":"Operation successful","data":1559433420}
        //
        return this.safeTimestamp(response, "data");
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://api.oceanex.pro/doc/v1/#trading-fees-post
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetFeesTrading(parameters);
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object group = getValue(data, i);
            object maker = this.safeValue(group, "ask_fee", new Dictionary<string, object>() {});
            object taker = this.safeValue(group, "bid_fee", new Dictionary<string, object>() {});
            object marketId = this.safeString(group, "market");
            object symbol = this.safeSymbol(marketId);
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", group },
                { "symbol", symbol },
                { "maker", this.safeNumber(maker, "value") },
                { "taker", this.safeNumber(taker, "value") },
                { "percentage", true },
            };
        }
        return result;
    }

    public async virtual Task<object> fetchKey(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object response = await this.privateGetKey(parameters);
        return this.safeValue(response, "data");
    }

    public override object parseBalance(object response)
    {
        object data = this.safeValue(response, "data");
        object balances = this.safeValue(data, "accounts", new List<object>() {});
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object i = 0; isLessThan(i, getArrayLength(balances)); postFixIncrement(ref i))
        {
            object balance = getValue(balances, i);
            object currencyId = this.safeValue(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "balance");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "locked");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://api.oceanex.pro/doc/v1/#account-info-post
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetMembersMe(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#createOrder
        * @description create a trade order
        * @see https://api.oceanex.pro/doc/v1/#new-order-post
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "side", side },
            { "ord_type", type },
            { "volume", this.amountToPrecision(symbol, amount) },
        };
        if (isTrue(isEqual(type, "limit")))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        object response = await this.privatePostOrders(this.extend(request, parameters));
        object data = this.safeDict(response, "data");
        return this.parseOrder(data, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://api.oceanex.pro/doc/v1/#order-status-get
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object ids = new List<object>() {id};
        object request = new Dictionary<string, object>() {
            { "ids", ids },
        };
        object response = await this.privateGetOrders(this.extend(request, parameters));
        object data = this.safeValue(response, "data");
        object dataLength = getArrayLength(data);
        if (isTrue(isEqual(data, null)))
        {
            throw new OrderNotFound ((string)add(this.id, " could not found matching order")) ;
        }
        if (isTrue(((id is IList<object>) || (id.GetType().IsGenericType && id.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            object orders = this.parseOrders(data, market);
            return getValue(orders, 0);
        }
        if (isTrue(isEqual(dataLength, 0)))
        {
            throw new OrderNotFound ((string)add(this.id, " could not found matching order")) ;
        }
        return this.parseOrder(getValue(data, 0), market);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://api.oceanex.pro/doc/v1/#order-status-get
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "states", new List<object>() {"wait"} },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://api.oceanex.pro/doc/v1/#order-status-get
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "states", new List<object>() {"done", "cancel"} },
        };
        return await this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://api.oceanex.pro/doc/v1/#order-status-with-filters-post
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object states = this.safeValue(parameters, "states", new List<object>() {"wait", "done", "cancel"});
        object query = this.omit(parameters, "states");
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "states", states },
            { "need_price", "True" },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetOrdersFilter(this.extend(request, query));
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object orders = this.safeValue(getValue(data, i), "orders", new List<object>() {});
            object status = this.parseOrderStatus(this.safeValue(getValue(data, i), "state"));
            object parsedOrders = this.parseOrders(orders, market, since, limit, new Dictionary<string, object>() {
                { "status", status },
            });
            result = this.arrayConcat(result, parsedOrders);
        }
        return result;
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        // [
        //    1559232000,
        //    8889.22,
        //    9028.52,
        //    8889.22,
        //    9028.52
        //    0.3121
        // ]
        return new List<object> {this.safeTimestamp(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://api.oceanex.pro/doc/v1/#k-line-post
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "period", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["timestamp"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = mathMin(limit, 10000);
        }
        object response = await this.publicPostK(this.extend(request, parameters));
        object ohlcvs = this.safeList(response, "data", new List<object>() {});
        return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //     {
        //         "created_at": "2019-01-18T00:38:18Z",
        //         "trades_count": 0,
        //         "remaining_volume": "0.2",
        //         "price": "1001.0",
        //         "created_on": "1547771898",
        //         "side": "buy",
        //         "volume": "0.2",
        //         "state": "wait",
        //         "ord_type": "limit",
        //         "avg_price": "0.0",
        //         "executed_volume": "0.0",
        //         "id": 473797,
        //         "market": "veteth"
        //     }
        //
        object status = this.parseOrderStatus(this.safeValue(order, "state"));
        object marketId = this.safeString2(order, "market", "market_id");
        object symbol = this.safeSymbol(marketId, market);
        object timestamp = this.safeTimestamp(order, "created_on");
        if (isTrue(isEqual(timestamp, null)))
        {
            timestamp = this.parse8601(this.safeString(order, "created_at"));
        }
        object price = this.safeString(order, "price");
        object average = this.safeString(order, "avg_price");
        object amount = this.safeString(order, "volume");
        object remaining = this.safeString(order, "remaining_volume");
        object filled = this.safeString(order, "executed_volume");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString(order, "id") },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", this.safeValue(order, "ord_type") },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", this.safeValue(order, "side") },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "average", average },
            { "amount", amount },
            { "remaining", remaining },
            { "filled", filled },
            { "status", status },
            { "cost", null },
            { "trades", null },
            { "fee", null },
        }, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "wait", "open" },
            { "done", "closed" },
            { "cancel", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#cancelOrder
        * @description cancels an open order
        * @see https://api.oceanex.pro/doc/v1/#cancel-order-post
        * @param {string} id order id
        * @param {string} symbol not used by oceanex cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostOrderDelete(this.extend(new Dictionary<string, object>() {
            { "id", id },
        }, parameters));
        object data = this.safeDict(response, "data");
        return this.parseOrder(data);
    }

    public async virtual Task<object> cancelOrders(object ids, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#cancelOrders
        * @description cancel multiple orders
        * @see https://api.oceanex.pro/doc/v1/#cancel-multiple-orders-post
        * @param {string[]} ids order ids
        * @param {string} symbol not used by oceanex cancelOrders ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostOrderDeleteMulti(this.extend(new Dictionary<string, object>() {
            { "ids", ids },
        }, parameters));
        object data = this.safeList(response, "data");
        return this.parseOrders(data);
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name oceanex#cancelAllOrders
        * @description cancel all open orders
        * @see https://api.oceanex.pro/doc/v1/#cancel-all-orders-post
        * @param {string} symbol unified market symbol, only orders in the market of this symbol are cancelled when symbol is not undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostOrdersClear(parameters);
        object data = this.safeList(response, "data");
        return this.parseOrders(data);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.version), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(isTrue(isEqual(path, "tickers_multi")) || isTrue(isEqual(path, "order_book/multi"))))
            {
                object request = "?";
                object markets = this.safeValue(parameters, "markets");
                for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
                {
                    request = add(request, add(add("markets[]=", getValue(markets, i)), "&"));
                }
                object limit = this.safeValue(parameters, "limit");
                if (isTrue(!isEqual(limit, null)))
                {
                    request = add(request, add("limit=", limit));
                }
                url = add(url, request);
            } else if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object request = new Dictionary<string, object>() {
                { "uid", this.apiKey },
                { "data", query },
            };
            // to set the private key:
            // const fs = require ('fs')
            // exchange.secret = fs.readFileSync ('oceanex.pem', 'utf8')
            object jwt_token = jwt(request, this.encode(this.secret), sha256, true);
            url = add(url, add("?user_jwt=", jwt_token));
        }
        headers = new Dictionary<string, object>() {
            { "Content-Type", "application/json" },
        };
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        //
        //     {"code":1011,"message":"This IP 'x.x.x.x' is not allowed","data":{}}
        //
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        object errorCode = this.safeString(response, "code");
        object message = this.safeString(response, "message");
        if (isTrue(isTrue((!isEqual(errorCode, null))) && isTrue((!isEqual(errorCode, "0")))))
        {
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "codes"), errorCode, feedback);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
