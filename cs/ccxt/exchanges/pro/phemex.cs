namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class phemex { public phemex(object args = null) : base(args) { } }
public partial class phemex : ccxt.phemex
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchTicker", true },
                { "watchTickers", false },
                { "watchTrades", true },
                { "watchMyTrades", true },
                { "watchOrders", true },
                { "watchOrderBook", true },
                { "watchOHLCV", true },
                { "watchPositions", null },
                { "watchOrderBookForSymbols", false },
                { "watchTradesForSymbols", false },
                { "watchOHLCVForSymbols", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "test", new Dictionary<string, object>() {
                    { "ws", "wss://testnet-api.phemex.com/ws" },
                } },
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://ws.phemex.com" },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "tradesLimit", 1000 },
                { "OHLCVLimit", 1000 },
            } },
            { "streaming", new Dictionary<string, object>() {
                { "keepAlive", 10000 },
            } },
        });
    }

    public override object fromEn(object en, object scale)
    {
        if (isTrue(isEqual(en, null)))
        {
            return null;
        }
        var precise = new Precise(en);
        precise.decimals = this.sum(precise.decimals, scale);
        precise.reduce();
        return ((object)precise).ToString();
    }

    public override object fromEp(object ep, object market = null)
    {
        if (isTrue(isTrue((isEqual(ep, null))) || isTrue((isEqual(market, null)))))
        {
            return ep;
        }
        return this.fromEn(ep, this.safeInteger(market, "priceScale"));
    }

    public override object fromEv(object ev, object market = null)
    {
        if (isTrue(isTrue((isEqual(ev, null))) || isTrue((isEqual(market, null)))))
        {
            return ev;
        }
        return this.fromEn(ev, this.safeInteger(market, "valueScale"));
    }

    public override object fromEr(object er, object market = null)
    {
        if (isTrue(isTrue((isEqual(er, null))) || isTrue((isEqual(market, null)))))
        {
            return er;
        }
        return this.fromEn(er, this.safeInteger(market, "ratioScale"));
    }

    public virtual object requestId()
    {
        object requestId = this.sum(this.safeInteger(this.options, "requestId", 0), 1);
        ((IDictionary<string,object>)this.options)["requestId"] = requestId;
        return requestId;
    }

    public virtual object parseSwapTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "close": 442800,
        //         "fundingRate": 10000,
        //         "high": 445400,
        //         "indexPrice": 442621,
        //         "low": 428400,
        //         "markPrice": 442659,
        //         "open": 432200,
        //         "openInterest": 744183,
        //         "predFundingRate": 10000,
        //         "symbol": "LTCUSD",
        //         "turnover": 8133238294,
        //         "volume": 934292
        //     }
        //
        object marketId = this.safeString(ticker, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object timestamp = this.safeIntegerProduct(ticker, "timestamp", 0.000001);
        object lastString = this.fromEp(this.safeString(ticker, "close"), market);
        object last = this.parseNumber(lastString);
        object quoteVolume = this.parseNumber(this.fromEv(this.safeString(ticker, "turnover"), market));
        object baseVolume = this.parseNumber(this.fromEv(this.safeString(ticker, "volume"), market));
        object change = null;
        object percentage = null;
        object average = null;
        object openString = this.omitZero(this.fromEp(this.safeString(ticker, "open"), market));
        object open = this.parseNumber(openString);
        if (isTrue(isTrue((!isEqual(openString, null))) && isTrue((!isEqual(lastString, null)))))
        {
            change = this.parseNumber(Precise.stringSub(lastString, openString));
            average = this.parseNumber(Precise.stringDiv(Precise.stringAdd(lastString, openString), "2"));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringSub(Precise.stringDiv(lastString, openString), "1"), "100"));
        }
        object result = new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.parseNumber(this.fromEp(this.safeString(ticker, "high"), market)) },
            { "low", this.parseNumber(this.fromEp(this.safeString(ticker, "low"), market)) },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", change },
            { "percentage", percentage },
            { "average", average },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        };
        return result;
    }

    public virtual object parsePerpetualTicker(object ticker, object market = null)
    {
        //
        //    [
        //        "STXUSDT",
        //        "0.64649",
        //        "0.8628",
        //        "0.61215",
        //        "0.71737",
        //        "4519387",
        //        "3210827.98166",
        //        "697635",
        //        "0.71720205",
        //        "0.71720205",
        //        "0.0001",
        //        "0.0001",
        //    ]
        //
        object marketId = this.safeString(ticker, 0);
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object lastString = this.fromEp(this.safeString(ticker, 4), market);
        object last = this.parseNumber(lastString);
        object quoteVolume = this.parseNumber(this.fromEv(this.safeString(ticker, 6), market));
        object baseVolume = this.parseNumber(this.fromEv(this.safeString(ticker, 5), market));
        object change = null;
        object percentage = null;
        object average = null;
        object openString = this.omitZero(this.fromEp(this.safeString(ticker, 1), market));
        object open = this.parseNumber(openString);
        if (isTrue(isTrue((!isEqual(openString, null))) && isTrue((!isEqual(lastString, null)))))
        {
            change = this.parseNumber(Precise.stringSub(lastString, openString));
            average = this.parseNumber(Precise.stringDiv(Precise.stringAdd(lastString, openString), "2"));
            percentage = this.parseNumber(Precise.stringMul(Precise.stringSub(Precise.stringDiv(lastString, openString), "1"), "100"));
        }
        object result = new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "high", this.parseNumber(this.fromEp(this.safeString(ticker, 2), market)) },
            { "low", this.parseNumber(this.fromEp(this.safeString(ticker, 3), market)) },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", change },
            { "percentage", percentage },
            { "average", average },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        };
        return result;
    }

    public virtual void handleTicker(WebSocketClient client, object message)
    {
        //
        //     {
        //         "spot_market24h": {
        //             "askEp": 958148000000,
        //             "bidEp": 957884000000,
        //             "highEp": 962000000000,
        //             "lastEp": 958220000000,
        //             "lowEp": 928049000000,
        //             "openEp": 935597000000,
        //             "symbol": "sBTCUSDT",
        //             "turnoverEv": 146074214388978,
        //             "volumeEv": 15492228900
        //         },
        //         "timestamp": 1592847265888272100
        //     }
        //
        // swap
        //
        //     {
        //         "market24h": {
        //             "close": 442800,
        //             "fundingRate": 10000,
        //             "high": 445400,
        //             "indexPrice": 442621,
        //             "low": 428400,
        //             "markPrice": 442659,
        //             "open": 432200,
        //             "openInterest": 744183,
        //             "predFundingRate": 10000,
        //             "symbol": "LTCUSD",
        //             "turnover": 8133238294,
        //             "volume": 934292
        //         },
        //         "timestamp": 1592845585373374500
        //     }
        //
        // perpetual
        //
        //    {
        //        "data": [
        //            [
        //                "STXUSDT",
        //                "0.64649",
        //                "0.8628",
        //                "0.61215",
        //                "0.71737",
        //                "4519387",
        //                "3210827.98166",
        //                "697635",
        //                "0.71720205",
        //                "0.71720205",
        //                "0.0001",
        //                "0.0001",
        //            ],
        //            ...
        //        ],
        //        "fields": [
        //            "symbol",
        //            "openRp",
        //            "highRp",
        //            "lowRp",
        //            "lastRp",
        //            "volumeRq",
        //            "turnoverRv",
        //            "openInterestRv",
        //            "indexRp",
        //            "markRp",
        //            "fundingRateRr",
        //            "predFundingRateRr",
        //        ],
        //        "method": "perp_market24h_pack_p.update",
        //        "timestamp": "1677094918686806209",
        //        "type": "snapshot",
        //    }
        //
        object tickers = new List<object>() {};
        if (isTrue(inOp(message, "market24h")))
        {
            object ticker = this.safeValue(message, "market24h");
            ((IList<object>)tickers).Add(this.parseSwapTicker(ticker));
        } else if (isTrue(inOp(message, "spot_market24h")))
        {
            object ticker = this.safeValue(message, "spot_market24h");
            ((IList<object>)tickers).Add(this.parseTicker(ticker));
        } else if (isTrue(inOp(message, "data")))
        {
            object data = this.safeValue(message, "data", new List<object>() {});
            for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
            {
                ((IList<object>)tickers).Add(this.parsePerpetualTicker(getValue(data, i)));
            }
        }
        for (object i = 0; isLessThan(i, getArrayLength(tickers)); postFixIncrement(ref i))
        {
            object ticker = getValue(tickers, i);
            object symbol = getValue(ticker, "symbol");
            object messageHash = add("ticker:", symbol);
            object timestamp = this.safeIntegerProduct(message, "timestamp", 0.000001);
            ((IDictionary<string,object>)ticker)["timestamp"] = timestamp;
            ((IDictionary<string,object>)ticker)["datetime"] = this.iso8601(timestamp);
            ((IDictionary<string,object>)this.tickers)[(string)symbol] = ticker;
            callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, messageHash});
        }
    }

    public async override Task<object> watchBalance(object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchBalance
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#subscribe-account-order-position-aop
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#subscribe-account-order-position-aop
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Spot-API-en.md#subscribe-wallet-order-messages
        * @description watch balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.settle] set to USDT to use hedged perpetual api
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("watchBalance", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object usePerpetualApi = isEqual(this.safeString(parameters, "settle"), "USDT");
        object messageHash = ":balance";
        messageHash = ((bool) isTrue(usePerpetualApi)) ? add("perpetual", messageHash) : add(type, messageHash);
        return await this.subscribePrivate(type, messageHash, parameters);
    }

    public virtual void handleBalance(object type, object client, object message)
    {
        // spot
        //    [
        //       {
        //           "balanceEv": 0,
        //           "currency": "BTC",
        //           "lastUpdateTimeNs": "1650442638722099092",
        //           "lockedTradingBalanceEv": 0,
        //           "lockedWithdrawEv": 0,
        //           "userID": 2647224
        //         },
        //         {
        //           "balanceEv": 1154232337,
        //           "currency": "USDT",
        //           "lastUpdateTimeNs": "1650442617610017597",
        //           "lockedTradingBalanceEv": 0,
        //           "lockedWithdrawEv": 0,
        //           "userID": 2647224
        //         }
        //    ]
        // swap
        //    [
        //        {
        //            "accountBalanceEv": 0,
        //            "accountID": 26472240001,
        //            "bonusBalanceEv": 0,
        //            "currency": "BTC",
        //            "totalUsedBalanceEv": 0,
        //            "userID": 2647224
        //        }
        //    ]
        // perpetual
        //    [
        //        {
        //            "accountBalanceRv": "1508.452588802237",
        //            "accountID": 9328670003,
        //            "bonusBalanceRv": "0",
        //            "currency": "USDT",
        //            "totalUsedBalanceRv": "343.132599666883",
        //            "userID": 932867
        //        }
        //    ]
        //
        ((IDictionary<string,object>)this.balance)["info"] = message;
        for (object i = 0; isLessThan(i, getArrayLength(message)); postFixIncrement(ref i))
        {
            object balance = getValue(message, i);
            object currencyId = this.safeString(balance, "currency");
            object code = this.safeCurrencyCode(currencyId);
            object currency = this.safeValue(this.currencies, code, new Dictionary<string, object>() {});
            object scale = this.safeInteger(currency, "valueScale", 8);
            object account = this.account();
            object used = this.safeString(balance, "totalUsedBalanceRv");
            if (isTrue(isEqual(used, null)))
            {
                object usedEv = this.safeString(balance, "totalUsedBalanceEv");
                if (isTrue(isEqual(usedEv, null)))
                {
                    object lockedTradingBalanceEv = this.safeString(balance, "lockedTradingBalanceEv");
                    object lockedWithdrawEv = this.safeString2(balance, "lockedWithdrawEv", "lockedWithdrawRv");
                    usedEv = Precise.stringAdd(lockedTradingBalanceEv, lockedWithdrawEv);
                }
                used = this.fromEn(usedEv, scale);
            }
            object total = this.safeString(balance, "accountBalanceRv");
            if (isTrue(isEqual(total, null)))
            {
                object totalEv = this.safeString2(balance, "accountBalanceEv", "balanceEv");
                total = this.fromEn(totalEv, scale);
            }
            ((IDictionary<string,object>)account)["used"] = used;
            ((IDictionary<string,object>)account)["total"] = total;
            ((IDictionary<string,object>)this.balance)[(string)code] = account;
            this.balance = this.safeBalance(this.balance);
        }
        object messageHash = add(type, ":balance");
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.balance, messageHash});
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        //     {
        //         "sequence": 1795484727,
        //         "symbol": "sBTCUSDT",
        //         "trades": [
        //             [ 1592891002064516600, "Buy", 964020000000, 1431000 ],
        //             [ 1592890978987934500, "Sell", 963704000000, 1401800 ],
        //             [ 1592890972918701800, "Buy", 963938000000, 2018600 ],
        //         ],
        //         "type": "snapshot"
        //     }
        //  perpetual
        //     {
        //         "sequence": 1230197759,
        //         "symbol": "BTCUSDT",
        //         "trades_p": [
        //             [
        //                 1677094244729433000,
        //                 "Buy",
        //                 "23800.4",
        //                 "2.455",
        //             ],
        //         ],
        //         "type": "snapshot",
        //     }
        //
        object name = "trade";
        object marketId = this.safeString(message, "symbol");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object messageHash = add(add(name, ":"), symbol);
        object stored = this.safeValue(this.trades, symbol);
        if (isTrue(isEqual(stored, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object trades = this.safeValue2(message, "trades", "trades_p", new List<object>() {});
        object parsed = this.parseTrades(trades, market);
        for (object i = 0; isLessThan(i, getArrayLength(parsed)); postFixIncrement(ref i))
        {
            callDynamically(stored, "append", new object[] {getValue(parsed, i)});
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
    }

    public virtual void handleOHLCV(WebSocketClient client, object message)
    {
        //
        //     {
        //         "kline": [
        //             [ 1592905200, 60, 960688000000, 960709000000, 960709000000, 960400000000, 960400000000, 848100, 8146756046 ],
        //             [ 1592905140, 60, 960718000000, 960716000000, 960717000000, 960560000000, 960688000000, 4284900, 41163743512 ],
        //             [ 1592905080, 60, 960513000000, 960684000000, 960718000000, 960684000000, 960718000000, 4880500, 46887494349 ],
        //         ],
        //         "sequence": 1804401474,
        //         "symbol": "sBTCUSDT",
        //         "type": "snapshot"
        //     }
        // perpetual
        //     {
        //         "kline_p": [
        //             [
        //                 1677094560,
        //                 60,
        //                 "23746.2",
        //                 "23746.1",
        //                 "23757.6",
        //                 "23736.9",
        //                 "23754.8",
        //                 "34.273",
        //                 "813910.208",
        //             ],
        //         ],
        //         "sequence": 1230786017,
        //         "symbol": "BTCUSDT",
        //         "type": "incremental",
        //     }
        //
        object marketId = this.safeString(message, "symbol");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object candles = this.safeValue2(message, "kline", "kline_p", new List<object>() {});
        object first = this.safeValue(candles, 0, new List<object>() {});
        object interval = this.safeString(first, 1);
        object timeframe = this.findTimeframe(interval);
        if (isTrue(!isEqual(timeframe, null)))
        {
            object messageHash = add(add(add("kline:", timeframe), ":"), symbol);
            object ohlcvs = this.parseOHLCVs(candles, market);
            ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = this.safeValue(this.ohlcvs, symbol, new Dictionary<string, object>() {});
            object stored = this.safeValue(getValue(this.ohlcvs, symbol), timeframe);
            if (isTrue(isEqual(stored, null)))
            {
                object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
                stored = new ArrayCacheByTimestamp(limit);
                ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))[(string)timeframe] = stored;
            }
            for (object i = 0; isLessThan(i, getArrayLength(ohlcvs)); postFixIncrement(ref i))
            {
                object candle = getValue(ohlcvs, i);
                callDynamically(stored, "append", new object[] {candle});
            }
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
        }
    }

    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchTicker
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#subscribe-24-hours-ticker
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#subscribe-24-hours-ticker
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Spot-API-en.md#subscribe-24-hours-ticker
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object isSwap = getValue(market, "swap");
        object settleIsUSDT = isEqual(getValue(market, "settle"), "USDT");
        object name = "spot_market24h";
        if (isTrue(isSwap))
        {
            name = ((bool) isTrue(settleIsUSDT)) ? "perp_market24h_pack_p" : "market24h";
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object requestId = this.requestId();
        object subscriptionHash = add(name, ".subscribe");
        object messageHash = add("ticker:", symbol);
        object subscribe = new Dictionary<string, object>() {
            { "method", subscriptionHash },
            { "id", requestId },
            { "params", new List<object>() {} },
        };
        object request = this.deepExtend(subscribe, parameters);
        return await this.watch(url, messageHash, request, subscriptionHash);
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchTrades
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#subscribe-trade
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#subscribe-trade
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Spot-API-en.md#subscribe-trade
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object url = getValue(getValue(this.urls, "api"), "ws");
        object requestId = this.requestId();
        object isSwap = getValue(market, "swap");
        object settleIsUSDT = isEqual(getValue(market, "settle"), "USDT");
        object name = ((bool) isTrue((isTrue(isSwap) && isTrue(settleIsUSDT)))) ? "trade_p" : "trade";
        object messageHash = add("trade:", symbol);
        object method = add(name, ".subscribe");
        object subscribe = new Dictionary<string, object>() {
            { "method", method },
            { "id", requestId },
            { "params", new List<object>() {getValue(market, "id")} },
        };
        object request = this.deepExtend(subscribe, parameters);
        object trades = await this.watch(url, messageHash, request, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchOrderBook
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Spot-API-en.md#subscribe-orderbook
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#subscribe-orderbook-for-new-model
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#subscribe-30-levels-orderbook
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#subscribe-full-orderbook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object url = getValue(getValue(this.urls, "api"), "ws");
        object requestId = this.requestId();
        object isSwap = getValue(market, "swap");
        object settleIsUSDT = isEqual(getValue(market, "settle"), "USDT");
        object name = ((bool) isTrue((isTrue(isSwap) && isTrue(settleIsUSDT)))) ? "orderbook_p" : "orderbook";
        object messageHash = add("orderbook:", symbol);
        object method = add(name, ".subscribe");
        object subscribe = new Dictionary<string, object>() {
            { "method", method },
            { "id", requestId },
            { "params", new List<object>() {getValue(market, "id")} },
        };
        object request = this.deepExtend(subscribe, parameters);
        object orderbook = await this.watch(url, messageHash, request, messageHash);
        return (orderbook as IOrderBook).limit();
    }

    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchOHLCV
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Hedged-Perpetual-API.md#subscribe-kline
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Contract-API-en.md#subscribe-kline
        * @see https://github.com/phemex/phemex-api-docs/blob/master/Public-Spot-API-en.md#subscribe-kline
        * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object url = getValue(getValue(this.urls, "api"), "ws");
        object requestId = this.requestId();
        object isSwap = getValue(market, "swap");
        object settleIsUSDT = isEqual(getValue(market, "settle"), "USDT");
        object name = ((bool) isTrue((isTrue(isSwap) && isTrue(settleIsUSDT)))) ? "kline_p" : "kline";
        object messageHash = add(add(add("kline:", timeframe), ":"), symbol);
        object method = add(name, ".subscribe");
        object subscribe = new Dictionary<string, object>() {
            { "method", method },
            { "id", requestId },
            { "params", new List<object>() {getValue(market, "id"), this.safeInteger(this.timeframes, timeframe)} },
        };
        object request = this.deepExtend(subscribe, parameters);
        object ohlcv = await this.watch(url, messageHash, request, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(ohlcv, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }

    public virtual void customHandleDelta(object bookside, object delta, object market = null)
    {
        object bidAsk = this.customParseBidAsk(delta, 0, 1, market);
        (bookside as IOrderBookSide).storeArray(bidAsk);
    }

    public virtual void customHandleDeltas(object bookside, object deltas, object market = null)
    {
        for (object i = 0; isLessThan(i, getArrayLength(deltas)); postFixIncrement(ref i))
        {
            this.customHandleDelta(bookside, getValue(deltas, i), market);
        }
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        //     {
        //         "book": {
        //             "asks": [
        //                 [ 960316000000, 6993800 ],
        //                 [ 960318000000, 13183000 ],
        //                 [ 960319000000, 9170200 ],
        //             ],
        //             "bids": [
        //                 [ 959941000000, 8385300 ],
        //                 [ 959939000000, 10296600 ],
        //                 [ 959930000000, 3672400 ],
        //             ]
        //         },
        //         "depth": 30,
        //         "sequence": 1805784701,
        //         "symbol": "sBTCUSDT",
        //         "timestamp": 1592908460404461600,
        //         "type": "snapshot"
        //     }
        //  perpetual
        //    {
        //        "depth": 30,
        //        "orderbook_p": {
        //            "asks": [
        //                [
        //                    "23788.5",
        //                    "0.13",
        //                ],
        //            ],
        //            "bids": [
        //                [
        //                    "23787.8",
        //                    "1.836",
        //                ],
        //            ],
        //        },
        //        "sequence": 1230347368,
        //        "symbol": "BTCUSDT",
        //        "timestamp": "1677093457306978852",
        //        "type": "snapshot",
        //    }
        //
        object marketId = this.safeString(message, "symbol");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object type = this.safeString(message, "type");
        object depth = this.safeInteger(message, "depth");
        object name = "orderbook";
        object messageHash = add(add(name, ":"), symbol);
        object nonce = this.safeInteger(message, "sequence");
        object timestamp = this.safeIntegerProduct(message, "timestamp", 0.000001);
        if (isTrue(isEqual(type, "snapshot")))
        {
            object book = this.safeValue2(message, "book", "orderbook_p", new Dictionary<string, object>() {});
            object snapshot = this.customParseOrderBook(book, symbol, timestamp, "bids", "asks", 0, 1, market);
            ((IDictionary<string,object>)snapshot)["nonce"] = nonce;
            object orderbook = this.orderBook(snapshot, depth);
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = orderbook;
            callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
        } else
        {
            if (isTrue(inOp(this.orderbooks, symbol)))
            {
                object orderbook = getValue(this.orderbooks, symbol);
                object changes = this.safeDict2(message, "book", "orderbook_p", new Dictionary<string, object>() {});
                object asks = this.safeList(changes, "asks", new List<object>() {});
                object bids = this.safeList(changes, "bids", new List<object>() {});
                this.customHandleDeltas(getValue(orderbook, "asks"), asks, market);
                this.customHandleDeltas(getValue(orderbook, "bids"), bids, market);
                ((IDictionary<string,object>)orderbook)["nonce"] = nonce;
                ((IDictionary<string,object>)orderbook)["timestamp"] = timestamp;
                ((IDictionary<string,object>)orderbook)["datetime"] = this.iso8601(timestamp);
                ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = orderbook;
                callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
            }
        }
    }

    public async override Task<object> watchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchMyTrades
        * @description watches information on multiple trades made by the user
        * @param {string} symbol unified market symbol of the market trades were made in
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object type = null;
        object messageHash = "trades:";
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
            messageHash = add(messageHash, getValue(market, "symbol"));
            if (isTrue(isEqual(getValue(market, "settle"), "USDT")))
            {
                parameters = this.extend(parameters);
                ((IDictionary<string,object>)parameters)["settle"] = "USDT";
            }
        }
        var typeparametersVariable = this.handleMarketTypeAndParams("watchMyTrades", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        if (isTrue(isEqual(symbol, null)))
        {
            object settle = this.safeString(parameters, "settle");
            messageHash = ((bool) isTrue((isEqual(settle, "USDT")))) ? (add(messageHash, "perpetual")) : (add(messageHash, type));
        }
        object trades = await this.subscribePrivate(type, messageHash, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }

    public virtual void handleMyTrades(WebSocketClient client, object message)
    {
        //
        // swap
        //    [
        //        {
        //            "avgPriceEp":4138763000000,
        //            "baseCurrency":"BTC",
        //            "baseQtyEv":0,
        //            "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
        //            "execBaseQtyEv":30100,
        //            "execFeeEv":31,
        //            "execID":"d3b10cfa-84e3-5752-828e-78a79617e598",
        //            "execPriceEp":4138763000000,
        //            "execQuoteQtyEv":1245767663,
        //            "feeCurrency":"BTC",
        //            "lastLiquidityInd":"RemovedLiquidity",
        //            "ordType":"Market",
        //            "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
        //            "priceEp":4549022000000,
        //            "qtyType":"ByQuote",
        //            "quoteCurrency":"USDT",
        //            "quoteQtyEv":1248000000,
        //            "side":"Buy",
        //            "symbol":"sBTCUSDT",
        //            "tradeType":"Trade",
        //            "transactTimeNs":"1650442617609928764",
        //            "userID":2647224
        //        }
        //    ]
        // perpetual
        //    [
        //        {
        //            "accountID": 9328670003,
        //            "action": "New",
        //            "actionBy": "ByUser",
        //            "actionTimeNs": 1666858780876924611,
        //            "addedSeq": 77751555,
        //            "apRp": "0",
        //            "bonusChangedAmountRv": "0",
        //            "bpRp": "0",
        //            "clOrdID": "c0327a7d-9064-62a9-28f6-2db9aaaa04e0",
        //            "closedPnlRv": "0",
        //            "closedSize": "0",
        //            "code": 0,
        //            "cumFeeRv": "0",
        //            "cumQty": "0",
        //            "cumValueRv": "0",
        //            "curAccBalanceRv": "1508.489893982237",
        //            "curAssignedPosBalanceRv": "24.62786650928",
        //            "curBonusBalanceRv": "0",
        //            "curLeverageRr": "-10",
        //            "curPosSide": "Buy",
        //            "curPosSize": "0.043",
        //            "curPosTerm": 1,
        //            "curPosValueRv": "894.0689",
        //            "curRiskLimitRv": "1000000",
        //            "currency": "USDT",
        //            "cxlRejReason": 0,
        //            "displayQty": "0.003",
        //            "execFeeRv": "0",
        //            "execID": "00000000-0000-0000-0000-000000000000",
        //            "execPriceRp": "20723.7",
        //            "execQty": "0",
        //            "execSeq": 77751555,
        //            "execStatus": "New",
        //            "execValueRv": "0",
        //            "feeRateRr": "0",
        //            "leavesQty": "0.003",
        //            "leavesValueRv": "63.4503",
        //            "message": "No error",
        //            "ordStatus": "New",
        //            "ordType": "Market",
        //            "orderID": "fa64c6f2-47a4-4929-aab4-b7fa9bbc4323",
        //            "orderQty": "0.003",
        //            "pegOffsetValueRp": "0",
        //            "posSide": "Long",
        //            "priceRp": "21150.1",
        //            "relatedPosTerm": 1,
        //            "relatedReqNum": 11,
        //            "side": "Buy",
        //            "slTrigger": "ByMarkPrice",
        //            "stopLossRp": "0",
        //            "stopPxRp": "0",
        //            "symbol": "BTCUSDT",
        //            "takeProfitRp": "0",
        //            "timeInForce": "ImmediateOrCancel",
        //            "tpTrigger": "ByLastPrice",
        //            "tradeType": "Amend",
        //            "transactTimeNs": 1666858780881545305,
        //            "userID": 932867
        //        },
        //        ...
        //    ]
        //
        object channel = "trades";
        object tradesLength = getArrayLength(message);
        if (isTrue(isEqual(tradesLength, 0)))
        {
            return;
        }
        object cachedTrades = this.myTrades;
        if (isTrue(isEqual(cachedTrades, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            cachedTrades = new ArrayCacheBySymbolById(limit);
        }
        object marketIds = new Dictionary<string, object>() {};
        object type = null;
        for (object i = 0; isLessThan(i, getArrayLength(message)); postFixIncrement(ref i))
        {
            object rawTrade = getValue(message, i);
            object marketId = this.safeString(rawTrade, "symbol");
            object market = this.safeMarket(marketId);
            object parsed = this.parseTrade(rawTrade);
            callDynamically(cachedTrades, "append", new object[] {parsed});
            object symbol = getValue(parsed, "symbol");
            if (isTrue(isEqual(type, null)))
            {
                type = ((bool) isTrue((isEqual(getValue(market, "settle"), "USDT")))) ? "perpetual" : getValue(market, "type");
            }
            ((IDictionary<string,object>)marketIds)[(string)symbol] = true;
        }
        object keys = new List<object>(((IDictionary<string,object>)marketIds).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object market = getValue(keys, i);
            object hash = add(add(channel, ":"), market);
            callDynamically(client as WebSocketClient, "resolve", new object[] {cachedTrades, hash});
        }
        // generic subscription
        object messageHash = add(add(channel, ":"), type);
        callDynamically(client as WebSocketClient, "resolve", new object[] {cachedTrades, messageHash});
    }

    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name phemex#watchOrders
        * @description watches information on multiple orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object messageHash = "orders:";
        object market = null;
        object type = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
            messageHash = add(messageHash, getValue(market, "symbol"));
            if (isTrue(isEqual(getValue(market, "settle"), "USDT")))
            {
                parameters = this.extend(parameters);
                ((IDictionary<string,object>)parameters)["settle"] = "USDT";
            }
        }
        var typeparametersVariable = this.handleMarketTypeAndParams("watchOrders", market, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object isUSDTSettled = isEqual(this.safeString(parameters, "settle"), "USDT");
        if (isTrue(isEqual(symbol, null)))
        {
            messageHash = ((bool) isTrue((isUSDTSettled))) ? (add(messageHash, "perpetual")) : (add(messageHash, type));
        }
        object orders = await this.subscribePrivate(type, messageHash, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }

    public virtual void handleOrders(WebSocketClient client, object message)
    {
        // spot update
        // {
        //        "closed":[
        //           {
        //              "action":"New",
        //              "avgPriceEp":4138763000000,
        //              "baseCurrency":"BTC",
        //              "baseQtyEv":0,
        //              "bizError":0,
        //              "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
        //              "createTimeNs":"1650442617606017583",
        //              "cumBaseQtyEv":30100,
        //              "cumFeeEv":31,
        //              "cumQuoteQtyEv":1245767663,
        //              "cxlRejReason":0,
        //              "feeCurrency":"BTC",
        //              "leavesBaseQtyEv":0,
        //              "leavesQuoteQtyEv":0,
        //              "ordStatus":"Filled",
        //              "ordType":"Market",
        //              "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
        //              "pegOffsetValueEp":0,
        //              "priceEp":4549022000000,
        //              "qtyType":"ByQuote",
        //              "quoteCurrency":"USDT",
        //              "quoteQtyEv":1248000000,
        //              "side":"Buy",
        //              "stopPxEp":0,
        //              "symbol":"sBTCUSDT",
        //              "timeInForce":"ImmediateOrCancel",
        //              "tradeType":"Trade",
        //              "transactTimeNs":"1650442617609928764",
        //              "triggerTimeNs":0,
        //              "userID":2647224
        //           }
        //        ],
        //        "fills":[
        //           {
        //              "avgPriceEp":4138763000000,
        //              "baseCurrency":"BTC",
        //              "baseQtyEv":0,
        //              "clOrdID":"7956e0be-e8be-93a0-2887-ca504d85cda2",
        //              "execBaseQtyEv":30100,
        //              "execFeeEv":31,
        //              "execID":"d3b10cfa-84e3-5752-828e-78a79617e598",
        //              "execPriceEp":4138763000000,
        //              "execQuoteQtyEv":1245767663,
        //              "feeCurrency":"BTC",
        //              "lastLiquidityInd":"RemovedLiquidity",
        //              "ordType":"Market",
        //              "orderID":"34a4b1a8-ac3a-4580-b3e6-a6d039f27195",
        //              "priceEp":4549022000000,
        //              "qtyType":"ByQuote",
        //              "quoteCurrency":"USDT",
        //              "quoteQtyEv":1248000000,
        //              "side":"Buy",
        //              "symbol":"sBTCUSDT",
        //              "tradeType":"Trade",
        //              "transactTimeNs":"1650442617609928764",
        //              "userID":2647224
        //           }
        //        ],
        //        "open":[
        //           {
        //              "action":"New",
        //              "avgPriceEp":0,
        //              "baseCurrency":"LTC",
        //              "baseQtyEv":0,
        //              "bizError":0,
        //              "clOrdID":"2c0e5eb5-efb7-60d3-2e5f-df175df412ef",
        //              "createTimeNs":"1650446670073853755",
        //              "cumBaseQtyEv":0,
        //              "cumFeeEv":0,
        //              "cumQuoteQtyEv":0,
        //              "cxlRejReason":0,
        //              "feeCurrency":"LTC",
        //              "leavesBaseQtyEv":0,
        //              "leavesQuoteQtyEv":1000000000,
        //              "ordStatus":"New",
        //              "ordType":"Limit",
        //              "orderID":"d2aad92f-50f5-441a-957b-8184b146e3fb",
        //              "pegOffsetValueEp":0,
        //              "priceEp":5000000000,
        //              "qtyType":"ByQuote",
        //              "quoteCurrency":"USDT",
        //              "quoteQtyEv":1000000000,
        //              "side":"Buy",
        //            }
        //        ]
        //  },
        // perpetual
        //    [
        //        {
        //          "accountID": 40183400003,
        //          "action": "New",
        //          "actionBy": "ByUser",
        //          "actionTimeNs": "1674110665380190869",
        //          "addedSeq": 678760103,
        //          "apRp": "0",
        //          "bonusChangedAmountRv": "0",
        //          "bpRp": "0",
        //          "clOrdID": '',
        //          "cl_req_code": 0,
        //          "closedPnlRv": "0",
        //          "closedSize": "0",
        //          "code": 0,
        //          "cumFeeRv": "0",
        //          "cumQty": "0.001",
        //          "cumValueRv": "20.849",
        //          "curAccBalanceRv": "19.9874906",
        //          "curAssignedPosBalanceRv": "0",
        //          "curBonusBalanceRv": "0",
        //          "curLeverageRr": "-10",
        //          "curPosSide": "Buy",
        //          "curPosSize": "0.001",
        //          "curPosTerm": 1,
        //          "curPosValueRv": "20.849",
        //          "curRiskLimitRv": "1000000",
        //          "currency": "USDT",
        //          "cxlRejReason": 0,
        //          "displayQty": "0.001",
        //          "execFeeRv": "0.0125094",
        //          "execID": "b88d2950-04a2-52d8-8927-346059900242",
        //          "execPriceRp": "20849",
        //          "execQty": "0.001",
        //          "execSeq": 678760103,
        //          "execStatus": "TakerFill",
        //          "execValueRv": "20.849",
        //          "feeRateRr": "0.0006",
        //          "lastLiquidityInd": "RemovedLiquidity",
        //          "leavesQty": "0",
        //          "leavesValueRv": "0",
        //          "message": "No error",
        //          "ordStatus": "Filled",
        //          "ordType": "Market",
        //          "orderID": "79620ed2-54c6-4645-a35c-7057e687c576",
        //          "orderQty": "0.001",
        //          "pegOffsetProportionRr": "0",
        //          "pegOffsetValueRp": "0",
        //          "posSide": "Long",
        //          "priceRp": "21476.3",
        //          "relatedPosTerm": 1,
        //          "relatedReqNum": 4,
        //          "side": "Buy",
        //          "slTrigger": "ByMarkPrice",
        //          "stopLossRp": "0",
        //          "stopPxRp": "0",
        //          "symbol": "BTCUSDT",
        //          "takeProfitRp": "0",
        //          "timeInForce": "ImmediateOrCancel",
        //          "tpTrigger": "ByLastPrice",
        //          "tradeType": "Trade",
        //          "transactTimeNs": "1674110665387882268",
        //          "userID": 4018340
        //        },
        //        ...
        //    ]
        //
        object trades = new List<object>() {};
        object parsedOrders = new List<object>() {};
        if (isTrue(isTrue(isTrue((inOp(message, "closed"))) || isTrue((inOp(message, "fills")))) || isTrue((inOp(message, "open")))))
        {
            object closed = this.safeValue(message, "closed", new List<object>() {});
            object open = this.safeValue(message, "open", new List<object>() {});
            object orders = this.arrayConcat(open, closed);
            object ordersLength = getArrayLength(orders);
            if (isTrue(isEqual(ordersLength, 0)))
            {
                return;
            }
            trades = this.safeValue(message, "fills", new List<object>() {});
            for (object i = 0; isLessThan(i, getArrayLength(orders)); postFixIncrement(ref i))
            {
                object rawOrder = getValue(orders, i);
                object parsedOrder = this.parseOrder(rawOrder);
                ((IList<object>)parsedOrders).Add(parsedOrder);
            }
        } else
        {
            for (object i = 0; isLessThan(i, getArrayLength(message)); postFixIncrement(ref i))
            {
                object update = getValue(message, i);
                object action = this.safeString(update, "action");
                if (isTrue(isTrue((!isEqual(action, null))) && isTrue((!isEqual(action, "Cancel")))))
                {
                    // order + trade info together
                    ((IList<object>)trades).Add(update);
                }
                object parsedOrder = this.parseWSSwapOrder(update);
                ((IList<object>)parsedOrders).Add(parsedOrder);
            }
        }
        this.handleMyTrades(client as WebSocketClient, trades);
        object limit = this.safeInteger(this.options, "ordersLimit", 1000);
        object marketIds = new Dictionary<string, object>() {};
        if (isTrue(isEqual(this.orders, null)))
        {
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        object type = null;
        object stored = this.orders;
        for (object i = 0; isLessThan(i, getArrayLength(parsedOrders)); postFixIncrement(ref i))
        {
            object parsed = getValue(parsedOrders, i);
            callDynamically(stored, "append", new object[] {parsed});
            object symbol = getValue(parsed, "symbol");
            object market = this.market(symbol);
            if (isTrue(isEqual(type, null)))
            {
                object isUsdt = isEqual(getValue(market, "settle"), "USDT");
                type = ((bool) isTrue(isUsdt)) ? "perpetual" : getValue(market, "type");
            }
            ((IDictionary<string,object>)marketIds)[(string)symbol] = true;
        }
        object keys = new List<object>(((IDictionary<string,object>)marketIds).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object currentMessageHash = add(add("orders", ":"), getValue(keys, i));
            callDynamically(client as WebSocketClient, "resolve", new object[] {this.orders, currentMessageHash});
        }
        // resolve generic subscription (spot or swap)
        object messageHash = add("orders:", type);
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.orders, messageHash});
    }

    public virtual object parseWSSwapOrder(object order, object market = null)
    {
        //
        // swap
        //    {
        //        "accountID":26472240002,
        //        "action":"Cancel",
        //        "actionBy":"ByUser",
        //        "actionTimeNs":"1650450096104760797",
        //        "addedSeq":26975849309,
        //        "bonusChangedAmountEv":0,
        //        "clOrdID":"d9675963-5e4e-6fc8-898a-ec8b934c1c61",
        //        "closedPnlEv":0,
        //        "closedSize":0,
        //        "code":0,
        //        "cumQty":0,
        //        "cumValueEv":0,
        //        "curAccBalanceEv":400079,
        //        "curAssignedPosBalanceEv":0,
        //        "curBonusBalanceEv":0,
        //        "curLeverageEr":0,
        //        "curPosSide":"None",
        //        "curPosSize":0,
        //        "curPosTerm":1,
        //        "curPosValueEv":0,
        //        "curRiskLimitEv":5000000000,
        //        "currency":"USD",
        //        "cxlRejReason":0,
        //        "displayQty":0,
        //        "execFeeEv":0,
        //        "execID":"00000000-0000-0000-0000-000000000000",
        //        "execPriceEp":0,
        //        "execQty":1,
        //        "execSeq":26975862338,
        //        "execStatus":"Canceled",
        //        "execValueEv":0,
        //        "feeRateEr":0,
        //        "leavesQty":0,
        //        "leavesValueEv":0,
        //        "message":"No error",
        //        "ordStatus":"Canceled",
        //        "ordType":"Limit",
        //        "orderID":"8141deb9-8f94-48f6-9421-a4e3a791537b",
        //        "orderQty":1,
        //        "pegOffsetValueEp":0,
        //        "priceEp":9521,
        //        "relatedPosTerm":1,
        //        "relatedReqNum":4,
        //        "side":"Buy",
        //        "slTrigger":"ByMarkPrice",
        //        "stopLossEp":0,
        //        "stopPxEp":0,
        //        "symbol":"ADAUSD",
        //        "takeProfitEp":0,
        //        "timeInForce":"GoodTillCancel",
        //        "tpTrigger":"ByLastPrice",
        //        "transactTimeNs":"1650450096108143014",
        //        "userID":2647224
        //    }
        // perpetual
        //    {
        //        "accountID": 40183400003,
        //        "action": "New",
        //        "actionBy": "ByUser",
        //        "actionTimeNs": "1674110665380190869",
        //        "addedSeq": 678760103,
        //        "apRp": "0",
        //        "bonusChangedAmountRv": "0",
        //        "bpRp": "0",
        //        "clOrdID": '',
        //        "cl_req_code": 0,
        //        "closedPnlRv": "0",
        //        "closedSize": "0",
        //        "code": 0,
        //        "cumFeeRv": "0",
        //        "cumQty": "0.001",
        //        "cumValueRv": "20.849",
        //        "curAccBalanceRv": "19.9874906",
        //        "curAssignedPosBalanceRv": "0",
        //        "curBonusBalanceRv": "0",
        //        "curLeverageRr": "-10",
        //        "curPosSide": "Buy",
        //        "curPosSize": "0.001",
        //        "curPosTerm": 1,
        //        "curPosValueRv": "20.849",
        //        "curRiskLimitRv": "1000000",
        //        "currency": "USDT",
        //        "cxlRejReason": 0,
        //        "displayQty": "0.001",
        //        "execFeeRv": "0.0125094",
        //        "execID": "b88d2950-04a2-52d8-8927-346059900242",
        //        "execPriceRp": "20849",
        //        "execQty": "0.001",
        //        "execSeq": 678760103,
        //        "execStatus": "TakerFill",
        //        "execValueRv": "20.849",
        //        "feeRateRr": "0.0006",
        //        "lastLiquidityInd": "RemovedLiquidity",
        //        "leavesQty": "0",
        //        "leavesValueRv": "0",
        //        "message": "No error",
        //        "ordStatus": "Filled",
        //        "ordType": "Market",
        //        "orderID": "79620ed2-54c6-4645-a35c-7057e687c576",
        //        "orderQty": "0.001",
        //        "pegOffsetProportionRr": "0",
        //        "pegOffsetValueRp": "0",
        //        "posSide": "Long",
        //        "priceRp": "21476.3",
        //        "relatedPosTerm": 1,
        //        "relatedReqNum": 4,
        //        "side": "Buy",
        //        "slTrigger": "ByMarkPrice",
        //        "stopLossRp": "0",
        //        "stopPxRp": "0",
        //        "symbol": "BTCUSDT",
        //        "takeProfitRp": "0",
        //        "timeInForce": "ImmediateOrCancel",
        //        "tpTrigger": "ByLastPrice",
        //        "tradeType": "Trade",
        //        "transactTimeNs": "1674110665387882268",
        //        "userID": 4018340
        //    }
        //
        object id = this.safeString(order, "orderID");
        object clientOrderId = this.safeString(order, "clOrdID");
        if (isTrue(isTrue((!isEqual(clientOrderId, null))) && isTrue((isLessThan(((string)clientOrderId).Length, 1)))))
        {
            clientOrderId = null;
        }
        object marketId = this.safeString(order, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object status = this.parseOrderStatus(this.safeString(order, "ordStatus"));
        object side = this.safeStringLower(order, "side");
        object type = this.parseOrderType(this.safeString(order, "ordType"));
        object price = this.safeString(order, "priceRp", this.fromEp(this.safeString(order, "priceEp"), market));
        object amount = this.safeString(order, "orderQty");
        object filled = this.safeString(order, "cumQty");
        object remaining = this.safeString(order, "leavesQty");
        object timestamp = this.safeIntegerProduct(order, "actionTimeNs", 0.000001);
        object cost = this.safeString(order, "cumValueRv", this.fromEv(this.safeString(order, "cumValueEv"), market));
        object lastTradeTimestamp = this.safeIntegerProduct(order, "transactTimeNs", 0.000001);
        if (isTrue(isEqual(lastTradeTimestamp, 0)))
        {
            lastTradeTimestamp = null;
        }
        object timeInForce = this.parseTimeInForce(this.safeString(order, "timeInForce"));
        object stopPrice = this.safeString(order, "stopPx");
        object postOnly = (isEqual(timeInForce, "PO"));
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "datetime", this.iso8601(timestamp) },
            { "timestamp", timestamp },
            { "lastTradeTimestamp", lastTradeTimestamp },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", timeInForce },
            { "postOnly", postOnly },
            { "side", side },
            { "price", price },
            { "stopPrice", stopPrice },
            { "triggerPrice", stopPrice },
            { "amount", amount },
            { "filled", filled },
            { "remaining", remaining },
            { "cost", cost },
            { "average", null },
            { "status", status },
            { "fee", null },
            { "trades", null },
        }, market);
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        // private spot update
        // {
        //     "orders": { closed: [ ], fills: [ ], open: [] },
        //     "sequence": 40435835,
        //     "timestamp": "1650443245600839241",
        //     "type": "snapshot",
        //     "wallets": [
        //       {
        //         "balanceEv": 0,
        //         "currency": "BTC",
        //         "lastUpdateTimeNs": "1650442638722099092",
        //         "lockedTradingBalanceEv": 0,
        //         "lockedWithdrawEv": 0,
        //         "userID": 2647224
        //       },
        //       {
        //         "balanceEv": 1154232337,
        //         "currency": "USDT",
        //         "lastUpdateTimeNs": "1650442617610017597",
        //         "lockedTradingBalanceEv": 0,
        //         "lockedWithdrawEv": 0,
        //         "userID": 2647224
        //       }
        //     ]
        // }
        // private swap update
        // {
        //     "sequence": 83839628,
        //     "timestamp": "1650382581827447829",
        //     "type": "snapshot",
        //     "accounts": [
        //       {
        //         "accountBalanceEv": 0,
        //         "accountID": 26472240001,
        //         "bonusBalanceEv": 0,
        //         "currency": "BTC",
        //         "totalUsedBalanceEv": 0,
        //         "userID": 2647224
        //       }
        //     ],
        //     "orders": [],
        //     "positions": [
        //       {
        //         "accountID": 26472240001,
        //         "assignedPosBalanceEv": 0,
        //         "avgEntryPriceEp": 0,
        //         "bankruptCommEv": 0,
        //         "bankruptPriceEp": 0,
        //         "buyLeavesQty": 0,
        //         "buyLeavesValueEv": 0,
        //         "buyValueToCostEr": 1150750,
        //         "createdAtNs": 0,
        //         "crossSharedBalanceEv": 0,
        //         "cumClosedPnlEv": 0,
        //         "cumFundingFeeEv": 0,
        //         "cumTransactFeeEv": 0,
        //         "curTermRealisedPnlEv": 0,
        //         "currency": "BTC",
        //         "dataVer": 2,
        //         "deleveragePercentileEr": 0,
        //         "displayLeverageEr": 10000000000,
        //         "estimatedOrdLossEv": 0,
        //         "execSeq": 0,
        //         "freeCostEv": 0,
        //         "freeQty": 0,
        //         "initMarginReqEr": 1000000,
        //         "lastFundingTime": "1640601827712091793",
        //         "lastTermEndTime": 0,
        //         "leverageEr": 0,
        //         "liquidationPriceEp": 0,
        //         "maintMarginReqEr": 500000,
        //         "makerFeeRateEr": 0,
        //         "markPriceEp": 507806777,
        //         "orderCostEv": 0,
        //         "posCostEv": 0,
        //         "positionMarginEv": 0,
        //         "positionStatus": "Normal",
        //         "riskLimitEv": 10000000000,
        //         "sellLeavesQty": 0,
        //         "sellLeavesValueEv": 0,
        //         "sellValueToCostEr": 1149250,
        //         "side": "None",
        //         "size": 0,
        //         "symbol": "BTCUSD",
        //         "takerFeeRateEr": 0,
        //         "term": 1,
        //         "transactTimeNs": 0,
        //         "unrealisedPnlEv": 0,
        //         "updatedAtNs": 0,
        //         "usedBalanceEv": 0,
        //         "userID": 2647224,
        //         "valueEv": 0
        //       }
        //     ]
        // }
        object id = this.safeString(message, "id");
        if (isTrue(inOp(((WebSocketClient)client).subscriptions, id)))
        {
            object method = getValue(((WebSocketClient)client).subscriptions, id);

            if (isTrue(!isEqual(method, true)))
            {
                DynamicInvoker.InvokeMethod(method, new object[] { client, message});
                return;
            }
        }
        object methodName = this.safeString(message, "method", "");
        if (isTrue(isTrue(isTrue((inOp(message, "market24h"))) || isTrue((inOp(message, "spot_market24h")))) || isTrue((isGreaterThanOrEqual(getIndexOf(methodName, "perp_market24h_pack_p"), 0)))))
        {
            this.handleTicker(client as WebSocketClient, message);
            return;
        } else if (isTrue(isTrue((inOp(message, "trades"))) || isTrue((inOp(message, "trades_p")))))
        {
            this.handleTrades(client as WebSocketClient, message);
            return;
        } else if (isTrue(isTrue((inOp(message, "kline"))) || isTrue((inOp(message, "kline_p")))))
        {
            this.handleOHLCV(client as WebSocketClient, message);
            return;
        } else if (isTrue(isTrue((inOp(message, "book"))) || isTrue((inOp(message, "orderbook_p")))))
        {
            this.handleOrderBook(client as WebSocketClient, message);
            return;
        }
        if (isTrue(isTrue((inOp(message, "orders"))) || isTrue((inOp(message, "orders_p")))))
        {
            object orders = this.safeValue2(message, "orders", "orders_p", new Dictionary<string, object>() {});
            this.handleOrders(client as WebSocketClient, orders);
        }
        if (isTrue(isTrue(isTrue((inOp(message, "accounts"))) || isTrue((inOp(message, "accounts_p")))) || isTrue((inOp(message, "wallets")))))
        {
            object type = ((bool) isTrue((inOp(message, "accounts")))) ? "swap" : "spot";
            if (isTrue(inOp(message, "accounts_p")))
            {
                type = "perpetual";
            }
            object accounts = this.safeValueN(message, new List<object>() {"accounts", "accounts_p", "wallets"}, new List<object>() {});
            this.handleBalance(type, client, accounts);
        }
    }

    public virtual void handleAuthenticate(WebSocketClient client, object message)
    {
        //
        // {
        //     "error": null,
        //     "id": 1234,
        //     "result": {
        //       "status": "success"
        //     }
        // }
        //
        object result = this.safeValue(message, "result");
        object status = this.safeString(result, "status");
        object messageHash = "authenticated";
        if (isTrue(isEqual(status, "success")))
        {
            callDynamically(client as WebSocketClient, "resolve", new object[] {message, messageHash});
        } else
        {
            var error = new AuthenticationError(add(add(this.id, " "), this.json(message)));
            ((WebSocketClient)client).reject(error, messageHash);
            if (isTrue(inOp(((WebSocketClient)client).subscriptions, messageHash)))
            {

            }
        }
    }

    public async virtual Task<object> subscribePrivate(object type, object messageHash, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object url = getValue(getValue(this.urls, "api"), "ws");
        object requestId = this.seconds();
        object settleIsUSDT = (isEqual(this.safeValue(parameters, "settle", ""), "USDT"));
        parameters = this.omit(parameters, "settle");
        object channel = "aop.subscribe";
        if (isTrue(isEqual(type, "spot")))
        {
            channel = "wo.subscribe";
        }
        if (isTrue(settleIsUSDT))
        {
            channel = "aop_p.subscribe";
        }
        object request = new Dictionary<string, object>() {
            { "id", requestId },
            { "method", channel },
            { "params", new List<object>() {} },
        };
        request = this.extend(request, parameters);
        return await this.watch(url, messageHash, request, channel);
    }

    public async virtual Task<object> authenticate(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        object url = getValue(getValue(this.urls, "api"), "ws");
        var client = this.client(url);
        object requestId = this.requestId();
        object messageHash = "authenticated";
        var future = this.safeValue(((WebSocketClient)client).subscriptions, messageHash);
        if (isTrue(isEqual(future, null)))
        {
            object expiryDelta = this.safeInteger(this.options, "expires", 120);
            object expiration = add(this.seconds(), expiryDelta);
            object payload = add(this.apiKey, ((object)expiration).ToString());
            object signature = this.hmac(this.encode(payload), this.encode(this.secret), sha256);
            object method = "user.auth";
            object request = new Dictionary<string, object>() {
                { "method", method },
                { "params", new List<object>() {"API", this.apiKey, signature, expiration} },
                { "id", requestId },
            };
            object subscriptionHash = ((object)requestId).ToString();
            object message = this.extend(request, parameters);
            if (!isTrue((inOp(((WebSocketClient)client).subscriptions, messageHash))))
            {
                ((IDictionary<string,object>)((WebSocketClient)client).subscriptions)[(string)subscriptionHash] = this.handleAuthenticate;
            }
            future = await this.watch(url, messageHash, message, messageHash);
            ((IDictionary<string,object>)((WebSocketClient)client).subscriptions)[(string)messageHash] = future;
        }
        return future;
    }
}
