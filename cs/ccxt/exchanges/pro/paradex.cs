namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class paradex { public paradex(object args = null) : base(args) { } }
public partial class paradex : ccxt.paradex
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchTicker", true },
                { "watchTickers", true },
                { "watchOrderBook", true },
                { "watchOrders", false },
                { "watchTrades", true },
                { "watchTradesForSymbols", false },
                { "watchBalance", false },
                { "watchOHLCV", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://x.com/tradeparadex/photo" },
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://ws.api.prod.paradex.trade/v1" },
                } },
                { "test", new Dictionary<string, object>() {
                    { "ws", "wss://ws.api.testnet.paradex.trade/v1" },
                } },
                { "www", "https://www.paradex.trade/" },
                { "doc", "https://docs.api.testnet.paradex.trade/" },
                { "fees", "https://docs.paradex.trade/getting-started/trading-fees" },
                { "referral", "" },
            } },
            { "options", new Dictionary<string, object>() {} },
            { "streaming", new Dictionary<string, object>() {} },
        });
    }

    /**
     * @method
     * @name paradex#watchTrades
     * @description get the list of most recent trades for a particular symbol
     * @see https://docs.api.testnet.paradex.trade/#sub-trades-market_symbol-operation
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int} [since] timestamp in ms of the earliest trade to fetch
     * @param {int} [limit] the maximum amount of trades to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object messageHash = "trades.";
        if (isTrue(!isEqual(symbol, null)))
        {
            object market = this.market(symbol);
            messageHash = add(messageHash, getValue(market, "id"));
        } else
        {
            messageHash = add(messageHash, "ALL");
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "jsonrpc", "2.0" },
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channel", messageHash },
            } },
        };
        object trades = await this.watch(url, messageHash, this.deepExtend(request, parameters), messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public virtual object handleTrade(WebSocketClient client, object message)
    {
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "method": "subscription",
        //         "params": {
        //             "channel": "trades.ALL",
        //             "data": {
        //                 "id": "1718179273230201709233240002",
        //                 "market": "kBONK-USD-PERP",
        //                 "side": "BUY",
        //                 "size": "34028",
        //                 "price": "0.028776",
        //                 "created_at": 1718179273230,
        //                 "trade_type": "FILL"
        //             }
        //         }
        //     }
        //
        object parameters = this.safeDict(message, "params", new Dictionary<string, object>() {});
        object data = this.safeDict(parameters, "data", new Dictionary<string, object>() {});
        object parsedTrade = this.parseTrade(data);
        object symbol = getValue(parsedTrade, "symbol");
        object messageHash = this.safeString(parameters, "channel");
        object stored = this.safeValue(this.trades, symbol);
        if (isTrue(isEqual(stored, null)))
        {
            stored = new ArrayCache(this.safeInteger(this.options, "tradesLimit", 1000));
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        callDynamically(stored, "append", new object[] {parsedTrade});
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
        return message;
    }

    /**
     * @method
     * @name paradex#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://docs.api.testnet.paradex.trade/#sub-order_book-market_symbol-snapshot-15-refresh_rate-operation
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object messageHash = add(add("order_book.", getValue(market, "id")), ".snapshot@15@100ms");
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "jsonrpc", "2.0" },
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channel", messageHash },
            } },
        };
        object orderbook = await this.watch(url, messageHash, this.deepExtend(request, parameters), messageHash);
        return (orderbook as IOrderBook).limit();
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "method": "subscription",
        //         "params": {
        //             "channel": "order_book.BTC-USD-PERP.snapshot@15@50ms",
        //             "data": {
        //                 "seq_no": 14127815,
        //                 "market": "BTC-USD-PERP",
        //                 "last_updated_at": 1718267837265,
        //                 "update_type": "s",
        //                 "inserts": [
        //                     {
        //                         "side": "BUY",
        //                         "price": "67629.7",
        //                         "size": "0.992"
        //                     },
        //                     {
        //                         "side": "SELL",
        //                         "price": "69378.6",
        //                         "size": "3.137"
        //                     }
        //                 ],
        //                 "updates": [],
        //                 "deletes": []
        //             }
        //         }
        //     }
        //
        object parameters = this.safeDict(message, "params", new Dictionary<string, object>() {});
        object data = this.safeDict(parameters, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "market");
        object market = this.safeMarket(marketId);
        object timestamp = this.safeInteger(data, "last_updated_at");
        object symbol = getValue(market, "symbol");
        if (!isTrue((inOp(this.orderbooks, symbol))))
        {
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.orderBook();
        }
        object orderbookData = new Dictionary<string, object>() {
            { "bids", new List<object>() {} },
            { "asks", new List<object>() {} },
        };
        object inserts = this.safeList(data, "inserts");
        for (object i = 0; isLessThan(i, getArrayLength(inserts)); postFixIncrement(ref i))
        {
            object insert = this.safeDict(inserts, i);
            object side = this.safeString(insert, "side");
            object price = this.safeString(insert, "price");
            object size = this.safeString(insert, "size");
            if (isTrue(isEqual(side, "BUY")))
            {
                ((IList<object>)getValue(orderbookData, "bids")).Add(new List<object>() {price, size});
            } else
            {
                ((IList<object>)getValue(orderbookData, "asks")).Add(new List<object>() {price, size});
            }
        }
        object orderbook = getValue(this.orderbooks, symbol);
        object snapshot = this.parseOrderBook(orderbookData, symbol, timestamp, "bids", "asks");
        ((IDictionary<string,object>)snapshot)["nonce"] = this.safeNumber(data, "seq_no");
        (orderbook as IOrderBook).reset(snapshot);
        object messageHash = this.safeString(parameters, "channel");
        callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
    }

    /**
     * @method
     * @name paradex#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://docs.api.testnet.paradex.trade/#sub-markets_summary-operation
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        object channel = "markets_summary";
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "jsonrpc", "2.0" },
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channel", channel },
            } },
        };
        object messageHash = add(add(channel, "."), symbol);
        return await this.watch(url, messageHash, this.deepExtend(request, parameters), messageHash);
    }

    /**
     * @method
     * @name paradex#watchTickers
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://docs.api.testnet.paradex.trade/#sub-markets_summary-operation
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object channel = "markets_summary";
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "jsonrpc", "2.0" },
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channel", channel },
            } },
        };
        object messageHashes = new List<object>() {};
        if (isTrue(((symbols is IList<object>) || (symbols.GetType().IsGenericType && symbols.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object messageHash = add(add(channel, "."), getValue(symbols, i));
                ((IList<object>)messageHashes).Add(messageHash);
            }
        } else
        {
            ((IList<object>)messageHashes).Add(channel);
        }
        object newTickers = await this.watchMultiple(url, messageHashes, this.deepExtend(request, parameters), messageHashes);
        if (isTrue(this.newUpdates))
        {
            object result = new Dictionary<string, object>() {};
            ((IDictionary<string,object>)result)[(string)getValue(newTickers, "symbol")] = newTickers;
            return result;
        }
        return this.filterByArray(this.tickers, "symbol", symbols);
    }

    public virtual object handleTicker(WebSocketClient client, object message)
    {
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "method": "subscription",
        //         "params": {
        //             "channel": "markets_summary",
        //             "data": {
        //                 "symbol": "ORDI-USD-PERP",
        //                 "oracle_price": "49.80885481",
        //                 "mark_price": "49.80885481",
        //                 "last_traded_price": "62.038",
        //                 "bid": "49.822",
        //                 "ask": "58.167",
        //                 "volume_24h": "0",
        //                 "total_volume": "54542628.66054200416",
        //                 "created_at": 1718334307698,
        //                 "underlying_price": "47.93",
        //                 "open_interest": "6999.5",
        //                 "funding_rate": "0.03919997509811",
        //                 "price_change_rate_24h": ""
        //             }
        //         }
        //     }
        //
        object parameters = this.safeDict(message, "params", new Dictionary<string, object>() {});
        object data = this.safeDict(parameters, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "symbol");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object channel = this.safeString(parameters, "channel");
        object messageHash = add(add(channel, "."), symbol);
        object ticker = this.parseTicker(data, market);
        ((IDictionary<string,object>)this.tickers)[(string)symbol] = ticker;
        callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, channel});
        callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, messageHash});
        return message;
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "id": 0,
        //         "error": {
        //             "code": -32600,
        //             "message": "invalid subscribe request",
        //             "data": "invalid channel"
        //         },
        //         "usIn": 1718179125962419,
        //         "usDiff": 76,
        //         "usOut": 1718179125962495
        //     }
        //
        object error = this.safeDict(message, "error");
        if (isTrue(isEqual(error, null)))
        {
            return true;
        } else
        {
            object errorCode = this.safeString(error, "code");
            if (isTrue(!isEqual(errorCode, null)))
            {
                object feedback = add(add(this.id, " "), this.json(error));
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), "-32600", feedback);
                object messageString = this.safeValue(error, "message");
                if (isTrue(!isEqual(messageString, null)))
                {
                    this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), messageString, feedback);
                }
            }
            return false;
        }
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        if (!isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            return;
        }
        //
        //     {
        //         "jsonrpc": "2.0",
        //         "method": "subscription",
        //         "params": {
        //             "channel": "trades.ALL",
        //             "data": {
        //                 "id": "1718179273230201709233240002",
        //                 "market": "kBONK-USD-PERP",
        //                 "side": "BUY",
        //                 "size": "34028",
        //                 "price": "0.028776",
        //                 "created_at": 1718179273230,
        //                 "trade_type": "FILL"
        //             }
        //         }
        //     }
        //
        object data = this.safeDict(message, "params");
        if (isTrue(!isEqual(data, null)))
        {
            object channel = this.safeString(data, "channel");
            object parts = ((string)channel).Split(new [] {((string)".")}, StringSplitOptions.None).ToList<object>();
            object name = this.safeString(parts, 0);
            object methods = new Dictionary<string, object>() {
                { "trades", this.handleTrade },
                { "order_book", this.handleOrderBook },
                { "markets_summary", this.handleTicker },
            };
            object method = this.safeValue(methods, name);
            if (isTrue(!isEqual(method, null)))
            {
                DynamicInvoker.InvokeMethod(method, new object[] { client, message});
            }
        }
    }
}
