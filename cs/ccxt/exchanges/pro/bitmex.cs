namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class bitmex { public bitmex(object args = null) : base(args) { } }
public partial class bitmex : ccxt.bitmex
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchBalance", true },
                { "watchLiquidations", true },
                { "watchLiquidationsForSymbols", true },
                { "watchMyLiquidations", null },
                { "watchMyLiquidationsForSymbols", null },
                { "watchMyTrades", true },
                { "watchOHLCV", true },
                { "watchOrderBook", true },
                { "watchOrderBookForSymbols", true },
                { "watchOrders", true },
                { "watchPostions", true },
                { "watchTicker", true },
                { "watchTickers", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "test", new Dictionary<string, object>() {
                    { "ws", "wss://ws.testnet.bitmex.com/realtime" },
                } },
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://ws.bitmex.com/realtime" },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "watchOrderBookLevel", "orderBookL2" },
                { "tradesLimit", 1000 },
                { "OHLCVLimit", 1000 },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "ws", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {} },
                    { "broad", new Dictionary<string, object>() {
                        { "Rate limit exceeded", typeof(RateLimitExceeded) },
                    } },
                } },
            } },
        });
    }

    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchTicker
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        object tickers = await this.watchTickers(new List<object>() {symbol}, parameters);
        return getValue(tickers, symbol);
    }

    public async override Task<object> watchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchTickers
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
        * @param {string[]} symbols unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true);
        object name = "instrument";
        object url = getValue(getValue(this.urls, "api"), "ws");
        object messageHashes = new List<object>() {};
        object rawSubscriptions = new List<object>() {};
        if (isTrue(!isEqual(symbols, null)))
        {
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                object market = this.market(symbol);
                object subscription = add(add(name, ":"), getValue(market, "id"));
                ((IList<object>)rawSubscriptions).Add(subscription);
                object messageHash = add("ticker:", symbol);
                ((IList<object>)messageHashes).Add(messageHash);
            }
        } else
        {
            ((IList<object>)rawSubscriptions).Add(name);
            ((IList<object>)messageHashes).Add("alltickers");
        }
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", rawSubscriptions },
        };
        object ticker = await this.watchMultiple(url, messageHashes, this.extend(request, parameters), rawSubscriptions);
        if (isTrue(this.newUpdates))
        {
            object result = new Dictionary<string, object>() {};
            ((IDictionary<string,object>)result)[(string)getValue(ticker, "symbol")] = ticker;
            return result;
        }
        return this.filterByArray(this.tickers, "symbol", symbols);
    }

    public virtual object handleTicker(WebSocketClient client, object message)
    {
        //
        //     {
        //         "table": "instrument",
        //         "action": "partial",
        //         "keys": [ "symbol" ],
        //         "types": {
        //             "symbol": "symbol",
        //             "rootSymbol": "symbol",
        //             "state": "symbol",
        //             "typ": "symbol",
        //             "listing": "timestamp",
        //             "front": "timestamp",
        //             "expiry": "timestamp",
        //             "settle": "timestamp",
        //             "relistInterval": "timespan",
        //             "inverseLeg": "symbol",
        //             "sellLeg": "symbol",
        //             "buyLeg": "symbol",
        //             "optionStrikePcnt": "float",
        //             "optionStrikeRound": "float",
        //             "optionStrikePrice": "float",
        //             "optionMultiplier": "float",
        //             "positionCurrency": "symbol",
        //             "underlying": "symbol",
        //             "quoteCurrency": "symbol",
        //             "underlyingSymbol": "symbol",
        //             "reference": "symbol",
        //             "referenceSymbol": "symbol",
        //             "calcInterval": "timespan",
        //             "publishInterval": "timespan",
        //             "publishTime": "timespan",
        //             "maxOrderQty": "long",
        //             "maxPrice": "float",
        //             "lotSize": "long",
        //             "tickSize": "float",
        //             "multiplier": "long",
        //             "settlCurrency": "symbol",
        //             "underlyingToPositionMultiplier": "long",
        //             "underlyingToSettleMultiplier": "long",
        //             "quoteToSettleMultiplier": "long",
        //             "isQuanto": "boolean",
        //             "isInverse": "boolean",
        //             "initMargin": "float",
        //             "maintMargin": "float",
        //             "riskLimit": "long",
        //             "riskStep": "long",
        //             "limit": "float",
        //             "capped": "boolean",
        //             "taxed": "boolean",
        //             "deleverage": "boolean",
        //             "makerFee": "float",
        //             "takerFee": "float",
        //             "settlementFee": "float",
        //             "insuranceFee": "float",
        //             "fundingBaseSymbol": "symbol",
        //             "fundingQuoteSymbol": "symbol",
        //             "fundingPremiumSymbol": "symbol",
        //             "fundingTimestamp": "timestamp",
        //             "fundingInterval": "timespan",
        //             "fundingRate": "float",
        //             "indicativeFundingRate": "float",
        //             "rebalanceTimestamp": "timestamp",
        //             "rebalanceInterval": "timespan",
        //             "openingTimestamp": "timestamp",
        //             "closingTimestamp": "timestamp",
        //             "sessionInterval": "timespan",
        //             "prevClosePrice": "float",
        //             "limitDownPrice": "float",
        //             "limitUpPrice": "float",
        //             "bankruptLimitDownPrice": "float",
        //             "bankruptLimitUpPrice": "float",
        //             "prevTotalVolume": "long",
        //             "totalVolume": "long",
        //             "volume": "long",
        //             "volume24h": "long",
        //             "prevTotalTurnover": "long",
        //             "totalTurnover": "long",
        //             "turnover": "long",
        //             "turnover24h": "long",
        //             "homeNotional24h": "float",
        //             "foreignNotional24h": "float",
        //             "prevPrice24h": "float",
        //             "vwap": "float",
        //             "highPrice": "float",
        //             "lowPrice": "float",
        //             "lastPrice": "float",
        //             "lastPriceProtected": "float",
        //             "lastTickDirection": "symbol",
        //             "lastChangePcnt": "float",
        //             "bidPrice": "float",
        //             "midPrice": "float",
        //             "askPrice": "float",
        //             "impactBidPrice": "float",
        //             "impactMidPrice": "float",
        //             "impactAskPrice": "float",
        //             "hasLiquidity": "boolean",
        //             "openInterest": "long",
        //             "openValue": "long",
        //             "fairMethod": "symbol",
        //             "fairBasisRate": "float",
        //             "fairBasis": "float",
        //             "fairPrice": "float",
        //             "markMethod": "symbol",
        //             "markPrice": "float",
        //             "indicativeTaxRate": "float",
        //             "indicativeSettlePrice": "float",
        //             "optionUnderlyingPrice": "float",
        //             "settledPrice": "float",
        //             "timestamp": "timestamp"
        //         },
        //         "foreignKeys": {
        //             "inverseLeg": "instrument",
        //             "sellLeg": "instrument",
        //             "buyLeg": "instrument"
        //         },
        //         "attributes": { symbol: "unique" },
        //         "filter": { symbol: "XBTUSD" },
        //         "data": [
        //             {
        //                 "symbol": "XBTUSD",
        //                 "rootSymbol": "XBT",
        //                 "state": "Open",
        //                 "typ": "FFWCSX",
        //                 "listing": "2016-05-13T12:00:00.000Z",
        //                 "front": "2016-05-13T12:00:00.000Z",
        //                 "expiry": null,
        //                 "settle": null,
        //                 "relistInterval": null,
        //                 "inverseLeg": '',
        //                 "sellLeg": '',
        //                 "buyLeg": '',
        //                 "optionStrikePcnt": null,
        //                 "optionStrikeRound": null,
        //                 "optionStrikePrice": null,
        //                 "optionMultiplier": null,
        //                 "positionCurrency": "USD",
        //                 "underlying": "XBT",
        //                 "quoteCurrency": "USD",
        //                 "underlyingSymbol": "XBT=",
        //                 "reference": "BMEX",
        //                 "referenceSymbol": ".BXBT",
        //                 "calcInterval": null,
        //                 "publishInterval": null,
        //                 "publishTime": null,
        //                 "maxOrderQty": 10000000,
        //                 "maxPrice": 1000000,
        //                 "lotSize": 1,
        //                 "tickSize": 0.5,
        //                 "multiplier": -100000000,
        //                 "settlCurrency": "XBt",
        //                 "underlyingToPositionMultiplier": null,
        //                 "underlyingToSettleMultiplier": -100000000,
        //                 "quoteToSettleMultiplier": null,
        //                 "isQuanto": false,
        //                 "isInverse": true,
        //                 "initMargin": 0.01,
        //                 "maintMargin": 0.005,
        //                 "riskLimit": 20000000000,
        //                 "riskStep": 10000000000,
        //                 "limit": null,
        //                 "capped": false,
        //                 "taxed": true,
        //                 "deleverage": true,
        //                 "makerFee": -0.00025,
        //                 "takerFee": 0.00075,
        //                 "settlementFee": 0,
        //                 "insuranceFee": 0,
        //                 "fundingBaseSymbol": ".XBTBON8H",
        //                 "fundingQuoteSymbol": ".USDBON8H",
        //                 "fundingPremiumSymbol": ".XBTUSDPI8H",
        //                 "fundingTimestamp": "2020-01-29T12:00:00.000Z",
        //                 "fundingInterval": "2000-01-01T08:00:00.000Z",
        //                 "fundingRate": 0.000597,
        //                 "indicativeFundingRate": 0.000652,
        //                 "rebalanceTimestamp": null,
        //                 "rebalanceInterval": null,
        //                 "openingTimestamp": "2020-01-29T11:00:00.000Z",
        //                 "closingTimestamp": "2020-01-29T12:00:00.000Z",
        //                 "sessionInterval": "2000-01-01T01:00:00.000Z",
        //                 "prevClosePrice": 9063.96,
        //                 "limitDownPrice": null,
        //                 "limitUpPrice": null,
        //                 "bankruptLimitDownPrice": null,
        //                 "bankruptLimitUpPrice": null,
        //                 "prevTotalVolume": 1989881049026,
        //                 "totalVolume": 1990196740950,
        //                 "volume": 315691924,
        //                 "volume24h": 4491824765,
        //                 "prevTotalTurnover": 27865497128425564,
        //                 "totalTurnover": 27868891594857150,
        //                 "turnover": 3394466431587,
        //                 "turnover24h": 48863390064843,
        //                 "homeNotional24h": 488633.9006484273,
        //                 "foreignNotional24h": 4491824765,
        //                 "prevPrice24h": 9091,
        //                 "vwap": 9192.8663,
        //                 "highPrice": 9440,
        //                 "lowPrice": 8886,
        //                 "lastPrice": 9287,
        //                 "lastPriceProtected": 9287,
        //                 "lastTickDirection": "PlusTick",
        //                 "lastChangePcnt": 0.0216,
        //                 "bidPrice": 9286,
        //                 "midPrice": 9286.25,
        //                 "askPrice": 9286.5,
        //                 "impactBidPrice": 9285.9133,
        //                 "impactMidPrice": 9286.75,
        //                 "impactAskPrice": 9287.6382,
        //                 "hasLiquidity": true,
        //                 "openInterest": 967826984,
        //                 "openValue": 10432207060536,
        //                 "fairMethod": "FundingRate",
        //                 "fairBasisRate": 0.6537149999999999,
        //                 "fairBasis": 0.33,
        //                 "fairPrice": 9277.2,
        //                 "markMethod": "FairPrice",
        //                 "markPrice": 9277.2,
        //                 "indicativeTaxRate": 0,
        //                 "indicativeSettlePrice": 9276.87,
        //                 "optionUnderlyingPrice": null,
        //                 "settledPrice": null,
        //                 "timestamp": "2020-01-29T11:31:37.114Z"
        //             }
        //         ]
        //     }
        //
        object data = this.safeList(message, "data", new List<object>() {});
        object tickers = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object update = getValue(data, i);
            object marketId = this.safeString(update, "symbol");
            object symbol = this.safeSymbol(marketId);
            if (!isTrue((inOp(this.tickers, symbol))))
            {
                ((IDictionary<string,object>)this.tickers)[(string)symbol] = this.parseTicker(new Dictionary<string, object>() {});
            }
            object updatedTicker = this.parseTicker(update);
            object fullParsedTicker = this.deepExtend(getValue(this.tickers, symbol), updatedTicker);
            ((IDictionary<string,object>)tickers)[(string)symbol] = fullParsedTicker;
            ((IDictionary<string,object>)this.tickers)[(string)symbol] = fullParsedTicker;
            object messageHash = add("ticker:", symbol);
            callDynamically(client as WebSocketClient, "resolve", new object[] {fullParsedTicker, messageHash});
            callDynamically(client as WebSocketClient, "resolve", new object[] {fullParsedTicker, "alltickers"});
        }
        return message;
    }

    public async override Task<object> watchLiquidations(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchLiquidations
        * @description watch the public liquidations of a trading pair
        * @see https://www.bitmex.com/app/wsAPI#Liquidation
        * @param {string} symbol unified CCXT market symbol
        * @param {int} [since] the earliest time in ms to fetch liquidations for
        * @param {int} [limit] the maximum number of liquidation structures to retrieve
        * @param {object} [params] exchange specific parameters for the bitmex api endpoint
        * @returns {object} an array of [liquidation structures]{@link https://github.com/ccxt/ccxt/wiki/Manual#liquidation-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return this.watchLiquidationsForSymbols(new List<object>() {symbol}, since, limit, parameters);
    }

    public async override Task<object> watchLiquidationsForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchLiquidationsForSymbols
        * @description watch the public liquidations of a trading pair
        * @see https://www.bitmex.com/app/wsAPI#Liquidation
        * @param {string} symbol unified CCXT market symbol
        * @param {int} [since] the earliest time in ms to fetch liquidations for
        * @param {int} [limit] the maximum number of liquidation structures to retrieve
        * @param {object} [params] exchange specific parameters for the bitmex api endpoint
        * @returns {object} an array of [liquidation structures]{@link https://github.com/ccxt/ccxt/wiki/Manual#liquidation-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true, true);
        object messageHashes = new List<object>() {};
        object subscriptionHashes = new List<object>() {};
        if (isTrue(this.isEmpty(symbols)))
        {
            ((IList<object>)subscriptionHashes).Add("liquidation");
            ((IList<object>)messageHashes).Add("liquidations");
        } else
        {
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                object market = this.market(symbol);
                ((IList<object>)subscriptionHashes).Add(add("liquidation:", getValue(market, "id")));
                ((IList<object>)messageHashes).Add(add("liquidations::", symbol));
            }
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", subscriptionHashes },
        };
        object newLiquidations = await this.watchMultiple(url, messageHashes, this.deepExtend(request, parameters), subscriptionHashes);
        if (isTrue(this.newUpdates))
        {
            return newLiquidations;
        }
        return this.filterBySymbolsSinceLimit(this.liquidations, symbols, since, limit, true);
    }

    public virtual void handleLiquidation(WebSocketClient client, object message)
    {
        //
        //    {
        //        "table":"liquidation",
        //        "action":"partial",
        //        "keys":[
        //           "orderID"
        //        ],
        //        "types":{
        //           "orderID":"guid",
        //           "symbol":"symbol",
        //           "side":"symbol",
        //           "price":"float",
        //           "leavesQty":"long"
        //        },
        //        "filter":{},
        //        "data":[
        //           {
        //              "orderID":"e0a568ee-7830-4428-92c3-73e82b9576ce",
        //              "symbol":"XPLAUSDT",
        //              "side":"Sell",
        //              "price":0.206,
        //              "leavesQty":340
        //           }
        //        ]
        //    }
        //
        object rawLiquidations = this.safeValue(message, "data", new List<object>() {});
        object newLiquidations = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(rawLiquidations)); postFixIncrement(ref i))
        {
            object rawLiquidation = getValue(rawLiquidations, i);
            object liquidation = this.parseLiquidation(rawLiquidation);
            object symbol = getValue(liquidation, "symbol");
            object liquidations = this.safeValue(this.liquidations, symbol);
            if (isTrue(isEqual(liquidations, null)))
            {
                object limit = this.safeInteger(this.options, "liquidationsLimit", 1000);
                liquidations = new ArrayCache(limit);
            }
            callDynamically(liquidations, "append", new object[] {liquidation});
            ((IDictionary<string,object>)this.liquidations)[(string)symbol] = liquidations;
            ((IList<object>)newLiquidations).Add(liquidation);
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {newLiquidations, "liquidations"});
        object liquidationsBySymbol = this.indexBy(newLiquidations, "symbol");
        object symbols = new List<object>(((IDictionary<string,object>)liquidationsBySymbol).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            callDynamically(client as WebSocketClient, "resolve", new object[] {getValue(liquidationsBySymbol, symbol), add("liquidations::", symbol)});
        }
    }

    public async override Task<object> watchBalance(object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchBalance
        * @description watch balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object messageHash = "margin";
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", new List<object>() {messageHash} },
        };
        return await this.watch(url, messageHash, this.extend(request, parameters), messageHash);
    }

    public virtual void handleBalance(WebSocketClient client, object message)
    {
        //
        //     {
        //         "table": "margin",
        //         "action": "partial",
        //         "keys": [ "account" ],
        //         "types": {
        //             "account": "long",
        //             "currency": "symbol",
        //             "riskLimit": "long",
        //             "prevState": "symbol",
        //             "state": "symbol",
        //             "action": "symbol",
        //             "amount": "long",
        //             "pendingCredit": "long",
        //             "pendingDebit": "long",
        //             "confirmedDebit": "long",
        //             "prevRealisedPnl": "long",
        //             "prevUnrealisedPnl": "long",
        //             "grossComm": "long",
        //             "grossOpenCost": "long",
        //             "grossOpenPremium": "long",
        //             "grossExecCost": "long",
        //             "grossMarkValue": "long",
        //             "riskValue": "long",
        //             "taxableMargin": "long",
        //             "initMargin": "long",
        //             "maintMargin": "long",
        //             "sessionMargin": "long",
        //             "targetExcessMargin": "long",
        //             "varMargin": "long",
        //             "realisedPnl": "long",
        //             "unrealisedPnl": "long",
        //             "indicativeTax": "long",
        //             "unrealisedProfit": "long",
        //             "syntheticMargin": "long",
        //             "walletBalance": "long",
        //             "marginBalance": "long",
        //             "marginBalancePcnt": "float",
        //             "marginLeverage": "float",
        //             "marginUsedPcnt": "float",
        //             "excessMargin": "long",
        //             "excessMarginPcnt": "float",
        //             "availableMargin": "long",
        //             "withdrawableMargin": "long",
        //             "timestamp": "timestamp",
        //             "grossLastValue": "long",
        //             "commission": "float"
        //         },
        //         "foreignKeys": {},
        //         "attributes": { account: "sorted" },
        //         "filter": { account: 1455728 },
        //         "data": [
        //             {
        //                 "account": 1455728,
        //                 "currency": "XBt",
        //                 "riskLimit": 1000000000000,
        //                 "prevState": '',
        //                 "state": '',
        //                 "action": '',
        //                 "amount": 263542,
        //                 "pendingCredit": 0,
        //                 "pendingDebit": 0,
        //                 "confirmedDebit": 0,
        //                 "prevRealisedPnl": 0,
        //                 "prevUnrealisedPnl": 0,
        //                 "grossComm": 0,
        //                 "grossOpenCost": 0,
        //                 "grossOpenPremium": 0,
        //                 "grossExecCost": 0,
        //                 "grossMarkValue": 0,
        //                 "riskValue": 0,
        //                 "taxableMargin": 0,
        //                 "initMargin": 0,
        //                 "maintMargin": 0,
        //                 "sessionMargin": 0,
        //                 "targetExcessMargin": 0,
        //                 "varMargin": 0,
        //                 "realisedPnl": 0,
        //                 "unrealisedPnl": 0,
        //                 "indicativeTax": 0,
        //                 "unrealisedProfit": 0,
        //                 "syntheticMargin": null,
        //                 "walletBalance": 263542,
        //                 "marginBalance": 263542,
        //                 "marginBalancePcnt": 1,
        //                 "marginLeverage": 0,
        //                 "marginUsedPcnt": 0,
        //                 "excessMargin": 263542,
        //                 "excessMarginPcnt": 1,
        //                 "availableMargin": 263542,
        //                 "withdrawableMargin": 263542,
        //                 "timestamp": "2020-08-03T12:01:01.246Z",
        //                 "grossLastValue": 0,
        //                 "commission": null
        //             }
        //         ]
        //     }
        //
        object data = this.safeValue(message, "data");
        object balance = this.parseBalance(data);
        this.balance = this.extend(this.balance, balance);
        object messageHash = this.safeString(message, "table");
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.balance, messageHash});
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        // initial snapshot
        //
        //     {
        //         "table": "trade",
        //         "action": "partial",
        //         "keys": [],
        //         "types": {
        //             "timestamp": "timestamp",
        //             "symbol": "symbol",
        //             "side": "symbol",
        //             "size": "long",
        //             "price": "float",
        //             "tickDirection": "symbol",
        //             "trdMatchID": "guid",
        //             "grossValue": "long",
        //             "homeNotional": "float",
        //             "foreignNotional": "float"
        //         },
        //         "foreignKeys": { symbol: "instrument", side: "side" },
        //         "attributes": { timestamp: "sorted", symbol: "grouped" },
        //         "filter": { symbol: "XBTUSD" },
        //         "data": [
        //             {
        //                 "timestamp": "2020-01-30T17:03:07.854Z",
        //                 "symbol": "XBTUSD",
        //                 "side": "Buy",
        //                 "size": 15000,
        //                 "price": 9378,
        //                 "tickDirection": "ZeroPlusTick",
        //                 "trdMatchID": "5b426e7f-83d1-2c80-295d-ee995b8ceb4a",
        //                 "grossValue": 159945000,
        //                 "homeNotional": 1.59945,
        //                 "foreignNotional": 15000
        //             }
        //         ]
        //     }
        //
        // updates
        //
        //     {
        //         "table": "trade",
        //         "action": "insert",
        //         "data": [
        //             {
        //                 "timestamp": "2020-01-30T17:31:40.160Z",
        //                 "symbol": "XBTUSD",
        //                 "side": "Sell",
        //                 "size": 37412,
        //                 "price": 9521.5,
        //                 "tickDirection": "ZeroMinusTick",
        //                 "trdMatchID": "a4bfc6bc-6cf1-1a11-622e-270eef8ca5c7",
        //                 "grossValue": 392938236,
        //                 "homeNotional": 3.92938236,
        //                 "foreignNotional": 37412
        //             }
        //         ]
        //     }
        //
        object table = "trade";
        object data = this.safeValue(message, "data", new List<object>() {});
        object dataByMarketIds = this.groupBy(data, "symbol");
        object marketIds = new List<object>(((IDictionary<string,object>)dataByMarketIds).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(marketIds)); postFixIncrement(ref i))
        {
            object marketId = getValue(marketIds, i);
            object market = this.safeMarket(marketId);
            object symbol = getValue(market, "symbol");
            object messageHash = add(add(table, ":"), symbol);
            object trades = this.parseTrades(getValue(dataByMarketIds, marketId), market);
            object stored = this.safeValue(this.trades, symbol);
            if (isTrue(isEqual(stored, null)))
            {
                object limit = this.safeInteger(this.options, "tradesLimit", 1000);
                stored = new ArrayCache(limit);
                ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
            }
            for (object j = 0; isLessThan(j, getArrayLength(trades)); postFixIncrement(ref j))
            {
                callDynamically(stored, "append", new object[] {getValue(trades, j)});
            }
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
        }
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.watchTradesForSymbols(new List<object>() {symbol}, since, limit, parameters);
    }

    public async virtual Task<object> authenticate(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(this.urls, "api"), "ws");
        var client = this.client(url);
        object messageHash = "authenticated";
        var future = client.future(messageHash);
        object authenticated = this.safeValue(((WebSocketClient)client).subscriptions, messageHash);
        if (isTrue(isEqual(authenticated, null)))
        {
            this.checkRequiredCredentials();
            object timestamp = this.milliseconds();
            object payload = add(add("GET", "/realtime"), ((object)timestamp).ToString());
            object signature = this.hmac(this.encode(payload), this.encode(this.secret), sha256);
            object request = new Dictionary<string, object>() {
                { "op", "authKeyExpires" },
                { "args", new List<object>() {this.apiKey, timestamp, signature} },
            };
            object message = this.extend(request, parameters);
            this.watch(url, messageHash, message, messageHash);
        }
        return await (future as Exchange.Future);
    }

    public virtual void handleAuthenticationMessage(WebSocketClient client, object message)
    {
        object authenticated = this.safeBool(message, "success", false);
        object messageHash = "authenticated";
        if (isTrue(authenticated))
        {
            // we resolve the future here permanently so authentication only happens once
            var future = this.safeValue((client as WebSocketClient).futures, messageHash);
            (future as Future).resolve(true);
        } else
        {
            var error = new AuthenticationError(this.json(message));
            ((WebSocketClient)client).reject(error, messageHash);
            if (isTrue(inOp(((WebSocketClient)client).subscriptions, messageHash)))
            {

            }
        }
    }

    public async override Task<object> watchPositions(object symbols = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchPositions
        * @see https://www.bitmex.com/app/wsAPI
        * @description watch all open positions
        * @param {string[]|undefined} symbols list of unified market symbols
        * @param {object} params extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object subscriptionHash = "position";
        object messageHash = "positions";
        if (!isTrue(this.isEmpty(symbols)))
        {
            messageHash = add("::", String.Join(",", ((IList<object>)symbols).ToArray()));
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", new List<object>() {subscriptionHash} },
        };
        object newPositions = await this.watch(url, messageHash, request, subscriptionHash);
        if (isTrue(this.newUpdates))
        {
            return newPositions;
        }
        return this.filterBySymbolsSinceLimit(this.positions, symbols, since, limit, true);
    }

    public virtual void handlePositions(WebSocketClient client, object message)
    {
        //
        // partial
        //    {
        //        table: 'position',
        //        action: 'partial',
        //        keys: [ 'account', 'symbol' ],
        //        types: {
        //            account: 'long',
        //            symbol: 'symbol',
        //            currency: 'symbol',
        //            underlying: 'symbol',
        //            quoteCurrency: 'symbol',
        //            commission: 'float',
        //            initMarginReq: 'float',
        //            maintMarginReq: 'float',
        //            riskLimit: 'long',
        //            leverage: 'float',
        //            crossMargin: 'boolean',
        //            deleveragePercentile: 'float',
        //            rebalancedPnl: 'long',
        //            prevRealisedPnl: 'long',
        //            prevUnrealisedPnl: 'long',
        //            openingQty: 'long',
        //            openOrderBuyQty: 'long',
        //            openOrderBuyCost: 'long',
        //            openOrderBuyPremium: 'long',
        //            openOrderSellQty: 'long',
        //            openOrderSellCost: 'long',
        //            openOrderSellPremium: 'long',
        //            currentQty: 'long',
        //            currentCost: 'long',
        //            currentComm: 'long',
        //            realisedCost: 'long',
        //            unrealisedCost: 'long',
        //            grossOpenPremium: 'long',
        //            isOpen: 'boolean',
        //            markPrice: 'float',
        //            markValue: 'long',
        //            riskValue: 'long',
        //            homeNotional: 'float',
        //            foreignNotional: 'float',
        //            posState: 'symbol',
        //            posCost: 'long',
        //            posCross: 'long',
        //            posComm: 'long',
        //            posLoss: 'long',
        //            posMargin: 'long',
        //            posMaint: 'long',
        //            initMargin: 'long',
        //            maintMargin: 'long',
        //            realisedPnl: 'long',
        //            unrealisedPnl: 'long',
        //            unrealisedPnlPcnt: 'float',
        //            unrealisedRoePcnt: 'float',
        //            avgCostPrice: 'float',
        //            avgEntryPrice: 'float',
        //            breakEvenPrice: 'float',
        //            marginCallPrice: 'float',
        //            liquidationPrice: 'float',
        //            bankruptPrice: 'float',
        //            timestamp: 'timestamp'
        //        },
        //        filter: { account: 412475 },
        //        data: [
        //            {
        //                account: 412475,
        //                symbol: 'XBTUSD',
        //                currency: 'XBt',
        //                underlying: 'XBT',
        //                quoteCurrency: 'USD',
        //                commission: 0.00075,
        //                initMarginReq: 0.01,
        //                maintMarginReq: 0.0035,
        //                riskLimit: 20000000000,
        //                leverage: 100,
        //                crossMargin: true,
        //                deleveragePercentile: 1,
        //                rebalancedPnl: 0,
        //                prevRealisedPnl: 0,
        //                prevUnrealisedPnl: 0,
        //                openingQty: 400,
        //                openOrderBuyQty: 0,
        //                openOrderBuyCost: 0,
        //                openOrderBuyPremium: 0,
        //                openOrderSellQty: 0,
        //                openOrderSellCost: 0,
        //                openOrderSellPremium: 0,
        //                currentQty: 400,
        //                currentCost: -912269,
        //                currentComm: 684,
        //                realisedCost: 0,
        //                unrealisedCost: -912269,
        //                grossOpenPremium: 0,
        //                isOpen: true,
        //                markPrice: 43772,
        //                markValue: -913828,
        //                riskValue: 913828,
        //                homeNotional: 0.00913828,
        //                foreignNotional: -400,
        //                posCost: -912269,
        //                posCross: 1559,
        //                posComm: 694,
        //                posLoss: 0,
        //                posMargin: 11376,
        //                posMaint: 3887,
        //                initMargin: 0,
        //                maintMargin: 9817,
        //                realisedPnl: -684,
        //                unrealisedPnl: -1559,
        //                unrealisedPnlPcnt: -0.0017,
        //                unrealisedRoePcnt: -0.1709,
        //                avgCostPrice: 43846.7643,
        //                avgEntryPrice: 43846.7643,
        //                breakEvenPrice: 43880,
        //                marginCallPrice: 20976,
        //                liquidationPrice: 20976,
        //                bankruptPrice: 20941,
        //                timestamp: '2023-12-07T00:09:00.709Z'
        //            }
        //        ]
        //    }
        // update
        //    {
        //        table: 'position',
        //        action: 'update',
        //        data: [
        //            {
        //                account: 412475,
        //                symbol: 'XBTUSD',
        //                currency: 'XBt',
        //                currentQty: 400,
        //                markPrice: 43772.75,
        //                markValue: -913812,
        //                riskValue: 913812,
        //                homeNotional: 0.00913812,
        //                posCross: 1543,
        //                posComm: 693,
        //                posMargin: 11359,
        //                posMaint: 3886,
        //                maintMargin: 9816,
        //                unrealisedPnl: -1543,
        //                unrealisedRoePcnt: -0.1691,
        //                liquidationPrice: 20976,
        //                timestamp: '2023-12-07T00:09:10.760Z'
        //            }
        //        ]
        //    }
        //
        if (isTrue(isEqual(this.positions, null)))
        {
            this.positions = new ArrayCacheBySymbolBySide();
        }
        object cache = this.positions;
        object rawPositions = this.safeValue(message, "data", new List<object>() {});
        object newPositions = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(rawPositions)); postFixIncrement(ref i))
        {
            object rawPosition = getValue(rawPositions, i);
            object position = this.parsePosition(rawPosition);
            ((IList<object>)newPositions).Add(position);
            callDynamically(cache, "append", new object[] {position});
        }
        object messageHashes = this.findMessageHashes(client as WebSocketClient, "positions::");
        for (object i = 0; isLessThan(i, getArrayLength(messageHashes)); postFixIncrement(ref i))
        {
            object messageHash = getValue(messageHashes, i);
            object parts = ((string)messageHash).Split(new [] {((string)"::")}, StringSplitOptions.None).ToList<object>();
            object symbolsString = getValue(parts, 1);
            object symbols = ((string)symbolsString).Split(new [] {((string)",")}, StringSplitOptions.None).ToList<object>();
            object positions = this.filterByArray(newPositions, "symbol", symbols, false);
            if (!isTrue(this.isEmpty(positions)))
            {
                callDynamically(client as WebSocketClient, "resolve", new object[] {positions, messageHash});
            }
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {newPositions, "positions"});
    }

    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchOrders
        * @description watches information on multiple orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object name = "order";
        object subscriptionHash = name;
        object messageHash = name;
        if (isTrue(!isEqual(symbol, null)))
        {
            symbol = this.symbol(symbol);
            messageHash = add(messageHash, add(":", symbol));
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", new List<object>() {subscriptionHash} },
        };
        object orders = await this.watch(url, messageHash, request, subscriptionHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }

    public virtual void handleOrders(WebSocketClient client, object message)
    {
        //
        //     {
        //         "table": "order",
        //         "action": "partial",
        //         "keys": [ "orderID" ],
        //         "types": {
        //             "orderID": "guid",
        //             "clOrdID": "string",
        //             "clOrdLinkID": "symbol",
        //             "account": "long",
        //             "symbol": "symbol",
        //             "side": "symbol",
        //             "simpleOrderQty": "float",
        //             "orderQty": "long",
        //             "price": "float",
        //             "displayQty": "long",
        //             "stopPx": "float",
        //             "pegOffsetValue": "float",
        //             "pegPriceType": "symbol",
        //             "currency": "symbol",
        //             "settlCurrency": "symbol",
        //             "ordType": "symbol",
        //             "timeInForce": "symbol",
        //             "execInst": "symbol",
        //             "contingencyType": "symbol",
        //             "exDestination": "symbol",
        //             "ordStatus": "symbol",
        //             "triggered": "symbol",
        //             "workingIndicator": "boolean",
        //             "ordRejReason": "symbol",
        //             "simpleLeavesQty": "float",
        //             "leavesQty": "long",
        //             "simpleCumQty": "float",
        //             "cumQty": "long",
        //             "avgPx": "float",
        //             "multiLegReportingType": "symbol",
        //             "text": "string",
        //             "transactTime": "timestamp",
        //             "timestamp": "timestamp"
        //         },
        //         "foreignKeys": { symbol: 'instrument', side: "side", ordStatus: "ordStatus" },
        //         "attributes": {
        //             "orderID": "grouped",
        //             "account": "grouped",
        //             "ordStatus": "grouped",
        //             "workingIndicator": "grouped"
        //         },
        //         "filter": { account: 1455728 },
        //         "data": [
        //             {
        //                 "orderID": "56222c7a-9956-413a-82cf-99f4812c214b",
        //                 "clOrdID": '',
        //                 "clOrdLinkID": '',
        //                 "account": 1455728,
        //                 "symbol": "XBTUSD",
        //                 "side": "Sell",
        //                 "simpleOrderQty": null,
        //                 "orderQty": 1,
        //                 "price": 40000,
        //                 "displayQty": null,
        //                 "stopPx": null,
        //                 "pegOffsetValue": null,
        //                 "pegPriceType": '',
        //                 "currency": "USD",
        //                 "settlCurrency": "XBt",
        //                 "ordType": "Limit",
        //                 "timeInForce": "GoodTillCancel",
        //                 "execInst": '',
        //                 "contingencyType": '',
        //                 "exDestination": "XBME",
        //                 "ordStatus": "New",
        //                 "triggered": '',
        //                 "workingIndicator": true,
        //                 "ordRejReason": '',
        //                 "simpleLeavesQty": null,
        //                 "leavesQty": 1,
        //                 "simpleCumQty": null,
        //                 "cumQty": 0,
        //                 "avgPx": null,
        //                 "multiLegReportingType": "SingleSecurity",
        //                 "text": "Submitted via API.",
        //                 "transactTime": "2021-01-02T21:38:49.246Z",
        //                 "timestamp": "2021-01-02T21:38:49.246Z"
        //             }
        //         ]
        //     }
        //
        //     {
        //         "table": "order",
        //         "action": "insert",
        //         "data": [
        //             {
        //                 "orderID": "fa993d8e-f7e4-46ed-8097-04f8e9393585",
        //                 "clOrdID": '',
        //                 "clOrdLinkID": '',
        //                 "account": 1455728,
        //                 "symbol": "XBTUSD",
        //                 "side": "Sell",
        //                 "simpleOrderQty": null,
        //                 "orderQty": 1,
        //                 "price": 40000,
        //                 "displayQty": null,
        //                 "stopPx": null,
        //                 "pegOffsetValue": null,
        //                 "pegPriceType": '',
        //                 "currency": "USD",
        //                 "settlCurrency": "XBt",
        //                 "ordType": "Limit",
        //                 "timeInForce": "GoodTillCancel",
        //                 "execInst": '',
        //                 "contingencyType": '',
        //                 "exDestination": "XBME",
        //                 "ordStatus": "New",
        //                 "triggered": '',
        //                 "workingIndicator": true,
        //                 "ordRejReason": '',
        //                 "simpleLeavesQty": null,
        //                 "leavesQty": 1,
        //                 "simpleCumQty": null,
        //                 "cumQty": 0,
        //                 "avgPx": null,
        //                 "multiLegReportingType": "SingleSecurity",
        //                 "text": "Submitted via API.",
        //                 "transactTime": "2021-01-02T23:49:02.286Z",
        //                 "timestamp": "2021-01-02T23:49:02.286Z"
        //             }
        //         ]
        //     }
        //
        //
        //
        //     {
        //         "table": "order",
        //         "action": "update",
        //         "data": [
        //             {
        //                 "orderID": "fa993d8e-f7e4-46ed-8097-04f8e9393585",
        //                 "ordStatus": "Canceled",
        //                 "workingIndicator": false,
        //                 "leavesQty": 0,
        //                 "text": "Canceled: Canceled via API.\nSubmitted via API.",
        //                 "timestamp": "2021-01-02T23:50:51.272Z",
        //                 "clOrdID": '',
        //                 "account": 1455728,
        //                 "symbol": "XBTUSD"
        //             }
        //         ]
        //     }
        //
        object data = this.safeValue(message, "data", new List<object>() {});
        object messageHash = "order";
        // initial subscription response with multiple orders
        object dataLength = getArrayLength(data);
        if (isTrue(isGreaterThan(dataLength, 0)))
        {
            if (isTrue(isEqual(this.orders, null)))
            {
                object limit = this.safeInteger(this.options, "ordersLimit", 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            object stored = this.orders;
            object symbols = new Dictionary<string, object>() {};
            for (object i = 0; isLessThan(i, dataLength); postFixIncrement(ref i))
            {
                object currentOrder = getValue(data, i);
                object orderId = this.safeString(currentOrder, "orderID");
                object previousOrder = this.safeValue((stored as ArrayCacheBySymbolById).hashmap, orderId);
                object rawOrder = currentOrder;
                if (isTrue(!isEqual(previousOrder, null)))
                {
                    rawOrder = this.extend(getValue(previousOrder, "info"), currentOrder);
                }
                object order = this.parseOrder(rawOrder);
                callDynamically(stored, "append", new object[] {order});
                object symbol = getValue(order, "symbol");
                ((IDictionary<string,object>)symbols)[(string)symbol] = true;
            }
            callDynamically(client as WebSocketClient, "resolve", new object[] {this.orders, messageHash});
            object keys = new List<object>(((IDictionary<string,object>)symbols).Keys);
            for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
            {
                object symbol = getValue(keys, i);
                callDynamically(client as WebSocketClient, "resolve", new object[] {this.orders, add(add(messageHash, ":"), symbol)});
            }
        }
    }

    public async override Task<object> watchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchMyTrades
        * @description watches information on multiple trades made by the user
        * @param {string} symbol unified market symbol of the market trades were made in
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object name = "execution";
        object subscriptionHash = name;
        object messageHash = name;
        if (isTrue(!isEqual(symbol, null)))
        {
            symbol = this.symbol(symbol);
            messageHash = add(messageHash, add(":", symbol));
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", new List<object>() {subscriptionHash} },
        };
        object trades = await this.watch(url, messageHash, request, subscriptionHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }

    public virtual void handleMyTrades(WebSocketClient client, object message)
    {
        //
        //     {
        //         "table":"execution",
        //         "action":"insert",
        //         "data":[
        //             {
        //                 "execID":"0193e879-cb6f-2891-d099-2c4eb40fee21",
        //                 "orderID":"00000000-0000-0000-0000-000000000000",
        //                 "clOrdID":"",
        //                 "clOrdLinkID":"",
        //                 "account":2,
        //                 "symbol":"XBTUSD",
        //                 "side":"Sell",
        //                 "lastQty":1,
        //                 "lastPx":1134.37,
        //                 "underlyingLastPx":null,
        //                 "lastMkt":"XBME",
        //                 "lastLiquidityInd":"RemovedLiquidity",
        //                 "simpleOrderQty":null,
        //                 "orderQty":1,
        //                 "price":1134.37,
        //                 "displayQty":null,
        //                 "stopPx":null,
        //                 "pegOffsetValue":null,
        //                 "pegPriceType":"",
        //                 "currency":"USD",
        //                 "settlCurrency":"XBt",
        //                 "execType":"Trade",
        //                 "ordType":"Limit",
        //                 "timeInForce":"ImmediateOrCancel",
        //                 "execInst":"",
        //                 "contingencyType":"",
        //                 "exDestination":"XBME",
        //                 "ordStatus":"Filled",
        //                 "triggered":"",
        //                 "workingIndicator":false,
        //                 "ordRejReason":"",
        //                 "simpleLeavesQty":0,
        //                 "leavesQty":0,
        //                 "simpleCumQty":0.001,
        //                 "cumQty":1,
        //                 "avgPx":1134.37,
        //                 "commission":0.00075,
        //                 "tradePublishIndicator":"DoNotPublishTrade",
        //                 "multiLegReportingType":"SingleSecurity",
        //                 "text":"Liquidation",
        //                 "trdMatchID":"7f4ab7f6-0006-3234-76f4-ae1385aad00f",
        //                 "execCost":88155,
        //                 "execComm":66,
        //                 "homeNotional":-0.00088155,
        //                 "foreignNotional":1,
        //                 "transactTime":"2017-04-04T22:07:46.035Z",
        //                 "timestamp":"2017-04-04T22:07:46.035Z"
        //             }
        //         ]
        //     }
        //
        object messageHash = this.safeString(message, "table");
        object data = this.safeValue(message, "data", new List<object>() {});
        object dataByExecType = this.groupBy(data, "execType");
        object rawTrades = this.safeValue(dataByExecType, "Trade", new List<object>() {});
        object trades = this.parseTrades(rawTrades);
        if (isTrue(isEqual(this.myTrades, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            this.myTrades = new ArrayCacheBySymbolById(limit);
        }
        object stored = this.myTrades;
        object symbols = new Dictionary<string, object>() {};
        for (object j = 0; isLessThan(j, getArrayLength(trades)); postFixIncrement(ref j))
        {
            object trade = getValue(trades, j);
            object symbol = getValue(trade, "symbol");
            callDynamically(stored, "append", new object[] {trade});
            ((IDictionary<string,object>)symbols)[(string)symbol] = trade;
        }
        object numTrades = getArrayLength(trades);
        if (isTrue(isGreaterThan(numTrades, 0)))
        {
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
        }
        object keys = new List<object>(((IDictionary<string,object>)symbols).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, add(add(messageHash, ":"), getValue(keys, i))});
        }
    }

    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchOrderBook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        return await this.watchOrderBookForSymbols(new List<object>() {symbol}, limit, parameters);
    }

    public async override Task<object> watchOrderBookForSymbols(object symbols, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchOrderBookForSymbols
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string[]} symbols unified array of symbols
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        object table = null;
        if (isTrue(isEqual(limit, null)))
        {
            table = this.safeString(this.options, "watchOrderBookLevel", "orderBookL2");
        } else if (isTrue(isEqual(limit, 25)))
        {
            table = "orderBookL2_25";
        } else if (isTrue(isEqual(limit, 10)))
        {
            table = "orderBookL10";
        } else
        {
            throw new ExchangeError ((string)add(this.id, " watchOrderBookForSymbols limit argument must be undefined (L2), 25 (L2) or 10 (L3)")) ;
        }
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object market = this.market(symbol);
            object topic = add(add(table, ":"), getValue(market, "id"));
            ((IList<object>)topics).Add(topic);
            object messageHash = add(add(table, ":"), symbol);
            ((IList<object>)messageHashes).Add(messageHash);
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", topics },
        };
        object orderbook = await this.watchMultiple(url, messageHashes, this.deepExtend(request, parameters), topics);
        return (orderbook as IOrderBook).limit();
    }

    public async override Task<object> watchTradesForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchTradesForSymbols
        * @description get the list of most recent trades for a list of symbols
        * @param {string[]} symbols unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object table = "trade";
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object market = this.market(symbol);
            object topic = add(add(table, ":"), getValue(market, "id"));
            ((IList<object>)topics).Add(topic);
            object messageHash = add(add(table, ":"), symbol);
            ((IList<object>)messageHashes).Add(messageHash);
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", topics },
        };
        object trades = await this.watchMultiple(url, messageHashes, this.deepExtend(request, parameters), topics);
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitmex#watchOHLCV
        * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object table = add("tradeBin", this.safeString(this.timeframes, timeframe, timeframe));
        object messageHash = add(add(table, ":"), getValue(market, "id"));
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "op", "subscribe" },
            { "args", new List<object>() {messageHash} },
        };
        object ohlcv = await this.watch(url, messageHash, this.extend(request, parameters), messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(ohlcv, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }

    public virtual void handleOHLCV(WebSocketClient client, object message)
    {
        //
        //     {
        //         "table": "tradeBin1m",
        //         "action": "partial",
        //         "keys": [],
        //         "types": {
        //             "timestamp": "timestamp",
        //             "symbol": "symbol",
        //             "open": "float",
        //             "high": "float",
        //             "low": "float",
        //             "close": "float",
        //             "trades": "long",
        //             "volume": "long",
        //             "vwap": "float",
        //             "lastSize": "long",
        //             "turnover": "long",
        //             "homeNotional": "float",
        //             "foreignNotional": "float"
        //         },
        //         "foreignKeys": { symbol: "instrument" },
        //         "attributes": { timestamp: "sorted", symbol: "grouped" },
        //         "filter": { symbol: "XBTUSD" },
        //         "data": [
        //             {
        //                 "timestamp": "2020-02-03T01:13:00.000Z",
        //                 "symbol": "XBTUSD",
        //                 "open": 9395,
        //                 "high": 9395.5,
        //                 "low": 9394.5,
        //                 "close": 9395,
        //                 "trades": 221,
        //                 "volume": 839204,
        //                 "vwap": 9394.9643,
        //                 "lastSize": 1874,
        //                 "turnover": 8932641535,
        //                 "homeNotional": 89.32641534999999,
        //                 "foreignNotional": 839204
        //             }
        //         ]
        //     }
        //
        //
        //     {
        //         "table": "tradeBin1m",
        //         "action": "insert",
        //         "data": [
        //             {
        //                 "timestamp": "2020-02-03T18:28:00.000Z",
        //                 "symbol": "XBTUSD",
        //                 "open": 9256,
        //                 "high": 9256.5,
        //                 "low": 9256,
        //                 "close": 9256,
        //                 "trades": 29,
        //                 "volume": 79057,
        //                 "vwap": 9256.688,
        //                 "lastSize": 100,
        //                 "turnover": 854077082,
        //                 "homeNotional": 8.540770820000002,
        //                 "foreignNotional": 79057
        //             }
        //         ]
        //     }
        //
        object table = this.safeString(message, "table");
        object interval = ((string)table).Replace((string)"tradeBin", (string)"");
        object timeframe = this.findTimeframe(interval);
        object duration = this.parseTimeframe(timeframe);
        object candles = this.safeValue(message, "data", new List<object>() {});
        object results = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(candles)); postFixIncrement(ref i))
        {
            object candle = getValue(candles, i);
            object marketId = this.safeString(candle, "symbol");
            object market = this.safeMarket(marketId);
            object symbol = getValue(market, "symbol");
            object messageHash = add(add(table, ":"), getValue(market, "id"));
            object result = new List<object>() {subtract(this.parse8601(this.safeString(candle, "timestamp")), multiply(duration, 1000)), null, this.safeFloat(candle, "high"), this.safeFloat(candle, "low"), this.safeFloat(candle, "close"), this.safeFloat(candle, "volume")};
            ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = this.safeValue(this.ohlcvs, symbol, new Dictionary<string, object>() {});
            object stored = this.safeValue(getValue(this.ohlcvs, symbol), timeframe);
            if (isTrue(isEqual(stored, null)))
            {
                object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
                stored = new ArrayCacheByTimestamp(limit);
                ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))[(string)timeframe] = stored;
            }
            callDynamically(stored, "append", new object[] {result});
            ((IDictionary<string,object>)results)[(string)messageHash] = stored;
        }
        object messageHashes = new List<object>(((IDictionary<string,object>)results).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(messageHashes)); postFixIncrement(ref i))
        {
            object messageHash = getValue(messageHashes, i);
            callDynamically(client as WebSocketClient, "resolve", new object[] {getValue(results, messageHash), messageHash});
        }
    }

    public async virtual Task<object> watchHeartbeat(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object eventVar = "heartbeat";
        object url = getValue(getValue(this.urls, "api"), "ws");
        return await this.watch(url, eventVar);
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // first snapshot
        //
        //     {
        //         "table": "orderBookL2",
        //         "action": "partial",
        //         "keys": [ 'symbol', "id", "side" ],
        //         "types": {
        //             "symbol": "symbol",
        //             "id": "long",
        //             "side": "symbol",
        //             "size": "long",
        //             "price": "float"
        //         },
        //         "foreignKeys": { symbol: "instrument", side: "side" },
        //         "attributes": { symbol: "parted", id: "sorted" },
        //         "filter": { symbol: "XBTUSD" },
        //         "data": [
        //             { symbol: "XBTUSD", id: 8700000100, side: "Sell", size: 1, price: 999999 },
        //             { symbol: "XBTUSD", id: 8700000200, side: "Sell", size: 3, price: 999998 },
        //             { symbol: "XBTUSD", id: 8716991250, side: "Sell", size: 26, price: 830087.5 },
        //             { symbol: "XBTUSD", id: 8728701950, side: "Sell", size: 1720, price: 712980.5 },
        //         ]
        //     }
        //
        // subsequent updates
        //
        //     {
        //         "table": "orderBookL2",
        //         "action": "update",
        //         "data": [
        //             {
        //               "table": "orderBookL2",
        //               "action": "insert",
        //               "data": [
        //                 {
        //                   "symbol": "ETH_USDT",
        //                   "id": 85499965912,
        //                   "side": "Buy",
        //                   "size": 83000000,
        //                   "price": 1704.4,
        //                   "timestamp": "2023-03-26T22:29:00.299Z"
        //                 }
        //               ]
        //             }
        //             ...
        //         ]
        //     }
        //
        object action = this.safeString(message, "action");
        object table = this.safeString(message, "table");
        if (isTrue(isEqual(table, null)))
        {
            return;  // protecting from weird updates
        }
        object data = this.safeValue(message, "data", new List<object>() {});
        // if it's an initial snapshot
        if (isTrue(isEqual(action, "partial")))
        {
            object filter = this.safeDict(message, "filter", new Dictionary<string, object>() {});
            object marketId = this.safeValue(filter, "symbol");
            if (isTrue(isEqual(marketId, null)))
            {
                return;  // protecting from weird update
            }
            object market = this.safeMarket(marketId);
            object symbol = getValue(market, "symbol");
            if (isTrue(isEqual(table, "orderBookL2")))
            {
                ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.indexedOrderBook();
            } else if (isTrue(isEqual(table, "orderBookL2_25")))
            {
                ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.indexedOrderBook(new Dictionary<string, object>() {}, 25);
            } else if (isTrue(isEqual(table, "orderBook10")))
            {
                ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.indexedOrderBook(new Dictionary<string, object>() {}, 10);
            }
            object orderbook = getValue(this.orderbooks, symbol);
            ((IDictionary<string,object>)orderbook)["symbol"] = symbol;
            for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
            {
                object price = this.safeFloat(getValue(data, i), "price");
                object size = this.convertFromRawQuantity(symbol, this.safeString(getValue(data, i), "size"));
                object id = this.safeString(getValue(data, i), "id");
                object side = this.safeString(getValue(data, i), "side");
                side = ((bool) isTrue((isEqual(side, "Buy")))) ? "bids" : "asks";
                object bookside = getValue(orderbook, side);
                (bookside as IOrderBookSide).storeArray(new List<object>() {price, size, id});
                object datetime = this.safeString(getValue(data, i), "timestamp");
                ((IDictionary<string,object>)orderbook)["timestamp"] = this.parse8601(datetime);
                ((IDictionary<string,object>)orderbook)["datetime"] = datetime;
            }
            object messageHash = add(add(table, ":"), symbol);
            callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
        } else
        {
            object numUpdatesByMarketId = new Dictionary<string, object>() {};
            for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
            {
                object marketId = this.safeValue(getValue(data, i), "symbol");
                if (isTrue(isEqual(marketId, null)))
                {
                    return;  // protecting from weird update
                }
                if (!isTrue((inOp(numUpdatesByMarketId, marketId))))
                {
                    ((IDictionary<string,object>)numUpdatesByMarketId)[(string)marketId] = 0;
                }
                ((IDictionary<string,object>)numUpdatesByMarketId)[(string)marketId] = this.sum(numUpdatesByMarketId, 1);
                object market = this.safeMarket(marketId);
                object symbol = getValue(market, "symbol");
                object orderbook = getValue(this.orderbooks, symbol);
                object price = this.safeNumber(getValue(data, i), "price");
                object size = ((bool) isTrue((isEqual(action, "delete")))) ? 0 : this.convertFromRawQuantity(symbol, this.safeString(getValue(data, i), "size", "0"));
                object id = this.safeString(getValue(data, i), "id");
                object side = this.safeString(getValue(data, i), "side");
                side = ((bool) isTrue((isEqual(side, "Buy")))) ? "bids" : "asks";
                object bookside = getValue(orderbook, side);
                (bookside as IOrderBookSide).storeArray(new List<object>() {price, size, id});
                object datetime = this.safeString(getValue(data, i), "timestamp");
                ((IDictionary<string,object>)orderbook)["timestamp"] = this.parse8601(datetime);
                ((IDictionary<string,object>)orderbook)["datetime"] = datetime;
            }
            object marketIds = new List<object>(((IDictionary<string,object>)numUpdatesByMarketId).Keys);
            for (object i = 0; isLessThan(i, getArrayLength(marketIds)); postFixIncrement(ref i))
            {
                object marketId = getValue(marketIds, i);
                object market = this.safeMarket(marketId);
                object symbol = getValue(market, "symbol");
                object messageHash = add(add(table, ":"), symbol);
                object orderbook = getValue(this.orderbooks, symbol);
                callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
            }
        }
    }

    public virtual object handleSystemStatus(WebSocketClient client, object message)
    {
        //
        // todo answer the question whether handleSystemStatus should be renamed
        // and unified as handleStatus for any usage pattern that
        // involves system status and maintenance updates
        //
        //     {
        //         "info": "Welcome to the BitMEX Realtime API.",
        //         "version": "2019-11-22T00:24:37.000Z",
        //         "timestamp": "2019-11-23T09:02:27.771Z",
        //         "docs": "https://www.bitmex.com/app/wsAPI",
        //         "limit": { remaining: 39 }
        //     }
        //
        return message;
    }

    public virtual object handleSubscriptionStatus(WebSocketClient client, object message)
    {
        //
        //     {
        //         "success": true,
        //         "subscribe": "orderBookL2:XBTUSD",
        //         "request": { op: "subscribe", args: [ "orderBookL2:XBTUSD" ] }
        //     }
        //
        return message;
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        // generic error format
        //
        //     { "error": errorMessage }
        //
        // examples
        //
        //     {
        //         "status": 429,
        //         "error": "Rate limit exceeded, retry in 1 seconds.",
        //         "meta": { "retryAfter": 1 },
        //         "request": { "op": "subscribe", "args": "orderBook" },
        //     }
        //
        //     { "error": "Rate limit exceeded, retry in 29 seconds." }
        //
        object error = this.safeString(message, "error");
        if (isTrue(!isEqual(error, null)))
        {
            object request = this.safeValue(message, "request", new Dictionary<string, object>() {});
            object args = this.safeValue(request, "args", new List<object>() {});
            object numArgs = getArrayLength(args);
            if (isTrue(isGreaterThan(numArgs, 0)))
            {
                object messageHash = getValue(args, 0);
                object broad = getValue(getValue(this.exceptions, "ws"), "broad");
                object broadKey = this.findBroadlyMatchedKey(broad, error);
                object exception = null;
                if (isTrue(isEqual(broadKey, null)))
                {
                    exception = new ExchangeError(                    ((string)error)); // c# requirement for now
                } else
                {
                    exception = this.newException(getValue(broad, broadKey), error);
                }
                ((WebSocketClient)client).reject(exception, messageHash);
                return false;
            }
        }
        return true;
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         "info": "Welcome to the BitMEX Realtime API.",
        //         "version": "2019-11-22T00:24:37.000Z",
        //         "timestamp": "2019-11-23T09:04:42.569Z",
        //         "docs": "https://www.bitmex.com/app/wsAPI",
        //         "limit": { remaining: 38 }
        //     }
        //
        //     {
        //         "success": true,
        //         "subscribe": "orderBookL2:XBTUSD",
        //         "request": { op: "subscribe", args: [ "orderBookL2:XBTUSD" ] }
        //     }
        //
        //     {
        //         "table": "orderBookL2",
        //         "action": "update",
        //         "data": [
        //             { symbol: "XBTUSD", id: 8799284800, side: "Sell", size: 721000 },
        //             { symbol: "XBTUSD", id: 8799285100, side: "Sell", size: 70590 },
        //             { symbol: "XBTUSD", id: 8799285550, side: "Sell", size: 217652 },
        //             { symbol: "XBTUSD", id: 8799285850, side: "Sell", size: 105578 },
        //             { symbol: "XBTUSD", id: 8799286350, side: "Sell", size: 172093 },
        //             { symbol: "XBTUSD", id: 8799286650, side: "Sell", size: 201125 },
        //             { symbol: "XBTUSD", id: 8799288950, side: "Buy", size: 47552 },
        //             { symbol: "XBTUSD", id: 8799289250, side: "Buy", size: 78217 },
        //             { symbol: "XBTUSD", id: 8799289700, side: "Buy", size: 193677 },
        //             { symbol: "XBTUSD", id: 8799290000, side: "Buy", size: 818161 },
        //             { symbol: "XBTUSD", id: 8799290500, side: "Buy", size: 218806 },
        //             { symbol: "XBTUSD", id: 8799290800, side: "Buy", size: 102946 }
        //         ]
        //     }
        //
        if (isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            object table = this.safeString(message, "table");
            object methods = new Dictionary<string, object>() {
                { "orderBookL2", this.handleOrderBook },
                { "orderBookL2_25", this.handleOrderBook },
                { "orderBook10", this.handleOrderBook },
                { "instrument", this.handleTicker },
                { "trade", this.handleTrades },
                { "tradeBin1m", this.handleOHLCV },
                { "tradeBin5m", this.handleOHLCV },
                { "tradeBin1h", this.handleOHLCV },
                { "tradeBin1d", this.handleOHLCV },
                { "order", this.handleOrders },
                { "execution", this.handleMyTrades },
                { "margin", this.handleBalance },
                { "liquidation", this.handleLiquidation },
                { "position", this.handlePositions },
            };
            object method = this.safeValue(methods, table);
            if (isTrue(isEqual(method, null)))
            {
                object request = this.safeValue(message, "request", new Dictionary<string, object>() {});
                object op = this.safeValue(request, "op");
                if (isTrue(isEqual(op, "authKeyExpires")))
                {
                    this.handleAuthenticationMessage(client as WebSocketClient, message);
                }
            } else
            {
                DynamicInvoker.InvokeMethod(method, new object[] { client, message});
            }
        }
    }
}
