namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class hyperliquid { public hyperliquid(object args = null) : base(args) { } }
public partial class hyperliquid : ccxt.hyperliquid
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "createOrderWs", true },
                { "createOrdersWs", true },
                { "editOrderWs", true },
                { "watchBalance", false },
                { "watchMyTrades", true },
                { "watchOHLCV", true },
                { "watchOrderBook", true },
                { "watchOrders", true },
                { "watchTicker", true },
                { "watchTickers", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", false },
                { "watchPosition", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", new Dictionary<string, object>() {
                        { "public", "wss://api.hyperliquid.xyz/ws" },
                    } },
                } },
                { "test", new Dictionary<string, object>() {
                    { "ws", new Dictionary<string, object>() {
                        { "public", "wss://api.hyperliquid-testnet.xyz/ws" },
                    } },
                } },
            } },
            { "options", new Dictionary<string, object>() {} },
            { "streaming", new Dictionary<string, object>() {
                { "ping", this.ping },
                { "keepAlive", 20000 },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "ws", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {} },
                } },
            } },
        });
    }

    /**
     * @method
     * @name hyperliquid#createOrdersWs
     * @description create a list of trade orders using WebSocket post request
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/exchange-endpoint#place-an-order
     * @param {Array} orders list of orders to create, each object should contain the parameters required by createOrder, namely symbol, type, side, amount, price and params
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> createOrdersWs(object orders, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object ordersRequest = this.createOrdersRequest(orders, parameters);
        object wrapped = this.wrapAsPostAction(ordersRequest);
        object request = this.safeDict(wrapped, "request", new Dictionary<string, object>() {});
        object requestId = this.safeString(wrapped, "requestId");
        object response = await this.watch(url, requestId, request, requestId);
        object responseOjb = this.safeDict(response, "response", new Dictionary<string, object>() {});
        object data = this.safeDict(responseOjb, "data", new Dictionary<string, object>() {});
        object statuses = this.safeList(data, "statuses", new List<object>() {});
        return this.parseOrders(statuses, null);
    }

    /**
     * @method
     * @name hyperliquid#createOrder
     * @description create a trade order using WebSocket post request
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/exchange-endpoint#place-an-order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.timeInForce] 'Gtc', 'Ioc', 'Alo'
     * @param {bool} [params.postOnly] true or false whether the order is post-only
     * @param {bool} [params.reduceOnly] true or false whether the order is reduce-only
     * @param {float} [params.triggerPrice] The price at which a trigger order is triggered at
     * @param {string} [params.clientOrderId] client order id, (optional 128 bit hex string e.g. 0x1234567890abcdef1234567890abcdef)
     * @param {string} [params.slippage] the slippage for market order
     * @param {string} [params.vaultAddress] the vault address for order
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createOrderWs(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        var orderglobalParamsVariable = this.parseCreateOrderArgs(symbol, type, side, amount, price, parameters);
        var order = ((IList<object>) orderglobalParamsVariable)[0];
        var globalParams = ((IList<object>) orderglobalParamsVariable)[1];
        object orders = await this.createOrdersWs(new List<object>() {((object)order)}, globalParams);
        return getValue(orders, 0);
    }

    /**
     * @method
     * @name hyperliquid#editOrder
     * @description edit a trade order
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/exchange-endpoint#modify-an-order
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/exchange-endpoint#modify-multiple-orders
     * @param {string} id cancel order id
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.timeInForce] 'Gtc', 'Ioc', 'Alo'
     * @param {bool} [params.postOnly] true or false whether the order is post-only
     * @param {bool} [params.reduceOnly] true or false whether the order is reduce-only
     * @param {float} [params.triggerPrice] The price at which a trigger order is triggered at
     * @param {string} [params.clientOrderId] client order id, (optional 128 bit hex string e.g. 0x1234567890abcdef1234567890abcdef)
     * @param {string} [params.vaultAddress] the vault address for order
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> editOrderWs(object id, object symbol, object type, object side, object amount = null, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object postRequest = this.editOrderRequest(id, symbol, type, side, amount, price, parameters);
        object wrapped = this.wrapAsPostAction(postRequest);
        object request = this.safeDict(wrapped, "request", new Dictionary<string, object>() {});
        object requestId = this.safeString(wrapped, "requestId");
        object response = await this.watch(url, requestId, request, requestId);
        // response is the same as in this.editOrder
        object responseObject = this.safeDict(response, "response", new Dictionary<string, object>() {});
        object dataObject = this.safeDict(responseObject, "data", new Dictionary<string, object>() {});
        object statuses = this.safeList(dataObject, "statuses", new List<object>() {});
        object first = this.safeDict(statuses, 0, new Dictionary<string, object>() {});
        return this.parseOrder(first, market);
    }

    /**
     * @method
     * @name hyperliquid#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object messageHash = add("orderbook:", symbol);
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "l2Book" },
                { "coin", ((bool) isTrue(getValue(market, "swap"))) ? getValue(market, "base") : getValue(market, "id") },
            } },
        };
        object message = this.extend(request, parameters);
        object orderbook = await this.watch(url, messageHash, message, messageHash);
        return (orderbook as IOrderBook).limit();
    }

    /**
     * @method
     * @name hyperliquid#unWatchOrderBook
     * @description unWatches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> unWatchOrderBook(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object subMessageHash = add("orderbook:", symbol);
        object messageHash = add("unsubscribe:", subMessageHash);
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object id = ((object)this.nonce()).ToString();
        object request = new Dictionary<string, object>() {
            { "id", id },
            { "method", "unsubscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "l2Book" },
                { "coin", ((bool) isTrue(getValue(market, "swap"))) ? getValue(market, "base") : getValue(market, "id") },
            } },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        //     {
        //         "channel": "l2Book",
        //         "data": {
        //             "coin": "BTC",
        //             "time": 1710131872708,
        //             "levels": [
        //                 [
        //                     {
        //                         "px": "68674.0",
        //                         "sz": "0.97139",
        //                         "n": 4
        //                     }
        //                 ],
        //                 [
        //                     {
        //                         "px": "68675.0",
        //                         "sz": "0.04396",
        //                         "n": 1
        //                     }
        //                 ]
        //             ]
        //         }
        //     }
        //
        object entry = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object coin = this.safeString(entry, "coin");
        object marketId = this.coinToMarketId(coin);
        object market = this.market(marketId);
        object symbol = getValue(market, "symbol");
        object rawData = this.safeList(entry, "levels", new List<object>() {});
        object data = new Dictionary<string, object>() {
            { "bids", this.safeList(rawData, 0, new List<object>() {}) },
            { "asks", this.safeList(rawData, 1, new List<object>() {}) },
        };
        object timestamp = this.safeInteger(entry, "time");
        object snapshot = this.parseOrderBook(data, symbol, timestamp, "bids", "asks", "px", "sz");
        if (!isTrue((inOp(this.orderbooks, symbol))))
        {
            object ob = this.orderBook(snapshot);
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = ob;
        }
        object orderbook = getValue(this.orderbooks, symbol);
        (orderbook as IOrderBook).reset(snapshot);
        object messageHash = add("orderbook:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
    }

    /**
     * @method
     * @name hyperliquid#watchTicker
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object tickers = await this.watchTickers(new List<object>() {symbol}, parameters);
        return getValue(tickers, symbol);
    }

    /**
     * @method
     * @name hyperliquid#watchTickers
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true);
        object messageHash = "tickers";
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "webData2" },
                { "user", "0x0000000000000000000000000000000000000000" },
            } },
        };
        object tickers = await this.watch(url, messageHash, this.extend(request, parameters), messageHash);
        if (isTrue(this.newUpdates))
        {
            return this.filterByArrayTickers(tickers, "symbol", symbols);
        }
        return this.tickers;
    }

    /**
     * @method
     * @name hyperliquid#unWatchTickers
     * @description unWatches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> unWatchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true);
        object subMessageHash = "tickers";
        object messageHash = add("unsubscribe:", subMessageHash);
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "unsubscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "webData2" },
                { "user", "0x0000000000000000000000000000000000000000" },
            } },
        };
        return await this.watch(url, messageHash, this.extend(request, parameters), messageHash);
    }

    /**
     * @method
     * @name hyperliquid#watchMyTrades
     * @description watches information on multiple trades made by the user
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.user] user address, will default to this.walletAddress if not provided
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> watchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object userAddress = null;
        var userAddressparametersVariable = this.handlePublicAddress("watchMyTrades", parameters);
        userAddress = ((IList<object>)userAddressparametersVariable)[0];
        parameters = ((IList<object>)userAddressparametersVariable)[1];
        await this.loadMarkets();
        object messageHash = "myTrades";
        if (isTrue(!isEqual(symbol, null)))
        {
            symbol = this.symbol(symbol);
            messageHash = add(messageHash, add(":", symbol));
        }
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "userFills" },
                { "user", userAddress },
            } },
        };
        object message = this.extend(request, parameters);
        object trades = await this.watch(url, messageHash, message, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }

    public virtual void handleWsTickers(WebSocketClient client, object message)
    {
        //
        //     {
        //         "channel": "webData2",
        //         "data": {
        //             "meta": {
        //                 "universe": [
        //                     {
        //                         "szDecimals": 5,
        //                         "name": "BTC",
        //                         "maxLeverage": 50,
        //                         "onlyIsolated": false
        //                     },
        //                     ...
        //                 ],
        //             },
        //             "assetCtxs": [
        //                 {
        //                     "funding": "0.00003005",
        //                     "openInterest": "2311.50778",
        //                     "prevDayPx": "63475.0",
        //                     "dayNtlVlm": "468043329.64289033",
        //                     "premium": "0.00094264",
        //                     "oraclePx": "64712.0",
        //                     "markPx": "64774.0",
        //                     "midPx": "64773.5",
        //                     "impactPxs": [
        //                         "64773.0",
        //                         "64774.0"
        //                     ]
        //                 },
        //                 ...
        //             ],
        //             "spotAssetCtxs": [
        //                 {
        //                     "prevDayPx": "0.20937",
        //                     "dayNtlVlm": "11188888.61984999",
        //                     "markPx": "0.19722",
        //                     "midPx": "0.197145",
        //                     "circulatingSupply": "598760557.12072003",
        //                     "coin": "PURR/USDC"
        //                 },
        //                 ...
        //             ],
        //         }
        //     }
        //
        // spot
        object rawData = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object spotAssets = this.safeList(rawData, "spotAssetCtxs", new List<object>() {});
        object parsedTickers = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(spotAssets)); postFixIncrement(ref i))
        {
            object assetObject = getValue(spotAssets, i);
            object marketId = this.safeString(assetObject, "coin");
            object market = this.safeMarket(marketId, null, null, "spot");
            object ticker = this.parseWsTicker(assetObject, market);
            ((IList<object>)parsedTickers).Add(ticker);
        }
        // perpetuals
        object meta = this.safeDict(rawData, "meta", new Dictionary<string, object>() {});
        object universe = this.safeList(meta, "universe", new List<object>() {});
        object assetCtxs = this.safeList(rawData, "assetCtxs", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(universe)); postFixIncrement(ref i))
        {
            object data = this.extend(this.safeDict(universe, i, new Dictionary<string, object>() {}), this.safeDict(assetCtxs, i, new Dictionary<string, object>() {}));
            object id = add(getValue(data, "name"), "/USDC:USDC");
            object market = this.safeMarket(id, null, null, "swap");
            object ticker = this.parseWsTicker(data, market);
            ((IList<object>)parsedTickers).Add(ticker);
        }
        object tickers = this.indexBy(parsedTickers, "symbol");
        callDynamically(client as WebSocketClient, "resolve", new object[] {tickers, "tickers"});
    }

    public virtual object parseWsTicker(object rawTicker, object market = null)
    {
        return this.parseTicker(rawTicker, market);
    }

    public virtual void handleMyTrades(WebSocketClient client, object message)
    {
        //
        //     {
        //         "channel": "userFills",
        //         "data": {
        //             "isSnapshot": true,
        //             "user": "0x15f43d1f2dee81424afd891943262aa90f22cc2a",
        //             "fills": [
        //                 {
        //                     "coin": "BTC",
        //                     "px": "72528.0",
        //                     "sz": "0.11693",
        //                     "side": "A",
        //                     "time": 1710208712815,
        //                     "startPosition": "0.11693",
        //                     "dir": "Close Long",
        //                     "closedPnl": "-0.81851",
        //                     "hash": "0xc5adaf35f8402750c218040b0a7bc301130051521273b6f398b3caad3e1f3f5f",
        //                     "oid": 7484888874,
        //                     "crossed": true,
        //                     "fee": "2.968244",
        //                     "liquidationMarkPx": null,
        //                     "tid": 567547935839686,
        //                     "cloid": null
        //                 }
        //             ]
        //         }
        //     }
        //
        object entry = this.safeDict(message, "data", new Dictionary<string, object>() {});
        if (isTrue(isEqual(this.myTrades, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            this.myTrades = new ArrayCacheBySymbolById(limit);
        }
        object trades = this.myTrades;
        object symbols = new Dictionary<string, object>() {};
        object data = this.safeList(entry, "fills", new List<object>() {});
        object dataLength = getArrayLength(data);
        if (isTrue(isEqual(dataLength, 0)))
        {
            return;
        }
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object rawTrade = getValue(data, i);
            object parsed = this.parseWsTrade(rawTrade);
            object symbol = getValue(parsed, "symbol");
            ((IDictionary<string,object>)symbols)[(string)symbol] = true;
            callDynamically(trades, "append", new object[] {parsed});
        }
        object keys = new List<object>(((IDictionary<string,object>)symbols).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object currentMessageHash = add("myTrades:", getValue(keys, i));
            callDynamically(client as WebSocketClient, "resolve", new object[] {trades, currentMessageHash});
        }
        // non-symbol specific
        object messageHash = "myTrades";
        callDynamically(client as WebSocketClient, "resolve", new object[] {trades, messageHash});
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        // s
        // @method
        // @name hyperliquid#watchTrades
        // @description watches information on multiple trades made in a market
        // @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
        // @param {string} symbol unified market symbol of the market trades were made in
        // @param {int} [since] the earliest time in ms to fetch trades for
        // @param {int} [limit] the maximum number of trade structures to retrieve
        // @param {object} [params] extra parameters specific to the exchange API endpoint
        // @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        //
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object messageHash = add("trade:", symbol);
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "trades" },
                { "coin", ((bool) isTrue(getValue(market, "swap"))) ? getValue(market, "base") : getValue(market, "id") },
            } },
        };
        object message = this.extend(request, parameters);
        object trades = await this.watch(url, messageHash, message, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    /**
     * @method
     * @name hyperliquid#unWatchTrades
     * @description unWatches information on multiple trades made in a market
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified market symbol of the market trades were made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    public async override Task<object> unWatchTrades(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object subMessageHash = add("trade:", symbol);
        object messageHash = add("unsubscribe:", subMessageHash);
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "unsubscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "trades" },
                { "coin", ((bool) isTrue(getValue(market, "swap"))) ? getValue(market, "base") : getValue(market, "id") },
            } },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        //     {
        //         "channel": "trades",
        //         "data": [
        //             {
        //                 "coin": "BTC",
        //                 "side": "A",
        //                 "px": "68517.0",
        //                 "sz": "0.005",
        //                 "time": 1710125266669,
        //                 "hash": "0xc872699f116e012186620407fc08a802015e0097c5cce74710697f7272e6e959",
        //                 "tid": 981894269203506
        //             }
        //         ]
        //     }
        //
        object entry = this.safeList(message, "data", new List<object>() {});
        object first = this.safeDict(entry, 0, new Dictionary<string, object>() {});
        object coin = this.safeString(first, "coin");
        object marketId = this.coinToMarketId(coin);
        object market = this.market(marketId);
        object symbol = getValue(market, "symbol");
        if (!isTrue((inOp(this.trades, symbol))))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            var stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object trades = getValue(this.trades, symbol);
        for (object i = 0; isLessThan(i, getArrayLength(entry)); postFixIncrement(ref i))
        {
            object data = this.safeDict(entry, i);
            object trade = this.parseWsTrade(data);
            callDynamically(trades, "append", new object[] {trade});
        }
        object messageHash = add("trade:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {trades, messageHash});
    }

    public override object parseWsTrade(object trade, object market = null)
    {
        //
        // fetchMyTrades
        //
        //     {
        //         "coin": "BTC",
        //         "px": "72528.0",
        //         "sz": "0.11693",
        //         "side": "A",
        //         "time": 1710208712815,
        //         "startPosition": "0.11693",
        //         "dir": "Close Long",
        //         "closedPnl": "-0.81851",
        //         "hash": "0xc5adaf35f8402750c218040b0a7bc301130051521273b6f398b3caad3e1f3f5f",
        //         "oid": 7484888874,
        //         "crossed": true,
        //         "fee": "2.968244",
        //         "liquidationMarkPx": null,
        //         "tid": 567547935839686,
        //         "cloid": null
        //     }
        //
        // fetchTrades
        //
        //     {
        //         "coin": "BTC",
        //         "side": "A",
        //         "px": "68517.0",
        //         "sz": "0.005",
        //         "time": 1710125266669,
        //         "hash": "0xc872699f116e012186620407fc08a802015e0097c5cce74710697f7272e6e959",
        //         "tid": 981894269203506
        //     }
        //
        object timestamp = this.safeInteger(trade, "time");
        object price = this.safeString(trade, "px");
        object amount = this.safeString(trade, "sz");
        object coin = this.safeString(trade, "coin");
        object marketId = this.coinToMarketId(coin);
        market = this.safeMarket(marketId, null);
        object symbol = getValue(market, "symbol");
        object id = this.safeString(trade, "tid");
        object side = this.safeString(trade, "side");
        if (isTrue(!isEqual(side, null)))
        {
            side = ((bool) isTrue((isEqual(side, "A")))) ? "sell" : "buy";
        }
        object fee = this.safeString(trade, "fee");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "id", id },
            { "order", null },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", new Dictionary<string, object>() {
                { "cost", fee },
                { "currency", "USDC" },
            } },
        }, market);
    }

    /**
     * @method
     * @name hyperliquid#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, close price, and the volume of a market
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "candle" },
                { "coin", ((bool) isTrue(getValue(market, "swap"))) ? getValue(market, "base") : getValue(market, "id") },
                { "interval", timeframe },
            } },
        };
        object messageHash = add(add(add("candles:", timeframe), ":"), symbol);
        object message = this.extend(request, parameters);
        object ohlcv = await this.watch(url, messageHash, message, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(ohlcv, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }

    /**
     * @method
     * @name hyperliquid#unWatchOHLCV
     * @description watches historical candlestick data containing the open, high, low, close price, and the volume of a market
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async virtual Task<object> unWatchOHLCV(object symbol, object timeframe = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "unsubscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "candle" },
                { "coin", ((bool) isTrue(getValue(market, "swap"))) ? getValue(market, "base") : getValue(market, "id") },
                { "interval", timeframe },
            } },
        };
        object subMessageHash = add(add(add("candles:", timeframe), ":"), symbol);
        object messagehash = add("unsubscribe:", subMessageHash);
        object message = this.extend(request, parameters);
        return await this.watch(url, messagehash, message, messagehash);
    }

    public virtual void handleOHLCV(WebSocketClient client, object message)
    {
        //
        //     {
        //         channel: 'candle',
        //         data: {
        //             t: 1710146280000,
        //             T: 1710146339999,
        //             s: 'BTC',
        //             i: '1m',
        //             o: '71400.0',
        //             c: '71411.0',
        //             h: '71422.0',
        //             l: '71389.0',
        //             v: '1.20407',
        //             n: 20
        //         }
        //     }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object bs = this.safeString(data, "s");
        object marketId = this.coinToMarketId(bs);
        object symbol = this.safeSymbol(marketId);
        object timeframe = this.safeString(data, "i");
        if (!isTrue((inOp(this.ohlcvs, symbol))))
        {
            ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = new Dictionary<string, object>() {};
        }
        if (!isTrue((inOp(getValue(this.ohlcvs, symbol), timeframe))))
        {
            object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
            var stored = new ArrayCacheByTimestamp(limit);
            ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))[(string)timeframe] = stored;
        }
        object ohlcv = getValue(getValue(this.ohlcvs, symbol), timeframe);
        object parsed = this.parseOHLCV(data);
        callDynamically(ohlcv, "append", new object[] {parsed});
        object messageHash = add(add(add("candles:", timeframe), ":"), symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {ohlcv, messageHash});
    }

    public virtual void handleWsPost(WebSocketClient client, object message)
    {
        //    {
        //         channel: "post",
        //         data: {
        //             id: <number>,
        //             response: {
        //                  type: "info" | "action" | "error",
        //                  payload: { ... }
        //         }
        //    }
        object data = this.safeDict(message, "data");
        object id = this.safeString(data, "id");
        object response = this.safeDict(data, "response");
        object payload = this.safeDict(response, "payload");
        callDynamically(client as WebSocketClient, "resolve", new object[] {payload, id});
    }

    /**
     * @method
     * @name hyperliquid#watchOrders
     * @description watches information on multiple orders made by the user
     * @see https://hyperliquid.gitbook.io/hyperliquid-docs/for-developers/api/websocket/subscriptions
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.user] user address, will default to this.walletAddress if not provided
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object userAddress = null;
        var userAddressparametersVariable = this.handlePublicAddress("watchOrders", parameters);
        userAddress = ((IList<object>)userAddressparametersVariable)[0];
        parameters = ((IList<object>)userAddressparametersVariable)[1];
        object market = null;
        object messageHash = "order";
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
            messageHash = add(add(messageHash, ":"), symbol);
        }
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "subscription", new Dictionary<string, object>() {
                { "type", "orderUpdates" },
                { "user", userAddress },
            } },
        };
        object message = this.extend(request, parameters);
        object orders = await this.watch(url, messageHash, message, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }

    public virtual void handleOrder(WebSocketClient client, object message)
    {
        //
        //     {
        //         channel: 'orderUpdates',
        //         data: [
        //             {
        //                 order: {
        //                     coin: 'BTC',
        //                     side: 'B',
        //                     limitPx: '30000.0',
        //                     sz: '0.001',
        //                     oid: 7456484275,
        //                     timestamp: 1710163596492,
        //                     origSz: '0.001'
        //                 },
        //                 status: 'open',
        //                 statusTimestamp: 1710163596492
        //             }
        //         ]
        //     }
        //
        object data = this.safeList(message, "data", new List<object>() {});
        if (isTrue(isEqual(this.orders, null)))
        {
            object limit = this.safeInteger(this.options, "ordersLimit", 1000);
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        object dataLength = getArrayLength(data);
        if (isTrue(isEqual(dataLength, 0)))
        {
            return;
        }
        object stored = this.orders;
        object messageHash = "order";
        object marketSymbols = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object rawOrder = getValue(data, i);
            object order = this.parseOrder(rawOrder);
            callDynamically(stored, "append", new object[] {order});
            object symbol = this.safeString(order, "symbol");
            ((IDictionary<string,object>)marketSymbols)[(string)symbol] = true;
        }
        object keys = new List<object>(((IDictionary<string,object>)marketSymbols).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object symbol = getValue(keys, i);
            object innerMessageHash = add(add(messageHash, ":"), symbol);
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, innerMessageHash});
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         "channel": "error",
        //         "data": "Error parsing JSON into valid websocket request: { \"type\": \"allMids\" }"
        //     }
        //
        object channel = this.safeString(message, "channel", "");
        object ret_msg = this.safeString(message, "data", "");
        if (isTrue(isEqual(channel, "error")))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), ret_msg)) ;
        } else
        {
            return false;
        }
    }

    public virtual void handleOrderBookUnsubscription(WebSocketClient client, object subscription)
    {
        //
        //        "subscription":{
        //           "type":"l2Book",
        //           "coin":"BTC",
        //           "nSigFigs":5,
        //           "mantissa":null
        //        }
        //
        object coin = this.safeString(subscription, "coin");
        object marketId = this.coinToMarketId(coin);
        object symbol = this.safeSymbol(marketId);
        object subMessageHash = add("orderbook:", symbol);
        object messageHash = add("unsubscribe:", subMessageHash);
        this.cleanUnsubscription(client as WebSocketClient, subMessageHash, messageHash);
        if (isTrue(inOp(this.orderbooks, symbol)))
        {
            ((IDictionary<string,object>)this.orderbooks).Remove((string)symbol);
        }
    }

    public virtual void handleTradesUnsubscription(WebSocketClient client, object subscription)
    {
        //
        object coin = this.safeString(subscription, "coin");
        object marketId = this.coinToMarketId(coin);
        object symbol = this.safeSymbol(marketId);
        object subMessageHash = add("trade:", symbol);
        object messageHash = add("unsubscribe:", subMessageHash);
        this.cleanUnsubscription(client as WebSocketClient, subMessageHash, messageHash);
        if (isTrue(inOp(this.trades, symbol)))
        {
            ((IDictionary<string,object>)this.trades).Remove((string)symbol);
        }
    }

    public virtual void handleTickersUnsubscription(WebSocketClient client, object subscription)
    {
        //
        object subMessageHash = "tickers";
        object messageHash = add("unsubscribe:", subMessageHash);
        this.cleanUnsubscription(client as WebSocketClient, subMessageHash, messageHash);
        object symbols = new List<object>(((IDictionary<string,object>)this.tickers).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            ((IDictionary<string,object>)this.tickers).Remove((string)getValue(symbols, i));
        }
    }

    public virtual void handleOHLCVUnsubscription(WebSocketClient client, object subscription)
    {
        object coin = this.safeString(subscription, "coin");
        object marketId = this.coinToMarketId(coin);
        object symbol = this.safeSymbol(marketId);
        object interval = this.safeString(subscription, "interval");
        object timeframe = this.findTimeframe(interval);
        object subMessageHash = add(add(add("candles:", timeframe), ":"), symbol);
        object messageHash = add("unsubscribe:", subMessageHash);
        this.cleanUnsubscription(client as WebSocketClient, subMessageHash, messageHash);
        if (isTrue(inOp(this.ohlcvs, symbol)))
        {
            if (isTrue(inOp(getValue(this.ohlcvs, symbol), timeframe)))
            {
                ((IDictionary<string,object>)getValue(this.ohlcvs, symbol)).Remove((string)timeframe);
            }
        }
    }

    public virtual void handleSubscriptionResponse(WebSocketClient client, object message)
    {
        // {
        //     "channel":"subscriptionResponse",
        //     "data":{
        //        "method":"unsubscribe",
        //        "subscription":{
        //           "type":"l2Book",
        //           "coin":"BTC",
        //           "nSigFigs":5,
        //           "mantissa":null
        //        }
        //     }
        // }
        //
        //  {
        //      "channel":"subscriptionResponse",
        //      "data":{
        //         "method":"unsubscribe",
        //         "subscription":{
        //            "type":"trades",
        //            "coin":"PURR/USDC"
        //         }
        //      }
        //  }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object method = this.safeString(data, "method");
        if (isTrue(isEqual(method, "unsubscribe")))
        {
            object subscription = this.safeDict(data, "subscription", new Dictionary<string, object>() {});
            object type = this.safeString(subscription, "type");
            if (isTrue(isEqual(type, "l2Book")))
            {
                this.handleOrderBookUnsubscription(client as WebSocketClient, subscription);
            } else if (isTrue(isEqual(type, "trades")))
            {
                this.handleTradesUnsubscription(client as WebSocketClient, subscription);
            } else if (isTrue(isEqual(type, "webData2")))
            {
                this.handleTickersUnsubscription(client as WebSocketClient, subscription);
            } else if (isTrue(isEqual(type, "candle")))
            {
                this.handleOHLCVUnsubscription(client as WebSocketClient, subscription);
            }
        }
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        //
        // {
        //     "channel":"subscriptionResponse",
        //     "data":{
        //        "method":"unsubscribe",
        //        "subscription":{
        //           "type":"l2Book",
        //           "coin":"BTC",
        //           "nSigFigs":5,
        //           "mantissa":null
        //        }
        //     }
        // }
        //
        if (isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            return;
        }
        object topic = this.safeString(message, "channel", "");
        object methods = new Dictionary<string, object>() {
            { "pong", this.handlePong },
            { "trades", this.handleTrades },
            { "l2Book", this.handleOrderBook },
            { "candle", this.handleOHLCV },
            { "orderUpdates", this.handleOrder },
            { "userFills", this.handleMyTrades },
            { "webData2", this.handleWsTickers },
            { "post", this.handleWsPost },
            { "subscriptionResponse", this.handleSubscriptionResponse },
        };
        object exacMethod = this.safeValue(methods, topic);
        if (isTrue(!isEqual(exacMethod, null)))
        {
            DynamicInvoker.InvokeMethod(exacMethod, new object[] { client, message});
            return;
        }
        object keys = new List<object>(((IDictionary<string,object>)methods).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object key = getValue(keys, i);
            if (isTrue(isGreaterThanOrEqual(getIndexOf(topic, getValue(keys, i)), 0)))
            {
                object method = getValue(methods, key);
                DynamicInvoker.InvokeMethod(method, new object[] { client, message});
                return;
            }
        }
    }

    public override object ping(WebSocketClient client)
    {
        return new Dictionary<string, object>() {
            { "method", "ping" },
        };
    }

    public virtual object handlePong(WebSocketClient client, object message)
    {
        //
        //   {
        //       "channel": "pong"
        //   }
        //
        client.lastPong = this.safeInteger(message, "pong");
        return message;
    }

    public virtual object requestId()
    {
        object requestId = this.sum(this.safeInteger(this.options, "requestId", 0), 1);
        ((IDictionary<string,object>)this.options)["requestId"] = requestId;
        return requestId;
    }

    public virtual object wrapAsPostAction(object request)
    {
        object requestId = this.requestId();
        return new Dictionary<string, object>() {
            { "requestId", requestId },
            { "request", new Dictionary<string, object>() {
                { "method", "post" },
                { "id", requestId },
                { "request", new Dictionary<string, object>() {
                    { "type", "action" },
                    { "payload", request },
                } },
            } },
        };
    }
}
