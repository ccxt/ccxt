namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class tradeogre { public tradeogre(object args = null) : base(args) { } }
public partial class tradeogre : ccxt.tradeogre
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", true },
                { "watchOrderBook", true },
                { "watchOrderBookForSymbols", false },
                { "watchOHLCV", false },
                { "watchOHLCVForSymbols", false },
                { "watchOrders", false },
                { "watchMyTrades", false },
                { "watchTicker", false },
                { "watchTickers", false },
                { "watchBidsAsks", false },
                { "watchBalance", false },
                { "createOrderWs", false },
                { "editOrderWs", false },
                { "cancelOrderWs", false },
                { "cancelOrdersWs", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://tradeogre.com:8443" },
                } },
            } },
            { "options", new Dictionary<string, object>() {} },
            { "streaming", new Dictionary<string, object>() {} },
        });
    }

    /**
     * @method
     * @name tradeogre#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://tradeogre.com/help/api
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return (not used by the exchange)
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object url = getValue(getValue(this.urls, "api"), "ws");
        object messageHash = add(add("orderbook", ":"), getValue(market, "symbol"));
        object request = new Dictionary<string, object>() {
            { "a", "subscribe" },
            { "e", "book" },
            { "t", getValue(market, "id") },
        };
        object orderbook = await this.watch(url, messageHash, this.extend(request, parameters), messageHash);
        return (orderbook as IOrderBook).limit();
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // initial snapshot is fetched with ccxt's fetchOrderBook
        // the feed does not include a snapshot, just the deltas
        //
        //     {
        //         "e": "book",
        //         "t": "ETH-USDT",
        //         "s": "10752324",
        //         "d": {
        //             "bids": { "1787.02497915": "0" },
        //             "asks": {}
        //         }
        //     }
        //
        object marketId = this.safeString(message, "t");
        object symbol = this.safeSymbol(marketId);
        if (!isTrue((inOp(this.orderbooks, symbol))))
        {
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.orderBook(new Dictionary<string, object>() {});
        }
        object storedOrderBook = getValue(this.orderbooks, symbol);
        object nonce = this.safeInteger(storedOrderBook, "nonce");
        object deltaNonce = this.safeInteger(message, "s");
        object messageHash = add("orderbook:", symbol);
        if (isTrue(isEqual(nonce, null)))
        {
            object cacheLength = getArrayLength((storedOrderBook as ccxt.pro.OrderBook).cache);
            object snapshotDelay = this.handleOption("watchOrderBook", "snapshotDelay", 6);
            if (isTrue(isEqual(cacheLength, snapshotDelay)))
            {
                this.spawn(this.loadOrderBook, new object[] { client, messageHash, symbol, null, new Dictionary<string, object>() {}});
            }
            ((IList<object>)(storedOrderBook as ccxt.pro.OrderBook).cache).Add(message);
            return;
        } else if (isTrue(isGreaterThanOrEqual(nonce, deltaNonce)))
        {
            return;
        }
        this.handleDelta(storedOrderBook, message);
        callDynamically(client as WebSocketClient, "resolve", new object[] {storedOrderBook, messageHash});
    }

    public override void handleDelta(object orderbook, object delta)
    {
        // const timestamp = this.milliseconds (); // todo check if this is correct
        // orderbook['timestamp'] = timestamp;
        // orderbook['datetime'] = this.iso8601 (timestamp);
        ((IDictionary<string,object>)orderbook)["nonce"] = this.safeInteger(delta, "s");
        object data = this.safeDict(delta, "d", new Dictionary<string, object>() {});
        object bids = this.safeDict(data, "bids", new Dictionary<string, object>() {});
        object asks = this.safeDict(data, "asks", new Dictionary<string, object>() {});
        object storedBids = getValue(orderbook, "bids");
        object storedAsks = getValue(orderbook, "asks");
        this.handleBidAsks(storedBids, bids);
        this.handleBidAsks(storedAsks, asks);
    }

    public virtual void handleBidAsks(object bookSide, object bidAsks)
    {
        object keys = new List<object>(((IDictionary<string,object>)bidAsks).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object price = this.safeString(keys, i);
            object amount = this.safeNumber(bidAsks, price);
            object bidAsk = new List<object> {this.parseNumber(price), amount};
            (bookSide as IOrderBookSide).storeArray(bidAsk);
        }
    }

    public override object getCacheIndex(object orderbook, object deltas)
    {
        object firstElement = getValue(deltas, 0);
        object firstElementNonce = this.safeInteger(firstElement, "s");
        object nonce = this.safeInteger(orderbook, "nonce");
        if (isTrue(isLessThan(nonce, firstElementNonce)))
        {
            return -1;
        }
        for (object i = 0; isLessThan(i, getArrayLength(deltas)); postFixIncrement(ref i))
        {
            object delta = getValue(deltas, i);
            object deltaNonce = this.safeInteger(delta, "s");
            if (isTrue(isEqual(deltaNonce, nonce)))
            {
                return add(i, 1);
            }
        }
        return getArrayLength(deltas);
    }

    /**
     * @method
     * @name tradeogre#watchTrades
     * @description watches information on multiple trades made in a market
     * @see https://tradeogre.com/help/api
     * @param {string} symbol unified market symbol of the market trades were made in
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trade structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
     */
    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        return await this.watchTradesForSymbols(new List<object>() {symbol}, since, limit, parameters);
    }

    /**
     * @method
     * @name tradeogre#watchTradesForSymbols
     * @see https://tradeogre.com/help/api
     * @description get the list of most recent trades for a list of symbols
     * @param {string[]} symbols unified symbol of the market to fetch trades for (empty array means all markets)
     * @param {int} [since] timestamp in ms of the earliest trade to fetch
     * @param {int} [limit] the maximum amount of trades to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> watchTradesForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, true);
        object messageHashes = new List<object>() {};
        object symbolsLength = 0;
        if (isTrue(!isEqual(symbols, null)))
        {
            symbolsLength = getArrayLength(symbols);
        }
        if (isTrue(isGreaterThan(symbolsLength, 0)))
        {
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                object messageHash = add("trades:", symbol);
                ((IList<object>)messageHashes).Add(messageHash);
            }
        } else
        {
            object messageHash = "trades";
            ((IList<object>)messageHashes).Add(messageHash);
        }
        object request = new Dictionary<string, object>() {
            { "a", "subscribe" },
            { "e", "trade" },
            { "t", "*" },
        };
        object url = getValue(getValue(this.urls, "api"), "ws");
        object trades = await this.watchMultiple(url, messageHashes, this.extend(request, parameters), new List<object>() {"trades"});
        if (isTrue(this.newUpdates))
        {
            object first = this.safeDict(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public virtual void handleTrade(WebSocketClient client, object message)
    {
        //
        //     {
        //         "e": "trade",
        //         "t": "LTC-USDT",
        //         "d": {
        //             "t": 0,
        //             "p": "84.50000000",
        //             "q": "1.28471270",
        //             "d": "1745392002"
        //         }
        //     }
        //
        object marketId = this.safeString(message, "t");
        object market = this.safeMarket(marketId);
        object data = this.safeDict(message, "d", new Dictionary<string, object>() {});
        object symbol = getValue(market, "symbol");
        if (!isTrue((inOp(this.trades, symbol))))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            var stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object cache = getValue(this.trades, symbol);
        object trade = this.parseWsTrade(data, market);
        callDynamically(cache, "append", new object[] {trade});
        object messageHash = add("trades:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {cache, messageHash});
        callDynamically(client as WebSocketClient, "resolve", new object[] {cache, "trades"});
    }

    public override object parseWsTrade(object trade, object market = null)
    {
        //
        //     {
        //         "t": 0,
        //         "p": "84.50000000",
        //         "q": "1.28471270",
        //         "d": "1745392002"
        //     }
        //
        object timestamp = this.safeIntegerProduct(trade, "d", 1000);
        object sideEnum = this.safeString(trade, "t");
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", this.safeString(market, "symbol") },
            { "order", null },
            { "type", null },
            { "side", this.parseWsTradeSide(sideEnum) },
            { "takerOrMaker", null },
            { "price", this.safeString(trade, "p") },
            { "amount", this.safeString(trade, "q") },
            { "cost", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
            } },
        }, market);
    }

    public virtual object parseWsTradeSide(object side)
    {
        object sides = new Dictionary<string, object>() {
            { "0", "buy" },
            { "1", "sell" },
        };
        return this.safeString(sides, side, side);
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        object methods = new Dictionary<string, object>() {
            { "book", this.handleOrderBook },
            { "trade", this.handleTrade },
        };
        object eventVar = this.safeString(message, "e");
        object method = this.safeValue(methods, eventVar);
        if (isTrue(!isEqual(method, null)))
        {
            DynamicInvoker.InvokeMethod(method, new object[] { client, message});
        }
    }
}
