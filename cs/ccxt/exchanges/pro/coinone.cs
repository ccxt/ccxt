namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class coinone { public coinone(object args = null) : base(args) { } }
public partial class coinone : ccxt.coinone
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchOrderBook", true },
                { "watchOrders", false },
                { "watchTrades", true },
                { "watchOHLCV", false },
                { "watchTicker", true },
                { "watchTickers", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://stream.coinone.co.kr" },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "expiresIn", "" },
                { "userId", "" },
                { "wsSessionToken", "" },
                { "watchOrderBook", new Dictionary<string, object>() {
                    { "snapshotDelay", 6 },
                    { "snapshotMaxRetries", 3 },
                } },
                { "tradesLimit", 1000 },
                { "OHLCVLimit", 1000 },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "4009", typeof(AuthenticationError) },
                } },
            } },
            { "streaming", new Dictionary<string, object>() {
                { "ping", this.ping },
                { "keepAlive", 20000 },
            } },
        });
    }

    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#watchOrderBook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://docs.coinone.co.kr/reference/public-websocket-orderbook
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object messageHash = add("orderbook:", getValue(market, "symbol"));
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "request_type", "SUBSCRIBE" },
            { "channel", "ORDERBOOK" },
            { "topic", new Dictionary<string, object>() {
                { "quote_currency", getValue(market, "quote") },
                { "target_currency", getValue(market, "base") },
            } },
        };
        object message = this.extend(request, parameters);
        object orderbook = await this.watch(url, messageHash, message, messageHash);
        return (orderbook as IOrderBook).limit();
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        //     {
        //         "response_type": "DATA",
        //         "channel": "ORDERBOOK",
        //         "data": {
        //             "quote_currency": "KRW",
        //             "target_currency": "BTC",
        //             "timestamp": 1705288918649,
        //             "id": "1705288918649001",
        //             "asks": [
        //                 {
        //                     "price": "58412000",
        //                     "qty": "0.59919807"
        //                 }
        //             ],
        //             "bids": [
        //                 {
        //                     "price": "58292000",
        //                     "qty": "0.1045"
        //                 }
        //             ]
        //         }
        //     }
        //
        object data = this.safeValue(message, "data", new Dictionary<string, object>() {});
        object baseId = this.safeStringUpper(data, "target_currency");
        object quoteId = this.safeStringUpper(data, "quote_currency");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object symbol = this.symbol(add(add(bs, "/"), quote));
        object timestamp = this.safeInteger(data, "timestamp");
        object orderbook = this.safeValue(this.orderbooks, symbol);
        if (isTrue(isEqual(orderbook, null)))
        {
            orderbook = this.orderBook();
        } else
        {
            (orderbook as IOrderBook).reset();
        }
        ((IDictionary<string,object>)orderbook)["symbol"] = symbol;
        object asks = this.safeValue(data, "asks", new List<object>() {});
        object bids = this.safeValue(data, "bids", new List<object>() {});
        this.handleDeltas(getValue(orderbook, "asks"), asks);
        this.handleDeltas(getValue(orderbook, "bids"), bids);
        ((IDictionary<string,object>)orderbook)["timestamp"] = timestamp;
        ((IDictionary<string,object>)orderbook)["datetime"] = this.iso8601(timestamp);
        object messageHash = add("orderbook:", symbol);
        ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = orderbook;
        callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
    }

    public override void handleDelta(object bookside, object delta)
    {
        object bidAsk = this.parseBidAsk(delta, "price", "qty");
        (bookside as IOrderBookSide).storeArray(bidAsk);
    }

    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinone#watchTicker
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://docs.coinone.co.kr/reference/public-websocket-ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object messageHash = add("ticker:", getValue(market, "symbol"));
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "request_type", "SUBSCRIBE" },
            { "channel", "TICKER" },
            { "topic", new Dictionary<string, object>() {
                { "quote_currency", getValue(market, "quote") },
                { "target_currency", getValue(market, "base") },
            } },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public virtual void handleTicker(WebSocketClient client, object message)
    {
        //
        //     {
        //         "response_type": "DATA",
        //         "channel": "TICKER",
        //         "data": {
        //             "quote_currency": "KRW",
        //             "target_currency": "BTC",
        //             "timestamp": 1705301117198,
        //             "quote_volume": "19521465345.504",
        //             "target_volume": "334.81445168",
        //             "high": "58710000",
        //             "low": "57276000",
        //             "first": "57293000",
        //             "last": "58532000",
        //             "volume_power": "100",
        //             "ask_best_price": "58537000",
        //             "ask_best_qty": "0.1961",
        //             "bid_best_price": "58532000",
        //             "bid_best_qty": "0.00009258",
        //             "id": "1705301117198001",
        //             "yesterday_high": "59140000",
        //             "yesterday_low": "57273000",
        //             "yesterday_first": "58897000",
        //             "yesterday_last": "57301000",
        //             "yesterday_quote_volume": "12967227517.4262",
        //             "yesterday_target_volume": "220.09232233"
        //         }
        //     }
        //
        object data = this.safeValue(message, "data", new Dictionary<string, object>() {});
        object ticker = this.parseWsTicker(data);
        object symbol = getValue(ticker, "symbol");
        ((IDictionary<string,object>)this.tickers)[(string)symbol] = ticker;
        object messageHash = add("ticker:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {getValue(this.tickers, symbol), messageHash});
    }

    public virtual object parseWsTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "quote_currency": "KRW",
        //         "target_currency": "BTC",
        //         "timestamp": 1705301117198,
        //         "quote_volume": "19521465345.504",
        //         "target_volume": "334.81445168",
        //         "high": "58710000",
        //         "low": "57276000",
        //         "first": "57293000",
        //         "last": "58532000",
        //         "volume_power": "100",
        //         "ask_best_price": "58537000",
        //         "ask_best_qty": "0.1961",
        //         "bid_best_price": "58532000",
        //         "bid_best_qty": "0.00009258",
        //         "id": "1705301117198001",
        //         "yesterday_high": "59140000",
        //         "yesterday_low": "57273000",
        //         "yesterday_first": "58897000",
        //         "yesterday_last": "57301000",
        //         "yesterday_quote_volume": "12967227517.4262",
        //         "yesterday_target_volume": "220.09232233"
        //     }
        //
        object timestamp = this.safeInteger(ticker, "timestamp");
        object last = this.safeString(ticker, "last");
        object baseId = this.safeString(ticker, "target_currency");
        object quoteId = this.safeString(ticker, "quote_currency");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object symbol = this.symbol(add(add(bs, "/"), quote));
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeNumber(ticker, "bid_best_price") },
            { "bidVolume", this.safeNumber(ticker, "bid_best_qty") },
            { "ask", this.safeNumber(ticker, "ask_best_price") },
            { "askVolume", this.safeNumber(ticker, "ask_best_qty") },
            { "vwap", null },
            { "open", this.safeString(ticker, "first") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "target_volume") },
            { "quoteVolume", this.safeString(ticker, "quote_volume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinone#watchTrades
        * @description watches information on multiple trades made in a market
        * @see https://docs.coinone.co.kr/reference/public-websocket-trade
        * @param {string} symbol unified market symbol of the market trades were made in
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object messageHash = add("trade:", getValue(market, "symbol"));
        object url = getValue(getValue(this.urls, "api"), "ws");
        object request = new Dictionary<string, object>() {
            { "request_type", "SUBSCRIBE" },
            { "channel", "TRADE" },
            { "topic", new Dictionary<string, object>() {
                { "quote_currency", getValue(market, "quote") },
                { "target_currency", getValue(market, "base") },
            } },
        };
        object message = this.extend(request, parameters);
        object trades = await this.watch(url, messageHash, message, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {getValue(market, "symbol"), limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        //     {
        //         "response_type": "DATA",
        //         "channel": "TRADE",
        //         "data": {
        //             "quote_currency": "KRW",
        //             "target_currency": "BTC",
        //             "id": "1705303667916001",
        //             "timestamp": 1705303667916,
        //             "price": "58490000",
        //             "qty": "0.0008",
        //             "is_seller_maker": false
        //         }
        //     }
        //
        object data = this.safeValue(message, "data", new Dictionary<string, object>() {});
        object trade = this.parseWsTrade(data);
        object symbol = getValue(trade, "symbol");
        object stored = this.safeValue(this.trades, symbol);
        if (isTrue(isEqual(stored, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        callDynamically(stored, "append", new object[] {trade});
        object messageHash = add("trade:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
    }

    public override object parseWsTrade(object trade, object market = null)
    {
        //
        //     {
        //         "quote_currency": "KRW",
        //         "target_currency": "BTC",
        //         "id": "1705303667916001",
        //         "timestamp": 1705303667916,
        //         "price": "58490000",
        //         "qty": "0.0008",
        //         "is_seller_maker": false
        //     }
        //
        object baseId = this.safeStringUpper(trade, "target_currency");
        object quoteId = this.safeStringUpper(trade, "quote_currency");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object symbol = add(add(bs, "/"), quote);
        object timestamp = this.safeInteger(trade, "timestamp");
        market = this.safeMarket(symbol, market);
        object isSellerMaker = this.safeValue(trade, "is_seller_maker");
        object side = null;
        if (isTrue(!isEqual(isSellerMaker, null)))
        {
            side = ((bool) isTrue(isSellerMaker)) ? "sell" : "buy";
        }
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "qty");
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", this.safeString(trade, "id") },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "order", null },
            { "symbol", getValue(market, "symbol") },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         "response_type": "ERROR",
        //         "error_code": 160012,
        //         "message": "Invalid Topic"
        //     }
        //
        object type = this.safeString(message, "response_type", "");
        if (isTrue(isEqual(type, "ERROR")))
        {
            return true;
        }
        return false;
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        if (isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            return;
        }
        object type = this.safeString(message, "response_type");
        if (isTrue(isEqual(type, "PONG")))
        {
            this.handlePong(client as WebSocketClient, message);
            return;
        }
        if (isTrue(isEqual(type, "DATA")))
        {
            object topic = this.safeString(message, "channel", "");
            object methods = new Dictionary<string, object>() {
                { "ORDERBOOK", this.handleOrderBook },
                { "TICKER", this.handleTicker },
                { "TRADE", this.handleTrades },
            };
            object exacMethod = this.safeValue(methods, topic);
            if (isTrue(!isEqual(exacMethod, null)))
            {
                DynamicInvoker.InvokeMethod(exacMethod, new object[] { client, message});
                return;
            }
            object keys = new List<object>(((IDictionary<string,object>)methods).Keys);
            for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
            {
                object key = getValue(keys, i);
                if (isTrue(isGreaterThanOrEqual(getIndexOf(topic, getValue(keys, i)), 0)))
                {
                    object method = getValue(methods, key);
                    DynamicInvoker.InvokeMethod(method, new object[] { client, message});
                    return;
                }
            }
        }
    }

    public override object ping(WebSocketClient client)
    {
        return new Dictionary<string, object>() {
            { "request_type", "PING" },
        };
    }

    public virtual object handlePong(WebSocketClient client, object message)
    {
        //
        //     {
        //         "response_type":"PONG"
        //     }
        //
        client.lastPong = this.milliseconds();
        return message;
    }
}
