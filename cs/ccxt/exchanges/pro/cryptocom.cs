namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class cryptocom { public cryptocom(object args = null) : base(args) { } }
public partial class cryptocom : ccxt.cryptocom
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchBalance", true },
                { "watchTicker", true },
                { "watchTickers", false },
                { "watchMyTrades", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", true },
                { "watchOrderBook", true },
                { "watchOrderBookForSymbols", true },
                { "watchOrders", true },
                { "watchOHLCV", true },
                { "watchPositions", true },
                { "createOrderWs", true },
                { "cancelOrderWs", true },
                { "cancelAllOrders", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", new Dictionary<string, object>() {
                        { "public", "wss://stream.crypto.com/exchange/v1/market" },
                        { "private", "wss://stream.crypto.com/exchange/v1/user" },
                    } },
                } },
                { "test", new Dictionary<string, object>() {
                    { "public", "wss://uat-stream.3ona.co/exchange/v1/market" },
                    { "private", "wss://uat-stream.3ona.co/exchange/v1/user" },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "watchPositions", new Dictionary<string, object>() {
                    { "fetchPositionsSnapshot", true },
                    { "awaitPositionsSnapshot", true },
                } },
            } },
            { "streaming", new Dictionary<string, object>() {} },
        });
    }

    public async virtual Task pong(WebSocketClient client, object message)
    {
        try
        {
            await client.send(new Dictionary<string, object>() {
                { "id", this.safeInteger(message, "id") },
                { "method", "public/respond-heartbeat" },
            });
        } catch(Exception e)
        {
            var error = new NetworkError(add(add(this.id, " pong failed with error "), this.json(e)));
            ((WebSocketClient)client).reset(error);
        }
    }

    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchOrderBook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#book-instrument_name
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.bookSubscriptionType] The subscription type. Allowed values: SNAPSHOT full snapshot. This is the default if not specified. SNAPSHOT_AND_UPDATE delta updates
        * @param {int} [params.bookUpdateFrequency] Book update interval in ms. Allowed values: 100 for snapshot subscription 10 for delta subscription
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        return await this.watchOrderBookForSymbols(new List<object>() {symbol}, limit, parameters);
    }

    public async override Task<object> watchOrderBookForSymbols(object symbols, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchOrderBook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#book-instrument_name
        * @param {string[]} symbols unified array of symbols
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.bookSubscriptionType] The subscription type. Allowed values: SNAPSHOT full snapshot. This is the default if not specified. SNAPSHOT_AND_UPDATE delta updates
        * @param {int} [params.bookUpdateFrequency] Book update interval in ms. Allowed values: 100 for snapshot subscription 10 for delta subscription
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        if (!isTrue(limit))
        {
            limit = 50;
        }
        object topicParams = this.safeValue(parameters, "params");
        if (isTrue(isEqual(topicParams, null)))
        {
            ((IDictionary<string,object>)parameters)["params"] = new Dictionary<string, object>() {};
        }
        object bookSubscriptionType = null;
        var bookSubscriptionTypeparametersVariable = this.handleOptionAndParams2(parameters, "watchOrderBook", "watchOrderBookForSymbols", "bookSubscriptionType", "SNAPSHOT_AND_UPDATE");
        bookSubscriptionType = ((IList<object>)bookSubscriptionTypeparametersVariable)[0];
        parameters = ((IList<object>)bookSubscriptionTypeparametersVariable)[1];
        if (isTrue(!isEqual(bookSubscriptionType, null)))
        {
            ((IDictionary<string,object>)getValue(parameters, "params"))["bookSubscriptionType"] = bookSubscriptionType;
        }
        object bookUpdateFrequency = null;
        var bookUpdateFrequencyparametersVariable = this.handleOptionAndParams2(parameters, "watchOrderBook", "watchOrderBookForSymbols", "bookUpdateFrequency");
        bookUpdateFrequency = ((IList<object>)bookUpdateFrequencyparametersVariable)[0];
        parameters = ((IList<object>)bookUpdateFrequencyparametersVariable)[1];
        if (isTrue(!isEqual(bookUpdateFrequency, null)))
        {
            ((IDictionary<string,object>)getValue(parameters, "params"))["bookSubscriptionType"] = bookSubscriptionType;
        }
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object market = this.market(symbol);
            object currentTopic = add(add(add(add("book", "."), getValue(market, "id")), "."), ((object)limit).ToString());
            object messageHash = add("orderbook:", getValue(market, "symbol"));
            ((IList<object>)messageHashes).Add(messageHash);
            ((IList<object>)topics).Add(currentTopic);
        }
        object orderbook = await this.watchPublicMultiple(messageHashes, topics, parameters);
        return (orderbook as IOrderBook).limit();
    }

    public override void handleDelta(object bookside, object delta)
    {
        object price = this.safeFloat(delta, 0);
        object amount = this.safeFloat(delta, 1);
        object count = this.safeInteger(delta, 2);
        (bookside as IOrderBookSide).store(price, amount, count);
    }

    public override void handleDeltas(object bookside, object deltas)
    {
        for (object i = 0; isLessThan(i, getArrayLength(deltas)); postFixIncrement(ref i))
        {
            this.handleDelta(bookside, getValue(deltas, i));
        }
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // snapshot
        //    {
        //        "instrument_name":"LTC_USDT",
        //        "subscription":"book.LTC_USDT.150",
        //        "channel":"book",
        //        "depth":150,
        //        "data": [
        //             {
        //                 "bids": [
        //                     [122.21, 0.74041, 4]
        //                 ],
        //                 "asks": [
        //                     [122.29, 0.00002, 1]
        //                 ]
        //                 "t": 1648123943803,
        //                 "s":754560122
        //             }
        //         ]
        //    }
        //  update
        //    {
        //        "instrument_name":"BTC_USDT",
        //        "subscription":"book.BTC_USDT.50",
        //        "channel":"book.update",
        //        "depth":50,
        //        "data":[
        //           {
        //              "update":{
        //                 "asks":[
        //                    [
        //                       "43755.46",
        //                       "0.10000",
        //                       "1"
        //                    ],
        //                    ...
        //                 ],
        //                 "bids":[
        //                    [
        //                       "43737.46",
        //                       "0.14096",
        //                       "1"
        //                    ],
        //                    ...
        //                 ]
        //              },
        //              "t":1704484068898,
        //              "tt":1704484068892,
        //              "u":78795598253024,
        //              "pu":78795598162080,
        //              "cs":-781431132
        //           }
        //        ]
        //    }
        //
        object marketId = this.safeString(message, "instrument_name");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object data = this.safeValue(message, "data");
        data = this.safeValue(data, 0);
        object timestamp = this.safeInteger(data, "t");
        object orderbook = this.safeValue(this.orderbooks, symbol);
        if (isTrue(isEqual(orderbook, null)))
        {
            object limit = this.safeInteger(message, "depth");
            orderbook = this.countedOrderBook(new Dictionary<string, object>() {}, limit);
        }
        object channel = this.safeString(message, "channel");
        object nonce = this.safeInteger2(data, "u", "s");
        object books = data;
        if (isTrue(isEqual(channel, "book")))
        {
            (orderbook as IOrderBook).reset(new Dictionary<string, object>() {});
            ((IDictionary<string,object>)orderbook)["symbol"] = symbol;
            ((IDictionary<string,object>)orderbook)["timestamp"] = timestamp;
            ((IDictionary<string,object>)orderbook)["datetime"] = this.iso8601(timestamp);
            ((IDictionary<string,object>)orderbook)["nonce"] = nonce;
        } else
        {
            books = this.safeValue(data, "update", new Dictionary<string, object>() {});
            object previousNonce = this.safeInteger(data, "pu");
            object currentNonce = getValue(orderbook, "nonce");
            if (isTrue(!isEqual(currentNonce, previousNonce)))
            {
                throw new InvalidNonce ((string)add(add(add(add(add(add(this.id, " watchOrderBook() "), symbol), " "), previousNonce), " != "), nonce)) ;
            }
        }
        this.handleDeltas(getValue(orderbook, "asks"), this.safeValue(books, "asks", new List<object>() {}));
        this.handleDeltas(getValue(orderbook, "bids"), this.safeValue(books, "bids", new List<object>() {}));
        ((IDictionary<string,object>)orderbook)["nonce"] = nonce;
        ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = orderbook;
        object messageHash = add("orderbook:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#trade-instrument_name
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.watchTradesForSymbols(new List<object>() {symbol}, since, limit, parameters);
    }

    public async override Task<object> watchTradesForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchTradesForSymbols
        * @description get the list of most recent trades for a particular symbol
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#trade-instrument_name
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object topics = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object market = this.market(symbol);
            object currentTopic = add(add("trade", "."), getValue(market, "id"));
            ((IList<object>)topics).Add(currentTopic);
        }
        object trades = await this.watchPublicMultiple(topics, topics, parameters);
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        // {
        //     "code": 0,
        //     "method": "subscribe",
        //     "result": {
        //       "instrument_name": "BTC_USDT",
        //       "subscription": "trade.BTC_USDT",
        //       "channel": "trade",
        //       "data": [
        //             {
        //                 "dataTime":1648122434405,
        //                 "d":"2358394540212355488",
        //                 "s":"SELL",
        //                 "p":42980.85,
        //                 "q":0.002325,
        //                 "t":1648122434404,
        //                 "i":"BTC_USDT"
        //              }
        //              (...)
        //       ]
        // }
        //
        object channel = this.safeString(message, "channel");
        object marketId = this.safeString(message, "instrument_name");
        object symbolSpecificMessageHash = this.safeString(message, "subscription");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object stored = this.safeValue(this.trades, symbol);
        if (isTrue(isEqual(stored, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object data = this.safeValue(message, "data", new List<object>() {});
        object dataLength = getArrayLength(data);
        if (isTrue(isEqual(dataLength, 0)))
        {
            return;
        }
        object parsedTrades = this.parseTrades(data, market);
        for (object j = 0; isLessThan(j, getArrayLength(parsedTrades)); postFixIncrement(ref j))
        {
            callDynamically(stored, "append", new object[] {getValue(parsedTrades, j)});
        }
        object channelReplaced = ((string)channel).Replace((string)add(".", marketId), (string)"");
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, symbolSpecificMessageHash});
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, channelReplaced});
    }

    public async override Task<object> watchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchMyTrades
        * @description watches information on multiple trades made by the user
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-trade-instrument_name
        * @param {string} symbol unified market symbol of the market trades were made in
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
        }
        object messageHash = "user.trade";
        messageHash = ((bool) isTrue((!isEqual(market, null)))) ? (add(add(messageHash, "."), getValue(market, "id"))) : messageHash;
        object trades = await this.watchPrivateSubscribe(messageHash, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }

    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchTicker
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#ticker-instrument_name
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object messageHash = add(add("ticker", "."), getValue(market, "id"));
        return await this.watchPublic(messageHash, parameters);
    }

    public virtual void handleTicker(WebSocketClient client, object message)
    {
        //
        // {
        //     "info":{
        //        "instrument_name":"BTC_USDT",
        //        "subscription":"ticker.BTC_USDT",
        //        "channel":"ticker",
        //        "data":[
        //           {
        //              "i":"BTC_USDT",
        //              "b":43063.19,
        //              "k":43063.2,
        //              "a":43063.19,
        //              "t":1648121165658,
        //              "v":43573.912409,
        //              "h":43498.51,
        //              "l":41876.58,
        //              "c":1087.43
        //           }
        //        ]
        //     }
        //  }
        //
        object messageHash = this.safeString(message, "subscription");
        object marketId = this.safeString(message, "instrument_name");
        object market = this.safeMarket(marketId);
        object data = this.safeValue(message, "data", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object ticker = getValue(data, i);
            object parsed = this.parseTicker(ticker, market);
            object symbol = getValue(parsed, "symbol");
            ((IDictionary<string,object>)this.tickers)[(string)symbol] = parsed;
            callDynamically(client as WebSocketClient, "resolve", new object[] {parsed, messageHash});
        }
    }

    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchOHLCV
        * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#candlestick-time_frame-instrument_name
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object interval = this.safeString(this.timeframes, timeframe, timeframe);
        object messageHash = add(add(add(add("candlestick", "."), interval), "."), getValue(market, "id"));
        object ohlcv = await this.watchPublic(messageHash, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(ohlcv, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }

    public virtual void handleOHLCV(WebSocketClient client, object message)
    {
        //
        //  {
        //       "instrument_name": "BTC_USDT",
        //       "subscription": "candlestick.1m.BTC_USDT",
        //       "channel": "candlestick",
        //       "depth": 300,
        //       "interval": "1m",
        //       "data": [ [Object] ]
        //   }
        //
        object messageHash = this.safeString(message, "subscription");
        object marketId = this.safeString(message, "instrument_name");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object interval = this.safeString(message, "interval");
        object timeframe = this.findTimeframe(interval);
        ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = this.safeValue(this.ohlcvs, symbol, new Dictionary<string, object>() {});
        object stored = this.safeValue(getValue(this.ohlcvs, symbol), timeframe);
        if (isTrue(isEqual(stored, null)))
        {
            object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
            stored = new ArrayCacheByTimestamp(limit);
            ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))[(string)timeframe] = stored;
        }
        object data = this.safeValue(message, "data");
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object tick = getValue(data, i);
            object parsed = this.parseOHLCV(tick, market);
            callDynamically(stored, "append", new object[] {parsed});
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
    }

    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchOrders
        * @description watches information on multiple orders made by the user
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-order-instrument_name
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
        }
        object messageHash = "user.order";
        messageHash = ((bool) isTrue((!isEqual(market, null)))) ? (add(add(messageHash, "."), getValue(market, "id"))) : messageHash;
        object orders = await this.watchPrivateSubscribe(messageHash, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }

    public virtual void handleOrders(WebSocketClient client, object message, object subscription = null)
    {
        //
        //    {
        //        "method": "subscribe",
        //        "result": {
        //          "instrument_name": "ETH_CRO",
        //          "subscription": "user.order.ETH_CRO",
        //          "channel": "user.order",
        //          "data": [
        //            {
        //              "status": "ACTIVE",
        //              "side": "BUY",
        //              "price": 1,
        //              "quantity": 1,
        //              "order_id": "366455245775097673",
        //              "client_oid": "my_order_0002",
        //              "create_time": 1588758017375,
        //              "update_time": 1588758017411,
        //              "type": "LIMIT",
        //              "instrument_name": "ETH_CRO",
        //              "cumulative_quantity": 0,
        //              "cumulative_value": 0,
        //              "avg_price": 0,
        //              "fee_currency": "CRO",
        //              "time_in_force":"GOOD_TILL_CANCEL"
        //            }
        //          ],
        //          "channel": "user.order.ETH_CRO"
        //        }
        //    }
        //
        object channel = this.safeString(message, "channel");
        object symbolSpecificMessageHash = this.safeString(message, "subscription");
        object orders = this.safeValue(message, "data", new List<object>() {});
        object ordersLength = getArrayLength(orders);
        if (isTrue(isGreaterThan(ordersLength, 0)))
        {
            if (isTrue(isEqual(this.orders, null)))
            {
                object limit = this.safeInteger(this.options, "ordersLimit", 1000);
                this.orders = new ArrayCacheBySymbolById(limit);
            }
            object stored = this.orders;
            object parsed = this.parseOrders(orders);
            for (object i = 0; isLessThan(i, getArrayLength(parsed)); postFixIncrement(ref i))
            {
                callDynamically(stored, "append", new object[] {getValue(parsed, i)});
            }
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, symbolSpecificMessageHash});
            // non-symbol specific
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, channel}); // channel might have a symbol-specific suffix
            callDynamically(client as WebSocketClient, "resolve", new object[] {stored, "user.order"});
        }
    }

    public async override Task<object> watchPositions(object symbols = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchPositions
        * @description watch all open positions
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-position_balance
        * @param {string[]|undefined} symbols list of unified market symbols
        * @param {object} params extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object id = this.nonce();
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channels", new List<object>() {"user.position_balance"} },
            } },
            { "nonce", id },
        };
        object messageHash = "positions";
        symbols = this.marketSymbols(symbols);
        if (!isTrue(this.isEmpty(symbols)))
        {
            messageHash = add("::", String.Join(",", ((IList<object>)symbols).ToArray()));
        }
        var client = this.client(url);
        this.setPositionsCache(client as WebSocketClient, symbols);
        object fetchPositionsSnapshot = this.handleOption("watchPositions", "fetchPositionsSnapshot", true);
        object awaitPositionsSnapshot = this.safeBool("watchPositions", "awaitPositionsSnapshot", true);
        if (isTrue(isTrue(isTrue(fetchPositionsSnapshot) && isTrue(awaitPositionsSnapshot)) && isTrue(isEqual(this.positions, null))))
        {
            object snapshot = await client.future("fetchPositionsSnapshot");
            return this.filterBySymbolsSinceLimit(snapshot, symbols, since, limit, true);
        }
        object newPositions = await this.watch(url, messageHash, this.extend(request, parameters));
        if (isTrue(this.newUpdates))
        {
            return newPositions;
        }
        return this.filterBySymbolsSinceLimit(this.positions, symbols, since, limit, true);
    }

    public virtual void setPositionsCache(WebSocketClient client, object type, object symbols = null)
    {
        object fetchPositionsSnapshot = this.handleOption("watchPositions", "fetchPositionsSnapshot", false);
        if (isTrue(fetchPositionsSnapshot))
        {
            object messageHash = "fetchPositionsSnapshot";
            if (!isTrue((inOp(client.futures, messageHash))))
            {
                client.future(messageHash);
                this.spawn(this.loadPositionsSnapshot, new object[] { client, messageHash});
            }
        } else
        {
            this.positions = new ArrayCacheBySymbolBySide();
        }
    }

    public async virtual Task loadPositionsSnapshot(WebSocketClient client, object messageHash)
    {
        object positions = await this.fetchPositions();
        this.positions = new ArrayCacheBySymbolBySide();
        object cache = this.positions;
        for (object i = 0; isLessThan(i, getArrayLength(positions)); postFixIncrement(ref i))
        {
            object position = getValue(positions, i);
            object contracts = this.safeNumber(position, "contracts", 0);
            if (isTrue(isGreaterThan(contracts, 0)))
            {
                callDynamically(cache, "append", new object[] {position});
            }
        }
        // don't remove the future from the .futures cache
        var future = getValue(client.futures, messageHash);
        (future as Future).resolve(cache);
        callDynamically(client as WebSocketClient, "resolve", new object[] {cache, "positions"});
    }

    public virtual void handlePositions(WebSocketClient client, object message)
    {
        //
        //    {
        //        "subscription": "user.position_balance",
        //        "channel": "user.position_balance",
        //        "data": [{
        //            "balances": [{
        //                "instrument_name": "USD",
        //                "quantity": "8.9979961950886",
        //                "update_timestamp_ms": 1695598760597,
        //            }],
        //            "positions": [{
        //                "account_id": "96a0edb1-afb5-4c7c-af89-5cb610319e2c",
        //                "instrument_name": "LTCUSD-PERP",
        //                "type": "PERPETUAL_SWAP",
        //                "quantity": "1.8",
        //                "cost": "114.766",
        //                "open_position_pnl": "-0.0216206",
        //                "session_pnl": "0.00962994",
        //                "update_timestamp_ms": 1695598760597,
        //                "open_pos_cost": "114.766",
        //            }],
        //        }],
        //    }
        //
        // each account is connected to a different endpoint
        // and has exactly one subscriptionhash which is the account type
        object data = this.safeValue(message, "data", new List<object>() {});
        object firstData = this.safeValue(data, 0, new Dictionary<string, object>() {});
        object rawPositions = this.safeValue(firstData, "positions", new List<object>() {});
        if (isTrue(isEqual(this.positions, null)))
        {
            this.positions = new ArrayCacheBySymbolBySide();
        }
        object cache = this.positions;
        object newPositions = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(rawPositions)); postFixIncrement(ref i))
        {
            object rawPosition = getValue(rawPositions, i);
            object position = this.parsePosition(rawPosition);
            ((IList<object>)newPositions).Add(position);
            callDynamically(cache, "append", new object[] {position});
        }
        object messageHashes = this.findMessageHashes(client as WebSocketClient, "positions::");
        for (object i = 0; isLessThan(i, getArrayLength(messageHashes)); postFixIncrement(ref i))
        {
            object messageHash = getValue(messageHashes, i);
            object parts = ((string)messageHash).Split(new [] {((string)"::")}, StringSplitOptions.None).ToList<object>();
            object symbolsString = getValue(parts, 1);
            object symbols = ((string)symbolsString).Split(new [] {((string)",")}, StringSplitOptions.None).ToList<object>();
            object positions = this.filterByArray(newPositions, "symbol", symbols, false);
            if (!isTrue(this.isEmpty(positions)))
            {
                callDynamically(client as WebSocketClient, "resolve", new object[] {positions, messageHash});
            }
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {newPositions, "positions"});
    }

    public async override Task<object> watchBalance(object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#watchBalance
        * @description watch balance and get the amount of funds available for trading or funds locked in orders
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#user-balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object messageHash = "user.balance";
        return await this.watchPrivateSubscribe(messageHash, parameters);
    }

    public virtual void handleBalance(WebSocketClient client, object message)
    {
        //
        //     {
        //         "id": 1,
        //         "method": "subscribe",
        //         "code": 0,
        //         "result": {
        //             "subscription": "user.balance",
        //             "channel": "user.balance",
        //             "data": [
        //                 {
        //                     "total_available_balance": "5.84684368",
        //                     "total_margin_balance": "5.84684368",
        //                     "total_initial_margin": "0",
        //                     "total_maintenance_margin": "0",
        //                     "total_position_cost": "0",
        //                     "total_cash_balance": "6.44412101",
        //                     "total_collateral_value": "5.846843685",
        //                     "total_session_unrealized_pnl": "0",
        //                     "instrument_name": "USD",
        //                     "total_session_realized_pnl": "0",
        //                     "position_balances": [
        //                         {
        //                             "quantity": "0.0002119875",
        //                             "reserved_qty": "0",
        //                             "collateral_weight": "0.9",
        //                             "collateral_amount": "5.37549592",
        //                             "market_value": "5.97277325",
        //                             "max_withdrawal_balance": "0.00021198",
        //                             "instrument_name": "BTC",
        //                             "hourly_interest_rate": "0"
        //                         },
        //                     ],
        //                     "total_effective_leverage": "0",
        //                     "position_limit": "3000000",
        //                     "used_position_limit": "0",
        //                     "total_borrow": "0",
        //                     "margin_score": "0",
        //                     "is_liquidating": false,
        //                     "has_risk": false,
        //                     "terminatable": true
        //                 }
        //             ]
        //         }
        //     }
        //
        object messageHash = this.safeString(message, "subscription");
        object data = this.safeValue(message, "data", new List<object>() {});
        object positionBalances = this.safeValue(getValue(data, 0), "position_balances", new List<object>() {});
        ((IDictionary<string,object>)this.balance)["info"] = data;
        for (object i = 0; isLessThan(i, getArrayLength(positionBalances)); postFixIncrement(ref i))
        {
            object balance = getValue(positionBalances, i);
            object currencyId = this.safeString(balance, "instrument_name");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "quantity");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "reserved_qty");
            ((IDictionary<string,object>)this.balance)[(string)code] = account;
            this.balance = this.safeBalance(this.balance);
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.balance, messageHash});
        object messageHashRequest = this.safeString(message, "id");
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.balance, messageHashRequest});
    }

    public async override Task<object> createOrderWs(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#createOrderWs
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-create-order
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        parameters = this.createOrderRequest(symbol, type, side, amount, price, parameters);
        object request = new Dictionary<string, object>() {
            { "method", "private/create-order" },
            { "params", parameters },
        };
        object messageHash = this.nonce();
        return await this.watchPrivateRequest(messageHash, request);
    }

    public virtual void handleOrder(WebSocketClient client, object message)
    {
        //
        //    {
        //        "id": 1,
        //        "method": "private/create-order",
        //        "code": 0,
        //        "result": {
        //            "client_oid": "c5f682ed-7108-4f1c-b755-972fcdca0f02",
        //            "order_id": "18342311"
        //        }
        //    }
        //
        object messageHash = this.safeString(message, "id");
        object rawOrder = this.safeValue(message, "result", new Dictionary<string, object>() {});
        object order = this.parseOrder(rawOrder);
        callDynamically(client as WebSocketClient, "resolve", new object[] {order, messageHash});
    }

    public async override Task<object> cancelOrderWs(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#cancelOrder
        * @description cancels an open order
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-order
        * @param {string} id the order id of the order to cancel
        * @param {string} [symbol] unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        parameters = this.extend(new Dictionary<string, object>() {
            { "order_id", id },
        }, parameters);
        object request = new Dictionary<string, object>() {
            { "method", "private/cancel-order" },
            { "params", parameters },
        };
        object messageHash = this.nonce();
        return await this.watchPrivateRequest(messageHash, request);
    }

    public async override Task<object> cancelAllOrdersWs(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptocom#cancelAllOrdersWs
        * @description cancel all open orders
        * @see https://exchange-docs.crypto.com/exchange/v1/rest-ws/index.html#private-cancel-all-orders
        * @param {string} symbol unified market symbol of the orders to cancel
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} Returns exchange raw message {@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {
            { "method", "private/cancel-all-orders" },
            { "params", this.extend(new Dictionary<string, object>() {}, parameters) },
        };
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)getValue(request, "params"))["instrument_name"] = getValue(market, "id");
        }
        object messageHash = this.nonce();
        return await this.watchPrivateRequest(messageHash, request);
    }

    public virtual void handleCancelAllOrders(WebSocketClient client, object message)
    {
        //
        //    {
        //        "id": 1688914586647,
        //        "method": "private/cancel-all-orders",
        //        "code": 0
        //    }
        //
        object messageHash = this.safeString(message, "id");
        callDynamically(client as WebSocketClient, "resolve", new object[] {message, messageHash});
    }

    public async virtual Task<object> watchPublic(object messageHash, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object id = this.nonce();
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channels", new List<object>() {messageHash} },
            } },
            { "nonce", id },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public async virtual Task<object> watchPublicMultiple(object messageHashes, object topics, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object id = this.nonce();
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channels", topics },
            } },
            { "nonce", id },
        };
        object message = this.deepExtend(request, parameters);
        return await this.watchMultiple(url, messageHashes, message, messageHashes);
    }

    public async virtual Task<object> watchPrivateRequest(object nonce, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.authenticate();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object request = new Dictionary<string, object>() {
            { "id", nonce },
            { "nonce", nonce },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, ((object)nonce).ToString(), message, true);
    }

    public async virtual Task<object> watchPrivateSubscribe(object messageHash, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.authenticate();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object id = this.nonce();
        object request = new Dictionary<string, object>() {
            { "method", "subscribe" },
            { "params", new Dictionary<string, object>() {
                { "channels", new List<object>() {messageHash} },
            } },
            { "nonce", id },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //    {
        //        "id": 0,
        //        "code": 10004,
        //        "method": "subscribe",
        //        "message": "invalid channel {"channels":["trade.BTCUSD-PERP"]}"
        //    }
        //
        object errorCode = this.safeString(message, "code");
        try
        {
            if (isTrue(isTrue(errorCode) && isTrue(!isEqual(errorCode, "0"))))
            {
                object feedback = add(add(this.id, " "), this.json(message));
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
                object messageString = this.safeValue(message, "message");
                if (isTrue(!isEqual(messageString, null)))
                {
                    this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), messageString, feedback);
                }
            }
            return false;
        } catch(Exception e)
        {
            if (isTrue(e is AuthenticationError))
            {
                object messageHash = "authenticated";
                ((WebSocketClient)client).reject(e, messageHash);
                if (isTrue(inOp(((WebSocketClient)client).subscriptions, messageHash)))
                {

                }
            } else
            {
                ((WebSocketClient)client).reject(e);
            }
            return true;
        }
    }

    public virtual void handleSubscribe(WebSocketClient client, object message)
    {
        object methods = new Dictionary<string, object>() {
            { "candlestick", this.handleOHLCV },
            { "ticker", this.handleTicker },
            { "trade", this.handleTrades },
            { "book", this.handleOrderBook },
            { "book.update", this.handleOrderBook },
            { "user.order", this.handleOrders },
            { "user.trade", this.handleTrades },
            { "user.balance", this.handleBalance },
            { "user.position_balance", this.handlePositions },
        };
        object result = this.safeValue2(message, "result", "info");
        object channel = this.safeString(result, "channel");
        if (isTrue(isTrue((!isEqual(channel, null))) && isTrue(isGreaterThan(getIndexOf(channel, "user.trade"), -1))))
        {
            // channel might be user.trade.BTC_USDT
            this.handleTrades(client as WebSocketClient, result);
        }
        if (isTrue(isTrue((!isEqual(channel, null))) && isTrue(((string)channel).StartsWith(((string)"user.order")))))
        {
            // channel might be user.order.BTC_USDT
            this.handleOrders(client as WebSocketClient, result);
        }
        object method = this.safeValue(methods, channel);
        if (isTrue(!isEqual(method, null)))
        {
            DynamicInvoker.InvokeMethod(method, new object[] { client, result});
        }
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        //
        // ping
        //    {
        //        "id": 1587523073344,
        //        "method": "public/heartbeat",
        //        "code": 0
        //    }
        // auth
        //     { id: 1648132625434, method: "public/auth", code: 0 }
        // ohlcv
        //    {
        //        "code": 0,
        //        "method": "subscribe",
        //        "result": {
        //          "instrument_name": "BTC_USDT",
        //          "subscription": "candlestick.1m.BTC_USDT",
        //          "channel": "candlestick",
        //          "depth": 300,
        //          "interval": "1m",
        //          "data": [ [Object] ]
        //        }
        //      }
        // ticker
        //    {
        //        "info":{
        //           "instrument_name":"BTC_USDT",
        //           "subscription":"ticker.BTC_USDT",
        //           "channel":"ticker",
        //           "data":[ { } ]
        //
        if (isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            return;
        }
        object method = this.safeString(message, "method");
        object methods = new Dictionary<string, object>() {
            { "", this.handlePing },
            { "public/heartbeat", this.handlePing },
            { "public/auth", this.handleAuthenticate },
            { "private/create-order", this.handleOrder },
            { "private/cancel-order", this.handleOrder },
            { "private/cancel-all-orders", this.handleCancelAllOrders },
            { "private/close-position", this.handleOrder },
            { "subscribe", this.handleSubscribe },
        };
        object callMethod = this.safeValue(methods, method);
        if (isTrue(!isEqual(callMethod, null)))
        {
            DynamicInvoker.InvokeMethod(callMethod, new object[] { client, message});
        }
    }

    public async virtual Task<object> authenticate(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        var client = this.client(url);
        object messageHash = "authenticated";
        var future = client.future(messageHash);
        object authenticated = this.safeValue(((WebSocketClient)client).subscriptions, messageHash);
        if (isTrue(isEqual(authenticated, null)))
        {
            object method = "public/auth";
            object nonce = ((object)this.nonce()).ToString();
            object auth = add(add(add(method, nonce), this.apiKey), nonce);
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
            object request = new Dictionary<string, object>() {
                { "id", nonce },
                { "nonce", nonce },
                { "method", method },
                { "api_key", this.apiKey },
                { "sig", signature },
            };
            object message = this.extend(request, parameters);
            this.watch(url, messageHash, message, messageHash);
        }
        return await (future as Exchange.Future);
    }

    public virtual void handlePing(WebSocketClient client, object message)
    {
        this.spawn(this.pong, new object[] { client, message});
    }

    public virtual void handleAuthenticate(WebSocketClient client, object message)
    {
        //
        //  { id: 1648132625434, method: "public/auth", code: 0 }
        //
        var future = this.safeValue((client as WebSocketClient).futures, "authenticated");
        (future as Future).resolve(true);
    }
}
