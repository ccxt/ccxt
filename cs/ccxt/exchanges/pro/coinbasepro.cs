namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class coinbasepro { public coinbasepro(object args = null) : base(args) { } }
public partial class coinbasepro : ccxt.coinbasepro
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchOHLCV", false },
                { "watchOrderBook", true },
                { "watchOrderBookForSymbols", true },
                { "watchTicker", true },
                { "watchTickers", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", true },
                { "watchMyTradesForSymbols", true },
                { "watchBalance", false },
                { "watchStatus", false },
                { "watchOrders", true },
                { "watchOrdersForSymbols", true },
                { "watchMyTrades", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://ws-feed.pro.coinbase.com" },
                } },
                { "test", new Dictionary<string, object>() {
                    { "ws", "wss://ws-feed-public.sandbox.exchange.coinbase.com" },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "tradesLimit", 1000 },
                { "ordersLimit", 1000 },
                { "myTradesLimit", 1000 },
            } },
        });
    }

    public virtual object authenticate()
    {
        this.checkRequiredCredentials();
        object path = "/users/self/verify";
        object nonce = this.nonce();
        object payload = add(add(((object)nonce).ToString(), "GET"), path);
        object signature = this.hmac(this.encode(payload), this.base64ToBinary(this.secret), sha256, "base64");
        return new Dictionary<string, object>() {
            { "timestamp", nonce },
            { "key", this.apiKey },
            { "signature", signature },
            { "passphrase", this.password },
        };
    }

    public async virtual Task<object> subscribe(object name, object symbol = null, object messageHashStart = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object messageHash = messageHashStart;
        object productIds = new List<object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            messageHash = add(messageHash, add(":", getValue(market, "id")));
            ((IList<object>)productIds).Add(getValue(market, "id"));
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        if (isTrue(inOp(parameters, "signature")))
        {
            // need to distinguish between public trades and user trades
            url = add(url, "?");
        }
        object subscribe = new Dictionary<string, object>() {
            { "type", "subscribe" },
            { "product_ids", productIds },
            { "channels", new List<object>() {name} },
        };
        object request = this.extend(subscribe, parameters);
        return await this.watch(url, messageHash, request, messageHash);
    }

    public async virtual Task<object> subscribeMultiple(object name, object symbols = null, object messageHashStart = null, object parameters = null)
    {
        symbols ??= new List<object>();
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        symbols = this.marketSymbols(symbols);
        object messageHashes = new List<object>() {};
        object productIds = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            market = this.market(symbol);
            ((IList<object>)productIds).Add(getValue(market, "id"));
            ((IList<object>)messageHashes).Add(add(add(messageHashStart, ":"), getValue(market, "symbol")));
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        if (isTrue(inOp(parameters, "signature")))
        {
            // need to distinguish between public trades and user trades
            url = add(url, "?");
        }
        object subscribe = new Dictionary<string, object>() {
            { "type", "subscribe" },
            { "product_ids", productIds },
            { "channels", new List<object>() {name} },
        };
        object request = this.extend(subscribe, parameters);
        return await this.watchMultiple(url, messageHashes, request, messageHashes);
    }

    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchTicker
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object name = "ticker";
        return await this.subscribe(name, symbol, name, parameters);
    }

    public async override Task<object> watchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchTickers
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
        * @param {string[]} [symbols] unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.channel] the channel to subscribe to, tickers by default. Can be tickers, sprd-tickers, index-tickers, block-tickers
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new BadSymbol ((string)add(this.id, " watchTickers requires a non-empty symbols array")) ;
        }
        object channel = "ticker";
        object messageHash = "ticker";
        object ticker = await this.subscribeMultiple(channel, symbols, messageHash, parameters);
        if (isTrue(this.newUpdates))
        {
            object result = new Dictionary<string, object>() {};
            ((IDictionary<string,object>)result)[(string)getValue(ticker, "symbol")] = ticker;
            return result;
        }
        return this.filterByArray(this.tickers, "symbol", symbols);
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        object name = "matches";
        object trades = await this.subscribe(name, symbol, name, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public async override Task<object> watchTradesForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbase#watchTradesForSymbols
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new BadRequest ((string)add(this.id, " watchTradesForSymbols() requires a non-empty array of symbols")) ;
        }
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object name = "matches";
        object trades = await this.subscribeMultiple(name, symbols, name, parameters);
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public async override Task<object> watchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchMyTrades
        * @description watches information on multiple trades made by the user
        * @param {string} symbol unified market symbol of the market trades were made in
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        object name = "user";
        object messageHash = "myTrades";
        object authentication = this.authenticate();
        object trades = await this.subscribe(name, symbol, messageHash, this.extend(parameters, authentication));
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public async override Task<object> watchMyTradesForSymbols(object symbols = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchMyTradesForSymbols
        * @description watches information on multiple trades made by the user
        * @param {string[]} symbols unified symbol of the market to fetch trades for
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure
        */
        parameters ??= new Dictionary<string, object>();
        symbols = this.marketSymbols(symbols, null, false);
        await this.loadMarkets();
        object name = "user";
        object messageHash = "myTrades";
        object authentication = this.authenticate();
        object trades = await this.subscribeMultiple(name, symbols, messageHash, this.extend(parameters, authentication));
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public async override Task<object> watchOrdersForSymbols(object symbols = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchOrdersForSymbols
        * @description watches information on multiple orders made by the user
        * @param {string[]} symbols unified symbol of the market to fetch orders for
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of trade structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object name = "user";
        object messageHash = "orders";
        object authentication = this.authenticate();
        object orders = await this.subscribeMultiple(name, symbols, messageHash, this.extend(parameters, authentication));
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(orders, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(orders, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(orders, since, limit, "timestamp", true);
    }

    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchOrders
        * @description watches information on multiple orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new BadSymbol ((string)add(this.id, " watchMyTrades requires a symbol")) ;
        }
        await this.loadMarkets();
        symbol = this.symbol(symbol);
        object name = "user";
        object messageHash = "orders";
        object authentication = this.authenticate();
        object orders = await this.subscribe(name, symbol, messageHash, this.extend(parameters, authentication));
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(orders, since, limit, "timestamp", true);
    }

    public async override Task<object> watchOrderBookForSymbols(object symbols, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchOrderBookForSymbols
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string[]} symbols unified array of symbols
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new BadRequest ((string)add(this.id, " watchOrderBookForSymbols() requires a non-empty array of symbols")) ;
        }
        object name = "level2";
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object marketIds = this.marketIds(symbols);
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, symbolsLength); postFixIncrement(ref i))
        {
            object marketId = getValue(marketIds, i);
            ((IList<object>)messageHashes).Add(add(add(name, ":"), marketId));
        }
        object url = getValue(getValue(this.urls, "api"), "ws");
        object subscribe = new Dictionary<string, object>() {
            { "type", "subscribe" },
            { "product_ids", marketIds },
            { "channels", new List<object>() {name} },
        };
        object request = this.extend(subscribe, parameters);
        object subscription = new Dictionary<string, object>() {
            { "messageHash", name },
            { "symbols", symbols },
            { "marketIds", marketIds },
            { "limit", limit },
        };
        object authentication = this.authenticate();
        object orderbook = await this.watchMultiple(url, messageHashes, this.extend(request, authentication), messageHashes, subscription);
        return (orderbook as IOrderBook).limit();
    }

    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinbasepro#watchOrderBook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        object name = "level2";
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object messageHash = add(add(name, ":"), getValue(market, "id"));
        object url = getValue(getValue(this.urls, "api"), "ws");
        object subscribe = new Dictionary<string, object>() {
            { "type", "subscribe" },
            { "product_ids", new List<object>() {getValue(market, "id")} },
            { "channels", new List<object>() {name} },
        };
        object request = this.extend(subscribe, parameters);
        object subscription = new Dictionary<string, object>() {
            { "messageHash", messageHash },
            { "symbol", symbol },
            { "marketId", getValue(market, "id") },
            { "limit", limit },
        };
        object authentication = this.authenticate();
        object orderbook = await this.watch(url, messageHash, this.extend(request, authentication), messageHash, subscription);
        return (orderbook as IOrderBook).limit();
    }

    public virtual object handleTrade(WebSocketClient client, object message)
    {
        //
        //     {
        //         "type": "match",
        //         "trade_id": 82047307,
        //         "maker_order_id": "0f358725-2134-435e-be11-753912a326e0",
        //         "taker_order_id": "252b7002-87a3-425c-ac73-f5b9e23f3caf",
        //         "side": "sell",
        //         "size": "0.00513192",
        //         "price": "9314.78",
        //         "product_id": "BTC-USD",
        //         "sequence": 12038915443,
        //         "time": "2020-01-31T20:03:41.158814Z"
        //     }
        //
        object marketId = this.safeString(message, "product_id");
        if (isTrue(!isEqual(marketId, null)))
        {
            object trade = this.parseWsTrade(message);
            object symbol = getValue(trade, "symbol");
            // the exchange sends type = 'match'
            // but requires 'matches' upon subscribing
            // therefore we resolve 'matches' here instead of 'match'
            object type = "matches";
            object messageHash = add(add(type, ":"), marketId);
            object tradesArray = this.safeValue(this.trades, symbol);
            if (isTrue(isEqual(tradesArray, null)))
            {
                object tradesLimit = this.safeInteger(this.options, "tradesLimit", 1000);
                tradesArray = new ArrayCache(tradesLimit);
                ((IDictionary<string,object>)this.trades)[(string)symbol] = tradesArray;
            }
            callDynamically(tradesArray, "append", new object[] {trade});
            callDynamically(client as WebSocketClient, "resolve", new object[] {tradesArray, messageHash});
        }
        return message;
    }

    public virtual object handleMyTrade(WebSocketClient client, object message)
    {
        object marketId = this.safeString(message, "product_id");
        if (isTrue(!isEqual(marketId, null)))
        {
            object trade = this.parseWsTrade(message);
            object type = "myTrades";
            object messageHash = add(add(type, ":"), marketId);
            object tradesArray = this.myTrades;
            if (isTrue(isEqual(tradesArray, null)))
            {
                object limit = this.safeInteger(this.options, "myTradesLimit", 1000);
                tradesArray = new ArrayCacheBySymbolById(limit);
                this.myTrades = tradesArray;
            }
            callDynamically(tradesArray, "append", new object[] {trade});
            callDynamically(client as WebSocketClient, "resolve", new object[] {tradesArray, messageHash});
        }
        return message;
    }

    public override object parseWsTrade(object trade, object market = null)
    {
        //
        // private trades
        // {
        //     "type": "match",
        //     "trade_id": 10,
        //     "sequence": 50,
        //     "maker_order_id": "ac928c66-ca53-498f-9c13-a110027a60e8",
        //     "taker_order_id": "132fb6ae-456b-4654-b4e0-d681ac05cea1",
        //     "time": "2014-11-07T08:19:27.028459Z",
        //     "product_id": "BTC-USD",
        //     "size": "5.23512",
        //     "price": "400.23",
        //     "side": "sell",
        //     "taker_user_id: "5844eceecf7e803e259d0365",
        //     "user_id": "5844eceecf7e803e259d0365",
        //     "taker_profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
        //     "profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
        //     "taker_fee_rate": "0.005"
        // }
        //
        // {
        //     "type": "match",
        //     "trade_id": 10,
        //     "sequence": 50,
        //     "maker_order_id": "ac928c66-ca53-498f-9c13-a110027a60e8",
        //     "taker_order_id": "132fb6ae-456b-4654-b4e0-d681ac05cea1",
        //     "time": "2014-11-07T08:19:27.028459Z",
        //     "product_id": "BTC-USD",
        //     "size": "5.23512",
        //     "price": "400.23",
        //     "side": "sell",
        //     "maker_user_id: "5844eceecf7e803e259d0365",
        //     "maker_id": "5844eceecf7e803e259d0365",
        //     "maker_profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
        //     "profile_id": "765d1549-9660-4be2-97d4-fa2d65fa3352",
        //     "maker_fee_rate": "0.001"
        // }
        //
        // public trades
        // {
        //     "type": "received",
        //     "time": "2014-11-07T08:19:27.028459Z",
        //     "product_id": "BTC-USD",
        //     "sequence": 10,
        //     "order_id": "d50ec984-77a8-460a-b958-66f114b0de9b",
        //     "size": "1.34",
        //     "price": "502.1",
        //     "side": "buy",
        //     "order_type": "limit"
        // }
        object parsed = base.parseTrade(trade);
        object feeRate = null;
        object isMaker = false;
        if (isTrue(inOp(trade, "maker_fee_rate")))
        {
            isMaker = true;
            ((IDictionary<string,object>)parsed)["takerOrMaker"] = "maker";
            feeRate = this.safeNumber(trade, "maker_fee_rate");
        } else
        {
            ((IDictionary<string,object>)parsed)["takerOrMaker"] = "taker";
            feeRate = this.safeNumber(trade, "taker_fee_rate");
            // side always represents the maker side of the trade
            // so if we're taker, we invert it
            object currentSide = getValue(parsed, "side");
            ((IDictionary<string,object>)parsed)["side"] = this.safeString(new Dictionary<string, object>() {
                { "buy", "sell" },
                { "sell", "buy" },
            }, currentSide, currentSide);
        }
        object idKey = ((bool) isTrue(isMaker)) ? "maker_order_id" : "taker_order_id";
        ((IDictionary<string,object>)parsed)["order"] = this.safeString(trade, idKey);
        market = this.market(getValue(parsed, "symbol"));
        object feeCurrency = getValue(market, "quote");
        object feeCost = null;
        if (isTrue(isTrue((!isEqual(getValue(parsed, "cost"), null))) && isTrue((!isEqual(feeRate, null)))))
        {
            object cost = this.safeNumber(parsed, "cost");
            feeCost = multiply(cost, feeRate);
        }
        ((IDictionary<string,object>)parsed)["fee"] = new Dictionary<string, object>() {
            { "rate", feeRate },
            { "cost", feeCost },
            { "currency", feeCurrency },
        };
        return parsed;
    }

    public virtual object parseWsOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "filled", "closed" },
            { "canceled", "canceled" },
        };
        return this.safeString(statuses, status, "open");
    }

    public virtual void handleOrder(WebSocketClient client, object message)
    {
        //
        // Order is created
        //
        //     {
        //         "type": "received",
        //         "side": "sell",
        //         "product_id": "BTC-USDC",
        //         "time": "2021-03-05T16:42:21.878177Z",
        //         "sequence": 5641953814,
        //         "profile_id": "774ee0ce-fdda-405f-aa8d-47189a14ba0a",
        //         "user_id": "54fc141576dcf32596000133",
        //         "order_id": "11838707-bf9c-4d65-8cec-b57c9a7cab42",
        //         "order_type": "limit",
        //         "size": "0.0001",
        //         "price": "50000",
        //         "client_oid": "a317abb9-2b30-4370-ebfe-0deecb300180"
        //     }
        //
        //     {
        //         "type": "received",
        //         "time": "2014-11-09T08:19:27.028459Z",
        //         "product_id": "BTC-USD",
        //         "sequence": 12,
        //         "order_id": "dddec984-77a8-460a-b958-66f114b0de9b",
        //         "funds": "3000.234",
        //         "side": "buy",
        //         "order_type": "market"
        //     }
        //
        // Order is on the order book
        //
        //     {
        //         "type": "open",
        //         "side": "sell",
        //         "product_id": "BTC-USDC",
        //         "time": "2021-03-05T16:42:21.878177Z",
        //         "sequence": 5641953815,
        //         "profile_id": "774ee0ce-fdda-405f-aa8d-47189a14ba0a",
        //         "user_id": "54fc141576dcf32596000133",
        //         "price": "50000",
        //         "order_id": "11838707-bf9c-4d65-8cec-b57c9a7cab42",
        //         "remaining_size": "0.0001"
        //     }
        //
        // Order is partially or completely filled
        //
        //     {
        //         "type": "match",
        //         "side": "sell",
        //         "product_id": "BTC-USDC",
        //         "time": "2021-03-05T16:37:13.396107Z",
        //         "sequence": 5641897876,
        //         "profile_id": "774ee0ce-fdda-405f-aa8d-47189a14ba0a",
        //         "user_id": "54fc141576dcf32596000133",
        //         "trade_id": 5455505,
        //         "maker_order_id": "e5f5754d-70a3-4346-95a6-209bcb503629",
        //         "taker_order_id": "88bf7086-7b15-40ff-8b19-ab4e08516d69",
        //         "size": "0.00021019",
        //         "price": "47338.46",
        //         "taker_profile_id": "774ee0ce-fdda-405f-aa8d-47189a14ba0a",
        //         "taker_user_id": "54fc141576dcf32596000133",
        //         "taker_fee_rate": "0.005"
        //     }
        //
        // Order is canceled / closed
        //
        //     {
        //         "type": "done",
        //         "side": "buy",
        //         "product_id": "BTC-USDC",
        //         "time": "2021-03-05T16:37:13.396107Z",
        //         "sequence": 5641897877,
        //         "profile_id": "774ee0ce-fdda-405f-aa8d-47189a14ba0a",
        //         "user_id": "54fc141576dcf32596000133",
        //         "order_id": "88bf7086-7b15-40ff-8b19-ab4e08516d69",
        //         "reason": "filled"
        //     }
        //
        object currentOrders = this.orders;
        if (isTrue(isEqual(currentOrders, null)))
        {
            object limit = this.safeInteger(this.options, "ordersLimit", 1000);
            currentOrders = new ArrayCacheBySymbolById(limit);
            this.orders = currentOrders;
        }
        object type = this.safeString(message, "type");
        object marketId = this.safeString(message, "product_id");
        if (isTrue(!isEqual(marketId, null)))
        {
            object messageHash = add("orders:", marketId);
            object symbol = this.safeSymbol(marketId);
            object orderId = this.safeString(message, "order_id");
            object makerOrderId = this.safeString(message, "maker_order_id");
            object takerOrderId = this.safeString(message, "taker_order_id");
            object orders = this.orders;
            object previousOrders = this.safeValue((orders as ArrayCacheBySymbolById).hashmap, symbol, new Dictionary<string, object>() {});
            object previousOrder = this.safeValue(previousOrders, orderId);
            if (isTrue(isEqual(previousOrder, null)))
            {
                previousOrder = this.safeValue2(previousOrders, makerOrderId, takerOrderId);
            }
            if (isTrue(isEqual(previousOrder, null)))
            {
                object parsed = this.parseWsOrder(message);
                callDynamically(orders, "append", new object[] {parsed});
                callDynamically(client as WebSocketClient, "resolve", new object[] {orders, messageHash});
            } else
            {
                object sequence = this.safeInteger(message, "sequence");
                object previousInfo = this.safeValue(previousOrder, "info", new Dictionary<string, object>() {});
                object previousSequence = this.safeInteger(previousInfo, "sequence");
                if (isTrue(isTrue((isEqual(previousSequence, null))) || isTrue((isGreaterThan(sequence, previousSequence)))))
                {
                    if (isTrue(isEqual(type, "match")))
                    {
                        object trade = this.parseWsTrade(message);
                        if (isTrue(isEqual(getValue(previousOrder, "trades"), null)))
                        {
                            ((IDictionary<string,object>)previousOrder)["trades"] = new List<object>() {};
                        }
                        ((IList<object>)getValue(previousOrder, "trades")).Add(trade);
                        ((IDictionary<string,object>)previousOrder)["lastTradeTimestamp"] = getValue(trade, "timestamp");
                        object totalCost = 0;
                        object totalAmount = 0;
                        object trades = getValue(previousOrder, "trades");
                        for (object i = 0; isLessThan(i, getArrayLength(trades)); postFixIncrement(ref i))
                        {
                            object tradeEntry = getValue(trades, i);
                            totalCost = this.sum(totalCost, getValue(tradeEntry, "cost"));
                            totalAmount = this.sum(totalAmount, getValue(tradeEntry, "amount"));
                        }
                        if (isTrue(isGreaterThan(totalAmount, 0)))
                        {
                            ((IDictionary<string,object>)previousOrder)["average"] = divide(totalCost, totalAmount);
                        }
                        ((IDictionary<string,object>)previousOrder)["cost"] = totalCost;
                        if (isTrue(!isEqual(getValue(previousOrder, "filled"), null)))
                        {
                            ((IDictionary<string,object>)previousOrder)["filled"] = add(((IDictionary<string,object>)previousOrder)["filled"], getValue(trade, "amount"));
                            if (isTrue(!isEqual(getValue(previousOrder, "amount"), null)))
                            {
                                ((IDictionary<string,object>)previousOrder)["remaining"] = subtract(getValue(previousOrder, "amount"), getValue(previousOrder, "filled"));
                            }
                        }
                        if (isTrue(isEqual(getValue(previousOrder, "fee"), null)))
                        {
                            ((IDictionary<string,object>)previousOrder)["fee"] = new Dictionary<string, object>() {
                                { "cost", 0 },
                                { "currency", getValue(getValue(trade, "fee"), "currency") },
                            };
                        }
                        if (isTrue(isTrue((!isEqual(getValue(getValue(previousOrder, "fee"), "cost"), null))) && isTrue((!isEqual(getValue(getValue(trade, "fee"), "cost"), null)))))
                        {
                            ((IDictionary<string,object>)getValue(previousOrder, "fee"))["cost"] = this.sum(getValue(getValue(previousOrder, "fee"), "cost"), getValue(getValue(trade, "fee"), "cost"));
                        }
                        // update the newUpdates count
                        callDynamically(orders, "append", new object[] {previousOrder});
                        callDynamically(client as WebSocketClient, "resolve", new object[] {orders, messageHash});
                    } else if (isTrue(isTrue((isEqual(type, "received"))) || isTrue((isEqual(type, "done")))))
                    {
                        object info = this.extend(getValue(previousOrder, "info"), message);
                        object order = this.parseWsOrder(info);
                        object keys = new List<object>(((IDictionary<string,object>)order).Keys);
                        // update the reference
                        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
                        {
                            object key = getValue(keys, i);
                            if (isTrue(!isEqual(getValue(order, key), null)))
                            {
                                ((IDictionary<string,object>)previousOrder)[(string)key] = getValue(order, key);
                            }
                        }
                        // update the newUpdates count
                        callDynamically(orders, "append", new object[] {previousOrder});
                        callDynamically(client as WebSocketClient, "resolve", new object[] {orders, messageHash});
                    }
                }
            }
        }
    }

    public override object parseWsOrder(object order, object market = null)
    {
        object id = this.safeString(order, "order_id");
        object clientOrderId = this.safeString(order, "client_oid");
        object marketId = this.safeString(order, "product_id");
        object symbol = this.safeSymbol(marketId);
        object side = this.safeString(order, "side");
        object price = this.safeNumber(order, "price");
        object amount = this.safeNumber2(order, "size", "funds");
        object time = this.safeString(order, "time");
        object timestamp = this.parse8601(time);
        object reason = this.safeString(order, "reason");
        object status = this.parseWsOrderStatus(reason);
        object orderType = this.safeString(order, "order_type");
        object remaining = this.safeNumber(order, "remaining_size");
        object type = this.safeString(order, "type");
        object filled = null;
        if (isTrue(isTrue((!isEqual(amount, null))) && isTrue((!isEqual(remaining, null)))))
        {
            filled = subtract(amount, remaining);
        } else if (isTrue(isEqual(type, "received")))
        {
            filled = 0;
            if (isTrue(!isEqual(amount, null)))
            {
                remaining = subtract(amount, filled);
            }
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "symbol", symbol },
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "type", orderType },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "amount", amount },
            { "cost", null },
            { "average", null },
            { "filled", filled },
            { "remaining", remaining },
            { "status", status },
            { "fee", null },
            { "trades", null },
        });
    }

    public virtual object handleTicker(WebSocketClient client, object message)
    {
        //
        //     {
        //         "type": "ticker",
        //         "sequence": 12042642428,
        //         "product_id": "BTC-USD",
        //         "price": "9380.55",
        //         "open_24h": "9450.81000000",
        //         "volume_24h": "9611.79166047",
        //         "low_24h": "9195.49000000",
        //         "high_24h": "9475.19000000",
        //         "volume_30d": "327812.00311873",
        //         "best_bid": "9380.54",
        //         "best_ask": "9380.55",
        //         "side": "buy",
        //         "time": "2020-02-01T01:40:16.253563Z",
        //         "trade_id": 82062566,
        //         "last_size": "0.41969131"
        //     }
        //
        object marketId = this.safeString(message, "product_id");
        if (isTrue(!isEqual(marketId, null)))
        {
            object ticker = this.parseTicker(message);
            object symbol = getValue(ticker, "symbol");
            ((IDictionary<string,object>)this.tickers)[(string)symbol] = ticker;
            object messageHash = add("ticker:", symbol);
            object idMessageHash = add("ticker:", marketId);
            callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, messageHash});
            callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, idMessageHash});
        }
        return message;
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "type": "ticker",
        //         "sequence": 7388547310,
        //         "product_id": "BTC-USDT",
        //         "price": "22345.67",
        //         "open_24h": "22308.13",
        //         "volume_24h": "470.21123644",
        //         "low_24h": "22150",
        //         "high_24h": "22495.15",
        //         "volume_30d": "25713.98401605",
        //         "best_bid": "22345.67",
        //         "best_bid_size": "0.10647825",
        //         "best_ask": "22349.68",
        //         "best_ask_size": "0.03131702",
        //         "side": "sell",
        //         "time": "2023-03-04T03:37:20.799258Z",
        //         "trade_id": 11586478,
        //         "last_size": "0.00352175"
        //     }
        //
        object type = this.safeString(ticker, "type");
        if (isTrue(isEqual(type, null)))
        {
            return base.parseTicker(ticker, market);
        }
        object marketId = this.safeString(ticker, "product_id");
        object symbol = this.safeSymbol(marketId, market, "-");
        object timestamp = this.parse8601(this.safeString(ticker, "time"));
        object last = this.safeString(ticker, "price");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high_24h") },
            { "low", this.safeString(ticker, "low_24h") },
            { "bid", this.safeString(ticker, "best_bid") },
            { "bidVolume", this.safeString(ticker, "best_bid_size") },
            { "ask", this.safeString(ticker, "best_ask") },
            { "askVolume", this.safeString(ticker, "best_ask_size") },
            { "vwap", null },
            { "open", this.safeString(ticker, "open_24h") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume_24h") },
            { "quoteVolume", null },
            { "info", ticker },
        });
    }

    public override void handleDelta(object bookside, object delta)
    {
        object price = this.safeNumber(delta, 0);
        object amount = this.safeNumber(delta, 1);
        (bookside as IOrderBookSide).store(price, amount);
    }

    public override void handleDeltas(object bookside, object deltas)
    {
        for (object i = 0; isLessThan(i, getArrayLength(deltas)); postFixIncrement(ref i))
        {
            this.handleDelta(bookside, getValue(deltas, i));
        }
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // first message (snapshot)
        //
        //     {
        //         "type": "snapshot",
        //         "product_id": "BTC-USD",
        //         "bids": [
        //             ["10101.10", "0.45054140"]
        //         ],
        //         "asks": [
        //             ["10102.55", "0.57753524"]
        //         ]
        //     }
        //
        // subsequent updates
        //
        //     {
        //         "type": "l2update",
        //         "product_id": "BTC-USD",
        //         "time": "2019-08-14T20:42:27.265Z",
        //         "changes": [
        //             [ "buy", "10101.80000000", "0.162567" ]
        //         ]
        //     }
        //
        object type = this.safeString(message, "type");
        object marketId = this.safeString(message, "product_id");
        object market = this.safeMarket(marketId, null, "-");
        object symbol = getValue(market, "symbol");
        object name = "level2";
        object messageHash = add(add(name, ":"), marketId);
        object subscription = this.safeValue(((WebSocketClient)client).subscriptions, messageHash, new Dictionary<string, object>() {});
        object limit = this.safeInteger(subscription, "limit");
        if (isTrue(isEqual(type, "snapshot")))
        {
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.orderBook(new Dictionary<string, object>() {}, limit);
            object orderbook = getValue(this.orderbooks, symbol);
            this.handleDeltas(getValue(orderbook, "asks"), this.safeValue(message, "asks", new List<object>() {}));
            this.handleDeltas(getValue(orderbook, "bids"), this.safeValue(message, "bids", new List<object>() {}));
            ((IDictionary<string,object>)orderbook)["timestamp"] = null;
            ((IDictionary<string,object>)orderbook)["datetime"] = null;
            ((IDictionary<string,object>)orderbook)["symbol"] = symbol;
            callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
        } else if (isTrue(isEqual(type, "l2update")))
        {
            object orderbook = getValue(this.orderbooks, symbol);
            object timestamp = this.parse8601(this.safeString(message, "time"));
            object changes = this.safeValue(message, "changes", new List<object>() {});
            object sides = new Dictionary<string, object>() {
                { "sell", "asks" },
                { "buy", "bids" },
            };
            for (object i = 0; isLessThan(i, getArrayLength(changes)); postFixIncrement(ref i))
            {
                object change = getValue(changes, i);
                object key = this.safeString(change, 0);
                object side = this.safeString(sides, key);
                object price = this.safeNumber(change, 1);
                object amount = this.safeNumber(change, 2);
                object bookside = getValue(orderbook, side);
                (bookside as IOrderBookSide).store(price, amount);
            }
            ((IDictionary<string,object>)orderbook)["timestamp"] = timestamp;
            ((IDictionary<string,object>)orderbook)["datetime"] = this.iso8601(timestamp);
            callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
        }
    }

    public virtual object handleSubscriptionStatus(WebSocketClient client, object message)
    {
        //
        //     {
        //         "type": "subscriptions",
        //         "channels": [
        //             {
        //                 "name": "level2",
        //                 "product_ids": [ "ETH-BTC" ]
        //             }
        //         ]
        //     }
        //
        return message;
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         "type": "error",
        //         "message": "error message",
        //         /* ... */
        //     }
        //
        // auth error
        //
        //     {
        //         "type": "error",
        //         "message": "Authentication Failed",
        //         "reason": "{"message":"Invalid API Key"}"
        //     }
        //
        object errMsg = this.safeString(message, "message");
        object reason = this.safeString(message, "reason");
        try
        {
            if (isTrue(isEqual(errMsg, "Authentication Failed")))
            {
                throw new AuthenticationError ((string)add("Authentication failed: ", reason)) ;
            } else
            {
                throw new ExchangeError ((string)add(add(this.id, " "), reason)) ;
            }
        } catch(Exception error)
        {
            ((WebSocketClient)client).reject(error);
            return true;
        }
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        object type = this.safeString(message, "type");
        object methods = new Dictionary<string, object>() {
            { "snapshot", this.handleOrderBook },
            { "l2update", this.handleOrderBook },
            { "subscribe", this.handleSubscriptionStatus },
            { "ticker", this.handleTicker },
            { "received", this.handleOrder },
            { "open", this.handleOrder },
            { "change", this.handleOrder },
            { "done", this.handleOrder },
            { "error", this.handleErrorMessage },
        };
        object length = subtract(((string)client.url).Length, 0);
        object authenticated = isEqual(getValue(client.url, subtract(length, 1)), "?");
        object method = this.safeValue(methods, type);
        if (isTrue(isEqual(method, null)))
        {
            if (isTrue(isEqual(type, "match")))
            {
                if (isTrue(authenticated))
                {
                    this.handleMyTrade(client as WebSocketClient, message);
                    this.handleOrder(client as WebSocketClient, message);
                } else
                {
                    this.handleTrade(client as WebSocketClient, message);
                }
            }
        } else
        {
            DynamicInvoker.InvokeMethod(method, new object[] { client, message});
        }
    }
}
