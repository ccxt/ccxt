namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class whitebit { public whitebit(object args = null) : base(args) { } }
public partial class whitebit : ccxt.whitebit
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchBalance", true },
                { "watchMyTrades", true },
                { "watchOHLCV", true },
                { "watchOrderBook", true },
                { "watchOrders", true },
                { "watchTicker", true },
                { "watchTrades", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", "wss://api.whitebit.com/ws" },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "timeframes", new Dictionary<string, object>() {
                    { "1m", "60" },
                    { "5m", "300" },
                    { "15m", "900" },
                    { "30m", "1800" },
                    { "1h", "3600" },
                    { "4h", "14400" },
                    { "8h", "28800" },
                    { "1d", "86400" },
                    { "1w", "604800" },
                } },
                { "watchOrderBook", new Dictionary<string, object>() {
                    { "priceInterval", 0 },
                } },
            } },
            { "streaming", new Dictionary<string, object>() {
                { "ping", this.ping },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "ws", new Dictionary<string, object>() {
                    { "exact", new Dictionary<string, object>() {
                        { "1", typeof(BadRequest) },
                        { "2", typeof(BadRequest) },
                        { "4", typeof(BadRequest) },
                        { "6", typeof(AuthenticationError) },
                    } },
                } },
            } },
        });
    }

    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchOHLCV
        * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object timeframes = this.safeValue(this.options, "timeframes", new Dictionary<string, object>() {});
        object interval = this.safeInteger(timeframes, timeframe);
        object marketId = getValue(market, "id");
        // currently there is no way of knowing
        // the interval upon getting an update
        // so that can't be part of the message hash, and the user can only subscribe
        // to one timeframe per symbol
        object messageHash = add("candles:", symbol);
        object reqParams = new List<object>() {marketId, interval};
        object method = "candles_subscribe";
        object ohlcv = await this.watchPublic(messageHash, method, reqParams, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(ohlcv, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(ohlcv, since, limit, 0, true);
    }

    public virtual object handleOHLCV(WebSocketClient client, object message)
    {
        //
        // {
        //     "method": "candles_update",
        //     "params": [
        //       [
        //         1655204760,
        //         "22374.15",
        //         "22351.34",
        //         "22374.27",
        //         "22342.52",
        //         "30.213426",
        //         "675499.29718947",
        //         "BTC_USDT"
        //       ]
        //     ],
        //     "id": null
        // }
        //
        object parameters = this.safeValue(message, "params", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(parameters)); postFixIncrement(ref i))
        {
            object data = getValue(parameters, i);
            object marketId = this.safeString(data, 7);
            object market = this.safeMarket(marketId);
            object symbol = getValue(market, "symbol");
            object messageHash = add(add("candles", ":"), symbol);
            object parsed = this.parseOHLCV(data, market);
            // this.ohlcvs[symbol] = this.safeValue (this.ohlcvs, symbol);
            if (!isTrue((inOp(this.ohlcvs, symbol))))
            {
                ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = new Dictionary<string, object>() {};
            }
            // let stored = this.ohlcvs[symbol]['unknown']; // we don't know the timeframe but we need to respect the type
            if (!isTrue((inOp(getValue(this.ohlcvs, symbol), "unknown"))))
            {
                object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
                var stored = new ArrayCacheByTimestamp(limit);
                ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))["unknown"] = stored;
            }
            object ohlcv = getValue(getValue(this.ohlcvs, symbol), "unknown");
            callDynamically(ohlcv, "append", new object[] {parsed});
            callDynamically(client as WebSocketClient, "resolve", new object[] {ohlcv, messageHash});
        }
        return message;
    }

    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchOrderBook
        * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        if (isTrue(isEqual(limit, null)))
        {
            limit = 10; // max 100
        }
        object messageHash = add(add("orderbook", ":"), getValue(market, "symbol"));
        object method = "depth_subscribe";
        object options = this.safeValue(this.options, "watchOrderBook", new Dictionary<string, object>() {});
        object defaultPriceInterval = this.safeString(options, "priceInterval", "0");
        object priceInterval = this.safeString(parameters, "priceInterval", defaultPriceInterval);
        parameters = this.omit(parameters, "priceInterval");
        object reqParams = new List<object>() {getValue(market, "id"), limit, priceInterval, true};
        object orderbook = await this.watchPublic(messageHash, method, reqParams, parameters);
        return (orderbook as IOrderBook).limit();
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // {
        //     "method":"depth_update",
        //     "params":[
        //        true,
        //        {
        //           "timestamp": 1708679568.940867,
        //           "asks":[
        //              [ "21252.45","0.01957"],
        //              ["21252.55","0.126205"],
        //              ["21252.66","0.222689"],
        //              ["21252.76","0.185358"],
        //              ["21252.87","0.210077"],
        //              ["21252.98","0.303991"],
        //              ["21253.08","0.327909"],
        //              ["21253.19","0.399007"],
        //              ["21253.3","0.427695"],
        //              ["21253.4","0.492901"]
        //           ],
        //           "bids":[
        //              ["21248.82","0.22"],
        //              ["21248.73","0.000467"],
        //              ["21248.62","0.100864"],
        //              ["21248.51","0.061436"],
        //              ["21248.42","0.091"],
        //              ["21248.41","0.126839"],
        //              ["21248.3","0.063511"],
        //              ["21248.2","0.110547"],
        //              ["21248","0.25257"],
        //              ["21247.7","1.71813"]
        //           ]
        //        },
        //        "BTC_USDT"
        //     ],
        //     "id":null
        //  }
        //
        object parameters = this.safeValue(message, "params", new List<object>() {});
        object isSnapshot = this.safeValue(parameters, 0);
        object marketId = this.safeString(parameters, 2);
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object data = this.safeValue(parameters, 1);
        object timestamp = this.safeTimestamp(data, "timestamp");
        if (!isTrue((inOp(this.orderbooks, symbol))))
        {
            object ob = this.orderBook();
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = ob;
        }
        object orderbook = getValue(this.orderbooks, symbol);
        ((IDictionary<string,object>)orderbook)["timestamp"] = timestamp;
        ((IDictionary<string,object>)orderbook)["datetime"] = this.iso8601(timestamp);
        if (isTrue(isSnapshot))
        {
            object snapshot = this.parseOrderBook(data, symbol);
            (orderbook as IOrderBook).reset(snapshot);
        } else
        {
            object asks = this.safeValue(data, "asks", new List<object>() {});
            object bids = this.safeValue(data, "bids", new List<object>() {});
            this.handleDeltas(getValue(orderbook, "asks"), asks);
            this.handleDeltas(getValue(orderbook, "bids"), bids);
        }
        object messageHash = add(add("orderbook", ":"), symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
    }

    public override void handleDelta(object bookside, object delta)
    {
        object price = this.safeFloat(delta, 0);
        object amount = this.safeFloat(delta, 1);
        (bookside as IOrderBookSide).store(price, amount);
    }

    public override void handleDeltas(object bookside, object deltas)
    {
        for (object i = 0; isLessThan(i, getArrayLength(deltas)); postFixIncrement(ref i))
        {
            this.handleDelta(bookside, getValue(deltas, i));
        }
    }

    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchTicker
        * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object method = "market_subscribe";
        object messageHash = add("ticker:", symbol);
        // every time we want to subscribe to another market we have to "re-subscribe" sending it all again
        return await this.watchMultipleSubscription(messageHash, method, symbol, false, parameters);
    }

    public virtual object handleTicker(WebSocketClient client, object message)
    {
        //
        //   {
        //       "method": "market_update",
        //       "params": [
        //         "BTC_USDT",
        //         {
        //           "close": "22293.86",
        //           "deal": "1986990019.96552952",
        //           "high": "24360.7",
        //           "last": "22293.86",
        //           "low": "20851.44",
        //           "open": "24076.12",
        //           "period": 86400,
        //           "volume": "87016.995668"
        //         }
        //       ],
        //       "id": null
        //   }
        //
        object tickers = this.safeValue(message, "params", new List<object>() {});
        object marketId = this.safeString(tickers, 0);
        object market = this.safeMarket(marketId, null);
        object symbol = getValue(market, "symbol");
        object rawTicker = this.safeValue(tickers, 1, new Dictionary<string, object>() {});
        object messageHash = add(add("ticker", ":"), symbol);
        object ticker = this.parseTicker(rawTicker, market);
        ((IDictionary<string,object>)this.tickers)[(string)symbol] = ticker;
        // watchTicker
        callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, messageHash});
        // watchTickers
        object messageHashes = new List<object>(((IDictionary<string, ccxt.Exchange.Future>)client.futures).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(messageHashes)); postFixIncrement(ref i))
        {
            object currentMessageHash = getValue(messageHashes, i);
            if (isTrue(isTrue(isGreaterThanOrEqual(getIndexOf(currentMessageHash, "tickers"), 0)) && isTrue(isGreaterThanOrEqual(getIndexOf(currentMessageHash, symbol), 0))))
            {
                // Example: user calls watchTickers with ['LTC/USDT', 'ETH/USDT']
                // the associated messagehash will be: 'tickers:LTC/USDT:ETH/USDT'
                // since we only have access to a single symbol at a time
                // we have to do a reverse lookup into the tickers hashes
                // and check if the current symbol is a part of one or more
                // tickers hashes and resolve them
                // user might have multiple watchTickers promises
                // watchTickers ( ['LTC/USDT', 'ETH/USDT'] ), watchTickers ( ['ETC/USDT', 'DOGE/USDT'] )
                // and we want to make sure we resolve only the correct ones
                callDynamically(client as WebSocketClient, "resolve", new object[] {ticker, currentMessageHash});
            }
        }
        return message;
    }

    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object messageHash = add(add("trades", ":"), symbol);
        object method = "trades_subscribe";
        // every time we want to subscribe to another market we have to 're-subscribe' sending it all again
        object trades = await this.watchMultipleSubscription(messageHash, method, symbol, false, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        //    {
        //        "method":"trades_update",
        //        "params":[
        //           "BTC_USDT",
        //           [
        //              {
        //                 "id":1900632398,
        //                 "time":1656320231.404343,
        //                 "price":"21443.04",
        //                 "amount":"0.072844",
        //                 "type":"buy"
        //              },
        //              {
        //                 "id":1900632397,
        //                 "time":1656320231.400001,
        //                 "price":"21443.15",
        //                 "amount":"0.060757",
        //                 "type":"buy"
        //              }
        //           ]
        //        ]
        //    }
        //
        object parameters = this.safeValue(message, "params", new List<object>() {});
        object marketId = this.safeString(parameters, 0);
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object stored = this.safeValue(this.trades, symbol);
        if (isTrue(isEqual(stored, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object data = this.safeValue(parameters, 1, new List<object>() {});
        object parsedTrades = this.parseTrades(data, market);
        for (object j = 0; isLessThan(j, getArrayLength(parsedTrades)); postFixIncrement(ref j))
        {
            callDynamically(stored, "append", new object[] {getValue(parsedTrades, j)});
        }
        object messageHash = add("trades:", getValue(market, "symbol"));
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
    }

    public async override Task<object> watchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchMyTrades
        * @description watches trades made by the user
        * @param {str} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        await this.authenticate();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object messageHash = add("myTrades:", symbol);
        object method = "deals_subscribe";
        object trades = await this.watchMultipleSubscription(messageHash, method, symbol, true, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }

    public virtual void handleMyTrades(WebSocketClient client, object message, object subscription = null)
    {
        //
        //   {
        //       "method": "deals_update",
        //       "params": [
        //         1894994106,
        //         1656151427.729706,
        //         "LTC_USDT",
        //         96624037337,
        //         "56.78",
        //         "0.16717",
        //         "0.0094919126",
        //         ''
        //       ],
        //       "id": null
        //   }
        //
        object trade = this.safeValue(message, "params");
        if (isTrue(isEqual(this.myTrades, null)))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            this.myTrades = new ArrayCache(limit);
        }
        object stored = this.myTrades;
        object parsed = this.parseWsTrade(trade);
        callDynamically(stored, "append", new object[] {parsed});
        object symbol = getValue(parsed, "symbol");
        object messageHash = add("myTrades:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {stored, messageHash});
    }

    public override object parseWsTrade(object trade, object market = null)
    {
        //
        //   [
        //         1894994106, // id
        //         1656151427.729706, // deal time
        //         "LTC_USDT", // symbol
        //         96624037337, // order id
        //         "56.78", // price
        //         "0.16717", // amount
        //         "0.0094919126", // fee
        //         '' // client order id
        //    ]
        //
        object orderId = this.safeString(trade, 3);
        object timestamp = this.safeTimestamp(trade, 1);
        object id = this.safeString(trade, 0);
        object price = this.safeString(trade, 4);
        object amount = this.safeString(trade, 5);
        object marketId = this.safeString(trade, 2);
        market = this.safeMarket(marketId, market);
        object fee = null;
        object feeCost = this.safeString(trade, 6);
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", getValue(market, "quote") },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", orderId },
            { "type", null },
            { "side", null },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchOrders
        * @description watches information on multiple orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        await this.authenticate();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object messageHash = add("orders:", symbol);
        object method = "ordersPending_subscribe";
        object trades = await this.watchMultipleSubscription(messageHash, method, symbol, false, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(trades, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(trades, symbol, since, limit, true);
    }

    public virtual void handleOrder(WebSocketClient client, object message, object subscription = null)
    {
        //
        // {
        //     "method": "ordersPending_update",
        //     "params": [
        //       1, // 1 = new, 2 = update 3 = cancel or execute
        //       {
        //         "id": 96433622651,
        //         "market": "LTC_USDT",
        //         "type": 1,
        //         "side": 2,
        //         "ctime": 1656092215.39375,
        //         "mtime": 1656092215.39375,
        //         "price": "25",
        //         "amount": "0.202",
        //         "taker_fee": "0.001",
        //         "maker_fee": "0.001",
        //         "left": "0.202",
        //         "deal_stock": "0",
        //         "deal_money": "0",
        //         "deal_fee": "0",
        //         "client_order_id": ''
        //       }
        //     ]
        //     "id": null
        // }
        //
        object parameters = this.safeValue(message, "params", new List<object>() {});
        object data = this.safeValue(parameters, 1);
        if (isTrue(isEqual(this.orders, null)))
        {
            object limit = this.safeInteger(this.options, "ordersLimit", 1000);
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        object stored = this.orders;
        object status = this.safeInteger(parameters, 0);
        object parsed = this.parseWsOrder(this.extend(data, new Dictionary<string, object>() {
            { "status", status },
        }));
        callDynamically(stored, "append", new object[] {parsed});
        object symbol = getValue(parsed, "symbol");
        object messageHash = add("orders:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.orders, messageHash});
    }

    public override object parseWsOrder(object order, object market = null)
    {
        //
        //   {
        //         "id": 96433622651,
        //         "market": "LTC_USDT",
        //         "type": 1,
        //         "side": 2, //1- sell 2-buy
        //         "ctime": 1656092215.39375,
        //         "mtime": 1656092215.39375,
        //         "price": "25",
        //         "amount": "0.202",
        //         "taker_fee": "0.001",
        //         "maker_fee": "0.001",
        //         "left": "0.202",
        //         "deal_stock": "0",
        //         "deal_money": "0",
        //         "deal_fee": "0",
        //         "activation_price": "40",
        //         "activation_condition": "lte",
        //         "client_order_id": ''
        //         "status": 1, // 1 = new, 2 = update 3 = cancel or execute
        //    }
        //
        object status = this.safeInteger(order, "status");
        object marketId = this.safeString(order, "market");
        market = this.safeMarket(marketId, market);
        object id = this.safeString(order, "id");
        object clientOrderId = this.omitZero(this.safeString(order, "client_order_id"));
        object price = this.safeString(order, "price");
        object filled = this.safeString(order, "deal_stock");
        object cost = this.safeString(order, "deal_money");
        object stopPrice = this.safeString(order, "activation_price");
        object rawType = this.safeString(order, "type");
        object type = this.parseWsOrderType(rawType);
        object amount = null;
        object remaining = null;
        if (isTrue(isEqual(type, "market")))
        {
            amount = this.safeString(order, "deal_stock");
            remaining = "0";
        } else
        {
            remaining = this.safeString(order, "left");
            amount = this.safeString(order, "amount");
        }
        object timestamp = this.safeTimestamp(order, "ctime");
        object lastTradeTimestamp = this.safeTimestamp(order, "mtime");
        object symbol = getValue(market, "symbol");
        object rawSide = this.safeInteger(order, "side");
        object side = ((bool) isTrue((isEqual(rawSide, 1)))) ? "sell" : "buy";
        object dealFee = this.safeString(order, "deal_fee");
        object fee = null;
        if (isTrue(!isEqual(dealFee, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", this.parseNumber(dealFee) },
                { "currency", getValue(market, "quote") },
            };
        }
        object unifiedStatus = null;
        if (isTrue(isTrue((isEqual(status, 1))) || isTrue((isEqual(status, 2)))))
        {
            unifiedStatus = "open";
        } else
        {
            if (isTrue(Precise.stringEquals(remaining, "0")))
            {
                unifiedStatus = "closed";
            } else
            {
                unifiedStatus = "canceled";
            }
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "symbol", symbol },
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", lastTradeTimestamp },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", stopPrice },
            { "triggerPrice", stopPrice },
            { "amount", amount },
            { "cost", cost },
            { "average", null },
            { "filled", filled },
            { "remaining", remaining },
            { "status", unifiedStatus },
            { "fee", fee },
            { "trades", null },
        }, market);
    }

    public virtual object parseWsOrderType(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "1", "limit" },
            { "2", "market" },
            { "202", "market" },
            { "3", "limit" },
            { "4", "market" },
            { "5", "limit" },
            { "6", "market" },
            { "8", "limit" },
            { "10", "market" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> watchBalance(object parameters = null)
    {
        /**
        * @method
        * @name whitebit#watchBalance
        * @description watch balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {str} [params.type] spot or contract if not provided this.options['defaultType'] is used
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object type = null;
        var typeparametersVariable = this.handleMarketTypeAndParams("watchBalance", null, parameters);
        type = ((IList<object>)typeparametersVariable)[0];
        parameters = ((IList<object>)typeparametersVariable)[1];
        object messageHash = "wallet:";
        object method = null;
        if (isTrue(isEqual(type, "spot")))
        {
            method = "balanceSpot_subscribe";
            messageHash = add(messageHash, "spot");
        } else
        {
            method = "balanceMargin_subscribe";
            messageHash = add(messageHash, "margin");
        }
        object currencies = new List<object>(((IDictionary<string,object>)this.currencies).Keys);
        return await this.watchPrivate(messageHash, method, currencies, parameters);
    }

    public virtual void handleBalance(WebSocketClient client, object message)
    {
        //
        //   {
        //       "method":"balanceSpot_update",
        //       "params":[
        //          {
        //             "LTC":{
        //                "available":"0.16587",
        //                "freeze":"0"
        //             }
        //          }
        //       ],
        //       "id":null
        //   }
        //
        object method = this.safeString(message, "method");
        object data = this.safeValue(message, "params");
        object balanceDict = this.safeValue(data, 0);
        ((IDictionary<string,object>)this.balance)["info"] = balanceDict;
        object keys = new List<object>(((IDictionary<string,object>)balanceDict).Keys);
        object currencyId = this.safeValue(keys, 0);
        object rawBalance = this.safeValue(balanceDict, currencyId);
        object code = this.safeCurrencyCode(currencyId);
        object account = this.account();
        ((IDictionary<string,object>)account)["free"] = this.safeString(rawBalance, "available");
        ((IDictionary<string,object>)account)["used"] = this.safeString(rawBalance, "freeze");
        ((IDictionary<string,object>)this.balance)[(string)code] = account;
        this.balance = this.safeBalance(this.balance);
        object messageHash = "wallet:";
        if (isTrue(isGreaterThanOrEqual(getIndexOf(method, "Spot"), 0)))
        {
            messageHash = add(messageHash, "spot");
        } else
        {
            messageHash = add(messageHash, "margin");
        }
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.balance, messageHash});
    }

    public async virtual Task<object> watchPublic(object messageHash, object method, object reqParams = null, object parameters = null)
    {
        reqParams ??= new List<object>();
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(this.urls, "api"), "ws");
        object id = this.nonce();
        object request = new Dictionary<string, object>() {
            { "id", id },
            { "method", method },
            { "params", reqParams },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public async virtual Task<object> watchMultipleSubscription(object messageHash, object method, object symbol, object isNested = null, object parameters = null)
    {
        isNested ??= false;
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object url = getValue(getValue(this.urls, "api"), "ws");
        object id = this.nonce();
        var client = this.safeValue(this.clients, url);
        object request = null;
        object marketIds = new List<object>() {};
        if (isTrue(isEqual(client as WebSocketClient, null)))
        {
            object subscription = new Dictionary<string, object>() {};
            object market = this.market(symbol);
            object marketId = getValue(market, "id");
            ((IDictionary<string,object>)subscription)[(string)marketId] = true;
            marketIds = new List<object>() {marketId};
            if (isTrue(isNested))
            {
                marketIds = new List<object>() {marketIds};
            }
            request = new Dictionary<string, object>() {
                { "id", id },
                { "method", method },
                { "params", marketIds },
            };
            object message = this.extend(request, parameters);
            return await this.watch(url, messageHash, message, method, subscription);
        } else
        {
            object subscription = this.safeValue(((WebSocketClient)client).subscriptions, method, new Dictionary<string, object>() {});
            object hasSymbolSubscription = true;
            object market = this.market(symbol);
            object marketId = getValue(market, "id");
            object isSubscribed = this.safeBool(subscription, marketId, false);
            if (!isTrue(isSubscribed))
            {
                ((IDictionary<string,object>)subscription)[(string)marketId] = true;
                hasSymbolSubscription = false;
            }
            if (isTrue(hasSymbolSubscription))
            {
                // already subscribed to this market(s)
                return await this.watch(url, messageHash, request, method, subscription);
            } else
            {
                // resubscribe
                object marketIdsNew = new List<object>() {};
                marketIdsNew = new List<object>(((IDictionary<string,object>)subscription).Keys);
                if (isTrue(isNested))
                {
                    marketIdsNew = new List<object>() {marketIdsNew};
                }
                object resubRequest = new Dictionary<string, object>() {
                    { "id", id },
                    { "method", method },
                    { "params", marketIdsNew },
                };
                if (isTrue(inOp(((WebSocketClient)client).subscriptions, method)))
                {

                }
                return await this.watch(url, messageHash, resubRequest, method, subscription);
            }
        }
    }

    public async virtual Task<object> watchPrivate(object messageHash, object method, object reqParams = null, object parameters = null)
    {
        reqParams ??= new List<object>();
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        await this.authenticate();
        object url = getValue(getValue(this.urls, "api"), "ws");
        object id = this.nonce();
        object request = new Dictionary<string, object>() {
            { "id", id },
            { "method", method },
            { "params", reqParams },
        };
        object message = this.extend(request, parameters);
        return await this.watch(url, messageHash, message, messageHash);
    }

    public async virtual Task<object> authenticate(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        this.checkRequiredCredentials();
        object url = getValue(getValue(this.urls, "api"), "ws");
        object messageHash = "authenticated";
        var client = this.client(url);
        var future = client.future("authenticated");
        object authenticated = this.safeValue(((WebSocketClient)client).subscriptions, messageHash);
        if (isTrue(isEqual(authenticated, null)))
        {
            object authToken = await this.v4PrivatePostProfileWebsocketToken();
            //
            //   {
            //       "websocket_token": "$2y$10$lxCvTXig/XrcTBFY1bdFseCKQmFTDtCpEzHNVnXowGplExFxPJp9y"
            //   }
            //
            object token = this.safeString(authToken, "websocket_token");
            object id = this.nonce();
            object request = new Dictionary<string, object>() {
                { "id", id },
                { "method", "authorize" },
                { "params", new List<object>() {token, "public"} },
            };
            object subscription = new Dictionary<string, object>() {
                { "id", id },
                { "method", this.handleAuthenticate },
            };
            try
            {
                await this.watch(url, messageHash, request, messageHash, subscription);
            } catch(Exception e)
            {

                ((Future)future).reject(e);
            }
        }
        return await (future as Exchange.Future);
    }

    public virtual object handleAuthenticate(WebSocketClient client, object message)
    {
        //
        //     { error: null, result: { status: "success" }, id: 1656084550 }
        //
        var future = getValue(client.futures, "authenticated");
        (future as Future).resolve(1);
        return message;
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         "error": { code: 1, message: "invalid argument" },
        //         "result": null,
        //         "id": 1656090882
        //     }
        //
        object error = this.safeValue(message, "error");
        try
        {
            if (isTrue(!isEqual(error, null)))
            {
                object code = this.safeString(message, "code");
                object feedback = add(add(this.id, " "), this.json(message));
                this.throwExactlyMatchedException(getValue(getValue(this.exceptions, "ws"), "exact"), code, feedback);
            }
        } catch(Exception e)
        {
            if (isTrue(e is AuthenticationError))
            {
                ((WebSocketClient)client).reject(e, "authenticated");
                if (isTrue(inOp(((WebSocketClient)client).subscriptions, "authenticated")))
                {

                }
                return false;
            }
        }
        return message;
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        //
        // auth
        //    { error: null, result: { status: "success" }, id: 1656084550 }
        //
        // pong
        //    { error: null, result: "pong", id: 0 }
        //
        if (!isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            return;
        }
        object result = this.safeString(message, "result");
        if (isTrue(isEqual(result, "pong")))
        {
            this.handlePong(client as WebSocketClient, message);
            return;
        }
        object id = this.safeInteger(message, "id");
        if (isTrue(!isEqual(id, null)))
        {
            this.handleSubscriptionStatus(client as WebSocketClient, message, id);
            return;
        }
        object methods = new Dictionary<string, object>() {
            { "market_update", this.handleTicker },
            { "trades_update", this.handleTrades },
            { "depth_update", this.handleOrderBook },
            { "candles_update", this.handleOHLCV },
            { "ordersPending_update", this.handleOrder },
            { "ordersExecuted_update", this.handleOrder },
            { "balanceSpot_update", this.handleBalance },
            { "balanceMargin_update", this.handleBalance },
            { "deals_update", this.handleMyTrades },
        };
        object topic = this.safeValue(message, "method");
        object method = this.safeValue(methods, topic);
        if (isTrue(!isEqual(method, null)))
        {
            DynamicInvoker.InvokeMethod(method, new object[] { client, message});
        }
    }

    public virtual void handleSubscriptionStatus(WebSocketClient client, object message, object id)
    {
        // not every method stores its subscription
        // as an object so we can't do indeById here
        object subs = ((WebSocketClient)client).subscriptions;
        object values = new List<object>(((IDictionary<string,object>)subs).Values);
        for (object i = 0; isLessThan(i, getArrayLength(values)); postFixIncrement(ref i))
        {
            object subscription = ((object)getValue(values, i));
            if (isTrue(!isEqual(subscription, true)))
            {
                object subId = this.safeInteger(subscription, "id");
                if (isTrue(isTrue((!isEqual(subId, null))) && isTrue((isEqual(subId, id)))))
                {
                    object method = this.safeValue(subscription, "method");
                    if (isTrue(!isEqual(method, null)))
                    {
                        DynamicInvoker.InvokeMethod(method, new object[] { client, message});
                        return;
                    }
                }
            }
        }
    }

    public virtual object handlePong(WebSocketClient client, object message)
    {
        client.lastPong = this.milliseconds();
        return message;
    }

    public override object ping(WebSocketClient client)
    {
        return new Dictionary<string, object>() {
            { "id", 0 },
            { "method", "ping" },
            { "params", new List<object>() {} },
        };
    }
}
