namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class defx { public defx(object args = null) : base(args) { } }
public partial class defx : ccxt.defx
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchBalance", true },
                { "watchTicker", true },
                { "watchTickers", true },
                { "watchBidsAsks", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", true },
                { "watchMyTrades", false },
                { "watchOrders", true },
                { "watchOrderBook", true },
                { "watchOrderBookForSymbols", true },
                { "watchOHLCV", true },
                { "watchOHLCVForSymbols", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "test", new Dictionary<string, object>() {
                    { "ws", new Dictionary<string, object>() {
                        { "public", "wss://stream.testnet.defx.com/pricefeed" },
                        { "private", "wss://ws.testnet.defx.com/user" },
                    } },
                } },
                { "api", new Dictionary<string, object>() {
                    { "ws", new Dictionary<string, object>() {
                        { "public", "wss://marketfeed.api.defx.com/pricefeed" },
                        { "private", "wss://userfeed.api.defx.com/user" },
                    } },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "listenKeyRefreshRate", 3540000 },
                { "ws", new Dictionary<string, object>() {
                    { "timeframes", new Dictionary<string, object>() {
                        { "1m", "1m" },
                        { "3m", "3m" },
                        { "5m", "5m" },
                        { "15m", "15m" },
                        { "30m", "30m" },
                        { "1h", "1h" },
                        { "2h", "2h" },
                        { "4h", "4h" },
                        { "12h", "12h" },
                        { "1d", "1d" },
                        { "1w", "1w" },
                        { "1M", "1M" },
                    } },
                } },
            } },
            { "streaming", new Dictionary<string, object>() {} },
            { "exceptions", new Dictionary<string, object>() {} },
        });
    }

    public async virtual Task<object> watchPublic(object topics, object messageHashes, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "SUBSCRIBE" },
            { "topics", topics },
        };
        object message = this.extend(request, parameters);
        return await this.watchMultiple(url, messageHashes, message, messageHashes);
    }

    public async virtual Task<object> unWatchPublic(object topics, object messageHashes, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object request = new Dictionary<string, object>() {
            { "method", "UNSUBSCRIBE" },
            { "topics", topics },
        };
        object message = this.extend(request, parameters);
        return await this.watchMultiple(url, messageHashes, message, messageHashes);
    }

    /**
     * @method
     * @name defx#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, close price, and the volume of a market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        object result = await this.watchOHLCVForSymbols(new List<object>() {new List<object>() {symbol, timeframe}}, since, limit, parameters);
        return getValue(getValue(result, symbol), timeframe);
    }

    /**
     * @method
     * @name defx#unWatchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async virtual Task<object> unWatchOHLCV(object symbol, object timeframe = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchOHLCVForSymbols(new List<object>() {new List<object>() {symbol, timeframe}}, parameters);
    }

    /**
     * @method
     * @name defx#watchOHLCVForSymbols
     * @description watches historical candlestick data containing the open, high, low, close price, and the volume of a market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[][]} symbolsAndTimeframes array of arrays containing unified symbols and timeframes to fetch OHLCV data for, example [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> watchOHLCVForSymbols(object symbolsAndTimeframes, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object symbolsLength = getArrayLength(symbolsAndTimeframes);
        if (isTrue(isTrue(isEqual(symbolsLength, 0)) || !isTrue(((getValue(symbolsAndTimeframes, 0) is IList<object>) || (getValue(symbolsAndTimeframes, 0).GetType().IsGenericType && getValue(symbolsAndTimeframes, 0).GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchOHLCVForSymbols() requires a an array of symbols and timeframes, like  [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]")) ;
        }
        await this.loadMarkets();
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbolsAndTimeframes)); postFixIncrement(ref i))
        {
            object symbolAndTimeframe = getValue(symbolsAndTimeframes, i);
            object marketId = this.safeString(symbolAndTimeframe, 0);
            object market = this.market(marketId);
            object tf = this.safeString(symbolAndTimeframe, 1);
            object interval = this.safeString(this.timeframes, tf, tf);
            ((IList<object>)topics).Add(add(add(add("symbol:", getValue(market, "id")), ":ohlc:"), interval));
            ((IList<object>)messageHashes).Add(add(add(add("candles:", interval), ":"), getValue(market, "symbol")));
        }
        var symboltimeframecandlesVariable = await this.watchPublic(topics, messageHashes, parameters);
        var symbol = ((IList<object>) symboltimeframecandlesVariable)[0];
        var timeframe = ((IList<object>) symboltimeframecandlesVariable)[1];
        var candles = ((IList<object>) symboltimeframecandlesVariable)[2];
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(candles, "getLimit", new object[] {symbol, limit});
        }
        object filtered = this.filterBySinceLimit(candles, since, limit, 0, true);
        return this.createOHLCVObject(symbol, timeframe, filtered);
    }

    /**
     * @method
     * @name defx#unWatchOHLCVForSymbols
     * @description unWatches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[][]} symbolsAndTimeframes array of arrays containing unified symbols and timeframes to fetch OHLCV data for, example [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> unWatchOHLCVForSymbols(object symbolsAndTimeframes, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object symbolsLength = getArrayLength(symbolsAndTimeframes);
        if (isTrue(isTrue(isEqual(symbolsLength, 0)) || !isTrue(((getValue(symbolsAndTimeframes, 0) is IList<object>) || (getValue(symbolsAndTimeframes, 0).GetType().IsGenericType && getValue(symbolsAndTimeframes, 0).GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " unWatchOHLCVForSymbols() requires a an array of symbols and timeframes, like  [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]")) ;
        }
        await this.loadMarkets();
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbolsAndTimeframes)); postFixIncrement(ref i))
        {
            object symbolAndTimeframe = getValue(symbolsAndTimeframes, i);
            object marketId = this.safeString(symbolAndTimeframe, 0);
            object market = this.market(marketId);
            object tf = this.safeString(symbolAndTimeframe, 1);
            object interval = this.safeString(this.timeframes, tf, tf);
            ((IList<object>)topics).Add(add(add(add("symbol:", getValue(market, "id")), ":ohlc:"), interval));
            ((IList<object>)messageHashes).Add(add(add(add("candles:", interval), ":"), getValue(market, "symbol")));
        }
        return await this.unWatchPublic(topics, messageHashes, parameters);
    }

    public virtual void handleOHLCV(WebSocketClient client, object message)
    {
        //
        // {
        //     "topic": "symbol:BTC_USDC:ohlc:3m",
        //     "event": "ohlc",
        //     "timestamp": 1730794277104,
        //     "data": {
        //         "symbol": "BTC_USDC",
        //         "window": "3m",
        //         "open": "57486.90000000",
        //         "high": "57486.90000000",
        //         "low": "57486.90000000",
        //         "close": "57486.90000000",
        //         "volume": "0.000",
        //         "quoteAssetVolume": "0.00000000",
        //         "takerBuyAssetVolume": "0.000",
        //         "takerBuyQuoteAssetVolume": "0.00000000",
        //         "numberOfTrades": 0,
        //         "start": 1730794140000,
        //         "end": 1730794320000,
        //         "isClosed": false
        //     }
        // }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "symbol");
        object market = this.market(marketId);
        object symbol = getValue(market, "symbol");
        object timeframe = this.safeString(data, "window");
        if (!isTrue((inOp(this.ohlcvs, symbol))))
        {
            ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = new Dictionary<string, object>() {};
        }
        if (!isTrue((inOp(getValue(this.ohlcvs, symbol), timeframe))))
        {
            object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
            var stored = new ArrayCacheByTimestamp(limit);
            ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))[(string)timeframe] = stored;
        }
        object ohlcv = getValue(getValue(this.ohlcvs, symbol), timeframe);
        object parsed = this.parseOHLCV(data);
        callDynamically(ohlcv, "append", new object[] {parsed});
        object messageHash = add(add(add("candles:", timeframe), ":"), symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {new List<object>() {symbol, timeframe, ohlcv}, messageHash});
    }

    /**
     * @method
     * @name defx#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object topic = add(add("symbol:", getValue(market, "id")), ":24hrTicker");
        object messageHash = add("ticker:", symbol);
        return await this.watchPublic(new List<object>() {topic}, new List<object>() {messageHash}, parameters);
    }

    /**
     * @method
     * @name defx#unWatchTicker
     * @description unWatches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.channel] the channel to subscribe to, tickers by default. Can be tickers, sprd-tickers, index-tickers, block-tickers
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async virtual Task<object> unWatchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchTickers(new List<object>() {symbol}, parameters);
    }

    /**
     * @method
     * @name defx#watchTickers
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} [symbols] unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":24hrTicker"));
            ((IList<object>)messageHashes).Add(add("ticker:", symbol));
        }
        await this.watchPublic(topics, messageHashes, parameters);
        return this.filterByArray(this.tickers, "symbol", symbols);
    }

    /**
     * @method
     * @name defx#unWatchTickers
     * @description unWatches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} [symbols] unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> unWatchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":24hrTicker"));
            ((IList<object>)messageHashes).Add(add("ticker:", symbol));
        }
        return await this.unWatchPublic(topics, messageHashes, parameters);
    }

    public virtual void handleTicker(WebSocketClient client, object message)
    {
        //
        // {
        //     "topic": "symbol:BTC_USDC:24hrTicker",
        //     "event": "24hrTicker",
        //     "timestamp": 1730862543095,
        //     "data": {
        //         "symbol": "BTC_USDC",
        //         "priceChange": "17114.70000000",
        //         "priceChangePercent": "29.77",
        //         "weightedAvgPrice": "6853147668",
        //         "lastPrice": "74378.90000000",
        //         "lastQty": "0.107",
        //         "bestBidPrice": "61987.60000000",
        //         "bestBidQty": "0.005",
        //         "bestAskPrice": "84221.60000000",
        //         "bestAskQty": "0.015",
        //         "openPrice": "57486.90000000",
        //         "highPrice": "88942.60000000",
        //         "lowPrice": "47364.20000000",
        //         "volume": "28.980",
        //         "quoteVolume": "1986042.19424035",
        //         "openTime": 1730776080000,
        //         "closeTime": 1730862540000,
        //         "openInterestBase": "67.130",
        //         "openInterestQuote": "5008005.40800000"
        //     }
        // }
        //
        this.handleBidAsk(client as WebSocketClient, message);
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object parsedTicker = this.parseTicker(data);
        object symbol = getValue(parsedTicker, "symbol");
        object timestamp = this.safeInteger(message, "timestamp");
        ((IDictionary<string,object>)parsedTicker)["timestamp"] = timestamp;
        ((IDictionary<string,object>)parsedTicker)["datetime"] = this.iso8601(timestamp);
        ((IDictionary<string,object>)this.tickers)[(string)symbol] = parsedTicker;
        object messageHash = add("ticker:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {parsedTicker, messageHash});
    }

    /**
     * @method
     * @name defx#watchBidsAsks
     * @description watches best bid & ask for symbols
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchBidsAsks(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":24hrTicker"));
            ((IList<object>)messageHashes).Add(add("bidask:", symbol));
        }
        await this.watchPublic(topics, messageHashes, parameters);
        return this.filterByArray(this.bidsasks, "symbol", symbols);
    }

    public virtual void handleBidAsk(WebSocketClient client, object message)
    {
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object parsedTicker = this.parseWsBidAsk(data);
        object symbol = getValue(parsedTicker, "symbol");
        object timestamp = this.safeInteger(message, "timestamp");
        ((IDictionary<string,object>)parsedTicker)["timestamp"] = timestamp;
        ((IDictionary<string,object>)parsedTicker)["datetime"] = this.iso8601(timestamp);
        ((IDictionary<string,object>)this.bidsasks)[(string)symbol] = parsedTicker;
        object messageHash = add("bidask:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {parsedTicker, messageHash});
    }

    public virtual object parseWsBidAsk(object ticker, object market = null)
    {
        object marketId = this.safeString(ticker, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = this.safeString(market, "symbol");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "ask", this.safeString(ticker, "bestAskPrice") },
            { "askVolume", this.safeString(ticker, "bestAskQty") },
            { "bid", this.safeString(ticker, "bestBidPrice") },
            { "bidVolume", this.safeString(ticker, "bestBidQty") },
            { "info", ticker },
        }, market);
    }

    /**
     * @method
     * @name defx#watchTrades
     * @description watches information on multiple trades made in a market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trade structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.watchTradesForSymbols(new List<object>() {symbol}, since, limit, parameters);
    }

    /**
     * @method
     * @name defx#unWatchTrades
     * @description unWatches from the stream channel
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> unWatchTrades(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchTradesForSymbols(new List<object>() {symbol}, parameters);
    }

    /**
     * @method
     * @name defx#watchTradesForSymbols
     * @description watches information on multiple trades made in a market
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} symbols unified symbol of the market to fetch trades for
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trade structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTradesForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchTradesForSymbols() requires a non-empty array of symbols")) ;
        }
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":trades"));
            ((IList<object>)messageHashes).Add(add("trade:", symbol));
        }
        object trades = await this.watchPublic(topics, messageHashes, parameters);
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    /**
     * @method
     * @name defx#unWatchTradesForSymbols
     * @description unWatches from the stream channel
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} symbols unified symbol of the market to fetch trades for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> unWatchTradesForSymbols(object symbols, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " unWatchTradesForSymbols() requires a non-empty array of symbols")) ;
        }
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":trades"));
            ((IList<object>)messageHashes).Add(add("trade:", symbol));
        }
        return await this.unWatchPublic(topics, messageHashes, parameters);
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        // {
        //     "topic": "symbol:SOL_USDC:trades",
        //     "event": "trades",
        //     "timestamp": 1730967426331,
        //     "data": {
        //         "buyerMaker": true,
        //         "price": "188.38700000",
        //         "qty": "1.00",
        //         "symbol": "SOL_USDC",
        //         "timestamp": 1730967426328
        //     }
        // }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object parsedTrade = this.parseTrade(data);
        object symbol = getValue(parsedTrade, "symbol");
        if (!isTrue((inOp(this.trades, symbol))))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            var stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object trades = getValue(this.trades, symbol);
        callDynamically(trades, "append", new object[] {parsedTrade});
        object messageHash = add("trade:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {trades, messageHash});
    }

    /**
     * @method
     * @name defx#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.watchOrderBookForSymbols(new List<object>() {symbol}, limit, parameters);
    }

    /**
     * @method
     * @name defx#unWatchOrderBook
     * @description unWatches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string} symbol unified array of symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> unWatchOrderBook(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchOrderBookForSymbols(new List<object>() {symbol}, parameters);
    }

    /**
     * @method
     * @name defx#watchOrderBookForSymbols
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} symbols unified array of symbols
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBookForSymbols(object symbols, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchOrderBookForSymbols() requires a non-empty array of symbols")) ;
        }
        symbols = this.marketSymbols(symbols);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":depth:20:0.001"));
            ((IList<object>)messageHashes).Add(add("orderbook:", symbol));
        }
        object orderbook = await this.watchPublic(topics, messageHashes, parameters);
        return (orderbook as IOrderBook).limit();
    }

    /**
     * @method
     * @name defx#unWatchOrderBookForSymbols
     * @description unWatches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://www.postman.com/defxcode/defx-public-apis/collection/667939a1b5d8069c13d614e9
     * @param {string[]} symbols unified array of symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> unWatchOrderBookForSymbols(object symbols, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " unWatchOrderBookForSymbols() requires a non-empty array of symbols")) ;
        }
        symbols = this.marketSymbols(symbols);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add(add("symbol:", marketId), ":depth:20:0.001"));
            ((IList<object>)messageHashes).Add(add("orderbook:", symbol));
        }
        return await this.unWatchPublic(topics, messageHashes, parameters);
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // {
        //     "topic": "symbol:SOL_USDC:depth:20:0.01",
        //     "event": "depth",
        //     "timestamp": 1731030695319,
        //     "data": {
        //         "symbol": "SOL_USDC",
        //         "timestamp": 1731030695319,
        //         "lastTradeTimestamp": 1731030275258,
        //         "level": "20",
        //         "slab": "0.01",
        //         "bids": [
        //             {
        //                 "price": "198.27000000",
        //                 "qty": "1.52"
        //             }
        //         ],
        //         "asks": [
        //             {
        //                 "price": "198.44000000",
        //                 "qty": "6.61"
        //             }
        //         ]
        //     }
        // }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "symbol");
        object market = this.market(marketId);
        object symbol = getValue(market, "symbol");
        object timestamp = this.safeInteger(data, "timestamp");
        object snapshot = this.parseOrderBook(data, symbol, timestamp, "bids", "asks", "price", "qty");
        if (!isTrue((inOp(this.orderbooks, symbol))))
        {
            object ob = this.orderBook(snapshot);
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = ob;
        }
        object orderbook = getValue(this.orderbooks, symbol);
        (orderbook as IOrderBook).reset(snapshot);
        object messageHash = add("orderbook:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {orderbook, messageHash});
    }

    public async virtual Task keepAliveListenKey(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object listenKey = this.safeString(this.options, "listenKey");
        if (isTrue(isEqual(listenKey, null)))
        {
            // A network error happened: we can't renew a listen key that does not exist.
            return;
        }
        try
        {
            await this.v1PrivatePutApiUsersSocketListenKeysListenKey(new Dictionary<string, object>() {
                { "listenKey", listenKey },
            }); // extend the expiry
        } catch(Exception error)
        {
            object url = add(add(getValue(getValue(getValue(this.urls, "api"), "ws"), "private"), "?listenKey="), listenKey);
            var client = this.client(url);
            object messageHashes = new List<object>(((IDictionary<string, ccxt.Exchange.Future>)client.futures).Keys);
            for (object j = 0; isLessThan(j, getArrayLength(messageHashes)); postFixIncrement(ref j))
            {
                object messageHash = getValue(messageHashes, j);
                ((WebSocketClient)client).reject(error, messageHash);
            }
            ((IDictionary<string,object>)this.options)["listenKey"] = null;
            ((IDictionary<string,object>)this.options)["lastAuthenticatedTime"] = 0;
            return;
        }
        // whether or not to schedule another listenKey keepAlive request
        object listenKeyRefreshRate = this.safeInteger(this.options, "listenKeyRefreshRate", 3540000);
        this.delay(listenKeyRefreshRate,  this.keepAliveListenKey, new object[] { parameters});
    }

    public async virtual Task authenticate(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object time = this.milliseconds();
        object lastAuthenticatedTime = this.safeInteger(this.options, "lastAuthenticatedTime", 0);
        object listenKeyRefreshRate = this.safeInteger(this.options, "listenKeyRefreshRate", 3540000); // 1 hour
        if (isTrue(isGreaterThan(subtract(time, lastAuthenticatedTime), listenKeyRefreshRate)))
        {
            object response = await this.v1PrivatePostApiUsersSocketListenKeys();
            ((IDictionary<string,object>)this.options)["listenKey"] = this.safeString(response, "listenKey");
            ((IDictionary<string,object>)this.options)["lastAuthenticatedTime"] = time;
            this.delay(listenKeyRefreshRate,  this.keepAliveListenKey, new object[] { parameters});
        }
    }

    /**
     * @method
     * @name defx#watchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://www.postman.com/defxcode/defx-public-apis/ws-raw-request/667939b2f00f79161bb47809
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
     */
    public async override Task<object> watchBalance(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object baseUrl = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object messageHash = "WALLET_BALANCE_UPDATE";
        object url = add(add(baseUrl, "?listenKey="), getValue(this.options, "listenKey"));
        return await this.watch(url, messageHash, null, messageHash);
    }

    public virtual void handleBalance(WebSocketClient client, object message)
    {
        //
        // {
        //     "event": "WALLET_BALANCE_UPDATE",
        //     "timestamp": 1711015961397,
        //     "data": {
        //         "asset": "USDC", "balance": "27.64712963"
        //     }
        // }
        //
        object messageHash = this.safeString(message, "event");
        object data = this.safeDict(message, "data", new List<object>() {});
        object timestamp = this.safeInteger(message, "timestamp");
        if (isTrue(isEqual(this.balance, null)))
        {
            this.balance = new Dictionary<string, object>() {};
        }
        ((IDictionary<string,object>)this.balance)["info"] = data;
        ((IDictionary<string,object>)this.balance)["timestamp"] = timestamp;
        ((IDictionary<string,object>)this.balance)["datetime"] = this.iso8601(timestamp);
        object currencyId = this.safeString(data, "asset");
        object code = this.safeCurrencyCode(currencyId);
        object account = ((bool) isTrue((inOp(this.balance, code)))) ? getValue(this.balance, code) : this.account();
        ((IDictionary<string,object>)account)["free"] = this.safeString(data, "balance");
        ((IDictionary<string,object>)this.balance)[(string)code] = account;
        this.balance = this.safeBalance(this.balance);
        callDynamically(client as WebSocketClient, "resolve", new object[] {this.balance, messageHash});
    }

    /**
     * @method
     * @name defx#watchOrders
     * @description watches information on multiple orders made by the user
     * @see https://www.postman.com/defxcode/defx-public-apis/ws-raw-request/667939b2f00f79161bb47809
     * @param {string} [symbol] unified market symbol of the market the orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        object baseUrl = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object messageHash = "orders";
        if (isTrue(!isEqual(symbol, null)))
        {
            object market = this.market(symbol);
            messageHash = add(messageHash, add(":", getValue(market, "symbol")));
        }
        object url = add(add(baseUrl, "?listenKey="), getValue(this.options, "listenKey"));
        object orders = await this.watch(url, messageHash, null, messageHash);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }

    public virtual void handleOrder(WebSocketClient client, object message)
    {
        //
        // {
        //     "event": "ORDER_UPDATE",
        //     "timestamp": 1731417961446,
        //     "data": {
        //         "orderId": "766738557656630928",
        //         "symbol": "SOL_USDC",
        //         "side": "SELL",
        //         "type": "MARKET",
        //         "status": "FILLED",
        //         "clientOrderId": "0193208d-717b-7811-a80e-c036e220ad9b",
        //         "reduceOnly": false,
        //         "postOnly": false,
        //         "timeInForce": "GTC",
        //         "isTriggered": false,
        //         "createdAt": "2024-11-12T13:26:00.829Z",
        //         "updatedAt": "2024-11-12T13:26:01.436Z",
        //         "avgPrice": "209.60000000",
        //         "cumulativeQuote": "104.80000000",
        //         "totalFee": "0.05764000",
        //         "executedQty": "0.50",
        //         "origQty": "0.50",
        //         "role": "TAKER",
        //         "pnl": "0.00000000",
        //         "lastFillPnL": "0.00000000",
        //         "lastFillPrice": "209.60000000",
        //         "lastFillQty": "0.50",
        //         "linkedOrderParentType": null,
        //         "workingType": null
        //     }
        // }
        //
        object channel = "orders";
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        if (isTrue(isEqual(this.orders, null)))
        {
            object limit = this.safeInteger(this.options, "ordersLimit", 1000);
            this.orders = new ArrayCacheBySymbolById(limit);
        }
        object orders = this.orders;
        object parsedOrder = this.parseOrder(data);
        callDynamically(orders, "append", new object[] {parsedOrder});
        object messageHash = add(add(channel, ":"), getValue(parsedOrder, "symbol"));
        callDynamically(client as WebSocketClient, "resolve", new object[] {orders, channel});
        callDynamically(client as WebSocketClient, "resolve", new object[] {orders, messageHash});
    }

    /**
     * @method
     * @name defx#watchPositions
     * @description watch all open positions
     * @see https://www.postman.com/defxcode/defx-public-apis/ws-raw-request/667939b2f00f79161bb47809
     * @param {string[]|undefined} symbols list of unified market symbols
     * @param {number} [since] since timestamp
     * @param {number} [limit] limit
     * @param {object} params extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
     */
    public async override Task<object> watchPositions(object symbols = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        await this.authenticate();
        symbols = this.marketSymbols(symbols);
        object baseUrl = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object channel = "positions";
        object url = add(add(baseUrl, "?listenKey="), getValue(this.options, "listenKey"));
        object newPosition = null;
        if (isTrue(!isEqual(symbols, null)))
        {
            object messageHashes = new List<object>() {};
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                ((IList<object>)messageHashes).Add(add(add(channel, ":"), symbol));
            }
            newPosition = await this.watchMultiple(url, messageHashes, null, messageHashes);
        } else
        {
            newPosition = await this.watch(url, channel, null, channel);
        }
        if (isTrue(this.newUpdates))
        {
            return newPosition;
        }
        return this.filterBySymbolsSinceLimit(this.positions, symbols, since, limit, true);
    }

    public virtual void handlePositions(WebSocketClient client, object message)
    {
        //
        // {
        //     "event": "POSITION_UPDATE",
        //     "timestamp": 1731417961456,
        //     "data": {
        //         "positionId": "0193208d-735d-7fe9-90bd-8bc6d6bc1eda",
        //         "createdAt": 1289847904328,
        //         "symbol": "SOL_USDC",
        //         "positionSide": "SHORT",
        //         "entryPrice": "209.60000000",
        //         "quantity": "0.50",
        //         "status": "ACTIVE",
        //         "marginAsset": "USDC",
        //         "marginAmount": "15.17475649",
        //         "realizedPnL": "0.00000000"
        //     }
        // }
        //
        object channel = "positions";
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        if (isTrue(isEqual(this.positions, null)))
        {
            this.positions = new ArrayCacheBySymbolById();
        }
        object cache = this.positions;
        object parsedPosition = this.parsePosition(data);
        object timestamp = this.safeInteger(message, "timestamp");
        ((IDictionary<string,object>)parsedPosition)["timestamp"] = timestamp;
        ((IDictionary<string,object>)parsedPosition)["datetime"] = this.iso8601(timestamp);
        callDynamically(cache, "append", new object[] {parsedPosition});
        object messageHash = add(add(channel, ":"), getValue(parsedPosition, "symbol"));
        callDynamically(client as WebSocketClient, "resolve", new object[] {new List<object>() {parsedPosition}, channel});
        callDynamically(client as WebSocketClient, "resolve", new object[] {new List<object>() {parsedPosition}, messageHash});
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        object error = this.safeString(message, "code");
        if (isTrue(!isEqual(error, null)))
        {
            object errorMsg = this.safeString(message, "msg");
            throw new ExchangeError ((string)add(add(this.id, " "), errorMsg)) ;
        }
        object eventVar = this.safeString(message, "event");
        if (isTrue(!isEqual(eventVar, null)))
        {
            object methods = new Dictionary<string, object>() {
                { "ohlc", this.handleOHLCV },
                { "24hrTicker", this.handleTicker },
                { "trades", this.handleTrades },
                { "depth", this.handleOrderBook },
                { "WALLET_BALANCE_UPDATE", this.handleBalance },
                { "ORDER_UPDATE", this.handleOrder },
                { "POSITION_UPDATE", this.handlePositions },
            };
            object exacMethod = this.safeValue(methods, eventVar);
            if (isTrue(!isEqual(exacMethod, null)))
            {
                DynamicInvoker.InvokeMethod(exacMethod, new object[] { client, message});
            }
        }
    }
}
