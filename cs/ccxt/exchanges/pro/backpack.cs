namespace ccxt.pro;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


public partial class backpack { public backpack(object args = null) : base(args) { } }
public partial class backpack : ccxt.backpack
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "has", new Dictionary<string, object>() {
                { "ws", true },
                { "watchBalance", false },
                { "watchBidsAsks", true },
                { "watchMyTrades", false },
                { "watchOHLCV", true },
                { "watchOHLCVForSymbols", true },
                { "watchOrderBook", true },
                { "watchOrderBookForSymbols", true },
                { "watchOrders", true },
                { "watchPositions", true },
                { "watchTicker", true },
                { "watchTickers", true },
                { "watchTrades", true },
                { "watchTradesForSymbols", true },
                { "unwatchBidsAsks", true },
                { "unwatchOHLCV", true },
                { "unwatchOHLCVForSymbols", true },
                { "unwatchOrderBook", true },
                { "unwatchOrderBookForSymbols", true },
                { "unwatchTicker", true },
                { "unwatchTickers", true },
                { "unWatchTrades", true },
                { "unWatchTradesForSymbols", true },
                { "unWatchOrders", true },
                { "unWatchPositions", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "api", new Dictionary<string, object>() {
                    { "ws", new Dictionary<string, object>() {
                        { "public", "wss://ws.backpack.exchange" },
                        { "private", "wss://ws.backpack.exchange" },
                    } },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "timeframes", new Dictionary<string, object>() {} },
            } },
            { "streaming", new Dictionary<string, object>() {
                { "ping", this.ping },
                { "keepAlive", 119000 },
            } },
        });
    }

    public async virtual Task<object> watchPublic(object topics, object messageHashes, object parameters = null, object unwatch = null)
    {
        parameters ??= new Dictionary<string, object>();
        unwatch ??= false;
        await this.loadMarkets();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "public");
        object method = ((bool) isTrue(unwatch)) ? "UNSUBSCRIBE" : "SUBSCRIBE";
        object request = new Dictionary<string, object>() {
            { "method", method },
            { "params", topics },
        };
        object message = this.deepExtend(request, parameters);
        if (isTrue(unwatch))
        {
            this.handleUnsubscriptions(url, messageHashes, message);
            return null;
        }
        return await this.watchMultiple(url, messageHashes, message, messageHashes);
    }

    public async virtual Task<object> watchPrivate(object topics, object messageHashes, object parameters = null, object unwatch = null)
    {
        parameters ??= new Dictionary<string, object>();
        unwatch ??= false;
        this.checkRequiredCredentials();
        object url = getValue(getValue(getValue(this.urls, "api"), "ws"), "private");
        object instruction = "subscribe";
        object ts = ((object)this.nonce()).ToString();
        object method = ((bool) isTrue(unwatch)) ? "UNSUBSCRIBE" : "SUBSCRIBE";
        object recvWindow = this.safeString2(this.options, "recvWindow", "X-Window", "5000");
        object payload = add(add(add(add(add(add("instruction=", instruction), "&"), "timestamp="), ts), "&window="), recvWindow);
        object secretBytes = this.base64ToBinary(this.secret);
        object seed = this.arraySlice(secretBytes, 0, 32);
        object signature = eddsa(this.encode(payload), seed, ed25519);
        object request = new Dictionary<string, object>() {
            { "method", method },
            { "params", topics },
            { "signature", new List<object>() {this.apiKey, signature, ts, recvWindow} },
        };
        object message = this.deepExtend(request, parameters);
        if (isTrue(unwatch))
        {
            this.handleUnsubscriptions(url, messageHashes, message);
            return null;
        }
        return await this.watchMultiple(url, messageHashes, message, messageHashes);
    }

    public virtual void handleUnsubscriptions(object url, object messageHashes, object message)
    {
        var client = this.client(url);
        this.watchMultiple(url, messageHashes, message, messageHashes);
        for (object i = 0; isLessThan(i, getArrayLength(messageHashes)); postFixIncrement(ref i))
        {
            object messageHash = getValue(messageHashes, i);
            object subMessageHash = ((string)messageHash).Replace((string)"unsubscribe:", (string)"");
            this.cleanUnsubscription(client as WebSocketClient, subMessageHash, messageHash);
            if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "ticker"), 0)))
            {
                object symbol = ((string)messageHash).Replace((string)"unsubscribe:ticker:", (string)"");
                if (isTrue(inOp(this.tickers, symbol)))
                {
                    ((IDictionary<string,object>)this.tickers).Remove((string)symbol);
                }
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "bidask"), 0)))
            {
                object symbol = ((string)messageHash).Replace((string)"unsubscribe:bidask:", (string)"");
                if (isTrue(inOp(this.bidsasks, symbol)))
                {
                    ((IDictionary<string,object>)this.bidsasks).Remove((string)symbol);
                }
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "candles"), 0)))
            {
                object splitHashes = ((string)messageHash).Split(new [] {((string)":")}, StringSplitOptions.None).ToList<object>();
                object symbol = this.safeString(splitHashes, 2);
                object timeframe = this.safeString(splitHashes, 3);
                if (isTrue(inOp(this.ohlcvs, symbol)))
                {
                    if (isTrue(inOp(getValue(this.ohlcvs, symbol), timeframe)))
                    {
                        ((IDictionary<string,object>)getValue(this.ohlcvs, symbol)).Remove((string)timeframe);
                    }
                }
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "orderbook"), 0)))
            {
                object symbol = ((string)messageHash).Replace((string)"unsubscribe:orderbook:", (string)"");
                if (isTrue(inOp(this.orderbooks, symbol)))
                {
                    ((IDictionary<string,object>)this.orderbooks).Remove((string)symbol);
                }
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "trades"), 0)))
            {
                object symbol = ((string)messageHash).Replace((string)"unsubscribe:trades:", (string)"");
                if (isTrue(inOp(this.trades, symbol)))
                {
                    ((IDictionary<string,object>)this.trades).Remove((string)symbol);
                }
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "orders"), 0)))
            {
                if (isTrue(isEqual(messageHash, "unsubscribe:orders")))
                {
                    object cache = this.orders;
                    object keys = new List<object>(((IDictionary<string,object>)cache).Keys);
                    for (object j = 0; isLessThan(j, getArrayLength(keys)); postFixIncrement(ref j))
                    {
                        object symbol = getValue(keys, j);
                        ((IDictionary<string,object>)this.orders).Remove((string)symbol);
                    }
                } else
                {
                    object symbol = ((string)messageHash).Replace((string)"unsubscribe:orders:", (string)"");
                    if (isTrue(inOp(this.orders, symbol)))
                    {
                        ((IDictionary<string,object>)this.orders).Remove((string)symbol);
                    }
                }
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(messageHash, "positions"), 0)))
            {
                if (isTrue(isEqual(messageHash, "unsubscribe:positions")))
                {
                    object cache = this.positions;
                    object keys = new List<object>(((IDictionary<string,object>)cache).Keys);
                    for (object j = 0; isLessThan(j, getArrayLength(keys)); postFixIncrement(ref j))
                    {
                        object symbol = getValue(keys, j);
                        ((IDictionary<string,object>)this.positions).Remove((string)symbol);
                    }
                } else
                {
                    object symbol = ((string)messageHash).Replace((string)"unsubscribe:positions:", (string)"");
                    if (isTrue(inOp(this.positions, symbol)))
                    {
                        ((IDictionary<string,object>)this.positions).Remove((string)symbol);
                    }
                }
            }
        }
    }

    /**
     * @method
     * @name backpack#watchTicker
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Ticker
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        symbol = getValue(market, "symbol");
        object topic = add(add("ticker", "."), getValue(market, "id"));
        object messageHash = add(add("ticker", ":"), symbol);
        return await this.watchPublic(new List<object>() {topic}, new List<object>() {messageHash}, parameters);
    }

    /**
     * @method
     * @name backpack#unWatchTicker
     * @description unWatches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Ticker
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> unWatchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchTickers(new List<object>() {symbol}, parameters);
    }

    /**
     * @method
     * @name backpack#watchTickers
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Ticker
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object messageHashes = new List<object>() {};
        object topics = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)messageHashes).Add(add("ticker:", symbol));
            ((IList<object>)topics).Add(add("ticker.", marketId));
        }
        await this.watchPublic(topics, messageHashes, parameters);
        return this.filterByArray(this.tickers, "symbol", symbols);
    }

    /**
     * @method
     * @name backpack#unWatchTickers
     * @description watches a price ticker, a statistical calculation with the information calculated over the past 24 hours for all markets of a specific list
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Ticker
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> unWatchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add("ticker.", marketId));
            ((IList<object>)messageHashes).Add(add("unsubscribe:ticker:", symbol));
        }
        return await this.watchPublic(topics, messageHashes, parameters, true);
    }

    public virtual void handleTicker(WebSocketClient client, object message)
    {
        //
        //     {
        //         data: {
        //             E: '1754176123312507',
        //             V: '19419526.742584',
        //             c: '3398.57',
        //             e: 'ticker',
        //             h: '3536.65',
        //             l: '3371.8',
        //             n: 17152,
        //             o: '3475.45',
        //             s: 'ETH_USDC',
        //             v: '5573.5827'
        //         },
        //         stream: 'bookTicker.ETH_USDC'
        //     }
        //
        object ticker = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(ticker, "s");
        object market = this.safeMarket(marketId);
        object symbol = this.safeSymbol(marketId, market);
        object parsedTicker = this.parseWsTicker(ticker, market);
        object messageHash = add(add("ticker", ":"), symbol);
        ((IDictionary<string,object>)this.tickers)[(string)symbol] = parsedTicker;
        callDynamically(client as WebSocketClient, "resolve", new object[] {parsedTicker, messageHash});
    }

    public virtual object parseWsTicker(object ticker, object market = null)
    {
        //
        //     {
        //         E: '1754178406415232',
        //         V: '19303818.6923',
        //         c: '3407.54',
        //         e: 'ticker',
        //         h: '3536.65',
        //         l: '3369.18',
        //         n: 17272,
        //         o: '3481.71',
        //         s: 'ETH_USDC',
        //         v: '5542.3911'
        //     }
        //
        object microseconds = this.safeInteger(ticker, "E");
        object timestamp = this.parseToInt(divide(microseconds, 1000));
        object marketId = this.safeString(ticker, "s");
        market = this.safeMarket(marketId, market);
        object symbol = this.safeSymbol(marketId, market);
        object last = this.safeString(ticker, "c");
        object open = this.safeString(ticker, "o");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeNumber(ticker, "h") },
            { "low", this.safeNumber(ticker, "l") },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", open },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "v") },
            { "quoteVolume", this.safeString(ticker, "V") },
            { "info", ticker },
        }, market);
    }

    /**
     * @method
     * @name backpack#watchBidsAsks
     * @description watches best bid & ask for symbols
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Book-ticker
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchBidsAsks(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add("bookTicker.", marketId));
            ((IList<object>)messageHashes).Add(add("bidask:", symbol));
        }
        await this.watchPublic(topics, messageHashes, parameters);
        return this.filterByArray(this.bidsasks, "symbol", symbols);
    }

    /**
     * @method
     * @name backpack#unWatchBidsAsks
     * @description unWatches best bid & ask for symbols
     * @param {string[]} symbols unified symbol of the market to fetch the ticker for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async virtual Task<object> unWatchBidsAsks(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add("bookTicker.", marketId));
            ((IList<object>)messageHashes).Add(add("unsubscribe:bidask:", symbol));
        }
        return await this.watchPublic(topics, messageHashes, parameters, true);
    }

    public virtual void handleBidAsk(WebSocketClient client, object message)
    {
        //
        //     {
        //         data: {
        //             A: '0.4087',
        //             B: '0.0020',
        //             E: '1754517402450016',
        //             T: '1754517402449064',
        //             a: '3667.50',
        //             b: '3667.49',
        //             e: 'bookTicker',
        //             s: 'ETH_USDC',
        //             u: 1328288557
        //         },
        //         stream: 'bookTicker.ETH_USDC'
        //     }
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "s");
        object market = this.safeMarket(marketId);
        object symbol = this.safeSymbol(marketId, market);
        object parsedBidAsk = this.parseWsBidAsk(data, market);
        object messageHash = add(add("bidask", ":"), symbol);
        ((IDictionary<string,object>)this.bidsasks)[(string)symbol] = parsedBidAsk;
        callDynamically(client as WebSocketClient, "resolve", new object[] {parsedBidAsk, messageHash});
    }

    public virtual object parseWsBidAsk(object ticker, object market = null)
    {
        //
        //     {
        //         A: '0.4087',
        //         B: '0.0020',
        //         E: '1754517402450016',
        //         T: '1754517402449064',
        //         a: '3667.50',
        //         b: '3667.49',
        //         e: 'bookTicker',
        //         s: 'ETH_USDC',
        //         u: 1328288557
        //     }
        //
        object marketId = this.safeString(ticker, "s");
        market = this.safeMarket(marketId, market);
        object symbol = this.safeString(market, "symbol");
        object microseconds = this.safeInteger(ticker, "E");
        object timestamp = this.parseToInt(divide(microseconds, 1000));
        object ask = this.safeString(ticker, "a");
        object askVolume = this.safeString(ticker, "A");
        object bid = this.safeString(ticker, "b");
        object bidVolume = this.safeString(ticker, "B");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "ask", ask },
            { "askVolume", askVolume },
            { "bid", bid },
            { "bidVolume", bidVolume },
            { "info", ticker },
        }, market);
    }

    /**
     * @method
     * @name backpack#watchOHLCV
     * @description watches historical candlestick data containing the open, high, low, close price, and the volume of a market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/K-Line
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> watchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        object result = await this.watchOHLCVForSymbols(new List<object>() {new List<object>() {symbol, timeframe}}, since, limit, parameters);
        return getValue(getValue(result, symbol), timeframe);
    }

    /**
     * @method
     * @name backpack#unWatchOHLCV
     * @description watches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/K-Line
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async virtual Task<object> unWatchOHLCV(object symbol, object timeframe = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchOHLCVForSymbols(new List<object>() {new List<object>() {symbol, timeframe}}, parameters);
    }

    /**
     * @method
     * @name backpack#watchOHLCVForSymbols
     * @description watches historical candlestick data containing the open, high, low, close price, and the volume of a market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/K-Line
     * @param {string[][]} symbolsAndTimeframes array of arrays containing unified symbols and timeframes to fetch OHLCV data for, example [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> watchOHLCVForSymbols(object symbolsAndTimeframes, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object symbolsLength = getArrayLength(symbolsAndTimeframes);
        if (isTrue(isTrue(isEqual(symbolsLength, 0)) || !isTrue(((getValue(symbolsAndTimeframes, 0) is IList<object>) || (getValue(symbolsAndTimeframes, 0).GetType().IsGenericType && getValue(symbolsAndTimeframes, 0).GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchOHLCVForSymbols() requires a an array of symbols and timeframes, like  ['ETH/USDC', '1m']")) ;
        }
        await this.loadMarkets();
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbolsAndTimeframes)); postFixIncrement(ref i))
        {
            object symbolAndTimeframe = getValue(symbolsAndTimeframes, i);
            object marketId = this.safeString(symbolAndTimeframe, 0);
            object market = this.market(marketId);
            object tf = this.safeString(symbolAndTimeframe, 1);
            object interval = this.safeString(this.timeframes, tf, tf);
            ((IList<object>)topics).Add(add(add(add("kline.", interval), "."), getValue(market, "id")));
            ((IList<object>)messageHashes).Add(add(add(add("candles:", getValue(market, "symbol")), ":"), interval));
        }
        var symboltimeframecandlesVariable = await this.watchPublic(topics, messageHashes, parameters);
        var symbol = ((IList<object>) symboltimeframecandlesVariable)[0];
        var timeframe = ((IList<object>) symboltimeframecandlesVariable)[1];
        var candles = ((IList<object>) symboltimeframecandlesVariable)[2];
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(candles, "getLimit", new object[] {symbol, limit});
        }
        object filtered = this.filterBySinceLimit(candles, since, limit, 0, true);
        return this.createOHLCVObject(symbol, timeframe, filtered);
    }

    /**
     * @method
     * @name backpack#unWatchOHLCVForSymbols
     * @description unWatches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/K-Line
     * @param {string[][]} symbolsAndTimeframes array of arrays containing unified symbols and timeframes to fetch OHLCV data for, example [['BTC/USDT', '1m'], ['LTC/USDT', '5m']]
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> unWatchOHLCVForSymbols(object symbolsAndTimeframes, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object symbolsLength = getArrayLength(symbolsAndTimeframes);
        if (isTrue(isTrue(isEqual(symbolsLength, 0)) || !isTrue(((getValue(symbolsAndTimeframes, 0) is IList<object>) || (getValue(symbolsAndTimeframes, 0).GetType().IsGenericType && getValue(symbolsAndTimeframes, 0).GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>)))))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " unWatchOHLCVForSymbols() requires a an array of symbols and timeframes, like  ['ETH/USDC', '1m']")) ;
        }
        await this.loadMarkets();
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbolsAndTimeframes)); postFixIncrement(ref i))
        {
            object symbolAndTimeframe = getValue(symbolsAndTimeframes, i);
            object marketId = this.safeString(symbolAndTimeframe, 0);
            object market = this.market(marketId);
            object tf = this.safeString(symbolAndTimeframe, 1);
            object interval = this.safeString(this.timeframes, tf, tf);
            ((IList<object>)topics).Add(add(add(add("kline.", interval), "."), getValue(market, "id")));
            ((IList<object>)messageHashes).Add(add(add(add("unsubscribe:candles:", getValue(market, "symbol")), ":"), interval));
        }
        return await this.watchPublic(topics, messageHashes, parameters, true);
    }

    public virtual void handleOHLCV(WebSocketClient client, object message)
    {
        //
        //     {
        //         data: {
        //             E: '1754519557526056',
        //             T: '2025-08-07T00:00:00',
        //             X: false,
        //             c: '3680.520000000',
        //             e: 'kline',
        //             h: '3681.370000000',
        //             l: '3667.650000000',
        //             n: 255,
        //             o: '3670.150000000',
        //             s: 'ETH_USDC',
        //             t: '2025-08-06T22:00:00',
        //             v: '62.2621000'
        //         },
        //         stream: 'kline.2h.ETH_USDC'
        //     }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "s");
        object market = this.market(marketId);
        object symbol = getValue(market, "symbol");
        object stream = this.safeString(message, "stream");
        object parts = ((string)stream).Split(new [] {((string)".")}, StringSplitOptions.None).ToList<object>();
        object timeframe = this.safeString(parts, 1);
        if (!isTrue((inOp(this.ohlcvs, symbol))))
        {
            ((IDictionary<string,object>)this.ohlcvs)[(string)symbol] = new Dictionary<string, object>() {};
        }
        if (!isTrue((inOp(getValue(this.ohlcvs, symbol), timeframe))))
        {
            object limit = this.safeInteger(this.options, "OHLCVLimit", 1000);
            var stored = new ArrayCacheByTimestamp(limit);
            ((IDictionary<string,object>)getValue(this.ohlcvs, symbol))[(string)timeframe] = stored;
        }
        object ohlcv = getValue(getValue(this.ohlcvs, symbol), timeframe);
        object parsed = this.parseWsOHLCV(data);
        callDynamically(ohlcv, "append", new object[] {parsed});
        object messageHash = add(add(add("candles:", symbol), ":"), timeframe);
        callDynamically(client as WebSocketClient, "resolve", new object[] {new List<object>() {symbol, timeframe, ohlcv}, messageHash});
    }

    public override object parseWsOHLCV(object ohlcv, object market = null)
    {
        //
        //     {
        //         E: '1754519557526056',
        //         T: '2025-08-07T00:00:00',
        //         X: false,
        //         c: '3680.520000000',
        //         e: 'kline',
        //         h: '3681.370000000',
        //         l: '3667.650000000',
        //         n: 255,
        //         o: '3670.150000000',
        //         s: 'ETH_USDC',
        //         t: '2025-08-06T22:00:00',
        //         v: '62.2621000'
        //     },
        //
        return new List<object> {this.parse8601(this.safeString(ohlcv, "T")), this.safeNumber(ohlcv, "o"), this.safeNumber(ohlcv, "h"), this.safeNumber(ohlcv, "l"), this.safeNumber(ohlcv, "c"), this.safeNumber(ohlcv, "v")};
    }

    /**
     * @method
     * @name backpack#watchTrades
     * @description watches information on multiple trades made in a market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Trade
     * @param {string} symbol unified symbol of the market to fetch the ticker for
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trade structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.watchTradesForSymbols(new List<object>() {symbol}, since, limit, parameters);
    }

    /**
     * @method
     * @name backpack#unWatchTrades
     * @description unWatches from the stream channel
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Trade
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> unWatchTrades(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchTradesForSymbols(new List<object>() {symbol}, parameters);
    }

    /**
     * @method
     * @name backpack#watchTradesForSymbols
     * @description watches information on multiple trades made in a market
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Trade
     * @param {string[]} symbols unified symbol of the market to fetch trades for
     * @param {int} [since] the earliest time in ms to fetch trades for
     * @param {int} [limit] the maximum number of trade structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> watchTradesForSymbols(object symbols, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " watchTradesForSymbols() requires a non-empty array of symbols")) ;
        }
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add("trade.", marketId));
            ((IList<object>)messageHashes).Add(add("trades:", symbol));
        }
        object trades = await this.watchPublic(topics, messageHashes, parameters);
        if (isTrue(this.newUpdates))
        {
            object first = this.safeValue(trades, 0);
            object tradeSymbol = this.safeString(first, "symbol");
            limit = callDynamically(trades, "getLimit", new object[] {tradeSymbol, limit});
        }
        return this.filterBySinceLimit(trades, since, limit, "timestamp", true);
    }

    /**
     * @method
     * @name backpack#unWatchTradesForSymbols
     * @description unWatches from the stream channel
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Trade
     * @param {string[]} symbols unified symbol of the market to fetch trades for
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> unWatchTradesForSymbols(object symbols, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object symbolsLength = getArrayLength(symbols);
        if (isTrue(isEqual(symbolsLength, 0)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " unWatchTradesForSymbols() requires a non-empty array of symbols")) ;
        }
        object topics = new List<object>() {};
        object messageHashes = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            object marketId = this.marketId(symbol);
            ((IList<object>)topics).Add(add("trade.", marketId));
            ((IList<object>)messageHashes).Add(add("unsubscribe:trades:", symbol));
        }
        return await this.watchPublic(topics, messageHashes, parameters, true);
    }

    public virtual void handleTrades(WebSocketClient client, object message)
    {
        //
        //     {
        //         data: {
        //             E: '1754601477746429',
        //             T: '1754601477744000',
        //             a: '5121860761',
        //             b: '5121861755',
        //             e: 'trade',
        //             m: false,
        //             p: '3870.25',
        //             q: '0.0008',
        //             s: 'ETH_USDC_PERP',
        //             t: 10782547
        //         },
        //         stream: 'trade.ETH_USDC_PERP'
        //     }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "s");
        object market = this.market(marketId);
        object symbol = getValue(market, "symbol");
        if (!isTrue((inOp(this.trades, symbol))))
        {
            object limit = this.safeInteger(this.options, "tradesLimit", 1000);
            var stored = new ArrayCache(limit);
            ((IDictionary<string,object>)this.trades)[(string)symbol] = stored;
        }
        object cache = getValue(this.trades, symbol);
        object trade = this.parseWsTrade(data, market);
        callDynamically(cache, "append", new object[] {trade});
        object messageHash = add("trades:", symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {cache, messageHash});
        callDynamically(client as WebSocketClient, "resolve", new object[] {cache, "trades"});
    }

    public override object parseWsTrade(object trade, object market = null)
    {
        //
        //     {
        //         E: '1754601477746429',
        //         T: '1754601477744000',
        //         a: '5121860761',
        //         b: '5121861755',
        //         e: 'trade',
        //         m: false,
        //         p: '3870.25',
        //         q: '0.0008',
        //         s: 'ETH_USDC_PERP',
        //         t: 10782547
        //     }
        //
        object microseconds = this.safeInteger(trade, "E");
        object timestamp = this.parseToInt(divide(microseconds, 1000));
        object id = this.safeString(trade, "t");
        object marketId = this.safeString(trade, "s");
        market = this.safeMarket(marketId, market);
        object isMaker = this.safeBool(trade, "m");
        object side = ((bool) isTrue(isMaker)) ? "sell" : "buy";
        object takerOrMaker = ((bool) isTrue(isMaker)) ? "maker" : "taker";
        object price = this.safeString(trade, "p");
        object amount = this.safeString(trade, "q");
        object orderId = null;
        if (isTrue(isEqual(side, "buy")))
        {
            orderId = this.safeString(trade, "b");
        } else
        {
            orderId = this.safeString(trade, "a");
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "order", orderId },
            { "type", null },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
            } },
        }, market);
    }

    /**
     * @method
     * @name backpack#watchOrderBook
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Depth
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.watchOrderBookForSymbols(new List<object>() {symbol}, limit, parameters);
    }

    /**
     * @method
     * @name backpack#watchOrderBookForSymbols
     * @see https://docs.backpack.exchange/#tag/Streams/Public/Depth
     * @description watches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string[]} symbols unified array of symbols
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.method] either '/market/level2' or '/spotMarket/level2Depth5' or '/spotMarket/level2Depth50' default is '/market/level2'
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> watchOrderBookForSymbols(object symbols, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object marketIds = this.marketIds(symbols);
        object messageHashes = new List<object>() {};
        object topics = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            ((IList<object>)messageHashes).Add(add("orderbook:", symbol));
            object marketId = getValue(marketIds, i);
            object topic = add("depth.", marketId);
            ((IList<object>)topics).Add(topic);
        }
        object orderbook = await this.watchPublic(topics, messageHashes, parameters);
        return (orderbook as IOrderBook).limit();  // todo check if limit is needed
    }

    /**
     * @method
     * @name backpack#unWatchOrderBook
     * @description unWatches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string} symbol unified array of symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> unWatchOrderBook(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.unWatchOrderBookForSymbols(new List<object>() {symbol}, parameters);
    }

    /**
     * @method
     * @name kucoin#unWatchOrderBookForSymbols
     * @description unWatches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @param {string[]} symbols unified array of symbols
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.method] either '/market/level2' or '/spotMarket/level2Depth5' or '/spotMarket/level2Depth50' default is '/market/level2'
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> unWatchOrderBookForSymbols(object symbols, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols, null, false);
        object marketIds = this.marketIds(symbols);
        object messageHashes = new List<object>() {};
        object topics = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(symbols, i);
            ((IList<object>)messageHashes).Add(add("unsubscribe:orderbook:", symbol));
            object marketId = getValue(marketIds, i);
            object topic = add("depth.", marketId);
            ((IList<object>)topics).Add(topic);
        }
        return await this.watchPublic(topics, messageHashes, parameters, true);
    }

    public virtual void handleOrderBook(WebSocketClient client, object message)
    {
        //
        // initial snapshot is fetched with ccxt's fetchOrderBook
        // the feed does not include a snapshot, just the deltas
        //
        //     {
        //         "data": {
        //             "E": "1754903057555305",
        //             "T": "1754903057554352",
        //             "U": 1345937436,
        //             "a": [],
        //             "b": [],
        //             "e": "depth",
        //             "s": "ETH_USDC",
        //             "u": 1345937436
        //         },
        //         "stream": "depth.ETH_USDC"
        //     }
        //
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "s");
        object symbol = this.safeSymbol(marketId);
        if (!isTrue((inOp(this.orderbooks, symbol))))
        {
            ((IDictionary<string,object>)this.orderbooks)[(string)symbol] = this.orderBook();
        }
        object storedOrderBook = getValue(this.orderbooks, symbol);
        object nonce = this.safeInteger(storedOrderBook, "nonce");
        object deltaNonce = this.safeInteger(data, "u");
        object messageHash = add("orderbook:", symbol);
        if (isTrue(isEqual(nonce, null)))
        {
            object cacheLength = getArrayLength((storedOrderBook as ccxt.pro.OrderBook).cache);
            // the rest API is very delayed
            // usually it takes at least 9 deltas to resolve
            object snapshotDelay = this.handleOption("watchOrderBook", "snapshotDelay", 10);
            if (isTrue(isEqual(cacheLength, snapshotDelay)))
            {
                this.spawn(this.loadOrderBook, new object[] { client, messageHash, symbol, null, new Dictionary<string, object>() {}});
            }
            ((IList<object>)(storedOrderBook as ccxt.pro.OrderBook).cache).Add(data);
            return;
        } else if (isTrue(isGreaterThanOrEqual(nonce, deltaNonce)))
        {
            return;
        }
        this.handleDelta(storedOrderBook, data);
        callDynamically(client as WebSocketClient, "resolve", new object[] {storedOrderBook, messageHash});
    }

    public override void handleDelta(object orderbook, object delta)
    {
        object timestamp = this.parseToInt(divide(this.safeInteger(delta, "T"), 1000));
        ((IDictionary<string,object>)orderbook)["timestamp"] = timestamp;
        ((IDictionary<string,object>)orderbook)["datetime"] = this.iso8601(timestamp);
        ((IDictionary<string,object>)orderbook)["nonce"] = this.safeInteger(delta, "u");
        object bids = this.safeDict(delta, "b", new List<object>() {});
        object asks = this.safeDict(delta, "a", new List<object>() {});
        object storedBids = getValue(orderbook, "bids");
        object storedAsks = getValue(orderbook, "asks");
        this.handleBidAsks(storedBids, bids);
        this.handleBidAsks(storedAsks, asks);
    }

    public virtual void handleBidAsks(object bookSide, object bidAsks)
    {
        for (object i = 0; isLessThan(i, getArrayLength(bidAsks)); postFixIncrement(ref i))
        {
            object bidAsk = this.parseBidAsk(getValue(bidAsks, i));
            (bookSide as IOrderBookSide).storeArray(bidAsk);
        }
    }

    public override object getCacheIndex(object orderbook, object cache)
    {
        object firstDelta = this.safeDict(cache, 0);
        object nonce = this.safeInteger(orderbook, "nonce");
        object firstDeltaStart = this.safeInteger(firstDelta, "sequenceStart");
        if (isTrue(isLessThan(nonce, subtract(firstDeltaStart, 1))))
        {
            return -1;
        }
        for (object i = 0; isLessThan(i, getArrayLength(cache)); postFixIncrement(ref i))
        {
            object delta = getValue(cache, i);
            object deltaStart = this.safeInteger(delta, "sequenceStart");
            object deltaEnd = this.safeInteger(delta, "sequenceEnd");
            if (isTrue(isTrue((isGreaterThanOrEqual(nonce, subtract(deltaStart, 1)))) && isTrue((isLessThan(nonce, deltaEnd)))))
            {
                return i;
            }
        }
        return getArrayLength(cache);
    }

    /**
     * @method
     * @name backpack#watchOrders
     * @description watches information on multiple orders made by the user
     * @see https://docs.backpack.exchange/#tag/Streams/Private/Order-update
     * @param {string} [symbol] unified market symbol of the market orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> watchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
        }
        object topic = "account.orderUpdate";
        object messageHash = "orders";
        if (isTrue(!isEqual(market, null)))
        {
            topic = add("account.orderUpdate.", getValue(market, "id"));
            messageHash = add("orders:", symbol);
        }
        object orders = await this.watchPrivate(new List<object>() {topic}, new List<object>() {messageHash}, parameters);
        if (isTrue(this.newUpdates))
        {
            limit = callDynamically(orders, "getLimit", new object[] {symbol, limit});
        }
        return this.filterBySymbolSinceLimit(orders, symbol, since, limit, true);
    }

    /**
     * @method
     * @name backpack#unWatchOrders
     * @description unWatches information on multiple orders made by the user
     * @see https://docs.backpack.exchange/#tag/Streams/Private/Order-update
     * @param {string} [symbol] unified market symbol of the market orders were made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> unWatchOrders(object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            symbol = getValue(market, "symbol");
        }
        object topic = "account.orderUpdate";
        object messageHash = "unsubscribe:orders";
        if (isTrue(!isEqual(market, null)))
        {
            topic = add("account.orderUpdate.", getValue(market, "id"));
            messageHash = add("unsubscribe:orders:", symbol);
        }
        return await this.watchPrivate(new List<object>() {topic}, new List<object>() {messageHash}, parameters, true);
    }

    public virtual void handleOrder(WebSocketClient client, object message)
    {
        //
        //     {
        //         data: {
        //             E: '1754939110175843',
        //             O: 'USER',
        //             Q: '4.30',
        //             S: 'Bid',
        //             T: '1754939110174703',
        //             V: 'RejectTaker',
        //             X: 'New',
        //             Z: '0',
        //             e: 'orderAccepted',
        //             f: 'GTC',
        //             i: '5406825793',
        //             o: 'MARKET',
        //             q: '0.0010',
        //             r: false,
        //             s: 'ETH_USDC',
        //             t: null,
        //             z: '0'
        //         },
        //         stream: 'account.orderUpdate.ETH_USDC'
        //     }
        //
        object messageHash = "orders";
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        object marketId = this.safeString(data, "s");
        object market = this.safeMarket(marketId);
        object symbol = getValue(market, "symbol");
        object parsed = this.parseWsOrder(data, market);
        object orders = this.orders;
        if (isTrue(isEqual(orders, null)))
        {
            object limit = this.safeInteger(this.options, "ordersLimit", 1000);
            orders = new ArrayCacheBySymbolById(limit);
            this.orders = orders;
        }
        callDynamically(orders, "append", new object[] {parsed});
        callDynamically(client as WebSocketClient, "resolve", new object[] {orders, messageHash});
        object symbolSpecificMessageHash = add(add(messageHash, ":"), symbol);
        callDynamically(client as WebSocketClient, "resolve", new object[] {orders, symbolSpecificMessageHash});
    }

    public override object parseWsOrder(object order, object market = null)
    {
        //
        //     {
        //         E: '1754939110175879',
        //         L: '4299.16',
        //         N: 'ETH',
        //         O: 'USER',
        //         Q: '4.30',
        //         S: 'Bid',
        //         T: '1754939110174705',
        //         V: 'RejectTaker',
        //         X: 'Filled',
        //         Z: '4.299160',
        //         e: 'orderFill',
        //         f: 'GTC',
        //         i: '5406825793',
        //         l: '0.0010',
        //         m: false,
        //         n: '0.000001',
        //         o: 'MARKET',
        //         q: '0.0010',
        //         r: false,
        //         s: 'ETH_USDC',
        //         t: 2888471,
        //         z: '0.0010'
        //     },
        //
        object id = this.safeString(order, "i");
        object clientOrderId = this.safeString(order, "c");
        object microseconds = this.safeInteger(order, "E");
        object timestamp = this.parseToInt(divide(microseconds, 1000));
        object status = this.parseWsOrderStatus(this.safeString(order, "X"), market);
        object marketId = this.safeString(order, "s");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object type = this.safeStringLower(order, "o");
        object timeInForce = this.safeString(order, "f");
        object side = this.parseWsOrderSide(this.safeString(order, "S"));
        object price = this.safeString(order, "p");
        object triggerPrice = this.safeNumber(order, "P");
        object amount = this.safeString(order, "q");
        object cost = this.safeString(order, "Z");
        object filled = this.safeString(order, "l");
        object fee = null;
        object feeCurrency = this.safeString(order, "N");
        if (isTrue(!isEqual(feeCurrency, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", feeCurrency },
                { "cost", null },
            };
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", timeInForce },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", triggerPrice },
            { "average", null },
            { "amount", amount },
            { "cost", cost },
            { "filled", filled },
            { "remaining", null },
            { "fee", fee },
            { "trades", null },
            { "info", order },
        }, market);
    }

    public virtual object parseWsOrderStatus(object status, object market = null)
    {
        object statuses = new Dictionary<string, object>() {
            { "New", "open" },
            { "Filled", "closed" },
            { "Cancelled", "canceled" },
            { "Expired", "canceled" },
            { "PartiallyFilled", "open" },
            { "TriggerPending", "open" },
            { "TriggerFailed", "rejected" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseWsOrderSide(object side)
    {
        object sides = new Dictionary<string, object>() {
            { "Bid", "buy" },
            { "Ask", "sell" },
        };
        return this.safeString(sides, side, side);
    }

    /**
     * @method
     * @name backpack#watchPositions
     * @description watch all open positions
     * @see https://docs.backpack.exchange/#tag/Streams/Private/Position-update
     * @param {string[]} [symbols] list of unified market symbols to watch positions for
     * @param {int} [since] the earliest time in ms to fetch positions for
     * @param {int} [limit] the maximum number of positions to retrieve
     * @param {object} params extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
     */
    public async override Task<object> watchPositions(object symbols = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object messageHashes = new List<object>() {};
        object topics = new List<object>() {};
        if (isTrue(!isEqual(symbols, null)))
        {
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                ((IList<object>)messageHashes).Add(add(add("positions", ":"), symbol));
                ((IList<object>)topics).Add(add("account.positionUpdate.", this.marketId(symbol)));
            }
        } else
        {
            ((IList<object>)messageHashes).Add("positions");
            ((IList<object>)topics).Add("account.positionUpdate");
        }
        object positions = await this.watchPrivate(topics, messageHashes, parameters);
        if (isTrue(this.newUpdates))
        {
            return positions;
        }
        return this.filterBySymbolsSinceLimit(this.positions, symbols, since, limit, true);
    }

    /**
     * @method
     * @name backpack#unWatchPositions
     * @description unWatches from the stream channel
     * @see https://docs.backpack.exchange/#tag/Streams/Private/Position-update
     * @param {string[]} [symbols] list of unified market symbols to watch positions for
     * @param {object} params extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/en/latest/manual.html#position-structure}
     */
    public async override Task<object> unWatchPositions(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object messageHashes = new List<object>() {};
        object topics = new List<object>() {};
        if (isTrue(!isEqual(symbols, null)))
        {
            for (object i = 0; isLessThan(i, getArrayLength(symbols)); postFixIncrement(ref i))
            {
                object symbol = getValue(symbols, i);
                ((IList<object>)messageHashes).Add(add(add("unsubscribe:positions", ":"), symbol));
                ((IList<object>)topics).Add(add("account.positionUpdate.", this.marketId(symbol)));
            }
        } else
        {
            ((IList<object>)messageHashes).Add("unsubscribe:positions");
            ((IList<object>)topics).Add("account.positionUpdate");
        }
        return await this.watchPrivate(topics, messageHashes, parameters, true);
    }

    public virtual void handlePositions(WebSocketClient client, object message)
    {
        //
        //     {
        //         data: {
        //             B: '4236.36',
        //             E: '1754943862040486',
        //             M: '4235.88650933',
        //             P: '-0.000473',
        //             Q: '0.0010',
        //             T: '1754943862040487',
        //             b: '4238.479',
        //             e: 'positionOpened',
        //             f: '0.02',
        //             i: 5411399049,
        //             l: '0',
        //             m: '0.0125',
        //             n: '4.23588650933',
        //             p: '0',
        //             q: '0.0010',
        //             s: 'ETH_USDC_PERP'
        //         },
        //         stream: 'account.positionUpdate'
        //     }
        //
        object messageHash = "positions";
        object data = this.safeDict(message, "data", new Dictionary<string, object>() {});
        if (isTrue(isEqual(this.positions, null)))
        {
            this.positions = new ArrayCacheBySymbolById();
        }
        object cache = this.positions;
        object parsedPosition = this.parseWsPosition(data);
        object microseconds = this.safeInteger(data, "E");
        object timestamp = this.parseToInt(divide(microseconds, 1000));
        ((IDictionary<string,object>)parsedPosition)["timestamp"] = timestamp;
        ((IDictionary<string,object>)parsedPosition)["datetime"] = this.iso8601(timestamp);
        callDynamically(cache, "append", new object[] {parsedPosition});
        object symbolSpecificMessageHash = add(add(messageHash, ":"), getValue(parsedPosition, "symbol"));
        callDynamically(client as WebSocketClient, "resolve", new object[] {new List<object>() {parsedPosition}, messageHash});
        callDynamically(client as WebSocketClient, "resolve", new object[] {new List<object>() {parsedPosition}, symbolSpecificMessageHash});
    }

    public virtual object parseWsPosition(object position, object market = null)
    {
        //
        //     {
        //         B: '4236.36',
        //         E: '1754943862040486',
        //         M: '4235.88650933',
        //         P: '-0.000473',
        //         Q: '0.0010',
        //         T: '1754943862040487',
        //         b: '4238.479',
        //         e: 'positionOpened',
        //         f: '0.02',
        //         i: 5411399049,
        //         l: '0',
        //         m: '0.0125',
        //         n: '4.23588650933',
        //         p: '0',
        //         q: '0.0010',
        //         s: 'ETH_USDC_PERP'
        //     }
        //
        object id = this.safeString(position, "i");
        object marketId = this.safeString(position, "s");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object notional = this.safeString(position, "n");
        object liquidationPrice = this.safeString(position, "l");
        object entryPrice = this.safeString(position, "b");
        object realizedPnl = this.safeString(position, "p");
        object unrealisedPnl = this.safeString(position, "P");
        object contracts = this.safeString(position, "Q");
        object markPrice = this.safeString(position, "M");
        object netQuantity = this.safeNumber(position, "q");
        object hedged = false;
        object side = "long";
        if (isTrue(isLessThan(netQuantity, 0)))
        {
            side = "short";
        }
        if (isTrue(isEqual(netQuantity, null)))
        {
            hedged = null;
            side = null;
        }
        object microseconds = this.safeInteger(position, "E");
        object timestamp = this.parseToInt(divide(microseconds, 1000));
        object maintenanceMarginPercentage = this.safeNumber(position, "m");
        object initialMarginPercentage = this.safeNumber(position, "f");
        return this.safePosition(new Dictionary<string, object>() {
            { "info", position },
            { "id", id },
            { "symbol", symbol },
            { "notional", notional },
            { "marginMode", null },
            { "liquidationPrice", liquidationPrice },
            { "entryPrice", entryPrice },
            { "realizedPnl", realizedPnl },
            { "unrealizedPnl", unrealisedPnl },
            { "percentage", null },
            { "contracts", contracts },
            { "contractSize", null },
            { "markPrice", markPrice },
            { "side", side },
            { "hedged", hedged },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "maintenanceMargin", null },
            { "maintenanceMarginPercentage", maintenanceMarginPercentage },
            { "collateral", null },
            { "initialMargin", null },
            { "initialMarginPercentage", initialMarginPercentage },
            { "leverage", null },
            { "marginRatio", null },
        });
    }

    public override void handleMessage(WebSocketClient client, object message)
    {
        if (!isTrue(this.handleErrorMessage(client as WebSocketClient, message)))
        {
            return;
        }
        object data = this.safeDict(message, "data");
        object eventVar = this.safeString(data, "e");
        if (isTrue(isEqual(eventVar, "ticker")))
        {
            this.handleTicker(client as WebSocketClient, message);
        } else if (isTrue(isEqual(eventVar, "bookTicker")))
        {
            this.handleBidAsk(client as WebSocketClient, message);
        } else if (isTrue(isEqual(eventVar, "kline")))
        {
            this.handleOHLCV(client as WebSocketClient, message);
        } else if (isTrue(isEqual(eventVar, "trade")))
        {
            this.handleTrades(client as WebSocketClient, message);
        } else if (isTrue(isEqual(eventVar, "depth")))
        {
            this.handleOrderBook(client as WebSocketClient, message);
        } else if (isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isTrue(isEqual(eventVar, "orderAccepted")) || isTrue(isEqual(eventVar, "orderUpdate"))) || isTrue(isEqual(eventVar, "orderFill"))) || isTrue(isEqual(eventVar, "orderCancelled"))) || isTrue(isEqual(eventVar, "orderExpired"))) || isTrue(isEqual(eventVar, "orderModified"))) || isTrue(isEqual(eventVar, "triggerPlaced"))) || isTrue(isEqual(eventVar, "triggerFailed"))))
        {
            this.handleOrder(client as WebSocketClient, message);
        } else if (isTrue(isTrue(isTrue(isTrue(isEqual(eventVar, "positionAdjusted")) || isTrue(isEqual(eventVar, "positionOpened"))) || isTrue(isEqual(eventVar, "positionClosed"))) || isTrue(isEqual(eventVar, "positionUpdated"))))
        {
            this.handlePositions(client as WebSocketClient, message);
        }
    }

    public virtual object handleErrorMessage(WebSocketClient client, object message)
    {
        //
        //     {
        //         id: null,
        //         error: {
        //             code: 4006,
        //             message: 'Invalid stream'
        //         }
        //     }
        //
        object error = this.safeDict(message, "error", new Dictionary<string, object>() {});
        object code = this.safeInteger(error, "code");
        try
        {
            if (isTrue(!isEqual(code, null)))
            {
                object msg = this.safeString(error, "message");
                throw new ExchangeError ((string)add(add(this.id, " "), msg)) ;
            }
            return true;
        } catch(Exception e)
        {
            ((WebSocketClient)client).reject(e);
        }
        return true;
    }
}
