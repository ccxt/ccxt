namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class cex : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "cex" },
            { "name", "CEX.IO" },
            { "countries", new List<object>() {"GB", "EU", "CY", "RU"} },
            { "rateLimit", 1667 },
            { "pro", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "createOrder", true },
                { "fetchAccounts", true },
                { "fetchBalance", true },
                { "fetchClosedOrder", true },
                { "fetchClosedOrders", true },
                { "fetchCurrencies", true },
                { "fetchDepositAddress", true },
                { "fetchDepositsWithdrawals", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchLedger", true },
                { "fetchMarkets", true },
                { "fetchOHLCV", true },
                { "fetchOpenOrder", true },
                { "fetchOpenOrders", true },
                { "fetchOrderBook", true },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFees", true },
                { "transfer", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://trade.cex.io/api/spot/rest-public" },
                    { "private", "https://trade.cex.io/api/spot/rest" },
                } },
                { "www", "https://cex.io" },
                { "doc", "https://trade.cex.io/docs/" },
                { "fees", new List<object>() {"https://cex.io/fee-schedule", "https://cex.io/limits-commissions"} },
                { "referral", "https://cex.io/r/0/up105393824/0/" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {} },
                    { "post", new Dictionary<string, object>() {
                        { "get_server_time", 1 },
                        { "get_pairs_info", 1 },
                        { "get_currencies_info", 1 },
                        { "get_processing_info", 10 },
                        { "get_ticker", 1 },
                        { "get_trade_history", 1 },
                        { "get_order_book", 1 },
                        { "get_candles", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {} },
                    { "post", new Dictionary<string, object>() {
                        { "get_my_current_fee", 5 },
                        { "get_fee_strategy", 1 },
                        { "get_my_volume", 5 },
                        { "do_create_account", 1 },
                        { "get_my_account_status_v3", 5 },
                        { "get_my_wallet_balance", 5 },
                        { "get_my_orders", 5 },
                        { "do_my_new_order", 1 },
                        { "do_cancel_my_order", 1 },
                        { "do_cancel_all_orders", 5 },
                        { "get_order_book", 1 },
                        { "get_candles", 1 },
                        { "get_trade_history", 1 },
                        { "get_my_transaction_history", 1 },
                        { "get_my_funding_history", 5 },
                        { "do_my_internal_transfer", 1 },
                        { "get_processing_info", 10 },
                        { "get_deposit_address", 5 },
                        { "do_deposit_funds_from_wallet", 1 },
                        { "do_withdrawal_funds_to_wallet", 1 },
                    } },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {} },
                { "broad", new Dictionary<string, object>() {
                    { "You have negative balance on following accounts", typeof(InsufficientFunds) },
                    { "Mandatory parameter side should be one of BUY,SELL", typeof(BadRequest) },
                    { "API orders from Main account are not allowed", typeof(BadRequest) },
                    { "check failed", typeof(BadRequest) },
                    { "Insufficient funds", typeof(InsufficientFunds) },
                    { "Get deposit address for main account is not allowed", typeof(PermissionDenied) },
                    { "Market Trigger orders are not allowed", typeof(BadRequest) },
                    { "key not passed or incorrect", typeof(AuthenticationError) },
                } },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1m" },
                { "5m", "5m" },
                { "15m", "15m" },
                { "30m", "30m" },
                { "1h", "1h" },
                { "2h", "2h" },
                { "4h", "4h" },
                { "1d", "1d" },
            } },
            { "options", new Dictionary<string, object>() {
                { "networks", new Dictionary<string, object>() {
                    { "BTC", "bitcoin" },
                    { "ERC20", "ERC20" },
                    { "BSC20", "binancesmartchain" },
                    { "DOGE", "dogecoin" },
                    { "ALGO", "algorand" },
                    { "XLM", "stellar" },
                    { "ATOM", "cosmos" },
                    { "LTC", "litecoin" },
                    { "XRP", "ripple" },
                    { "FTM", "fantom" },
                    { "MINA", "mina" },
                    { "THETA", "theta" },
                    { "XTZ", "tezos" },
                    { "TIA", "celestia" },
                    { "CRONOS", "cronos" },
                    { "MATIC", "polygon" },
                    { "TON", "ton" },
                    { "TRC20", "tron" },
                    { "SOLANA", "solana" },
                    { "SGB", "songbird" },
                    { "DYDX", "dydx" },
                    { "DASH", "dash" },
                    { "ZIL", "zilliqa" },
                    { "EOS", "eos" },
                    { "AVALANCHEC", "avalanche" },
                    { "ETHPOW", "ethereumpow" },
                    { "NEAR", "near" },
                    { "ARB", "arbitrum" },
                    { "DOT", "polkadot" },
                    { "OPT", "optimism" },
                    { "INJ", "injective" },
                    { "ADA", "cardano" },
                    { "ONT", "ontology" },
                    { "ICP", "icp" },
                    { "KAVA", "kava" },
                    { "KSM", "kusama" },
                    { "SEI", "sei" },
                    { "NEO", "neo" },
                    { "NEO3", "neo3" },
                    { "XDC", "xdc" },
                } },
            } },
        });
    }

    /**
     * @method
     * @name cex#fetchCurrencies
     * @description fetches all available currencies on an exchange
     * @see https://trade.cex.io/docs/#rest-public-api-calls-currencies-info
     * @param {dict} [params] extra parameters specific to the exchange API endpoint
     * @returns {dict} an associative dictionary of currencies
     */
    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object promises = new List<object>() {};
        ((IList<object>)promises).Add(this.publicPostGetCurrenciesInfo(parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": [
        //            {
        //                "currency": "ZAP",
        //                "fiat": false,
        //                "precision": "8",
        //                "walletPrecision": "6",
        //                "walletDeposit": true,
        //                "walletWithdrawal": true
        //            },
        //            ...
        //
        ((IList<object>)promises).Add(this.publicPostGetProcessingInfo(parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "ADA": {
        //                "name": "Cardano",
        //                "blockchains": {
        //                    "cardano": {
        //                        "type": "coin",
        //                        "deposit": "enabled",
        //                        "minDeposit": "1",
        //                        "withdrawal": "enabled",
        //                        "minWithdrawal": "5",
        //                        "withdrawalFee": "1",
        //                        "withdrawalFeePercent": "0",
        //                        "depositConfirmations": "15"
        //                    }
        //                }
        //            },
        //            ...
        //
        object responses = await promiseAll(promises);
        object dataCurrencies = this.safeList(getValue(responses, 0), "data", new List<object>() {});
        object dataNetworks = this.safeDict(getValue(responses, 1), "data", new Dictionary<string, object>() {});
        object currenciesIndexed = this.indexBy(dataCurrencies, "currency");
        object data = this.deepExtend(currenciesIndexed, dataNetworks);
        return this.parseCurrencies(this.toArray(data));
    }

    public override object parseCurrency(object rawCurrency)
    {
        object id = this.safeString(rawCurrency, "currency");
        object code = this.safeCurrencyCode(id);
        object type = ((bool) isTrue(this.safeBool(rawCurrency, "fiat"))) ? "fiat" : "crypto";
        object currencyDepositEnabled = this.safeBool(rawCurrency, "walletDeposit");
        object currencyWithdrawEnabled = this.safeBool(rawCurrency, "walletWithdrawal");
        object currencyPrecision = this.parseNumber(this.parsePrecision(this.safeString(rawCurrency, "precision")));
        object networks = new Dictionary<string, object>() {};
        object rawNetworks = this.safeDict(rawCurrency, "blockchains", new Dictionary<string, object>() {});
        object keys = new List<object>(((IDictionary<string,object>)rawNetworks).Keys);
        for (object j = 0; isLessThan(j, getArrayLength(keys)); postFixIncrement(ref j))
        {
            object networkId = getValue(keys, j);
            object rawNetwork = getValue(rawNetworks, networkId);
            object networkCode = this.networkIdToCode(networkId);
            object deposit = isEqual(this.safeString(rawNetwork, "deposit"), "enabled");
            object withdraw = isEqual(this.safeString(rawNetwork, "withdrawal"), "enabled");
            ((IDictionary<string,object>)networks)[(string)networkCode] = new Dictionary<string, object>() {
                { "id", networkId },
                { "network", networkCode },
                { "margin", null },
                { "deposit", deposit },
                { "withdraw", withdraw },
                { "fee", this.safeNumber(rawNetwork, "withdrawalFee") },
                { "precision", currencyPrecision },
                { "limits", new Dictionary<string, object>() {
                    { "deposit", new Dictionary<string, object>() {
                        { "min", this.safeNumber(rawNetwork, "minDeposit") },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", this.safeNumber(rawNetwork, "minWithdrawal") },
                        { "max", null },
                    } },
                } },
                { "info", rawNetwork },
            };
        }
        return this.safeCurrencyStructure(new Dictionary<string, object>() {
            { "id", id },
            { "code", code },
            { "name", null },
            { "type", type },
            { "active", null },
            { "deposit", currencyDepositEnabled },
            { "withdraw", currencyWithdrawEnabled },
            { "fee", null },
            { "precision", currencyPrecision },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "withdraw", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "networks", networks },
            { "info", rawCurrency },
        });
    }

    /**
     * @method
     * @name cex#fetchMarkets
     * @description retrieves data on all markets for ace
     * @see https://trade.cex.io/docs/#rest-public-api-calls-pairs-info
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} an array of objects representing market data
     */
    public async override Task<object> fetchMarkets(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicPostGetPairsInfo(parameters);
        //
        //    {
        //        "ok": "ok",
        //        "data": [
        //            {
        //                "base": "AI",
        //                "quote": "USD",
        //                "baseMin": "30",
        //                "baseMax": "2516000",
        //                "baseLotSize": "0.000001",
        //                "quoteMin": "10",
        //                "quoteMax": "1000000",
        //                "quoteLotSize": "0.01000000",
        //                "basePrecision": "6",
        //                "quotePrecision": "8",
        //                "pricePrecision": "4",
        //                "minPrice": "0.0377",
        //                "maxPrice": "19.5000"
        //            },
        //            ...
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseMarkets(data);
    }

    public override object parseMarket(object market)
    {
        object baseId = this.safeString(market, "base");
        object bs = this.safeCurrencyCode(baseId);
        object quoteId = this.safeString(market, "quote");
        object quote = this.safeCurrencyCode(quoteId);
        object id = add(add(bs, "-"), quote); // not actual id, but for this exchange we can use this abbreviation, because e.g. tickers have hyphen in between
        object symbol = add(add(bs, "/"), quote);
        return this.safeMarketStructure(new Dictionary<string, object>() {
            { "id", id },
            { "symbol", symbol },
            { "base", bs },
            { "baseId", baseId },
            { "quote", quote },
            { "quoteId", quoteId },
            { "settle", null },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "baseMin") },
                    { "max", this.safeNumber(market, "baseMax") },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "minPrice") },
                    { "max", this.safeNumber(market, "maxPrice") },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "quoteMin") },
                    { "max", this.safeNumber(market, "quoteMax") },
                } },
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.safeString(market, "baseLotSize") },
                { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "pricePrecision"))) },
                { "base", this.parseNumber(this.parsePrecision(this.safeString(market, "basePrecision"))) },
                { "quote", this.parseNumber(this.parsePrecision(this.safeString(market, "quotePrecision"))) },
            } },
            { "active", null },
            { "created", null },
            { "info", market },
        });
    }

    /**
     * @method
     * @name cex#fetchTime
     * @description fetches the current integer timestamp in milliseconds from the exchange server
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {int} the current integer timestamp in milliseconds from the exchange server
     */
    public async override Task<object> fetchTime(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicPostGetServerTime(parameters);
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "timestamp": "1728472063472",
        //            "ISODate": "2024-10-09T11:07:43.472Z"
        //        }
        //    }
        //
        object data = this.safeDict(response, "data");
        object timestamp = this.safeInteger(data, "timestamp");
        return timestamp;
    }

    /**
     * @method
     * @name cex#fetchTicker
     * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
     * @see https://trade.cex.io/docs/#rest-public-api-calls-ticker
     * @param {string} symbol
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.fetchTickers(new List<object>() {symbol}, parameters);
        return this.safeDict(response, symbol, new Dictionary<string, object>() {});
    }

    /**
     * @method
     * @name cex#fetchTickers
     * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
     * @see https://trade.cex.io/docs/#rest-public-api-calls-ticker
     * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
     */
    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbols, null)))
        {
            ((IDictionary<string,object>)request)["pairs"] = this.marketIds(symbols);
        }
        object response = await this.publicPostGetTicker(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "AI-USD": {
        //                "bestBid": "0.3917",
        //                "bestAsk": "0.3949",
        //                "bestBidChange": "0.0035",
        //                "bestBidChangePercentage": "0.90",
        //                "bestAskChange": "0.0038",
        //                "bestAskChangePercentage": "0.97",
        //                "low": "0.3787",
        //                "high": "0.3925",
        //                "volume30d": "2945.722277",
        //                "lastTradeDateISO": "2024-10-11T06:18:42.077Z",
        //                "volume": "120.736000",
        //                "quoteVolume": "46.65654070",
        //                "lastTradeVolume": "67.914000",
        //                "volumeUSD": "46.65",
        //                "last": "0.3949",
        //                "lastTradePrice": "0.3925",
        //                "priceChange": "0.0038",
        //                "priceChangePercentage": "0.97"
        //            },
        //            ...
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTickers(data, symbols);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        object marketId = this.safeString(ticker, "id");
        object symbol = this.safeSymbol(marketId, market);
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "high", this.safeNumber(ticker, "high") },
            { "low", this.safeNumber(ticker, "low") },
            { "bid", this.safeNumber(ticker, "bestBid") },
            { "bidVolume", null },
            { "ask", this.safeNumber(ticker, "bestAsk") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", this.safeString(ticker, "lastTradePrice") },
            { "previousClose", null },
            { "change", this.safeNumber(ticker, "priceChange") },
            { "percentage", this.safeNumber(ticker, "priceChangePercentage") },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", this.safeString(ticker, "quoteVolume") },
            { "info", ticker },
        }, market);
    }

    /**
     * @method
     * @name cex#fetchTrades
     * @description get the list of most recent trades for a particular symbol
     * @see https://trade.cex.io/docs/#rest-public-api-calls-trade-history
     * @param {string} symbol unified symbol of the market to fetch trades for
     * @param {int} [since] timestamp in ms of the earliest trade to fetch
     * @param {int} [limit] the maximum amount of trades to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest entry
     * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
     */
    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["fromDateISO"] = this.iso8601(since);
        }
        object until = null;
        var untilparametersVariable = this.handleParamInteger2(parameters, "until", "till");
        until = ((IList<object>)untilparametersVariable)[0];
        parameters = ((IList<object>)untilparametersVariable)[1];
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["toDateISO"] = this.iso8601(until);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["pageSize"] = mathMin(limit, 10000); // has a bug, still returns more trades
        }
        object response = await this.publicPostGetTradeHistory(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "pageSize": "10",
        //            "trades": [
        //                {
        //                    "tradeId": "1728630559823-0",
        //                    "dateISO": "2024-10-11T07:09:19.823Z",
        //                    "side": "SELL",
        //                    "price": "60879.5",
        //                    "amount": "0.00165962"
        //                },
        //                ... followed by older trades
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        object trades = this.safeList(data, "trades", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // public fetchTrades
        //
        //                {
        //                    "tradeId": "1728630559823-0",
        //                    "dateISO": "2024-10-11T07:09:19.823Z",
        //                    "side": "SELL",
        //                    "price": "60879.5",
        //                    "amount": "0.00165962"
        //                },
        //
        object dateStr = this.safeString(trade, "dateISO");
        object timestamp = this.parse8601(dateStr);
        market = this.safeMarket(null, market);
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "id", this.safeString(trade, "tradeId") },
            { "order", null },
            { "type", null },
            { "takerOrMaker", null },
            { "side", this.safeStringLower(trade, "side") },
            { "price", this.safeString(trade, "price") },
            { "amount", this.safeString(trade, "amount") },
            { "cost", null },
            { "fee", null },
        }, market);
    }

    /**
     * @method
     * @name cex#fetchOrderBook
     * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
     * @see https://trade.cex.io/docs/#rest-public-api-calls-order-book
     * @param {string} symbol unified symbol of the market to fetch the order book for
     * @param {int} [limit] the maximum amount of order book entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
     */
    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object response = await this.publicPostGetOrderBook(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "timestamp": "1728636922648",
        //            "currency1": "BTC",
        //            "currency2": "USDT",
        //            "bids": [
        //                [
        //                    "60694.1",
        //                    "13.12849761"
        //                ],
        //                [
        //                    "60694.0",
        //                    "0.71829244"
        //                ],
        //                ...
        //
        object orderBook = this.safeDict(response, "data", new Dictionary<string, object>() {});
        object timestamp = this.safeInteger(orderBook, "timestamp");
        return this.parseOrderBook(orderBook, getValue(market, "symbol"), timestamp);
    }

    /**
     * @method
     * @name cex#fetchOHLCV
     * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
     * @see https://trade.cex.io/docs/#rest-public-api-calls-candles
     * @param {string} symbol unified symbol of the market to fetch OHLCV data for
     * @param {string} timeframe the length of time each candle represents
     * @param {int} [since] timestamp in ms of the earliest candle to fetch
     * @param {int} [limit] the maximum amount of candles to fetch
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest entry
     * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
     */
    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        object dataType = null;
        var dataTypeparametersVariable = this.handleOptionAndParams(parameters, "fetchOHLCV", "dataType");
        dataType = ((IList<object>)dataTypeparametersVariable)[0];
        parameters = ((IList<object>)dataTypeparametersVariable)[1];
        if (isTrue(isEqual(dataType, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOHLCV requires a parameter \"dataType\" to be either \"bestBid\" or \"bestAsk\"")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
            { "resolution", getValue(this.timeframes, timeframe) },
            { "dataType", dataType },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["fromISO"] = this.iso8601(since);
        }
        object until = null;
        var untilparametersVariable = this.handleParamInteger2(parameters, "until", "till");
        until = ((IList<object>)untilparametersVariable)[0];
        parameters = ((IList<object>)untilparametersVariable)[1];
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["toISO"] = this.iso8601(until);
        } else if (isTrue(isEqual(since, null)))
        {
            // exchange still requires that we provide one of them
            ((IDictionary<string,object>)request)["toISO"] = this.iso8601(this.milliseconds());
        }
        if (isTrue(isTrue(isTrue(!isEqual(since, null)) && isTrue(!isEqual(until, null))) && isTrue(!isEqual(limit, null))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOHLCV does not support fetching candles with both a limit and since/until")) ;
        } else if (isTrue(isTrue((isTrue(!isEqual(since, null)) || isTrue(!isEqual(until, null)))) && isTrue(isEqual(limit, null))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOHLCV requires a limit parameter when fetching candles with since or until")) ;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicPostGetCandles(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": [
        //            {
        //                "timestamp": "1728643320000",
        //                "open": "61061",
        //                "high": "61095.1",
        //                "low": "61048.5",
        //                "close": "61087.8",
        //                "volume": "0",
        //                "resolution": "1m",
        //                "isClosed": true,
        //                "timestampISO": "2024-10-11T10:42:00.000Z"
        //            },
        //            ...
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        return new List<object> {this.safeInteger(ohlcv, "timestamp"), this.safeNumber(ohlcv, "open"), this.safeNumber(ohlcv, "high"), this.safeNumber(ohlcv, "low"), this.safeNumber(ohlcv, "close"), this.safeNumber(ohlcv, "volume")};
    }

    /**
     * @method
     * @name cex#fetchTradingFees
     * @description fetch the trading fees for multiple markets
     * @see https://trade.cex.io/docs/#rest-public-api-calls-candles
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
     */
    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetMyCurrentFee(parameters);
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "tradingFee": {
        //                "AI-USD": {
        //                    "percent": "0.25"
        //                },
        //                ...
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        object fees = this.safeDict(data, "tradingFee", new Dictionary<string, object>() {});
        return this.parseTradingFees(fees, true);
    }

    public virtual object parseTradingFees(object response, object useKeyAsId = null)
    {
        useKeyAsId ??= false;
        object result = new Dictionary<string, object>() {};
        object keys = new List<object>(((IDictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object key = getValue(keys, i);
            object market = null;
            if (isTrue(useKeyAsId))
            {
                market = this.safeMarket(key);
            }
            object parsed = this.parseTradingFee(getValue(response, key), market);
            ((IDictionary<string,object>)result)[(string)getValue(parsed, "symbol")] = parsed;
        }
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            if (!isTrue((inOp(result, symbol))))
            {
                object market = this.market(symbol);
                ((IDictionary<string,object>)result)[(string)symbol] = this.parseTradingFee(response, market);
            }
        }
        return result;
    }

    public virtual object parseTradingFee(object fee, object market = null)
    {
        return new Dictionary<string, object>() {
            { "info", fee },
            { "symbol", this.safeString(market, "symbol") },
            { "maker", this.safeNumber(fee, "percent") },
            { "taker", this.safeNumber(fee, "percent") },
            { "percentage", null },
            { "tierBased", null },
        };
    }

    public async override Task<object> fetchAccounts(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetMyAccountStatusV3(parameters);
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "convertedCurrency": "USD",
        //            "balancesPerAccounts": {
        //                "": {
        //                    "AI": {
        //                        "balance": "0.000000",
        //                        "balanceOnHold": "0.000000"
        //                    },
        //                    "USDT": {
        //                        "balance": "0.00000000",
        //                        "balanceOnHold": "0.00000000"
        //                    }
        //                }
        //            }
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        object balances = this.safeDict(data, "balancesPerAccounts", new Dictionary<string, object>() {});
        object arrays = this.toArray(balances);
        return this.parseAccounts(arrays, parameters);
    }

    public override object parseAccount(object account)
    {
        return new Dictionary<string, object>() {
            { "id", null },
            { "type", null },
            { "code", null },
            { "info", account },
        };
    }

    /**
     * @method
     * @name cex#fetchBalance
     * @description query for balance and get the amount of funds available for trading or funds locked in orders
     * @see https://trade.cex.io/docs/#rest-private-api-calls-account-status-v3
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {object} [params.method] 'privatePostGetMyWalletBalance' or 'privatePostGetMyAccountStatusV3'
     * @param {object} [params.account]  in case 'privatePostGetMyAccountStatusV3' is chosen, this can specify the account name (default is empty string)
     * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
     */
    public async override Task<object> fetchBalance(object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object accountName = null;
        var accountNameparametersVariable = this.handleParamString(parameters, "account", "");
        accountName = ((IList<object>)accountNameparametersVariable)[0];
        parameters = ((IList<object>)accountNameparametersVariable)[1]; // default is empty string
        object method = null;
        var methodparametersVariable = this.handleParamString(parameters, "method", "privatePostGetMyWalletBalance");
        method = ((IList<object>)methodparametersVariable)[0];
        parameters = ((IList<object>)methodparametersVariable)[1];
        object accountBalance = null;
        if (isTrue(isEqual(method, "privatePostGetMyAccountStatusV3")))
        {
            object response = await this.privatePostGetMyAccountStatusV3(parameters);
            //
            //    {
            //        "ok": "ok",
            //        "data": {
            //            "convertedCurrency": "USD",
            //            "balancesPerAccounts": {
            //                "": {
            //                    "AI": {
            //                        "balance": "0.000000",
            //                        "balanceOnHold": "0.000000"
            //                    },
            //                    ....
            //
            object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
            object balances = this.safeDict(data, "balancesPerAccounts", new Dictionary<string, object>() {});
            accountBalance = this.safeDict(balances, accountName, new Dictionary<string, object>() {});
        } else
        {
            object response = await this.privatePostGetMyWalletBalance(parameters);
            //
            //    {
            //        "ok": "ok",
            //        "data": {
            //            "AI": {
            //                "balance": "25.606429"
            //            },
            //            "USDT": {
            //                "balance": "7.935449"
            //            },
            //            ...
            //
            accountBalance = this.safeDict(response, "data", new Dictionary<string, object>() {});
        }
        return this.parseBalance(accountBalance);
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object keys = new List<object>(((IDictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object key = getValue(keys, i);
            object balance = this.safeDict(response, key, new Dictionary<string, object>() {});
            object code = this.safeCurrencyCode(key);
            object account = new Dictionary<string, object>() {
                { "used", this.safeString(balance, "balanceOnHold") },
                { "free", this.safeString(balance, "balance") },
            };
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    /**
     * @method
     * @name cex#fetchOrders
     * @description fetches information on multiple orders made by the user
     * @see https://trade.cex.io/docs/#rest-private-api-calls-orders
     * @param {string} status order status to fetch for
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] the earliest time in ms to fetch orders for
     * @param {int} [limit] the maximum number of order structures to retrieve
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest entry
     * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> fetchOrdersByStatus(object status, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object isClosedOrders = (isEqual(status, "closed"));
        if (isTrue(isClosedOrders))
        {
            ((IDictionary<string,object>)request)["archived"] = true;
        }
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["pageSize"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["serverCreateTimestampFrom"] = since;
        } else if (isTrue(isClosedOrders))
        {
            // exchange requires a `since` parameter for closed orders, so set default to allowed 365
            ((IDictionary<string,object>)request)["serverCreateTimestampFrom"] = subtract(this.milliseconds(), multiply(multiply(multiply(multiply(364, 24), 60), 60), 1000));
        }
        object until = null;
        var untilparametersVariable = this.handleParamInteger2(parameters, "until", "till");
        until = ((IList<object>)untilparametersVariable)[0];
        parameters = ((IList<object>)untilparametersVariable)[1];
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["serverCreateTimestampTo"] = until;
        }
        object response = await this.privatePostGetMyOrders(this.extend(request, parameters));
        //
        // if called without `pair`
        //
        //    {
        //        "ok": "ok",
        //        "data": [
        //            {
        //                "orderId": "1313003",
        //                "clientOrderId": "037F0AFEB93A",
        //                "clientId": "up421412345",
        //                "accountId": null,
        //                "status": "FILLED",
        //                "statusIsFinal": true,
        //                "currency1": "AI",
        //                "currency2": "USDT",
        //                "side": "BUY",
        //                "orderType": "Market",
        //                "timeInForce": "IOC",
        //                "comment": null,
        //                "rejectCode": null,
        //                "rejectReason": null,
        //                "initialOnHoldAmountCcy1": null,
        //                "initialOnHoldAmountCcy2": "10.23456700",
        //                "executedAmountCcy1": "25.606429",
        //                "executedAmountCcy2": "10.20904439",
        //                "requestedAmountCcy1": null,
        //                "requestedAmountCcy2": "10.20904439",
        //                "originalAmountCcy2": "10.23456700",
        //                "feeAmount": "0.02552261",
        //                "feeCurrency": "USDT",
        //                "price": null,
        //                "averagePrice": "0.3986",
        //                "clientCreateTimestamp": "1728474625320",
        //                "serverCreateTimestamp": "1728474624956",
        //                "lastUpdateTimestamp": "1728474628015",
        //                "expireTime": null,
        //                "effectiveTime": null
        //            },
        //            ...
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    /**
     * @method
     * @name cex#fetchClosedOrders
     * @see https://trade.cex.io/docs/#rest-private-api-calls-orders
     * @description fetches information on multiple canceled orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] timestamp in ms of the earliest order, default is undefined
     * @param {int} [limit] max number of orders to return, default is undefined
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("closed", symbol, since, limit, parameters);
    }

    /**
     * @method
     * @name cex#fetchOpenOrders
     * @see https://trade.cex.io/docs/#rest-private-api-calls-orders
     * @description fetches information on multiple canceled orders made by the user
     * @param {string} symbol unified market symbol of the market orders were made in
     * @param {int} [since] timestamp in ms of the earliest order, default is undefined
     * @param {int} [limit] max number of orders to return, default is undefined
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        return await this.fetchOrdersByStatus("open", symbol, since, limit, parameters);
    }

    /**
     * @method
     * @name cex#fetchOpenOrder
     * @description fetches information on an open order made by the user
     * @see https://trade.cex.io/docs/#rest-private-api-calls-orders
     * @param {string} id order id
     * @param {string} [symbol] unified symbol of the market the order was made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> fetchOpenOrder(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderId", parseInt(id) },
        };
        object result = await this.fetchOpenOrders(symbol, null, null, this.extend(request, parameters));
        return getValue(result, 0);
    }

    /**
     * @method
     * @name cex#fetchClosedOrder
     * @description fetches information on an closed order made by the user
     * @see https://trade.cex.io/docs/#rest-private-api-calls-orders
     * @param {string} id order id
     * @param {string} [symbol] unified symbol of the market the order was made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async virtual Task<object> fetchClosedOrder(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderId", parseInt(id) },
        };
        object result = await this.fetchClosedOrders(symbol, null, null, this.extend(request, parameters));
        return getValue(result, 0);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "FILLED", "closed" },
            { "CANCELLED", "canceled" },
        };
        return this.safeString(statuses, status, null);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        //                "orderId": "1313003",
        //                "clientOrderId": "037F0AFEB93A",
        //                "clientId": "up421412345",
        //                "accountId": null,
        //                "status": "FILLED",
        //                "statusIsFinal": true,
        //                "currency1": "AI",
        //                "currency2": "USDT",
        //                "side": "BUY",
        //                "orderType": "Market",
        //                "timeInForce": "IOC",
        //                "comment": null,
        //                "rejectCode": null,
        //                "rejectReason": null,
        //                "initialOnHoldAmountCcy1": null,
        //                "initialOnHoldAmountCcy2": "10.23456700",
        //                "executedAmountCcy1": "25.606429",
        //                "executedAmountCcy2": "10.20904439",
        //                "requestedAmountCcy1": null,
        //                "requestedAmountCcy2": "10.20904439",
        //                "originalAmountCcy2": "10.23456700",
        //                "feeAmount": "0.02552261",
        //                "feeCurrency": "USDT",
        //                "price": null,
        //                "averagePrice": "0.3986",
        //                "clientCreateTimestamp": "1728474625320",
        //                "serverCreateTimestamp": "1728474624956",
        //                "lastUpdateTimestamp": "1728474628015",
        //                "expireTime": null,
        //                "effectiveTime": null
        //
        object currency1 = this.safeString(order, "currency1");
        object currency2 = this.safeString(order, "currency2");
        object marketId = null;
        if (isTrue(isTrue(!isEqual(currency1, null)) && isTrue(!isEqual(currency2, null))))
        {
            marketId = add(add(currency1, "-"), currency2);
        }
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object fee = new Dictionary<string, object>() {};
        object feeAmount = this.safeNumber(order, "feeAmount");
        if (isTrue(!isEqual(feeAmount, null)))
        {
            object currencyId = this.safeString(order, "feeCurrency");
            object feeCode = this.safeCurrencyCode(currencyId);
            ((IDictionary<string,object>)fee)["currency"] = feeCode;
            ((IDictionary<string,object>)fee)["fee"] = feeAmount;
        }
        object timestamp = this.safeInteger(order, "serverCreateTimestamp");
        object requestedBase = this.safeNumber(order, "requestedAmountCcy1");
        object executedBase = this.safeNumber(order, "executedAmountCcy1");
        // const requestedQuote = this.safeNumber (order, 'requestedAmountCcy2');
        object executedQuote = this.safeNumber(order, "executedAmountCcy2");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", this.safeString(order, "orderId") },
            { "clientOrderId", this.safeString(order, "clientOrderId") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastUpdateTimestamp", this.safeInteger(order, "lastUpdateTimestamp") },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", this.safeStringLower(order, "orderType") },
            { "timeInForce", this.safeString(order, "timeInForce") },
            { "postOnly", null },
            { "side", this.safeStringLower(order, "side") },
            { "price", this.safeNumber(order, "price") },
            { "stopPrice", this.safeNumber(order, "stopPrice") },
            { "amount", requestedBase },
            { "cost", executedQuote },
            { "average", this.safeNumber(order, "averagePrice") },
            { "filled", executedBase },
            { "remaining", null },
            { "status", status },
            { "fee", fee },
            { "trades", null },
            { "info", order },
        }, market);
    }

    /**
     * @method
     * @name cex#createOrder
     * @description create a trade order
     * @see https://trade.cex.io/docs/#rest-private-api-calls-new-order
     * @param {string} symbol unified symbol of the market to create an order in
     * @param {string} type 'market' or 'limit'
     * @param {string} side 'buy' or 'sell'
     * @param {float} amount how much of currency you want to trade in units of base currency
     * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.accountId] account-id to use (default is empty string)
     * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object accountId = null;
        var accountIdparametersVariable = this.handleOptionAndParams(parameters, "createOrder", "accountId");
        accountId = ((IList<object>)accountIdparametersVariable)[0];
        parameters = ((IList<object>)accountIdparametersVariable)[1];
        if (isTrue(isEqual(accountId, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " createOrder() : API trading is now allowed from main account, set params[\"accountId\"] or .options[\"createOrder\"][\"accountId\"] to the name of your sub-account")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "clientOrderId", this.uuid() },
            { "currency1", getValue(market, "baseId") },
            { "currency2", getValue(market, "quoteId") },
            { "accountId", accountId },
            { "orderType", this.capitalize(((string)type).ToLower()) },
            { "side", ((string)side).ToUpper() },
            { "timestamp", this.milliseconds() },
            { "amountCcy1", this.amountToPrecision(symbol, amount) },
        };
        object timeInForce = null;
        var timeInForceparametersVariable = this.handleOptionAndParams(parameters, "createOrder", "timeInForce", "GTC");
        timeInForce = ((IList<object>)timeInForceparametersVariable)[0];
        parameters = ((IList<object>)timeInForceparametersVariable)[1];
        if (isTrue(isEqual(type, "limit")))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            ((IDictionary<string,object>)request)["timeInForce"] = timeInForce;
        }
        object triggerPrice = null;
        var triggerPriceparametersVariable = this.handleParamString(parameters, "triggerPrice");
        triggerPrice = ((IList<object>)triggerPriceparametersVariable)[0];
        parameters = ((IList<object>)triggerPriceparametersVariable)[1];
        if (isTrue(!isEqual(triggerPrice, null)))
        {
            ((IDictionary<string,object>)request)["type"] = "Stop Limit";
            ((IDictionary<string,object>)request)["stopPrice"] = triggerPrice;
        }
        object response = await this.privatePostDoMyNewOrder(this.extend(request, parameters));
        //
        // on success
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "messageType": "executionReport",
        //            "clientId": "up132245425",
        //            "orderId": "1318485",
        //            "clientOrderId": "b5b6cd40-154c-4c1c-bd51-4a442f3d50b9",
        //            "accountId": "sub1",
        //            "status": "FILLED",
        //            "currency1": "LTC",
        //            "currency2": "USDT",
        //            "side": "BUY",
        //            "executedAmountCcy1": "0.23000000",
        //            "executedAmountCcy2": "15.09030000",
        //            "requestedAmountCcy1": "0.23000000",
        //            "requestedAmountCcy2": null,
        //            "orderType": "Market",
        //            "timeInForce": null,
        //            "comment": null,
        //            "executionType": "Trade",
        //            "executionId": "1726747124624_101_41116",
        //            "transactTime": "2024-10-15T15:08:12.794Z",
        //            "expireTime": null,
        //            "effectiveTime": null,
        //            "averagePrice": "65.61",
        //            "lastQuantity": "0.23000000",
        //            "lastAmountCcy1": "0.23000000",
        //            "lastAmountCcy2": "15.09030000",
        //            "lastPrice": "65.61",
        //            "feeAmount": "0.03772575",
        //            "feeCurrency": "USDT",
        //            "clientCreateTimestamp": "1729004892014",
        //            "serverCreateTimestamp": "1729004891628",
        //            "lastUpdateTimestamp": "1729004892786"
        //        }
        //    }
        //
        // on failure, there are extra fields
        //
        //             "status": "REJECTED",
        //             "requestedAmountCcy1": null,
        //             "orderRejectReason": "{\\" code \\ ":405,\\" reason \\ ":\\" Either AmountCcy1(OrderQty)or AmountCcy2(CashOrderQty)should be specified for market order not both \\ "}",
        //             "rejectCode": 405,
        //             "rejectReason": "Either AmountCcy1 (OrderQty) or AmountCcy2 (CashOrderQty) should be specified for market order not both",
        //
        object data = this.safeDict(response, "data");
        return this.parseOrder(data, market);
    }

    /**
     * @method
     * @name cex#cancelOrder
     * @description cancels an open order
     * @see https://trade.cex.io/docs/#rest-private-api-calls-cancel-order
     * @param {string} id order id
     * @param {string} symbol unified symbol of the market the order was made in
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderId", parseInt(id) },
            { "cancelRequestId", add("c_", ((object)(this.milliseconds())).ToString()) },
            { "timestamp", this.milliseconds() },
        };
        object response = await this.privatePostDoCancelMyOrder(this.extend(request, parameters));
        //
        //      {"ok":"ok","data":{}}
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseOrder(data);
    }

    /**
     * @method
     * @name cex#cancelAllOrders
     * @description cancel all open orders in a market
     * @see https://trade.cex.io/docs/#rest-private-api-calls-cancel-all-orders
     * @param {string} symbol alpaca cancelAllOrders cannot setting symbol, it will cancel all open orders
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
     */
    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostDoCancelAllOrders(parameters);
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "clientOrderIds": [
        //                "3AF77B67109F"
        //            ]
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        object ids = this.safeList(data, "clientOrderIds", new List<object>() {});
        object orders = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            ((IList<object>)orders).Add(new Dictionary<string, object>() {
                { "clientOrderId", id },
            });
        }
        return this.parseOrders(orders);
    }

    /**
     * @method
     * @name cex#fetchLedger
     * @description fetch the history of changes, actions done by the user or operations that altered the balance of the user
     * @see https://trade.cex.io/docs/#rest-private-api-calls-transaction-history
     * @param {string} [code] unified currency code
     * @param {int} [since] timestamp in ms of the earliest ledger entry
     * @param {int} [limit] max number of ledger entries to return
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {int} [params.until] timestamp in ms of the latest ledger entry
     * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
     */
    public async override Task<object> fetchLedger(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["dateFrom"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["pageSize"] = limit;
        }
        object until = null;
        var untilparametersVariable = this.handleParamInteger2(parameters, "until", "till");
        until = ((IList<object>)untilparametersVariable)[0];
        parameters = ((IList<object>)untilparametersVariable)[1];
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["dateTo"] = until;
        }
        object response = await this.privatePostGetMyTransactionHistory(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": [
        //            {
        //                "transactionId": "30367722",
        //                "timestamp": "2024-10-14T14:08:49.987Z",
        //                "accountId": "",
        //                "type": "withdraw",
        //                "amount": "-12.39060600",
        //                "details": "Withdraw fundingId=1235039 clientId=up421412345 walletTxId=76337154166",
        //                "currency": "USDT"
        //            },
        //            ...
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseLedger(data, currency, since, limit);
    }

    public override object parseLedgerEntry(object item, object currency = null)
    {
        object amount = this.safeString(item, "amount");
        object direction = null;
        if (isTrue(Precise.stringLe(amount, "0")))
        {
            direction = "out";
            amount = Precise.stringMul("-1", amount);
        } else
        {
            direction = "in";
        }
        object currencyId = this.safeString(item, "currency");
        currency = this.safeCurrency(currencyId, currency);
        object code = this.safeCurrencyCode(currencyId, currency);
        object timestampString = this.safeString(item, "timestamp");
        object timestamp = this.parse8601(timestampString);
        object type = this.safeString(item, "type");
        return this.safeLedgerEntry(new Dictionary<string, object>() {
            { "info", item },
            { "id", this.safeString(item, "transactionId") },
            { "direction", direction },
            { "account", this.safeString(item, "accountId", "") },
            { "referenceAccount", null },
            { "referenceId", null },
            { "type", this.parseLedgerEntryType(type) },
            { "currency", code },
            { "amount", this.parseNumber(amount) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "before", null },
            { "after", null },
            { "status", null },
            { "fee", null },
        }, currency);
    }

    public virtual object parseLedgerEntryType(object type)
    {
        object ledgerType = new Dictionary<string, object>() {
            { "deposit", "deposit" },
            { "withdraw", "withdrawal" },
            { "commission", "fee" },
        };
        return this.safeString(ledgerType, type, type);
    }

    /**
     * @method
     * @name cex#fetchDepositsWithdrawals
     * @description fetch history of deposits and withdrawals
     * @see https://trade.cex.io/docs/#rest-private-api-calls-funding-history
     * @param {string} [code] unified currency code for the currency of the deposit/withdrawals, default is undefined
     * @param {int} [since] timestamp in ms of the earliest deposit/withdrawal, default is undefined
     * @param {int} [limit] max number of deposit/withdrawals to return, default is undefined
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
     */
    public async override Task<object> fetchDepositsWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["dateFrom"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["pageSize"] = limit;
        }
        object until = null;
        var untilparametersVariable = this.handleParamInteger2(parameters, "until", "till");
        until = ((IList<object>)untilparametersVariable)[0];
        parameters = ((IList<object>)untilparametersVariable)[1];
        if (isTrue(!isEqual(until, null)))
        {
            ((IDictionary<string,object>)request)["dateTo"] = until;
        }
        object response = await this.privatePostGetMyFundingHistory(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": [
        //            {
        //                "clientId": "up421412345",
        //                "accountId": "",
        //                "currency": "USDT",
        //                "direction": "withdraw",
        //                "amount": "12.39060600",
        //                "commissionAmount": "0.00000000",
        //                "status": "approved",
        //                "updatedAt": "2024-10-14T14:08:50.013Z",
        //                "txId": "30367718",
        //                "details": {}
        //            },
        //            ...
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        object currencyId = this.safeString(transaction, "currency");
        object direction = this.safeString(transaction, "direction");
        object type = ((bool) isTrue((isEqual(direction, "withdraw")))) ? "withdrawal" : "deposit";
        object code = this.safeCurrencyCode(currencyId, currency);
        object updatedAt = this.safeString(transaction, "updatedAt");
        object timestamp = this.parse8601(updatedAt);
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", this.safeString(transaction, "txId") },
            { "txid", null },
            { "type", type },
            { "currency", code },
            { "network", null },
            { "amount", this.safeNumber(transaction, "amount") },
            { "status", this.parseTransactionStatus(this.safeString(transaction, "status")) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "address", null },
            { "addressFrom", null },
            { "addressTo", null },
            { "tag", null },
            { "tagFrom", null },
            { "tagTo", null },
            { "updated", null },
            { "comment", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", code },
                { "cost", this.safeNumber(transaction, "commissionAmount") },
            } },
            { "internal", null },
        };
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "rejected", "rejected" },
            { "pending", "pending" },
            { "approved", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    /**
     * @method
     * @name cex#transfer
     * @description transfer currency internally between wallets on the same account
     * @see https://trade.cex.io/docs/#rest-private-api-calls-internal-transfer
     * @param {string} code unified currency code
     * @param {float} amount amount to transfer
     * @param {string} fromAccount 'SPOT', 'FUND', or 'CONTRACT'
     * @param {string} toAccount 'SPOT', 'FUND', or 'CONTRACT'
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
     */
    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object transfer = null;
        if (isTrue(isTrue(!isEqual(toAccount, "")) && isTrue(!isEqual(fromAccount, ""))))
        {
            transfer = await this.transferBetweenSubAccounts(code, amount, fromAccount, toAccount, parameters);
        } else
        {
            transfer = await this.transferBetweenMainAndSubAccount(code, amount, fromAccount, toAccount, parameters);
        }
        object fillResponseFromRequest = this.handleOption("transfer", "fillResponseFromRequest", true);
        if (isTrue(fillResponseFromRequest))
        {
            ((IDictionary<string,object>)transfer)["fromAccount"] = fromAccount;
            ((IDictionary<string,object>)transfer)["toAccount"] = toAccount;
        }
        return transfer;
    }

    public async virtual Task<object> transferBetweenMainAndSubAccount(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object fromMain = (isEqual(fromAccount, ""));
        object targetAccount = ((bool) isTrue(fromMain)) ? toAccount : fromAccount;
        object guid = this.safeString(parameters, "guid", this.uuid());
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "accountId", targetAccount },
            { "clientTxId", guid },
        };
        object response = null;
        if (isTrue(fromMain))
        {
            response = await this.privatePostDoDepositFundsFromWallet(this.extend(request, parameters));
        } else
        {
            response = await this.privatePostDoWithdrawalFundsToWallet(this.extend(request, parameters));
        }
        // both endpoints return the same structure, the only difference is that
        // the "accountId" is filled with the "subAccount"
        //
        //     {
        //         "ok": "ok",
        //         "data": {
        //             "accountId": "sub1",
        //             "clientTxId": "27ba8284-67cf-4386-9ec7-80b3871abd45",
        //             "currency": "USDT",
        //             "status": "approved"
        //         }
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTransfer(data, currency);
    }

    public async virtual Task<object> transferBetweenSubAccounts(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "currency", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "fromAccountId", fromAccount },
            { "toAccountId", toAccount },
        };
        object response = await this.privatePostDoMyInternalTransfer(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "transactionId": "30225415"
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTransfer(data, currency);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        // transferBetweenSubAccounts
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "transactionId": "30225415"
        //        }
        //    }
        //
        // transfer between main/sub
        //
        //     {
        //         "ok": "ok",
        //         "data": {
        //             "accountId": "sub1",
        //             "clientTxId": "27ba8284-67cf-4386-9ec7-80b3871abd45",
        //             "currency": "USDT",
        //             "status": "approved"
        //         }
        //     }
        //
        object currencyId = this.safeString(transfer, "currency");
        object currencyCode = this.safeCurrencyCode(currencyId, currency);
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", this.safeString2(transfer, "transactionId", "clientTxId") },
            { "timestamp", null },
            { "datetime", null },
            { "currency", currencyCode },
            { "amount", null },
            { "fromAccount", null },
            { "toAccount", null },
            { "status", this.parseTransactionStatus(this.safeString(transfer, "status")) },
        };
    }

    /**
     * @method
     * @name cex#fetchDepositAddress
     * @description fetch the deposit address for a currency associated with this account
     * @see https://trade.cex.io/docs/#rest-private-api-calls-deposit-address
     * @param {string} code unified currency code
     * @param {object} [params] extra parameters specific to the exchange API endpoint
     * @param {string} [params.accountId] account-id (default to empty string) to refer to (at this moment, only sub-accounts allowed by exchange)
     * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
     */
    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        object accountId = null;
        var accountIdparametersVariable = this.handleOptionAndParams(parameters, "createOrder", "accountId");
        accountId = ((IList<object>)accountIdparametersVariable)[0];
        parameters = ((IList<object>)accountIdparametersVariable)[1];
        if (isTrue(isEqual(accountId, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchDepositAddress() : main account is not allowed to fetch deposit address from api, set params[\"accountId\"] or .options[\"createOrder\"][\"accountId\"] to the name of your sub-account")) ;
        }
        await this.loadMarkets();
        object networkCode = null;
        var networkCodeparametersVariable = this.handleNetworkCodeAndParams(parameters);
        networkCode = ((IList<object>)networkCodeparametersVariable)[0];
        parameters = ((IList<object>)networkCodeparametersVariable)[1];
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "accountId", accountId },
            { "currency", getValue(currency, "id") },
            { "blockchain", this.networkCodeToId(networkCode) },
        };
        object response = await this.privatePostGetDepositAddress(this.extend(request, parameters));
        //
        //    {
        //        "ok": "ok",
        //        "data": {
        //            "address": "TCr..................1AE",
        //            "accountId": "sub1",
        //            "currency": "USDT",
        //            "blockchain": "tron"
        //        }
        //    }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseDepositAddress(data, currency);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        object address = this.safeString(depositAddress, "address");
        object currencyId = this.safeString(depositAddress, "currency");
        currency = this.safeCurrency(currencyId, currency);
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "info", depositAddress },
            { "currency", getValue(currency, "code") },
            { "network", this.networkIdToCode(this.safeString(depositAddress, "blockchain")) },
            { "address", address },
            { "tag", null },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(isEqual(method, "GET")))
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            } else
            {
                body = this.json(query);
                headers = new Dictionary<string, object>() {
                    { "Content-Type", "application/json" },
                };
            }
        } else
        {
            this.checkRequiredCredentials();
            object seconds = ((object)this.seconds()).ToString();
            body = this.json(query);
            object auth = add(add(path, seconds), body);
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256, "base64");
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/json" },
                { "X-AGGR-KEY", this.apiKey },
                { "X-AGGR-TIMESTAMP", seconds },
                { "X-AGGR-SIGNATURE", signature },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        // in some cases, like from createOrder, exchange returns nested escaped JSON string:
        //      {"ok":"ok","data":{"messageType":"executionReport", "orderRejectReason":"{\"code\":405}"} }
        // and because of `.parseJson` bug, we need extra fix
        if (isTrue(isEqual(response, null)))
        {
            if (isTrue(isEqual(body, null)))
            {
                throw new NullResponse ((string)add(this.id, " returned empty response")) ;
            } else if (isTrue(isEqual(getValue(body, 0), "{")))
            {
                object fixedVar = this.fixStringifiedJsonMembers(body);
                response = this.parseJson(fixedVar);
            } else
            {
                throw new NullResponse ((string)add(add(this.id, " returned unparsed response: "), body)) ;
            }
        }
        object error = this.safeString(response, "error");
        if (isTrue(!isEqual(error, null)))
        {
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), error, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), error, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        // check errors in order-engine (the responses are not standard, so we parse here)
        if (isTrue(isGreaterThanOrEqual(getIndexOf(url, "do_my_new_order"), 0)))
        {
            object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
            object rejectReason = this.safeString(data, "rejectReason");
            if (isTrue(!isEqual(rejectReason, null)))
            {
                this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), rejectReason, rejectReason);
                throw new ExchangeError ((string)add(add(this.id, " createOrder() "), rejectReason)) ;
            }
        }
        return null;
    }
}
