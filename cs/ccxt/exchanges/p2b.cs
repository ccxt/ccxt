namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class p2b : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "p2b" },
            { "name", "p2b" },
            { "countries", new List<object>() {"LT"} },
            { "rateLimit", 100 },
            { "version", "v2" },
            { "pro", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", false },
                { "cancelOrder", true },
                { "cancelOrders", false },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", false },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "createOrders", false },
                { "createPostOnlyOrder", false },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchAccounts", false },
                { "fetchBalance", true },
                { "fetchBorrowInterest", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDeposit", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", false },
                { "fetchDepositsWithdrawals", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLedger", false },
                { "fetchLedgerEntry", false },
                { "fetchLeverageTiers", false },
                { "fetchMarketLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterest", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", false },
                { "fetchOrders", true },
                { "fetchOrderTrades", true },
                { "fetchPermissions", false },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingLimits", false },
                { "fetchTransactionFee", false },
                { "fetchTransactionFees", false },
                { "fetchTransactions", false },
                { "fetchTransfers", false },
                { "fetchWithdrawAddresses", false },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMargin", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "signIn", false },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1m" },
                { "1h", "1h" },
                { "1d", "1d" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "extension", ".json" },
                { "referral", "https://p2pb2b.com?referral=ee784c53" },
                { "logo", "https://github.com/ccxt/ccxt/assets/43336371/8da13a80-1f0a-49be-bb90-ff8b25164755" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.p2pb2b.com/api/v2/public" },
                    { "private", "https://api.p2pb2b.com/api/v2" },
                } },
                { "www", "https://p2pb2b.com/" },
                { "doc", "https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md" },
                { "fees", "https://p2pb2b.com/fee-schedule/" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "markets", 1 },
                        { "market", 1 },
                        { "tickers", 1 },
                        { "ticker", 1 },
                        { "book", 1 },
                        { "history", 1 },
                        { "depth/result", 1 },
                        { "market/kline", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new Dictionary<string, object>() {
                        { "account/balances", 1 },
                        { "account/balance", 1 },
                        { "order/new", 1 },
                        { "order/cancel", 1 },
                        { "orders", 1 },
                        { "account/market_order_history", 1 },
                        { "account/market_deal_history", 1 },
                        { "account/order", 1 },
                        { "account/order_history", 1 },
                        { "account/executed_history", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", true },
                    { "percentage", true },
                    { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.2")}, new List<object> {this.parseNumber("1"), this.parseNumber("0.19")}, new List<object> {this.parseNumber("5"), this.parseNumber("0.18")}, new List<object> {this.parseNumber("10"), this.parseNumber("0.17")}, new List<object> {this.parseNumber("25"), this.parseNumber("0.16")}, new List<object> {this.parseNumber("75"), this.parseNumber("0.15")}, new List<object> {this.parseNumber("100"), this.parseNumber("0.14")}, new List<object> {this.parseNumber("150"), this.parseNumber("0.13")}, new List<object> {this.parseNumber("300"), this.parseNumber("0.12")}, new List<object> {this.parseNumber("450"), this.parseNumber("0.11")}, new List<object> {this.parseNumber("500"), this.parseNumber("0.1")}} },
                    { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.2")}, new List<object> {this.parseNumber("1"), this.parseNumber("0.18")}, new List<object> {this.parseNumber("5"), this.parseNumber("0.16")}, new List<object> {this.parseNumber("10"), this.parseNumber("0.14")}, new List<object> {this.parseNumber("25"), this.parseNumber("0.12")}, new List<object> {this.parseNumber("75"), this.parseNumber("0.1")}, new List<object> {this.parseNumber("100"), this.parseNumber("0.08")}, new List<object> {this.parseNumber("150"), this.parseNumber("0.06")}, new List<object> {this.parseNumber("300"), this.parseNumber("0.04")}, new List<object> {this.parseNumber("450"), this.parseNumber("0.02")}, new List<object> {this.parseNumber("500"), this.parseNumber("0.01")}} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {} },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "1001", typeof(AuthenticationError) },
                { "1002", typeof(AuthenticationError) },
                { "1003", typeof(AuthenticationError) },
                { "1004", typeof(AuthenticationError) },
                { "1005", typeof(AuthenticationError) },
                { "1006", typeof(AuthenticationError) },
                { "1007", typeof(AuthenticationError) },
                { "1008", typeof(AuthenticationError) },
                { "1009", typeof(AuthenticationError) },
                { "1010", typeof(AuthenticationError) },
                { "1011", typeof(AuthenticationError) },
                { "1012", typeof(AuthenticationError) },
                { "1013", typeof(AuthenticationError) },
                { "1014", typeof(AuthenticationError) },
                { "1015", typeof(AuthenticationError) },
                { "1016", typeof(AuthenticationError) },
                { "2010", typeof(BadRequest) },
                { "2020", typeof(BadRequest) },
                { "2021", typeof(BadRequest) },
                { "2030", typeof(BadRequest) },
                { "2040", typeof(InsufficientFunds) },
                { "2050", typeof(BadRequest) },
                { "2051", typeof(BadRequest) },
                { "2052", typeof(BadRequest) },
                { "2060", typeof(BadRequest) },
                { "2061", typeof(BadRequest) },
                { "2062", typeof(BadRequest) },
                { "2070", typeof(BadRequest) },
                { "3001", typeof(BadRequest) },
                { "3020", typeof(BadRequest) },
                { "3030", typeof(BadRequest) },
                { "3040", typeof(BadRequest) },
                { "3050", typeof(BadRequest) },
                { "3060", typeof(BadRequest) },
                { "3070", typeof(BadRequest) },
                { "3080", typeof(BadRequest) },
                { "3090", typeof(BadRequest) },
                { "3100", typeof(BadRequest) },
                { "3110", typeof(BadRequest) },
                { "4001", typeof(ExchangeNotAvailable) },
                { "6010", typeof(InsufficientFunds) },
            } },
            { "options", new Dictionary<string, object>() {} },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchMarkets
        * @description retrieves data on all markets for bigone
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#markets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetMarkets(parameters);
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": [
        //            {
        //                "name": "ETH_BTC",
        //                "stock": "ETH",
        //                "money": "BTC",
        //                "precision": {
        //                    "money": "6",
        //                    "stock": "4",
        //                    "fee": "4"
        //                },
        //                "limits": {
        //                    "min_amount": "0.001",
        //                    "max_amount": "100000",
        //                    "step_size": "0.0001",
        //                    "min_price": "0.00001",
        //                    "max_price": "922327",
        //                    "tick_size": "0.00001",
        //                    "min_total": "0.0001"
        //                }
        //            },
        //            ...
        //        ]
        //    }
        //
        object markets = this.safeValue(response, "result", new List<object>() {});
        return this.parseMarkets(markets);
    }

    public override object parseMarket(object market)
    {
        object marketId = this.safeString(market, "name");
        object baseId = this.safeString(market, "stock");
        object quoteId = this.safeString(market, "money");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object limits = this.safeValue(market, "limits");
        object maxAmount = this.safeString(limits, "max_amount");
        object maxPrice = this.safeString(limits, "max_price");
        return new Dictionary<string, object>() {
            { "id", marketId },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", true },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.safeNumber(limits, "step_size") },
                { "price", this.safeNumber(limits, "tick_size") },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", this.safeNumber(limits, "min_amount") },
                    { "max", this.parseNumber(this.omitZero(maxAmount)) },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", this.safeNumber(limits, "min_price") },
                    { "max", this.parseNumber(this.omitZero(maxPrice)) },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        };
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://futures-docs.poloniex.com/#get-real-time-ticker-of-all-symbols
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetTickers(parameters);
        //
        //    {
        //        success: true,
        //        errorCode: '',
        //        message: '',
        //        result: {
        //            KNOLIX_BTC: {
        //                at: '1699252631',
        //                ticker: {
        //                    bid: '0.0000332',
        //                    ask: '0.0000333',
        //                    low: '0.0000301',
        //                    high: '0.0000338',
        //                    last: '0.0000333',
        //                    vol: '15.66',
        //                    deal: '0.000501828',
        //                    change: '10.63'
        //                }
        //            },
        //            ...
        //        },
        //        cache_time: '1699252631.103631',
        //        current_time: '1699252644.487566'
        //    }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        return this.parseTickers(result, symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        //
        //    {
        //        success: true,
        //        errorCode: '',
        //        message: '',
        //        result: {
        //            bid: '0.342',
        //            ask: '0.3421',
        //            open: '0.3317',
        //            high: '0.3499',
        //            low: '0.3311',
        //            last: '0.3421',
        //            volume: '17855383.1',
        //            deal: '6107478.3423',
        //            change: '3.13'
        //        },
        //        cache_time: '1699252953.832795',
        //        current_time: '1699252958.859391'
        //    }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object timestamp = this.safeIntegerProduct(response, "cache_time", 1000);
        return this.extend(new Dictionary<string, object>() {
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        }, this.parseTicker(result, market));
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // parseTickers
        //
        //    {
        //        at: '1699252631',
        //        ticker: {
        //            bid: '0.0000332',
        //            ask: '0.0000333',
        //            low: '0.0000301',
        //            high: '0.0000338',
        //            last: '0.0000333',
        //            vol: '15.66',
        //            deal: '0.000501828',
        //            change: '10.63'
        //        }
        //    }
        //
        // parseTicker
        //
        //    {
        //        bid: '0.342',
        //        ask: '0.3421',
        //        open: '0.3317',
        //        high: '0.3499',
        //        low: '0.3311',
        //        last: '0.3421',
        //        volume: '17855383.1',
        //        deal: '6107478.3423',
        //        change: '3.13'
        //    }
        //
        object timestamp = this.safeIntegerProduct(ticker, "at", 1000);
        if (isTrue(inOp(ticker, "ticker")))
        {
            ticker = this.safeValue(ticker, "ticker");
        }
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", this.safeString(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", this.safeString(ticker, "change") },
            { "average", null },
            { "baseVolume", this.safeString2(ticker, "vol", "volume") },
            { "quoteVolume", this.safeString(ticker, "deal") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name p2bfutures#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#depth-result
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {string} [params.interval] 0 (default), 0.00000001, 0.0000001, 0.000001, 0.00001, 0.0001, 0.001, 0.01, 0.1, 1
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetDepthResult(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "asks": [
        //                [
        //                    "4.53",     // Price
        //                    "523.95"    // Amount
        //                ],
        //                ...
        //            ],
        //            "bids": [
        //                [
        //                    "4.51",
        //                    "244.75"
        //                ],
        //                ...
        //            ]
        //        },
        //        "cache_time": 1698733470.469175,
        //        "current_time": 1698733470.469274
        //    }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object timestamp = this.safeIntegerProduct(response, "current_time", 1000);
        return this.parseOrderBook(result, getValue(market, "symbol"), timestamp, "bids", "asks", 0, 1);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#history
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] 1-100, default=50
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} params.lastId order id
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object lastId = this.safeInteger(parameters, "lastId");
        if (isTrue(isEqual(lastId, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchTrades () requires an extra parameter params[\"lastId\"]")) ;
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "lastId", lastId },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetHistory(this.extend(request, parameters));
        //
        //    {
        //        success: true,
        //        errorCode: '',
        //        message: '',
        //        result: [
        //            {
        //                id: '7495738622',
        //                type: 'sell',
        //                time: '1699255565.445418',
        //                amount: '252.6',
        //                price: '0.3422'
        //            },
        //            ...
        //        ],
        //        cache_time: '1699255571.413633',
        //        current_time: '1699255571.413828'
        //    }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseTrades(result, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades
        //
        //    {
        //        id: '7495738622',
        //        type: 'sell',
        //        time: '1699255565.445418',
        //        amount: '252.6',
        //        price: '0.3422'
        //    }
        //
        // fetchMyTrades
        //
        //    {
        //        "deal_id": 7450617292,              // Deal id
        //        "deal_time": 1698506956.66224,      // Deal execution time
        //        "deal_order_id": 171955225751,      // Deal order id
        //        "opposite_order_id": 171955110512,  // Opposite order id
        //        "side": "sell",                     // Deal side
        //        "price": "0.05231",                 // Deal price
        //        "amount": "0.002",                  // Deal amount
        //        "deal": "0.00010462",               // Total (price * amount)
        //        "deal_fee": "0.000000188316",       // Deal fee
        //        "role": "taker",                    // Role. Taker or maker
        //        "isSelfTrade": false                // is self trade
        //    }
        //
        // fetchOrderTrades
        //
        //    {
        //        "id": 7429883128,             // Deal id
        //        "time": 1698237535.41196,     // Deal execution time
        //        "fee": "0.01755848704",       // Deal fee
        //        "price": "34293.92",          // Deal price
        //        "amount": "0.00032",          // Deal amount
        //        "dealOrderId": 171366551416,  // Deal order id
        //        "role": 1,                    // Deal role (1 - maker, 2 - taker)
        //        "deal": "10.9740544"          // Total (price * amount)
        //    }
        //
        object timestamp = this.safeIntegerProduct2(trade, "time", "deal_time", 1000);
        object takerOrMaker = this.safeString(trade, "role");
        if (isTrue(isEqual(takerOrMaker, "1")))
        {
            takerOrMaker = "maker";
        } else if (isTrue(isEqual(takerOrMaker, "2")))
        {
            takerOrMaker = "taker";
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", this.safeString2(trade, "id", "deal_id") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", this.safeString(market, "symbol") },
            { "order", this.safeString2(trade, "dealOrderId", "deal_order_id") },
            { "type", null },
            { "side", this.safeString2(trade, "type", "side") },
            { "takerOrMaker", takerOrMaker },
            { "price", this.safeString(trade, "price") },
            { "amount", this.safeString(trade, "amount") },
            { "cost", this.safeString(trade, "deal") },
            { "fee", new Dictionary<string, object>() {
                { "currency", getValue(market, "quote") },
                { "cost", this.safeString2(trade, "fee", "deal_fee") },
            } },
        }, market);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name poloniexfutures#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#kline
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe 1m, 1h, or 1d
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] 1-500, default=50
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.offset] default=0, with this value the last candles are returned
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "interval", timeframe },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetMarketKline(this.extend(request, parameters));
        //
        //    {
        //        success: true,
        //        errorCode: '',
        //        message: '',
        //        result: [
        //            [
        //                1699253400,       // Kline open time
        //                '0.3429',         // Open price
        //                '0.3427',         // Close price
        //                '0.3429',         // Highest price
        //                '0.3427',         // Lowest price
        //                '1900.4',         // Volume for stock currency
        //                '651.46278',      // Volume for money currency
        //                'ADA_USDT'        // Market name
        //            ],
        //            ...
        //        ],
        //        cache_time: '1699256375.030292',
        //        current_time: '1699256375.030494'
        //    }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseOHLCVs(result, market, timeframe, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //    [
        //        1699253400,       // Kline open time
        //        '0.3429',         // Open price
        //        '0.3427',         // Close price
        //        '0.3429',         // Highest price
        //        '0.3427',         // Lowest price
        //        '1900.4',         // Volume for stock currency
        //        '651.46278',      // Volume for money currency
        //        'ADA_USDT'        // Market name
        //    ],
        //
        return new List<object> {this.safeIntegerProduct(ohlcv, 0, 1000), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#all-balances
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostAccountBalances(parameters);
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "USDT": {
        //              "available": "71.81328046",
        //              "freeze": "10.46103091"
        //            },
        //            "BTC": {
        //              "available": "0.00135674",
        //              "freeze": "0.00020003"
        //            }
        //        }
        //    }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        return this.parseBalance(result);
    }

    public override object parseBalance(object response)
    {
        //
        //    {
        //        "USDT": {
        //            "available": "71.81328046",
        //            "freeze": "10.46103091"
        //        },
        //        "BTC": {
        //            "available": "0.00135674",
        //            "freeze": "0.00020003"
        //        }
        //    }
        //
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object keys = new List<object>(((IDictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object currencyId = getValue(keys, i);
            object balance = getValue(response, currencyId);
            object code = this.safeCurrencyCode(currencyId);
            object used = this.safeString(balance, "freeze");
            object available = this.safeString(balance, "available");
            object account = new Dictionary<string, object>() {
                { "free", available },
                { "used", used },
            };
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#createOrder
        * @description create a trade order
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#create-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type must be 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} price the price at which the order is to be fullfilled, in units of the quote currency
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(type, "market")))
        {
            throw new BadRequest ((string)add(this.id, " createOrder () can only accept orders with type \"limit\"")) ;
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "side", side },
            { "amount", this.amountToPrecision(symbol, amount) },
            { "price", this.priceToPrecision(symbol, price) },
        };
        object response = await this.privatePostOrderNew(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "orderId": 171906478744,          // Order id
        //            "market": "ETH_BTC",              // Market name
        //            "price": "0.04348",               // Price
        //            "side": "buy",                    // Side
        //            "type": "limit",                  // Order type
        //            "timestamp": 1698484861.746517,   // Order creation time
        //            "dealMoney": "0",                 // Filled total
        //            "dealStock": "0",                 // Filled amount
        //            "amount": "0.0277",               // Original amount
        //            "takerFee": "0.002",              // taker fee
        //            "makerFee": "0.002",              // maker fee
        //            "left": "0.0277",                 // Unfilled amount
        //            "dealFee": "0"                    // Filled fee
        //        }
        //    }
        //
        object result = this.safeDict(response, "result");
        return this.parseOrder(result, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#cancelOrder
        * @description cancels an open order
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#cancel-order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "orderId", id },
        };
        object response = await this.privatePostOrderCancel(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "orderId": 171906478744,
        //            "market": "ETH_BTC",
        //            "price": "0.04348",
        //            "side": "buy",
        //            "type": "limit",
        //            "timestamp": 1698484861.746517,
        //            "dealMoney": "0",
        //            "dealStock": "0",
        //            "amount": "0.0277",
        //            "takerFee": "0.002",
        //            "makerFee": "0.002",
        //            "left": "0.0277",
        //            "dealFee": "0"
        //        }
        //    }
        //
        object result = this.safeDict(response, "result");
        return this.parseOrder(result);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#open-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {int} [params.offset] 0-10000, default=0
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders () requires the symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privatePostOrders(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": [
        //            {
        //                "orderId": 171913325964,
        //                "market": "ETH_BTC",
        //                "price": "0.06534",
        //                "side": "sell",
        //                "type": "limit",
        //                "timestamp": 1698487986.836821,
        //                "dealMoney": "0",
        //                "dealStock": "0",
        //                "amount": "0.0018",
        //                "takerFee": "0.0018",
        //                "makerFee": "0.0016",
        //                "left": "0.0018",
        //                "dealFee": "0"
        //            },
        //            ...
        //        ]
        //    }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseOrders(result, market, since, limit);
    }

    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#deals-by-order-id
        * @param {string} id order id
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] 1-100, default=50
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {int} [params.offset] 0-10000, default=0
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.safeMarket(symbol);
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privatePostAccountOrder(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "offset": 0,
        //            "limit": 50,
        //            "records": [
        //                {
        //                    "id": 7429883128,             // Deal id
        //                    "time": 1698237535.41196,     // Deal execution time
        //                    "fee": "0.01755848704",       // Deal fee
        //                    "price": "34293.92",          // Deal price
        //                    "amount": "0.00032",          // Deal amount
        //                    "dealOrderId": 171366551416,  // Deal order id
        //                    "role": 1,                    // Deal role (1 - maker, 2 - taker)
        //                    "deal": "10.9740544"          // Total (price * amount)
        //                }
        //            ]
        //        }
        //    }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object records = this.safeList(result, "records", new List<object>() {});
        return this.parseTrades(records, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchMyTrades
        * @description fetch all trades made by the user, only the transaction records in the past 3 month can be queried, the time between since and params["until"] cannot be longer than 24 hours
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#deals-history-by-market
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for, default = params["until"] - 86400000
        * @param {int} [limit] 1-100, default=50
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch orders for, default = current timestamp or since + 86400000
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {int} [params.offset] 0-10000, default=0
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, "until");
        if (isTrue(isEqual(until, null)))
        {
            if (isTrue(isEqual(since, null)))
            {
                until = this.milliseconds();
            } else
            {
                until = add(since, 86400000);
            }
        }
        if (isTrue(isEqual(since, null)))
        {
            since = subtract(until, 86400000);
        }
        if (isTrue(isGreaterThan((subtract(until, since)), 86400000)))
        {
            throw new BadRequest ((string)add(this.id, " fetchMyTrades () the time between since and params[\"until\"] cannot be greater than 24 hours")) ;
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "startTime", this.parseToInt(divide(since, 1000)) },
            { "endTime", this.parseToInt(divide(until, 1000)) },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privatePostAccountMarketDealHistory(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "total": 2,                                 // Total records in the queried range
        //            "deals": [
        //                {
        //                    "deal_id": 7450617292,              // Deal id
        //                    "deal_time": 1698506956.66224,      // Deal execution time
        //                    "deal_order_id": 171955225751,      // Deal order id
        //                    "opposite_order_id": 171955110512,  // Opposite order id
        //                    "side": "sell",                     // Deal side
        //                    "price": "0.05231",                 // Deal price
        //                    "amount": "0.002",                  // Deal amount
        //                    "deal": "0.00010462",               // Total (price * amount)
        //                    "deal_fee": "0.000000188316",       // Deal fee
        //                    "role": "taker",                    // Role. Taker or maker
        //                    "isSelfTrade": false                // is self trade
        //                },
        //                ...
        //            ]
        //        }
        //    }
        //
        object result = this.safeValue(response, "result", new Dictionary<string, object>() {});
        object deals = this.safeList(result, "deals", new List<object>() {});
        return this.parseTrades(deals, market, since, limit);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name p2b#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user, the time between since and params["untnil"] cannot be longer than 24 hours
        * @see https://github.com/P2B-team/p2b-api-docs/blob/master/api-doc.md#orders-history-by-market
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for, default = params["until"] - 86400000
        * @param {int} [limit] 1-100, default=50
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch orders for, default = current timestamp or since + 86400000
        *
        * EXCHANGE SPECIFIC PARAMETERS
        * @param {int} [params.offset] 0-10000, default=0
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object until = this.safeInteger(parameters, "until");
        parameters = this.omit(parameters, "until");
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        if (isTrue(isEqual(until, null)))
        {
            if (isTrue(isEqual(since, null)))
            {
                until = this.milliseconds();
            } else
            {
                until = add(since, 86400000);
            }
        }
        if (isTrue(isEqual(since, null)))
        {
            since = subtract(until, 86400000);
        }
        if (isTrue(isGreaterThan((subtract(until, since)), 86400000)))
        {
            throw new BadRequest ((string)add(this.id, " fetchClosedOrders () the time between since and params[\"until\"] cannot be greater than 24 hours")) ;
        }
        object request = new Dictionary<string, object>() {
            { "startTime", this.parseToInt(divide(since, 1000)) },
            { "endTime", this.parseToInt(divide(until, 1000)) },
        };
        if (isTrue(!isEqual(market, null)))
        {
            ((IDictionary<string,object>)request)["market"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privatePostAccountOrderHistory(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "errorCode": "",
        //        "message": "",
        //        "result": {
        //            "LTC_USDT": [
        //                {
        //                    "id": 173985944395,
        //                    "amount": "0.1",
        //                    "price": "73",
        //                    "type": "limit",
        //                    "side": "sell",
        //                    "ctime": 1699436194.390845,
        //                    "ftime": 1699436194.390847,
        //                    "market": "LTC_USDT",
        //                    "takerFee": "0.002",
        //                    "makerFee": "0.002",
        //                    "dealFee": "0.01474",
        //                    "dealStock": "0.1",
        //                    "dealMoney": "7.37"
        //                }
        //            ]
        //        }
        //    }
        //
        object result = this.safeValue(response, "result");
        object orders = new List<object>() {};
        object keys = new List<object>(((IDictionary<string,object>)result).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object marketId = getValue(keys, i);
            object marketOrders = getValue(result, marketId);
            object parsedOrders = this.parseOrders(marketOrders, market, since, limit);
            orders = this.arrayConcat(orders, parsedOrders);
        }
        return orders;
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // cancelOrder, fetchOpenOrders, createOrder
        //
        //    {
        //        "orderId": 171906478744,
        //        "market": "ETH_BTC",
        //        "price": "0.04348",
        //        "side": "buy",
        //        "type": "limit",
        //        "timestamp": 1698484861.746517,
        //        "dealMoney": "0",
        //        "dealStock": "0",
        //        "amount": "0.0277",
        //        "takerFee": "0.002",
        //        "makerFee": "0.002",
        //        "left": "0.0277",
        //        "dealFee": "0"
        //    }
        //
        // fetchClosedOrders
        //
        //    {
        //        "id": 171366547790,           // Order id
        //        "amount": "0.00032",          // Original amount
        //        "price": "34293.92",          // Order price
        //        "type": "limit",              // Order type
        //        "side": "sell",               // Order side
        //        "ctime": 1698237533.497241,   // Order creation time
        //        "ftime": 1698237535.41196,    // Order fill time
        //        "market": "BTC_USDT",         // Market name
        //        "takerFee": "0.0018",         // Taker fee
        //        "makerFee": "0.0016",         // Market fee
        //        "dealFee": "0.01755848704",   // Deal fee
        //        "dealStock": "0.00032",       // Filled amount
        //        "dealMoney": "10.9740544"     // Filled total
        //    }
        //
        object timestamp = this.safeIntegerProduct2(order, "timestamp", "ctime", 1000);
        object marketId = this.safeString(order, "market");
        market = this.safeMarket(marketId, market);
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString2(order, "id", "orderId") },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", getValue(market, "symbol") },
            { "type", this.safeString(order, "type") },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", this.safeString(order, "side") },
            { "price", this.safeString(order, "price") },
            { "stopPrice", null },
            { "amount", this.safeString(order, "amount") },
            { "cost", null },
            { "average", null },
            { "filled", this.safeString(order, "dealStock") },
            { "remaining", this.safeString(order, "left") },
            { "status", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", getValue(market, "quote") },
                { "cost", this.safeString(order, "dealFee") },
            } },
            { "trades", null },
        }, market);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), this.implodeParams(path, parameters));
        parameters = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(method, "GET")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        }
        if (isTrue(isEqual(api, "private")))
        {
            ((IDictionary<string,object>)parameters)["request"] = add("/api/v2/", path);
            ((IDictionary<string,object>)parameters)["nonce"] = ((object)this.nonce()).ToString();
            object payload = this.stringToBase64(this.json(parameters)); // Body json encoded in base64
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/json" },
                { "X-TXC-APIKEY", this.apiKey },
                { "X-TXC-PAYLOAD", payload },
                { "X-TXC-SIGNATURE", this.hmac(this.encode(payload), this.encode(this.secret), sha512) },
            };
            body = this.json(parameters);
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (isTrue(isEqual(code, 400)))
        {
            object error = this.safeValue(response, "error");
            object errorCode = this.safeString(error, "code");
            object feedback = add(add(this.id, " "), this.json(response));
            this.throwExactlyMatchedException(this.exceptions, errorCode, feedback);
        }
        return null;
    }
}
