namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class coinmate : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "coinmate" },
            { "name", "CoinMate" },
            { "countries", new List<object>() {"GB", "CZ", "EU"} },
            { "rateLimit", 1000 },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositsWithdrawals", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingFee", true },
                { "fetchTradingFees", false },
                { "fetchTransactions", "emulated" },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", false },
                { "withdraw", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/51840849/87460806-1c9f3f00-c616-11ea-8c46-a77018a8f3f4.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://coinmate.io/api" },
                } },
                { "www", "https://coinmate.io" },
                { "fees", "https://coinmate.io/fees" },
                { "doc", new List<object>() {"https://coinmate.docs.apiary.io", "https://coinmate.io/developers"} },
                { "referral", "https://coinmate.io?referral=YTFkM1RsOWFObVpmY1ZjMGREQmpTRnBsWjJJNVp3PT0" },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
                { "uid", true },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"orderBook", "ticker", "tickerAll", "products", "transactions", "tradingPairs"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"balances", "bitcoinCashWithdrawal", "bitcoinCashDepositAddresses", "bitcoinDepositAddresses", "bitcoinWithdrawal", "bitcoinWithdrawalFees", "buyInstant", "buyLimit", "cancelOrder", "cancelOrderWithInfo", "createVoucher", "dashDepositAddresses", "dashWithdrawal", "ethereumWithdrawal", "ethereumDepositAddresses", "litecoinWithdrawal", "litecoinDepositAddresses", "openOrders", "order", "orderHistory", "orderById", "pusherAuth", "redeemVoucher", "replaceByBuyLimit", "replaceByBuyInstant", "replaceBySellLimit", "replaceBySellInstant", "rippleDepositAddresses", "rippleWithdrawal", "sellInstant", "sellLimit", "transactionHistory", "traderFees", "tradeHistory", "transfer", "transferHistory", "unconfirmedBitcoinDeposits", "unconfirmedBitcoinCashDeposits", "unconfirmedDashDeposits", "unconfirmedEthereumDeposits", "unconfirmedLitecoinDeposits", "unconfirmedRippleDeposits", "cancelAllOpenOrders", "withdrawVirtualCurrency", "virtualCurrencyDepositAddresses", "unconfirmedVirtualCurrencyDeposits", "adaWithdrawal", "adaDepositAddresses", "unconfirmedAdaDeposits", "solWithdrawal", "solDepositAddresses", "unconfirmedSolDeposits"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", true },
                    { "percentage", true },
                    { "maker", this.parseNumber("0.0012") },
                    { "taker", this.parseNumber("0.0025") },
                    { "tiers", new Dictionary<string, object>() {
                        { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.0035")}, new List<object> {this.parseNumber("10000"), this.parseNumber("0.0023")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.0021")}, new List<object> {this.parseNumber("250000"), this.parseNumber("0.0020")}, new List<object> {this.parseNumber("500000"), this.parseNumber("0.0015")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.0013")}, new List<object> {this.parseNumber("3000000"), this.parseNumber("0.0010")}, new List<object> {this.parseNumber("15000000"), this.parseNumber("0.0005")}} },
                        { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.003")}, new List<object> {this.parseNumber("10000"), this.parseNumber("0.0011")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.0010")}, new List<object> {this.parseNumber("250000"), this.parseNumber("0.0008")}, new List<object> {this.parseNumber("500000"), this.parseNumber("0.0005")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.0003")}, new List<object> {this.parseNumber("3000000"), this.parseNumber("0.0002")}, new List<object> {this.parseNumber("15000000"), this.parseNumber("0")}} },
                    } },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "withdraw", new Dictionary<string, object>() {
                    { "fillResponsefromRequest", true },
                    { "methods", new Dictionary<string, object>() {
                        { "BTC", "privatePostBitcoinWithdrawal" },
                        { "LTC", "privatePostLitecoinWithdrawal" },
                        { "BCH", "privatePostBitcoinCashWithdrawal" },
                        { "ETH", "privatePostEthereumWithdrawal" },
                        { "XRP", "privatePostRippleWithdrawal" },
                        { "DASH", "privatePostDashWithdrawal" },
                        { "DAI", "privatePostDaiWithdrawal" },
                        { "ADA", "privatePostAdaWithdrawal" },
                        { "SOL", "privatePostSolWithdrawal" },
                    } },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "No order with given ID", typeof(OrderNotFound) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "Not enough account balance available", typeof(InsufficientFunds) },
                    { "Incorrect order ID", typeof(InvalidOrder) },
                    { "Minimum Order Size ", typeof(InvalidOrder) },
                    { "max allowed precision", typeof(InvalidOrder) },
                    { "TOO MANY REQUESTS", typeof(RateLimitExceeded) },
                    { "Access denied.", typeof(AuthenticationError) },
                } },
            } },
            { "precisionMode", TICK_SIZE },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchMarkets
        * @description retrieves data on all markets for coinmate
        * @see https://coinmate.docs.apiary.io/#reference/trading-pairs/get-trading-pairs/get
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetTradingPairs(parameters);
        //
        //     {
        //         "error":false,
        //         "errorMessage":null,
        //         "data": [
        //             {
        //                 "name":"BTC_EUR",
        //                 "firstCurrency":"BTC",
        //                 "secondCurrency":"EUR",
        //                 "priceDecimals":2,
        //                 "lotDecimals":8,
        //                 "minAmount":0.0002,
        //                 "tradesWebSocketChannelId":"trades-BTC_EUR",
        //                 "orderBookWebSocketChannelId":"order_book-BTC_EUR",
        //                 "tradeStatisticsWebSocketChannelId":"statistics-BTC_EUR"
        //             },
        //         ]
        //     }
        //
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object market = getValue(data, i);
            object id = this.safeString(market, "name");
            object baseId = this.safeString(market, "firstCurrency");
            object quoteId = this.safeString(market, "secondCurrency");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object symbol = add(add(bs, "/"), quote);
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", symbol },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", null },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "lotDecimals"))) },
                    { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "priceDecimals"))) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "minAmount") },
                        { "max", null },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", market },
            });
        }
        return result;
    }

    public override object parseBalance(object response)
    {
        object balances = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object currencyIds = new List<object>(((IDictionary<string,object>)balances).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object code = this.safeCurrencyCode(currencyId);
            object balance = this.safeValue(balances, currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "available");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "reserved");
            ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "balance");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://coinmate.docs.apiary.io/#reference/balance/get-balances/post
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostBalances(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://coinmate.docs.apiary.io/#reference/order-book/get-order-book/get
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
            { "groupByPriceLimit", "False" },
        };
        object response = await this.publicGetOrderBook(this.extend(request, parameters));
        object orderbook = getValue(response, "data");
        object timestamp = this.safeTimestamp(orderbook, "timestamp");
        return this.parseOrderBook(orderbook, getValue(market, "symbol"), timestamp, "bids", "asks", "price", "amount");
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://coinmate.docs.apiary.io/#reference/ticker/get-ticker/get
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
        };
        object response = await this.publicGetTicker(this.extend(request, parameters));
        //
        //     {
        //         "error": false,
        //         "errorMessage": null,
        //         "data": {
        //             "last": 0.55105,
        //             "high": 0.56439,
        //             "low": 0.54358,
        //             "amount": 37038.993381,
        //             "bid": 0.54595,
        //             "ask": 0.55324,
        //             "change": 3.03659243,
        //             "open": 0.53481,
        //             "timestamp": 1708074779
        //         }
        //     }
        //
        object data = this.safeDict(response, "data");
        return this.parseTicker(data, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://coinmate.docs.apiary.io/#reference/ticker/get-ticker-all/get
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.publicGetTickerAll(parameters);
        //
        //     {
        //         "error": false,
        //         "errorMessage": null,
        //         "data": {
        //             "LTC_BTC": {
        //                 "last": "0.001337",
        //                 "high": "0.001348",
        //                 "low": "0.001332",
        //                 "amount": "34.75472959",
        //                 "bid": "0.001348",
        //                 "ask": "0.001356",
        //                 "change": "-0.74239050",
        //                 "open": "0.001347",
        //                 "timestamp": "1708074485"
        //             }
        //         }
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object keys = new List<object>(((IDictionary<string,object>)data).Keys);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object market = this.market(getValue(keys, i));
            object ticker = this.parseTicker(this.safeValue(data, getValue(keys, i)), market);
            ((IDictionary<string,object>)result)[(string)getValue(market, "symbol")] = ticker;
        }
        return this.filterByArrayTickers(result, "symbol", symbols);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "last": "0.001337",
        //         "high": "0.001348",
        //         "low": "0.001332",
        //         "amount": "34.75472959",
        //         "bid": "0.001348",
        //         "ask": "0.001356",
        //         "change": "-0.74239050",
        //         "open": "0.001347",
        //         "timestamp": "1708074485"
        //     }
        //
        object timestamp = this.safeTimestamp(ticker, "timestamp");
        object last = this.safeNumber(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeNumber(ticker, "high") },
            { "low", this.safeNumber(ticker, "low") },
            { "bid", this.safeNumber(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeNumber(ticker, "ask") },
            { "vwap", null },
            { "askVolume", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeNumber(ticker, "amount") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchDepositsWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchDepositsWithdrawals
        * @description fetch history of deposits and withdrawals
        * @see https://coinmate.docs.apiary.io/#reference/transfers/get-transfer-history/post
        * @param {string} [code] unified currency code for the currency of the deposit/withdrawals, default is undefined
        * @param {int} [since] timestamp in ms of the earliest deposit/withdrawal, default is undefined
        * @param {int} [limit] max number of deposit/withdrawals to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "limit", 1000 },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["timestampFrom"] = since;
        }
        if (isTrue(!isEqual(code, null)))
        {
            object currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
        }
        object response = await this.privatePostTransferHistory(this.extend(request, parameters));
        object items = getValue(response, "data");
        return this.parseTransactions(items, null, since, limit);
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "COMPLETED", "ok" },
            { "WAITING", "pending" },
            { "SENT", "pending" },
            { "CREATED", "pending" },
            { "OK", "ok" },
            { "NEW", "pending" },
            { "CANCELED", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // deposits
        //
        //     {
        //         "transactionId": 1862815,
        //         "timestamp": 1516803982388,
        //         "amountCurrency": "LTC",
        //         "amount": 1,
        //         "fee": 0,
        //         "walletType": "LTC",
        //         "transferType": "DEPOSIT",
        //         "transferStatus": "COMPLETED",
        //         "txid":
        //         "ccb9255dfa874e6c28f1a64179769164025329d65e5201849c2400abd6bce245",
        //         "destination": "LQrtSKA6LnhcwRrEuiborQJnjFF56xqsFn",
        //         "destinationTag": null
        //     }
        //
        // withdrawals
        //
        //     {
        //         "transactionId": 2140966,
        //         "timestamp": 1519314282976,
        //         "amountCurrency": "EUR",
        //         "amount": 8421.7228,
        //         "fee": 16.8772,
        //         "walletType": "BANK_WIRE",
        //         "transferType": "WITHDRAWAL",
        //         "transferStatus": "COMPLETED",
        //         "txid": null,
        //         "destination": null,
        //         "destinationTag": null
        //     }
        //
        // withdraw
        //
        //     {
        //         "id": 2132583,
        //     }
        //
        object timestamp = this.safeInteger(transaction, "timestamp");
        object currencyId = this.safeString(transaction, "amountCurrency");
        object code = this.safeCurrencyCode(currencyId, currency);
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", this.safeString2(transaction, "transactionId", "id") },
            { "txid", this.safeString(transaction, "txid") },
            { "type", this.safeStringLower(transaction, "transferType") },
            { "currency", code },
            { "network", this.safeString(transaction, "walletType") },
            { "amount", this.safeNumber(transaction, "amount") },
            { "status", this.parseTransactionStatus(this.safeString(transaction, "transferStatus")) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "address", this.safeString(transaction, "destination") },
            { "addressFrom", null },
            { "addressTo", null },
            { "tag", this.safeString(transaction, "destinationTag") },
            { "tagFrom", null },
            { "tagTo", null },
            { "updated", null },
            { "comment", null },
            { "internal", null },
            { "fee", new Dictionary<string, object>() {
                { "cost", this.safeNumber(transaction, "fee") },
                { "currency", code },
                { "rate", null },
            } },
        };
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#withdraw
        * @description make a withdrawal
        * @see https://coinmate.docs.apiary.io/#reference/bitcoin-withdrawal-and-deposit/withdraw-bitcoins/post
        * @see https://coinmate.docs.apiary.io/#reference/litecoin-withdrawal-and-deposit/withdraw-litecoins/post
        * @see https://coinmate.docs.apiary.io/#reference/ethereum-withdrawal-and-deposit/withdraw-ethereum/post
        * @see https://coinmate.docs.apiary.io/#reference/ripple-withdrawal-and-deposit/withdraw-ripple/post
        * @see https://coinmate.docs.apiary.io/#reference/cardano-withdrawal-and-deposit/withdraw-cardano/post
        * @see https://coinmate.docs.apiary.io/#reference/solana-withdrawal-and-deposit/withdraw-solana/post
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object withdrawOptions = this.safeValue(this.options, "withdraw", new Dictionary<string, object>() {});
        object methods = this.safeValue(withdrawOptions, "methods", new Dictionary<string, object>() {});
        object method = this.safeString(methods, code);
        if (isTrue(isEqual(method, null)))
        {
            object allowedCurrencies = new List<object>(((IDictionary<string,object>)methods).Keys);
            throw new ExchangeError ((string)add(add(this.id, " withdraw() only allows withdrawing the following currencies: "), String.Join(", ", ((IList<object>)allowedCurrencies).ToArray()))) ;
        }
        object request = new Dictionary<string, object>() {
            { "amount", this.currencyToPrecision(code, amount) },
            { "address", address },
        };
        if (isTrue(!isEqual(tag, null)))
        {
            ((IDictionary<string,object>)request)["destinationTag"] = tag;
        }
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        //
        //     {
        //         "error": false,
        //         "errorMessage": null,
        //         "data": {
        //             "id": "9e0a37fc-4ab4-4b9d-b9e7-c9c8f7c4c8e0"
        //         }
        //     }
        //
        object data = this.safeValue(response, "data");
        object transaction = this.parseTransaction(data, currency);
        object fillResponseFromRequest = this.safeBool(withdrawOptions, "fillResponseFromRequest", true);
        if (isTrue(fillResponseFromRequest))
        {
            ((IDictionary<string,object>)transaction)["amount"] = amount;
            ((IDictionary<string,object>)transaction)["currency"] = code;
            ((IDictionary<string,object>)transaction)["address"] = address;
            ((IDictionary<string,object>)transaction)["tag"] = tag;
            ((IDictionary<string,object>)transaction)["type"] = "withdrawal";
            ((IDictionary<string,object>)transaction)["status"] = "pending";
        }
        return transaction;
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://coinmate.docs.apiary.io/#reference/trade-history/get-trade-history/post
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(limit, null)))
        {
            limit = 1000;
        }
        object request = new Dictionary<string, object>() {
            { "limit", limit },
        };
        if (isTrue(!isEqual(symbol, null)))
        {
            object market = this.market(symbol);
            ((IDictionary<string,object>)request)["currencyPair"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["timestampFrom"] = since;
        }
        object response = await this.privatePostTradeHistory(this.extend(request, parameters));
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, null, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchMyTrades (private)
        //
        //     {
        //         "transactionId": 2671819,
        //         "createdTimestamp": 1529649127605,
        //         "currencyPair": "LTC_BTC",
        //         "type": "BUY",
        //         "orderType": "LIMIT",
        //         "orderId": 101810227,
        //         "amount": 0.01,
        //         "price": 0.01406,
        //         "fee": 0,
        //         "feeType": "MAKER"
        //     }
        //
        // fetchTrades (public)
        //
        //     {
        //         "timestamp":1561598833416,
        //         "transactionId":"4156303",
        //         "price":10950.41,
        //         "amount":0.004,
        //         "currencyPair":"BTC_EUR",
        //         "tradeType":"BUY"
        //     }
        //
        object marketId = this.safeString(trade, "currencyPair");
        market = this.safeMarket(marketId, market, "_");
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString(trade, "amount");
        object side = this.safeStringLower2(trade, "type", "tradeType");
        object type = this.safeStringLower(trade, "orderType");
        object orderId = this.safeString(trade, "orderId");
        object id = this.safeString(trade, "transactionId");
        object timestamp = this.safeInteger2(trade, "timestamp", "createdTimestamp");
        object fee = null;
        object feeCostString = this.safeString(trade, "fee");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", getValue(market, "quote") },
            };
        }
        object takerOrMaker = this.safeString(trade, "feeType");
        takerOrMaker = ((bool) isTrue((isEqual(takerOrMaker, "MAKER")))) ? "maker" : "taker";
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "type", type },
            { "side", side },
            { "order", orderId },
            { "takerOrMaker", takerOrMaker },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://coinmate.docs.apiary.io/#reference/transactions/transactions/get
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
            { "minutesIntoHistory", 10 },
        };
        object response = await this.publicGetTransactions(this.extend(request, parameters));
        //
        //     {
        //         "error":false,
        //         "errorMessage":null,
        //         "data":[
        //             {
        //                 "timestamp":1561598833416,
        //                 "transactionId":"4156303",
        //                 "price":10950.41,
        //                 "amount":0.004,
        //                 "currencyPair":"BTC_EUR",
        //                 "tradeType":"BUY"
        //             }
        //         ]
        //     }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, market, since, limit);
    }

    public async override Task<object> fetchTradingFee(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchTradingFee
        * @description fetch the trading fees for a market
        * @see https://coinmate.docs.apiary.io/#reference/trader-fees/get-trading-fees/post
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [fee structure]{@link https://docs.ccxt.com/#/?id=fee-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
        };
        object response = await this.privatePostTraderFees(this.extend(request, parameters));
        //
        //     {
        //         "error": false,
        //         "errorMessage": null,
        //         "data": { maker: '0.3', taker: "0.35", timestamp: "1646253217815" }
        //     }
        //
        object data = this.safeValue(response, "data", new Dictionary<string, object>() {});
        object makerString = this.safeString(data, "maker");
        object takerString = this.safeString(data, "taker");
        object maker = this.parseNumber(Precise.stringDiv(makerString, "100"));
        object taker = this.parseNumber(Precise.stringDiv(takerString, "100"));
        return new Dictionary<string, object>() {
            { "info", data },
            { "symbol", getValue(market, "symbol") },
            { "maker", maker },
            { "taker", taker },
            { "percentage", true },
            { "tierBased", true },
        };
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://coinmate.docs.apiary.io/#reference/order/get-open-orders/post
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.privatePostOpenOrders(this.extend(new Dictionary<string, object>() {}, parameters));
        object extension = new Dictionary<string, object>() {
            { "status", "open" },
        };
        return this.parseOrders(getValue(response, "data"), null, since, limit, extension);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://coinmate.docs.apiary.io/#reference/order/order-history/post
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
        };
        // offset param that appears in other parts of the API doesn't appear to be supported here
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privatePostOrderHistory(this.extend(request, parameters));
        return this.parseOrders(getValue(response, "data"), market, since, limit);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "FILLED", "closed" },
            { "CANCELLED", "canceled" },
            { "PARTIALLY_FILLED", "open" },
            { "OPEN", "open" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOrderType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "LIMIT", "limit" },
            { "MARKET", "market" },
        };
        return this.safeString(types, type, type);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // limit sell
        //
        //     {
        //         "id": 781246605,
        //         "timestamp": 1584480015133,
        //         "trailingUpdatedTimestamp": null,
        //         "type": "SELL",
        //         "currencyPair": "ETH_BTC",
        //         "price": 0.0345,
        //         "amount": 0.01,
        //         "stopPrice": null,
        //         "originalStopPrice": null,
        //         "marketPriceAtLastUpdate": null,
        //         "marketPriceAtOrderCreation": null,
        //         "orderTradeType": "LIMIT",
        //         "hidden": false,
        //         "trailing": false,
        //         "clientOrderId": null
        //     }
        //
        // limit buy
        //
        //     {
        //         "id": 67527001,
        //         "timestamp": 1517931722613,
        //         "trailingUpdatedTimestamp": null,
        //         "type": "BUY",
        //         "price": 5897.24,
        //         "remainingAmount": 0.002367,
        //         "originalAmount": 0.1,
        //         "stopPrice": null,
        //         "originalStopPrice": null,
        //         "marketPriceAtLastUpdate": null,
        //         "marketPriceAtOrderCreation": null,
        //         "status": "CANCELLED",
        //         "orderTradeType": "LIMIT",
        //         "hidden": false,
        //         "avgPrice": null,
        //         "trailing": false,
        //     }
        //
        // cancelOrder
        //
        //    {
        //        "success": true,
        //        "remainingAmount": 0.1
        //    }
        //
        object id = this.safeString(order, "id");
        object timestamp = this.safeInteger(order, "timestamp");
        object side = this.safeStringLower(order, "type");
        object priceString = this.safeString(order, "price");
        object amountString = this.safeString(order, "originalAmount");
        object remainingString = this.safeString2(order, "remainingAmount", "amount");
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object type = this.parseOrderType(this.safeString(order, "orderTradeType"));
        object averageString = this.safeString(order, "avgPrice");
        object marketId = this.safeString(order, "currencyPair");
        object symbol = this.safeSymbol(marketId, market, "_");
        object clientOrderId = this.safeString(order, "clientOrderId");
        object stopPrice = this.safeNumber(order, "stopPrice");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", priceString },
            { "stopPrice", stopPrice },
            { "triggerPrice", stopPrice },
            { "amount", amountString },
            { "cost", null },
            { "average", averageString },
            { "filled", null },
            { "remaining", remainingString },
            { "status", status },
            { "trades", null },
            { "info", order },
            { "fee", null },
        }, market);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#createOrder
        * @description create a trade order
        * @see https://coinmate.docs.apiary.io/#reference/order/buy-limit-order/post
        * @see https://coinmate.docs.apiary.io/#reference/order/sell-limit-order/post
        * @see https://coinmate.docs.apiary.io/#reference/order/buy-instant-order/post
        * @see https://coinmate.docs.apiary.io/#reference/order/sell-instant-order/post
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object method = add("privatePost", this.capitalize(side));
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
        };
        if (isTrue(isEqual(type, "market")))
        {
            if (isTrue(isEqual(side, "buy")))
            {
                ((IDictionary<string,object>)request)["total"] = this.amountToPrecision(symbol, amount); // amount in fiat
            } else
            {
                ((IDictionary<string,object>)request)["amount"] = this.amountToPrecision(symbol, amount); // amount in fiat
            }
            method = add(method, "Instant");
        } else
        {
            ((IDictionary<string,object>)request)["amount"] = this.amountToPrecision(symbol, amount); // amount in crypto
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            method = add(method, this.capitalize(type));
        }
        object response = await ((Task<object>)callDynamically(this, method, new object[] { this.extend(request, parameters) }));
        object id = this.safeString(response, "data");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", response },
            { "id", id },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://coinmate.docs.apiary.io/#reference/order/get-order-by-orderid/post
        * @see https://coinmate.docs.apiary.io/#reference/order/get-order-by-clientorderid/post
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        object market = null;
        if (isTrue(symbol))
        {
            market = this.market(symbol);
        }
        object response = await this.privatePostOrderById(this.extend(request, parameters));
        object data = this.safeDict(response, "data");
        return this.parseOrder(data, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinmate#cancelOrder
        * @description cancels an open order
        * @see https://coinmate.docs.apiary.io/#reference/order/cancel-order/post
        * @param {string} id order id
        * @param {string} symbol not used by coinmate cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        //   {"error":false,"errorMessage":null,"data":{"success":true,"remainingAmount":0.01}}
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "orderId", id },
        };
        object response = await this.privatePostCancelOrderWithInfo(this.extend(request, parameters));
        //
        //    {
        //        "error": false,
        //        "errorMessage": null,
        //        "data": {
        //          "success": true,
        //          "remainingAmount": 0.1
        //        }
        //    }
        //
        object data = this.safeDict(response, "data");
        return this.parseOrder(data);
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), path);
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object auth = add(add(nonce, this.uid), this.apiKey);
            object signature = this.hmac(this.encode(auth), this.encode(this.secret), sha256);
            body = this.urlencode(this.extend(new Dictionary<string, object>() {
                { "clientId", this.uid },
                { "nonce", nonce },
                { "publicKey", this.apiKey },
                { "signature", ((string)signature).ToUpper() },
            }, parameters));
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(!isEqual(response, null)))
        {
            if (isTrue(inOp(response, "error")))
            {
                // {"error":true,"errorMessage":"Minimum Order Size 0.01 ETH","data":null}
                if (isTrue(getValue(response, "error")))
                {
                    object message = this.safeString(response, "errorMessage");
                    object feedback = add(add(this.id, " "), message);
                    this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
                    this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
                    throw new ExchangeError ((string)add(add(this.id, " "), this.json(response))) ;
                }
            }
        }
        if (isTrue(isGreaterThan(code, 400)))
        {
            if (isTrue(body))
            {
                object feedback = add(add(this.id, " "), body);
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), body, feedback);
                this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), body, feedback);
                throw new ExchangeError ((string)feedback) ;
            }
            throw new ExchangeError ((string)add(add(this.id, " "), body)) ;
        }
        return null;
    }
}
