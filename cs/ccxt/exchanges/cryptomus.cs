namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class cryptomus : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "cryptomus" },
            { "name", "Cryptomus" },
            { "countries", new List<object>() {"CA"} },
            { "rateLimit", 100 },
            { "version", "v1" },
            { "certified", false },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", false },
                { "cancelAllOrdersAfter", false },
                { "cancelOrder", true },
                { "cancelOrders", false },
                { "cancelWithdraw", false },
                { "closePosition", false },
                { "createConvertTrade", false },
                { "createDepositAddress", false },
                { "createMarketBuyOrderWithCost", false },
                { "createMarketOrder", false },
                { "createMarketOrderWithCost", false },
                { "createMarketSellOrderWithCost", false },
                { "createOrder", true },
                { "createOrderWithTakeProfitAndStopLoss", false },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopLossOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "createTakeProfitOrder", false },
                { "createTrailingAmountOrder", false },
                { "createTrailingPercentOrder", false },
                { "createTriggerOrder", false },
                { "fetchAccounts", false },
                { "fetchBalance", true },
                { "fetchCanceledAndClosedOrders", true },
                { "fetchCanceledOrders", false },
                { "fetchClosedOrder", false },
                { "fetchClosedOrders", false },
                { "fetchConvertCurrencies", false },
                { "fetchConvertQuote", false },
                { "fetchConvertTrade", false },
                { "fetchConvertTradeHistory", false },
                { "fetchCurrencies", true },
                { "fetchDepositAddress", false },
                { "fetchDeposits", false },
                { "fetchDepositsWithdrawals", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchLedger", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginAdjustmentHistory", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", false },
                { "fetchOHLCV", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrder", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchOrderTrades", false },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchStatus", false },
                { "fetchTicker", false },
                { "fetchTickers", true },
                { "fetchTime", false },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchTransactions", false },
                { "fetchTransfers", false },
                { "fetchWithdrawals", false },
                { "reduceMargin", false },
                { "sandbox", false },
                { "setLeverage", false },
                { "setMargin", false },
                { "setPositionMode", false },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "timeframes", new Dictionary<string, object>() {} },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://github.com/user-attachments/assets/8e0b1c48-7c01-4177-9224-f1b01d89d7e7" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.cryptomus.com" },
                    { "private", "https://api.cryptomus.com" },
                } },
                { "www", "https://cryptomus.com" },
                { "doc", "https://doc.cryptomus.com/personal" },
                { "fees", "https://cryptomus.com/tariffs" },
                { "referral", "https://app.cryptomus.com/signup/?ref=JRP4yj" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v2/user-api/exchange/markets", 1 },
                        { "v2/user-api/exchange/market/price", 1 },
                        { "v1/exchange/market/assets", 1 },
                        { "v1/exchange/market/order-book/{currencyPair}", 1 },
                        { "v1/exchange/market/tickers", 1 },
                        { "v1/exchange/market/trades/{currencyPair}", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v2/user-api/exchange/orders", 1 },
                        { "v2/user-api/exchange/orders/history", 1 },
                        { "v2/user-api/exchange/account/balance", 1 },
                        { "v2/user-api/exchange/account/tariffs", 1 },
                        { "v2/user-api/payment/services", 1 },
                        { "v2/user-api/payout/services", 1 },
                        { "v2/user-api/transaction/list", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "v2/user-api/exchange/orders", 1 },
                        { "v2/user-api/exchange/orders/market", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "v2/user-api/exchange/orders/{orderId}", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "percentage", true },
                    { "feeSide", "get" },
                    { "maker", this.parseNumber("0.02") },
                    { "taker", this.parseNumber("0.02") },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "createMarketBuyOrderRequiresPrice", true },
                { "networks", new Dictionary<string, object>() {
                    { "BEP20", "bsc" },
                    { "DASH", "dash" },
                    { "POLYGON", "polygon" },
                    { "ARB", "arbitrum" },
                    { "SOL", "sol" },
                    { "TON", "ton" },
                    { "ERC20", "eth" },
                    { "TRC20", "tron" },
                    { "LTC", "ltc" },
                    { "XMR", "xmr" },
                    { "BCH", "bch" },
                    { "DOGE", "doge" },
                    { "AVAX", "avalanche" },
                    { "BTC", "btc" },
                    { "RUB", "rub" },
                } },
                { "networksById", new Dictionary<string, object>() {
                    { "bsc", "BEP20" },
                    { "dash", "DASH" },
                    { "polygon", "POLYGON" },
                    { "arbitrum", "ARB" },
                    { "sol", "SOL" },
                    { "ton", "TON" },
                    { "eth", "ERC20" },
                    { "tron", "TRC20" },
                    { "ltc", "LTC" },
                    { "xmr", "XMR" },
                    { "bch", "BCH" },
                    { "doge", "DOGE" },
                    { "avalanche", "AVAX" },
                    { "btc", "BTC" },
                    { "rub", "RUB" },
                } },
                { "fetchOrderBook", new Dictionary<string, object>() {
                    { "level", 0 },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {} },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "500", typeof(ExchangeError) },
                    { "6", typeof(InsufficientFunds) },
                    { "Insufficient funds.", typeof(InsufficientFunds) },
                    { "Minimum amount 15 USDT", typeof(InvalidOrder) },
                } },
                { "broad", new Dictionary<string, object>() {} },
            } },
            { "precisionMode", TICK_SIZE },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", false },
                { "uid", true },
            } },
            { "features", new Dictionary<string, object>() {} },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchMarkets
        * @description retrieves data on all markets for the exchange
        * @see https://doc.cryptomus.com/personal/market-cap/tickers
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV2UserApiExchangeMarkets(parameters);
        //
        //     {
        //         "result": [
        //             {
        //                 "id": "01JHN5EFT64YC4HR9KCGM5M65D",
        //                 "symbol": "POL_USDT",
        //                 "baseCurrency": "POL",
        //                 "quoteCurrency": "USDT",
        //                 "baseMinSize": "1.00000000",
        //                 "quoteMinSize": "5.00000000",
        //                 "baseMaxSize": "50000.00000000",
        //                 "quoteMaxSize": "10000000000.00000000",
        //                 "basePrec": "1",
        //                 "quotePrec": "4"
        //             },
        //             ...
        //         ]
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseMarkets(result);
    }

    public override object parseMarket(object market)
    {
        //
        //     {
        //         "id": "01JHN5EFT64YC4HR9KCGM5M65D",
        //         "symbol": "POL_USDT",
        //         "baseCurrency": "POL",
        //         "quoteCurrency": "USDT",
        //         "baseMinSize": "1.00000000",
        //         "quoteMinSize": "5.00000000",
        //         "baseMaxSize": "50000.00000000",
        //         "quoteMaxSize": "10000000000.00000000",
        //         "basePrec": "1",
        //         "quotePrec": "4"
        //     }
        //
        object marketId = this.safeString(market, "symbol");
        object parts = ((string)marketId).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
        object baseId = getValue(parts, 0);
        object quoteId = getValue(parts, 1);
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object fees = this.safeDict(this.fees, "trading");
        return this.safeMarketStructure(new Dictionary<string, object>() {
            { "id", marketId },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "active", true },
            { "type", "spot" },
            { "subType", null },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "contract", false },
            { "settle", null },
            { "settleId", null },
            { "contractSize", null },
            { "linear", null },
            { "inverse", null },
            { "taker", this.safeNumber(fees, "taker") },
            { "maker", this.safeNumber(fees, "maker") },
            { "percentage", this.safeBool(fees, "percentage") },
            { "tierBased", null },
            { "feeSide", this.safeString(fees, "feeSide") },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "quotePrec"))) },
                { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "basePrec"))) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "quoteMinSize") },
                    { "max", this.safeNumber(market, "quoteMaxSize") },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "baseMinSize") },
                    { "max", this.safeNumber(market, "baseMaxSize") },
                } },
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        });
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @see https://doc.cryptomus.com/personal/market-cap/assets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV1ExchangeMarketAssets(parameters);
        //
        //     {
        //         'state': '0',
        //         'result': [
        //             {
        //                 'currency_code': 'USDC',
        //                 'network_code': 'bsc',
        //                 'can_withdraw': true,
        //                 'can_deposit': true,
        //                 'min_withdraw': '1.00000000',
        //                 'max_withdraw': '10000000.00000000',
        //                 'max_deposit': '10000000.00000000',
        //                 'min_deposit': '1.00000000'
        //             },
        //             ...
        //         ]
        //     }
        //
        object coins = this.safeList(response, "result");
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(coins)); postFixIncrement(ref i))
        {
            object currency = getValue(coins, i);
            object currencyId = this.safeString(currency, "currency_code");
            object code = this.safeCurrencyCode(currencyId);
            object allowWithdraw = this.safeBool(currency, "can_withdraw");
            object allowDeposit = this.safeBool(currency, "can_deposit");
            object isActive = isTrue(allowWithdraw) && isTrue(allowDeposit);
            object networkId = this.safeString(currency, "network_code");
            object networksById = this.safeDict(this.options, "networksById");
            object networkName = this.safeString(networksById, networkId, networkId);
            object minWithdraw = this.safeNumber(currency, "min_withdraw");
            object maxWithdraw = this.safeNumber(currency, "max_withdraw");
            object minDeposit = this.safeNumber(currency, "min_deposit");
            object maxDeposit = this.safeNumber(currency, "max_deposit");
            object network = new Dictionary<string, object>() {
                { "id", networkId },
                { "network", networkName },
                { "limits", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", minWithdraw },
                        { "max", maxWithdraw },
                    } },
                    { "deposit", new Dictionary<string, object>() {
                        { "min", minDeposit },
                        { "max", maxDeposit },
                    } },
                } },
                { "active", isActive },
                { "deposit", allowDeposit },
                { "withdraw", allowWithdraw },
                { "fee", null },
                { "precision", null },
                { "info", currency },
            };
            object networks = new Dictionary<string, object>() {};
            ((IDictionary<string,object>)networks)[(string)networkName] = network;
            if (!isTrue((inOp(result, code))))
            {
                ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                    { "id", currencyId },
                    { "code", code },
                    { "precision", null },
                    { "type", null },
                    { "name", null },
                    { "active", isActive },
                    { "deposit", allowDeposit },
                    { "withdraw", allowWithdraw },
                    { "fee", null },
                    { "limits", new Dictionary<string, object>() {
                        { "withdraw", new Dictionary<string, object>() {
                            { "min", minWithdraw },
                            { "max", maxWithdraw },
                        } },
                        { "deposit", new Dictionary<string, object>() {
                            { "min", minDeposit },
                            { "max", maxDeposit },
                        } },
                    } },
                    { "networks", networks },
                    { "info", currency },
                };
            } else
            {
                object parsed = getValue(result, code);
                object parsedNetworks = this.safeDict(parsed, "networks");
                ((IDictionary<string,object>)parsed)["networks"] = this.extend(parsedNetworks, networks);
                if (isTrue(isActive))
                {
                    ((IDictionary<string,object>)parsed)["active"] = true;
                    ((IDictionary<string,object>)parsed)["deposit"] = true;
                    ((IDictionary<string,object>)parsed)["withdraw"] = true;
                } else
                {
                    if (isTrue(allowWithdraw))
                    {
                        ((IDictionary<string,object>)parsed)["withdraw"] = true;
                    }
                    if (isTrue(allowDeposit))
                    {
                        ((IDictionary<string,object>)parsed)["deposit"] = true;
                    }
                }
                object parsedLimits = this.safeDict(parsed, "limits");
                object withdrawLimits = new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                };
                object parsedWithdrawLimits = this.safeDict(parsedLimits, "withdraw", withdrawLimits);
                object depositLimits = new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                };
                object parsedDepositLimits = this.safeDict(parsedLimits, "deposit", depositLimits);
                if (isTrue(minWithdraw))
                {
                    ((IDictionary<string,object>)withdrawLimits)["min"] = ((bool) isTrue(getValue(parsedWithdrawLimits, "min"))) ? mathMin(getValue(parsedWithdrawLimits, "min"), minWithdraw) : minWithdraw;
                }
                if (isTrue(maxWithdraw))
                {
                    ((IDictionary<string,object>)withdrawLimits)["max"] = ((bool) isTrue(getValue(parsedWithdrawLimits, "max"))) ? mathMax(getValue(parsedWithdrawLimits, "max"), maxWithdraw) : maxWithdraw;
                }
                if (isTrue(minDeposit))
                {
                    ((IDictionary<string,object>)depositLimits)["min"] = ((bool) isTrue(getValue(parsedDepositLimits, "min"))) ? mathMin(getValue(parsedDepositLimits, "min"), minDeposit) : minDeposit;
                }
                if (isTrue(maxDeposit))
                {
                    ((IDictionary<string,object>)depositLimits)["max"] = ((bool) isTrue(getValue(parsedDepositLimits, "max"))) ? mathMax(getValue(parsedDepositLimits, "max"), maxDeposit) : maxDeposit;
                }
                object limits = new Dictionary<string, object>() {
                    { "withdraw", withdrawLimits },
                    { "deposit", depositLimits },
                };
                ((IDictionary<string,object>)parsed)["limits"] = limits;
            }
        }
        return result;
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://doc.cryptomus.com/personal/market-cap/tickers
        * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object response = await this.publicGetV1ExchangeMarketTickers(parameters);
        //
        //     {
        //         "data": [
        //         {
        //             "currency_pair": "MATIC_USDT",
        //             "last_price": "0.342",
        //             "base_volume": "1676.84092771",
        //             "quote_volume": "573.48033609043"
        //         },
        //         ...
        //     }
        //
        object data = this.safeList(response, "data");
        return this.parseTickers(data, symbols);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "currency_pair": "XMR_USDT",
        //         "last_price": "158.04829771",
        //         "base_volume": "0.35185785",
        //         "quote_volume": "55.523761128544"
        //     }
        //
        object marketId = this.safeString(ticker, "currency_pair");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object last = this.safeString(ticker, "last_price");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "high", null },
            { "low", null },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "base_volume") },
            { "quoteVolume", this.safeString(ticker, "quote_volume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://doc.cryptomus.com/personal/market-cap/orderbook
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.level] 0 or 1 or 2 or 3 or 4 or 5 - the level of volume
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
        };
        object level = 0;
        var levelparametersVariable = this.handleOptionAndParams(parameters, "fetchOrderBook", "level", level);
        level = ((IList<object>)levelparametersVariable)[0];
        parameters = ((IList<object>)levelparametersVariable)[1];
        ((IDictionary<string,object>)request)["level"] = level;
        object response = await this.publicGetV1ExchangeMarketOrderBookCurrencyPair(this.extend(request, parameters));
        //
        //     {
        //         "data": {
        //             "timestamp": "1730138702",
        //             "bids": [
        //                 {
        //                     "price": "2250.00",
        //                     "quantity": "1.00000"
        //                 }
        //             ],
        //             "asks": [
        //                 {
        //                     "price": "2428.69",
        //                     "quantity": "0.16470"
        //                 }
        //             ]
        //         }
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        object timestamp = this.safeTimestamp(data, "timestamp");
        return this.parseOrderBook(data, symbol, timestamp, "bids", "asks", "price", "quantity");
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://doc.cryptomus.com/personal/market-cap/trades
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch (maximum value is 100)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "currencyPair", getValue(market, "id") },
        };
        object response = await this.publicGetV1ExchangeMarketTradesCurrencyPair(this.extend(request, parameters));
        //
        //     {
        //         "data": [
        //             {
        //                 "trade_id": "01J829C3RAXHXHR09HABGQ1YAT",
        //                 "price": "2315.6320500000000000",
        //                 "base_volume": "21.9839623057260000",
        //                 "quote_volume": "0.0094937200000000",
        //                 "timestamp": 1726653796,
        //                 "type": "sell"
        //             }
        //         ]
        //     }
        //
        object data = this.safeList(response, "data");
        return this.parseTrades(data, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        //     {
        //         "trade_id": "01J017Q6B3JGHZRP9D2NZHVKFX",
        //         "price": "59498.63487492",
        //         "base_volume": "94.00784310",
        //         "quote_volume": "0.00158000",
        //         "timestamp": 1718028573,
        //         "type": "sell"
        //     }
        //
        object timestamp = this.safeTimestamp(trade, "timestamp");
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", this.safeString(trade, "trade_id") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", getValue(market, "symbol") },
            { "side", this.safeString(trade, "type") },
            { "price", this.safeString(trade, "price") },
            { "amount", this.safeString(trade, "quote_volume") },
            { "cost", this.safeString(trade, "base_volume") },
            { "takerOrMaker", null },
            { "type", null },
            { "order", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
            } },
            { "info", trade },
        }, market);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://doc.cryptomus.com/personal/converts/balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object response = await this.privateGetV2UserApiExchangeAccountBalance(this.extend(request, parameters));
        //
        //     {
        //         "result": [
        //             {
        //                 "ticker": "AVAX",
        //                 "available": "0.00000000",
        //                 "held": "0.00000000"
        //             }
        //         ]
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseBalance(result);
    }

    public override object parseBalance(object balance)
    {
        //
        //     {
        //         "ticker": "AVAX",
        //         "available": "0.00000000",
        //         "held": "0.00000000"
        //     }
        //
        object result = new Dictionary<string, object>() {
            { "info", balance },
        };
        for (object i = 0; isLessThan(i, getArrayLength(balance)); postFixIncrement(ref i))
        {
            object balanceEntry = getValue(balance, i);
            object currencyId = this.safeString(balanceEntry, "ticker");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(balanceEntry, "available");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balanceEntry, "held");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#createOrder
        * @description create a trade order
        * @see https://doc.cryptomus.com/personal/exchange/market-order-creation
        * @see https://doc.cryptomus.com/personal/exchange/limit-order-creation
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit' or for spot
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of you want to trade in units of the base currency
        * @param {float} [price] the price that the order is to be fulfilled, in units of the quote currency, ignored in market orders (only for limit orders)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {float} [params.cost] *market buy only* the quote quantity that can be used as an alternative for the amount
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.clientOrderId] a unique identifier for the order (optional)
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "market", getValue(market, "id") },
            { "direction", side },
            { "tag", "ccxt" },
        };
        object clientOrderId = this.safeString(parameters, "clientOrderId");
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            parameters = this.omit(parameters, "clientOrderId");
            ((IDictionary<string,object>)request)["client_order_id"] = clientOrderId;
        }
        object sideBuy = isEqual(side, "buy");
        object amountToString = this.numberToString(amount);
        object priceToString = this.numberToString(price);
        object cost = null;
        var costparametersVariable = this.handleParamString(parameters, "cost");
        cost = ((IList<object>)costparametersVariable)[0];
        parameters = ((IList<object>)costparametersVariable)[1];
        object response = null;
        if (isTrue(isEqual(type, "market")))
        {
            if (isTrue(sideBuy))
            {
                object createMarketBuyOrderRequiresPrice = true;
                var createMarketBuyOrderRequiresPriceparametersVariable = this.handleOptionAndParams(parameters, "createOrder", "createMarketBuyOrderRequiresPrice", true);
                createMarketBuyOrderRequiresPrice = ((IList<object>)createMarketBuyOrderRequiresPriceparametersVariable)[0];
                parameters = ((IList<object>)createMarketBuyOrderRequiresPriceparametersVariable)[1];
                if (isTrue(createMarketBuyOrderRequiresPrice))
                {
                    if (isTrue(isTrue((isEqual(price, null))) && isTrue((isEqual(cost, null)))))
                    {
                        throw new InvalidOrder ((string)add(this.id, " createOrder() requires the price argument for market buy orders to calculate the total cost to spend (amount * price), alternatively set the createMarketBuyOrderRequiresPrice option of param to false and pass the cost to spend in the amount argument")) ;
                    } else if (isTrue(isEqual(cost, null)))
                    {
                        cost = Precise.stringMul(amountToString, priceToString);
                    }
                } else
                {
                    cost = ((bool) isTrue(cost)) ? cost : amountToString;
                }
                ((IDictionary<string,object>)request)["value"] = cost;
            } else
            {
                ((IDictionary<string,object>)request)["quantity"] = amountToString;
            }
            response = await this.privatePostV2UserApiExchangeOrdersMarket(this.extend(request, parameters));
        } else if (isTrue(isEqual(type, "limit")))
        {
            if (isTrue(isEqual(price, null)))
            {
                throw new ArgumentsRequired ((string)add(add(add(this.id, " createOrder() requires a price parameter for a "), type), " order")) ;
            }
            ((IDictionary<string,object>)request)["quantity"] = amountToString;
            ((IDictionary<string,object>)request)["price"] = price;
            response = await this.privatePostV2UserApiExchangeOrders(this.extend(request, parameters));
        } else
        {
            throw new ArgumentsRequired ((string)add(this.id, " createOrder() requires a type parameter (limit or market)")) ;
        }
        //
        //     {
        //         "order_id": "01JEXAFCCC5ZVJPZAAHHDKQBNG"
        //     }
        //
        return this.parseOrder(response, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#cancelOrder
        * @description cancels an open limit order
        * @see https://doc.cryptomus.com/personal/exchange/limit-order-cancellation
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in (not used in cryptomus)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        ((IDictionary<string,object>)request)["orderId"] = id;
        object response = await this.privateDeleteV2UserApiExchangeOrdersOrderId(this.extend(request, parameters));
        //
        //     {
        //         "success": true
        //     }
        //
        return response;
    }

    public async override Task<object> fetchCanceledAndClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://doc.cryptomus.com/personal/exchange/history-of-completed-orders
        * @param {string} symbol unified market symbol of the market orders were made in (not used in cryptomus)
        * @param {int} [since] the earliest time in ms to fetch orders for (not used in cryptomus)
        * @param {int} [limit] the maximum number of order structures to retrieve (not used in cryptomus)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.direction] order direction 'buy' or 'sell'
        * @param {string} [params.order_id] order id
        * @param {string} [params.client_order_id] client order id
        * @param {string} [params.limit] A special parameter that sets the maximum number of records the request will return
        * @param {string} [params.offset] A special parameter that sets the number of records from the beginning of the list
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["market"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetV2UserApiExchangeOrdersHistory(this.extend(request, parameters));
        //
        //     {
        //         "result": [
        //             {
        //                 "id": "01JEXAPY04JDFBVFC2D23BCKMK",
        //                 "type": "market",
        //                 "direction": "sell",
        //                 "symbol": "TRX_USDT",
        //                 "quantity": "67.5400000000000000",
        //                 "filledQuantity": "67.5400000000000000",
        //                 "filledValue": "20.0053480000000000",
        //                 "state": "completed",
        //                 "internalState": "filled",
        //                 "createdAt": "2024-12-12 11:40:19",
        //                 "finishedAt": "2024-12-12 11:40:21",
        //                 "deal": {
        //                     "id": "01JEXAPZ9C9TWENPFZJASZ1YD2",
        //                     "state": "completed",
        //                     "createdAt": "2024-12-12 11:40:21",
        //                     "completedAt": "2024-12-12 11:40:21",
        //                     "averageFilledPrice": "0.2962000000000000",
        //                     "transactions": [
        //                         {
        //                             "id": "01JEXAPZ9C9TWENPFZJASZ1YD3",
        //                             "tradeRole": "taker",
        //                             "filledPrice": "0.2962000000000000",
        //                             "filledQuantity": "67.5400000000000000",
        //                             "filledValue": "20.0053480000000000",
        //                             "fee": "0.0000000000000000",
        //                             "feeCurrency": "USDT",
        //                             "committedAt": "2024-12-12 11:40:21"
        //                         }
        //                     ]
        //                 }
        //             },
        //             ...
        //         ]
        //     }
        //
        object result = this.safeList(response, "result", new List<object>() {});
        object orders = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(result)); postFixIncrement(ref i))
        {
            object order = getValue(result, i);
            ((IList<object>)orders).Add(this.parseOrder(order, market));
        }
        return orders;
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name cryptomus#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://doc.cryptomus.com/personal/exchange/list-of-active-orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for (not used in cryptomus)
        * @param {int} [limit] the maximum number of  open orders structures to retrieve (not used in cryptomus)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {string} [params.direction] order direction 'buy' or 'sell'
        * @param {string} [params.order_id] order id
        * @param {string} [params.client_order_id] client order id
        * @param {string} [params.limit] A special parameter that sets the maximum number of records the request will return
        * @param {string} [params.offset] A special parameter that sets the number of records from the beginning of the list
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(market, null)))
        {
            ((IDictionary<string,object>)request)["market"] = getValue(market, "id");
        }
        object response = await this.privateGetV2UserApiExchangeOrders(this.extend(request, parameters));
        //
        //     {
        //         "result": [
        //             {
        //                 "id": "01JFFG72CBRDP68K179KC9DSTG",
        //                 "direction": "sell",
        //                 "symbol": "BTC_USDT",
        //                 "price": "102.0130000000000000",
        //                 "quantity": "0.0005000000000000",
        //                 "value": "0.0510065000000000",
        //                 "filledQuantity": "0.0000000000000000",
        //                 "filledValue": "0.0000000000000000",
        //                 "createdAt": "2024-12-19 09:02:51",
        //                 "clientOrderId": "987654321",
        //                 "stopLossPrice": "101.12"
        //             },
        //             ...
        //         ]
        //     }
        object result = this.safeList(response, "result", new List<object>() {});
        return this.parseOrders(result, market, null, null);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //     {
        //         "order_id": "01JEXAFCCC5ZVJPZAAHHDKQBNG"
        //     }
        //
        // fetchOrders
        //     {
        //         "id": "01JEXAPY04JDFBVFC2D23BCKMK",
        //         "type": "market",
        //         "direction": "sell",
        //         "symbol": "TRX_USDT",
        //         "quantity": "67.5400000000000000",
        //         "filledQuantity": "67.5400000000000000",
        //         "filledValue": "20.0053480000000000",
        //         "state": "completed",
        //         "internalState": "filled",
        //         "createdAt": "2024-12-12 11:40:19",
        //         "finishedAt": "2024-12-12 11:40:21",
        //         "deal": {
        //             "id": "01JEXAPZ9C9TWENPFZJASZ1YD2",
        //             "state": "completed",
        //             "createdAt": "2024-12-12 11:40:21",
        //             "completedAt": "2024-12-12 11:40:21",
        //             "averageFilledPrice": "0.2962000000000000",
        //             "transactions": [
        //                 {
        //                     "id": "01JEXAPZ9C9TWENPFZJASZ1YD3",
        //                     "tradeRole": "taker",
        //                     "filledPrice": "0.2962000000000000",
        //                     "filledQuantity": "67.5400000000000000",
        //                     "filledValue": "20.0053480000000000",
        //                     "fee": "0.0000000000000000",
        //                     "feeCurrency": "USDT",
        //                     "committedAt": "2024-12-12 11:40:21"
        //                 }
        //             ]
        //         }
        //     },
        //     ...
        //
        // fetchOpenOrders
        //     {
        //         "id": "01JFFG72CBRDP68K179KC9DSTG",
        //         "direction": "sell",
        //         "symbol": "BTC_USDT",
        //         "price": "102.0130000000000000",
        //         "quantity": "0.0005000000000000",
        //         "value": "0.0510065000000000",
        //         "filledQuantity": "0.0000000000000000",
        //         "filledValue": "0.0000000000000000",
        //         "createdAt": "2024-12-19 09:02:51",
        //         "clientOrderId": "987654321",
        //         "stopLossPrice": "101.12"
        //     }
        //
        object id = this.safeString2(order, "order_id", "id");
        object marketId = this.safeString(order, "symbol");
        market = this.safeMarket(marketId, market);
        object dateTime = this.safeString(order, "createdAt");
        object timestamp = this.parse8601(dateTime);
        object deal = this.safeDict(order, "deal", new Dictionary<string, object>() {});
        object averageFilledPrice = this.safeNumber(deal, "averageFilledPrice");
        object type = this.safeString(order, "type");
        object side = this.safeString(order, "direction");
        object price = this.safeNumber(order, "price");
        object transaction = this.safeList(deal, "transactions", new List<object>() {});
        object fee = null;
        object firstTx = this.safeDict(transaction, 0);
        object feeCurrency = this.safeString(firstTx, "feeCurrency");
        if (isTrue(!isEqual(feeCurrency, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", this.safeCurrencyCode(feeCurrency) },
                { "cost", this.safeNumber(firstTx, "fee") },
            };
        }
        if (isTrue(isEqual(price, null)))
        {
            price = this.safeNumber(firstTx, "filledPrice");
        }
        object amount = this.safeNumber(order, "quantity");
        object cost = this.safeNumber(order, "value");
        object status = this.parseOrderStatus(this.safeString(order, "state"));
        object clientOrderId = this.safeString(order, "clientOrderId");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", getValue(market, "symbol") },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", this.safeString(order, "stopLossPrice") },
            { "triggerPrice", this.safeString(order, "stopLossPrice") },
            { "amount", amount },
            { "cost", cost },
            { "average", averageFilledPrice },
            { "filled", this.safeString(order, "filledQuantity") },
            { "remaining", null },
            { "status", status },
            { "fee", fee },
            { "trades", null },
            { "info", order },
        }, market);
    }

    public virtual object parseOrderStatus(object status = null)
    {
        object statuses = new Dictionary<string, object>() {
            { "active", "open" },
            { "completed", "closed" },
            { "partially_completed", "open" },
            { "cancelled", "canceled" },
            { "expired", "expired" },
            { "failed", "failed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object endpoint = this.implodeParams(path, parameters);
        parameters = this.omit(parameters, this.extractParams(path));
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), endpoint);
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object jsonParams = "";
            headers = new Dictionary<string, object>() {
                { "userId", this.uid },
            };
            if (isTrue(!isEqual(method, "GET")))
            {
                body = this.json(parameters);
                jsonParams = body;
                ((IDictionary<string,object>)headers)["Content-Type"] = "application/json";
            } else
            {
                object query = this.urlencode(parameters);
                if (isTrue(!isEqual(getArrayLength(query), 0)))
                {
                    url = add(url, add("?", query));
                }
            }
            object jsonParamsBase64 = this.stringToBase64(jsonParams);
            object stringToSign = add(jsonParamsBase64, this.secret);
            object signature = this.hash(this.encode(stringToSign), md5);
            ((IDictionary<string,object>)headers)["sign"] = signature;
        } else
        {
            object query = this.urlencode(parameters);
            if (isTrue(!isEqual(getArrayLength(query), 0)))
            {
                url = add(url, add("?", query));
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        if (isTrue(inOp(response, "code")))
        {
            object code = this.safeString(response, "code");
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), code, feedback);
            throw new ExchangeError ((string)feedback) ;
        } else if (isTrue(inOp(response, "message")))
        {
            //
            //      {"message":"Minimum amount 15 USDT","state":1}
            //
            object message = this.safeString(response, "message");
            object feedback = add(add(this.id, " "), body);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
