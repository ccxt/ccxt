namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class btcturk : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "btcturk" },
            { "name", "BTCTurk" },
            { "countries", new List<object>() {"TR"} },
            { "rateLimit", 100 },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", true },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrderBook", true },
                { "fetchOrders", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "ws", false },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", 1 },
                { "15m", 15 },
                { "30m", 30 },
                { "1h", 60 },
                { "4h", 240 },
                { "1d", "1 d" },
                { "1w", "1 w" },
                { "1y", "1 y" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/51840849/87153926-efbef500-c2c0-11ea-9842-05b63612c4b9.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.btcturk.com/api/v2" },
                    { "private", "https://api.btcturk.com/api/v1" },
                    { "graph", "https://graph-api.btcturk.com/v1" },
                } },
                { "www", "https://www.btcturk.com" },
                { "doc", "https://github.com/BTCTrader/broker-api-docs" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "orderbook", 1 },
                        { "ticker", 0.1 },
                        { "trades", 1 },
                        { "ohlc", 1 },
                        { "server/exchangeinfo", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "users/balances", 1 },
                        { "openOrders", 1 },
                        { "allOrders", 1 },
                        { "users/transactions/trade", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "users/transactions/crypto", 1 },
                        { "users/transactions/fiat", 1 },
                        { "order", 1 },
                        { "cancelOrder", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "order", 1 },
                    } },
                } },
                { "graph", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "ohlcs", 1 },
                        { "klines/history", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", this.parseNumber("0.0005") },
                    { "taker", this.parseNumber("0.0009") },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "FAILED_ORDER_WITH_OPEN_ORDERS", typeof(InsufficientFunds) },
                    { "FAILED_LIMIT_ORDER", typeof(InvalidOrder) },
                    { "FAILED_MARKET_ORDER", typeof(InvalidOrder) },
                } },
            } },
            { "precisionMode", TICK_SIZE },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchMarkets
        * @description retrieves data on all markets for btcturk
        * @see https://docs.btcturk.com/public-endpoints/exchange-info
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetServerExchangeinfo(parameters);
        //
        //    {
        //        "data": {
        //            "timeZone": "UTC",
        //            "serverTime": "1618826678404",
        //            "symbols": [
        //                {
        //                    "id": "1",
        //                    "name": "BTCTRY",
        //                    "nameNormalized": "BTC_TRY",
        //                    "status": "TRADING",
        //                    "numerator": "BTC",
        //                    "denominator": "TRY",
        //                    "numeratorScale": "8",
        //                    "denominatorScale": "2",
        //                    "hasFraction": false,
        //                    "filters": [
        //                        {
        //                            "filterType": "PRICE_FILTER",
        //                            "minPrice": "0.0000000000001",
        //                            "maxPrice": "10000000",
        //                            "tickSize": "10",
        //                            "minExchangeValue": "99.91",
        //                            "minAmount": null,
        //                            "maxAmount": null
        //                        }
        //                    ],
        //                    "orderMethods": [
        //                        "MARKET",
        //                        "LIMIT",
        //                        "STOP_MARKET",
        //                        "STOP_LIMIT"
        //                    ],
        //                    "displayFormat": "#,###",
        //                    "commissionFromNumerator": false,
        //                    "order": "1000",
        //                    "priceRounding": false
        //                },
        //                ...
        //            },
        //        ],
        //    }
        //
        object data = this.safeValue(response, "data");
        object markets = this.safeValue(data, "symbols", new List<object>() {});
        return this.parseMarkets(markets);
    }

    public override object parseMarket(object entry)
    {
        object id = this.safeString(entry, "name");
        object baseId = this.safeString(entry, "numerator");
        object quoteId = this.safeString(entry, "denominator");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object filters = this.safeValue(entry, "filters", new List<object>() {});
        object minPrice = null;
        object maxPrice = null;
        object minAmount = null;
        object maxAmount = null;
        object minCost = null;
        for (object j = 0; isLessThan(j, getArrayLength(filters)); postFixIncrement(ref j))
        {
            object filter = getValue(filters, j);
            object filterType = this.safeString(filter, "filterType");
            if (isTrue(isEqual(filterType, "PRICE_FILTER")))
            {
                minPrice = this.safeNumber(filter, "minPrice");
                maxPrice = this.safeNumber(filter, "maxPrice");
                minAmount = this.safeNumber(filter, "minAmount");
                maxAmount = this.safeNumber(filter, "maxAmount");
                minCost = this.safeNumber(filter, "minExchangeValue");
            }
        }
        object status = this.safeString(entry, "status");
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", (isEqual(status, "TRADING")) },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(this.parsePrecision(this.safeString(entry, "numeratorScale"))) },
                { "price", this.parseNumber(this.parsePrecision(this.safeString(entry, "denominatorScale"))) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", minAmount },
                    { "max", maxAmount },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", minPrice },
                    { "max", maxPrice },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", minCost },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", entry },
        };
    }

    public override object parseBalance(object response)
    {
        object data = this.safeValue(response, "data", new List<object>() {});
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        for (object i = 0; isLessThan(i, getArrayLength(data)); postFixIncrement(ref i))
        {
            object entry = getValue(data, i);
            object currencyId = this.safeString(entry, "asset");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["total"] = this.safeString(entry, "balance");
            ((IDictionary<string,object>)account)["free"] = this.safeString(entry, "free");
            ((IDictionary<string,object>)account)["used"] = this.safeString(entry, "locked");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://docs.btcturk.com/private-endpoints/account-balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetUsersBalances(parameters);
        //
        //     {
        //       "data": [
        //         {
        //           "asset": "TRY",
        //           "assetname": "Türk Lirası",
        //           "balance": "0",
        //           "locked": "0",
        //           "free": "0",
        //           "orderFund": "0",
        //           "requestFund": "0",
        //           "precision": 2
        //         }
        //       ]
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://docs.btcturk.com/public-endpoints/orderbook
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pairSymbol", getValue(market, "id") },
        };
        object response = await this.publicGetOrderbook(this.extend(request, parameters));
        //     {
        //       "data": {
        //         "timestamp": 1618827901241,
        //         "bids": [
        //           [
        //             "460263.00",
        //             "0.04244000"
        //           ]
        //         ]
        //       }
        //     }
        object data = this.safeValue(response, "data");
        object timestamp = this.safeInteger(data, "timestamp");
        return this.parseOrderBook(data, getValue(market, "symbol"), timestamp, "bids", "asks", 0, 1);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //   {
        //     "pair": "BTCTRY",
        //     "pairNormalized": "BTC_TRY",
        //     "timestamp": 1618826361234,
        //     "last": 462485,
        //     "high": 473976,
        //     "low": 444201,
        //     "bid": 461928,
        //     "ask": 462485,
        //     "open": 456915,
        //     "volume": 917.41368645,
        //     "average": 462868.29574589,
        //     "daily": 5570,
        //     "dailyPercent": 1.22,
        //     "denominatorSymbol": "TRY",
        //     "numeratorSymbol": "BTC",
        //     "order": 1000
        //   }
        //
        object marketId = this.safeString(ticker, "pair");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object timestamp = this.safeInteger(ticker, "timestamp");
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", this.safeString(ticker, "open") },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", this.safeString(ticker, "daily") },
            { "percentage", this.safeString(ticker, "dailyPercent") },
            { "average", this.safeString(ticker, "average") },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://docs.btcturk.com/public-endpoints/ticker
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetTicker(parameters);
        object tickers = this.safeList(response, "data");
        return this.parseTickers(tickers, symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://docs.btcturk.com/public-endpoints/ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object tickers = await this.fetchTickers(new List<object>() {symbol}, parameters);
        return this.safeValue(tickers, symbol);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades
        //     {
        //       "pair": "BTCUSDT",
        //       "pairNormalized": "BTC_USDT",
        //       "numerator": "BTC",
        //       "denominator": "USDT",
        //       "date": "1618916879083",
        //       "tid": "637545136790672520",
        //       "price": "55774",
        //       "amount": "0.27917100",
        //       "side": "buy"
        //     }
        //
        // fetchMyTrades
        //     {
        //       "price": "56000",
        //       "numeratorSymbol": "BTC",
        //       "denominatorSymbol": "USDT",
        //       "orderType": "buy",
        //       "orderId": "2606935102",
        //       "id": "320874372",
        //       "timestamp": "1618916479593",
        //       "amount": "0.00020000",
        //       "fee": "0",
        //       "tax": "0"
        //     }
        //
        object timestamp = this.safeInteger2(trade, "date", "timestamp");
        object id = this.safeString2(trade, "tid", "id");
        object order = this.safeString(trade, "orderId");
        object priceString = this.safeString(trade, "price");
        object amountString = Precise.stringAbs(this.safeString(trade, "amount"));
        object marketId = this.safeString(trade, "pair");
        object symbol = this.safeSymbol(marketId, market);
        object side = this.safeString2(trade, "side", "orderType");
        object fee = null;
        object feeAmountString = this.safeString(trade, "fee");
        if (isTrue(!isEqual(feeAmountString, null)))
        {
            object feeCurrency = this.safeString(trade, "denominatorSymbol");
            fee = new Dictionary<string, object>() {
                { "cost", Precise.stringAbs(feeAmountString) },
                { "currency", this.safeCurrencyCode(feeCurrency) },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "order", order },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://docs.btcturk.com/public-endpoints/trades
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        // let maxCount = 50;
        object request = new Dictionary<string, object>() {
            { "pairSymbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["last"] = limit;
        }
        object response = await this.publicGetTrades(this.extend(request, parameters));
        //
        //     {
        //       "data": [
        //         {
        //           "pair": "BTCTRY",
        //           "pairNormalized": "BTC_TRY",
        //           "numerator": "BTC",
        //           "denominator": "TRY",
        //           "date": 1618828421497,
        //           "tid": "637544252214980918",
        //           "price": "462585.00",
        //           "amount": "0.01618411",
        //           "side": "sell"
        //         }
        //       ]
        //     }
        //
        object data = this.safeList(response, "data");
        return this.parseTrades(data, market, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //    {
        //        "timestamp": 1661990400,
        //        "high": 368388.0,
        //        "open": 368388.0,
        //        "low": 368388.0,
        //        "close": 368388.0,
        //        "volume": 0.00035208,
        //    }
        //
        return new List<object> {this.safeTimestamp(ohlcv, "timestamp"), this.safeNumber(ohlcv, "open"), this.safeNumber(ohlcv, "high"), this.safeNumber(ohlcv, "low"), this.safeNumber(ohlcv, "close"), this.safeNumber(ohlcv, "volume")};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://docs.btcturk.com/public-endpoints/get-kline-data
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] timestamp in ms of the latest candle to fetch
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1h";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "resolution", this.safeValue(this.timeframes, timeframe, timeframe) },
        };
        object until = this.safeInteger(parameters, "until", this.milliseconds());
        ((IDictionary<string,object>)request)["to"] = this.parseToInt((divide(until, 1000)));
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["from"] = this.parseToInt(divide(since, 1000));
        } else if (isTrue(isEqual(limit, null)))
        {
            limit = 100; // default value
        }
        if (isTrue(!isEqual(limit, null)))
        {
            limit = mathMin(limit, 11000); // max 11000 candles diapason can be covered
            if (isTrue(isEqual(timeframe, "1y")))
            {
                throw new BadRequest ((string)add(this.id, " fetchOHLCV () does not accept a limit parameter when timeframe == \"1y\"")) ;
            }
            object seconds = this.parseTimeframe(timeframe);
            object limitSeconds = multiply(seconds, (subtract(limit, 1)));
            if (isTrue(!isEqual(since, null)))
            {
                object to = add(this.parseToInt(divide(since, 1000)), limitSeconds);
                ((IDictionary<string,object>)request)["to"] = mathMin(getValue(request, "to"), to);
            } else
            {
                ((IDictionary<string,object>)request)["from"] = subtract(this.parseToInt(divide(0, 1000)), limitSeconds);
            }
        }
        object response = await this.graphGetKlinesHistory(this.extend(request, parameters));
        //
        //    {
        //        "s": "ok",
        //        "t": [
        //          1661990400,
        //          1661990520,
        //          ...
        //        ],
        //        "h": [
        //          368388.0,
        //          369090.0,
        //          ...
        //        ],
        //        "o": [
        //          368388.0,
        //          368467.0,
        //          ...
        //        ],
        //        "l": [
        //          368388.0,
        //          368467.0,
        //          ...
        //        ],
        //        "c": [
        //          368388.0,
        //          369090.0,
        //          ...
        //        ],
        //        "v": [
        //          0.00035208,
        //          0.2972395,
        //          ...
        //        ]
        //    }
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public override object parseOHLCVs(object ohlcvs, object market = null, object timeframe = null, object since = null, object limit = null)
    {
        timeframe ??= "1m";
        object results = new List<object>() {};
        object timestamp = this.safeValue(ohlcvs, "t");
        object high = this.safeValue(ohlcvs, "h");
        object open = this.safeValue(ohlcvs, "o");
        object low = this.safeValue(ohlcvs, "l");
        object close = this.safeValue(ohlcvs, "c");
        object volume = this.safeValue(ohlcvs, "v");
        for (object i = 0; isLessThan(i, getArrayLength(timestamp)); postFixIncrement(ref i))
        {
            object ohlcv = new Dictionary<string, object>() {
                { "timestamp", this.safeValue(timestamp, i) },
                { "high", this.safeValue(high, i) },
                { "open", this.safeValue(open, i) },
                { "low", this.safeValue(low, i) },
                { "close", this.safeValue(close, i) },
                { "volume", this.safeValue(volume, i) },
            };
            ((IList<object>)results).Add(this.parseOHLCV(ohlcv, market));
        }
        object sorted = this.sortBy(results, 0);
        return this.filterBySinceLimit(sorted, since, limit, 0);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#createOrder
        * @description create a trade order
        * @see https://docs.btcturk.com/private-endpoints/submit-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "orderType", side },
            { "orderMethod", type },
            { "pairSymbol", getValue(market, "id") },
            { "quantity", this.amountToPrecision(symbol, amount) },
        };
        if (isTrue(!isEqual(type, "market")))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        if (isTrue(inOp(parameters, "clientOrderId")))
        {
            ((IDictionary<string,object>)request)["newClientOrderId"] = getValue(parameters, "clientOrderId");
        } else if (!isTrue((inOp(parameters, "newClientOrderId"))))
        {
            ((IDictionary<string,object>)request)["newClientOrderId"] = this.uuid();
        }
        object response = await this.privatePostOrder(this.extend(request, parameters));
        object data = this.safeDict(response, "data");
        return this.parseOrder(data, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#cancelOrder
        * @description cancels an open order
        * @see https://docs.btcturk.com/private-endpoints/cancel-order
        * @param {string} id order id
        * @param {string} symbol not used by btcturk cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        return await this.privateDeleteOrder(this.extend(request, parameters));
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://docs.btcturk.com/private-endpoints/open-orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["pairSymbol"] = getValue(market, "id");
        }
        object response = await this.privateGetOpenOrders(this.extend(request, parameters));
        object data = this.safeValue(response, "data");
        object bids = this.safeValue(data, "bids", new List<object>() {});
        object asks = this.safeList(data, "asks", new List<object>() {});
        return this.parseOrders(this.arrayConcat(bids, asks), market, since, limit);
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://docs.btcturk.com/private-endpoints/all-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pairSymbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            // default 100 max 1000
            ((IDictionary<string,object>)request)["last"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = (Math.Floor(Double.Parse((divide(since, 1000)).ToString())));
        }
        object response = await this.privateGetAllOrders(this.extend(request, parameters));
        // {
        //   "data": [
        //     {
        //       "id": "2606012912",
        //       "price": "55000",
        //       "amount": "0.0003",
        //       "quantity": "0.0003",
        //       "stopPrice": "0",
        //       "pairSymbol": "BTCUSDT",
        //       "pairSymbolNormalized": "BTC_USDT",
        //       "type": "buy",
        //       "method": "limit",
        //       "orderClientId": "2ed187bd-59a8-4875-a212-1b793963b85c",
        //       "time": "1618913189253",
        //       "updateTime": "1618913189253",
        //       "status": "Untouched",
        //       "leftAmount": "0.0003000000000000"
        //     }
        //   ]
        // }
        object data = this.safeList(response, "data");
        return this.parseOrders(data, market, since, limit);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "Untouched", "open" },
            { "Partial", "open" },
            { "Canceled", "canceled" },
            { "Closed", "closed" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // fetchOrders / fetchOpenOrders
        //     {
        //       "id": 2605984008,
        //       "price": "55000",
        //       "amount": "0.00050000",
        //       "quantity": "0.00050000",
        //       "stopPrice": "0",
        //       "pairSymbol": "BTCUSDT",
        //       "pairSymbolNormalized": "BTC_USDT",
        //       "type": "buy",
        //       "method": "limit",
        //       "orderClientId": "f479bdb6-0965-4f03-95b5-daeb7aa5a3a5",
        //       "time": 0,
        //       "updateTime": 1618913083543,
        //       "status": "Untouched",
        //       "leftAmount": "0.00050000"
        //     }
        //
        // createOrder
        //     {
        //       "id": "2606935102",
        //       "quantity": "0.0002",
        //       "price": "56000",
        //       "stopPrice": null,
        //       "newOrderClientId": "98e5c491-7ed9-462b-9666-93553180fb28",
        //       "type": "buy",
        //       "method": "limit",
        //       "pairSymbol": "BTCUSDT",
        //       "pairSymbolNormalized": "BTC_USDT",
        //       "datetime": "1618916479523"
        //     }
        //
        object id = this.safeString(order, "id");
        object price = this.safeString(order, "price");
        object amountString = this.safeString2(order, "amount", "quantity");
        object amount = Precise.stringAbs(amountString);
        object remaining = this.safeString(order, "leftAmount");
        object marketId = this.safeString(order, "pairSymbol");
        object symbol = this.safeSymbol(marketId, market);
        object side = this.safeString(order, "type");
        object type = this.safeString(order, "method");
        object clientOrderId = this.safeString(order, "orderClientId");
        object timestamp = this.safeInteger2(order, "updateTime", "datetime");
        object rawStatus = this.safeString(order, "status");
        object status = this.parseOrderStatus(rawStatus);
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "price", price },
            { "amount", amount },
            { "remaining", remaining },
            { "filled", null },
            { "cost", null },
            { "average", null },
            { "status", status },
            { "side", side },
            { "type", type },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name btcturk#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://docs.btcturk.com/private-endpoints/user-transactions
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object response = await this.privateGetUsersTransactionsTrade();
        //
        //     {
        //       "data": [
        //         {
        //           "price": "56000",
        //           "numeratorSymbol": "BTC",
        //           "denominatorSymbol": "USDT",
        //           "orderType": "buy",
        //           "orderId": "2606935102",
        //           "id": "320874372",
        //           "timestamp": "1618916479593",
        //           "amount": "0.00020000",
        //           "fee": "0",
        //           "tax": "0"
        //         }
        //       ],
        //       "success": true,
        //       "message": "SUCCESS",
        //       "code": "0"
        //     }
        //
        object data = this.safeList(response, "data");
        return this.parseTrades(data, market, since, limit);
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(this.id, "btctrader")))
        {
            throw new ExchangeError ((string)add(this.id, " is an abstract base API for BTCExchange, BTCTurk")) ;
        }
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), path);
        if (isTrue(isTrue((isEqual(method, "GET"))) || isTrue((isEqual(method, "DELETE")))))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        } else
        {
            body = this.json(parameters);
        }
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object secret = this.base64ToBinary(this.secret);
            object auth = add(this.apiKey, nonce);
            headers = new Dictionary<string, object>() {
                { "X-PCK", this.apiKey },
                { "X-Stamp", nonce },
                { "X-Signature", this.hmac(this.encode(auth), secret, sha256, "base64") },
                { "Content-Type", "application/json" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        object errorCode = this.safeString(response, "code", "0");
        object message = this.safeString(response, "message");
        object output = ((bool) isTrue((isEqual(message, null)))) ? body : message;
        this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, add(add(this.id, " "), output));
        if (isTrue(isTrue((!isEqual(errorCode, "0"))) && isTrue((!isEqual(errorCode, "SUCCESS")))))
        {
            throw new ExchangeError ((string)add(add(this.id, " "), output)) ;
        }
        return null;
    }
}
