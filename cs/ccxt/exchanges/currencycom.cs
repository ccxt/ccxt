namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class currencycom : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "currencycom" },
            { "name", "Currency.com" },
            { "countries", new List<object>() {"BY"} },
            { "rateLimit", 100 },
            { "certified", false },
            { "pro", true },
            { "version", "v2" },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", true },
                { "swap", true },
                { "future", false },
                { "option", false },
                { "addMargin", null },
                { "cancelAllOrders", null },
                { "cancelOrder", true },
                { "cancelOrders", null },
                { "createDepositAddress", null },
                { "createLimitOrder", true },
                { "createMarketOrder", true },
                { "createOrder", true },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", true },
                { "createStopOrder", true },
                { "editOrder", "emulated" },
                { "fetchAccounts", true },
                { "fetchBalance", true },
                { "fetchBidsAsks", null },
                { "fetchBorrowRateHistory", null },
                { "fetchCanceledOrders", null },
                { "fetchClosedOrder", null },
                { "fetchClosedOrders", null },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", true },
                { "fetchDeposit", null },
                { "fetchDepositAddress", true },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", true },
                { "fetchDepositsWithdrawals", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchL2OrderBook", true },
                { "fetchLedger", true },
                { "fetchLedgerEntry", false },
                { "fetchLeverage", true },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenOrder", null },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", null },
                { "fetchOrders", null },
                { "fetchOrderTrades", null },
                { "fetchPosition", null },
                { "fetchPositionMode", false },
                { "fetchPositions", true },
                { "fetchPositionsRisk", null },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTradingLimits", null },
                { "fetchTransactionFee", null },
                { "fetchTransactionFees", null },
                { "fetchTransactions", "emulated" },
                { "fetchTransfers", null },
                { "fetchWithdrawal", null },
                { "fetchWithdrawals", true },
                { "reduceMargin", null },
                { "sandbox", true },
                { "setLeverage", null },
                { "setMarginMode", null },
                { "setPositionMode", null },
                { "signIn", null },
                { "transfer", null },
                { "withdraw", null },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1m" },
                { "5m", "5m" },
                { "10m", "10m" },
                { "15m", "15m" },
                { "30m", "30m" },
                { "1h", "1h" },
                { "4h", "4h" },
                { "1d", "1d" },
                { "1w", "1w" },
            } },
            { "hostname", "backend.currency.com" },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api-adapter.{hostname}/api" },
                    { "private", "https://api-adapter.{hostname}/api" },
                    { "marketcap", "https://marketcap.{hostname}/api" },
                } },
                { "test", new Dictionary<string, object>() {
                    { "public", "https://demo-api-adapter.{hostname}/api" },
                    { "private", "https://demo-api-adapter.{hostname}/api" },
                } },
                { "www", "https://www.currency.com" },
                { "referral", "https://currency.com/trading/signup?c=362jaimv&pid=referral" },
                { "doc", new List<object>() {"https://currency.com/api"} },
                { "fees", "https://currency.com/fees-charges" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v1/time", 1 },
                        { "v1/exchangeInfo", 1 },
                        { "v1/depth", 1 },
                        { "v1/aggTrades", 1 },
                        { "v1/klines", 1 },
                        { "v1/ticker/24hr", 1 },
                        { "v2/time", 1 },
                        { "v2/exchangeInfo", 1 },
                        { "v2/depth", 1 },
                        { "v2/aggTrades", 1 },
                        { "v2/klines", 1 },
                        { "v2/ticker/24hr", 1 },
                    } },
                } },
                { "marketcap", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v1/assets", 1 },
                        { "v1/candles", 1 },
                        { "v1/orderbook", 1 },
                        { "v1/summary", 1 },
                        { "v1/ticker", 1 },
                        { "v1/token/assets", 1 },
                        { "v1/token/orderbook", 1 },
                        { "v1/token/summary", 1 },
                        { "v1/token/ticker", 1 },
                        { "v1/token/trades", 1 },
                        { "v1/token_crypto/OHLC", 1 },
                        { "v1/token_crypto/assets", 1 },
                        { "v1/token_crypto/orderbook", 1 },
                        { "v1/token_crypto/summary", 1 },
                        { "v1/token_crypto/ticker", 1 },
                        { "v1/token_crypto/trades", 1 },
                        { "v1/trades", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v1/account", 1 },
                        { "v1/currencies", 1 },
                        { "v1/deposits", 1 },
                        { "v1/depositAddress", 1 },
                        { "v1/ledger", 1 },
                        { "v1/leverageSettings", 1 },
                        { "v1/myTrades", 1 },
                        { "v1/openOrders", 1 },
                        { "v1/tradingPositions", 1 },
                        { "v1/tradingPositionsHistory", 1 },
                        { "v1/transactions", 1 },
                        { "v1/withdrawals", 1 },
                        { "v2/account", 1 },
                        { "v2/currencies", 1 },
                        { "v2/deposits", 1 },
                        { "v2/depositAddress", 1 },
                        { "v2/ledger", 1 },
                        { "v2/leverageSettings", 1 },
                        { "v2/myTrades", 1 },
                        { "v2/openOrders", 1 },
                        { "v2/tradingPositions", 1 },
                        { "v2/tradingPositionsHistory", 1 },
                        { "v2/transactions", 1 },
                        { "v2/withdrawals", 1 },
                        { "v2/fetchOrder", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "v1/order", 1 },
                        { "v1/updateTradingPosition", 1 },
                        { "v1/updateTradingOrder", 1 },
                        { "v1/closeTradingPosition", 1 },
                        { "v2/order", 1 },
                        { "v2/updateTradingPosition", 1 },
                        { "v2/updateTradingOrder", 1 },
                        { "v2/closeTradingPosition", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "v1/order", 1 },
                        { "v2/order", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "feeSide", "get" },
                    { "tierBased", false },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.002") },
                    { "maker", this.parseNumber("0.002") },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "options", new Dictionary<string, object>() {
                { "defaultTimeInForce", "GTC" },
                { "warnOnFetchOpenOrdersWithoutSymbol", true },
                { "recvWindow", multiply(5, 1000) },
                { "timeDifference", 0 },
                { "adjustForTimeDifference", false },
                { "parseOrderToPrecision", false },
                { "newOrderRespType", new Dictionary<string, object>() {
                    { "market", "FULL" },
                    { "limit", "RESULT" },
                    { "stop", "RESULT" },
                } },
                { "leverage_markets_suffix", "_LEVERAGE" },
                { "collateralCurrencies", new List<object>() {"USD", "EUR", "USDT"} },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "broad", new Dictionary<string, object>() {
                    { "FIELD_VALIDATION_ERROR Cancel is available only for LIMIT order", typeof(InvalidOrder) },
                    { "API key does not exist", typeof(AuthenticationError) },
                    { "Order would trigger immediately.", typeof(InvalidOrder) },
                    { "Account has insufficient balance for requested action.", typeof(InsufficientFunds) },
                    { "Rest API trading is not enabled.", typeof(ExchangeNotAvailable) },
                    { "Combination of parameters invalid", typeof(BadRequest) },
                    { "Invalid limit price", typeof(BadRequest) },
                    { "Only leverage symbol allowed here:", typeof(BadSymbol) },
                    { "market data service is not available", typeof(ExchangeNotAvailable) },
                    { "your time is ahead of server", typeof(InvalidNonce) },
                    { "Can not find account", typeof(BadRequest) },
                    { "You mentioned an invalid value for the price parameter", typeof(BadRequest) },
                } },
                { "exact", new Dictionary<string, object>() {
                    { "-1000", typeof(ExchangeNotAvailable) },
                    { "-1013", typeof(InvalidOrder) },
                    { "-1022", typeof(AuthenticationError) },
                    { "-1030", typeof(InvalidOrder) },
                    { "-1100", typeof(InvalidOrder) },
                    { "-1104", typeof(ExchangeError) },
                    { "-1025", typeof(AuthenticationError) },
                    { "-1128", typeof(BadRequest) },
                    { "-2010", typeof(ExchangeError) },
                    { "-2011", typeof(OrderNotFound) },
                    { "-2013", typeof(OrderNotFound) },
                    { "-2014", typeof(AuthenticationError) },
                    { "-2015", typeof(AuthenticationError) },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "ACN", "Accenture" },
                { "AMC", "AMC Entertainment Holdings" },
                { "BNS", "Bank of Nova Scotia" },
                { "CAR", "Avis Budget Group Inc" },
                { "CLR", "Continental Resources" },
                { "EDU", "New Oriental Education & Technology Group Inc" },
                { "ETN", "Eaton" },
                { "FOX", "Fox Corporation" },
                { "GM", "General Motors Co" },
                { "IQ", "iQIYI" },
                { "OSK", "Oshkosh" },
                { "PLAY", "Dave & Buster\'s Entertainment" },
            } },
        });
    }

    public override object nonce()
    {
        return subtract(this.milliseconds(), getValue(this.options, "timeDifference"));
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/timeUsingGET
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV2Time(parameters);
        //
        //     {
        //         "serverTime": 1590998366609
        //     }
        //
        return this.safeInteger(response, "serverTime");
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getCurrenciesUsingGET
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an associative dictionary of currencies
        */
        // requires authentication
        parameters ??= new Dictionary<string, object>();
        if (!isTrue(this.checkRequiredCredentials(false)))
        {
            return null;
        }
        object response = await this.privateGetV2Currencies(parameters);
        //
        //     [
        //         {
        //             "name": "Euro",
        //             "displaySymbol": "EUR.cx",
        //             "precision": "2",
        //             "type": "FIAT",
        //             "minWithdrawal": "90.0",
        //             "maxWithdrawal": "1.0E+8",
        //             "commissionMin": "0.02", // some instruments do not have this property
        //             "commissionPercent": "1.5", // some instruments do not have this property
        //             "minDeposit": "90.0",
        //         },
        //         {
        //             "name": "Bitcoin",
        //             "displaySymbol": "BTC",
        //             "precision": "8",
        //             "type": "CRYPTO", // only a few major currencies have this value, others like USDT have a value of "TOKEN"
        //             "minWithdrawal": "0.00020",
        //             "commissionFixed": "0.00010",
        //             "minDeposit": "0.00010",
        //         },
        //     ]
        //
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object currency = getValue(response, i);
            object id = this.safeString(currency, "displaySymbol");
            object code = this.safeCurrencyCode(id);
            object fee = this.safeNumber(currency, "commissionFixed");
            ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "code", code },
                { "type", this.safeStringLower(currency, "type") },
                { "name", this.safeString(currency, "name") },
                { "active", null },
                { "deposit", null },
                { "withdraw", null },
                { "fee", fee },
                { "precision", this.parseNumber(this.parsePrecision(this.safeString(currency, "precision"))) },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", this.safeNumber(currency, "minWithdrawal") },
                        { "max", this.safeNumber(currency, "maxWithdrawal") },
                    } },
                    { "deposit", new Dictionary<string, object>() {
                        { "min", this.safeNumber(currency, "minDeposit") },
                        { "max", null },
                    } },
                } },
                { "info", currency },
            };
        }
        return result;
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchMarkets
        * @description retrieves data on all markets for currencycom
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/exchangeInfoUsingGET
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV2ExchangeInfo(parameters);
        //
        //     {
        //         "timezone": "UTC",
        //         "serverTime": "1645186287261",
        //         "rateLimits": [
        //             { rateLimitType: "REQUEST_WEIGHT", interval: "MINUTE", intervalNum: "1", limit: "1200" },
        //             { rateLimitType: "ORDERS", interval: "SECOND", intervalNum: "1", limit: "10" },
        //             { rateLimitType: "ORDERS", interval: "DAY", intervalNum: "1", limit: "864000" },
        //         ],
        //         "exchangeFilters": [],
        //         "symbols": [
        //             {
        //                 "symbol": "BTC/USDT", // BTC/USDT, BTC/USDT_LEVERAGE
        //                 "name": "Bitcoin / Tether",
        //                 "status": "TRADING", // TRADING, BREAK, HALT
        //                 "baseAsset": "BTC",
        //                 "baseAssetPrecision": "4",
        //                 "quoteAsset": "USDT",
        //                 "quoteAssetId": "USDT", // USDT, USDT_LEVERAGE
        //                 "quotePrecision": "4",
        //                 "orderTypes": [ "LIMIT", "MARKET" ], // LIMIT, MARKET, STOP
        //                 "filters": [
        //                     { filterType: "LOT_SIZE", minQty: "0.0001", maxQty: "100", stepSize: "0.0001", },
        //                     { filterType: "MIN_NOTIONAL", minNotional: "5", },
        //                 ],
        //                 "marketModes": [ "REGULAR" ], // CLOSE_ONLY, LONG_ONLY, REGULAR
        //                 "marketType": "SPOT", // SPOT, LEVERAGE
        //                 "longRate": -0.0684932, // LEVERAGE only
        //                 "shortRate": -0.0684932, // LEVERAGE only
        //                 "swapChargeInterval": 1440, // LEVERAGE only
        //                 "country": "",
        //                 "sector": "",
        //                 "industry": "",
        //                 "tradingHours": "UTC; Mon - 22:00, 22:05 -; Tue - 22:00, 22:05 -; Wed - 22:00, 22:05 -; Thu - 22:00, 22:05 -; Fri - 22:00, 23:01 -; Sat - 22:00, 22:05 -; Sun - 21:00, 22:05 -",
        //                 "tickSize": "0.01",
        //                 "tickValue": "403.4405", // not available in BTC/USDT_LEVERAGE, but available in BTC/USD_LEVERAGE
        //                 "exchangeFee": "0.2", // SPOT only
        //                 "tradingFee": 0.075, // LEVERAGE only
        //                 "makerFee": -0.025, // LEVERAGE only
        //                 "takerFee": 0.06, // LEVERAGE only
        //                 "maxSLGap": 50, // LEVERAGE only
        //                 "minSLGap": 1, // LEVERAGE only
        //                 "maxTPGap": 50, // LEVERAGE only
        //                 "minTPGap": 0.5, // LEVERAGE only
        //                 "assetType": "CRYPTOCURRENCY",
        //             },
        //         ]
        //     }
        //
        if (isTrue(getValue(this.options, "adjustForTimeDifference")))
        {
            await this.loadTimeDifference();
        }
        object markets = this.safeValue(response, "symbols", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object market = getValue(markets, i);
            object id = this.safeString(market, "symbol");
            object baseId = this.safeString(market, "baseAsset");
            object quoteId = this.safeString(market, "quoteAsset");
            object bs = this.safeCurrencyCode(baseId);
            object quote = this.safeCurrencyCode(quoteId);
            object symbol = add(add(bs, "/"), quote);
            object typeRaw = this.safeString(market, "marketType");
            object spot = (isEqual(typeRaw, "SPOT"));
            object futures = false;
            object swap = (isEqual(typeRaw, "LEVERAGE"));
            object type = ((bool) isTrue(swap)) ? "swap" : "spot";
            object margin = null;
            if (isTrue(swap))
            {
                symbol = ((string)symbol).Replace((string)getValue(this.options, "leverage_markets_suffix"), (string)"");
                symbol = add(symbol, add(":", quote));
            }
            object active = isEqual(this.safeString(market, "status"), "TRADING");
            // to set taker & maker fees, we use one from the below data - pairs either have 'exchangeFee' or 'tradingFee', if none of them (rare cases), then they should have 'takerFee & makerFee'
            object exchangeFee = this.safeString2(market, "exchangeFee", "tradingFee");
            object makerFee = this.safeString(market, "makerFee", exchangeFee);
            object takerFee = this.safeString(market, "takerFee", exchangeFee);
            makerFee = Precise.stringDiv(makerFee, "100");
            takerFee = Precise.stringDiv(takerFee, "100");
            object filters = this.safeValue(market, "filters", new List<object>() {});
            object filtersByType = this.indexBy(filters, "filterType");
            object limitPriceMin = null;
            object limitPriceMax = null;
            object precisionPrice = this.safeNumber(market, "tickSize");
            if (isTrue(inOp(filtersByType, "PRICE_FILTER")))
            {
                object filter = this.safeValue(filtersByType, "PRICE_FILTER", new Dictionary<string, object>() {});
                precisionPrice = this.safeNumber(filter, "tickSize");
                // PRICE_FILTER reports zero values for maxPrice
                // since they updated filter types in November 2018
                // https://github.com/ccxt/ccxt/issues/4286
                // therefore limits['price']['max'] doesn't have any meaningful value except undefined
                limitPriceMin = this.safeNumber(filter, "minPrice");
                object maxPrice = this.safeString(filter, "maxPrice");
                if (isTrue(isTrue((!isEqual(maxPrice, null))) && isTrue((Precise.stringGt(maxPrice, "0")))))
                {
                    limitPriceMax = maxPrice;
                }
            }
            object precisionAmount = this.parseNumber(this.parsePrecision(this.safeString(market, "baseAssetPrecision")));
            object limitAmount = new Dictionary<string, object>() {
                { "min", null },
                { "max", null },
            };
            if (isTrue(inOp(filtersByType, "LOT_SIZE")))
            {
                object filter = this.safeValue(filtersByType, "LOT_SIZE", new Dictionary<string, object>() {});
                precisionAmount = this.safeNumber(filter, "stepSize");
                limitAmount = new Dictionary<string, object>() {
                    { "min", this.safeNumber(filter, "minQty") },
                    { "max", this.safeNumber(filter, "maxQty") },
                };
            }
            object limitMarket = new Dictionary<string, object>() {
                { "min", null },
                { "max", null },
            };
            if (isTrue(inOp(filtersByType, "MARKET_LOT_SIZE")))
            {
                object filter = this.safeValue(filtersByType, "MARKET_LOT_SIZE", new Dictionary<string, object>() {});
                limitMarket = new Dictionary<string, object>() {
                    { "min", this.safeNumber(filter, "minQty") },
                    { "max", this.safeNumber(filter, "maxQty") },
                };
            }
            object costMin = null;
            if (isTrue(inOp(filtersByType, "MIN_NOTIONAL")))
            {
                object filter = this.safeValue(filtersByType, "MIN_NOTIONAL", new Dictionary<string, object>() {});
                costMin = this.safeNumber(filter, "minNotional");
            }
            object isContract = isTrue(swap) || isTrue(futures);
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", symbol },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", type },
                { "spot", spot },
                { "margin", margin },
                { "swap", swap },
                { "future", futures },
                { "option", false },
                { "active", active },
                { "contract", isContract },
                { "linear", ((bool) isTrue(isContract)) ? true : null },
                { "inverse", null },
                { "taker", this.parseNumber(takerFee) },
                { "maker", this.parseNumber(makerFee) },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", precisionAmount },
                    { "price", precisionPrice },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", limitAmount },
                    { "market", limitMarket },
                    { "price", new Dictionary<string, object>() {
                        { "min", limitPriceMin },
                        { "max", this.parseNumber(limitPriceMax) },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", costMin },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", market },
            });
        }
        return result;
    }

    public async override Task<object> fetchAccounts(object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchAccounts
        * @description fetch all the accounts associated with a profile
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/accountUsingGET
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.privateGetV2Account(parameters);
        //
        //     {
        //         "makerCommission": "0.20",
        //         "takerCommission": "0.20",
        //         "buyerCommission": "0.20",
        //         "sellerCommission": "0.20",
        //         "canTrade": true,
        //         "canWithdraw": true,
        //         "canDeposit": true,
        //         "updateTime": "1645266330",
        //         "userId": "644722",
        //         "balances": [
        //             {
        //                 "accountId": "120702016179403605",
        //                 "collateralCurrency": false,
        //                 "asset": "CAKE",
        //                 "free": "3.1",
        //                 "locked": "0.0",
        //                 "default": false,
        //             },
        //             {
        //                 "accountId": "109698017713125316",
        //                 "collateralCurrency": true,
        //                 "asset": "USD",
        //                 "free": "17.58632",
        //                 "locked": "0.0",
        //                 "default": true,
        //             }
        //         ]
        //     }
        //
        object accounts = this.safeValue(response, "balances", new List<object>() {});
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(accounts)); postFixIncrement(ref i))
        {
            object account = getValue(accounts, i);
            object accountId = this.safeString(account, "accountId"); // must be string, because the numeric value is far too big for integer, and causes bugs
            object currencyId = this.safeString(account, "asset");
            object currencyCode = this.safeCurrencyCode(currencyId);
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", accountId },
                { "type", null },
                { "currency", currencyCode },
                { "info", account },
            });
        }
        return result;
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/accountUsingGET
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetV2Account(parameters);
        //
        //    {
        //        "makerCommission": "0.20",
        //        "takerCommission": "0.20",
        //        "buyerCommission": "0.20",
        //        "sellerCommission": "0.20",
        //        "canTrade": true,
        //        "canWithdraw": true,
        //        "canDeposit": true,
        //        "updateTime": "1645738976",
        //        "userId": "-1924114235",
        //        "balances": []
        //    }
        //
        object makerFee = this.safeNumber(response, "makerCommission");
        object takerFee = this.safeNumber(response, "takerCommission");
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", response },
                { "symbol", symbol },
                { "maker", makerFee },
                { "taker", takerFee },
                { "percentage", true },
                { "tierBased", false },
            };
        }
        return result;
    }

    public override object parseBalance(object response)
    {
        //
        //     {
        //         "makerCommission":0.20,
        //         "takerCommission":0.20,
        //         "buyerCommission":0.20,
        //         "sellerCommission":0.20,
        //         "canTrade":true,
        //         "canWithdraw":true,
        //         "canDeposit":true,
        //         "updateTime":1591056268,
        //         "balances":[
        //             {
        //                 "accountId":5470306579272368,
        //                 "collateralCurrency":true,
        //                 "asset":"ETH",
        //                 "free":0.0,
        //                 "locked":0.0,
        //                 "default":false,
        //             },
        //         ]
        //     }
        //
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object balances = this.safeValue(response, "balances", new List<object>() {});
        for (object i = 0; isLessThan(i, getArrayLength(balances)); postFixIncrement(ref i))
        {
            object balance = getValue(balances, i);
            object currencyId = this.safeString(balance, "asset");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "free");
            ((IDictionary<string,object>)account)["used"] = this.safeString(balance, "locked");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/accountUsingGET
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetV2Account(parameters);
        //
        //     {
        //         "makerCommission": "0.20",
        //         "takerCommission": "0.20",
        //         "buyerCommission": "0.20",
        //         "sellerCommission": "0.20",
        //         "canTrade": true,
        //         "canWithdraw": true,
        //         "canDeposit": true,
        //         "updateTime": "1645266330",
        //         "userId": "644722",
        //         "balances": [
        //             {
        //                 "accountId": "120702016179403605",
        //                 "collateralCurrency": false,
        //                 "asset": "CAKE",
        //                 "free": "1.784",
        //                 "locked": "0.0",
        //                 "default": false,
        //             },
        //             {
        //                 "accountId": "109698017413175316",
        //                 "collateralCurrency": true,
        //                 "asset": "USD",
        //                 "free": "7.58632",
        //                 "locked": "0.0",
        //                 "default": true,
        //             }
        //         ]
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/depthUsingGET
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000, 5000
        }
        object response = await this.publicGetV2Depth(this.extend(request, parameters));
        //
        //     {
        //         "lastUpdateId":1590999849037,
        //         "asks":[
        //             [0.02495,60.0345],
        //             [0.02496,34.1],
        //             ...
        //         ],
        //         "bids":[
        //             [0.02487,72.4144854],
        //             [0.02486,24.043],
        //             ...
        //         ]
        //     }
        //
        object orderbook = this.parseOrderBook(response, symbol);
        ((IDictionary<string,object>)orderbook)["nonce"] = this.safeInteger(response, "lastUpdateId");
        return orderbook;
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // fetchTicker
        //
        //     {
        //         "symbol":"ETH/BTC",
        //         "priceChange":"0.00030",
        //         "priceChangePercent":"1.21",
        //         "weightedAvgPrice":"0.02481",
        //         "prevClosePrice":"0.02447",
        //         "lastPrice":"0.02477",
        //         "lastQty":"60.0",
        //         "bidPrice":"0.02477",
        //         "askPrice":"0.02484",
        //         "openPrice":"0.02447",
        //         "highPrice":"0.02524",
        //         "lowPrice":"0.02438",
        //         "volume":"11.97",
        //         "quoteVolume":"0.298053",
        //         "openTime":1590969600000,
        //         "closeTime":1591000072693
        //     }
        //
        // fetchTickers
        //
        //     {
        //          "symbol": "SHIB/USD_LEVERAGE",
        //          "weightedAvgPrice": "0.000027595",
        //          "lastPrice": "0.00002737",
        //          "lastQty": "1.11111111E8",
        //          "bidPrice": "0.00002737",
        //          "askPrice": "0.00002782",
        //          "highPrice": "0.00002896",
        //          "lowPrice": "0.00002738",
        //          "volume": "16472160000",
        //          "quoteVolume": "454796.3376",
        //          "openTime": "1645187472000",
        //          "closeTime": "1645273872000",
        //     }
        //
        // ws:marketData.subscribe
        //
        //     {
        //          "symbolName":"TXN",
        //          "bid":139.85,
        //          "bidQty":2500,
        //          "ofr":139.92000000000002,
        //          "ofrQty":2500,
        //          "timestamp":1597850971558
        //      }
        //
        object timestamp = this.safeInteger2(ticker, "closeTime", "timestamp");
        object marketId = this.safeString2(ticker, "symbol", "symbolName");
        market = this.safeMarket(marketId, market, "/");
        object last = this.safeString(ticker, "lastPrice");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "highPrice") },
            { "low", this.safeString(ticker, "lowPrice") },
            { "bid", this.safeString2(ticker, "bidPrice", "bid") },
            { "bidVolume", this.safeString(ticker, "bidQty") },
            { "ask", this.safeString2(ticker, "askPrice", "ofr") },
            { "askVolume", this.safeString(ticker, "ofrQty") },
            { "vwap", this.safeString(ticker, "weightedAvgPrice") },
            { "open", this.safeString(ticker, "openPrice") },
            { "close", last },
            { "last", last },
            { "previousClose", this.safeString(ticker, "prevClosePrice") },
            { "change", this.safeString(ticker, "priceChange") },
            { "percentage", this.safeString(ticker, "priceChangePercent") },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", this.safeString(ticker, "quoteVolume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/ticker_24hrUsingGET
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetV2Ticker24hr(this.extend(request, parameters));
        //
        //     {
        //         "symbol":"ETH/BTC",
        //         "priceChange":"0.00030",
        //         "priceChangePercent":"1.21",
        //         "weightedAvgPrice":"0.02481",
        //         "prevClosePrice":"0.02447",
        //         "lastPrice":"0.02477",
        //         "lastQty":"60.0",
        //         "bidPrice":"0.02477",
        //         "askPrice":"0.02484",
        //         "openPrice":"0.02447",
        //         "highPrice":"0.02524",
        //         "lowPrice":"0.02438",
        //         "volume":"11.97",
        //         "quoteVolume":"0.298053",
        //         "openTime":1590969600000,
        //         "closeTime":1591000072693
        //     }
        //
        return this.parseTicker(response, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/ticker_24hrUsingGET
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetV2Ticker24hr(parameters);
        //
        //     [
        //         {
        //              "symbol": "SHIB/USD_LEVERAGE",
        //              "weightedAvgPrice": "0.000027595",
        //              "lastPrice": "0.00002737",
        //              "lastQty": "1.11111111E8",
        //              "bidPrice": "0.00002737",
        //              "askPrice": "0.00002782",
        //              "highPrice": "0.00002896",
        //              "lowPrice": "0.00002738",
        //              "volume": "16472160000",
        //              "quoteVolume": "454796.3376",
        //              "openTime": "1645187472000",
        //              "closeTime": "1645273872000",
        //         }
        //     ]
        //
        return this.parseTickers(response, symbols);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     [
        //         1590971040000,
        //         "0.02454",
        //         "0.02456",
        //         "0.02452",
        //         "0.02456",
        //         249
        //     ]
        //
        return new List<object> {this.safeInteger(ohlcv, 0), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/klinesUsingGET
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "interval", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = mathMin(limit, 1000); // default 500, max 1000
        }
        object response = await this.publicGetV2Klines(this.extend(request, parameters));
        //
        //     [
        //         [1590971040000,"0.02454","0.02456","0.02452","0.02456",249],
        //         [1590971100000,"0.02455","0.02457","0.02452","0.02456",300],
        //         [1590971160000,"0.02455","0.02456","0.02453","0.02454",286],
        //     ]
        //
        return this.parseOHLCVs(response, market, timeframe, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public aggregate trades)
        //
        //     {
        //         "a":"1658318071",    // Aggregate tradeId
        //         "p":"0.02476",       // Price
        //         "q":"0.0",           // Official doc says: "Quantity (should be ignored)"
        //         "T":"1591001423382", // Epoch timestamp in MS
        //         "m":false            // Was the buyer the maker
        //     }
        //
        // createOrder fills (private)
        //
        //     {
        //         "price": "9807.05",
        //         "qty": "0.01",
        //         "commission": "0",
        //         "commissionAsset": "dUSD"
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "symbol": "DOGE/USD",
        //         "id": "116046000",
        //         "orderId": "00000000-0000-0000-0000-000006dbb8ad",
        //         "price": "0.14094",
        //         "qty": "40.0",
        //         "commission": "0.01",
        //         "commissionAsset": "USD",
        //         "time": "1645283022351",
        //         "buyer": false,
        //         "maker": false,
        //         "isBuyer": false,
        //         "isMaker": false
        //     }
        //
        object timestamp = this.safeInteger2(trade, "T", "time");
        object priceString = this.safeString2(trade, "p", "price");
        object amountString = this.safeString2(trade, "q", "qty");
        object id = this.safeString2(trade, "a", "id");
        object side = null;
        object orderId = this.safeString(trade, "orderId");
        object takerOrMaker = null;
        if (isTrue(inOp(trade, "m")))
        {
            side = ((bool) isTrue(getValue(trade, "m"))) ? "sell" : "buy"; // this is reversed intentionally [TODO: needs reason to be mentioned]
            takerOrMaker = "taker"; // in public trades, it's always taker
        } else if (isTrue(inOp(trade, "isBuyer")))
        {
            side = ((bool) isTrue((getValue(trade, "isBuyer")))) ? "buy" : "sell"; // this is a true side
            takerOrMaker = ((bool) isTrue(getValue(trade, "isMaker"))) ? "maker" : "taker";
        }
        object fee = null;
        if (isTrue(inOp(trade, "commission")))
        {
            fee = new Dictionary<string, object>() {
                { "cost", this.safeString(trade, "commission") },
                { "currency", this.safeCurrencyCode(this.safeString(trade, "commissionAsset")) },
            };
        }
        object marketId = this.safeString(trade, "symbol");
        object symbol = this.safeSymbol(marketId, market);
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "order", orderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", null },
            { "takerOrMaker", takerOrMaker },
            { "side", side },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
            { "info", trade },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/aggTradesUsingGET
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = mathMin(limit, 1000); // default 500, max 1000
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        object response = await this.publicGetV2AggTrades(this.extend(request, parameters));
        //
        // [
        //     {
        //         "a":"1658318071",    // Aggregate tradeId
        //         "p":"0.02476",       // Price
        //         "q":"0.0",           // Official doc says: "Quantity (should be ignored)"
        //         "T":"1591001423382", // Epoch timestamp in MS
        //         "m":false            // Was the buyer the maker
        //     },
        // ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //
        // limit
        //
        //     {
        //         "symbol": "BTC/USD",
        //         "orderId": "00000000-0000-0000-0000-000006eacaa0",
        //         "transactTime": "1645281669295",
        //         "price": "30000.00000000",
        //         "origQty": "0.0002",     // might not be present for "market" order
        //         "executedQty": "0.0",    // positive for BUY, negative for SELL. This property might not be present in Leverage markets
        //         "margin": 0.1,           // present in leverage markets
        //         "status": "NEW",         // NEW, FILLED, ...
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",         // LIMIT, MARKET
        //         "side": "BUY",
        //         "fills": [               // this field might not be present if there were no fills
        //             {
        //                 "price": "0.14094",
        //                 "qty": "40.0",
        //                 "commission": "0",
        //                 "commissionAsset": "dUSD",
        //             },
        //         ],
        //     }
        //
        // fetchOrder (fetchOpenOrders is an array same structure, with some extra fields)
        //
        //    {
        //        "symbol": "BTC/USD_LEVERAGE",
        //        "accountId": "123456789012345678",
        //        "orderId": "00a01234-0123-54c4-0000-123451234567",
        //        "price": "25779.35",
        //        "status": "MODIFIED",
        //        "type": "LIMIT",
        //        "timeInForceType": "GTC",
        //        "side": "BUY",
        //        "guaranteedStopLoss": false,
        //        "trailingStopLoss": false,
        //        "margin": "0.05",
        //        "takeProfit": "27020.00",
        //        "stopLoss": "24500.35",
        //        "fills": [], // might not be present
        //        "timestamp": "1685958369623",  // "time" in "fetchOpenOrders"
        //        "expireTime": "1686167960000", // "expireTimestamp" in "fetchOpenOrders"
        //        "quantity": "0.00040", // "origQty" in "fetchOpenOrders"
        //        "executedQty": "0.0", // present in "fetchOpenOrders"
        //        "updateTime": "1685958369542", // present in "fetchOpenOrders"
        //        "leverage": true, // present in "fetchOpenOrders"
        //        "working": true // present in "fetchOpenOrders"
        //    }
        //
        // cancelOrder
        //
        //     {
        //         "symbol": "DOGE/USD",
        //         "orderId": "00000000-0000-0003-0000-000006db714c",
        //         "price": "0.13",
        //         "origQty": "30.0",
        //         "executedQty": "0.0",
        //         "status": "CANCELED",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //     }
        //
        object marketId = this.safeString(order, "symbol");
        object symbol = this.safeSymbol(marketId, market, "/");
        object id = this.safeString(order, "orderId");
        object price = this.safeString(order, "price");
        object amount = this.safeString2(order, "origQty", "quantity");
        object filledRaw = this.safeString(order, "executedQty");
        object filled = Precise.stringAbs(filledRaw);
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object timeInForce = this.parseOrderTimeInForce(this.safeString2(order, "timeInForce", "timeInForceType"));
        object type = this.parseOrderType(this.safeString(order, "type"));
        object side = this.parseOrderSide(this.safeString(order, "side"));
        object timestamp = this.safeIntegerN(order, new List<object>() {"time", "transactTime", "timestamp"});
        object fills = this.safeValue(order, "fills");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", timeInForce },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "amount", amount },
            { "cost", null },
            { "average", null },
            { "filled", filled },
            { "remaining", null },
            { "status", status },
            { "fee", null },
            { "trades", fills },
        }, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "NEW", "open" },
            { "CREATED", "open" },
            { "MODIFIED", "open" },
            { "PARTIALLY_FILLED", "open" },
            { "FILLED", "closed" },
            { "CANCELED", "canceled" },
            { "PENDING_CANCEL", "canceling" },
            { "REJECTED", "rejected" },
            { "EXPIRED", "expired" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOrderType(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "MARKET", "market" },
            { "LIMIT", "limit" },
            { "STOP", "stop" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOrderTimeInForce(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "GTC", "GTC" },
            { "FOK", "FOK" },
            { "IOC", "IOC" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOrderSide(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "BUY", "buy" },
            { "SELL", "sell" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#createOrder
        * @description create a trade order
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/orderUsingPOST
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object accountId = null;
        if (isTrue(getValue(market, "margin")))
        {
            accountId = this.safeString(this.options, "accountId");
            accountId = this.safeString(parameters, "accountId", accountId);
            if (isTrue(isEqual(accountId, null)))
            {
                throw new ArgumentsRequired ((string)add(add(add(this.id, " createOrder() requires an accountId parameter or an exchange.options[\'accountId\'] option for "), getValue(market, "type")), " markets")) ;
            }
        }
        object newOrderRespType = this.safeValue(getValue(this.options, "newOrderRespType"), type, "RESULT");
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "quantity", this.amountToPrecision(symbol, amount) },
            { "type", ((string)type).ToUpper() },
            { "side", ((string)side).ToUpper() },
            { "newOrderRespType", newOrderRespType },
        };
        if (isTrue(isEqual(type, "limit")))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            ((IDictionary<string,object>)request)["timeInForce"] = getValue(this.options, "defaultTimeInForce");
        } else
        {
            if (isTrue(isEqual(type, "stop")))
            {
                ((IDictionary<string,object>)request)["type"] = "STOP";
                ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
            } else if (isTrue(isEqual(type, "market")))
            {
                object stopPrice = this.safeValue2(parameters, "triggerPrice", "stopPrice");
                parameters = this.omit(parameters, new List<object>() {"triggerPrice", "stopPrice"});
                if (isTrue(!isEqual(stopPrice, null)))
                {
                    ((IDictionary<string,object>)request)["type"] = "STOP";
                    ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, stopPrice);
                }
            }
        }
        object response = await this.privatePostV2Order(this.extend(request, parameters));
        //
        // limit
        //
        //     {
        //         "symbol": "BTC/USD",
        //         "orderId": "00000000-0000-0000-0000-000006eaaaa0",
        //         "transactTime": "1645281669295",
        //         "price": "30000.00000000",
        //         "origQty": "0.0002",
        //         "executedQty": "0.0",  // positive for BUY, negative for SELL
        //         "status": "NEW",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //     }
        //
        // market
        //
        //     {
        //         "symbol": "DOGE/USD",
        //         "orderId": "00000000-0000-0000-0000-000006eab8ad",
        //         "transactTime": "1645283022252",
        //         "price": "0.14066000",
        //         "origQty": "40",
        //         "executedQty": "40.0",  // positive for BUY, negative for SELL
        //         "status": "FILLED",
        //         "timeInForce": "FOK",
        //         "type": "MARKET",
        //         "side": "BUY",
        //         "fills": [
        //             {
        //                 "price": "0.14094",
        //                 "qty": "40.0",
        //                 "commission": "0",
        //                 "commissionAsset": "dUSD"
        //             }
        //         ]
        //     }
        //
        return this.parseOrder(response, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getOrderUsingGET
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "orderId", id },
            { "symbol", getValue(market, "id") },
        };
        object response = await this.privateGetV2FetchOrder(this.extend(request, parameters));
        //
        //    {
        //        "accountId": "109698017413125316",
        //        "orderId": "2810f1c5-0079-54c4-0000-000080421601",
        //        "quantity": "20.0",
        //        "price": "0.06",
        //        "timestamp": "1661157503788",
        //        "status": "CREATED",
        //        "type": "LIMIT",
        //        "timeInForceType": "GTC",
        //        "side": "BUY",
        //        "margin": "0.1",
        //        "fills": [ // might not be present
        //             {
        //                 "price": "0.14094",
        //                 "qty": "40.0",
        //                 "commission": "0",
        //                 "commissionAsset": "dUSD"
        //             }
        //        ]
        //    }
        //
        return this.parseOrder(response);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/openOrdersUsingGET
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        } else if (isTrue(getValue(this.options, "warnOnFetchOpenOrdersWithoutSymbol")))
        {
            object symbols = this.symbols;
            object numSymbols = getArrayLength(symbols);
            object fetchOpenOrdersRateLimit = this.parseToInt(divide(numSymbols, 2));
            throw new ExchangeError ((string)add(add(add(add(add(this.id, " fetchOpenOrders() WARNING: fetching open orders without specifying a symbol is rate-limited to one call per "), ((object)fetchOpenOrdersRateLimit).ToString()), " seconds. Do not call this method frequently to avoid ban. Set "), this.id), ".options[\"warnOnFetchOpenOrdersWithoutSymbol\"] = false to suppress this warning message.")) ;
        }
        object response = await this.privateGetV2OpenOrders(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "symbol": "DOGE/USD",
        //             "orderId": "00000000-0000-0003-0000-000004bac57a",
        //             "price": "0.13",
        //             "origQty": "39.0",
        //             "executedQty": "0.0",  // positive for BUY, negative for SELL
        //             "status": "NEW",
        //             "timeInForce": "GTC",
        //             "type": "LIMIT",
        //             "side": "BUY",
        //             "time": "1645284216240",
        //             "updateTime": "1645284216240",
        //             "leverage": false,
        //             "working": true
        //         },
        //     ]
        //
        return this.parseOrders(response, market, since, limit, parameters);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#cancelOrder
        * @description cancels an open order
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/cancelOrderUsingDELETE
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " cancelOrder() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object origClientOrderId = this.safeValue(parameters, "origClientOrderId");
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(isEqual(origClientOrderId, null)))
        {
            ((IDictionary<string,object>)request)["orderId"] = id;
        } else
        {
            ((IDictionary<string,object>)request)["origClientOrderId"] = origClientOrderId;
        }
        object response = await this.privateDeleteV2Order(this.extend(request, parameters));
        //
        //     {
        //         "symbol": "DOGE/USD",
        //         "orderId": "00000000-0000-0003-0000-000006db764c",
        //         "price": "0.13",
        //         "origQty": "30.0",
        //         "executedQty": "0.0",  // positive for BUY, negative for SELL
        //         "status": "CANCELED",
        //         "timeInForce": "GTC",
        //         "type": "LIMIT",
        //         "side": "BUY",
        //     }
        //
        return this.parseOrder(response, market);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/myTradesUsingGET
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetV2MyTrades(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "symbol": "DOGE/USD",
        //             "id": "116046000",
        //             "orderId": "00000000-0000-0000-0000-000006dbb8ad",
        //             "price": "0.14094",
        //             "qty": "40.0",
        //             "commission": "0.01",
        //             "commissionAsset": "USD",
        //             "time": "1645283022351",
        //             "buyer": false,
        //             "maker": false,
        //             "isBuyer": false,
        //             "isMaker": false
        //         },
        //     ]
        //
        return this.parseTrades(response, market, since, limit);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getDepositsUsingGET
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchTransactionsByMethod("privateGetV2Deposits", code, since, limit, parameters);
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getWithdrawalsUsingGET
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchTransactionsByMethod("privateGetV2Withdrawals", code, since, limit, parameters);
    }

    public async override Task<object> fetchDepositsWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchDepositsWithdrawals
        * @description fetch history of deposits and withdrawals
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getTransactionsUsingGET
        * @param {string} [code] unified currency code for the currency of the deposit/withdrawals, default is undefined
        * @param {int} [since] timestamp in ms of the earliest deposit/withdrawal, default is undefined
        * @param {int} [limit] max number of deposit/withdrawals to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        return await this.fetchTransactionsByMethod("privateGetV2Transactions", code, since, limit, parameters);
    }

    public async virtual Task<object> fetchTransactionsByMethod(object method, object code = null, object since = null, object limit = null, object parameters = null)
    {
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = null;
        if (isTrue(isEqual(method, "privateGetV2Deposits")))
        {
            response = await this.privateGetV2Deposits(this.extend(request, parameters));
        } else if (isTrue(isEqual(method, "privateGetV2Withdrawals")))
        {
            response = await this.privateGetV2Withdrawals(this.extend(request, parameters));
        } else if (isTrue(isEqual(method, "privateGetV2Transactions")))
        {
            response = await this.privateGetV2Transactions(this.extend(request, parameters));
        } else
        {
            throw new NotSupported ((string)add(this.id, " fetchTransactionsByMethod() not support this method")) ;
        }
        //
        //    [
        //        {
        //            "id": "616769213",
        //            "balance": "2.088",
        //            "amount": "1.304",   // negative for 'withdrawal'
        //            "currency": "CAKE",
        //            "type": "deposit",
        //            "timestamp": "1645282121023",
        //            "paymentMethod": "BLOCKCHAIN",
        //            "blockchainTransactionHash": "0x57c68c1f2ae74d5eda5a2a00516361d241a5c9e1ee95bf32573523857c38c112",
        //            "status": "PROCESSED",
        //            "commission": "0.14", // this property only exists in withdrawal
        //        },
        //    ]
        //
        return this.parseTransactions(response, currency, since, limit, parameters);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        //    {
        //        "id": "616769213",
        //        "balance": "2.088",
        //        "amount": "1.304",   // negative for 'withdrawal'
        //        "currency": "CAKE",
        //        "type": "deposit",
        //        "timestamp": "1645282121023",
        //        "paymentMethod": "BLOCKCHAIN",
        //        "blockchainTransactionHash": "0x57c68c1f2ae74d5eda5a2a00516361d241a5c9e1ee95bf32573523857c38c112",
        //        "status": "PROCESSED",
        //        "commission": "0.14", // this property only exists in withdrawal
        //    }
        //
        object timestamp = this.safeInteger(transaction, "timestamp");
        object currencyId = this.safeString(transaction, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object feeCost = this.safeString(transaction, "commission");
        object fee = new Dictionary<string, object>() {
            { "currency", null },
            { "cost", null },
            { "rate", null },
        };
        if (isTrue(!isEqual(feeCost, null)))
        {
            ((IDictionary<string,object>)fee)["currency"] = code;
            ((IDictionary<string,object>)fee)["cost"] = feeCost;
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", this.safeString(transaction, "id") },
            { "txid", this.safeString(transaction, "blockchainTransactionHash") },
            { "type", this.parseTransactionType(this.safeString(transaction, "type")) },
            { "currency", code },
            { "network", null },
            { "amount", this.safeNumber(transaction, "amount") },
            { "status", this.parseTransactionStatus(this.safeString(transaction, "state")) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "address", null },
            { "addressFrom", null },
            { "addressTo", null },
            { "tag", null },
            { "tagFrom", null },
            { "tagTo", null },
            { "updated", null },
            { "internal", null },
            { "comment", null },
            { "fee", fee },
        };
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "APPROVAL", "pending" },
            { "PROCESSED", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseTransactionType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "deposit", "deposit" },
            { "withdrawal", "withdrawal" },
        };
        return this.safeString(types, type, type);
    }

    public async override Task<object> fetchLedger(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchLedger
        * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getLedgerUsingGET
        * @param {string} code unified currency code, default is undefined
        * @param {int} [since] timestamp in ms of the earliest ledger entry, default is undefined
        * @param {int} [limit] max number of ledger entrys to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetV2Ledger(this.extend(request, parameters));
        // in the below example, first item expresses withdrawal/deposit type, second example expresses trade
        //
        // [
        //     {
        //       "id": "619031398",
        //       "balance": "0.0",
        //       "amount": "-1.088",
        //       "currency": "CAKE",
        //       "type": "withdrawal",
        //       "timestamp": "1645460496425",
        //       "commission": "0.13",
        //       "paymentMethod": "BLOCKCHAIN", // present in withdrawal/deposit
        //       "blockchainTransactionHash": "0x400ac905557c3d34638b1c60eba110b3ee0f97f4eb0f7318015ab76e7f16b7d6", // present in withdrawal/deposit
        //       "status": "PROCESSED"
        //     },
        //     {
        //       "id": "619031034",
        //       "balance": "8.17223588",
        //       "amount": "-0.01326294",
        //       "currency": "USD",
        //       "type": "exchange_commission",
        //       "timestamp": "1645460461235",
        //       "commission": "0.01326294",
        //       "status": "PROCESSED"
        //     },
        // ]
        //
        return this.parseLedger(response, currency, since, limit);
    }

    public override object parseLedgerEntry(object item, object currency = null)
    {
        object id = this.safeString(item, "id");
        object amountString = this.safeString(item, "amount");
        object amount = Precise.stringAbs(amountString);
        object timestamp = this.safeInteger(item, "timestamp");
        object currencyId = this.safeString(item, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object feeCost = this.safeString(item, "commission");
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", code },
                { "cost", feeCost },
            };
        }
        object direction = ((bool) isTrue(Precise.stringLt(amountString, "0"))) ? "out" : "in";
        object result = new Dictionary<string, object>() {
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "direction", direction },
            { "account", null },
            { "referenceId", this.safeString(item, "blockchainTransactionHash") },
            { "referenceAccount", null },
            { "type", this.parseLedgerEntryType(this.safeString(item, "type")) },
            { "currency", code },
            { "amount", amount },
            { "before", null },
            { "after", this.safeString(item, "balance") },
            { "status", this.parseLedgerEntryStatus(this.safeString(item, "status")) },
            { "fee", fee },
            { "info", item },
        };
        return result;
    }

    public virtual object parseLedgerEntryStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "APPROVAL", "pending" },
            { "PROCESSED", "ok" },
            { "CANCELLED", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseLedgerEntryType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "deposit", "transaction" },
            { "withdrawal", "transaction" },
            { "exchange_commission", "fee" },
        };
        return this.safeString(types, type, type);
    }

    public async override Task<object> fetchLeverage(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchLeverage
        * @description fetch the set leverage for a market
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/leverageSettingsUsingGET
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [leverage structure]{@link https://docs.ccxt.com/#/?id=leverage-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.privateGetV2LeverageSettings(this.extend(request, parameters));
        //
        //     {
        //         "values": [ 1, 2, 5, 10, ],
        //         "value": "10",
        //     }
        //
        return this.parseLeverage(response, market);
    }

    public override object parseLeverage(object leverage, object market = null)
    {
        object leverageValue = this.safeInteger(leverage, "value");
        return new Dictionary<string, object>() {
            { "info", leverage },
            { "symbol", getValue(market, "symbol") },
            { "marginMode", null },
            { "longLeverage", leverageValue },
            { "shortLeverage", leverageValue },
        };
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getDepositAddressUsingGET
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "coin", getValue(currency, "id") },
        };
        object response = await this.privateGetV2DepositAddress(this.extend(request, parameters));
        //
        //     { "address":"0x97d64eb014ac779194991e7264f01c74c90327f0" }
        //
        return this.parseDepositAddress(response, currency);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        object address = this.safeString(depositAddress, "address");
        this.checkAddress(address);
        currency = this.safeCurrency(null, currency);
        return new Dictionary<string, object>() {
            { "currency", getValue(currency, "code") },
            { "address", address },
            { "tag", null },
            { "network", null },
            { "info", depositAddress },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), path);
        if (isTrue(isEqual(path, "historicalTrades")))
        {
            headers = new Dictionary<string, object>() {
                { "X-MBX-APIKEY", this.apiKey },
            };
        }
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object query = this.urlencode(this.extend(new Dictionary<string, object>() {
                { "timestamp", this.nonce() },
                { "recvWindow", getValue(this.options, "recvWindow") },
            }, parameters));
            object signature = this.hmac(this.encode(query), this.encode(this.secret), sha256);
            query = add(query, add(add("&", "signature="), signature));
            headers = new Dictionary<string, object>() {
                { "X-MBX-APIKEY", this.apiKey },
            };
            if (isTrue(isTrue((isEqual(method, "GET"))) || isTrue((isEqual(method, "DELETE")))))
            {
                url = add(url, add("?", query));
            } else
            {
                body = query;
                ((IDictionary<string,object>)headers)["Content-Type"] = "application/x-www-form-urlencoded";
            }
        } else
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        }
        url = this.implodeHostname(url);
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public async override Task<object> fetchPositions(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name currencycom#fetchPositions
        * @description fetch all open positions
        * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/tradingPositionsUsingGET
        * @param {string[]|undefined} symbols list of unified market symbols
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetV2TradingPositions(parameters);
        //
        //    {
        //        "positions": [
        //          {
        //            "accountId": "109698017416453793",
        //            "id": "00a18490-0079-54c4-0000-0000803e73d3",
        //            "instrumentId": "45463225268524228",
        //            "orderId": "00a18490-0079-54c4-0000-0000803e73d2",
        //            "openQuantity": "13.6",
        //            "openPrice": "0.75724",
        //            "closeQuantity": "0.0",
        //            "closePrice": "0",
        //            "rpl": "-0.007723848",
        //            "rplConverted": "0",
        //            "upl": "-0.006664",
        //            "uplConverted": "-0.006664",
        //            "swap": "0",
        //            "swapConverted": "0",
        //            "fee": "-0.007723848",
        //            "dividend": "0",
        //            "margin": "0.2",
        //            "state": "ACTIVE",
        //            "currency": "USD",
        //            "createdTimestamp": "1645473877236",
        //            "openTimestamp": "1645473877193",
        //            "type": "NET",
        //            "cost": "2.0583600",
        //            "symbol": "XRP/USD_LEVERAGE"
        //          }
        //        ]
        //    }
        //
        object data = this.safeList(response, "positions", new List<object>() {});
        return this.parsePositions(data, symbols);
    }

    public override object parsePosition(object position, object market = null)
    {
        //
        //    {
        //        "accountId": "109698017416453793",
        //        "id": "00a18490-0079-54c4-0000-0000803e73d3",
        //        "instrumentId": "45463225268524228",
        //        "orderId": "00a18490-0079-54c4-0000-0000803e73d2",
        //        "openQuantity": "13.6",
        //        "openPrice": "0.75724",
        //        "closeQuantity": "0.0",
        //        "closePrice": "0",
        //        "rpl": "-0.007723848",
        //        "rplConverted": "0",
        //        "upl": "-0.006664",
        //        "uplConverted": "-0.006664",
        //        "swap": "0",
        //        "swapConverted": "0",
        //        "fee": "-0.007723848",
        //        "dividend": "0",
        //        "margin": "0.2",
        //        "state": "ACTIVE",
        //        "currency": "USD",
        //        "createdTimestamp": "1645473877236",
        //        "openTimestamp": "1645473877193",
        //        "type": "NET",
        //        "cost": "2.0583600",
        //        "symbol": "XRP/USD_LEVERAGE"
        //    }
        //
        market = this.safeMarket(this.safeString(position, "symbol"), market);
        object symbol = getValue(market, "symbol");
        object timestamp = this.safeInteger(position, "createdTimestamp");
        object quantityRaw = this.safeString(position, "openQuantity");
        object side = ((bool) isTrue(Precise.stringGt(quantityRaw, "0"))) ? "long" : "short";
        object quantity = Precise.stringAbs(quantityRaw);
        object entryPrice = this.safeNumber(position, "openPrice");
        object unrealizedProfit = this.safeNumber(position, "upl");
        object marginCoeff = this.safeString(position, "margin");
        object leverage = Precise.stringDiv("1", marginCoeff);
        return this.safePosition(new Dictionary<string, object>() {
            { "info", position },
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastUpdateTimestamp", null },
            { "contracts", this.parseNumber(quantity) },
            { "contractSize", null },
            { "entryPrice", entryPrice },
            { "collateral", null },
            { "side", side },
            { "unrealizedProfit", unrealizedProfit },
            { "leverage", leverage },
            { "percentage", null },
            { "marginMode", null },
            { "notional", null },
            { "markPrice", null },
            { "lastPrice", null },
            { "liquidationPrice", null },
            { "initialMargin", null },
            { "initialMarginPercentage", null },
            { "maintenanceMargin", this.parseNumber(marginCoeff) },
            { "maintenanceMarginPercentage", null },
            { "marginRatio", null },
            { "id", null },
            { "unrealizedPnl", null },
            { "hedged", null },
            { "stopLossPrice", null },
            { "takeProfitPrice", null },
        });
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isTrue((isEqual(httpCode, 418))) || isTrue((isEqual(httpCode, 429)))))
        {
            throw new DDoSProtection ((string)add(add(add(add(add(add(this.id, " "), ((object)httpCode).ToString()), " "), reason), " "), body)) ;
        }
        // error response in a form: { "code": -1013, "msg": "Invalid quantity." }
        // following block cointains legacy checks against message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if (isTrue(isGreaterThanOrEqual(httpCode, 400)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(body, "Price * QTY is zero or less"), 0)))
            {
                throw new InvalidOrder ((string)add(add(this.id, " order cost = amount * price is zero or less "), body)) ;
            }
            if (isTrue(isGreaterThanOrEqual(getIndexOf(body, "LOT_SIZE"), 0)))
            {
                throw new InvalidOrder ((string)add(add(this.id, " order amount should be evenly divisible by lot size "), body)) ;
            }
            if (isTrue(isGreaterThanOrEqual(getIndexOf(body, "PRICE_FILTER"), 0)))
            {
                throw new InvalidOrder ((string)add(add(this.id, " order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use this.priceToPrecision (symbol, amount) "), body)) ;
            }
        }
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        //
        //     {"code":-1128,"msg":"Combination of optional parameters invalid."}
        //
        object errorCode = this.safeString(response, "code");
        if (isTrue(isTrue((!isEqual(errorCode, null))) && isTrue((!isEqual(errorCode, "0")))))
        {
            object feedback = add(add(this.id, " "), this.json(response));
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), errorCode, feedback);
            object message = this.safeString(response, "msg");
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
