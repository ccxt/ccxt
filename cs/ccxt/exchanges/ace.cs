namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class ace : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "ace" },
            { "name", "ACE" },
            { "countries", new List<object>() {"TW"} },
            { "version", "v2" },
            { "rateLimit", 100 },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "cancelAllOrders", false },
                { "cancelOrder", true },
                { "cancelOrders", false },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createOrder", true },
                { "editOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", false },
                { "fetchDepositAddress", false },
                { "fetchDeposits", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchOrderTrades", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", false },
                { "fetchTrades", false },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchTransactionFees", false },
                { "fetchTransactions", false },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "transfer", false },
                { "withdraw", false },
                { "ws", false },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", 1 },
                { "5m", 5 },
                { "10m", 10 },
                { "30m", 10 },
                { "1h", 60 },
                { "2h", 120 },
                { "4h", 240 },
                { "8h", 480 },
                { "12h", 720 },
                { "1d", 24 },
                { "1w", 70 },
                { "1M", 31 },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/216908003-fb314cf6-e66e-471c-b91d-1d86e4baaa90.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://ace.io/polarisex" },
                    { "private", "https://ace.io/polarisex/open" },
                } },
                { "www", "https://ace.io/" },
                { "doc", new List<object>() {"https://github.com/ace-exchange/ace-offical-api-docs"} },
                { "fees", "https://helpcenter.ace.io/hc/zh-tw/articles/360018609132-%E8%B2%BB%E7%8E%87%E8%AA%AA%E6%98%8E" },
            } },
            { "requiredCredentials", new Dictionary<string, object>() {
                { "apiKey", true },
                { "secret", true },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"oapi/v2/list/tradePrice", "oapi/v2/list/marketPair", "open/v2/public/getOrderBook"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"v2/coin/customerAccount", "v2/kline/getKline", "v2/order/order", "v2/order/cancel", "v2/order/getOrderList", "v2/order/showOrderStatus", "v2/order/showOrderHistory", "v2/order/getTradeList"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "percentage", true },
                    { "maker", this.parseNumber("0.0005") },
                    { "taker", this.parseNumber("0.001") },
                } },
            } },
            { "options", new Dictionary<string, object>() {
                { "brokerId", "ccxt" },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "2003", typeof(InvalidOrder) },
                    { "2004", typeof(InvalidOrder) },
                    { "2005", typeof(InvalidOrder) },
                    { "2021", typeof(InsufficientFunds) },
                    { "2036", typeof(InvalidOrder) },
                    { "2039", typeof(InvalidOrder) },
                    { "2053", typeof(InvalidOrder) },
                    { "2061", typeof(BadRequest) },
                    { "2063", typeof(InvalidOrder) },
                    { "9996", typeof(BadRequest) },
                    { "10012", typeof(AuthenticationError) },
                    { "20182", typeof(AuthenticationError) },
                    { "20183", typeof(InvalidOrder) },
                } },
                { "broad", new Dictionary<string, object>() {} },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {} },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchMarkets
        * @description retrieves data on all markets for ace
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#oapi-api---market-pair
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetOapiV2ListMarketPair();
        //
        //     [
        //         {
        //             "symbol":"BTC/USDT",
        //             "base":"btc",
        //             "baseCurrencyId": "122"
        //             "quote":"usdt",
        //             "basePrecision":"8",
        //             "quotePrecision":"5",
        //             "minLimitBaseAmount":"0.1",
        //             "maxLimitBaseAmount":"480286"
        //         }
        //     ]
        //
        return this.parseMarkets(response);
    }

    public override object parseMarket(object market)
    {
        object baseId = this.safeString(market, "base");
        object bs = this.safeCurrencyCode(baseId);
        object quoteId = this.safeString(market, "quote");
        object quote = this.safeCurrencyCode(quoteId);
        object symbol = add(add(bs, "/"), quote);
        return new Dictionary<string, object>() {
            { "id", this.safeString(market, "symbol") },
            { "uppercaseId", null },
            { "symbol", symbol },
            { "base", bs },
            { "baseId", baseId },
            { "quote", quote },
            { "quoteId", quoteId },
            { "settle", null },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "limits", new Dictionary<string, object>() {
                { "amount", new Dictionary<string, object>() {
                    { "min", this.safeNumber(market, "minLimitBaseAmount") },
                    { "max", this.safeNumber(market, "maxLimitBaseAmount") },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "precision", new Dictionary<string, object>() {
                { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "quotePrecision"))) },
                { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "basePrecision"))) },
            } },
            { "active", null },
            { "created", null },
            { "info", market },
        };
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "base_volume":229196.34035399999,
        //         "last_price":11881.06,
        //         "quote_volume":19.2909
        //     }
        //
        object marketId = this.safeString(ticker, "id");
        object symbol = this.safeSymbol(marketId, market);
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "high", null },
            { "low", null },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", this.safeString(ticker, "last_price") },
            { "last", this.safeString(ticker, "last_price") },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "base_volume") },
            { "quoteVolume", this.safeString(ticker, "quote_volume") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#oapi-api---trade-data
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object response = await this.publicGetOapiV2ListTradePrice(parameters);
        object marketId = getValue(market, "id");
        object ticker = this.safeValue(response, marketId, new Dictionary<string, object>() {});
        //
        //     {
        //         "BTC/USDT":{
        //             "base_volume":229196.34035399999,
        //             "last_price":11881.06,
        //             "quote_volume":19.2909
        //         }
        //     }
        //
        return this.parseTicker(ticker, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#oapi-api---trade-data
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetOapiV2ListTradePrice();
        //
        //     {
        //         "BTC/USDT":{
        //             "base_volume":229196.34035399999,
        //             "last_price":11881.06,
        //             "quote_volume":19.2909
        //         }
        //     }
        //
        object tickers = new List<object>() {};
        object pairs = new List<object>(((IDictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(pairs)); postFixIncrement(ref i))
        {
            object marketId = getValue(pairs, i);
            object market = this.safeMarket(marketId);
            object rawTicker = this.safeValue(response, marketId);
            object ticker = this.parseTicker(rawTicker, market);
            ((IList<object>)tickers).Add(ticker);
        }
        return this.filterByArrayTickers(tickers, "symbol", symbols);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-books
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "quoteCurrencyId", getValue(market, "quoteId") },
            { "baseCurrencyId", getValue(market, "baseId") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["depth"] = limit;
        }
        object response = await this.publicGetOpenV2PublicGetOrderBook(this.extend(request, parameters));
        //
        //     {
        //         "attachment": {
        //             "baseCurrencyId": "2",
        //             "quoteCurrencyId": "14",
        //             "baseCurrencyName": "BTC",
        //             "quoteCurrencyName": "USDT",
        //             "bids": [
        //                 [
        //                     "0.0009",
        //                     "19993.53"
        //                 ],
        //                 [
        //                     "0.001",
        //                     "19675.33"
        //                 ],
        //                 [
        //                     "0.001",
        //                     "19357.13"
        //                 ]
        //             ],
        //             "asks": [
        //                 [
        //                     "0.001",
        //                     "20629.92"
        //                 ],
        //                 [
        //                     "0.001",
        //                     "20948.12"
        //                 ]
        //             ]
        //         },
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        object orderBook = this.safeDict(response, "attachment");
        return this.parseOrderBook(orderBook, getValue(market, "symbol"), null, "bids", "asks");
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     {
        //         "changeRate": 0,
        //         "volume": 0,
        //         "closePrice": 101000.0,
        //         "lowPrice": 101000.0,
        //         "highPrice": 101000.0,
        //         "highPrice": 1573195740000L,
        //         "openPrice": 101000.0,
        //         "current": 101000.0,
        //         "currentTime": "2019-11-08 14:49:00",
        //         "createTime": "2019-11-08 14:49:00"
        //     }
        //
        object dateTime = this.safeString(ohlcv, "createTime");
        object timestamp = this.parse8601(dateTime);
        if (isTrue(!isEqual(timestamp, null)))
        {
            timestamp = subtract(timestamp, 28800000); // 8 hours
        }
        return new List<object>() {timestamp, this.safeNumber(ohlcv, "openPrice"), this.safeNumber(ohlcv, "highPrice"), this.safeNumber(ohlcv, "lowPrice"), this.safeNumber(ohlcv, "closePrice"), this.safeNumber(ohlcv, "volume")};
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---klinecandlestick-data
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "duration", getValue(this.timeframes, timeframe) },
            { "quoteCurrencyId", getValue(market, "quoteId") },
            { "baseCurrencyId", getValue(market, "baseId") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["startTime"] = since;
        }
        object response = await this.privatePostV2KlineGetKline(this.extend(request, parameters));
        object data = this.safeValue(response, "attachment", new List<object>() {});
        //
        //     {
        //         "attachment":[
        //                 {
        //                     "changeRate": 0,
        //                     "closePrice": 101000.0,
        //                     "volume": 0,
        //                     "lowPrice": 101000.0,
        //                     "highPrice": 101000.0,
        //                     "highPrice": 1573195740000L,
        //                     "openPrice": 101000.0,
        //                     "current": 101000.0,
        //                     "currentTime": "2019-11-08 14:49:00",
        //                     "createTime": "2019-11-08 14:49:00"
        //                 }
        //         ]
        //     }
        //
        return this.parseOHLCVs(data, market, timeframe, since, limit);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "0", "open" },
            { "1", "open" },
            { "2", "closed" },
            { "4", "canceled" },
            { "5", "canceled" },
        };
        return this.safeString(statuses, status, null);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder
        //         "15697850529570392100421100482693"
        //
        // fetchOpenOrders
        //         {
        //             "uid": 0,
        //             "orderNo": "16113081376560890227301101413941",
        //             "orderTime": "2021-01-22 17:35:37",
        //             "orderTimeStamp": 1611308137656,
        //             "baseCurrencyId": 1,
        //             "baseCurrencyName": "TWD",
        //             "quoteCurrencyId": 14,
        //             "quoteCurrencyName": "USDT",
        //             "buyOrSell": "1",
        //             "num": "6.0000000000000000",
        //             "price": "32.5880000000000000",
        //             "remainNum": "2.0000000000000000",
        //             "tradeNum": "4.0000000000000000",
        //             "tradePrice": "31.19800000000000000000",
        //             "tradeAmount": "124.7920000000000000",
        //             "tradeRate": "0.66666666666666666667",
        //             "status": 1,
        //             "type": 1
        //         }
        //
        object id = null;
        object timestamp = null;
        object symbol = null;
        object price = null;
        object amount = null;
        object side = null;
        object type = null;
        object status = null;
        object filled = null;
        object remaining = null;
        object average = null;
        if (isTrue((order is string)))
        {
            id = order;
        } else
        {
            id = this.safeString(order, "orderNo");
            timestamp = this.safeInteger(order, "orderTimeStamp");
            if (isTrue(isEqual(timestamp, null)))
            {
                object dateTime = this.safeString(order, "orderTime");
                if (isTrue(!isEqual(dateTime, null)))
                {
                    timestamp = this.parse8601(dateTime);
                    timestamp = subtract(timestamp, 28800000); // 8 hours
                }
            }
            object orderSide = this.safeNumber(order, "buyOrSell");
            if (isTrue(!isEqual(orderSide, null)))
            {
                side = ((bool) isTrue((isEqual(orderSide, 1)))) ? "buy" : "sell";
            }
            amount = this.safeString(order, "num");
            price = this.safeString(order, "price");
            object quoteId = this.safeString(order, "quoteCurrencyName");
            object baseId = this.safeString(order, "baseCurrencyName");
            if (isTrue(isTrue(!isEqual(quoteId, null)) && isTrue(!isEqual(baseId, null))))
            {
                symbol = add(add(baseId, "/"), quoteId);
            }
            object orderType = this.safeNumber(order, "type");
            if (isTrue(!isEqual(orderType, null)))
            {
                type = ((bool) isTrue((isEqual(orderType, 1)))) ? "limit" : "market";
            }
            filled = this.safeString(order, "tradeNum");
            remaining = this.safeString(order, "remainNum");
            status = this.parseOrderStatus(this.safeString(order, "status"));
            average = this.safeString(order, "averagePrice");
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "amount", amount },
            { "cost", null },
            { "average", average },
            { "filled", filled },
            { "remaining", remaining },
            { "status", status },
            { "fee", null },
            { "trades", null },
            { "info", order },
        }, market);
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#createOrder
        * @description create a trade order
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---new-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object orderType = ((string)type).ToUpper();
        object orderSide = ((string)side).ToUpper();
        object request = new Dictionary<string, object>() {
            { "baseCurrencyId", getValue(market, "baseId") },
            { "quoteCurrencyId", getValue(market, "quoteId") },
            { "type", ((bool) isTrue((isEqual(orderType, "LIMIT")))) ? 1 : 2 },
            { "buyOrSell", ((bool) isTrue((isEqual(orderSide, "BUY")))) ? 1 : 2 },
            { "num", this.amountToPrecision(symbol, amount) },
        };
        if (isTrue(isEqual(type, "limit")))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        object response = await this.privatePostV2OrderOrder(this.extend(request, parameters));
        //
        //     {
        //         "attachment": "15697850529570392100421100482693",
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        object data = this.safeDict(response, "attachment");
        return this.parseOrder(data, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#cancelOrder
        * @description cancels an open order
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---cancel-order
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderNo", id },
        };
        object response = await this.privatePostV2OrderCancel(this.extend(request, parameters));
        //
        //     {
        //         "attachment": 200,
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        return response;
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-status
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderNo", id },
        };
        object response = await this.privatePostV2OrderShowOrderStatus(this.extend(request, parameters));
        //
        //     {
        //         "attachment": {
        //             "buyOrSell": 1,
        //             "averagePrice": "490849.75000000",
        //             "num": "0.00000000",
        //             "orderTime": "2022-11-29 18:03:06.318",
        //             "price": "490849.75000000",
        //             "status": 4,
        //             "tradeNum": "0.02697000",
        //             "remainNum": "0.97303000",
        //             "baseCurrencyId": 2,
        //             "baseCurrencyName": "BTC",
        //             "quoteCurrencyId": 1,
        //             "quoteCurrencyName": "TWD",
        //             "orderNo": "16697161898600391472461100244406"
        //         },
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        object data = this.safeDict(response, "attachment");
        return this.parseOrder(data, null);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-list
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "quoteCurrencyId", getValue(market, "quoteId") },
            { "baseCurrencyId", getValue(market, "baseId") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["size"] = limit;
        }
        object response = await this.privatePostV2OrderGetOrderList(this.extend(request, parameters));
        object orders = this.safeValue(response, "attachment");
        //
        //     {
        //         "attachment": [
        //             {
        //                 "uid": 0,
        //                 "orderNo": "16113081376560890227301101413941",
        //                 "orderTime": "2021-01-22 17:35:37",
        //                 "orderTimeStamp": 1611308137656,
        //                 "baseCurrencyId": 1,
        //                 "baseCurrencyName": "TWD",
        //                 "quoteCurrencyId": 14,
        //                 "quoteCurrencyName": "USDT",
        //                 "buyOrSell": "1",
        //                 "num": "6.0000000000000000",
        //                 "price": "32.5880000000000000",
        //                 "remainNum": "2.0000000000000000",
        //                 "tradeNum": "4.0000000000000000",
        //                 "tradePrice": "31.19800000000000000000",
        //                 "tradeAmount": "124.7920000000000000",
        //                 "tradeRate": "0.66666666666666666667",
        //                 "status": 1,
        //                 "type": 1
        //             }
        //         ],
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        return this.parseOrders(orders, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchOrderTrades
        //         {
        //             "amount": 0.0030965,
        //             "tradeNo": "15681920522485652100751000417788",
        //             "price": "0.03096500",
        //             "num": "0.10000000",
        //             "bi": 1,
        //             "time": "2019-09-11 16:54:12.248"
        //         }
        //
        // fetchMyTrades
        //         {
        //             "buyOrSell": 1,
        //             "orderNo": "16708156853695560053601100247906",
        //             "num": "1",
        //             "price": "16895",
        //             "orderAmount": "16895",
        //             "tradeNum": "0.1",
        //             "tradePrice": "16895",
        //             "tradeAmount": "1689.5",
        //             "fee": "0",
        //             "feeSave": "0",
        //             "status": 1,
        //             "isSelf": false,
        //             "tradeNo": "16708186395087940051961000274150",
        //             "tradeTime": "2022-12-12 12:17:19",
        //             "tradeTimestamp": 1670818639508,
        //             "quoteCurrencyId": 14,
        //             "quoteCurrencyName": "USDT",
        //             "baseCurrencyId": 2,
        //             "baseCurrencyName": "BTC"
        //         }
        object id = this.safeString(trade, "tradeNo");
        object price = this.safeString(trade, "price");
        object amount = this.safeString(trade, "num");
        object timestamp = this.safeInteger(trade, "tradeTimestamp");
        if (isTrue(isEqual(timestamp, null)))
        {
            object datetime = this.safeString2(trade, "time", "tradeTime");
            timestamp = this.parse8601(datetime);
            timestamp = subtract(timestamp, 28800000); // 8 hours normalize timestamp
        }
        object symbol = getValue(market, "symbol");
        object quoteId = this.safeString(trade, "quoteCurrencyName");
        object baseId = this.safeString(trade, "baseCurrencyName");
        if (isTrue(isTrue(!isEqual(quoteId, null)) && isTrue(!isEqual(baseId, null))))
        {
            symbol = add(add(baseId, "/"), quoteId);
        }
        object side = null;
        object tradeSide = this.safeInteger(trade, "buyOrSell");
        if (isTrue(!isEqual(tradeSide, null)))
        {
            side = ((bool) isTrue((isEqual(tradeSide, 1)))) ? "buy" : "sell";
        }
        object feeString = this.safeString(trade, "fee");
        object fee = null;
        if (isTrue(!isEqual(feeString, null)))
        {
            object feeSaveString = this.safeString(trade, "feeSave");
            fee = new Dictionary<string, object>() {
                { "cost", Precise.stringSub(feeString, feeSaveString) },
                { "currency", quoteId },
            };
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "info", trade },
            { "id", id },
            { "order", this.safeString(trade, "orderNo") },
            { "symbol", symbol },
            { "side", side },
            { "type", null },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", null },
            { "fee", fee },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        }, market);
    }

    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-history
        * @param {string} id order id
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.safeMarket(symbol);
        object request = new Dictionary<string, object>() {
            { "orderNo", id },
        };
        object response = await this.privatePostV2OrderShowOrderHistory(this.extend(request, parameters));
        //
        //     {
        //         "attachment": {
        //             "order": {
        //                 "buyOrSell": 1,
        //                 "averagePrice": "491343.74000000",
        //                 "num": "1.00000000",
        //                 "orderTime": "2022-11-29 18:32:22.232",
        //                 "price": "491343.74000000",
        //                 "status": 1,
        //                 "tradeNum": "0.01622200",
        //                 "remainNum": "0.98377800",
        //                 "baseCurrencyId": 2,
        //                 "baseCurrencyName": "BTC",
        //                 "quoteCurrencyId": 1,
        //                 "quoteCurrencyName": "TWD",
        //                 "orderNo": "16697179457740441472471100214402"
        //             },
        //             "trades": [
        //                 {
        //                     "price": "491343.74000000",
        //                     "num": "0.01622200",
        //                     "time": "2022-11-29 18:32:25.789",
        //                     "tradeNo": "16697179457897791471461000223437",
        //                     "amount": "7970.57815028"
        //                 }
        //             ]
        //         },
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        object data = this.safeValue(response, "attachment");
        object trades = this.safeList(data, "trades", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---trade-list
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.safeMarket(symbol);
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(getValue(market, "id"), null)))
        {
            ((IDictionary<string,object>)request)["quoteCurrencyId"] = getValue(market, "quoteId");
            ((IDictionary<string,object>)request)["baseCurrencyId"] = getValue(market, "baseId");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["size"] = limit; // default 10, max 500
        }
        object response = await this.privatePostV2OrderGetTradeList(this.extend(request, parameters));
        //
        //     {
        //         "attachment": [
        //             {
        //                 "buyOrSell": 1,
        //                 "orderNo": "16708156853695560053601100247906",
        //                 "num": "1",
        //                 "price": "16895",
        //                 "orderAmount": "16895",
        //                 "tradeNum": "0.1",
        //                 "tradePrice": "16895",
        //                 "tradeAmount": "1689.5",
        //                 "fee": "0",
        //                 "feeSave": "0",
        //                 "status": 1,
        //                 "isSelf": false,
        //                 "tradeNo": "16708186395087940051961000274150",
        //                 "tradeTime": "2022-12-12 12:17:19",
        //                 "tradeTimestamp": 1670818639508,
        //                 "quoteCurrencyId": 14,
        //                 "quoteCurrencyName": "USDT",
        //                 "baseCurrencyId": 2,
        //                 "baseCurrencyName": "BTC"
        //             }
        //         ],
        //         "message": null,
        //         "parameters": null,
        //         "status": 200
        //     }
        //
        object trades = this.safeList(response, "attachment", new List<object>() {});
        return this.parseTrades(trades, market, since, limit);
    }

    public override object parseBalance(object response)
    {
        //
        //     [
        //         {
        //             "currencyId": 4,
        //             "amount": 6.896,
        //             "cashAmount": 6.3855,
        //             "uid": 123,
        //             "currencyName": "BTC"
        //         }
        //     ]
        //
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object balance = getValue(response, i);
            object currencyId = this.safeString(balance, "currencyName");
            object code = this.safeCurrencyCode(currencyId);
            object amount = this.safeString(balance, "amount");
            object available = this.safeString(balance, "cashAmount");
            object account = new Dictionary<string, object>() {
                { "free", available },
                { "total", amount },
            };
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name ace#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---account-balance
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostV2CoinCustomerAccount(parameters);
        object balances = this.safeValue(response, "attachment", new List<object>() {});
        //
        //     {
        //         "attachment":[
        //             {
        //                 "currencyId": 4,
        //                 "amount": 6.896,
        //                 "cashAmount": 6.3855,
        //                 "uid": 123,
        //                 "currencyName": "BTC"
        //             }
        //         ],
        //         "message": null,
        //         "parameters": null,
        //         "status": "200"
        //     }
        //
        return this.parseBalance(balances);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add("/", this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(headers, null)))
        {
            headers = new Dictionary<string, object>() {};
        }
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object nonce = this.milliseconds();
            object auth = add("ACE_SIGN", this.secret);
            object data = this.extend(new Dictionary<string, object>() {
                { "apiKey", this.apiKey },
                { "timeStamp", nonce },
            }, parameters);
            object dataKeys = new List<object>(((IDictionary<string,object>)data).Keys);
            object sortedDataKeys = this.sortBy(dataKeys, 0, false, "");
            for (object i = 0; isLessThan(i, getArrayLength(sortedDataKeys)); postFixIncrement(ref i))
            {
                object key = getValue(sortedDataKeys, i);
                auth = add(auth, this.safeString(data, key));
            }
            object signature = this.hash(this.encode(auth), sha256, "hex");
            ((IDictionary<string,object>)data)["signKey"] = signature;
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
            };
            if (isTrue(isEqual(method, "POST")))
            {
                object brokerId = this.safeString(this.options, "brokerId");
                if (isTrue(!isEqual(brokerId, null)))
                {
                    ((IDictionary<string,object>)headers)["Referer"] = brokerId;
                }
            }
            body = this.urlencode(data);
        } else if (isTrue(isTrue(isEqual(api, "public")) && isTrue(isEqual(method, "GET"))))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        }
        url = add(getValue(getValue(this.urls, "api"), api), url);
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to the default error handler
        }
        object feedback = add(add(this.id, " "), body);
        object status = this.safeNumber(response, "status", 200);
        if (isTrue(isGreaterThan(status, 200)))
        {
            object statusStr = ((object)status).ToString();
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), statusStr, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), statusStr, feedback);
        }
        return null;
    }
}
