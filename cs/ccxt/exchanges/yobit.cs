namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class yobit : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "yobit" },
            { "name", "YoBit" },
            { "countries", new List<object>() {"RU"} },
            { "rateLimit", 2000 },
            { "version", "3" },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", true },
                { "createMarketOrder", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", true },
                { "fetchDeposits", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTransactions", false },
                { "fetchTransfer", false },
                { "fetchTransfers", false },
                { "fetchWithdrawals", false },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "transfer", false },
                { "withdraw", true },
                { "ws", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/1294454/27766910-cdcbfdae-5eea-11e7-9859-03fea873272d.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://yobit.net/api" },
                    { "private", "https://yobit.net/tapi" },
                } },
                { "www", "https://www.yobit.net" },
                { "doc", "https://www.yobit.net/en/api/" },
                { "fees", "https://www.yobit.net/en/fees/" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "depth/{pair}", 1 },
                        { "info", 1 },
                        { "ticker/{pair}", 1 },
                        { "trades/{pair}", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new Dictionary<string, object>() {
                        { "ActiveOrders", 1 },
                        { "CancelOrder", 1 },
                        { "GetDepositAddress", 1 },
                        { "getInfo", 1 },
                        { "OrderInfo", 1 },
                        { "Trade", 1 },
                        { "TradeHistory", 1 },
                        { "WithdrawCoinsToAddress", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "maker", 0.002 },
                    { "taker", 0.002 },
                } },
                { "funding", new Dictionary<string, object>() {
                    { "withdraw", new Dictionary<string, object>() {} },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "AIR", "AirCoin" },
                { "ANI", "ANICoin" },
                { "ANT", "AntsCoin" },
                { "ATMCHA", "ATM" },
                { "ASN", "Ascension" },
                { "AST", "Astral" },
                { "ATM", "Autumncoin" },
                { "AUR", "AuroraCoin" },
                { "BAB", "Babel" },
                { "BAN", "BANcoin" },
                { "BCC", "BCH" },
                { "BCS", "BitcoinStake" },
                { "BITS", "Bitstar" },
                { "BLN", "Bulleon" },
                { "BNS", "Benefit Bonus Coin" },
                { "BOT", "BOTcoin" },
                { "BON", "BONES" },
                { "BPC", "BitcoinPremium" },
                { "BST", "BitStone" },
                { "BTS", "Bitshares2" },
                { "CAT", "BitClave" },
                { "CBC", "CryptoBossCoin" },
                { "CMT", "CometCoin" },
                { "COIN", "Coin.com" },
                { "COV", "Coven Coin" },
                { "COVX", "COV" },
                { "CPC", "Capricoin" },
                { "CREDIT", "Creditbit" },
                { "CS", "CryptoSpots" },
                { "DCT", "Discount" },
                { "DFT", "DraftCoin" },
                { "DGD", "DarkGoldCoin" },
                { "DIRT", "DIRTY" },
                { "DROP", "FaucetCoin" },
                { "DSH", "DASH" },
                { "EGC", "EverGreenCoin" },
                { "EGG", "EggCoin" },
                { "EKO", "EkoCoin" },
                { "ENTER", "ENTRC" },
                { "EPC", "ExperienceCoin" },
                { "ESC", "EdwardSnowden" },
                { "EUROPE", "EUROP" },
                { "EXT", "LifeExtension" },
                { "FUND", "FUNDChains" },
                { "FUNK", "FUNKCoin" },
                { "FX", "FCoin" },
                { "GCC", "GlobalCryptocurrency" },
                { "GEN", "Genstake" },
                { "GENE", "Genesiscoin" },
                { "GMR", "Gimmer" },
                { "GOLD", "GoldMint" },
                { "GOT", "Giotto Coin" },
                { "GSX", "GlowShares" },
                { "GT", "GTcoin" },
                { "HTML5", "HTML" },
                { "HYPERX", "HYPER" },
                { "ICN", "iCoin" },
                { "INSANE", "INSN" },
                { "JNT", "JointCoin" },
                { "JPC", "JupiterCoin" },
                { "JWL", "Jewels" },
                { "KNC", "KingN Coin" },
                { "LBTCX", "LiteBitcoin" },
                { "LIZI", "LiZi" },
                { "LOC", "LocoCoin" },
                { "LOCX", "LOC" },
                { "LUNYR", "LUN" },
                { "LUN", "LunarCoin" },
                { "LUNA", "Luna Coin" },
                { "MASK", "Yobit MASK" },
                { "MDT", "Midnight" },
                { "MEME", "Memez Token" },
                { "MIS", "MIScoin" },
                { "MM", "MasterMint" },
                { "NAV", "NavajoCoin" },
                { "NBT", "NiceBytes" },
                { "OMG", "OMGame" },
                { "ONX", "Onix" },
                { "PAC", "$PAC" },
                { "PLAY", "PlayCoin" },
                { "PIVX", "Darknet" },
                { "PURE", "PurePOS" },
                { "PUTIN", "PutinCoin" },
                { "SPACE", "Spacecoin" },
                { "STK", "StakeCoin" },
                { "SUB", "Subscriptio" },
                { "PAY", "EPAY" },
                { "PLC", "Platin Coin" },
                { "RAI", "RaiderCoin" },
                { "RCN", "RCoin" },
                { "REP", "Republicoin" },
                { "RUR", "RUB" },
                { "SBTC", "Super Bitcoin" },
                { "SMC", "SmartCoin" },
                { "SOLO", "SoloCoin" },
                { "SOUL", "SoulCoin" },
                { "STAR", "StarCoin" },
                { "SUPER", "SuperCoin" },
                { "TNS", "Transcodium" },
                { "TTC", "TittieCoin" },
                { "UNI", "Universe" },
                { "UST", "Uservice" },
                { "VOL", "VolumeCoin" },
                { "XIN", "XINCoin" },
                { "XMT", "SummitCoin" },
                { "XRA", "Ratecoin" },
            } },
            { "options", new Dictionary<string, object>() {
                { "maxUrlLength", 2048 },
                { "fetchOrdersRequiresSymbol", true },
                { "networks", new Dictionary<string, object>() {
                    { "ETH", "ERC20" },
                    { "TRX", "TRC20" },
                    { "BSC", "BEP20" },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "803", typeof(InvalidOrder) },
                    { "804", typeof(InvalidOrder) },
                    { "805", typeof(InvalidOrder) },
                    { "806", typeof(InvalidOrder) },
                    { "807", typeof(InvalidOrder) },
                    { "831", typeof(InsufficientFunds) },
                    { "832", typeof(InsufficientFunds) },
                    { "833", typeof(OrderNotFound) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "Invalid pair name", typeof(ExchangeError) },
                    { "invalid api key", typeof(AuthenticationError) },
                    { "invalid sign", typeof(AuthenticationError) },
                    { "api key dont have trade permission", typeof(AuthenticationError) },
                    { "invalid parameter", typeof(InvalidOrder) },
                    { "invalid order", typeof(InvalidOrder) },
                    { "The given order has already been cancelled", typeof(InvalidOrder) },
                    { "Requests too often", typeof(DDoSProtection) },
                    { "not available", typeof(ExchangeNotAvailable) },
                    { "data unavailable", typeof(ExchangeNotAvailable) },
                    { "external service unavailable", typeof(ExchangeNotAvailable) },
                    { "Total transaction amount", typeof(InvalidOrder) },
                    { "The given order has already been closed and cannot be cancelled", typeof(InvalidOrder) },
                    { "Insufficient funds", typeof(InsufficientFunds) },
                    { "invalid key", typeof(AuthenticationError) },
                    { "invalid nonce", typeof(InvalidNonce) },
                    { "Total order amount is less than minimal amount", typeof(InvalidOrder) },
                    { "Rate Limited", typeof(RateLimitExceeded) },
                } },
            } },
            { "orders", new Dictionary<string, object>() {} },
        });
    }

    public override object parseBalance(object response)
    {
        object balances = this.safeDict(response, "return", new Dictionary<string, object>() {});
        object timestamp = this.safeInteger(balances, "server_time");
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
        };
        object free = this.safeDict(balances, "funds", new Dictionary<string, object>() {});
        object total = this.safeDict(balances, "funds_incl_orders", new Dictionary<string, object>() {});
        object currencyIds = new List<object>(((IDictionary<string,object>)this.extend(free, total)).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(free, currencyId);
            ((IDictionary<string,object>)account)["total"] = this.safeString(total, currencyId);
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchBalance
        * @see https://yobit.net/en/api
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetInfo(parameters);
        //
        //     {
        //         "success":1,
        //         "return":{
        //             "funds":{
        //                 "ltc":22,
        //                 "nvc":423.998,
        //                 "ppc":10,
        //             },
        //             "funds_incl_orders":{
        //                 "ltc":32,
        //                 "nvc":523.998,
        //                 "ppc":20,
        //             },
        //             "rights":{
        //                 "info":1,
        //                 "trade":0,
        //                 "withdraw":0
        //             },
        //             "transaction_count":0,
        //             "open_orders":1,
        //             "server_time":1418654530
        //         }
        //     }
        //
        return this.parseBalance(response);
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchMarkets
        * @see https://yobit.net/en/api
        * @description retrieves data on all markets for yobit
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetInfo(parameters);
        //
        //     {
        //         "server_time":1615856752,
        //         "pairs":{
        //             "ltc_btc":{
        //                 "decimal_places":8,
        //                 "min_price":0.00000001,
        //                 "max_price":10000,
        //                 "min_amount":0.0001,
        //                 "min_total":0.0001,
        //                 "hidden":0,
        //                 "fee":0.2,
        //                 "fee_buyer":0.2,
        //                 "fee_seller":0.2
        //             },
        //         },
        //     }
        //
        object markets = this.safeDict(response, "pairs", new Dictionary<string, object>() {});
        object keys = new List<object>(((IDictionary<string,object>)markets).Keys);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
        {
            object id = getValue(keys, i);
            object market = getValue(markets, id);
            var baseIdquoteIdVariable = ((string)id).Split(new [] {((string)"_")}, StringSplitOptions.None).ToList<object>();
            var baseId = ((IList<object>) baseIdquoteIdVariable)[0];
            var quoteId = ((IList<object>) baseIdquoteIdVariable)[1];
            object bs = ((string)baseId).ToUpper();
            object quote = ((string)quoteId).ToUpper();
            bs = this.safeCurrencyCode(bs);
            quote = this.safeCurrencyCode(quote);
            object hidden = this.safeInteger(market, "hidden");
            object feeString = this.safeString(market, "fee");
            feeString = Precise.stringDiv(feeString, "100");
            // yobit maker = taker
            ((IList<object>)result).Add(new Dictionary<string, object>() {
                { "id", id },
                { "symbol", add(add(bs, "/"), quote) },
                { "base", bs },
                { "quote", quote },
                { "settle", null },
                { "baseId", baseId },
                { "quoteId", quoteId },
                { "settleId", null },
                { "type", "spot" },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "active", (isEqual(hidden, 0)) },
                { "contract", false },
                { "linear", null },
                { "inverse", null },
                { "taker", this.parseNumber(feeString) },
                { "maker", this.parseNumber(feeString) },
                { "contractSize", null },
                { "expiry", null },
                { "expiryDatetime", null },
                { "strike", null },
                { "optionType", null },
                { "precision", new Dictionary<string, object>() {
                    { "amount", this.parseNumber(this.parsePrecision(this.safeString(market, "decimal_places"))) },
                    { "price", this.parseNumber(this.parsePrecision(this.safeString(market, "decimal_places"))) },
                } },
                { "limits", new Dictionary<string, object>() {
                    { "leverage", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "amount", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "min_amount") },
                        { "max", this.safeNumber(market, "max_amount") },
                    } },
                    { "price", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "min_price") },
                        { "max", this.safeNumber(market, "max_price") },
                    } },
                    { "cost", new Dictionary<string, object>() {
                        { "min", this.safeNumber(market, "min_total") },
                        { "max", null },
                    } },
                } },
                { "created", null },
                { "info", market },
            });
        }
        return result;
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchOrderBook
        * @see https://yobit.net/en/api
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit; // default = 150, max = 2000
        }
        object response = await this.publicGetDepthPair(this.extend(request, parameters));
        object market_id_in_reponse = (inOp(response, getValue(market, "id")));
        if (!isTrue(market_id_in_reponse))
        {
            throw new ExchangeError ((string)add(add(add(this.id, " "), getValue(market, "symbol")), " order book is empty or not available")) ;
        }
        object orderbook = getValue(response, getValue(market, "id"));
        return this.parseOrderBook(orderbook, symbol);
    }

    public async override Task<object> fetchOrderBooks(object symbols = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchOrderBooks
        * @see https://yobit.net/en/api
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
        * @param {string[]|undefined} symbols list of unified market symbols, all symbols fetched if undefined, default is undefined
        * @param {int} [limit] max number of entries per orderbook to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbol
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object ids = null;
        if (isTrue(isEqual(symbols, null)))
        {
            ids = String.Join("-", ((IList<object>)this.ids).ToArray());
            // max URL length is 2083 symbols, including http schema, hostname, tld, etc...
            if (isTrue(isGreaterThan(getArrayLength(ids), 2048)))
            {
                object numIds = getArrayLength(this.ids);
                throw new ExchangeError ((string)add(add(add(this.id, " fetchOrderBooks() has "), ((object)numIds).ToString()), " symbols exceeding max URL length, you are required to specify a list of symbols in the first argument to fetchOrderBooks")) ;
            }
        } else
        {
            ids = this.marketIds(symbols);
            ids = String.Join("-", ((IList<object>)ids).ToArray());
        }
        object request = new Dictionary<string, object>() {
            { "pair", ids },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetDepthPair(this.extend(request, parameters));
        object result = new Dictionary<string, object>() {};
        ids = new List<object>(((IDictionary<string,object>)response).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            object symbol = this.safeSymbol(id);
            ((IDictionary<string,object>)result)[(string)symbol] = this.parseOrderBook(getValue(response, id), symbol);
        }
        return result;
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "high": 0.03497582,
        //         "low": 0.03248474,
        //         "avg": 0.03373028,
        //         "vol": 120.11485715062999,
        //         "vol_cur": 3572.24914074,
        //         "last": 0.0337611,
        //         "buy": 0.0337442,
        //         "sell": 0.03377798,
        //         "updated": 1537522009
        //     }
        //
        object timestamp = this.safeTimestamp(ticker, "updated");
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", this.safeSymbol(null, market) },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "buy") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "sell") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", this.safeString(ticker, "avg") },
            { "baseVolume", this.safeString(ticker, "vol_cur") },
            { "quoteVolume", this.safeString(ticker, "vol") },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchTickers
        * @see https://yobit.net/en/api
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbols, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchTickers() requires \"symbols\" argument")) ;
        }
        await this.loadMarkets();
        symbols = this.marketSymbols(symbols);
        object ids = null;
        if (isTrue(isEqual(symbols, null)))
        {
            ids = this.ids;
        } else
        {
            ids = this.marketIds(symbols);
        }
        object idsLength = getArrayLength(ids);
        object idsString = String.Join("-", ((IList<object>)ids).ToArray());
        object maxLength = this.safeInteger(this.options, "maxUrlLength", 2048);
        // max URL length is 2048 symbols, including http schema, hostname, tld, etc...
        object lenghtOfBaseUrl = 30; // the url including api-base and endpoint dir is 30 chars
        object actualLength = add(getArrayLength(idsString), lenghtOfBaseUrl);
        if (isTrue(isGreaterThan(actualLength, maxLength)))
        {
            throw new ArgumentsRequired ((string)add(add(add(add(add(add(add(this.id, " fetchTickers() is being requested for "), ((object)idsLength).ToString()), " markets (which has an URL length of "), ((object)actualLength).ToString()), " characters), but it exceedes max URL length ("), ((object)maxLength).ToString()), "), please pass limisted symbols array to fetchTickers to fit in one request")) ;
        }
        object request = new Dictionary<string, object>() {
            { "pair", idsString },
        };
        object tickers = await this.publicGetTickerPair(this.extend(request, parameters));
        object result = new Dictionary<string, object>() {};
        object keys = new List<object>(((IDictionary<string,object>)tickers).Keys);
        for (object k = 0; isLessThan(k, getArrayLength(keys)); postFixIncrement(ref k))
        {
            object id = getValue(keys, k);
            object ticker = getValue(tickers, id);
            object market = this.safeMarket(id);
            object symbol = getValue(market, "symbol");
            ((IDictionary<string,object>)result)[(string)symbol] = this.parseTicker(ticker, market);
        }
        return this.filterByArrayTickers(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchTicker
        * @see https://yobit.net/en/api
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object tickers = await this.fetchTickers(new List<object>() {symbol}, parameters);
        return getValue(tickers, symbol);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //      {
        //          "type":"bid",
        //          "price":0.14046179,
        //          "amount":0.001,
        //          "tid":200256901,
        //          "timestamp":1649861004
        //      }
        //
        // fetchMyTrades (private)
        //
        //      {
        //          "pair":"doge_usdt",
        //          "type":"sell",
        //          "amount":139,
        //          "rate":0.139,
        //          "order_id":"2101103631773172",
        //          "is_your_order":1,
        //          "timestamp":"1649861561"
        //      }
        //
        object timestamp = this.safeTimestamp(trade, "timestamp");
        object side = this.safeString(trade, "type");
        if (isTrue(isEqual(side, "ask")))
        {
            side = "sell";
        } else if (isTrue(isEqual(side, "bid")))
        {
            side = "buy";
        }
        object priceString = this.safeString2(trade, "rate", "price");
        object id = this.safeString2(trade, "trade_id", "tid");
        object order = this.safeString(trade, "order_id");
        object marketId = this.safeString(trade, "pair");
        object symbol = this.safeSymbol(marketId, market);
        object amountString = this.safeString(trade, "amount");
        // arguments for calculateFee (need to be numbers)
        object price = this.parseNumber(priceString);
        object amount = this.parseNumber(amountString);
        object type = "limit"; // all trades are still limit trades
        object fee = null;
        object feeCostString = this.safeNumber(trade, "commission");
        if (isTrue(!isEqual(feeCostString, null)))
        {
            object feeCurrencyId = this.safeString(trade, "commissionCurrency");
            object feeCurrencyCode = this.safeCurrencyCode(feeCurrencyId);
            fee = new Dictionary<string, object>() {
                { "cost", feeCostString },
                { "currency", feeCurrencyCode },
            };
        }
        object isYourOrder = this.safeString(trade, "is_your_order");
        if (isTrue(!isEqual(isYourOrder, null)))
        {
            if (isTrue(isEqual(fee, null)))
            {
                object feeInNumbers = this.calculateFee(symbol, type, side, amount, price, "taker");
                fee = new Dictionary<string, object>() {
                    { "currency", this.safeString(feeInNumbers, "currency") },
                    { "cost", this.safeString(feeInNumbers, "cost") },
                    { "rate", this.safeString(feeInNumbers, "rate") },
                };
            }
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "order", order },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", type },
            { "side", side },
            { "takerOrMaker", null },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
            { "info", trade },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchTrades
        * @see https://yobit.net/en/api
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetTradesPair(this.extend(request, parameters));
        //
        //      {
        //          "doge_usdt": [
        //              {
        //                  "type":"ask",
        //                  "price":0.13956743,
        //                  "amount":0.0008,
        //                  "tid":200256900,
        //                  "timestamp":1649860521
        //              },
        //          ]
        //      }
        //
        if (isTrue(((response is IList<object>) || (response.GetType().IsGenericType && response.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            object numElements = getArrayLength(response);
            if (isTrue(isEqual(numElements, 0)))
            {
                return new List<object>() {};
            }
        }
        object result = this.safeList(response, getValue(market, "id"), new List<object>() {});
        return this.parseTrades(result, market, since, limit);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchTradingFees
        * @see https://yobit.net/en/api
        * @description fetch the trading fees for multiple markets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.publicGetInfo(parameters);
        //
        //     {
        //         "server_time":1615856752,
        //         "pairs":{
        //             "ltc_btc":{
        //                 "decimal_places":8,
        //                 "min_price":0.00000001,
        //                 "max_price":10000,
        //                 "min_amount":0.0001,
        //                 "min_total":0.0001,
        //                 "hidden":0,
        //                 "fee":0.2,
        //                 "fee_buyer":0.2,
        //                 "fee_seller":0.2
        //             },
        //             ...
        //         },
        //     }
        //
        object pairs = this.safeDict(response, "pairs", new Dictionary<string, object>() {});
        object marketIds = new List<object>(((IDictionary<string,object>)pairs).Keys);
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(marketIds)); postFixIncrement(ref i))
        {
            object marketId = getValue(marketIds, i);
            object pair = this.safeDict(pairs, marketId, new Dictionary<string, object>() {});
            object symbol = this.safeSymbol(marketId, null, "_");
            object takerString = this.safeString(pair, "fee_buyer");
            object makerString = this.safeString(pair, "fee_seller");
            object taker = this.parseNumber(Precise.stringDiv(takerString, "100"));
            object maker = this.parseNumber(Precise.stringDiv(makerString, "100"));
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", pair },
                { "symbol", symbol },
                { "taker", taker },
                { "maker", maker },
                { "percentage", true },
                { "tierBased", false },
            };
        }
        return result;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#createOrder
        * @see https://yobit.net/en/api
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type must be 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(type, "market")))
        {
            throw new ExchangeError ((string)add(this.id, " createOrder() allows limit orders only")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
            { "type", side },
            { "amount", this.amountToPrecision(symbol, amount) },
            { "rate", this.priceToPrecision(symbol, price) },
        };
        object response = await this.privatePostTrade(this.extend(request, parameters));
        //
        //      {
        //          "success":1,
        //          "return": {
        //              "received":0,
        //              "remains":10,
        //              "order_id":1101103635125179,
        //              "funds": {
        //                  "usdt":27.84756553,
        //                  "usdttrc20":0,
        //                  "doge":19.98327206
        //              },
        //              "funds_incl_orders": {
        //                  "usdt":30.35256553,
        //                  "usdttrc20":0,
        //                  "doge":19.98327206
        //               },
        //               "server_time":1650114256
        //           }
        //       }
        //
        object result = this.safeDict(response, "return");
        return this.parseOrder(result, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#cancelOrder
        * @see https://yobit.net/en/api
        * @description cancels an open order
        * @param {string} id order id
        * @param {string} symbol not used by yobit cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", parseInt(id) },
        };
        object response = await this.privatePostCancelOrder(this.extend(request, parameters));
        //
        //      {
        //          "success":1,
        //          "return": {
        //              "order_id":1101103632552304,
        //              "funds": {
        //                  "usdt":30.71055443,
        //                  "usdttrc20":0,
        //                  "doge":9.98327206
        //              },
        //              "funds_incl_orders": {
        //                  "usdt":31.81275443,
        //                  "usdttrc20":0,
        //                  "doge":9.98327206
        //              },
        //              "server_time":1649918298
        //          }
        //      }
        //
        object result = this.safeDict(response, "return", new Dictionary<string, object>() {});
        return this.parseOrder(result);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "0", "open" },
            { "1", "closed" },
            { "2", "canceled" },
            { "3", "open" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // createOrder (private)
        //
        //      {
        //          "received":0,
        //          "remains":10,
        //          "order_id":1101103635125179,
        //          "funds": {
        //              "usdt":27.84756553,
        //              "usdttrc20":0,
        //              "doge":19.98327206
        //          },
        //          "funds_incl_orders": {
        //              "usdt":30.35256553,
        //              "usdttrc20":0,
        //              "doge":19.98327206
        //          },
        //          "server_time":1650114256
        //      }
        //
        // fetchOrder (private)
        //
        //      {
        //          "id: "1101103635103335",  // id-field is manually added in fetchOrder () from exchange response id-order dictionary structure
        //          "pair":"doge_usdt",
        //          "type":"buy",
        //          "start_amount":10,
        //          "amount":10,
        //          "rate":0.05,
        //          "timestamp_created":"1650112553",
        //          "status":0
        //      }
        //
        // fetchOpenOrders (private)
        //
        //      {
        //          "id":"1101103635103335", // id-field is manually added in fetchOpenOrders () from exchange response id-order dictionary structure
        //          "pair":"doge_usdt",
        //          "type":"buy",
        //          "amount":10,
        //          "rate":0.05,
        //          "timestamp_created":"1650112553",
        //          "status":0
        //      }
        //
        // cancelOrder (private)
        //
        //      {
        //          "order_id":1101103634000197,
        //          "funds": {
        //              "usdt":31.81275443,
        //              "usdttrc20":0,
        //              "doge":9.98327206
        //          },
        //          "funds_incl_orders": {
        //              "usdt":31.81275443,
        //              "usdttrc20":0,
        //              "doge":9.98327206
        //          }
        //      }
        //
        object id = this.safeString2(order, "id", "order_id");
        object status = this.parseOrderStatus(this.safeString(order, "status", "open"));
        if (isTrue(isEqual(id, "0")))
        {
            id = this.safeString(order, "init_order_id");
            status = "closed";
        }
        object timestamp = this.safeTimestamp2(order, "timestamp_created", "server_time");
        object marketId = this.safeString(order, "pair");
        object symbol = this.safeSymbol(marketId, market);
        object amount = this.safeString(order, "start_amount");
        object remaining = this.safeString2(order, "amount", "remains");
        object filled = this.safeString(order, "received", "0.0");
        object price = this.safeString(order, "rate");
        object fee = null;
        object type = "limit";
        object side = this.safeString(order, "type");
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", id },
            { "clientOrderId", null },
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "type", type },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "amount", amount },
            { "remaining", remaining },
            { "filled", filled },
            { "status", status },
            { "fee", fee },
            { "average", null },
            { "trades", null },
        }, market);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchOrder
        * @see https://yobit.net/en/api
        * @description fetches information on an order made by the user
        * @param {string} symbol not used by yobit fetchOrder
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", parseInt(id) },
        };
        object response = await this.privatePostOrderInfo(this.extend(request, parameters));
        id = ((object)id).ToString();
        object orders = this.safeDict(response, "return", new Dictionary<string, object>() {});
        //
        //      {
        //          "success":1,
        //          "return": {
        //              "1101103635103335": {
        //                  "pair":"doge_usdt",
        //                  "type":"buy",
        //                  "start_amount":10,
        //                  "amount":10,
        //                  "rate":0.05,
        //                  "timestamp_created":"1650112553",
        //                  "status":0
        //              }
        //          }
        //      }
        //
        return this.parseOrder(this.extend(new Dictionary<string, object>() {
            { "id", id },
        }, getValue(orders, id)));
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchOpenOrders
        * @see https://yobit.net/en/api
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of open order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchOpenOrders() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            object marketInner = this.market(symbol);
            ((IDictionary<string,object>)request)["pair"] = getValue(marketInner, "id");
        }
        object response = await this.privatePostActiveOrders(this.extend(request, parameters));
        //
        //      {
        //          "success":1,
        //          "return": {
        //              "1101103634006799": {
        //                  "pair":"doge_usdt",
        //                  "type":"buy",
        //                  "amount":10,
        //                  "rate":0.1,
        //                  "timestamp_created":"1650034937",
        //                  "status":0
        //              },
        //              "1101103634006738": {
        //                  "pair":"doge_usdt",
        //                  "type":"buy",
        //                  "amount":10,
        //                  "rate":0.1,
        //                  "timestamp_created":"1650034932",
        //                  "status":0
        //              }
        //          }
        //      }
        //
        object result = this.safeDict(response, "return", new Dictionary<string, object>() {});
        return this.parseOrders(result, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchMyTrades
        * @see https://yobit.net/en/api
        * @description fetch all trades made by the user
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(symbol, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchMyTrades() requires a symbol argument")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        // some derived classes use camelcase notation for request fields
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["since"] = this.parseToInt(divide(since, 1000));
        }
        object response = await this.privatePostTradeHistory(this.extend(request, parameters));
        //
        //      {
        //          "success":1,
        //          "return": {
        //              "200257004": {
        //                  "pair":"doge_usdt",
        //                  "type":"sell",
        //                  "amount":139,
        //                  "rate":0.139,
        //                  "order_id":"2101103631773172",
        //                  "is_your_order":1,
        //                  "timestamp":"1649861561"
        //              }
        //          }
        //      }
        //
        object trades = this.safeDict(response, "return", new Dictionary<string, object>() {});
        object ids = new List<object>(((IDictionary<string,object>)trades).Keys);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(ids)); postFixIncrement(ref i))
        {
            object id = getValue(ids, i);
            object trade = this.parseTrade(this.extend(getValue(trades, id), new Dictionary<string, object>() {
                { "trade_id", id },
            }), market);
            ((IList<object>)result).Add(trade);
        }
        return this.filterBySymbolSinceLimit(result, getValue(market, "symbol"), since, limit);
    }

    public async override Task<object> createDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name yobit#createDepositAddress
        * @see https://yobit.net/en/api
        * @description create a currency deposit address
        * @param {string} code unified currency code of the currency for the deposit address
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "need_new", 1 },
        };
        object response = await this.fetchDepositAddress(code, this.extend(request, parameters));
        object address = this.safeString(response, "address");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "currency", code },
            { "address", address },
            { "tag", null },
            { "info", getValue(response, "info") },
        };
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name yobit#fetchDepositAddress
        * @see https://yobit.net/en/api
        * @description fetch the deposit address for a currency associated with this account
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object currencyId = getValue(currency, "id");
        object networks = this.safeDict(this.options, "networks", new Dictionary<string, object>() {});
        object network = this.safeStringUpper(parameters, "network"); // this line allows the user to specify either ERC20 or ETH
        network = this.safeString(networks, network, network); // handle ERC20>ETH alias
        if (isTrue(!isEqual(network, null)))
        {
            if (isTrue(!isEqual(network, "ERC20")))
            {
                currencyId = add(currencyId, ((string)network).ToLower());
            }
            parameters = this.omit(parameters, "network");
        }
        object request = new Dictionary<string, object>() {
            { "coinName", currencyId },
            { "need_new", 0 },
        };
        object response = await this.privatePostGetDepositAddress(this.extend(request, parameters));
        object address = this.safeString(getValue(response, "return"), "address");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "id", null },
            { "currency", code },
            { "address", address },
            { "tag", null },
            { "network", null },
            { "info", response },
            { "txid", null },
            { "type", null },
            { "amount", null },
            { "status", null },
            { "timestamp", null },
            { "datetime", null },
            { "addressFrom", null },
            { "addressTo", null },
            { "tagFrom", null },
            { "tagTo", null },
            { "updated", null },
            { "comment", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
                { "rate", null },
            } },
        };
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name yobit#withdraw
        * @see https://yobit.net/en/api
        * @description make a withdrawal
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        var tagparametersVariable = this.handleWithdrawTagAndParams(tag, parameters);
        tag = ((IList<object>)tagparametersVariable)[0];
        parameters = ((IList<object>)tagparametersVariable)[1];
        this.checkAddress(address);
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "coinName", getValue(currency, "id") },
            { "amount", amount },
            { "address", address },
        };
        // no docs on the tag, yet...
        if (isTrue(!isEqual(tag, null)))
        {
            throw new ExchangeError ((string)add(this.id, " withdraw() does not support the tag argument yet due to a lack of docs on withdrawing with tag/memo on behalf of the exchange.")) ;
        }
        object response = await this.privatePostWithdrawCoinsToAddress(this.extend(request, parameters));
        return new Dictionary<string, object>() {
            { "info", response },
            { "id", null },
            { "txid", null },
            { "type", null },
            { "currency", null },
            { "network", null },
            { "amount", null },
            { "status", null },
            { "timestamp", null },
            { "datetime", null },
            { "address", null },
            { "addressFrom", null },
            { "addressTo", null },
            { "tag", null },
            { "tagFrom", null },
            { "tagTo", null },
            { "updated", null },
            { "comment", null },
            { "fee", new Dictionary<string, object>() {
                { "currency", null },
                { "cost", null },
                { "rate", null },
            } },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = getValue(getValue(this.urls, "api"), api);
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object nonce = this.nonce();
            body = this.urlencode(this.extend(new Dictionary<string, object>() {
                { "nonce", nonce },
                { "method", path },
            }, query));
            object signature = this.hmac(this.encode(body), this.encode(this.secret), sha512);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
                { "Key", this.apiKey },
                { "Sign", signature },
            };
        } else if (isTrue(isEqual(api, "public")))
        {
            url = add(url, add(add(add("/", this.version), "/"), this.implodeParams(path, parameters)));
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            url = add(url, add("/", this.implodeParams(path, parameters)));
            if (isTrue(isEqual(method, "GET")))
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(query)));
                }
            } else
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    body = this.json(query);
                    headers = new Dictionary<string, object>() {
                        { "Content-Type", "application/json" },
                    };
                }
            }
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;  // fallback to default error handler
        }
        if (isTrue(inOp(response, "success")))
        {
            //
            // 1 - Liqui only returns the integer 'success' key from their private API
            //
            //     { "success": 1, ... } httpCode === 200
            //     { "success": 0, ... } httpCode === 200
            //
            // 2 - However, exchanges derived from Liqui, can return non-integers
            //
            //     It can be a numeric string
            //     { "sucesss": "1", ... }
            //     { "sucesss": "0", ... }, httpCode >= 200 (can be 403, 502, etc)
            //
            //     Or just a string
            //     { "success": "true", ... }
            //     { "success": "false", ... }, httpCode >= 200
            //
            //     Or a boolean
            //     { "success": true, ... }
            //     { "success": false, ... }, httpCode >= 200
            //
            // 3 - Oversimplified, Python PEP8 forbids comparison operator (===) of different types
            //
            // 4 - We do not want to copy-paste and duplicate the code of this handler to other exchanges derived from Liqui
            //
            // To cover points 1, 2, 3 and 4 combined this handler should work like this:
            //
            object success = this.safeValue(response, "success"); // don't replace with safeBool here
            if (isTrue((success is string)))
            {
                if (isTrue(isTrue((isEqual(success, "true"))) || isTrue((isEqual(success, "1")))))
                {
                    success = true;
                } else
                {
                    success = false;
                }
            }
            if (!isTrue(success))
            {
                object code = this.safeString(response, "code");
                object message = this.safeString(response, "error");
                object feedback = add(add(this.id, " "), body);
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), code, feedback);
                this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), message, feedback);
                this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
                throw new ExchangeError ((string)feedback) ;
            }
        }
        return null;
    }
}
