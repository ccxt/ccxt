namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class independentreserve : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "independentreserve" },
            { "name", "Independent Reserve" },
            { "countries", new List<object>() {"AU", "NZ"} },
            { "rateLimit", 1000 },
            { "pro", true },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDepositAddress", true },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarginMode", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/51840849/87182090-1e9e9080-c2ec-11ea-8e49-563db9a38f37.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.independentreserve.com/Public" },
                    { "private", "https://api.independentreserve.com/Private" },
                } },
                { "www", "https://www.independentreserve.com" },
                { "doc", "https://www.independentreserve.com/API" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"GetValidPrimaryCurrencyCodes", "GetValidSecondaryCurrencyCodes", "GetValidLimitOrderTypes", "GetValidMarketOrderTypes", "GetValidOrderTypes", "GetValidTransactionTypes", "GetMarketSummary", "GetOrderBook", "GetAllOrders", "GetTradeHistorySummary", "GetRecentTrades", "GetFxRates", "GetOrderMinimumVolumes", "GetCryptoWithdrawalFees"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "post", new List<object>() {"GetOpenOrders", "GetClosedOrders", "GetClosedFilledOrders", "GetOrderDetails", "GetAccounts", "GetTransactions", "GetFiatBankAccounts", "GetDigitalCurrencyDepositAddress", "GetDigitalCurrencyDepositAddresses", "GetTrades", "GetBrokerageFees", "GetDigitalCurrencyWithdrawal", "PlaceLimitOrder", "PlaceMarketOrder", "CancelOrder", "SynchDigitalCurrencyDepositAddressWithBlockchain", "RequestFiatWithdrawal", "WithdrawFiatCurrency", "WithdrawDigitalCurrency"} },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "taker", this.parseNumber("0.005") },
                    { "maker", this.parseNumber("0.005") },
                    { "percentage", true },
                    { "tierBased", false },
                } },
            } },
            { "commonCurrencies", new Dictionary<string, object>() {
                { "PLA", "PlayChip" },
            } },
            { "precisionMode", TICK_SIZE },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchMarkets
        * @description retrieves data on all markets for independentreserve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object baseCurrencies = await this.publicGetGetValidPrimaryCurrencyCodes(parameters);
        //     ['Xbt', 'Eth', 'Usdt', ...]
        object quoteCurrencies = await this.publicGetGetValidSecondaryCurrencyCodes(parameters);
        //     ['Aud', 'Usd', 'Nzd', 'Sgd']
        object limits = await this.publicGetGetOrderMinimumVolumes(parameters);
        //
        //     {
        //         "Xbt": 0.0001,
        //         "Eth": 0.001,
        //         "Ltc": 0.01,
        //         "Xrp": 1.0,
        //     }
        //
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(baseCurrencies)); postFixIncrement(ref i))
        {
            object baseId = getValue(baseCurrencies, i);
            object bs = this.safeCurrencyCode(baseId);
            object minAmount = this.safeNumber(limits, baseId);
            for (object j = 0; isLessThan(j, getArrayLength(quoteCurrencies)); postFixIncrement(ref j))
            {
                object quoteId = getValue(quoteCurrencies, j);
                object quote = this.safeCurrencyCode(quoteId);
                object id = add(add(baseId, "/"), quoteId);
                ((IList<object>)result).Add(new Dictionary<string, object>() {
                    { "id", id },
                    { "symbol", add(add(bs, "/"), quote) },
                    { "base", bs },
                    { "quote", quote },
                    { "settle", null },
                    { "baseId", baseId },
                    { "quoteId", quoteId },
                    { "settleId", null },
                    { "type", "spot" },
                    { "spot", true },
                    { "margin", false },
                    { "swap", false },
                    { "future", false },
                    { "option", false },
                    { "active", null },
                    { "contract", false },
                    { "linear", null },
                    { "inverse", null },
                    { "contractSize", null },
                    { "expiry", null },
                    { "expiryDatetime", null },
                    { "strike", null },
                    { "optionType", null },
                    { "precision", new Dictionary<string, object>() {
                        { "amount", null },
                        { "price", null },
                    } },
                    { "limits", new Dictionary<string, object>() {
                        { "leverage", new Dictionary<string, object>() {
                            { "min", null },
                            { "max", null },
                        } },
                        { "amount", new Dictionary<string, object>() {
                            { "min", minAmount },
                            { "max", null },
                        } },
                        { "price", new Dictionary<string, object>() {
                            { "min", null },
                            { "max", null },
                        } },
                        { "cost", new Dictionary<string, object>() {
                            { "min", null },
                            { "max", null },
                        } },
                    } },
                    { "created", null },
                    { "info", id },
                });
            }
        }
        return result;
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object balance = getValue(response, i);
            object currencyId = this.safeString(balance, "CurrencyCode");
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["free"] = this.safeString(balance, "AvailableBalance");
            ((IDictionary<string,object>)account)["total"] = this.safeString(balance, "TotalBalance");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetAccounts(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "primaryCurrencyCode", getValue(market, "baseId") },
            { "secondaryCurrencyCode", getValue(market, "quoteId") },
        };
        object response = await this.publicGetGetOrderBook(this.extend(request, parameters));
        object timestamp = this.parse8601(this.safeString(response, "CreatedTimestampUtc"));
        return this.parseOrderBook(response, getValue(market, "symbol"), timestamp, "BuyOrders", "SellOrders", "Price", "Volume");
    }

    public override object parseTicker(object ticker, object market = null)
    {
        // {
        //     "DayHighestPrice":43489.49,
        //     "DayLowestPrice":41998.32,
        //     "DayAvgPrice":42743.9,
        //     "DayVolumeXbt":44.54515625000,
        //     "DayVolumeXbtInSecondaryCurrrency":0.12209818,
        //     "CurrentLowestOfferPrice":43619.64,
        //     "CurrentHighestBidPrice":43153.58,
        //     "LastPrice":43378.43,
        //     "PrimaryCurrencyCode":"Xbt",
        //     "SecondaryCurrencyCode":"Usd",
        //     "CreatedTimestampUtc":"2022-01-14T22:52:29.5029223Z"
        // }
        object timestamp = this.parse8601(this.safeString(ticker, "CreatedTimestampUtc"));
        object baseId = this.safeString(ticker, "PrimaryCurrencyCode");
        object quoteId = this.safeString(ticker, "SecondaryCurrencyCode");
        object defaultMarketId = null;
        if (isTrue(isTrue((!isEqual(baseId, null))) && isTrue((!isEqual(quoteId, null)))))
        {
            defaultMarketId = add(add(baseId, "/"), quoteId);
        }
        market = this.safeMarket(defaultMarketId, market, "/");
        object symbol = getValue(market, "symbol");
        object last = this.safeString(ticker, "LastPrice");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "DayHighestPrice") },
            { "low", this.safeString(ticker, "DayLowestPrice") },
            { "bid", this.safeString(ticker, "CurrentHighestBidPrice") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "CurrentLowestOfferPrice") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", this.safeString(ticker, "DayAvgPrice") },
            { "baseVolume", this.safeString(ticker, "DayVolumeXbtInSecondaryCurrrency") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "primaryCurrencyCode", getValue(market, "baseId") },
            { "secondaryCurrencyCode", getValue(market, "quoteId") },
        };
        object response = await this.publicGetGetMarketSummary(this.extend(request, parameters));
        // {
        //     "DayHighestPrice":43489.49,
        //     "DayLowestPrice":41998.32,
        //     "DayAvgPrice":42743.9,
        //     "DayVolumeXbt":44.54515625000,
        //     "DayVolumeXbtInSecondaryCurrrency":0.12209818,
        //     "CurrentLowestOfferPrice":43619.64,
        //     "CurrentHighestBidPrice":43153.58,
        //     "LastPrice":43378.43,
        //     "PrimaryCurrencyCode":"Xbt",
        //     "SecondaryCurrencyCode":"Usd",
        //     "CreatedTimestampUtc":"2022-01-14T22:52:29.5029223Z"
        // }
        return this.parseTicker(response, market);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // fetchOrder
        //
        //     {
        //         "OrderGuid": "c7347e4c-b865-4c94-8f74-d934d4b0b177",
        //         "CreatedTimestampUtc": "2014-09-23T12:39:34.3817763Z",
        //         "Type": "MarketBid",
        //         "VolumeOrdered": 5.0,
        //         "VolumeFilled": 5.0,
        //         "Price": null,
        //         "AvgPrice": 100.0,
        //         "ReservedAmount": 0.0,
        //         "Status": "Filled",
        //         "PrimaryCurrencyCode": "Xbt",
        //         "SecondaryCurrencyCode": "Usd"
        //     }
        //
        // fetchOpenOrders & fetchClosedOrders
        //
        //     {
        //         "OrderGuid": "b8f7ad89-e4e4-4dfe-9ea3-514d38b5edb3",
        //         "CreatedTimestampUtc": "2020-09-08T03:04:18.616367Z",
        //         "OrderType": "LimitOffer",
        //         "Volume": 0.0005,
        //         "Outstanding": 0.0005,
        //         "Price": 113885.83,
        //         "AvgPrice": 113885.83,
        //         "Value": 56.94,
        //         "Status": "Open",
        //         "PrimaryCurrencyCode": "Xbt",
        //         "SecondaryCurrencyCode": "Usd",
        //         "FeePercent": 0.005,
        //     }
        //
        // cancelOrder
        //
        //    {
        //        "AvgPrice": 455.48,
        //        "CreatedTimestampUtc": "2022-08-05T06:42:11.3032208Z",
        //        "OrderGuid": "719c495c-a39e-4884-93ac-280b37245037",
        //        "Price": 485.76,
        //        "PrimaryCurrencyCode": "Xbt",
        //        "ReservedAmount": 0.358,
        //        "SecondaryCurrencyCode": "Usd",
        //        "Status": "Cancelled",
        //        "Type": "LimitOffer",
        //        "VolumeFilled": 0,
        //        "VolumeOrdered": 0.358
        //    }
        object symbol = null;
        object baseId = this.safeString(order, "PrimaryCurrencyCode");
        object quoteId = this.safeString(order, "SecondaryCurrencyCode");
        object bs = null;
        object quote = null;
        if (isTrue(isTrue((!isEqual(baseId, null))) && isTrue((!isEqual(quoteId, null)))))
        {
            bs = this.safeCurrencyCode(baseId);
            quote = this.safeCurrencyCode(quoteId);
            symbol = add(add(bs, "/"), quote);
        } else if (isTrue(!isEqual(market, null)))
        {
            symbol = getValue(market, "symbol");
            bs = getValue(market, "base");
            quote = getValue(market, "quote");
        }
        object orderType = this.safeString2(order, "Type", "OrderType");
        object side = null;
        if (isTrue(!isEqual(orderType, null)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(orderType, "Bid"), 0)))
            {
                side = "buy";
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(orderType, "Offer"), 0)))
            {
                side = "sell";
            }
            if (isTrue(isGreaterThanOrEqual(getIndexOf(orderType, "Market"), 0)))
            {
                orderType = "market";
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(orderType, "Limit"), 0)))
            {
                orderType = "limit";
            }
        }
        object timestamp = this.parse8601(this.safeString(order, "CreatedTimestampUtc"));
        object filled = this.safeString(order, "VolumeFilled");
        object feeRate = this.safeString(order, "FeePercent");
        object feeCost = null;
        if (isTrue(isTrue(!isEqual(feeRate, null)) && isTrue(!isEqual(filled, null))))
        {
            feeCost = Precise.stringMul(feeRate, filled);
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", order },
            { "id", this.safeString(order, "OrderGuid") },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "symbol", symbol },
            { "type", orderType },
            { "timeInForce", null },
            { "postOnly", null },
            { "side", side },
            { "price", this.safeString(order, "Price") },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", this.safeString(order, "Value") },
            { "average", this.safeString(order, "AvgPrice") },
            { "amount", this.safeString2(order, "VolumeOrdered", "Volume") },
            { "filled", filled },
            { "remaining", this.safeString(order, "Outstanding") },
            { "status", this.parseOrderStatus(this.safeString(order, "Status")) },
            { "fee", new Dictionary<string, object>() {
                { "rate", feeRate },
                { "cost", feeCost },
                { "currency", bs },
            } },
            { "trades", null },
        }, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "Open", "open" },
            { "PartiallyFilled", "open" },
            { "Filled", "closed" },
            { "PartiallyFilledAndCancelled", "canceled" },
            { "Cancelled", "canceled" },
            { "PartiallyFilledAndExpired", "canceled" },
            { "Expired", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchOrder
        * @description fetches information on an order made by the user
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetOrderDetails(this.extend(new Dictionary<string, object>() {
            { "orderGuid", id },
        }, parameters));
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        return this.parseOrder(response, market);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = this.ordered(new Dictionary<string, object>() {});
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["primaryCurrencyCode"] = getValue(market, "baseId");
            ((IDictionary<string,object>)request)["secondaryCurrencyCode"] = getValue(market, "quoteId");
        }
        if (isTrue(isEqual(limit, null)))
        {
            limit = 50;
        }
        ((IDictionary<string,object>)request)["pageIndex"] = 1;
        ((IDictionary<string,object>)request)["pageSize"] = limit;
        object response = await this.privatePostGetOpenOrders(this.extend(request, parameters));
        object data = this.safeList(response, "Data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = this.ordered(new Dictionary<string, object>() {});
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["primaryCurrencyCode"] = getValue(market, "baseId");
            ((IDictionary<string,object>)request)["secondaryCurrencyCode"] = getValue(market, "quoteId");
        }
        if (isTrue(isEqual(limit, null)))
        {
            limit = 50;
        }
        ((IDictionary<string,object>)request)["pageIndex"] = 1;
        ((IDictionary<string,object>)request)["pageSize"] = limit;
        object response = await this.privatePostGetClosedOrders(this.extend(request, parameters));
        object data = this.safeList(response, "Data", new List<object>() {});
        return this.parseOrders(data, market, since, limit);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchMyTrades
        * @description fetch all trades made by the user
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        limit ??= 50;
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object pageIndex = this.safeInteger(parameters, "pageIndex", 1);
        if (isTrue(isEqual(limit, null)))
        {
            limit = 50;
        }
        object request = this.ordered(new Dictionary<string, object>() {
            { "pageIndex", pageIndex },
            { "pageSize", limit },
        });
        object response = await this.privatePostGetTrades(this.extend(request, parameters));
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        return this.parseTrades(getValue(response, "Data"), market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        object timestamp = this.parse8601(getValue(trade, "TradeTimestampUtc"));
        object id = this.safeString(trade, "TradeGuid");
        object orderId = this.safeString(trade, "OrderGuid");
        object priceString = this.safeString2(trade, "Price", "SecondaryCurrencyTradePrice");
        object amountString = this.safeString2(trade, "VolumeTraded", "PrimaryCurrencyAmount");
        object price = this.parseNumber(priceString);
        object amount = this.parseNumber(amountString);
        object cost = this.parseNumber(Precise.stringMul(priceString, amountString));
        object baseId = this.safeString(trade, "PrimaryCurrencyCode");
        object quoteId = this.safeString(trade, "SecondaryCurrencyCode");
        object marketId = null;
        if (isTrue(isTrue((!isEqual(baseId, null))) && isTrue((!isEqual(quoteId, null)))))
        {
            marketId = add(add(baseId, "/"), quoteId);
        }
        object symbol = this.safeSymbol(marketId, market, "/");
        object side = this.safeString(trade, "OrderType");
        if (isTrue(!isEqual(side, null)))
        {
            if (isTrue(isGreaterThanOrEqual(getIndexOf(side, "Bid"), 0)))
            {
                side = "buy";
            } else if (isTrue(isGreaterThanOrEqual(getIndexOf(side, "Offer"), 0)))
            {
                side = "sell";
            }
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "order", orderId },
            { "type", null },
            { "side", side },
            { "takerOrMaker", null },
            { "price", price },
            { "amount", amount },
            { "cost", cost },
            { "fee", null },
        }, market);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "primaryCurrencyCode", getValue(market, "baseId") },
            { "secondaryCurrencyCode", getValue(market, "quoteId") },
            { "numberOfRecentTradesToRetrieve", 50 },
        };
        object response = await this.publicGetGetRecentTrades(this.extend(request, parameters));
        return this.parseTrades(getValue(response, "Trades"), market, since, limit);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privatePostGetBrokerageFees(parameters);
        //
        //     [
        //         {
        //             "CurrencyCode": "Xbt",
        //             "Fee": 0.005
        //         }
        //         ...
        //     ]
        //
        object fees = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            object fee = getValue(response, i);
            object currencyId = this.safeString(fee, "CurrencyCode");
            object code = this.safeCurrencyCode(currencyId);
            object tradingFee = this.safeNumber(fee, "Fee");
            ((IDictionary<string,object>)fees)[(string)code] = new Dictionary<string, object>() {
                { "info", fee },
                { "fee", tradingFee },
            };
        }
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            object market = this.market(symbol);
            object fee = this.safeValue(fees, getValue(market, "base"), new Dictionary<string, object>() {});
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", this.safeValue(fee, "info") },
                { "symbol", symbol },
                { "maker", this.safeNumber(fee, "fee") },
                { "taker", this.safeNumber(fee, "fee") },
                { "percentage", true },
                { "tierBased", true },
            };
        }
        return result;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#createOrder
        * @description create a trade order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object orderType = this.capitalize(type);
        orderType = add(orderType, ((bool) isTrue((isEqual(side, "sell")))) ? "Offer" : "Bid");
        object request = this.ordered(new Dictionary<string, object>() {
            { "primaryCurrencyCode", getValue(market, "baseId") },
            { "secondaryCurrencyCode", getValue(market, "quoteId") },
            { "orderType", orderType },
        });
        object response = null;
        ((IDictionary<string,object>)request)["volume"] = amount;
        if (isTrue(isEqual(type, "limit")))
        {
            ((IDictionary<string,object>)request)["price"] = price;
            response = await this.privatePostPlaceLimitOrder(this.extend(request, parameters));
        } else
        {
            response = await this.privatePostPlaceMarketOrder(this.extend(request, parameters));
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "info", response },
            { "id", getValue(response, "OrderGuid") },
        }, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#cancelOrder
        * @description cancels an open order
        * @see https://www.independentreserve.com/features/api#CancelOrder
        * @param {string} id order id
        * @param {string} symbol unified symbol of the market the order was made in
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "orderGuid", id },
        };
        object response = await this.privatePostCancelOrder(this.extend(request, parameters));
        //
        //    {
        //        "AvgPrice": 455.48,
        //        "CreatedTimestampUtc": "2022-08-05T06:42:11.3032208Z",
        //        "OrderGuid": "719c495c-a39e-4884-93ac-280b37245037",
        //        "Price": 485.76,
        //        "PrimaryCurrencyCode": "Xbt",
        //        "ReservedAmount": 0.358,
        //        "SecondaryCurrencyCode": "Usd",
        //        "Status": "Cancelled",
        //        "Type": "LimitOffer",
        //        "VolumeFilled": 0,
        //        "VolumeOrdered": 0.358
        //    }
        //
        return this.parseOrder(response);
    }

    public async override Task<object> fetchDepositAddress(object code, object parameters = null)
    {
        /**
        * @method
        * @name independentreserve#fetchDepositAddress
        * @description fetch the deposit address for a currency associated with this account
        * @see https://www.independentreserve.com/features/api#GetDigitalCurrencyDepositAddress
        * @param {string} code unified currency code
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [address structure]{@link https://docs.ccxt.com/#/?id=address-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "primaryCurrencyCode", getValue(currency, "id") },
        };
        object response = await this.privatePostGetDigitalCurrencyDepositAddress(this.extend(request, parameters));
        //
        //    {
        //        Tag: '3307446684',
        //        DepositAddress: 'GCCQH4HACMRAD56EZZZ4TOIDQQRVNADMJ35QOFWF4B2VQGODMA2WVQ22',
        //        LastCheckedTimestampUtc: '2024-02-20T11:13:35.6912985Z',
        //        NextUpdateTimestampUtc: '2024-02-20T11:14:56.5112394Z'
        //    }
        //
        return this.parseDepositAddress(response);
    }

    public override object parseDepositAddress(object depositAddress, object currency = null)
    {
        //
        //    {
        //        Tag: '3307446684',
        //        DepositAddress: 'GCCQH4HACMRAD56EZZZ4TOIDQQRVNADMJ35QOFWF4B2VQGODMA2WVQ22',
        //        LastCheckedTimestampUtc: '2024-02-20T11:13:35.6912985Z',
        //        NextUpdateTimestampUtc: '2024-02-20T11:14:56.5112394Z'
        //    }
        //
        object address = this.safeString(depositAddress, "DepositAddress");
        this.checkAddress(address);
        return new Dictionary<string, object>() {
            { "info", depositAddress },
            { "currency", this.safeString(currency, "code") },
            { "address", address },
            { "tag", this.safeString(depositAddress, "Tag") },
            { "network", null },
        };
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), path);
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)parameters).Keys))))
            {
                url = add(url, add("?", this.urlencode(parameters)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object nonce = this.nonce();
            object auth = new List<object>() {url, add("apiKey=", this.apiKey), add("nonce=", ((object)nonce).ToString())};
            object keys = new List<object>(((IDictionary<string,object>)parameters).Keys);
            for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
            {
                object key = getValue(keys, i);
                object value = ((object)getValue(parameters, key)).ToString();
                ((IList<object>)auth).Add(add(add(key, "="), value));
            }
            object message = String.Join(",", ((IList<object>)auth).ToArray());
            object signature = this.hmac(this.encode(message), this.encode(this.secret), sha256);
            object query = this.ordered(new Dictionary<string, object>() {});
            ((IDictionary<string,object>)query)["apiKey"] = this.apiKey;
            ((IDictionary<string,object>)query)["nonce"] = nonce;
            ((IDictionary<string,object>)query)["signature"] = ((string)signature).ToUpper();
            for (object i = 0; isLessThan(i, getArrayLength(keys)); postFixIncrement(ref i))
            {
                object key = getValue(keys, i);
                ((IDictionary<string,object>)query)[(string)key] = getValue(parameters, key);
            }
            body = this.json(query);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/json" },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }
}
