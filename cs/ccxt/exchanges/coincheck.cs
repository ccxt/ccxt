namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class coincheck : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "coincheck" },
            { "name", "coincheck" },
            { "countries", new List<object>() {"JP", "ID"} },
            { "rateLimit", 1500 },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelOrder", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createOrder", true },
                { "createReduceOnlyOrder", false },
                { "fetchBalance", true },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchDeposits", true },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchLeverage", false },
                { "fetchMarginMode", false },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", true },
                { "fetchOrderBook", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchWithdrawals", true },
                { "reduceMargin", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "ws", true },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://user-images.githubusercontent.com/51840849/87182088-1d6d6380-c2ec-11ea-9c64-8ab9f9b289f5.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "rest", "https://coincheck.com/api" },
                } },
                { "www", "https://coincheck.com" },
                { "doc", "https://coincheck.com/documents/exchange/api" },
                { "fees", new List<object>() {"https://coincheck.com/exchange/fee", "https://coincheck.com/info/fee"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new List<object>() {"exchange/orders/rate", "order_books", "rate/{pair}", "ticker", "trades"} },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new List<object>() {"accounts", "accounts/balance", "accounts/leverage_balance", "bank_accounts", "deposit_money", "exchange/orders/opens", "exchange/orders/transactions", "exchange/orders/transactions_pagination", "exchange/leverage/positions", "lending/borrows/matches", "send_money", "withdraws"} },
                    { "post", new List<object>() {"bank_accounts", "deposit_money/{id}/fast", "exchange/orders", "exchange/transfers/to_leverage", "exchange/transfers/from_leverage", "lending/borrows", "lending/borrows/{id}/repay", "send_money", "withdraws"} },
                    { "delete", new List<object>() {"bank_accounts/{id}", "exchange/orders/{id}", "withdraws/{id}"} },
                } },
            } },
            { "markets", new Dictionary<string, object>() {
                { "BTC/JPY", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "btc_jpy" },
                    { "symbol", "BTC/JPY" },
                    { "base", "BTC" },
                    { "quote", "JPY" },
                    { "baseId", "btc" },
                    { "quoteId", "jpy" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "ETC/JPY", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "etc_jpy" },
                    { "symbol", "ETC/JPY" },
                    { "base", "ETC" },
                    { "quote", "JPY" },
                    { "baseId", "etc" },
                    { "quoteId", "jpy" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "FCT/JPY", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "fct_jpy" },
                    { "symbol", "FCT/JPY" },
                    { "base", "FCT" },
                    { "quote", "JPY" },
                    { "baseId", "fct" },
                    { "quoteId", "jpy" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "MONA/JPY", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "mona_jpy" },
                    { "symbol", "MONA/JPY" },
                    { "base", "MONA" },
                    { "quote", "JPY" },
                    { "baseId", "mona" },
                    { "quoteId", "jpy" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
                { "ETC/BTC", this.safeMarketStructure(new Dictionary<string, object>() {
                    { "id", "etc_btc" },
                    { "symbol", "ETC/BTC" },
                    { "base", "ETC" },
                    { "quote", "BTC" },
                    { "baseId", "etc" },
                    { "quoteId", "btc" },
                    { "type", "spot" },
                    { "spot", true },
                }) },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "maker", this.parseNumber("0") },
                    { "taker", this.parseNumber("0") },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "disabled API Key", typeof(AuthenticationError) },
                    { "invalid authentication", typeof(AuthenticationError) },
                } },
                { "broad", new Dictionary<string, object>() {} },
            } },
        });
    }

    public override object parseBalance(object response)
    {
        object result = new Dictionary<string, object>() {
            { "info", response },
        };
        object codes = new List<object>(((IDictionary<string,object>)this.currencies).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(codes)); postFixIncrement(ref i))
        {
            object code = getValue(codes, i);
            object currency = this.currency(code);
            object currencyId = getValue(currency, "id");
            if (isTrue(inOp(response, currencyId)))
            {
                object account = this.account();
                object reserved = add(currencyId, "_reserved");
                ((IDictionary<string,object>)account)["free"] = this.safeString(response, currencyId);
                ((IDictionary<string,object>)account)["used"] = this.safeString(response, reserved);
                ((IDictionary<string,object>)result)[(string)code] = account;
            }
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://coincheck.com/documents/exchange/api#order-transactions-pagination
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetAccountsBalance(parameters);
        return this.parseBalance(response);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://coincheck.com/documents/exchange/api#order-opens
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of  open orders structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        // Only BTC/JPY is meaningful
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
        }
        object response = await this.privateGetExchangeOrdersOpens(parameters);
        object rawOrders = this.safeValue(response, "orders", new List<object>() {});
        object parsedOrders = this.parseOrders(rawOrders, market, since, limit);
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(parsedOrders)); postFixIncrement(ref i))
        {
            ((IList<object>)result).Add(this.extend(getValue(parsedOrders, i), new Dictionary<string, object>() {
                { "status", "open" },
            }));
        }
        return result;
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // fetchOpenOrders
        //
        //     {                        id:  202835,
        //                      "order_type": "buy",
        //                            "rate":  26890,
        //                            "pair": "btc_jpy",
        //                  "pending_amount": "0.5527",
        //       "pending_market_buy_amount":  null,
        //                  "stop_loss_rate":  null,
        //                      "created_at": "2015-01-10T05:55:38.000Z" }
        //
        // todo: add formats for fetchOrder, fetchClosedOrders here
        //
        object id = this.safeString(order, "id");
        object side = this.safeString(order, "order_type");
        object timestamp = this.parse8601(this.safeString(order, "created_at"));
        object amount = this.safeString(order, "pending_amount");
        object remaining = this.safeString(order, "pending_amount");
        object price = this.safeString(order, "rate");
        object status = null;
        object marketId = this.safeString(order, "pair");
        object symbol = this.safeSymbol(marketId, market, "_");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "amount", amount },
            { "remaining", remaining },
            { "filled", null },
            { "side", side },
            { "type", null },
            { "timeInForce", null },
            { "postOnly", null },
            { "status", status },
            { "symbol", symbol },
            { "price", price },
            { "stopPrice", null },
            { "triggerPrice", null },
            { "cost", null },
            { "fee", null },
            { "info", order },
            { "average", null },
            { "trades", null },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://coincheck.com/documents/exchange/api#order-book
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object response = await this.publicGetOrderBooks(this.extend(request, parameters));
        return this.parseOrderBook(response, getValue(market, "symbol"));
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        // {
        //     "last":4192632.0,
        //     "bid":4192496.0,
        //     "ask":4193749.0,
        //     "high":4332000.0,
        //     "low":4101047.0,
        //     "volume":2313.43191762,
        //     "timestamp":1643374115
        // }
        //
        object symbol = this.safeSymbol(null, market);
        object timestamp = this.safeTimestamp(ticker, "timestamp");
        object last = this.safeString(ticker, "last");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "high", this.safeString(ticker, "high") },
            { "low", this.safeString(ticker, "low") },
            { "bid", this.safeString(ticker, "bid") },
            { "bidVolume", null },
            { "ask", this.safeString(ticker, "ask") },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", null },
            { "percentage", null },
            { "average", null },
            { "baseVolume", this.safeString(ticker, "volume") },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://coincheck.com/documents/exchange/api#ticker
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(!isEqual(symbol, "BTC/JPY")))
        {
            throw new BadSymbol ((string)add(this.id, " fetchTicker() supports BTC/JPY only")) ;
        }
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        object ticker = await this.publicGetTicker(this.extend(request, parameters));
        //
        // {
        //     "last":4192632.0,
        //     "bid":4192496.0,
        //     "ask":4193749.0,
        //     "high":4332000.0,
        //     "low":4101047.0,
        //     "volume":2313.43191762,
        //     "timestamp":1643374115
        // }
        //
        return this.parseTicker(ticker, market);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades (public)
        //
        //      {
        //          "id": "206849494",
        //          "amount": "0.01",
        //          "rate": "5598346.0",
        //          "pair": "btc_jpy",
        //          "order_type": "sell",
        //          "created_at": "2021-12-08T14:10:33.000Z"
        //      }
        //
        // fetchMyTrades (private) - example from docs
        //
        //      {
        //          "id": 38,
        //          "order_id": 49,
        //          "created_at": "2015-11-18T07:02:21.000Z",
        //          "funds": {
        //              "btc": "0.1",
        //              "jpy": "-4096.135"
        //                  },
        //           "pair": "btc_jpy",
        //           "rate": "40900.0",
        //           "fee_currency": "JPY",
        //           "fee": "6.135",
        //           "liquidity": "T",
        //           "side": "buy"
        //      }
        //
        object timestamp = this.parse8601(this.safeString(trade, "created_at"));
        object id = this.safeString(trade, "id");
        object priceString = this.safeString(trade, "rate");
        object marketId = this.safeString(trade, "pair");
        market = this.safeMarket(marketId, market, "_");
        object baseId = getValue(market, "baseId");
        object quoteId = getValue(market, "quoteId");
        object symbol = getValue(market, "symbol");
        object takerOrMaker = null;
        object amountString = null;
        object costString = null;
        object side = null;
        object fee = null;
        object orderId = null;
        if (isTrue(inOp(trade, "liquidity")))
        {
            if (isTrue(isEqual(this.safeString(trade, "liquidity"), "T")))
            {
                takerOrMaker = "taker";
            } else if (isTrue(isEqual(this.safeString(trade, "liquidity"), "M")))
            {
                takerOrMaker = "maker";
            }
            object funds = this.safeValue(trade, "funds", new Dictionary<string, object>() {});
            amountString = this.safeString(funds, baseId);
            costString = this.safeString(funds, quoteId);
            fee = new Dictionary<string, object>() {
                { "currency", this.safeString(trade, "fee_currency") },
                { "cost", this.safeString(trade, "fee") },
            };
            side = this.safeString(trade, "side");
            orderId = this.safeString(trade, "order_id");
        } else
        {
            amountString = this.safeString(trade, "amount");
            side = this.safeString(trade, "order_type");
        }
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "info", trade },
            { "datetime", this.iso8601(timestamp) },
            { "timestamp", timestamp },
            { "symbol", symbol },
            { "type", null },
            { "side", side },
            { "order", orderId },
            { "takerOrMaker", takerOrMaker },
            { "price", priceString },
            { "amount", amountString },
            { "cost", costString },
            { "fee", fee },
        }, market);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://coincheck.com/documents/exchange/api#order-transactions-pagination
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetExchangeOrdersTransactionsPagination(this.extend(request, parameters));
        //
        //      {
        //          "success": true,
        //          "data": [
        //                      {
        //                          "id": 38,
        //                          "order_id": 49,
        //                          "created_at": "2015-11-18T07:02:21.000Z",
        //                          "funds": {
        //                              "btc": "0.1",
        //                              "jpy": "-4096.135"
        //                                  },
        //                          "pair": "btc_jpy",
        //                          "rate": "40900.0",
        //                          "fee_currency": "JPY",
        //                          "fee": "6.135",
        //                          "liquidity": "T",
        //                          "side": "buy"
        //                       },
        //                  ]
        //      }
        //
        object transactions = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(transactions, market, since, limit);
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://coincheck.com/documents/exchange/api#public-trades
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.publicGetTrades(this.extend(request, parameters));
        //
        //      {
        //          "id": "206849494",
        //          "amount": "0.01",
        //          "rate": "5598346.0",
        //          "pair": "btc_jpy",
        //          "order_type": "sell",
        //          "created_at": "2021-12-08T14:10:33.000Z"
        //      }
        //
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTrades(data, market, since, limit);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://coincheck.com/documents/exchange/api#account-info
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetAccounts(parameters);
        //
        //     {
        //         "success": true,
        //         "id": "7487995",
        //         "email": "some@email.com",
        //         "identity_status": "identity_pending",
        //         "bitcoin_address": null,
        //         "lending_leverage": "4",
        //         "taker_fee": "0.0",
        //         "maker_fee": "0.0",
        //         "exchange_fees": {
        //           "btc_jpy": { taker_fee: '0.0', maker_fee: "0.0" },
        //           "etc_jpy": { taker_fee: '0.0', maker_fee: "0.0" },
        //           "fct_jpy": { taker_fee: '0.0', maker_fee: "0.0" },
        //           "mona_jpy": { taker_fee: '0.0', maker_fee: "0.0" },
        //           "plt_jpy": { taker_fee: '0.0', maker_fee: "0.0" }
        //         }
        //     }
        //
        object fees = this.safeValue(response, "exchange_fees", new Dictionary<string, object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(this.symbols)); postFixIncrement(ref i))
        {
            object symbol = getValue(this.symbols, i);
            object market = this.market(symbol);
            object fee = this.safeValue(fees, getValue(market, "id"), new Dictionary<string, object>() {});
            ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                { "info", fee },
                { "symbol", symbol },
                { "maker", this.safeNumber(fee, "maker_fee") },
                { "taker", this.safeNumber(fee, "taker_fee") },
                { "percentage", true },
                { "tierBased", false },
            };
        }
        return result;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#createOrder
        * @description create a trade order
        * @see https://coincheck.com/documents/exchange/api#order-new
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "pair", getValue(market, "id") },
        };
        if (isTrue(isEqual(type, "market")))
        {
            object order_type = add(add(type, "_"), side);
            ((IDictionary<string,object>)request)["order_type"] = order_type;
            object prefix = ((bool) isTrue((isEqual(side, "buy")))) ? (add(order_type, "_")) : "";
            ((IDictionary<string,object>)request)[(string)add(prefix, "amount")] = amount;
        } else
        {
            ((IDictionary<string,object>)request)["order_type"] = side;
            ((IDictionary<string,object>)request)["rate"] = price;
            ((IDictionary<string,object>)request)["amount"] = amount;
        }
        object response = await this.privatePostExchangeOrders(this.extend(request, parameters));
        object id = this.safeString(response, "id");
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "info", response },
        }, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#cancelOrder
        * @description cancels an open order
        * @see https://coincheck.com/documents/exchange/api#order-cancel
        * @param {string} id order id
        * @param {string} symbol not used by coincheck cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "id", id },
        };
        object response = await this.privateDeleteExchangeOrdersId(this.extend(request, parameters));
        //
        //    {
        //        "success": true,
        //        "id": 12345
        //    }
        //
        return this.parseOrder(response);
    }

    public async override Task<object> fetchDeposits(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchDeposits
        * @description fetch all deposits made to an account
        * @see https://coincheck.com/documents/exchange/api#account-deposits
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch deposits for
        * @param {int} [limit] the maximum number of deposits structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
            ((IDictionary<string,object>)request)["currency"] = getValue(currency, "id");
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetDepositMoney(this.extend(request, parameters));
        // {
        //   "success": true,
        //   "deposits": [
        //     {
        //       "id": 2,
        //       "amount": "0.05",
        //       "currency": "BTC",
        //       "address": "13PhzoK8me3u5nHzzFD85qT9RqEWR9M4Ty",
        //       "status": "confirmed",
        //       "confirmed_at": "2015-06-13T08:29:18.000Z",
        //       "created_at": "2015-06-13T08:22:18.000Z"
        //     },
        //     {
        //       "id": 1,
        //       "amount": "0.01",
        //       "currency": "BTC",
        //       "address": "13PhzoK8me3u5nHzzFD85qT9RqEWR9M4Ty",
        //       "status": "received",
        //       "confirmed_at": "2015-06-13T08:21:18.000Z",
        //       "created_at": "2015-06-13T08:21:18.000Z"
        //     }
        //   ]
        // }
        object data = this.safeList(response, "deposits", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit, new Dictionary<string, object>() {
            { "type", "deposit" },
        });
    }

    public async override Task<object> fetchWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coincheck#fetchWithdrawals
        * @description fetch all withdrawals made from an account
        * @see https://coincheck.com/documents/exchange/api#withdraws
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch withdrawals for
        * @param {int} [limit] the maximum number of withdrawals structures to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [transaction structures]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["limit"] = limit;
        }
        object response = await this.privateGetWithdraws(this.extend(request, parameters));
        //  {
        //   "success": true,
        //   "pagination": {
        //     "limit": 25,
        //     "order": "desc",
        //     "starting_after": null,
        //     "ending_before": null
        //   },
        //   "data": [
        //     {
        //       "id": 398,
        //       "status": "finished",
        //       "amount": "242742.0",
        //       "currency": "JPY",
        //       "created_at": "2014-12-04T15:00:00.000Z",
        //       "bank_account_id": 243,
        //       "fee": "400.0",
        //       "is_fast": true
        //     }
        //   ]
        // }
        object data = this.safeList(response, "data", new List<object>() {});
        return this.parseTransactions(data, currency, since, limit, new Dictionary<string, object>() {
            { "type", "withdrawal" },
        });
    }

    public virtual object parseTransactionStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "pending", "pending" },
            { "processing", "pending" },
            { "finished", "ok" },
            { "canceled", "canceled" },
            { "confirmed", "pending" },
            { "received", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        //
        // fetchDeposits
        //
        // {
        //       "id": 2,
        //       "amount": "0.05",
        //       "currency": "BTC",
        //       "address": "13PhzoK8me3u5nHzzFD85qT9RqEWR9M4Ty",
        //       "status": "confirmed",
        //       "confirmed_at": "2015-06-13T08:29:18.000Z",
        //       "created_at": "2015-06-13T08:22:18.000Z"
        //  }
        //
        // fetchWithdrawals
        //
        //  {
        //       "id": 398,
        //       "status": "finished",
        //       "amount": "242742.0",
        //       "currency": "JPY",
        //       "created_at": "2014-12-04T15:00:00.000Z",
        //       "bank_account_id": 243,
        //       "fee": "400.0",
        //       "is_fast": true
        //  }
        //
        object id = this.safeString(transaction, "id");
        object timestamp = this.parse8601(this.safeString(transaction, "created_at"));
        object address = this.safeString(transaction, "address");
        object amount = this.safeNumber(transaction, "amount");
        object currencyId = this.safeString(transaction, "currency");
        object code = this.safeCurrencyCode(currencyId, currency);
        object status = this.parseTransactionStatus(this.safeString(transaction, "status"));
        object updated = this.parse8601(this.safeString(transaction, "confirmed_at"));
        object fee = null;
        object feeCost = this.safeNumber(transaction, "fee");
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", code },
            };
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "address", address },
            { "addressTo", address },
            { "addressFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "tagFrom", null },
            { "type", null },
            { "amount", amount },
            { "currency", code },
            { "status", status },
            { "updated", updated },
            { "comment", null },
            { "internal", null },
            { "fee", fee },
        };
    }

    public override object nonce()
    {
        return this.milliseconds();
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "rest"), "/"), this.implodeParams(path, parameters));
        object query = this.omit(parameters, this.extractParams(path));
        if (isTrue(isEqual(api, "public")))
        {
            if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
            {
                url = add(url, add("?", this.urlencode(query)));
            }
        } else
        {
            this.checkRequiredCredentials();
            object nonce = ((object)this.nonce()).ToString();
            object queryString = "";
            if (isTrue(isEqual(method, "GET")))
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    url = add(url, add("?", this.urlencode(this.keysort(query))));
                }
            } else
            {
                if (isTrue(getArrayLength(new List<object>(((IDictionary<string,object>)query).Keys))))
                {
                    body = this.urlencode(this.keysort(query));
                    queryString = body;
                }
            }
            object auth = add(add(nonce, url), queryString);
            headers = new Dictionary<string, object>() {
                { "Content-Type", "application/x-www-form-urlencoded" },
                { "ACCESS-KEY", this.apiKey },
                { "ACCESS-NONCE", nonce },
                { "ACCESS-SIGNATURE", this.hmac(this.encode(auth), this.encode(this.secret), sha256) },
            };
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object httpCode, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            return null;
        }
        //
        //     {"success":false,"error":"disabled API Key"}'
        //     {"success":false,"error":"invalid authentication"}
        //
        object success = this.safeBool(response, "success", true);
        if (!isTrue(success))
        {
            object error = this.safeString(response, "error");
            object feedback = add(add(this.id, " "), this.json(response));
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), error, feedback);
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), body, feedback);
            throw new ExchangeError ((string)add(add(this.id, " "), this.json(response))) ;
        }
        return null;
    }
}
