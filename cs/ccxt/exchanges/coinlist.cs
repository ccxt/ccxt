namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class coinlist : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "coinlist" },
            { "name", "Coinlist" },
            { "countries", new List<object>() {"US"} },
            { "version", "v1" },
            { "rateLimit", 300 },
            { "certified", false },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", true },
                { "cancelOrder", true },
                { "cancelOrders", true },
                { "closeAllPositions", false },
                { "closePosition", false },
                { "createDepositAddress", false },
                { "createOrder", true },
                { "createPostOnlyOrder", true },
                { "createReduceOnlyOrder", false },
                { "createStopLimitOrder", true },
                { "createStopMarketOrder", true },
                { "createStopOrder", true },
                { "deposit", false },
                { "editOrder", true },
                { "fetchAccounts", true },
                { "fetchBalance", true },
                { "fetchBidsAsks", false },
                { "fetchBorrowInterest", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchCanceledOrders", true },
                { "fetchClosedOrder", false },
                { "fetchClosedOrders", true },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", true },
                { "fetchDeposit", false },
                { "fetchDepositAddress", false },
                { "fetchDepositAddresses", false },
                { "fetchDepositAddressesByNetwork", false },
                { "fetchDeposits", false },
                { "fetchDepositsWithdrawals", true },
                { "fetchDepositWithdrawFee", false },
                { "fetchDepositWithdrawFees", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchL3OrderBook", false },
                { "fetchLedger", true },
                { "fetchLeverage", false },
                { "fetchLeverageTiers", false },
                { "fetchMarketLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", true },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrder", false },
                { "fetchOpenOrders", true },
                { "fetchOrder", true },
                { "fetchOrderBook", true },
                { "fetchOrderBooks", false },
                { "fetchOrders", true },
                { "fetchOrderTrades", true },
                { "fetchPosition", false },
                { "fetchPositionHistory", false },
                { "fetchPositionMode", false },
                { "fetchPositions", false },
                { "fetchPositionsForSymbol", false },
                { "fetchPositionsHistory", false },
                { "fetchPositionsRisk", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchStatus", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", true },
                { "fetchTrades", true },
                { "fetchTradingFee", false },
                { "fetchTradingFees", true },
                { "fetchTradingLimits", false },
                { "fetchTransactionFee", false },
                { "fetchTransactionFees", false },
                { "fetchTransactions", true },
                { "fetchTransfers", true },
                { "fetchWithdrawal", false },
                { "fetchWithdrawals", false },
                { "fetchWithdrawalWhitelist", false },
                { "reduceMargin", false },
                { "repayCrossMargin", false },
                { "repayIsolatedMargin", false },
                { "setLeverage", false },
                { "setMargin", false },
                { "setMarginMode", false },
                { "setPositionMode", false },
                { "signIn", false },
                { "transfer", true },
                { "withdraw", true },
                { "ws", false },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1m" },
                { "5m", "5m" },
                { "30m", "30m" },
            } },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://github-production-user-asset-6210df.s3.amazonaws.com/1294454/281108917-eff2ae1d-ce8a-4b2a-950d-8678b12da965.jpg" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://trade-api.coinlist.co" },
                    { "private", "https://trade-api.coinlist.co" },
                } },
                { "www", "https://coinlist.co" },
                { "doc", new List<object>() {"https://trade-docs.coinlist.co"} },
                { "fees", "https://coinlist.co/fees" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v1/symbols", 1 },
                        { "v1/symbols/summary", 1 },
                        { "v1/symbols/{symbol}", 1 },
                        { "v1/symbols/{symbol}/summary", 1 },
                        { "v1/symbols/{symbol}/book", 1 },
                        { "v1/symbols/{symbol}/quote", 1 },
                        { "v1/symbols/{symbol}/candles", 1 },
                        { "v1/symbols/{symbol}/auctions", 1 },
                        { "v1/symbols/{symbol}/auctions/{auction_code}", 1 },
                        { "v1/time", 1 },
                        { "v1/assets", 1 },
                        { "v1/leaderboard", 1 },
                        { "v1/affiliate/{competition_code}", 1 },
                        { "v1/competition/{competition_id}", 1 },
                    } },
                } },
                { "private", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v1/fees", 1 },
                        { "v1/accounts", 1 },
                        { "v1/accounts/{trader_id}", 1 },
                        { "v1/accounts/{trader_id}/alias", 1 },
                        { "v1/accounts/{trader_id}/ledger", 1 },
                        { "v1/accounts/{trader_id}/wallets", 1 },
                        { "v1/accounts/{trader_id}/wallet-ledger", 1 },
                        { "v1/accounts/{trader_id}/ledger-summary", 1 },
                        { "v1/keys", 1 },
                        { "v1/fills", 1 },
                        { "v1/orders", 1 },
                        { "v1/orders/{order_id}", 1 },
                        { "v1/reports", 1 },
                        { "v1/balances", 1 },
                        { "v1/transfers", 1 },
                        { "v1/user", 1 },
                        { "v1/credits", 1 },
                        { "v1/positions", 1 },
                        { "v1/accounts/{trader_id}/competitions", 1 },
                    } },
                    { "post", new Dictionary<string, object>() {
                        { "v1/keys", 1 },
                        { "v1/orders", 1 },
                        { "v1/orders/cancel-all-after", 1 },
                        { "v1/reports", 1 },
                        { "v1/transfers/to-wallet", 1 },
                        { "v1/transfers/from-wallet", 1 },
                        { "v1/transfers/internal-transfer", 1 },
                        { "v1/transfers/withdrawal-request", 1 },
                        { "v1/orders/bulk", 1 },
                        { "v1/accounts/{trader_id}/competitions", 1 },
                        { "v1/accounts/{trader_id}/create-competition", 1 },
                    } },
                    { "patch", new Dictionary<string, object>() {
                        { "v1/orders/{order_id}", 1 },
                        { "v1/orders/bulk", 1 },
                    } },
                    { "delete", new Dictionary<string, object>() {
                        { "v1/keys/{key}", 1 },
                        { "v1/orders", 1 },
                        { "v1/orders/{order_id}", 1 },
                        { "v1/orders/bulk", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "feeSide", "get" },
                    { "tierBased", true },
                    { "percentage", true },
                    { "taker", this.parseNumber("0.0045") },
                    { "maker", this.parseNumber("0.0025") },
                    { "tiers", new Dictionary<string, object>() {
                        { "taker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.0045")}, new List<object> {this.parseNumber("20000"), this.parseNumber("0.003")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.0025")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.002")}, new List<object> {this.parseNumber("500000"), this.parseNumber("0.0018")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0.0018")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.0016")}, new List<object> {this.parseNumber("2500000"), this.parseNumber("0.0013")}, new List<object> {this.parseNumber("5000000"), this.parseNumber("0.0012")}, new List<object> {this.parseNumber("10000000"), this.parseNumber("0.001")}, new List<object> {this.parseNumber("50000000"), this.parseNumber("0.0005")}, new List<object> {this.parseNumber("100000000"), this.parseNumber("0.0005")}} },
                        { "maker", new List<object>() {new List<object> {this.parseNumber("0"), this.parseNumber("0.0025")}, new List<object> {this.parseNumber("20000"), this.parseNumber("0.0025")}, new List<object> {this.parseNumber("50000"), this.parseNumber("0.0025")}, new List<object> {this.parseNumber("100000"), this.parseNumber("0.002")}, new List<object> {this.parseNumber("500000"), this.parseNumber("0.0015")}, new List<object> {this.parseNumber("750000"), this.parseNumber("0.0012")}, new List<object> {this.parseNumber("1000000"), this.parseNumber("0.001")}, new List<object> {this.parseNumber("2500000"), this.parseNumber("0.0008")}, new List<object> {this.parseNumber("5000000"), this.parseNumber("0.0007")}, new List<object> {this.parseNumber("10000000"), this.parseNumber("0.0006")}, new List<object> {this.parseNumber("50000000"), this.parseNumber("0.0000")}, new List<object> {this.parseNumber("100000000"), this.parseNumber("0.00")}} },
                    } },
                } },
            } },
            { "precisionMode", TICK_SIZE },
            { "options", new Dictionary<string, object>() {
                { "accountsByType", new Dictionary<string, object>() {
                    { "CoinList Pro", "trading" },
                    { "CoinList Pro trading account", "trading" },
                    { "Pro", "trading" },
                    { "pro", "trading" },
                    { "trade", "trading" },
                    { "trading", "trading" },
                    { "CoinList", "funding" },
                    { "CoinList wallet", "funding" },
                    { "Wallet", "funding" },
                    { "wallet", "funding" },
                    { "fund", "funding" },
                    { "funding", "funding" },
                } },
            } },
            { "exceptions", new Dictionary<string, object>() {
                { "exact", new Dictionary<string, object>() {
                    { "AUTH_SIG_INVALID", typeof(AuthenticationError) },
                    { "DENIED_MAINTENANCE", typeof(OnMaintenance) },
                    { "ORDER_REJECT_BAD_STATUS", typeof(InvalidOrder) },
                    { "ORDER_REJECT_INVALID_POST_ONLY", typeof(InvalidOrder) },
                    { "ORDER_REJECT_INVALID_CLOSE_ONLY", typeof(InvalidOrder) },
                    { "ORDER_REJECT_POST_ONLY_REQUIRED", typeof(InvalidOrder) },
                    { "ORDER_REJECT_FROZEN_ORDER", typeof(InvalidOrder) },
                    { "ORDER_REJECT_LIMIT_PRICE_PROTECTION_VIOLATION", typeof(InvalidOrder) },
                    { "ORDER_REJECT_CLOSED", typeof(NotSupported) },
                    { "ORDER_REJECT_MAX_ORDERS", typeof(BadRequest) },
                    { "ORDER_REJECT_NOT_FOUND", typeof(OrderNotFound) },
                    { "ORDER_REJECT_PARSE_ERROR", typeof(BadRequest) },
                    { "ORDER_REJECT_PRICE_INVALID", typeof(InvalidOrder) },
                    { "ORDER_REJECT_QUANTITY_ZERO", typeof(InvalidOrder) },
                    { "ORDER_REJECT_TOKEN_LIMIT", typeof(InsufficientFunds) },
                    { "ORDER_REJECT_TOKEN_LIMIT_OTHER", typeof(InvalidOrder) },
                    { "ORDER_REJECT_SELF_TRADE", typeof(InvalidOrder) },
                    { "ORDER_VALIDATE_BAD_SIZE_ALIGNMENT", typeof(InvalidOrder) },
                    { "ORDER_VALIDATE_BAD_TICK_ALIGNMENT", typeof(InvalidOrder) },
                    { "ORDER_VALIDATE_SYMBOL_NOT_FOUND", typeof(BadSymbol) },
                    { "TRANSFERS_WITHDRAWAL_REQUEST_TOO_LARGE", typeof(InsufficientFunds) },
                    { "WITHDRAWAL_REQUEST_NOT_ALLOWED", typeof(PermissionDenied) },
                } },
                { "broad", new Dictionary<string, object>() {
                    { "A destinationAddress is required for non-USD withdrawals", typeof(InvalidAddress) },
                    { "fails to match the JsonSchema date-time format pattern", typeof(BadRequest) },
                    { "is required", typeof(ArgumentsRequired) },
                    { "must be a string", typeof(BadRequest) },
                    { "must be a valid GUID", typeof(BadRequest) },
                    { "must be greater than or equal to", typeof(BadRequest) },
                    { "must be less than or equal to", typeof(BadRequest) },
                    { "must be one of", typeof(BadRequest) },
                    { "Symbol not found", typeof(BadSymbol) },
                } },
            } },
        });
    }

    public override object calculateRateLimiterCost(object api, object method, object path, object parameters, object config = null)
    {
        config ??= new Dictionary<string, object>();
        if (isTrue(((parameters is IList<object>) || (parameters.GetType().IsGenericType && parameters.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))))))
        {
            object length = getArrayLength(parameters);
            return Math.Ceiling(Convert.ToDouble(divide(length, 2)));
        }
        return 1;
    }

    public async override Task<object> fetchTime(object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchTime
        * @description fetches the current integer timestamp in milliseconds from the exchange server
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-system-time
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int} the current integer timestamp in milliseconds from the exchange server
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV1Time(parameters);
        //
        //     {
        //         "epoch": 1698087996.039,
        //         "iso": "2023-10-23T19:06:36.039Z"
        //     }
        //
        object str = this.safeString(response, "iso");
        return this.parse8601(str);
    }

    public async override Task<object> fetchCurrencies(object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchCurrencies
        * @description fetches all available currencies on an exchange
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-supported-assets
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an associative dictionary of currencies
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV1Assets(parameters);
        //
        //     {
        //         "assets": [
        //             {
        //                 "asset": "AAVE",
        //                 "index_code": ".AAVEUSD",
        //                 "decimal_places": 18,
        //                 "min_withdrawal": "1.0000",
        //                 "is_transferable": true,
        //                 "is_visible": true
        //             },
        //             {
        //                 "asset": "ALGO",
        //                 "index_code": ".ALGOUSD",
        //                 "decimal_places": 6,
        //                 "min_withdrawal": "1.0000",
        //                 "is_transferable": true,
        //                 "is_visible": true
        //             }
        //         ]
        //     }
        //
        object currencies = this.safeValue(response, "assets", new List<object>() {});
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(currencies)); postFixIncrement(ref i))
        {
            object currency = getValue(currencies, i);
            object id = this.safeString(currency, "asset");
            object code = this.safeCurrencyCode(id);
            object isTransferable = this.safeBool(currency, "is_transferable", false);
            object withdrawEnabled = isTransferable;
            object depositEnabled = isTransferable;
            object active = isTransferable;
            object decimalPlaces = this.safeString(currency, "decimal_places");
            object precision = this.parseNumber(this.parsePrecision(decimalPlaces));
            object minWithdrawal = this.safeString(currency, "min_withdrawal");
            ((IDictionary<string,object>)result)[(string)code] = new Dictionary<string, object>() {
                { "id", id },
                { "code", code },
                { "name", code },
                { "info", currency },
                { "active", active },
                { "deposit", depositEnabled },
                { "withdraw", withdrawEnabled },
                { "fee", null },
                { "precision", precision },
                { "limits", new Dictionary<string, object>() {
                    { "amount", new Dictionary<string, object>() {
                        { "min", null },
                        { "max", null },
                    } },
                    { "withdraw", new Dictionary<string, object>() {
                        { "min", minWithdrawal },
                        { "max", null },
                    } },
                } },
                { "networks", new Dictionary<string, object>() {} },
            };
        }
        return result;
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchMarkets
        * @description retrieves data on all markets for coinlist
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-symbols
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV1Symbols(parameters);
        //
        //     {
        //         "symbols": [
        //             {
        //                 "symbol": "CQT-USDT",
        //                 "base_currency": "CQT",
        //                 "is_trader_geofenced": false,
        //                 "list_time": "2021-06-15T00:00:00.000Z",
        //                 "type": "spot",
        //                 "series_code": "CQT-USDT-SPOT",
        //                 "long_name": "Covalent",
        //                 "asset_class": "CRYPTO",
        //                 "minimum_price_increment": "0.0001",
        //                 "minimum_size_increment": "0.0001",
        //                 "quote_currency": "USDT",
        //                 "index_code": null,
        //                 "price_band_threshold_market": "0.05",
        //                 "price_band_threshold_limit": "0.25",
        //                 "last_price": "0.12160000",
        //                 "fair_price": "0.12300000",
        //                 "index_price": null
        //             },
        //         ]
        //     }
        //
        object markets = this.safeValue(response, "symbols", new List<object>() {});
        return this.parseMarkets(markets);
    }

    public override object parseMarket(object market)
    {
        object id = this.safeString(market, "symbol");
        object baseId = this.safeString(market, "base_currency");
        object quoteId = this.safeString(market, "quote_currency");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object amountPrecision = this.safeString(market, "minimum_size_increment");
        object pricePrecision = this.safeString(market, "minimum_price_increment");
        object created = this.safeString(market, "list_time");
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", true },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", this.parseNumber(amountPrecision) },
                { "price", this.parseNumber(pricePrecision) },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "created", this.parse8601(created) },
            { "info", market },
        };
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-symbol-summaries
        * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object tickers = await this.publicGetV1SymbolsSummary(this.extend(request, parameters));
        //
        //     {
        //         "MATIC-USD": {
        //             "type":"spot",
        //             "last_price":"0.60990000",
        //             "lowest_ask":"0.61190000",
        //             "highest_bid":"0.60790000",
        //             "last_trade": {
        //                 "price":"0.60000000",
        //                 "volume":"2.0000",
        //                 "imbalance":"198.0000",
        //                 "logicalTime":"2023-10-22T23:02:25.000Z",
        //                 "auctionCode":"MATIC-USD-2023-10-22T23:02:25.000Z"
        //         },
        //             "volume_base_24h":"34.0555",
        //             "volume_quote_24h":"19.9282",
        //             "price_change_percent_24h":"7.50925436",
        //             "highest_price_24h":"0.68560000",
        //             "lowest_price_24h":"0.55500000"
        //         },
        //     }
        //
        return this.parseTickers(tickers, symbols, parameters);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-market-summary
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object ticker = await this.publicGetV1SymbolsSymbolSummary(this.extend(request, parameters));
        //
        //     {
        //         "type":"spot",
        //         "last_price":"31125.00000000",
        //         "lowest_ask":"31349.99000000",
        //         "highest_bid":"30900.00000000",
        //         "last_trade": {
        //             "price":"31000.00000000",
        //             "volume":"0.0003",
        //             "imbalance":"0.0000",
        //             "logicalTime":"2023-10-23T16:57:15.000Z",
        //             "auctionCode":"BTC-USDT-2023-10-23T16:57:15.000Z"
        //         },
        //         "volume_base_24h":"0.3752",
        //         "volume_quote_24h":"11382.7181",
        //         "price_change_percent_24h":"3.66264694",
        //         "highest_price_24h":"31225.12000000",
        //         "lowest_price_24h":"29792.81000000"
        //     }
        //
        return this.parseTicker(ticker, market);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //
        //     {
        //         "type":"spot",
        //         "last_price":"0.60990000",
        //         "lowest_ask":"0.61190000",
        //         "highest_bid":"0.60790000",
        //         "last_trade": {
        //             "price":"0.60000000",
        //             "volume":"2.0000",
        //             "imbalance":"198.0000",
        //             "logicalTime":"2023-10-22T23:02:25.000Z",
        //             "auctionCode":"MATIC-USD-2023-10-22T23:02:25.000Z"
        //          },
        //         "volume_base_24h":"34.0555",
        //         "volume_quote_24h":"19.9282",
        //         "price_change_percent_24h":"7.50925436",
        //         "highest_price_24h":"0.68560000",
        //         "lowest_price_24h":"0.55500000"
        //     }
        //
        object lastTrade = this.safeValue(ticker, "last_trade", new Dictionary<string, object>() {});
        object timestamp = this.parse8601(this.safeString(lastTrade, "logicalTime"));
        object bid = this.safeString(ticker, "highest_bid");
        object ask = this.safeString(ticker, "lowest_ask");
        object baseVolume = this.safeString(ticker, "volume_base_24h");
        object quoteVolume = this.safeString(ticker, "volume_quote_24h");
        object high = this.safeString(ticker, "highest_price_24h");
        object low = this.safeString(ticker, "lowest_price_24h");
        object close = this.safeString(ticker, "last_price");
        object changePcnt = this.safeString(ticker, "price_change_percent_24h");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", getValue(market, "symbol") },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "open", null },
            { "high", high },
            { "low", low },
            { "close", close },
            { "bid", bid },
            { "bidVolume", null },
            { "ask", ask },
            { "askVolume", null },
            { "vwap", null },
            { "previousClose", null },
            { "change", null },
            { "percentage", changePcnt },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchOrderBook
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-order-book-level-2
        * @param {string} symbol unified symbol of the market to fetch the order book for
        * @param {int} [limit] the maximum amount of order book entries to return (default 100, max 200)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        object response = await this.publicGetV1SymbolsSymbolBook(this.extend(request, parameters));
        //
        //     {
        //         "bids": [
        //             [ "30900.00000000", "0.0001" ],
        //             [ "30664.21000000", "0.0172" ],
        //             [ "30664.20000000", "0.0906" ],
        //         ],
        //         "asks": [
        //             [ "31349.99000000", "0.0003" ],
        //             [ "31350.00000000", "0.0023" ],
        //             [ "31359.33000000", "0.0583" ],
        //         ],
        //         "after_auction_code": "BTC-USDT-2023-10-23T18:40:51.000Z",
        //         "call_time": "2023-10-23T18:40:51.068Z",
        //         "logical_time": "2023-10-23T18:40:51.000Z"
        //     }
        //
        object logical_time = this.parse8601(this.safeString(response, "logical_time"));
        object orderbook = this.parseOrderBook(response, symbol, logical_time);
        ((IDictionary<string,object>)orderbook)["nonce"] = null;
        return orderbook;
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-candles
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object granularity = this.safeString(this.timeframes, timeframe);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "granularity", granularity },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_time"] = this.iso8601(since);
            if (isTrue(!isEqual(limit, null)))
            {
                object duration = multiply(this.parseTimeframe(timeframe), 1000);
                ((IDictionary<string,object>)request)["end_time"] = this.iso8601(this.sum(since, multiply(duration, (limit))));
            } else
            {
                ((IDictionary<string,object>)request)["end_time"] = this.iso8601(this.milliseconds());
            }
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_time"] = this.iso8601(until);
        }
        object response = await this.publicGetV1SymbolsSymbolCandles(this.extend(request, parameters));
        //
        //     {
        //         "candles": [
        //             [
        //                 "2023-10-17T15:00:00.000Z",
        //                 "28522.96000000",
        //                 "28522.96000000",
        //                 "28522.96000000",
        //                 "28522.96000000",
        //                 "0.1881",
        //                 null
        //             ],
        //             [
        //                 "2023-10-17T15:30:00.000Z",
        //                 "28582.64000000",
        //                 "28582.64000000",
        //                 "28582.64000000",
        //                 "28582.64000000",
        //                 "0.0050",
        //                 null
        //             ]
        //         ]
        //     }
        //
        object candles = this.safeList(response, "candles", new List<object>() {});
        return this.parseOHLCVs(candles, market, timeframe, since, limit);
    }

    public override object parseOHLCV(object ohlcv, object market = null)
    {
        //
        //     [
        //         "2023-10-17T15:30:00.000Z",
        //         "28582.64000000",
        //         "28582.64000000",
        //         "28582.64000000",
        //         "28582.64000000",
        //         "0.0050",
        //         null
        //     ]
        //
        return new List<object> {this.parse8601(this.safeString(ohlcv, 0)), this.safeNumber(ohlcv, 1), this.safeNumber(ohlcv, 2), this.safeNumber(ohlcv, 3), this.safeNumber(ohlcv, 4), this.safeNumber(ohlcv, 5)};
    }

    public async override Task<object> fetchTrades(object symbol, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchTrades
        * @description get the list of most recent trades for a particular symbol
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-auctions
        * @param {string} symbol unified symbol of the market to fetch trades for
        * @param {int} [since] timestamp in ms of the earliest trade to fetch
        * @param {int} [limit] the maximum amount of trades to fetch (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_time"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = mathMin(limit, 500);
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_time"] = this.iso8601(until);
        }
        object response = await this.publicGetV1SymbolsSymbolAuctions(this.extend(request, parameters));
        //
        //     {
        //         "auctions": [
        //             {
        //                 "symbol":"BTC-USDT",
        //                 "auction_code":"BTC-USDT-2023-10-01T08:05:56.000Z",
        //                 "price":"27241.53000000",
        //                 "volume":"0.0052",
        //                 "imbalance":"-1.0983",
        //                 "logical_time":"2023-10-01T08:05:56.000Z",
        //                 "call_time":"2023-10-01T08:05:56.068Z"
        //             },
        //             {
        //                 "symbol":"BTC-USDT",
        //                 "auction_code":"BTC-USDT-2023-10-01T08:09:09.000Z",
        //                 "price":"27236.83000000",
        //                 "volume":"0.0283",
        //                 "imbalance":"-1.0754",
        //                 "logical_time":"2023-10-01T08:09:09.000Z",
        //                 "call_time":"2023-10-01T08:09:09.078Z"
        //             }
        //         ]
        //     }
        //
        object auctions = this.safeList(response, "auctions", new List<object>() {});
        return this.parseTrades(auctions, market, since, limit);
    }

    public override object parseTrade(object trade, object market = null)
    {
        //
        // fetchTrades
        //     {
        //         "symbol": "BTC-USDT",
        //         "auction_code": "BTC-USDT-2023-10-01T08:05:56.000Z",
        //         "price": "27241.53000000",
        //         "volume": "0.0052",
        //         "imbalance": "-1.0983",
        //         "logical_time": "2023-10-01T08:05:56.000Z",
        //         "call_time": "2023-10-01T08:05:56.068Z"
        //     }
        //
        // fetchMyTrades
        //     {
        //         "symbol": "ETH-USDT",
        //         "auction_code": "ETH-USDT-2023-10-20T13:22:14.000Z",
        //         "order_id": "83ed365f-497d-433b-96c1-9d08c1a12842",
        //         "quantity": "0.0008",
        //         "price": "1615.24000000",
        //         "fee": "0.005815",
        //         "fee_type": "taker",
        //         "fee_currency": "USDT",
        //         "logical_time": "2023-10-20T13:22:14.000Z"
        //     }
        //
        object marketId = this.safeString(trade, "symbol");
        market = this.safeMarket(marketId, market);
        object symbol = getValue(market, "symbol");
        object id = this.safeString(trade, "auction_code");
        object timestamp = this.parse8601(this.safeString(trade, "logical_time"));
        object priceString = this.safeString(trade, "price");
        object amountString = this.safeString2(trade, "volume", "quantity");
        object order = this.safeString(trade, "order_id");
        object fee = null;
        object side = null;
        object feeCost = this.safeString(trade, "fee");
        if (isTrue(!isEqual(feeCost, null)))
        {
            // only in fetchMyTrades
            object amountIsNegative = Precise.stringLt(amountString, "0");
            if (isTrue(amountIsNegative))
            {
                side = "sell";
                amountString = Precise.stringNeg(amountString);
            } else
            {
                side = "buy";
            }
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", this.safeString(trade, "fee_currency") },
            };
        } else
        {
            object imbalance = this.safeString(trade, "imbalance");
            if (isTrue(Precise.stringLt(imbalance, "0")))
            {
                side = "buy";
            } else
            {
                side = "sell";
            }
        }
        object takerOrMaker = this.safeString(trade, "fee_type");
        return this.safeTrade(new Dictionary<string, object>() {
            { "id", id },
            { "order", order },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "symbol", symbol },
            { "type", null },
            { "side", side },
            { "takerOrMaker", takerOrMaker },
            { "price", priceString },
            { "amount", amountString },
            { "cost", null },
            { "fee", fee },
            { "info", trade },
        }, market);
    }

    public async override Task<object> fetchTradingFees(object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchTradingFees
        * @description fetch the trading fees for multiple markets
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-fees
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [fee structures]{@link https://docs.ccxt.com/#/?id=fee-structure} indexed by market symbols
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetV1Fees(parameters);
        //
        //     {
        //         fees_by_symbols: {
        //             'BTC-USD,BTC-USDT,ETH-USD,ETH-USDT,ETH-BTC,AAVE-USD,AAVE-USDT,ALGO-USD,ALGO-USDT,AVAX-USD,AVAX-USDT,BICO-USD,BICO-USDT,BLD-USD,BLD-USDT,BTRST-USDT,BZZ-USDT,CELO-USD,CELO-BTC,CFG-USD,CFG-USDT,CLV-USDT,COMP-USD,COMP-USDT,CYBER-USDT,CQT-USDT,CSPR-USD,CSPR-USDT,CUSD-USD,CUSD-USDC,DOGE-USD,DOGE-USDT,DOT-USD,DOT-USDT,EFI-USDT,FIL-USD,FIL-USDT,FLOW-USD,FLOW-USDT,GAL-USD,GAL-USDT,GODS-USDT,GOG-USDT,HMT-USD,HMT-USDT,ICP-USD,ICP-USDT,IMX-USD,IMX-USDT,LINK-USD,LINK-USDT,MATIC-USD,MATIC-USDT,MINA-USD,MINA-USDT,MKR-USD,MKR-USDT,NEON-USDT,NYM-USD,NYM-USDT,OCEAN-USD,OXT-USD,ROSE-USD,ROSE-USDT,SKL-USD,SKL-USDT,SOL-USD,SOL-USDT,STX-USDT,SUI-USDT,T-USDT,UNI-USD,UNI-USDT,USDT-USD,VEGA-USDT,WAXL-USD,WAXL-USDT,WBTC-BTC,WCFG-USD,WCFG-USDT,XTZ-USD': {
        //                 base: {
        //                     fees: { maker: '0', taker: '0.0045', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_1: {
        //                     fees: { maker: '0', taker: '0.003', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_2: {
        //                     fees: { maker: '0', taker: '0.0025', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_3: {
        //                     fees: { maker: '0', taker: '0.002', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_4: {
        //                     fees: { maker: '0', taker: '0.0018', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_5: {
        //                     fees: { maker: '0', taker: '0.0018', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_6: {
        //                     fees: { maker: '0', taker: '0.0016', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_7: {
        //                     fees: { maker: '0', taker: '0.0013', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_8: {
        //                     fees: { maker: '0', taker: '0.0012', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_9: {
        //                     fees: { maker: '0', taker: '0.001', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 }
        //                 volume_tier_10: {
        //                     fees: { maker: '0', taker: '0.0005', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //                 volume_tier_11: {
        //                     fees: { maker: '0', taker: '0.0005', liquidation: '0' },
        //                     floors: { maker: null, taker: null }
        //                 },
        //             }
        //         }
        //     }
        //
        object fees = this.safeValue(response, "fees_by_symbols", new Dictionary<string, object>() {});
        object result = new Dictionary<string, object>() {};
        object groupsOfSymbols = new List<object>(((IDictionary<string,object>)fees).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(groupsOfSymbols)); postFixIncrement(ref i))
        {
            object group = getValue(groupsOfSymbols, i);
            object feeTiers = this.safeValue(fees, group, new Dictionary<string, object>() {});
            object tiers = this.parseFeeTiers(feeTiers);
            object firstTier = this.safeValue(feeTiers, "base", new Dictionary<string, object>() {});
            object firstTierFees = this.safeValue(firstTier, "fees", new Dictionary<string, object>() {});
            object ids = ((string)group).Split(new [] {((string)",")}, StringSplitOptions.None).ToList<object>();
            for (object j = 0; isLessThan(j, getArrayLength(ids)); postFixIncrement(ref j))
            {
                object id = getValue(ids, j);
                object market = this.safeMarket(id);
                object symbol = getValue(market, "symbol");
                object info = new Dictionary<string, object>() {};
                ((IDictionary<string,object>)info)[(string)group] = feeTiers;
                ((IDictionary<string,object>)result)[(string)symbol] = new Dictionary<string, object>() {
                    { "info", info },
                    { "symbol", symbol },
                    { "maker", this.safeNumber(firstTierFees, "maker") },
                    { "taker", this.safeNumber(firstTierFees, "taker") },
                    { "percentage", true },
                    { "tierBased", true },
                    { "tiers", tiers },
                };
            }
        }
        return result;
    }

    public virtual object parseFeeTiers(object feeTiers, object market = null)
    {
        //
        //     base: {
        //         fees: { maker: '0', taker: '0.0045', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_1: {
        //         fees: { maker: '0', taker: '0.003', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_2: {
        //         fees: { maker: '0', taker: '0.0025', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_3: {
        //         fees: { maker: '0', taker: '0.002', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_4: {
        //         fees: { maker: '0', taker: '0.0018', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_5: {
        //         fees: { maker: '0', taker: '0.0018', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_6: {
        //         fees: { maker: '0', taker: '0.0016', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_7: {
        //         fees: { maker: '0', taker: '0.0013', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_8: {
        //         fees: { maker: '0', taker: '0.0012', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_9: {
        //         fees: { maker: '0', taker: '0.001', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     }
        //     volume_tier_10: {
        //         fees: { maker: '0', taker: '0.0005', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //     volume_tier_11: {
        //         fees: { maker: '0', taker: '0.0005', liquidation: '0' },
        //         floors: { maker: null, taker: null }
        //     },
        //
        object takerFees = new List<object>() {};
        object makerFees = new List<object>() {};
        object keys = new List<object>(((IDictionary<string,object>)feeTiers).Keys);
        object keysLength = getArrayLength(keys);
        if (isTrue(isGreaterThan(keysLength, 0)))
        {
            for (object i = 0; isLessThan(i, keysLength); postFixIncrement(ref i))
            {
                object key = getValue(keys, i);
                object tier = this.safeValue(feeTiers, key, new Dictionary<string, object>() {});
                object tierFees = this.safeValue(tier, "fees", new Dictionary<string, object>() {});
                object taker = this.safeString(tierFees, "taker");
                object maker = this.safeString(tierFees, "maker");
                ((IList<object>)makerFees).Add(new List<object>() {null, this.parseNumber(maker)});
                ((IList<object>)takerFees).Add(new List<object>() {null, this.parseNumber(taker)});
            }
            takerFees = this.sortBy(takerFees, 1, true);
            makerFees = this.sortBy(makerFees, 1, true);
            object firstTier = this.safeDict(takerFees, 0, new List<object>() {});
            object exchangeFees = this.safeDict(this, "fees", new Dictionary<string, object>() {});
            object exchangeFeesTrading = this.safeDict(exchangeFees, "trading", new Dictionary<string, object>() {});
            object exchangeFeesTradingTiers = this.safeDict(exchangeFeesTrading, "tiers", new Dictionary<string, object>() {});
            object exchangeFeesTradingTiersTaker = this.safeList(exchangeFeesTradingTiers, "taker", new List<object>() {});
            object exchangeFeesTradingTiersMaker = this.safeList(exchangeFeesTradingTiers, "maker", new List<object>() {});
            object exchangeFeesTradingTiersTakerLength = getArrayLength(exchangeFeesTradingTiersTaker);
            object firstTierLength = getArrayLength(firstTier);
            if (isTrue(isTrue((isEqual(keysLength, exchangeFeesTradingTiersTakerLength))) && isTrue((isGreaterThan(firstTierLength, 0)))))
            {
                for (object i = 0; isLessThan(i, keysLength); postFixIncrement(ref i))
                {
                    ((List<object>)getValue(takerFees, i))[Convert.ToInt32(0)] = getValue(getValue(exchangeFeesTradingTiersTaker, i), 0);
                    ((List<object>)getValue(makerFees, i))[Convert.ToInt32(0)] = getValue(getValue(exchangeFeesTradingTiersMaker, i), 0);
                }
            }
        }
        return new Dictionary<string, object>() {
            { "maker", makerFees },
            { "taker", takerFees },
        };
    }

    public async override Task<object> fetchAccounts(object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchAccounts
        * @description fetch all the accounts associated with a profile
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-accounts
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [account structures]{@link https://docs.ccxt.com/#/?id=account-structure} indexed by the account type
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetV1Accounts(parameters);
        //
        //     {
        //         "accounts": [
        //             {
        //                 "trader_id": "b18507ce-7d55-4bf1-b12a-0ccca5b90936",
        //                 "name": "string"
        //             }
        //         ]
        //     }
        //
        object accounts = this.safeValue(response, "accounts", new List<object>() {});
        return this.parseAccounts(accounts, parameters);
    }

    public override object parseAccount(object account)
    {
        //
        //     {
        //         "trader_id": "b18507ce-7d55-4bf1-b12a-0ccca5b90936",
        //         "name": "string"
        //     }
        //
        return new Dictionary<string, object>() {
            { "id", this.safeString(account, "trader_id") },
            { "type", "trading" },
            { "code", null },
            { "info", account },
        };
    }

    public async override Task<object> fetchBalance(object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchBalance
        * @description query for balance and get the amount of funds available for trading or funds locked in orders
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-balances
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object response = await this.privateGetV1Balances(parameters);
        return this.parseBalance(response);
    }

    public override object parseBalance(object response)
    {
        //
        //     {
        //         "asset_balances": {
        //             "BTC": "0.00308696",
        //             "ETH": "20.000000000000000000"
        //         },
        //         "asset_holds": {
        //             "BTC": "0.00000000",
        //             "ETH": "1.000000000000000000"
        //         },
        //         "net_liquidation_value_usd": "string"
        //     }
        //
        object result = new Dictionary<string, object>() {
            { "info", response },
            { "timestamp", null },
            { "datetime", null },
        };
        object totalBalances = this.safeValue(response, "asset_balances", new Dictionary<string, object>() {});
        object usedBalances = this.safeValue(response, "asset_holds", new Dictionary<string, object>() {});
        object currencyIds = new List<object>(((IDictionary<string,object>)totalBalances).Keys);
        for (object i = 0; isLessThan(i, getArrayLength(currencyIds)); postFixIncrement(ref i))
        {
            object currencyId = getValue(currencyIds, i);
            object code = this.safeCurrencyCode(currencyId);
            object account = this.account();
            ((IDictionary<string,object>)account)["total"] = this.safeString(totalBalances, currencyId);
            ((IDictionary<string,object>)account)["used"] = this.safeString(usedBalances, currencyId, "0");
            ((IDictionary<string,object>)result)[(string)code] = account;
        }
        return this.safeBalance(result);
    }

    public async override Task<object> fetchMyTrades(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchMyTrades
        * @description fetch all trades made by the user
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-fills
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades structures to retrieve (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {};
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_time"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_time"] = this.iso8601(until);
        }
        object response = await this.privateGetV1Fills(this.extend(request, parameters));
        //
        //     {
        //         "fills": [
        //             {
        //                 "symbol": "ETH-USDT",
        //                 "auction_code": "ETH-USDT-2023-10-20T13:16:30.000Z",
        //                 "order_id": "39911d5f-c789-4a7d-ad34-820a804d1da6",
        //                 "quantity": "-0.0009",
        //                 "price": "1608.83000000",
        //                 "fee": "0.006516",
        //                 "fee_type": "taker",
        //                 "fee_currency": "USDT",
        //                 "logical_time": "2023-10-20T13:16:30.000Z"
        //             },
        //             {
        //                 "symbol": "ETH-USDT",
        //                 "auction_code": "ETH-USDT-2023-10-20T13:22:14.000Z",
        //                 "order_id": "83ed365f-497d-433b-96c1-9d08c1a12842",
        //                 "quantity": "0.0008",
        //                 "price": "1615.24000000",
        //                 "fee": "0.005815",
        //                 "fee_type": "taker",
        //                 "fee_currency": "USDT",
        //                 "logical_time": "2023-10-20T13:22:14.000Z"
        //             },
        //         ]
        //     }
        //
        object fills = this.safeList(response, "fills", new List<object>() {});
        return this.parseTrades(fills, market, since, limit);
    }

    public async override Task<object> fetchOrderTrades(object id, object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchOrderTrades
        * @description fetch all the trades made from a single order
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-fills
        * @param {string} id order id
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch trades for
        * @param {int} [limit] the maximum number of trades to retrieve
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=trade-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        return await this.fetchMyTrades(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchOrders
        * @description fetches information on multiple orders made by the user
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of order structures to retrieve (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @param {string|string[]} [params.status] the status of the order - 'accepted', 'done', 'canceled', 'rejected', 'pending' (default [ 'accepted', 'done', 'canceled', 'rejected', 'pending' ])
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object status = ((object)this.safeString(parameters, "status"));
        if (isTrue(isEqual(status, null)))
        {
            status = new List<object>() {"accepted", "done", "canceled", "rejected", "pending"};
        }
        object request = new Dictionary<string, object>() {
            { "status", status },
        };
        object market = null;
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_time"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_time"] = this.iso8601(until);
        }
        object response = await this.privateGetV1Orders(this.extend(request, parameters));
        //
        //     {
        //         "orders":[
        //             {
        //                 "order_id":"913ea6e7-9fc9-43fb-9db1-f195d3baa93f",
        //                 "price":"35800.00000000",
        //                 "stop_price":null,
        //                 "cost":"0.00000000",
        //                 "fill_fees":"0.00000000",
        //                 "trader_id":"9c6f737e-a829-4843-87b1-b1ce86f2853b",
        //                 "status":"accepted",
        //                 "epoch_timestamp":"2023-10-26T08:20:56.307Z",
        //                 "origin":"web",
        //                 "self_trade_prevention":null,
        //                 "client_id":null,
        //                 "created_at":"2023-10-26T08:20:56.307Z",
        //                 "symbol":"BTC-USDT",
        //                 "size":"0.0003",
        //                 "side":"sell",
        //                 "type":"limit",
        //                 "post_only":false,
        //                 "size_filled":"0.0000"
        //             }
        //         ]
        //     }
        //
        object orders = this.safeList(response, "orders", new List<object>() {});
        return this.parseOrders(orders, market, since, limit);
    }

    public async override Task<object> fetchOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchOrder
        * @description fetches information on an order made by the user
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-specific-order-by-id
        * @param {int|string} id order id
        * @param {string} symbol not used by coinlist fetchOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        object response = await this.privateGetV1OrdersOrderId(this.extend(request, parameters));
        //
        //     {
        //         "order_id": "93101167-9065-4b9c-b98b-5d789a3ed9fe",
        //         "client_id": "string",
        //         "symbol": "string",
        //         "type": "market",
        //         "side": "buy",
        //         "size": "string",
        //         "price": "string",
        //         "stop_price": "string",
        //         "stop_trigger": "last",
        //         "self_trade_prevention": "keep-newest",
        //         "average_fill_price": "string",
        //         "fill_fees": "string",
        //         "size_filled": "string",
        //         "created_at": "2019-08-24T14:15:22Z",
        //         "epoch_timestamp": "2019-08-24T14:15:22Z",
        //         "post_only": true,
        //         "peg_price_type": "trailing-stop",
        //         "peg_offset_value": "string",
        //         "origin": "web",
        //         "status": "pending"
        //     }
        //
        return this.parseOrder(response);
    }

    public async override Task<object> fetchOpenOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchOpenOrders
        * @description fetch all unfilled currently open orders
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-orders
        * @param {string} symbol unified market symbol
        * @param {int} [since] the earliest time in ms to fetch open orders for
        * @param {int} [limit] the maximum number of open order structures to retrieve (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "status", "accepted" },
        };
        return this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> fetchClosedOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchClosedOrders
        * @description fetches information on multiple closed orders made by the user
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of closed order structures to retrieve (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "status", "done" },
        };
        return this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async virtual Task<object> fetchCanceledOrders(object symbol = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchCanceledOrders
        * @description fetches information on multiple canceled orders made by the user
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-orders
        * @param {string} symbol unified market symbol of the market orders were made in
        * @param {int} [since] the earliest time in ms to fetch orders for
        * @param {int} [limit] the maximum number of canceled order structures to retrieve (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {object} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "status", "canceled" },
        };
        return this.fetchOrders(symbol, since, limit, this.extend(request, parameters));
    }

    public async override Task<object> cancelAllOrders(object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#cancelAllOrders
        * @description cancel open orders of market
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#cancel-all-orders
        * @param {string} symbol unified market symbol
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = null;
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(symbol, null)))
        {
            market = this.market(symbol);
            ((IDictionary<string,object>)request)["symbol"] = getValue(market, "id");
        }
        object response = await this.privateDeleteV1Orders(this.extend(request, parameters));
        //
        //     {
        //         "message": "Order cancellation request received.",
        //         "timestamp": "2023-10-26T10:29:28.652Z"
        //     }
        //
        object orders = new List<object>() {response};
        return this.parseOrders(orders, market);
    }

    public async override Task<object> cancelOrder(object id, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#cancelOrder
        * @description cancels an open order
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#cancel-specific-order-by-id
        * @param {string} id order id
        * @param {string} symbol not used by coinlist cancelOrder ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "order_id", id },
        };
        object response = await this.privateDeleteV1OrdersOrderId(this.extend(request, parameters));
        //
        //     {
        //         "message": "Cancel order request received.",
        //         "order_id": "d36e7588-6525-485c-b768-8ad8b3f745f9",
        //         "timestamp": "2023-10-26T14:36:37.559Z"
        //     }
        //
        return this.parseOrder(response);
    }

    public async virtual Task<object> cancelOrders(object ids, object symbol = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#cancelOrders
        * @description cancel multiple orders
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#cancel-specific-orders
        * @param {string[]} ids order ids
        * @param {string} symbol not used by coinlist cancelOrders ()
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        parameters = ids;
        object response = await this.privateDeleteV1OrdersBulk(parameters);
        return response;
    }

    public async override Task<object> createOrder(object symbol, object type, object side, object amount, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#createOrder
        * @description create a trade order
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#create-new-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit' or 'stop_market' or 'stop_limit' or 'take_market' or 'take_limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {bool} [params.postOnly] if true, the order will only be posted to the order book and not executed immediately (default false)
        * @param {float} [params.triggerPrice] only for the 'stop_market', 'stop_limit', 'take_market' or 'take_limit' orders (the price at which an order is triggered)
        * @param {string} [params.clientOrderId] client order id (default undefined)
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "type", type },
            { "side", side },
            { "size", this.amountToPrecision(symbol, amount) },
        };
        object isMarket = false;
        if (isTrue(isTrue(isTrue((isEqual(type, "limit"))) || isTrue((isEqual(type, "stop_limit")))) || isTrue((isEqual(type, "take_limit")))))
        {
            if (isTrue(isEqual(price, null)))
            {
                throw new ArgumentsRequired ((string)add(add(add(this.id, " createOrder() requires a price argument for a "), type), " order")) ;
            }
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        } else
        {
            isMarket = true;
        }
        object postOnly = null;
        var postOnlyparametersVariable = this.handlePostOnly(isMarket, false, parameters);
        postOnly = ((IList<object>)postOnlyparametersVariable)[0];
        parameters = ((IList<object>)postOnlyparametersVariable)[1];
        if (isTrue(postOnly))
        {
            ((IDictionary<string,object>)request)["post_only"] = true;
        }
        object triggerPrice = this.safeNumberN(parameters, new List<object>() {"triggerPrice", "trigger_price", "stopPrice", "stop_price"});
        if (isTrue(!isEqual(triggerPrice, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"triggerPrice", "trigger_price", "stopPrice"});
            ((IDictionary<string,object>)request)["stop_price"] = this.priceToPrecision(symbol, triggerPrice);
            if (isTrue(isEqual(type, "market")))
            {
                ((IDictionary<string,object>)request)["type"] = "stop_market";
            } else if (isTrue(isEqual(type, "limit")))
            {
                ((IDictionary<string,object>)request)["type"] = "stop_limit";
            }
        } else if (isTrue(isTrue(isTrue(isTrue((isEqual(type, "stop_market"))) || isTrue((isEqual(type, "stop_limit")))) || isTrue((isEqual(type, "take_market")))) || isTrue((isEqual(type, "take_limit")))))
        {
            throw new ArgumentsRequired ((string)add(this.id, " createOrder() requires a stopPrice parameter for stop-loss and take-profit orders")) ;
        }
        object clientOrderId = this.safeString2(parameters, "clientOrderId", "client_id");
        if (isTrue(!isEqual(clientOrderId, null)))
        {
            ((IDictionary<string,object>)request)["client_id"] = clientOrderId;
            parameters = this.omit(parameters, new List<object>() {"clientOrderId", "client_id"});
        }
        object response = await this.privatePostV1Orders(this.extend(request, parameters));
        //
        //     {
        //         "message": "New order request received.",
        //         "order": {
        //             "symbol": "BTC-USDT",
        //             "type": "market",
        //             "side": "sell",
        //             "size": "0.0003",
        //             "order_id": "cad67c0f-9aec-4ac8-ac03-aaf5db299ff7",
        //             "trader_id": "9c6f737e-a829-4843-87b1-b1ce86f2853b"
        //         },
        //         "timestamp": "2023-10-26T11:30:55.376Z"
        //     }
        //
        object order = this.safeDict(response, "order", new Dictionary<string, object>() {});
        return this.parseOrder(order, market);
    }

    public async override Task<object> editOrder(object id, object symbol, object type, object side, object amount = null, object price = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#editOrder
        * @description create a trade order
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#modify-existing-order
        * @param {string} symbol unified symbol of the market to create an order in
        * @param {string} type 'market' or 'limit' or 'stop_market' or 'stop_limit' or 'take_market' or 'take_limit'
        * @param {string} side 'buy' or 'sell'
        * @param {float} amount how much of currency you want to trade in units of base currency
        * @param {float} [price] the price at which the order is to be fullfilled, in units of the quote currency, ignored in market orders
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(isEqual(amount, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " editOrder() requires an amount argument")) ;
        }
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "order_id", id },
            { "type", type },
            { "side", side },
            { "size", this.amountToPrecision(symbol, amount) },
        };
        if (isTrue(!isEqual(price, null)))
        {
            ((IDictionary<string,object>)request)["price"] = this.priceToPrecision(symbol, price);
        }
        object response = await this.privatePatchV1OrdersOrderId(this.extend(request, parameters));
        return this.parseOrder(response, market);
    }

    public override object parseOrder(object order, object market = null)
    {
        //
        // fetchOrder
        //     {
        //         "order_id": "913ea6e7-9fc9-43fb-9db1-f195d3baa93f",
        //         "price": "35800.00000000",
        //         "stop_price":null,
        //         "cost": "0.00000000",
        //         "fill_fees": "0.00000000",
        //         "trader_id": "9c6f737e-a829-4843-87b1-b1ce86f2853b",
        //         "status": "canceled",
        //         "epoch_timestamp": "2023-10-26T08:20:56.307Z",
        //         "origin": "web",
        //         "self_trade_prevention":null,
        //         "client_id":null,
        //         "symbol": "BTC-USDT",
        //         "size": "0.0003",
        //         "side": "sell",
        //         "type": "limit",
        //         "post_only":false,
        //         "size_filled": "0.0000"
        //     }
        //
        // fetchOrders
        //     {
        //         "order_id":"913ea6e7-9fc9-43fb-9db1-f195d3baa93f",
        //         "price":"35800.00000000",
        //         "stop_price":null,
        //         "cost":"0.00000000",
        //         "fill_fees":"0.00000000",
        //         "trader_id":"9c6f737e-a829-4843-87b1-b1ce86f2853b",
        //         "status":"accepted",
        //         "epoch_timestamp":"2023-10-26T08:20:56.307Z",
        //         "origin":"web",
        //         "self_trade_prevention":null,
        //         "client_id":null,
        //         "created_at":"2023-10-26T08:20:56.307Z",
        //         "symbol":"BTC-USDT",
        //         "size":"0.0003",
        //         "side":"sell",
        //         "type":"limit",
        //         "post_only":false,
        //         "size_filled":"0.0000"
        //     }
        //
        // createOrder
        //     {
        //         "symbol": "BTC-USDT",
        //         "type": "market",
        //         "side": "sell",
        //         "size": "0.0003",
        //         "order_id": "cad67c0f-9aec-4ac8-ac03-aaf5db299ff7",
        //         "trader_id": "9c6f737e-a829-4843-87b1-b1ce86f2853b"
        //     },
        //
        // cancelOrder
        //     {
        //         "message": "Cancel order request received.",
        //         "order_id": "d36e7588-6525-485c-b768-8ad8b3f745f9",
        //         "timestamp": "2023-10-26T14:36:37.559Z"
        //     }
        //
        // cancelOrders
        //     {
        //         "message": "Order cancellation request received.",
        //         "timestamp": "2023-10-26T10:29:28.652Z"
        //     }
        //
        // cancelAllOrders
        //     {
        //         "message": "Order cancellation request received.",
        //         "timestamp": "2023-10-26T10:29:28.652Z"
        //     }
        //
        object id = this.safeString(order, "order_id");
        object marketId = this.safeString(order, "symbol");
        market = this.safeMarket(marketId, market);
        object clientOrderId = this.safeString(order, "client_id");
        object timestampString = this.safeString2(order, "created_at", "epoch_timestamp");
        if (isTrue(isEqual(timestampString, null)))
        {
            timestampString = this.safeString(order, "timestamp");
        }
        object timestamp = this.parse8601(timestampString);
        object status = this.parseOrderStatus(this.safeString(order, "status"));
        object type = this.parseOrderType(this.safeString(order, "type"));
        object side = this.safeString(order, "side");
        object price = this.safeString(order, "price");
        object stopPrice = this.safeString(order, "stop_price");
        object average = this.safeString(order, "average_fill_price"); // from documentation
        object amount = this.safeString(order, "size");
        object filled = this.safeString(order, "size_filled");
        object feeCost = this.safeString(order, "fill_fees");
        object postOnly = this.safeValue(order, "post_only");
        object fee = null;
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "currency", getValue(market, "quote") },
                { "cost", feeCost },
                { "rate", null },
            };
        }
        return this.safeOrder(new Dictionary<string, object>() {
            { "id", id },
            { "clientOrderId", clientOrderId },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "lastTradeTimestamp", null },
            { "status", status },
            { "symbol", getValue(market, "symbol") },
            { "type", type },
            { "timeInForce", "GTC" },
            { "side", side },
            { "price", price },
            { "stopPrice", stopPrice },
            { "triggerPrice", stopPrice },
            { "average", average },
            { "amount", amount },
            { "cost", null },
            { "filled", filled },
            { "remaining", null },
            { "fee", fee },
            { "trades", null },
            { "info", order },
            { "postOnly", postOnly },
        }, market);
    }

    public virtual object parseOrderStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "pending", "open" },
            { "accepted", "open" },
            { "rejected", "rejected" },
            { "done", "closed" },
            { "canceled", "canceled" },
        };
        return this.safeString(statuses, status, status);
    }

    public virtual object parseOrderType(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "market", "market" },
            { "limit", "limit" },
            { "stop_market", "market" },
            { "stop_limit", "limit" },
            { "take_market", "market" },
            { "take_limit", "limit" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> transfer(object code, object amount, object fromAccount, object toAccount, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#transfer
        * @description transfer currency internally between wallets on the same account
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#transfer-funds-between-entities
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#transfer-funds-from-wallet-to-pro
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#transfer-funds-from-pro-to-wallet
        * @param {string} code unified currency code
        * @param {float} amount amount to transfer
        * @param {string} fromAccount account to transfer from
        * @param {string} toAccount account to transfer to
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transfer structure]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        amount = this.currencyToPrecision(code, amount);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", amount },
        };
        object accountsByType = this.safeValue(this.options, "accountsByType", new Dictionary<string, object>() {});
        object fromAcc = this.safeString(accountsByType, fromAccount, fromAccount);
        object toAcc = this.safeString(accountsByType, toAccount, toAccount);
        object response = null;
        if (isTrue(isTrue((isEqual(fromAcc, "funding"))) && isTrue((isEqual(toAcc, "trading")))))
        {
            response = await this.privatePostV1TransfersFromWallet(this.extend(request, parameters));
        } else if (isTrue(isTrue((isEqual(fromAcc, "trading"))) && isTrue((isEqual(toAcc, "funding")))))
        {
            response = await this.privatePostV1TransfersToWallet(this.extend(request, parameters));
        } else
        {
            ((IDictionary<string,object>)request)["from_trader_id"] = fromAcc;
            ((IDictionary<string,object>)request)["to_trader_id"] = toAcc;
            response = await this.privatePostV1TransfersInternalTransfer(this.extend(request, parameters));
        }
        //
        // privatePostV1TransfersInternalTransfer
        //     {
        //         "from_trader_id": "1f494ace-b3ed-4324-b202-55526ed06381",
        //         "to_trader_id": "d32c7a40-cc24-44b0-8597-f9edb3da989f",
        //         "asset": "string",
        //         "amount": "string"
        //     }
        //
        // privatePostV1TransfersFromWallet, privatePostV1TransfersToWallet
        //     {
        //         "transfer_id": "bb34f528-d9b0-47c6-b11f-4d4840b86ee3"
        //     }
        //
        object transfer = this.parseTransfer(response, currency);
        return transfer;
    }

    public async virtual Task<object> fetchTransfers(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchTransfers
        * @description fetch a history of internal transfers between CoinList.co and CoinList Pro. It does not return external deposits or withdrawals
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#list-transfers
        * @param {string} code unified currency code
        * @param {int} [since] the earliest time in ms to fetch transfers for
        * @param {int} [limit] the maximum number of transfer structures to retrieve (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {object[]} a list of [transfer structures]{@link https://docs.ccxt.com/#/?id=transfer-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        object request = new Dictionary<string, object>() {};
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_time"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_time"] = this.iso8601(until);
        }
        object response = await this.privateGetV1Transfers(this.extend(request, parameters));
        //
        //     {
        //         "transfers": [
        //             {
        //                 "transfer_id": "2c02db25-e8f2-4271-8222-e110bfd0aa2a",
        //                 "created_at": "2023-10-20T13:15:37.000Z",
        //                 "confirmed_at": "2023-10-20T13:15:37.000Z",
        //                 "asset": "ETH",
        //                 "amount": "0.010000000000000000",
        //                 "status": "confirmed"
        //             },
        //             {
        //                 "transfer_id": "890694db-156c-4e93-a3ef-4db61685aca7",
        //                 "created_at": "2023-10-26T14:32:22.000Z",
        //                 "confirmed_at": "2023-10-26T14:32:22.000Z",
        //                 "asset": "USD",
        //                 "amount": "-3.00",
        //                 "status": "confirmed"
        //             }
        //         ]
        //     }
        //
        object transfers = this.safeList(response, "transfers", new List<object>() {});
        return this.parseTransfers(transfers, currency, since, limit);
    }

    public override object parseTransfer(object transfer, object currency = null)
    {
        //
        // fetchTransfers
        //     {
        //         "transfer_id": "890694db-156c-4e93-a3ef-4db61685aca7",
        //         "created_at": "2023-10-26T14:32:22.000Z",
        //         "confirmed_at": "2023-10-26T14:32:22.000Z",
        //         "asset": "USD",
        //         "amount": "-3.00",
        //         "status": "confirmed"
        //     }
        //
        // transfer - privatePostV1TransfersInternalTransfer
        //     {
        //         "from_trader_id": "1f494ace-b3ed-4324-b202-55526ed06381",
        //         "to_trader_id": "d32c7a40-cc24-44b0-8597-f9edb3da989f",
        //         "asset": "string",
        //         "amount": "string"
        //     }
        //
        // transfer - privatePostV1TransfersFromWallet, privatePostV1TransfersToWallet
        //     {
        //         "transfer_id": "bb34f528-d9b0-47c6-b11f-4d4840b86ee3"
        //     }
        //
        object currencyId = this.safeString(transfer, "asset");
        object confirmedAt = this.safeString(transfer, "confirmed_at");
        object timetstamp = this.parse8601(confirmedAt);
        object status = this.safeString(transfer, "status");
        object amountString = this.safeString(transfer, "amount");
        object fromAccount = null;
        object toAccount = null;
        object amount = null;
        if (isTrue(!isEqual(amountString, null)))
        {
            object amountIsNegative = Precise.stringLt(amountString, "0");
            if (isTrue(amountIsNegative))
            {
                fromAccount = "trading";
                toAccount = "funding";
                amountString = Precise.stringNeg(amountString);
            } else
            {
                fromAccount = "funding";
                toAccount = "trading";
            }
            amount = this.parseNumber(amountString);
        }
        return new Dictionary<string, object>() {
            { "info", transfer },
            { "id", this.safeString(transfer, "transfer_id") },
            { "timestamp", timetstamp },
            { "datetime", this.iso8601(timetstamp) },
            { "currency", this.safeCurrencyCode(currencyId, currency) },
            { "amount", amount },
            { "fromAccount", fromAccount },
            { "toAccount", toAccount },
            { "status", this.parseTransferStatus(status) },
        };
    }

    public virtual object parseTransferStatus(object status)
    {
        object statuses = new Dictionary<string, object>() {
            { "confirmed", "ok" },
        };
        return this.safeString(statuses, status, status);
    }

    public async override Task<object> fetchDepositsWithdrawals(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchDepositsWithdrawals
        * @description fetch history of deposits and withdrawals from external wallets and between CoinList Pro trading account and CoinList wallet
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-coinlist-wallet-ledger
        * @param {string} [code] unified currency code for the currency of the deposit/withdrawals
        * @param {int} [since] timestamp in ms of the earliest deposit/withdrawal
        * @param {int} [limit] max number of deposit/withdrawals to return (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a list of [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        if (isTrue(isEqual(code, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchDepositsWithdrawals() requires a code argument")) ;
        }
        object traderId = this.safeString2(parameters, "trader_id", "traderId");
        if (isTrue(isEqual(traderId, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchDepositsWithdrawals() requires a traderId argument in the params")) ;
        }
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "trader_id", traderId },
        };
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        parameters = this.omit(parameters, new List<object>() {"trader_id", "traderId"});
        object response = await this.privateGetV1AccountsTraderIdWalletLedger(this.extend(request, parameters));
        //
        //     [
        //         {
        //             "id": "2c02db25-e8f2-4271-8222-e110bfd0aa2a",
        //             "asset": "ETH",
        //             "amount": "0.01",
        //             "created_at": "2023-10-20T13:15:37.000Z",
        //             "description": "Transfer to CoinList Pro",
        //             "type": "PRO_TRANSFER",
        //             "delta": "-0.010000000000000000"
        //         },
        //         {
        //             "id": "7139384d-6cec-479e-a19c-d498647ccb47",
        //             "asset": "ETH",
        //             "amount": "0.01",
        //             "created_at": "2023-10-20T13:10:55.000Z",
        //             "description": "CRYPTO_DEPOSIT",
        //             "type": "CRYPTO_DEPOSIT",
        //             "delta": "0.010000000000000000"
        //         },
        //
        //         ...
        //
        //         {
        //             "id": "91bbbb22-5ede-4e9a-81ef-3f9318aa83d2",
        //             "asset": "USDT",
        //             "amount": "4.169654",
        //             "withdrawal_fee_amount": "8.830346000000000000",
        //             "created_at": "2023-10-27T16:14:11.000Z",
        //             "description": "CRYPTO_WITHDRAWAL",
        //             "type": "CRYPTO_WITHDRAWAL",
        //             "delta": "-4.169654000000000000"
        //         },
        //         {
        //             "id": "830261bd-cda9-401f-b6df-105f4da3b37c",
        //             "asset": "USDT",
        //             "amount": "13",
        //             "created_at": "2023-10-27T14:52:05.000Z",
        //             "description": "Transfer from CoinList Pro",
        //             "type": "PRO_TRANSFER",
        //             "delta": "13.000000000000000000"
        //         }
        //     ]
        //
        // coinlist returns both internal transfers and blockchain transactions
        return this.parseTransactions(response, currency, since, limit);
    }

    public async override Task<object> withdraw(object code, object amount, object address, object tag = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#withdraw
        * @description request a withdrawal from CoinList wallet. (Disabled by default. Contact CoinList to apply for an exception.)
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#request-withdrawal-from-wallet
        * @param {string} code unified currency code
        * @param {float} amount the amount to withdraw
        * @param {string} address the address to withdraw to
        * @param {string} tag
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [transaction structure]{@link https://docs.ccxt.com/#/?id=transaction-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object currency = this.currency(code);
        object request = new Dictionary<string, object>() {
            { "asset", getValue(currency, "id") },
            { "amount", this.currencyToPrecision(code, amount) },
            { "destination_address", address },
        };
        object response = await this.privatePostV1TransfersWithdrawalRequest(this.extend(request, parameters));
        //
        //     {
        //         "transfer_id": "d4a2d8dd-7def-4545-a062-761683b9aa05"
        //     }
        //
        object data = this.safeDict(response, "data", new Dictionary<string, object>() {});
        return this.parseTransaction(data, currency);
    }

    public override object parseTransaction(object transaction, object currency = null)
    {
        // withdraw
        //
        //     {
        //         "transfer_id": "d4a2d8dd-7def-4545-a062-761683b9aa05"
        //     }
        //
        // fetchDepositsWithdrawals
        //     {
        //         "id": "91bbbb22-5ede-4e9a-81ef-3f9318aa83d2",
        //         "asset": "USDT",
        //         "amount": "4.169654",
        //         "withdrawal_fee_amount": "8.830346000000000000",
        //         "created_at": "2023-10-27T16:14:11.000Z",
        //         "description": "CRYPTO_WITHDRAWAL",
        //         "type": "CRYPTO_WITHDRAWAL",
        //         "delta": "-4.169654000000000000"
        //     },
        //
        object currencyId = this.safeString(transaction, "asset");
        object code = this.safeCurrencyCode(currencyId, currency);
        object id = this.safeString2(transaction, "id", "transfer_id");
        object amount = this.safeNumber(transaction, "amount");
        object timestamp = this.parse8601(this.safeString(transaction, "created_at"));
        object type = this.safeString(transaction, "type", null);
        if (isTrue(isEqual(type, null)))
        {
            type = "withdrawal"; // undefined only in withdraw() method
        } else
        {
            type = this.parseTransactionType(type);
        }
        object fee = null;
        object feeCost = this.safeString(transaction, "withdrawal_fee_amount");
        if (isTrue(!isEqual(feeCost, null)))
        {
            fee = new Dictionary<string, object>() {
                { "cost", feeCost },
                { "currency", code },
            };
        }
        return new Dictionary<string, object>() {
            { "info", transaction },
            { "id", id },
            { "txid", null },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "network", null },
            { "addressFrom", null },
            { "address", null },
            { "addressTo", null },
            { "tagFrom", null },
            { "tag", null },
            { "tagTo", null },
            { "type", type },
            { "amount", amount },
            { "currency", code },
            { "status", null },
            { "updated", null },
            { "fee", fee },
            { "comment", this.safeString(transaction, "description") },
            { "internal", null },
        };
    }

    public virtual object parseTransactionType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "CRYPTO_DEPOSIT", "deposit" },
            { "CRYPTO_WITHDRAWAL", "withdrawal" },
            { "PRO_TRANSFER", "transfer" },
        };
        return this.safeString(types, type, type);
    }

    public async override Task<object> fetchLedger(object code = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name coinlist#fetchLedger
        * @description fetch the history of changes, actions done by the user or operations that altered balance of the user
        * @see https://trade-docs.coinlist.co/?javascript--nodejs#get-account-history
        * @param {string} code unified currency code, default is undefined
        * @param {int} [since] timestamp in ms of the earliest ledger entry, default is undefined
        * @param {int} [limit] max number of ledger entrys to return (default 200, max 500)
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @param {int} [params.until] the latest time in ms to fetch entries for
        * @returns {object} a [ledger structure]{@link https://docs.ccxt.com/#/?id=ledger-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object traderId = this.safeString2(parameters, "trader_id", "traderId");
        if (isTrue(isEqual(traderId, null)))
        {
            throw new ArgumentsRequired ((string)add(this.id, " fetchLedger() requires a traderId argument in the params")) ;
        }
        await this.loadMarkets();
        object request = new Dictionary<string, object>() {
            { "trader_id", traderId },
        };
        object currency = null;
        if (isTrue(!isEqual(code, null)))
        {
            currency = this.currency(code);
        }
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["start_time"] = this.iso8601(since);
        }
        if (isTrue(!isEqual(limit, null)))
        {
            ((IDictionary<string,object>)request)["count"] = limit;
        }
        object until = this.safeInteger(parameters, "until");
        if (isTrue(!isEqual(until, null)))
        {
            parameters = this.omit(parameters, new List<object>() {"until"});
            ((IDictionary<string,object>)request)["end_time"] = this.iso8601(until);
        }
        parameters = this.omit(parameters, new List<object>() {"trader_id", "traderId"});
        object response = await this.privateGetV1AccountsTraderIdLedger(this.extend(request, parameters));
        //
        //     {
        //         "transactions": [
        //             {
        //                 "transaction_id": "0288634e-49bd-494d-b04a-18fd1832d394",
        //                 "transaction_type": "XFER",
        //                 "type": "deposit",
        //                 "asset": "ETH",
        //                 "symbol": null,
        //                 "amount": "0.010000000000000000",
        //                 "details": null,
        //                 "created_at": "2023-10-20T13:15:39.443Z"
        //             },
        //             {
        //                 "transaction_id": "47a45928-abcd-4c12-8bd6-587c3028025f",
        //                 "transaction_type": "SWAP",
        //                 "type": "atomic token swap",
        //                 "asset": "USDT",
        //                 "symbol": "ETH-USDT",
        //                 "amount": "1.447947",
        //                 "details": null,
        //                 "created_at": "2023-10-20T13:16:30.373Z"
        //             },
        //             {
        //                 "transaction_id": "1ffe3a54-916e-41f0-b957-3a01309eb009",
        //                 "transaction_type": "FEE",
        //                 "type": "fee",
        //                 "asset": "USDT",
        //                 "symbol": "ETH-USDT",
        //                 "amount": "-0.006516",
        //                 "details": {
        //                     "fee_details": [
        //                         {
        //                             "insurance_fee": "0",
        //                             "order_id": "39911d5f-c789-4a7d-ad34-820a804d1da6",
        //                             "fee_type": "taker",
        //                             "fee_currency": "USDT"
        //                         }
        //                     ]
        //                 },
        //                 "created_at": "2023-10-20T13:16:30.373Z"
        //             },
        //             {
        //                 "transaction_id": "3930e8a3-2218-481f-8c3c-2219287e205e",
        //                 "transaction_type": "SWAP",
        //                 "type": "atomic token swap",
        //                 "asset": "ETH",
        //                 "symbol": "ETH-USDT",
        //                 "amount": "-0.000900000000000000",
        //                 "details": null,
        //                 "created_at": "2023-10-20T13:16:30.373Z"
        //             },
        //             {
        //                 "transaction_id": "a6c65cb3-95d0-44e2-8202-f70581d6e55c",
        //                 "transaction_type": "XFER",
        //                 "type": "withdrawal",
        //                 "asset": "USD",
        //                 "symbol": null,
        //                 "amount": "-3.00",
        //                 "details": null,
        //                 "created_at": "2023-10-26T14:32:24.887Z"
        //             }
        //         ]
        //     }
        //
        object ledger = this.safeValue(response, "transactions", new List<object>() {});
        return this.parseLedger(ledger, currency, since, limit);
    }

    public override object parseLedgerEntry(object item, object currency = null)
    {
        //
        // deposit transaction from wallet (funding) to pro (trading)
        //     {
        //         "transaction_id": "0288634e-49bd-494d-b04a-18fd1832d394",
        //         "transaction_type": "XFER",
        //         "type": "deposit",
        //         "asset": "ETH",
        //         "symbol": null,
        //         "amount": "0.010000000000000000",
        //         "details": null,
        //         "created_at": "2023-10-20T13:15:39.443Z"
        //     }
        //
        // withdrawal transaction from pro (trading) to wallet (funding)
        //     {
        //         "transaction_id": "a6c65cb3-95d0-44e2-8202-f70581d6e55c",
        //         "transaction_type": "XFER",
        //         "type": "withdrawal",
        //         "asset": "USD",
        //         "symbol": null,
        //         "amount": "-3.00",
        //         "details": null,
        //         "created_at": "2023-10-26T14:32:24.887Z"
        //     }
        //
        // sell trade
        //     {
        //         "transaction_id": "47a45928-abcd-4c12-8bd6-587c3028025f",
        //         "transaction_type": "SWAP",
        //         "type": "atomic token swap",
        //         "asset": "USDT",
        //         "symbol": "ETH-USDT",
        //         "amount": "1.447947",
        //         "details": null,
        //         "created_at": "2023-10-20T13:16:30.373Z"
        //     }
        //
        // buy trade
        //     {
        //         "transaction_id": "46d20a93-45c4-4441-a238-f89602eb8c8c",
        //         "transaction_type": "SWAP",
        //         "type": "atomic token swap",
        //         "asset": "ETH",
        //         "symbol": "ETH-USDT",
        //         "amount": "0.000800000000000000",
        //         "details": null,
        //         "created_at": "2023-10-20T13:22:14.256Z"
        //     },
        //
        //  fee
        //     {
        //         "transaction_id": "57fd526c-36b1-4721-83ce-42aadcb1e953",
        //         "transaction_type": "FEE",
        //         "type": "fee",
        //         "asset": "USDT",
        //         "symbol": "BTC-USDT",
        //         "amount": "-0.047176",
        //         "details": {
        //             "fee_details": [
        //                 {
        //                     "insurance_fee": "0",
        //                     "order_id": "c0bc33cd-eeb9-40a0-ab5f-2d99f323ef58",
        //                     "fee_type": "taker",
        //                     "fee_currency": "USDT"
        //                 }
        //             ]
        //         },
        //         "created_at": "2023-10-25T16:46:24.294Z"
        //     }
        //
        object id = this.safeString(item, "transaction_id");
        object createdAt = this.safeString(item, "created_at");
        object timestamp = this.parse8601(createdAt);
        object amount = this.safeString(item, "amount");
        object amountIsNegative = Precise.stringLt(amount, "0");
        object direction = null;
        if (isTrue(amountIsNegative))
        {
            direction = "out";
            amount = Precise.stringNeg(amount);
        } else
        {
            direction = "in";
        }
        object currencyId = this.safeString(item, "asset");
        object code = this.safeCurrencyCode(currencyId, currency);
        object type = this.parseLedgerEntryType(this.safeString(item, "type"));
        return new Dictionary<string, object>() {
            { "info", item },
            { "id", id },
            { "timestamp", timestamp },
            { "datetime", this.iso8601(timestamp) },
            { "direction", direction },
            { "account", "trading" },
            { "referenceId", null },
            { "referenceAccount", null },
            { "type", type },
            { "currency", code },
            { "amount", this.parseNumber(amount) },
            { "before", null },
            { "after", null },
            { "status", "ok" },
            { "fee", null },
        };
    }

    public virtual object parseLedgerEntryType(object type)
    {
        object types = new Dictionary<string, object>() {
            { "atomic token swap", "trade" },
            { "fee", "fee" },
            { "deposit", "transfer" },
            { "withdrawal", "transfer" },
        };
        return this.safeString(types, type, type);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object request = this.omit(parameters, this.extractParams(path));
        object endpoint = add("/", this.implodeParams(path, parameters));
        object url = add(getValue(getValue(this.urls, "api"), api), endpoint);
        object query = this.urlencode(request);
        if (isTrue(isEqual(api, "private")))
        {
            this.checkRequiredCredentials();
            object timestamp = ((object)this.seconds()).ToString();
            object auth = add(add(timestamp, method), endpoint);
            object isBulk = ((parameters is IList<object>) || (parameters.GetType().IsGenericType && parameters.GetType().GetGenericTypeDefinition().IsAssignableFrom(typeof(List<>))));
            if (isTrue(isTrue(isTrue((isEqual(method, "POST"))) || isTrue((isEqual(method, "PATCH")))) || isTrue(isBulk)))
            {
                body = this.json(request);
                auth = add(auth, body);
            } else if (isTrue(!isEqual(getArrayLength(query), 0)))
            {
                auth = add(auth, add("?", query));
                url = add(url, add("?", query));
            }
            object signature = this.hmac(this.encode(auth), this.base64ToBinary(this.secret), sha256, "base64");
            headers = new Dictionary<string, object>() {
                { "CL-ACCESS-KEY", this.apiKey },
                { "CL-ACCESS-SIG", signature },
                { "CL-ACCESS-TIMESTAMP", timestamp },
                { "Content-Type", "application/json" },
            };
        } else if (isTrue(!isEqual(getArrayLength(query), 0)))
        {
            url = add(url, add("?", query));
        }
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }

    public override object handleErrors(object code, object reason, object url, object method, object headers, object body, object response, object requestHeaders, object requestBody)
    {
        if (isTrue(isEqual(response, null)))
        {
            // In some cases the exchange returns 202 Accepted for bad orders.
            // The body of that response contains order_id of the order.
            // Some bad orders will get status 'rejected' and could be fetched later (by using fetchOrders() or fetchOrder(order_id)).
            // While others don't get any status, they simply disappear, but the response is still 202 Accepted and contains their order_id.
            // When using fechOrder(order_id) for such disappeared orders, the exchange returns an empty response with code 404.
            if (isTrue(isTrue(isTrue((isEqual(code, 404))) && isTrue((isGreaterThanOrEqual(getIndexOf(url, "/orders/"), 0)))) && isTrue((isEqual(method, "GET")))))
            {
                object parts = ((string)url).Split(new [] {((string)"/orders/")}, StringSplitOptions.None).ToList<object>();
                object orderId = this.safeString(parts, 1);
                throw new OrderNotFound ((string)add(add(add(this.id, " order "), orderId), " not found (or rejected on the exchange side)")) ;
            }
            return null;
        }
        object responseCode = this.safeString(response, "status");
        object messageCode = this.safeString(response, "message_code");
        if (isTrue(isTrue((!isEqual(messageCode, null))) || isTrue((isTrue(isTrue(isTrue(isTrue((!isEqual(responseCode, null))) && isTrue((!isEqual(code, 200)))) && isTrue((!isEqual(code, 202)))) && isTrue((!isEqual(responseCode, "200")))) && isTrue((!isEqual(responseCode, "202")))))))
        {
            object feedback = add(add(this.id, " "), body);
            object message = this.safeString(response, "message");
            this.throwBroadlyMatchedException(getValue(this.exceptions, "broad"), message, feedback);
            this.throwExactlyMatchedException(getValue(this.exceptions, "exact"), messageCode, feedback);
            throw new ExchangeError ((string)feedback) ;
        }
        return null;
    }
}
