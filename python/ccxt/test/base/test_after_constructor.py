import os
import sys

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
sys.path.append(root)

# ----------------------------------------------------------------------------

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

# ----------------------------------------------------------------------------
# -*- coding: utf-8 -*-

import ccxt  # noqa: F402
from ccxt.test.exchange.base import test_shared_methods  # noqa E402

def test_after_constructor():
    exchange = ccxt.Exchange({
        'id': 'sampleexchange',
        'rateLimit': 10.8,
    })
    # todo: assert (exchange.MAX_VALUE !== undefined);
    # ############# throttler ############# #
    tocken_bucket = exchange.get_property(exchange, 'tokenBucket')  # trick for uncamelcase transpilation
    rate_limit = exchange.get_property(exchange, 'rateLimit')
    assert rate_limit == 10.8
    assert tocken_bucket is not None
    assert tocken_bucket['delay'] == 0.001
    assert tocken_bucket['refillRate'] == 1 / rate_limit
    # fix decimal/integer issues across langs
    assert exchange.in_array(tocken_bucket['capacity'], [1, 1])
    assert exchange.in_array(tocken_bucket['cost'], [1, 1])
    assert exchange.in_array(tocken_bucket['maxCapacity'], [1000, 1000])
    # todo: assert (exchange.throttler !== undefined);
    # todo: add after change assertion
    # todo: add initial tockenbtucket test
    # ############# markets ############# #
    sample_market = {
        'id': 'BtcUsd',
        'symbol': 'BTC/USD',
        'base': 'BTC',
        'quote': 'USD',
        'baseId': 'Btc',
        'quoteId': 'Usd',
        'type': 'spot',
        'spot': True,
    }
    exchange2 = ccxt.Exchange({
        'id': 'sampleexchange',
        'markets': {
            'BTC/USD': sample_market,
        },
    })
    assert exchange2.markets['BTC/USD'] is not None
    assert 'GO_SKIP_START'
    try:
        exchange3 = ccxt.Exchange({
            'id': 'sampleexchange',
            'options': {
                'sandbox': True,
            },
        })
        # todo: some extra things should be checked in "catch" but atm skip complexity
        assert exchange3.urls is not None
        assert exchange3.urls['test'] is not None
        is_sandbox_mode_enabled = exchange3.get_property(exchange3, 'isSandboxModeEnabled')
        assert is_sandbox_mode_enabled
    except Exception as e:
        exchange3 = ccxt.Exchange({
            'id': 'sampleexchange',
        })
        # if exception was thrown, it should only happen if 'test' was not in urls
        assert exchange3.urls is None or not ('test' in exchange3.urls)
    assert 'GO_SKIP_END'
