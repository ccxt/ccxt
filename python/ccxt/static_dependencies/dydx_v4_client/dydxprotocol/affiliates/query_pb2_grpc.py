# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from v4_proto.dydxprotocol.affiliates import query_pb2 as dydxprotocol_dot_affiliates_dot_query__pb2


class QueryStub(object):
    """Query defines the gRPC querier service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AffiliateInfo = channel.unary_unary(
                '/dydxprotocol.affiliates.Query/AffiliateInfo',
                request_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateInfoRequest.SerializeToString,
                response_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateInfoResponse.FromString,
                )
        self.ReferredBy = channel.unary_unary(
                '/dydxprotocol.affiliates.Query/ReferredBy',
                request_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.ReferredByRequest.SerializeToString,
                response_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.ReferredByResponse.FromString,
                )
        self.AllAffiliateTiers = channel.unary_unary(
                '/dydxprotocol.affiliates.Query/AllAffiliateTiers',
                request_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.AllAffiliateTiersRequest.SerializeToString,
                response_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.AllAffiliateTiersResponse.FromString,
                )
        self.AffiliateWhitelist = channel.unary_unary(
                '/dydxprotocol.affiliates.Query/AffiliateWhitelist',
                request_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateWhitelistRequest.SerializeToString,
                response_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateWhitelistResponse.FromString,
                )


class QueryServicer(object):
    """Query defines the gRPC querier service.
    """

    def AffiliateInfo(self, request, context):
        """Query AffiliateInfo returns the affiliate info for a given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReferredBy(self, request, context):
        """Query ReferredBy returns the affiliate that referred a given address.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllAffiliateTiers(self, request, context):
        """Query AllAffiliateTiers returns all affiliate tiers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AffiliateWhitelist(self, request, context):
        """Query AffiliateWhitelist returns the affiliate whitelist.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AffiliateInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.AffiliateInfo,
                    request_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateInfoRequest.FromString,
                    response_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateInfoResponse.SerializeToString,
            ),
            'ReferredBy': grpc.unary_unary_rpc_method_handler(
                    servicer.ReferredBy,
                    request_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.ReferredByRequest.FromString,
                    response_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.ReferredByResponse.SerializeToString,
            ),
            'AllAffiliateTiers': grpc.unary_unary_rpc_method_handler(
                    servicer.AllAffiliateTiers,
                    request_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.AllAffiliateTiersRequest.FromString,
                    response_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.AllAffiliateTiersResponse.SerializeToString,
            ),
            'AffiliateWhitelist': grpc.unary_unary_rpc_method_handler(
                    servicer.AffiliateWhitelist,
                    request_deserializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateWhitelistRequest.FromString,
                    response_serializer=dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateWhitelistResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dydxprotocol.affiliates.Query', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Query(object):
    """Query defines the gRPC querier service.
    """

    @staticmethod
    def AffiliateInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.affiliates.Query/AffiliateInfo',
            dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateInfoRequest.SerializeToString,
            dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReferredBy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.affiliates.Query/ReferredBy',
            dydxprotocol_dot_affiliates_dot_query__pb2.ReferredByRequest.SerializeToString,
            dydxprotocol_dot_affiliates_dot_query__pb2.ReferredByResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AllAffiliateTiers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.affiliates.Query/AllAffiliateTiers',
            dydxprotocol_dot_affiliates_dot_query__pb2.AllAffiliateTiersRequest.SerializeToString,
            dydxprotocol_dot_affiliates_dot_query__pb2.AllAffiliateTiersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AffiliateWhitelist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dydxprotocol.affiliates.Query/AffiliateWhitelist',
            dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateWhitelistRequest.SerializeToString,
            dydxprotocol_dot_affiliates_dot_query__pb2.AffiliateWhitelistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
