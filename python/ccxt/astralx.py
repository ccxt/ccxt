# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.base.exchange import Exchange
from ccxt.abstract.astralx import ImplicitAPI
import hashlib
from ccxt.base.types import Any, Currencies, Int, Market, Num, OrderBook, OrderSide, OrderType, Position, Str, Strings, FundingRate, Trade
from typing import List
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.decimal_to_precision import TICK_SIZE
from ccxt.base.precise import Precise


class astralx(Exchange, ImplicitAPI):

    def describe(self) -> Any:
        return self.deep_extend(super(astralx, self).describe(), {
            'id': 'astralx',
            'name': 'Astralx',
            'countries': ['SG'],
            'rateLimit': 100,
            'pro': False,
            'timezone': 'UTC',
            'has': {
                'CORS': None,
                'spot': False,
                'margin': False,
                'swap': True,
                'future': False,
                'option': False,
                'addMargin': False,
                'cancelAllOrders': True,
                'cancelOrder': True,
                'cancelOrders': True,
                'createOrder': True,
                'createStopLimitOrder': False,
                'createStopMarketOrder': False,
                'createStopOrder': False,
                'editOrder': False,
                'fetchBalance': True,
                'fetchBorrowInterest': False,
                'fetchBorrowRateHistories': False,
                'fetchBorrowRateHistory': False,
                'fetchClosedOrders': True,
                'fetchCrossBorrowRate': False,
                'fetchCrossBorrowRates': False,
                'fetchDepositAddress': False,
                'fetchDeposits': False,
                'fetchFundingHistory': True,
                'fetchFundingRate': True,
                'fetchFundingRateHistory': True,
                'fetchFundingRates': False,
                'fetchIndexOHLCV': False,
                'fetchIsolatedBorrowRate': False,
                'fetchIsolatedBorrowRates': False,
                'fetchLeverage': True,
                'fetchLeverageTiers': True,
                'fetchMarkets': True,
                'fetchMarkOHLCV': False,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenInterest': True,
                'fetchOpenInterestHistory': False,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrders': True,
                'fetchPosition': True,
                'fetchPositionHistory': True,
                'fetchPositions': True,
                'fetchPremiumIndexOHLCV': False,
                'fetchTicker': True,
                'fetchTickers': False,
                'fetchTrades': True,
                'fetchTradingFee': False,
                'fetchTradingFees': False,
                'fetchTransfer': True,
                'fetchTransfers': False,
                'fetchWithdrawals': False,
                'reduceMargin': False,
                'setLeverage': True,
                'setMarginMode': False,
                'setPositionMode': False,
                'transfer': False,
                'withdraw': False,
            },
            'urls': {
                'logo': 'https://user-images.githubusercontent.com/1294454/000000000-0000000000000000000000000000000000000000000000000000000000000000.png',
                'api': {
                    'public': 'https://www.astralx.com',
                    'private': 'https://www.astralx.com',
                },
                'www': 'https://www.astralx.com',
                'doc': [
                    'https://docs.astralx.com',
                ],
                'fees': 'https://www.astralx.com/fees',
            },
            'timeframes': {
                '1m': '1m',
                '3m': '3m',
                '5m': '5m',
                '15m': '15m',
                '30m': '30m',
                '1h': '1h',
                '2h': '2h',
                '4h': '4h',
                '6h': '6h',
                '12h': '12h',
                '1d': '1d',
                '1w': '1w',
                '1M': '1M',
            },
            'api': {
                'public': {
                    'get': {
                        'openapi/time': 1,
                        'openapi/symbol': 1,
                        'openapi/quote/depth': 1,
                        'openapi/quote/trades': 1,
                        'openapi/quote/ticker': 1,
                        'openapi/quote/klines': 1,
                        'openapi/contract/fundingRate': 1,
                        'openapi/contract/fundingRate/history': 1,
                        'openapi/quote/openInterest': 1,
                        'openapi/quote/indexPrice': 1,
                        'openapi/quote/markPrice': 1,
                        'openapi/quote/riskLimit': 1,
                        'openapi/quote/insurance': 1,
                        'openapi/quote/liquidationOrders': 1,
                    },
                },
                'private': {
                    'get': {
                        'openapi/contract/account': 1,
                        'openapi/contract/order': 1,
                        'openapi/contract/openOrders': 1,
                        'openapi/contract/order/history': 1,
                        'openapi/contract/myTrades': 1,
                        'openapi/contract/positions': 1,
                        'openapi/contract/position/history': 1,
                        'openapi/contract/asset': 1,
                        'openapi/contract/transfer': 1,
                        'openapi/contract/income': 1,
                        'openapi/contract/leverage': 1,
                        'openapi/contract/forceOrders': 1,
                        'openapi/contract/adlQuantile': 1,
                    },
                    'post': {
                        'openapi/contract/order': 1,
                        'openapi/contract/batchOrders': 1,
                        'openapi/contract/leverage': 1,
                        'openapi/contract/position/margin': 1,
                        'openapi/contract/position/riskLimit': 1,
                    },
                    'delete': {
                        'openapi/contract/order/cancel': 1,
                        'openapi/contract/batchOrders': 1,
                        'openapi/contract/allOpenOrders': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': False,
                    'percentage': True,
                    'taker': self.parse_number('0.0006'),
                    'maker': self.parse_number('0.0002'),
                },
            },
            'requiredCredentials': {
                'apiKey': True,
                'secret': True,
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'exact': {},
                'broad': {},
            },
            'options': {
                'defaultType': 'swap',  # 'swap' for USD-M perpetual contracts
            },
            'features': {
                'swap': {
                    'linear': {
                        'sandbox': False,
                        'createOrder': {
                            'marginMode': False,
                            'triggerPrice': False,
                            'triggerPriceType': {
                                'mark': False,
                                'last': False,
                                'index': False,
                            },
                            'stopLossPrice': False,
                            'takeProfitPrice': False,
                            'attachedStopLossTakeProfit': {
                                'triggerPriceType': {
                                    'last': False,
                                    'mark': False,
                                    'index': False,
                                },
                                'price': False,
                            },
                            'timeInForce': {
                                'GTC': False,
                                'IOC': False,
                                'FOK': False,
                                'PO': False,
                                'GTD': False,
                            },
                            'hedged': False,
                            'trailing': False,
                        },
                        'createOrders': {
                            'max': 5,
                        },
                        'fetchMyTrades': {
                            'marginMode': False,
                            'daysBack': 0,
                            'limit': 0,
                            'untilDays': 0,
                            'symbolRequired': False,
                        },
                        'fetchOrder': {
                            'marginMode': False,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOpenOrders': {
                            'marginMode': False,
                            'limit': 0,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOrders': {
                            'marginMode': False,
                            'limit': 0,
                            'daysBack': 0,
                            'untilDays': 0,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchClosedOrders': {
                            'marginMode': False,
                            'limit': 0,
                            'daysBack': 0,
                            'daysBackCanceled': 0,
                            'untilDays': 0,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOHLCV': {
                            'limit': 0,
                        },
                    },
                    'inverse': {
                        'sandbox': False,
                        'createOrder': {
                            'marginMode': False,
                            'triggerPrice': False,
                            'triggerPriceType': {
                                'mark': False,
                                'last': False,
                                'index': False,
                            },
                            'stopLossPrice': False,
                            'takeProfitPrice': False,
                            'attachedStopLossTakeProfit': {
                                'triggerPriceType': {
                                    'last': False,
                                    'mark': False,
                                    'index': False,
                                },
                                'price': False,
                            },
                            'timeInForce': {
                                'GTC': False,
                                'IOC': False,
                                'FOK': False,
                                'PO': False,
                                'GTD': False,
                            },
                            'hedged': False,
                            'trailing': False,
                        },
                        'createOrders': {
                            'max': 5,
                        },
                        'fetchMyTrades': {
                            'marginMode': False,
                            'daysBack': 0,
                            'limit': 0,
                            'untilDays': 0,
                            'symbolRequired': False,
                        },
                        'fetchOrder': {
                            'marginMode': False,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOpenOrders': {
                            'marginMode': False,
                            'limit': 0,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOrders': {
                            'marginMode': False,
                            'limit': 0,
                            'daysBack': 0,
                            'untilDays': 0,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchClosedOrders': {
                            'marginMode': False,
                            'limit': 0,
                            'daysBack': 0,
                            'daysBackCanceled': 0,
                            'untilDays': 0,
                            'trigger': False,
                            'trailing': False,
                            'symbolRequired': False,
                        },
                        'fetchOHLCV': {
                            'limit': 0,
                        },
                    },
                },
            },
        })

    def fetch_markets(self, params={}) -> List[Market]:
        """
        retrieves data on all markets for astralx
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Market[]: an array of objects representing market data
        """
        response = self.publicGetOpenapiSymbol(params)
        # API直接返回数组，没有'data'字段
        markets = response
        result = []
        for i in range(0, len(markets)):
            market = markets[i]
            category = self.safe_integer(market, 'category')
            # 根据API文档，只处理category=4的swap类型市场
            if category != 4:
                continue
            id = self.safe_string(market, 'symbolId')
            baseId = self.safe_string(market, 'baseTokenId')
            quoteId = self.safe_string(market, 'quoteTokenId')
            # 对于永续合约市场（category=4），使用tokenFutures.displayUnderlyingId作为baseTokenId
            tokenFutures = self.safe_dict(market, 'tokenFutures')
            if tokenFutures is not None:
                displayUnderlyingId = self.safe_string(tokenFutures, 'displayUnderlyingId')
                if displayUnderlyingId is not None:
                    baseId = displayUnderlyingId
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            symbol = base + '/' + quote + ':' + quote
            active = self.safe_value(market, 'canTrade') is True
            # 获取tokenFutures中的合约相关信息
            contractSize = 1  # 默认值
            maxLeverage = None
            minLeverage = None
            leverageLimits = None
            if tokenFutures is not None:
                contractSize = self.safe_number(tokenFutures, 'contractMultiplier', 1)
                maxLeverage = self.safe_number(tokenFutures, 'maxLeverage')
                # 处理杠杆范围
                levers = self.safe_value(tokenFutures, 'levers', [])
                if len(levers) > 0:
                    minLever = None
                    maxLever = None
                    for j in range(0, len(levers)):
                        lever = self.safe_number(levers, j)
                        if lever is not None:
                            if minLever is None or lever < minLever:
                                minLever = lever
                            if maxLever is None or lever > maxLever:
                                maxLever = lever
                    if minLever is not None and maxLever is not None:
                        minLeverage = minLever
                        maxLeverage = maxLever
                        leverageLimits = {
                            'min': minLeverage,
                            'max': maxLeverage,
                        }
            result.append({
                'id': id,
                'symbol': symbol,
                'base': base,
                'quote': quote,
                'baseId': baseId,
                'quoteId': quoteId,
                'active': active,
                'type': 'swap',
                'spot': False,
                'margin': False,
                'swap': True,
                'future': False,
                'option': False,
                'contract': True,
                'settle': quote,
                'settleId': quoteId,
                'contractSize': contractSize,  # 使用API返回的contractMultiplier
                'linear': True,
                'inverse': False,
                'taker': self.parse_number('0.0006'),  # 使用默认费率
                'maker': self.parse_number('0.0002'),  # 使用默认费率
                'percentage': True,
                'tierBased': False,
                'maxLeverage': maxLeverage,  # 添加最大杠杆信息
                'limits': {
                    'amount': {
                        'min': self.safe_number(market, 'minTradeQuantity') * contractSize,
                        'max': None,
                    },
                    'price': {
                        'min': self.safe_number(market, 'minPricePrecision'),
                        'max': None,
                    },
                    'cost': {
                        'min': self.safe_number(market, 'minTradeAmount'),
                        'max': None,
                    },
                    'leverage': leverageLimits,
                },
                'precision': {
                    'amount': self.safe_number(market, 'basePrecision') * contractSize,
                    'price': self.safe_number(market, 'quotePrecision'),
                    'cost': None,
                    'base': None,
                    'quote': None,
                },
                'info': market,
            })
        return result

    def fetch_ticker(self, symbol: str, params={}):
        """
        fetches a price ticker for a trading symbol
        :param str symbol: unified symbol of the market to fetch the ticker for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        response = self.publicGetOpenapiQuoteTicker(params)
        # 根据API测试结果，响应是一个对象，键为交易对ID
        # 需要将市场ID转换为API使用的格式（如AAVEUSDT_PERP -> AAVE_USDT）
        marketIdForTicker = market['id']
        # 如果市场ID包含_PERP后缀，需要转换为下划线格式
        if marketIdForTicker.endswith('_PERP'):
            baseSymbol = marketIdForTicker.replace('_PERP', '')
            # 将AAVEUSDT格式转换为AAVE_USDT格式
            if len(baseSymbol) > 3:
                quoteCurrency = baseSymbol[-4:]  # 取最后4个字符（USDT）
                baseCurrency = baseSymbol[0:-4]  # 取除了USDT之外的部分
                marketIdForTicker = baseCurrency + '_' + quoteCurrency
        ticker = self.safe_value(response, marketIdForTicker, {})
        return self.parse_ticker(ticker, market)

    def parse_ticker(self, ticker, market=None):
        """
        parses a ticker structure from the exchange response
        :param dict ticker: the ticker data from the exchange
        :param dict [market]: the market to which the ticker belongs
        :returns dict: a `ticker structure <https://docs.ccxt.com/#/?id=ticker-structure>`
        """
        # 使用当前时间作为时间戳，因为API返回的数据中可能没有时间戳
        timestamp = self.milliseconds()
        marketId = self.safe_string(ticker, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        last = self.safe_number(ticker, 'lastPrice')
        # 根据API测试结果，ticker数据只包含lastPrice、baseVolume、quoteVolume
        # 其他字段如open、high、low、bid、ask等可能不存在
        baseVolume = self.safe_number(ticker, 'baseVolume')
        quoteVolume = self.safe_number(ticker, 'quoteVolume')
        return self.safe_ticker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': None,  # API可能不提供最高价
            'low': None,   # API可能不提供最低价
            'bid': None,   # API可能不提供买价
            'bidVolume': None,
            'ask': None,   # API可能不提供卖价
            'askVolume': None,
            'vwap': None,
            'open': None,  # API可能不提供开盘价
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,  # 由于缺少开盘价，无法计算涨跌
            'percentage': None,
            'average': None,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market)

    def fetch_order_book(self, symbol: str, limit: Int = None, params={}) -> OrderBook:
        """
        fetches information on open orders with bid(buy) and ask(sell) prices, volumes and other data
        :param str symbol: unified symbol of the market to fetch the order book for
        :param int [limit]: the maximum amount of order book entries to return
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns OrderBook: A dictionary of `order book structures <https://docs.ccxt.com/#/?id=order-book-structure>` indexed by market symbols
        """
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetOpenapiQuoteDepth(self.extend(request, params))
        timestamp = self.safe_integer(response, 'time')
        return self.parse_order_book(response, symbol, timestamp, 'bids', 'asks', 0, 1)

    def fetch_ohlcv(self, symbol: str, timeframe='1m', since: Int = None, limit: Int = None, params={}) -> List[list]:
        """
        fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        :param str symbol: unified symbol of the market to fetch OHLCV data for
        :param str timeframe: the length of time each candle represents
        :param int [since]: timestamp in ms of the earliest candle to fetch
        :param int [limit]: the maximum amount of candles to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns OHLCV[]: A list of candles ordered, open, high, low, close, volume
        """
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
            'interval': self.timeframes[timeframe],
        }
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetOpenapiQuoteKlines(self.extend(request, params))
        # API直接返回K线数据数组，不需要额外的处理
        return self.parse_ohlcvs(response, market, timeframe, since, limit)

    def parse_ohlcv(self, ohlcv, market: Market = None) -> list:
        """
        parses OHLCV data from the exchange response
        :param number[] ohlcv: the OHLCV data from the exchange
        :param dict [market]: the market to which the OHLCV data belongs
        :returns number[]: [timestamp, open, high, low, close, volume]
        """
        return [
            self.safe_integer(ohlcv, 0),
            self.safe_number(ohlcv, 1),
            self.safe_number(ohlcv, 2),
            self.safe_number(ohlcv, 3),
            self.safe_number(ohlcv, 4),
            self.safe_number(ohlcv, 5),
        ]

    def fetch_time(self, params={}):
        """
        fetches the current integer timestamp in milliseconds from the exchange server
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns int: the current integer timestamp in milliseconds from the exchange server
        """
        response = self.publicGetOpenapiTime(params)
        return self.safe_integer(response, 'serverTime')

    def fetch_funding_rate(self, symbol: str, params={}) -> FundingRate:
        """
        fetches the current funding rate
        :param str symbol: unified symbol of the market to fetch the funding rate for
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `funding rate structure <https://docs.ccxt.com/#/?id=funding-rate-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        response = self.publicGetOpenapiContractFundingRate(self.extend(request, params))
        # API直接返回资金费率数组，取第一个元素
        fundingRateData = self.safe_value(response, 0, {})
        return self.parse_funding_rate(fundingRateData, market)

    def parse_funding_rate(self, contract, market=None):
        """
        parses a funding rate structure from the exchange response
        :param dict contract: the funding rate data from the exchange
        :param dict [market]: the market to which the funding rate belongs
        :returns dict: a `funding rate structure <https://docs.ccxt.com/#/?id=funding-rate-structure>`
        """
        marketId = self.safe_string(contract, 'symbol')
        symbol = self.safe_symbol(marketId, market)
        fundingRate = self.safe_number(contract, 'rate')  # API返回的是rate字段
        intervalStart = self.safe_integer(contract, 'intervalStart')
        intervalEnd = self.safe_integer(contract, 'intervalEnd')
        # 使用intervalEnd作为fundingTimestamp，intervalStart作为previousFundingTimestamp
        fundingTimestamp = intervalEnd
        previousFundingTimestamp = intervalStart
        nextFundingTimestamp = intervalEnd + (intervalEnd - intervalStart) if intervalEnd else None
        # 处理None值的时间戳
        fundingDatetime = None
        previousFundingDatetime = None
        nextFundingDatetime = None
        if fundingTimestamp is not None:
            fundingDatetime = self.iso8601(fundingTimestamp)
        if previousFundingTimestamp is not None:
            previousFundingDatetime = self.iso8601(previousFundingTimestamp)
        if nextFundingTimestamp is not None:
            nextFundingDatetime = self.iso8601(nextFundingTimestamp)
        return {
            'info': contract,
            'symbol': symbol,
            'markPrice': None,  # API没有提供标记价格
            'indexPrice': None,  # API没有提供指数价格
            'interestRate': None,
            'estimatedSettlePrice': None,
            'timestamp': fundingTimestamp,
            'datetime': fundingDatetime,
            'fundingRate': fundingRate,
            'fundingTimestamp': fundingTimestamp,
            'fundingDatetime': fundingDatetime,
            'nextFundingRate': None,
            'nextFundingTimestamp': nextFundingTimestamp,
            'nextFundingDatetime': nextFundingDatetime,
            'previousFundingRate': fundingRate,  # 假设前一个资金费率相同
            'previousFundingTimestamp': previousFundingTimestamp,
            'previousFundingDatetime': previousFundingDatetime,
        }

    def fetch_trades(self, symbol: str, since: Int = None, limit: Int = None, params={}) -> List[Trade]:
        """
        get the list of most recent trades for a particular symbol
        :param str symbol: unified symbol of the market to fetch trades for
        :param int [since]: timestamp in ms of the earliest trade to fetch
        :param int [limit]: the maximum amount of trades to fetch
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=public-trades>`
        """
        self.load_markets()
        market = self.market(symbol)
        request = {
            'symbol': market['id'],
        }
        if limit is not None:
            request['limit'] = limit
        response = self.publicGetOpenapiQuoteTrades(self.extend(request, params))
        return self.parse_trades(response, market, since, limit)

    def parse_trade(self, trade, market=None):
        """
        parses a trade structure from the exchange response
        :param dict trade: the trade data from the exchange
        :param dict [market]: the market to which the trade belongs
        :returns dict: a `trade structure <https://docs.ccxt.com/#/?id=public-trades>`
        """
        timestamp = self.safe_integer(trade, 'time')
        # 处理不同的marketId字段名
        marketId = self.safe_string_2(trade, 'symbolId', 'symbol')
        symbol = self.safe_symbol(marketId, market)
        # 处理不同的tradeId字段名
        id = self.safe_string_2(trade, 'tradeId', 'id')
        orderId = self.safe_string(trade, 'orderId')
        priceString = self.safe_string(trade, 'price')
        # 处理不同的数量字段名
        amountString = self.safe_string_2(trade, 'quantity', 'qty')
        price = self.parse_number(priceString)
        amount = self.parse_number(amountString)
        cost = self.parse_number(Precise.string_mul(priceString, amountString))
        # 处理方向信息
        side = self.safe_string(trade, 'side')
        if side == 'BUY_OPEN' or side == 'BUY_CLOSE':
            side = 'buy'
        elif side == 'SELL_OPEN' or side == 'SELL_CLOSE':
            side = 'sell'
        elif side is None:
            # 公共交易接口可能使用isBuyerMaker字段
            isBuyerMaker = self.safe_value(trade, 'isBuyerMaker')
            if isBuyerMaker is not None:
                side = 'sell' if isBuyerMaker else 'buy'
        takerOrMaker = None  # API响应中没有maker/taker信息
        # 处理手续费信息
        fee = None
        feeCost = self.safe_number_2(trade, 'fee', 'commission')
        if feeCost is not None:
            feeCurrencyId = self.safe_string_2(trade, 'feeTokenId', 'commissionAsset')
            feeCurrencyCode = self.safe_currency_code(feeCurrencyId)
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            }
        return self.safe_trade({
            'info': trade,
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'order': orderId,
            'type': self.safe_string_2(trade, 'orderType', 'type'),
            'side': side,
            'takerOrMaker': takerOrMaker,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }, market)

    def fetch_currencies(self, params={}) -> Currencies:
        """
        fetches all available currencies on an exchange
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an associative dictionary of currencies
        """
        self.load_markets()
        response = self.publicGetOpenapiSymbol(params)
        currencies = {}
        for i in range(0, len(response)):
            market = response[i]
            category = self.safe_integer(market, 'category')
            # 根据API文档，只处理category=4的swap类型市场
            if category != 4:
                continue
            baseId = self.safe_string(market, 'baseTokenId')
            quoteId = self.safe_string(market, 'quoteTokenId')
            # 对于永续合约市场（category=4），使用tokenFutures.displayUnderlyingId作为baseTokenId
            tokenFutures = self.safe_dict(market, 'tokenFutures')
            if tokenFutures is not None:
                displayUnderlyingId = self.safe_string(tokenFutures, 'displayUnderlyingId')
                if displayUnderlyingId is not None:
                    baseId = displayUnderlyingId
            if baseId is not None and not (baseId in currencies):
                code = self.safe_currency_code(baseId)
                currencies[baseId] = {
                    'id': baseId,
                    'code': code,
                    'name': baseId,
                    'active': True,
                    'fee': None,
                    'precision': None,
                    'limits': {
                        'amount': {
                            'min': None,
                            'max': None,
                        },
                        'withdraw': {
                            'min': None,
                            'max': None,
                        },
                        'deposit': {
                            'min': None,
                            'max': None,
                        },
                    },
                    'networks': {},
                    'info': market,
                }
                # 为USDT、BTC和ETH设置withdraw和deposit标志
                if code == 'USDT' or code == 'BTC' or code == 'ETH':
                    currencies[baseId]['withdraw'] = True
                    currencies[baseId]['deposit'] = True
            if quoteId is not None and not (quoteId in currencies):
                code = self.safe_currency_code(quoteId)
                currencies[quoteId] = {
                    'id': quoteId,
                    'code': code,
                    'name': quoteId,
                    'active': True,
                    'fee': None,
                    'precision': None,
                    'limits': {
                        'amount': {
                            'min': None,
                            'max': None,
                        },
                        'withdraw': {
                            'min': None,
                            'max': None,
                        },
                        'deposit': {
                            'min': None,
                            'max': None,
                        },
                    },
                    'networks': {},
                    'info': market,
                }
                # 为USDT、BTC和ETH设置withdraw和deposit标志
                if code == 'USDT' or code == 'BTC' or code == 'ETH':
                    currencies[quoteId]['withdraw'] = True
                    currencies[quoteId]['deposit'] = True
        return currencies

    def fetch_balance(self, params={}):
        """
        query for balance and get the amount of funds available for trading or funds locked in orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: a `balance structure <https://docs.ccxt.com/#/?id=balance-structure>`
        """
        self.load_markets()
        response = self.privateGetOpenapiContractAccount(params)
        # API直接返回币种余额对象，如：{"USDT": {...}}
        # 如果API没有返回时间戳，使用当前时间
        timestamp = self.milliseconds()
        datetime = self.iso8601(timestamp)
        result = {
            'info': response,
            'timestamp': timestamp,
            'datetime': datetime,
        }
        currencyIds = list(response.keys())
        for i in range(0, len(currencyIds)):
            currencyId = currencyIds[i]
            balance = response[currencyId]
            code = self.safe_currency_code(currencyId)
            account = self.account()
            # 正确计算free、used和total余额
            availableMargin = self.safe_string(balance, 'availableMargin')
            orderMargin = self.safe_string(balance, 'orderMargin')
            positionMargin = self.safe_string(balance, 'positionMargin')
            total = self.safe_string(balance, 'total')
            account['free'] = availableMargin
            # used余额应该是orderMargin + positionMargin
            used = Precise.string_add(orderMargin, positionMargin)
            # 如果used为0，则强制计算used = total - free
            if Precise.string_equals(used, '0'):
                used = Precise.string_sub(total, availableMargin)
            account['used'] = used
            account['total'] = total
            result[code] = account
        return self.safe_balance(result)

    def create_order(self, symbol: str, type: OrderType, side: OrderSide, amount: float, price: Num = None, params={}):
        """
        create a trade order
        :param str symbol: unified symbol of the market to create an order in
        :param str type: 'market' or 'limit'
        :param str side: 'buy' or 'sell'
        :param float amount: how much of currency you want to trade in units of base currency
        :param float [price]: the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        market = self.market(symbol)
        # 处理side参数映射：buy/sell -> BUY_OPEN/SELL_OPEN
        apiSide = side.upper()
        if apiSide == 'BUY':
            apiSide = 'BUY_OPEN'
        elif apiSide == 'SELL':
            apiSide = 'SELL_OPEN'
        # 处理type参数映射：market/limit -> MARKET/LIMIT
        apiType = type.upper()
        priceType = 'INPUT'
        if apiType == 'MARKET':
            priceType = 'MARKET'
        elif apiType == 'LIMIT':
            priceType = 'INPUT'
        request = {
            'symbol': market['id'],
            'side': apiSide,
            'orderType': 'LIMIT',
            'quantity': self.parse_number(self.amount_to_precision(symbol, amount)) / market['contractSize'],
            'priceType': priceType,  # 默认输入价格类型
            'leverage': '10',     # 默认10倍杠杆
            'timeInForce': 'GTC',  # 默认取消前有效
            'isCross': 'true',    # 默认全仓模式
        }
        # 限价单需要价格参数
        if type == 'limit':
            request['price'] = self.price_to_precision(symbol, price)
        # 处理额外参数
        clientOrderId = self.safe_string(params, 'clientOrderId')
        if clientOrderId is None:
            request['clientOrderId'] = str(self.milliseconds())
        response = self.privatePostOpenapiContractOrder(self.extend(request, params))
        # API响应直接返回订单数据，不需要提取data字段
        return self.parse_order(response, market)

    def cancel_order(self, id: str, symbol: Str = None, params={}):
        """
        cancels an open order
        :param str id: order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        if symbol is None:
            raise ArgumentsRequired(self.id + ' cancelOrder() requires a symbol argument')
        market = self.market(symbol)
        request = {
            'orderId': id,
            'symbol': market['id'],
            'orderType': 'LIMIT',  # 根据API文档，必需参数，默认LIMIT
        }
        response = self.privateDeleteOpenapiContractOrderCancel(self.extend(request, params))
        order = self.safe_value(response, 'data', response)
        return self.parse_order(order, market)

    def fetch_order(self, id: str, symbol: Str = None, params={}):
        """
        fetches information on an order made by the user
        :param str id: the order id
        :param str symbol: unified symbol of the market the order was made in
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns dict: An `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request = {
            'orderId': id,
        }
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        response = self.privateGetOpenapiContractOrder(self.extend(request, params))
        order = self.safe_value(response, 'data', {})
        return self.parse_order(order)

    def fetch_open_orders(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetches information on all open orders made by the user
        :param str symbol: unified market symbol of the market orders were made in
        :param int [since]: the earliest time in ms to fetch orders for
        :param int [limit]: the maximum number of order structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Order[]: a list of `order structures <https://docs.ccxt.com/#/?id=order-structure>`
        """
        self.load_markets()
        request = {}
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        response = self.privateGetOpenapiContractOpenOrders(self.extend(request, params))
        # API直接返回订单数组，没有data字段包装
        orders = self.safe_value(response, 'data', response)
        return self.parse_orders(orders, None, since, limit)

    def fetch_my_trades(self, symbol: Str = None, since: Int = None, limit: Int = None, params={}):
        """
        fetch all trades made by the user
        :param str symbol: unified market symbol
        :param int [since]: the earliest time in ms to fetch trades for
        :param int [limit]: the maximum number of trades structures to retrieve
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Trade[]: a list of `trade structures <https://docs.ccxt.com/#/?id=trade-structure>`
        """
        self.load_markets()
        request = {}
        if symbol is not None:
            market = self.market(symbol)
            request['symbol'] = market['id']
        if since is not None:
            request['startTime'] = since
        if limit is not None:
            request['limit'] = limit
        response = self.privateGetOpenapiContractMyTrades(self.extend(request, params))
        # API直接返回交易数组，没有data字段包装
        trades = self.safe_value(response, 'data', response)
        return self.parse_trades(trades, None, since, limit)

    def fetch_positions(self, symbols: Strings = None, params={}) -> List[Position]:
        """
        fetch all open positions
        :param str[] [symbols]: list of unified market symbols
        :param dict [params]: extra parameters specific to the exchange API endpoint
        :returns Position[]: a list of `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        self.load_markets()
        request = {}
        # 如果指定了symbols参数，只查询指定symbol的仓位
        if symbols is not None:
            # 只支持查询一个symbol的仓位
            if len(symbols) == 1:
                market = self.market(symbols[0])
                request['symbol'] = market['id']
        response = self.privateGetOpenapiContractPositions(self.extend(request, params))
        # API直接返回数组格式的仓位数据
        positions = response
        result = []
        for i in range(0, len(positions)):
            position = self.parse_position(positions[i])
            result.append(position)
        # 当传入symbols参数时，确保返回数组格式
        if symbols is not None:
            filtered = self.filter_by_array(result, 'symbol', symbols)
            # 将过滤后的对象转换为数组
            return list(filtered.values())
        return result

    def parse_position(self, position, marketParam=None):
        """
        parse a position structure from the exchange response
        :param dict position: the position data from the exchange
        :param dict [marketParam]: the market to which the position belongs
        :returns dict: a `position structure <https://docs.ccxt.com/#/?id=position-structure>`
        """
        marketId = self.safe_string(position, 'symbol')
        market = self.safe_market(marketId, marketParam)
        symbol = market['symbol']
        # 根据API文档解析仓位方向
        side = self.safe_string_lower(position, 'side')
        positionSide = None
        if side == 'long':
            positionSide = 'long'
        elif side == 'short':
            positionSide = 'short'
        # 根据API文档和示例数据解析字段
        amount = self.safe_number(position, 'position')  # 总数量（单位：张）
        available = self.safe_number(position, 'available')  # 可用数量（单位：张）
        contracts = amount is not amount if None else available  # 使用总数量作为合约数量
        entryPrice = self.safe_number(position, 'avgPrice')  # 开仓均价
        unrealizedPnl = self.safe_number(position, 'unrealizedPnL')  # 未实现盈亏
        leverage = self.safe_number(position, 'leverage')  # 杠杆
        liquidationPriceRaw = self.safe_number(position, 'flp')  # 强平价格
        liquidationPrice = None
        if liquidationPriceRaw != 0:
            liquidationPrice = liquidationPriceRaw
        markPrice = self.safe_number(position, 'lastPrice')  # 标记价格
        margin = self.safe_number(position, 'margin')  # 仓位保证金
        positionValue = self.safe_number(position, 'positionValue')  # 持仓价值
        marginRate = self.safe_number(position, 'marginRate')  # 保证金率
        realizedPnl = self.safe_number(position, 'realizedPnL')  # 已实现盈亏
        percentage = self.safe_number(position, 'profitRate')  # 持仓收益率
        # 使用API返回的时间戳，如果没有则使用当前时间
        timestamp = self.safe_integer(position, 'timestamp', self.milliseconds())
        # 计算实际合约数量（考虑合约大小）
        actualContracts = contracts
        if contracts is not None and market['contractSize'] is not None:
            actualContracts = contracts * market['contractSize']
        # 计算名义价值
        notional = positionValue
        if notional is None and entryPrice is not None and contracts is not None:
            notional = entryPrice * contracts * market['contractSize']
        return self.safe_position({
            'info': position,
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'initialMargin': margin,
            'initialMarginPercentage': None,
            'maintenanceMargin': None,
            'maintenanceMarginPercentage': None,
            'entryPrice': entryPrice,
            'notional': notional,
            'leverage': leverage,
            'unrealizedPnl': unrealizedPnl,
            'contracts': actualContracts,
            'contractSize': market['contractSize'],
            'realizedPnl': realizedPnl,
            'side': positionSide,
            'hedged': None,
            'marginMode': 'cross',
            'liquidationPrice': liquidationPrice,
            'markPrice': markPrice,
            'collateral': margin,
            'initialCollateral': margin,
            'percentage': percentage,
            'marginRatio': marginRate,
        })

    def parse_order(self, order, marketParam=None):
        """
        parse an order structure from the exchange response
        :param dict order: the order data from the exchange
        :param dict [marketParam]: the market to which the order belongs
        :returns dict: an `order structure <https://docs.ccxt.com/#/?id=order-structure>`
        """
        # 直接使用传入的market参数，避免重新查找
        market = marketParam is not marketParam if None else self.safe_market(self.safe_string(order, 'symbol'))
        symbol = market['symbol']
        timestamp = self.safe_integer(order, 'time')
        price = self.safe_number(order, 'price')
        # 需要将origQty乘以contractSize来还原实际数量
        origQtyString = self.safe_string(order, 'origQty')
        amount = None
        if origQtyString is not None:
            origQty = float(origQtyString)
            amount = origQty * market['contractSize']
        executedQtyString = self.safe_string(order, 'executedQty')
        filled = None
        if executedQtyString is not None:
            executedQty = float(executedQtyString)
            filled = executedQty * market['contractSize']
        remaining = None
        if amount is not None and filled is not None:
            remaining = max(0, amount - filled)
        status = self.safe_string(order, 'status')
        if status == 'NEW':
            status = 'open'
        elif status == 'FILLED':
            status = 'closed'
        elif status == 'CANCELED':
            status = 'canceled'
        elif status == 'PARTIALLY_FILLED':
            status = 'open'
        # Astralx使用BUY_OPEN/SELL_OPEN等方向值，需要映射到标准的buy/sell
        side = self.safe_string(order, 'side')
        if side == 'BUY_OPEN' or side == 'BUY_CLOSE':
            side = 'buy'
        elif side == 'SELL_OPEN' or side == 'SELL_CLOSE':
            side = 'sell'
        # 根据priceType确定订单类型：INPUT -> limit, MARKET -> market
        priceType = self.safe_string(order, 'priceType')
        type = 'limit'  # 默认限价单
        if priceType == 'MARKET':
            type = 'market'
        elif priceType == 'INPUT':
            type = 'limit'
        id = self.safe_string(order, 'orderId')
        clientOrderId = self.safe_string(order, 'clientOrderId')
        average = self.safe_number(order, 'avgPrice')
        return self.safe_order({
            'info': order,
            'id': id,
            'clientOrderId': clientOrderId,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': None,
            'symbol': symbol,
            'type': type,
            'timeInForce': self.safe_string(order, 'timeInForce'),
            'postOnly': None,
            'side': side,
            'price': price,
            'triggerPrice': None,
            'amount': amount,
            'cost': None,
            'average': average,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': None,
            'trades': None,
        })

    def sign(self, path, api='public', method='GET', params={}, headers=None, body=None):
        """
        signs the request with HMAC-SHA256
        :param str path: the API endpoint path
        :param str api: 'public' or 'private'
        :param str method: 'GET', 'POST', 'DELETE'
        :param dict params: the parameters to include in the request
        :param dict [headers]: additional headers to include
        :param dict [body]: the request body
        :returns dict: the signed request parameters
        """
        url = self.urls['api'][api]
        url += '/' + path
        query = self.omit(params, self.extract_params(path))
        if api == 'private':
            self.check_required_credentials()
            timestamp = self.milliseconds()
            query['timestamp'] = str(timestamp)
            signature = self.hmac(self.encode(self.urlencode(query)), self.encode(self.secret), hashlib.sha256)
            query['signature'] = signature
            headers = {
                'APIKEY-HEADER': self.apiKey,
            }
        if query:
            url += '?' + self.urlencode(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    def handle_errors(self, code: int, reason: str, url: str, method: str, headers: dict, body: str, response, requestHeaders, requestBody):
        """
        handles exchange errors
        :param int code: the HTTP status code
        :param str reason: the HTTP reason phrase
        :param str url: the URL of the request
        :param str method: the HTTP method used
        :param dict headers: the HTTP headers
        :param str body: the response body
        :param dict response: the parsed response
        :param dict requestHeaders: the original request headers
        :param dict requestBody: the original request body
        :returns void:
        """
        if response is None:
            return None
        errorCode = self.safe_string(response, 'code')
        if errorCode is not None:
            message = self.safe_string(response, 'msg', '')
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions['exact'], errorCode, feedback)
            self.throw_broadly_matched_exception(self.exceptions['broad'], message, feedback)
            raise ExchangeError(feedback)
        return None
