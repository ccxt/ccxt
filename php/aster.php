<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\aster as Exchange;

class aster extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'aster',
            'name' => 'Aster',
            'countries' => array( 'US' ),
            // 3 req/s for free
            // 150 req/s for subscribers => https://aster.markets/data
            // for brokers => https://aster.markets/docs/api-references/broker-api/#authentication-and-rate-limit
            'rateLimit' => 333,
            'hostname' => 'aster.markets',
            'pro' => true,
            'urls' => array(
                'logo' => '',
                'www' => 'https://www.asterdex.com/en',
                'api' => array(
                    'rest' => 'https://fapi.asterdex.com',
                ),
                'doc' => 'https://github.com/asterdex/api-docs',
                'fees' => 'https://docs.asterdex.com/product/asterex-simple/fees-and-slippage',
            ),
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => true,
                'borrowCrossMargin' => false,
                'borrowIsolatedMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createConvertTrade' => false,
                'createDepositAddress' => false,
                'createLimitBuyOrder' => false,
                'createLimitSellOrder' => false,
                'createMarketBuyOrder' => false,
                'createMarketBuyOrderWithCost' => false,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrder' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createOrders' => false,
                'createOrderWithTakeProfitAndStopLoss' => false,
                'createPostOnlyOrder' => false,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => false,
                'createStopLossOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'createTakeProfitOrder' => false,
                'createTrailingPercentOrder' => false,
                'createTriggerOrder' => false,
                'editOrder' => false,
                'editOrders' => false,
                'fetchAccounts' => null,
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchCanceledAndClosedOrders' => 'emulated',
                'fetchCanceledOrders' => 'emulated',
                'fetchClosedOrder' => false,
                'fetchClosedOrders' => 'emulated',
                'fetchConvertCurrencies' => false,
                'fetchConvertQuote' => false,
                'fetchConvertTrade' => false,
                'fetchConvertTradeHistory' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDeposit' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchDepositsWithdrawals' => false,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => false,
                'fetchFundingHistory' => true,
                'fetchFundingInterval' => 'emulated',
                'fetchFundingIntervals' => false,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchGreeks' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => 'emulated',
                'fetchIsolatedBorrowRates' => false,
                'fetchL3OrderBook' => false,
                'fetchLastPrices' => false,
                'fetchLedger' => true,
                'fetchLedgerEntry' => false,
                'fetchLeverage' => 'emulated',
                'fetchLeverages' => true,
                'fetchLeverageTiers' => false,
                'fetchLiquidations' => false,
                'fetchLongShortRatio' => false,
                'fetchLongShortRatioHistory' => false,
                'fetchMarginAdjustmentHistory' => true,
                'fetchMarginMode' => 'emulated',
                'fetchMarginModes' => true,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMarkPrice' => false,
                'fetchMarkPrices' => false,
                'fetchMyLiquidations' => false,
                'fetchMySettlementHistory' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrder' => true,
                'fetchOpenOrders' => true,
                'fetchOption' => false,
                'fetchOptionChain' => false,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => false,
                'fetchOrders' => true,
                'fetchOrderTrades' => false,
                'fetchPosition' => false,
                'fetchPositionHistory' => false,
                'fetchPositionMode' => true,
                'fetchPositions' => false,
                'fetchPositionsHistory' => false,
                'fetchPositionsRisk' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchSettlementHistory' => false,
                'fetchStatus' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => false,
                'fetchTradingLimits' => 'emulated',
                'fetchTransactionFee' => 'emulated',
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchUnderlyingAssets' => false,
                'fetchVolatilityHistory' => false,
                'fetchWithdrawAddresses' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'fetchWithdrawalWhitelist' => false,
                'reduceMargin' => true,
                'repayCrossMargin' => false,
                'repayIsolatedMargin' => false,
                'sandbox' => false,
                'setLeverage' => true,
                'setMargin' => false,
                'setMarginMode' => true,
                'setPositionMode' => true,
                'signIn' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'fapi/v1/ping',
                        'fapi/v1/time',
                        'fapi/v1/exchangeInfo',
                        'fapi/v1/depth',
                        'fapi/v1/trades',
                        'fapi/v1/historicalTrades',
                        'fapi/v1/aggTrades',
                        'fapi/v1/klines',
                        'fapi/v1/indexPriceKlines',
                        'fapi/v1/markPriceKlines',
                        'fapi/v1/premiumIndex',
                        'fapi/v1/fundingRate',
                        'fapi/v1/ticker/24hr',
                        'fapi/v1/ticker/price',
                        'fapi/v1/ticker/bookTicker',
                        'fapi/v1/leverageBracket',
                        'fapi/v1/adlQuantile',
                        'fapi/v1/forceOrders',
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'fapi/v1/positionSide/dual',
                        'fapi/v1/multiAssetsMargin',
                        'fapi/v1/order',
                        'fapi/v1/openOrder',
                        'fapi/v1/openOrders',
                        'fapi/v1/allOrders',
                        'fapi/v2/balance',
                        'fapi/v2/account',
                        'fapi/v1/positionMargin/history',
                        'fapi/v2/positionRisk',
                        'fapi/v1/userTrades',
                        'fapi/v1/income',
                        'fapi/v1/commissionRate',
                    ),
                    'post' => array(
                        'fapi/v1/order',
                        'fapi/v1/positionSide/dual',
                        'fapi/v1/multiAssetsMargin',
                        'fapi/v1/order/test',
                        'fapi/v1/batchOrders',
                        'fapi/v1/countdownCancelAll',
                        'fapi/v1/leverage',
                        'fapi/v1/marginType',
                        'fapi/v1/positionMargin',
                        'fapi/v1/listenKey',
                    ),
                    'put' => array(
                        'fapi/v1/listenKey',
                    ),
                    'delete' => array(
                        'fapi/v1/order',
                        'fapi/v1/allOpenOrders',
                        'fapi/v1/batchOrders',
                        'fapi/v1/listenKey',
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '8h' => '8h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'precisionMode' => TICK_SIZE,
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0001'),
                    'taker' => $this->parse_number('0.00035'),
                ),
            ),
            'options' => array(
                'recvWindow' => 10 * 1000, // 10 sec
                'defaultTimeInForce' => 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
            ),
            'exceptions' => array(
                'exact' => array(
                    // 10xx - General Server or Network issues
                    '-1000' => '\\ccxt\\OperationFailed', // UNKNOWN
                    '-1001' => '\\ccxt\\NetworkError', // DISCONNECTED
                    '-1002' => '\\ccxt\\AuthenticationError', // UNAUTHORIZED
                    '-1003' => '\\ccxt\\RateLimitExceeded', // TOO_MANY_REQUESTS
                    '-1004' => '\\ccxt\\DuplicateOrderId', // DUPLICATE_IP
                    '-1005' => '\\ccxt\\BadRequest', // NO_SUCH_IP
                    '-1006' => '\\ccxt\\BadResponse', // UNEXPECTED_RESP
                    '-1007' => '\\ccxt\\RequestTimeout', // TIMEOUT
                    '-1010' => '\\ccxt\\OperationFailed', // ERROR_MSG_RECEIVED
                    '-1011' => '\\ccxt\\PermissionDenied', // NON_WHITE_LIST
                    '-1013' => '\\ccxt\\BadRequest', // INVALID_MESSAGE
                    '-1014' => '\\ccxt\\OrderNotFillable', // UNKNOWN_ORDER_COMPOSITION
                    '-1015' => '\\ccxt\\RateLimitExceeded', // TOO_MANY_ORDERS
                    '-1016' => '\\ccxt\\ExchangeClosedByUser', // SERVICE_SHUTTING_DOWN
                    '-1020' => '\\ccxt\\NotSupported', // UNSUPPORTED_OPERATION
                    '-1021' => '\\ccxt\\InvalidNonce', // INVALID_TIMESTAMP
                    '-1022' => '\\ccxt\\AuthenticationError', // INVALID_SIGNATURE
                    '-1023' => '\\ccxt\\BadRequest', // START_TIME_GREATER_THAN_END_TIME
                    // 11xx - Request issues
                    '-1100' => '\\ccxt\\BadRequest', // ILLEGAL_CHARS
                    '-1101' => '\\ccxt\\BadRequest', // TOO_MANY_PARAMETERS
                    '-1102' => '\\ccxt\\ArgumentsRequired', // MANDATORY_PARAM_EMPTY_OR_MALFORMED
                    '-1103' => '\\ccxt\\BadRequest', // UNKNOWN_PARAM
                    '-1104' => '\\ccxt\\BadRequest', // UNREAD_PARAMETERS
                    '-1105' => '\\ccxt\\ArgumentsRequired', // PARAM_EMPTY
                    '-1106' => '\\ccxt\\BadRequest', // PARAM_NOT_REQUIRED
                    '-1108' => '\\ccxt\\BadRequest', // BAD_ASSET
                    '-1109' => '\\ccxt\\BadRequest', // BAD_ACCOUNT
                    '-1110' => '\\ccxt\\BadSymbol', // BAD_INSTRUMENT_TYPE
                    '-1111' => '\\ccxt\\BadRequest', // BAD_PRECISION
                    '-1112' => '\\ccxt\\BadRequest', // NO_DEPTH
                    '-1113' => '\\ccxt\\BadRequest', // WITHDRAW_NOT_NEGATIVE
                    '-1114' => '\\ccxt\\BadRequest', // TIF_NOT_REQUIRED
                    '-1115' => '\\ccxt\\InvalidOrder', // INVALID_TIF
                    '-1116' => '\\ccxt\\InvalidOrder', // INVALID_ORDER_TYPE
                    '-1117' => '\\ccxt\\InvalidOrder', // INVALID_SIDE
                    '-1118' => '\\ccxt\\InvalidOrder', // EMPTY_NEW_CL_ORD_ID
                    '-1119' => '\\ccxt\\InvalidOrder', // EMPTY_ORG_CL_ORD_ID
                    '-1120' => '\\ccxt\\BadRequest', // BAD_INTERVAL
                    '-1121' => '\\ccxt\\BadSymbol', // BAD_SYMBOL
                    '-1125' => '\\ccxt\\AuthenticationError', // INVALID_LISTEN_KEY
                    '-1127' => '\\ccxt\\BadRequest', // MORE_THAN_XX_HOURS
                    '-1128' => '\\ccxt\\BadRequest', // OPTIONAL_PARAMS_BAD_COMBO
                    '-1130' => '\\ccxt\\BadRequest', // INVALID_PARAMETER
                    '-1136' => '\\ccxt\\InvalidOrder', // INVALID_NEW_ORDER_RESP_TYPE
                    // 20xx - Processing Issues
                    '-2010' => '\\ccxt\\InvalidOrder', // NEW_ORDER_REJECTED
                    '-2011' => '\\ccxt\\OrderNotFound', // CANCEL_REJECTED
                    '-2013' => '\\ccxt\\OrderNotFound', // NO_SUCH_ORDER
                    '-2014' => '\\ccxt\\AuthenticationError', // BAD_API_KEY_FMT
                    '-2015' => '\\ccxt\\AuthenticationError', // REJECTED_MBX_KEY
                    '-2016' => '\\ccxt\\MarketClosed', // NO_TRADING_WINDOW
                    '-2018' => '\\ccxt\\InsufficientFunds', // BALANCE_NOT_SUFFICIENT
                    '-2019' => '\\ccxt\\InsufficientFunds', // MARGIN_NOT_SUFFICIEN
                    '-2020' => '\\ccxt\\OrderNotFillable', // UNABLE_TO_FILL
                    '-2021' => '\\ccxt\\OrderImmediatelyFillable', // ORDER_WOULD_IMMEDIATELY_TRIGGER
                    '-2022' => '\\ccxt\\OperationRejected', // REDUCE_ONLY_REJECT
                    '-2023' => '\\ccxt\\AccountSuspended', // USER_IN_LIQUIDATION
                    '-2024' => '\\ccxt\\InsufficientFunds', // POSITION_NOT_SUFFICIENT
                    '-2025' => '\\ccxt\\RateLimitExceeded', // MAX_OPEN_ORDER_EXCEEDED
                    '-2026' => '\\ccxt\\NotSupported', // REDUCE_ONLY_ORDER_TYPE_NOT_SUPPORTED
                    '-2027' => '\\ccxt\\BadRequest', // MAX_LEVERAGE_RATIO
                    '-2028' => '\\ccxt\\BadRequest', // MIN_LEVERAGE_RATIO
                    // 40xx - Filters and other Issues
                    '-4000' => '\\ccxt\\InvalidOrder', // INVALID_ORDER_STATUS
                    '-4001' => '\\ccxt\\InvalidOrder', // PRICE_LESS_THAN_ZERO
                    '-4002' => '\\ccxt\\InvalidOrder', // PRICE_GREATER_THAN_MAX_PRICE
                    '-4003' => '\\ccxt\\InvalidOrder', // QTY_LESS_THAN_ZERO
                    '-4004' => '\\ccxt\\InvalidOrder', // QTY_LESS_THAN_MIN_QTY
                    '-4005' => '\\ccxt\\InvalidOrder', // QTY_GREATER_THAN_MAX_QTY
                    '-4006' => '\\ccxt\\InvalidOrder', // STOP_PRICE_LESS_THAN_ZERO
                    '-4007' => '\\ccxt\\InvalidOrder', // STOP_PRICE_GREATER_THAN_MAX_PRICE
                    '-4008' => '\\ccxt\\InvalidOrder', // TICK_SIZE_LESS_THAN_ZERO
                    '-4009' => '\\ccxt\\InvalidOrder', // MAX_PRICE_LESS_THAN_MIN_PRICE
                    '-4010' => '\\ccxt\\InvalidOrder', // MAX_QTY_LESS_THAN_MIN_QTY
                    '-4011' => '\\ccxt\\InvalidOrder', // STEP_SIZE_LESS_THAN_ZERO
                    '-4012' => '\\ccxt\\RateLimitExceeded', // MAX_NUM_ORDERS_LESS_THAN_ZERO
                    '-4013' => '\\ccxt\\InvalidOrder', // PRICE_LESS_THAN_MIN_PRICE
                    '-4014' => '\\ccxt\\InvalidOrder', // PRICE_NOT_INCREASED_BY_TICK_SIZE
                    '-4015' => '\\ccxt\\InvalidOrder', // INVALID_CL_ORD_ID_LEN
                    '-4016' => '\\ccxt\\InvalidOrder', // PRICE_HIGHTER_THAN_MULTIPLIER_UP
                    '-4017' => '\\ccxt\\InvalidOrder', // MULTIPLIER_UP_LESS_THAN_ZERO
                    '-4018' => '\\ccxt\\InvalidOrder', // MULTIPLIER_DOWN_LESS_THAN_ZERO
                    '-4019' => '\\ccxt\\BadRequest', // COMPOSITE_SCALE_OVERFLOW
                    '-4020' => '\\ccxt\\BadRequest', // TARGET_STRATEGY_INVALID
                    '-4021' => '\\ccxt\\BadRequest', // INVALID_DEPTH_LIMIT
                    '-4022' => '\\ccxt\\MarketClosed', // WRONG_MARKET_STATUS
                    '-4023' => '\\ccxt\\InvalidOrder', // QTY_NOT_INCREASED_BY_STEP_SIZE
                    '-4024' => '\\ccxt\\InvalidOrder', // PRICE_LOWER_THAN_MULTIPLIER_DOWN
                    '-4025' => '\\ccxt\\BadRequest', // MULTIPLIER_DECIMAL_LESS_THAN_ZERO
                    '-4026' => '\\ccxt\\BadRequest', // COMMISSION_INVALID
                    '-4027' => '\\ccxt\\BadRequest', // INVALID_ACCOUNT_TYPE
                    '-4028' => '\\ccxt\\BadRequest', // INVALID_LEVERAGE
                    '-4029' => '\\ccxt\\BadRequest', // INVALID_TICK_SIZE_PRECISION
                    '-4030' => '\\ccxt\\BadRequest', // INVALID_STEP_SIZE_PRECISION
                    '-4031' => '\\ccxt\\BadRequest', // INVALID_WORKING_TYPE
                    '-4032' => '\\ccxt\\RateLimitExceeded', // EXCEED_MAX_CANCEL_ORDER_SIZE
                    '-4033' => '\\ccxt\\AccountNotEnabled', // INSURANCE_ACCOUNT_NOT_FOUND
                    '-4044' => '\\ccxt\\BadRequest', // INVALID_BALANCE_TYPE
                    '-4045' => '\\ccxt\\RateLimitExceeded', // MAX_STOP_ORDER_EXCEEDED
                    '-4046' => '\\ccxt\\NoChange', // NO_NEED_TO_CHANGE_MARGIN_TYPE
                    '-4047' => '\\ccxt\\OperationRejected', // THERE_EXISTS_OPEN_ORDERS
                    '-4048' => '\\ccxt\\OperationRejected', // THERE_EXISTS_QUANTITY
                    '-4049' => '\\ccxt\\OperationRejected', // ADD_ISOLATED_MARGIN_REJECT
                    '-4050' => '\\ccxt\\InsufficientFunds', // CROSS_BALANCE_INSUFFICIENT
                    '-4051' => '\\ccxt\\InsufficientFunds', // ISOLATED_BALANCE_INSUFFICIENT
                    '-4052' => '\\ccxt\\NoChange', // NO_NEED_TO_CHANGE_AUTO_ADD_MARGIN
                    '-4053' => '\\ccxt\\OperationRejected', // AUTO_ADD_CROSSED_MARGIN_REJECT
                    '-4054' => '\\ccxt\\OperationRejected', // ADD_ISOLATED_MARGIN_NO_POSITION_REJECT
                    '-4055' => '\\ccxt\\ArgumentsRequired', // AMOUNT_MUST_BE_POSITIVE
                    '-4056' => '\\ccxt\\AuthenticationError', // INVALID_API_KEY_TYPE
                    '-4057' => '\\ccxt\\AuthenticationError', // INVALID_RSA_PUBLIC_KEY
                    '-4058' => '\\ccxt\\InvalidOrder', // MAX_PRICE_TOO_LARGE
                    '-4059' => '\\ccxt\\NoChange', // NO_NEED_TO_CHANGE_POSITION_SIDE
                    '-4060' => '\\ccxt\\InvalidOrder', // INVALID_POSITION_SIDE
                    '-4061' => '\\ccxt\\InvalidOrder', // POSITION_SIDE_NOT_MATCH
                    '-4062' => '\\ccxt\\OperationRejected', // REDUCE_ONLY_CONFLICT
                    '-4063' => '\\ccxt\\BadRequest', // INVALID_OPTIONS_REQUEST_TYPE
                    '-4064' => '\\ccxt\\BadRequest', // INVALID_OPTIONS_TIME_FRAME
                    '-4065' => '\\ccxt\\BadRequest', // INVALID_OPTIONS_AMOUNT
                    '-4066' => '\\ccxt\\BadRequest', // INVALID_OPTIONS_EVENT_TYPE
                    '-4067' => '\\ccxt\\OperationRejected', // POSITION_SIDE_CHANGE_EXISTS_OPEN_ORDERS
                    '-4068' => '\\ccxt\\OperationRejected', // POSITION_SIDE_CHANGE_EXISTS_QUANTITY
                    '-4069' => '\\ccxt\\BadRequest', // INVALID_OPTIONS_PREMIUM_FEE
                    '-4070' => '\\ccxt\\InvalidOrder', // INVALID_CL_OPTIONS_ID_LEN
                    '-4071' => '\\ccxt\\InvalidOrder', // INVALID_OPTIONS_DIRECTION
                    '-4072' => '\\ccxt\\NoChange', // OPTIONS_PREMIUM_NOT_UPDATE
                    '-4073' => '\\ccxt\\BadRequest', // OPTIONS_PREMIUM_INPUT_LESS_THAN_ZERO
                    '-4074' => '\\ccxt\\InvalidOrder', // OPTIONS_AMOUNT_BIGGER_THAN_UPPER
                    '-4075' => '\\ccxt\\OperationRejected', // OPTIONS_PREMIUM_OUTPUT_ZERO
                    '-4076' => '\\ccxt\\OperationRejected', // OPTIONS_PREMIUM_TOO_DIFF
                    '-4077' => '\\ccxt\\RateLimitExceeded', // OPTIONS_PREMIUM_REACH_LIMIT
                    '-4078' => '\\ccxt\\BadRequest', // OPTIONS_COMMON_ERROR
                    '-4079' => '\\ccxt\\BadRequest', // INVALID_OPTIONS_ID
                    '-4080' => '\\ccxt\\BadRequest', // OPTIONS_USER_NOT_FOUND
                    '-4081' => '\\ccxt\\BadRequest', // OPTIONS_NOT_FOUND
                    '-4082' => '\\ccxt\\RateLimitExceeded', // INVALID_BATCH_PLACE_ORDER_SIZE
                    '-4083' => '\\ccxt\\OperationFailed', // PLACE_BATCH_ORDERS_FAIL
                    '-4084' => '\\ccxt\\NotSupported', // UPCOMING_METHOD
                    '-4085' => '\\ccxt\\BadRequest', // INVALID_NOTIONAL_LIMIT_COEF
                    '-4086' => '\\ccxt\\BadRequest', // INVALID_PRICE_SPREAD_THRESHOLD
                    '-4087' => '\\ccxt\\PermissionDenied', // REDUCE_ONLY_ORDER_PERMISSION
                    '-4088' => '\\ccxt\\PermissionDenied', // NO_PLACE_ORDER_PERMISSION
                    '-4104' => '\\ccxt\\BadSymbol', // INVALID_CONTRACT_TYPE
                    '-4114' => '\\ccxt\\InvalidOrder', // INVALID_CLIENT_TRAN_ID_LEN
                    '-4115' => '\\ccxt\\DuplicateOrderId', // DUPLICATED_CLIENT_TRAN_ID
                    '-4118' => '\\ccxt\\InsufficientFunds', // REDUCE_ONLY_MARGIN_CHECK_FAILED
                    '-4131' => '\\ccxt\\InvalidOrder', // MARKET_ORDER_REJECT
                    '-4135' => '\\ccxt\\InvalidOrder', // INVALID_ACTIVATION_PRICE
                    '-4137' => '\\ccxt\\InvalidOrder', // QUANTITY_EXISTS_WITH_CLOSE_POSITION
                    '-4138' => '\\ccxt\\OperationRejected', // REDUCE_ONLY_MUST_BE_TRUE
                    '-4139' => '\\ccxt\\InvalidOrder', // ORDER_TYPE_CANNOT_BE_MKT
                    '-4140' => '\\ccxt\\OperationRejected', // INVALID_OPENING_POSITION_STATUS
                    '-4141' => '\\ccxt\\MarketClosed', // SYMBOL_ALREADY_CLOSED
                    '-4142' => '\\ccxt\\InvalidOrder', // STRATEGY_INVALID_TRIGGER_PRICE
                    '-4144' => '\\ccxt\\BadSymbol', // INVALID_PAIR
                    '-4161' => '\\ccxt\\OperationRejected', // ISOLATED_LEVERAGE_REJECT_WITH_POSITION
                    '-4164' => '\\ccxt\\InvalidOrder', // MIN_NOTIONAL
                    '-4165' => '\\ccxt\\BadRequest', // INVALID_TIME_INTERVAL
                    '-4183' => '\\ccxt\\InvalidOrder', // PRICE_HIGHTER_THAN_STOP_MULTIPLIER_UP
                    '-4184' => '\\ccxt\\InvalidOrder', // PRICE_LOWER_THAN_STOP_MULTIPLIER_DOWN
                ),
                'broad' => array(
                ),
            ),
        ));
    }

    public function fetch_currencies($params = array ()): ?array {
        /**
         * fetches all available currencies on an exchange
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#exchange-information
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an associative dictionary of currencies
         */
        $response = $this->publicGetFapiV1ExchangeInfo ($params);
        $rows = $this->safe_list($response, 'assets', array());
        //
        //     array(
        //         {
        //             "asset" => "USDT",
        //             "marginAvailable" => true,
        //             "autoAssetExchange" => "-10000"
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($rows); $i++) {
            $currency = $rows[$i];
            $currencyId = $this->safe_string($currency, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $result[$code] = $this->safe_currency_structure(array(
                'info' => $currency,
                'code' => $code,
                'id' => $currencyId,
                'name' => $code,
                'active' => null,
                'deposit' => null,
                'withdraw' => null,
                'fee' => null,
                'precision' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'networks' => null,
                'type' => 'crypto', // atm exchange api provides only cryptos
            ));
        }
        return $result;
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves data on all $markets for bigone
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#exchange-information
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $response = $this->publicGetFapiV1ExchangeInfo ($params);
        $markets = $this->safe_list($response, 'symbols', array());
        //
        //     array(
        //         {
        //             "symbol" => "BTCUSDT",
        //             "pair" => "BTCUSDT",
        //             "contractType" => "PERPETUAL",
        //             "deliveryDate" => 4133404800000,
        //             "onboardDate" => 1627628400000,
        //             "status" => "TRADING",
        //             "maintMarginPercent" => "2.5000",
        //             "requiredMarginPercent" => "5.0000",
        //             "baseAsset" => "BTC",
        //             "quoteAsset" => "USDT",
        //             "marginAsset" => "USDT",
        //             "pricePrecision" => 1,
        //             "quantityPrecision" => 3,
        //             "baseAssetPrecision" => 8,
        //             "quotePrecision" => 8,
        //             "underlyingType" => "COIN",
        //             "underlyingSubType" => array(),
        //             "settlePlan" => 0,
        //             "triggerProtect" => "0.0200",
        //             "liquidationFee" => "0.025000",
        //             "marketTakeBound" => "0.02",
        //             "filters" => array(
        //                 array(
        //                     "minPrice" => "1",
        //                     "maxPrice" => "1000000",
        //                     "filterType" => "PRICE_FILTER",
        //                     "tickSize" => "0.1"
        //                 ),
        //                 array(
        //                     "stepSize" => "0.001",
        //                     "filterType" => "LOT_SIZE",
        //                     "maxQty" => "100",
        //                     "minQty" => "0.001"
        //                 ),
        //                 array(
        //                     "stepSize" => "0.001",
        //                     "filterType" => "MARKET_LOT_SIZE",
        //                     "maxQty" => "10",
        //                     "minQty" => "0.001"
        //                 ),
        //                 array(
        //                     "limit" => 200,
        //                     "filterType" => "MAX_NUM_ORDERS"
        //                 ),
        //                 array(
        //                     "limit" => 10,
        //                     "filterType" => "MAX_NUM_ALGO_ORDERS"
        //                 ),
        //                 array(
        //                     "notional" => "5",
        //                     "filterType" => "MIN_NOTIONAL"
        //                 ),
        //                 {
        //                     "multiplierDown" => "0.9800",
        //                     "multiplierUp" => "1.0200",
        //                     "multiplierDecimal" => "4",
        //                     "filterType" => "PERCENT_PRICE"
        //                 }
        //             ),
        //             "orderTypes" => array(
        //                 "LIMIT",
        //                 "MARKET",
        //                 "STOP",
        //                 "STOP_MARKET",
        //                 "TAKE_PROFIT",
        //                 "TAKE_PROFIT_MARKET",
        //                 "TRAILING_STOP_MARKET"
        //             ),
        //             "timeInForce" => array(
        //                 "GTC",
        //                 "IOC",
        //                 "FOK",
        //                 "GTX",
        //                 "RPI"
        //             )
        //         }
        //     )
        //
        $fees = $this->fees;
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $id = $this->safe_string($market, 'symbol');
            $baseId = $this->safe_string($market, 'baseAsset');
            $quoteId = $this->safe_string($market, 'quoteAsset');
            $settleId = $this->safe_string($market, 'marginAsset');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $settle = $this->safe_currency_code($settleId);
            $symbol = $base . '/' . $quote . ':' . $settle;
            $status = $this->safe_string($market, 'status');
            $active = $status === 'TRADING';
            $filters = $this->safe_list($market, 'filters', array());
            $filtersByType = $this->index_by($filters, 'filterType');
            $entry = $this->safe_market_structure(array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => $settle,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => $settleId,
                'type' => 'swap',
                'spot' => false,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'active' => $active,
                'contract' => true,
                'linear' => true,
                'inverse' => false,
                'taker' => $fees['trading']['taker'],
                'maker' => $fees['trading']['maker'],
                'contractSize' => 1,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quantityPrecision'))),
                    'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'pricePrecision'))),
                    'base' => $this->parse_number($this->parse_precision($this->safe_string($market, 'baseAssetPrecision'))),
                    'quote' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quotePrecision'))),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'created' => $this->safe_integer($market, 'onboardDate'),
                'info' => $market,
            ));
            if (is_array($filtersByType) && array_key_exists('PRICE_FILTER', $filtersByType)) {
                $filter = $this->safe_dict($filtersByType, 'PRICE_FILTER', array());
                $entry['limits']['price'] = array(
                    'min' => $this->safe_number($filter, 'minPrice'),
                    'max' => $this->safe_number($filter, 'maxPrice'),
                );
                $entry['precision']['price'] = $this->safe_number($filter, 'tickSize');
            }
            if (is_array($filtersByType) && array_key_exists('LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_dict($filtersByType, 'LOT_SIZE', array());
                $entry['precision']['amount'] = $this->safe_number($filter, 'stepSize');
                $entry['limits']['amount'] = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
            }
            if (is_array($filtersByType) && array_key_exists('MARKET_LOT_SIZE', $filtersByType)) {
                $filter = $this->safe_dict($filtersByType, 'MARKET_LOT_SIZE', array());
                $entry['limits']['market'] = array(
                    'min' => $this->safe_number($filter, 'minQty'),
                    'max' => $this->safe_number($filter, 'maxQty'),
                );
            }
            if ((is_array($filtersByType) && array_key_exists('MIN_NOTIONAL', $filtersByType)) || (is_array($filtersByType) && array_key_exists('NOTIONAL', $filtersByType))) {
                $filter = $this->safe_dict_2($filtersByType, 'MIN_NOTIONAL', 'NOTIONAL', array());
                $entry['limits']['cost']['min'] = $this->safe_number($filter, 'notional');
            }
            $result[] = $entry;
        }
        return $result;
    }

    public function fetch_time($params = array ()): ?int {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#check-server-time
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->publicGetFapiV1Time ($params);
        //
        //     {
        //         "serverTime" => 1499827319559
        //     }
        //
        return $this->safe_integer($response, 'serverTime');
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //         1631158560000,
        //         "208.1850",
        //         "208.1850",
        //         "208.1850",
        //         "208.1850",
        //         "11.84",
        //         1631158619999,
        //         "2464.910400",
        //         1,
        //         "11.84",
        //         "2464.910400",
        //         "0"
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close $price, and the volume of a $market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#klinecandlestick-data
         *
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->price] "mark" or "index" for mark $price and index $price candles
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOHLCV() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array();
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            if ($limit > 1500) {
                $limit = 1500; // Default 500; max 1500.
            }
            $request['limit'] = $limit;
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        $request['interval'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
        $price = $this->safe_string($params, 'price');
        $isMark = ($price === 'mark');
        $isIndex = ($price === 'index');
        $params = $this->omit($params, 'price');
        $response = null;
        if ($isMark) {
            $request['symbol'] = $market['id'];
            $response = $this->publicGetFapiV1MarkPriceKlines ($this->extend($request, $params));
        } elseif ($isIndex) {
            $request['pair'] = $market['id'];
            $response = $this->publicGetFapiV1IndexPriceKlines ($this->extend($request, $params));
        } else {
            $request['symbol'] = $market['id'];
            $response = $this->publicGetFapiV1Klines ($this->extend($request, $params));
        }
        //
        //     array(
        //         array(
        //             1631158560000,
        //             "208.1850",
        //             "208.1850",
        //             "208.1850",
        //             "208.1850",
        //             "11.84",
        //             1631158619999,
        //             "2464.910400",
        //             1,
        //             "11.84",
        //             "2464.910400",
        //             "0"
        //         )
        //     )
        //
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        //
        // fetchTrades
        //
        //     {
        //         "id" => 3913206,
        //         "price" => "644.100",
        //         "qty" => "0.08",
        //         "quoteQty" => "51.528",
        //         "time" => 1749784506633,
        //         "isBuyerMaker" => true
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "buyer" => false,
        //         "commission" => "-0.07819010",
        //         "commissionAsset" => "USDT",
        //         "id" => 698759,
        //         "maker" => false,
        //         "orderId" => 25851813,
        //         "price" => "7819.01",
        //         "qty" => "0.002",
        //         "quoteQty" => "15.63802",
        //         "realizedPnl" => "-0.91539999",
        //         "side" => "SELL",
        //         "positionSide" => "SHORT",
        //         "symbol" => "BTCUSDT",
        //         "time" => 1569514978020
        //     }
        //
        $id = $this->safe_string($trade, 'id');
        $symbol = $market['symbol'];
        $currencyId = $this->safe_string($trade, 'commissionAsset');
        $currencyCode = $this->safe_currency_code($currencyId);
        $amountString = $this->safe_string($trade, 'qty');
        $priceString = $this->safe_string($trade, 'price');
        $costString = $this->safe_string($trade, 'quoteQty');
        $timestamp = $this->safe_integer($trade, 'time');
        $side = $this->safe_string($trade, 'side');
        $isMaker = $this->safe_bool($trade, 'maker');
        $takerOrMaker = null;
        if ($isMaker !== null) {
            $takerOrMaker = $isMaker ? 'maker' : 'taker';
        }
        $isBuyerMaker = $this->safe_bool($trade, 'isBuyerMaker');
        if ($isBuyerMaker !== null) {
            $side = $isBuyerMaker ? 'sell' : 'buy';
        }
        return $this->safe_trade(array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => $this->safe_string($trade, 'orderId'),
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => array(
                'cost' => $this->parse_number(Precise::string_abs($this->safe_string($trade, 'commission'))),
                'currency' => $currencyCode,
            ),
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent trades for a particular $symbol
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#recent-trades-list
         *
         * @param {string} $symbol unified $symbol of the $market to fetch trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            if ($limit > 1000) {
                $limit = 1000; // Default 500; max 1000.
            }
            $request['limit'] = $limit;
        }
        $response = $this->publicGetFapiV1Trades ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "id" => 3913206,
        //             "price" => "644.100",
        //             "qty" => "0.08",
        //             "quoteQty" => "51.528",
        //             "time" => 1749784506633,
        //             "isBuyerMaker" => true
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit);
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all trades made by the user
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#account-trade-list-user_data
         *
         * @param {string} [$symbol] unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch trades for
         * @param {int} [$limit] the maximum number of trades structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp in ms for the ending date filter, default is null
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            if ($limit > 1000) {
                $limit = 1000; // Default 500; max 1000.
            }
            $request['limit'] = $limit;
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        $response = $this->privateGetFapiV1UserTrades ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "buyer" => false,
        //             "commission" => "-0.07819010",
        //             "commissionAsset" => "USDT",
        //             "id" => 698759,
        //             "maker" => false,
        //             "orderId" => 25851813,
        //             "price" => "7819.01",
        //             "qty" => "0.002",
        //             "quoteQty" => "15.63802",
        //             "realizedPnl" => "-0.91539999",
        //             "side" => "SELL",
        //             "positionSide" => "SHORT",
        //             "symbol" => "BTCUSDT",
        //             "time" => 1569514978020
        //         }
        //     )
        //
        return $this->parse_trades($response, $market, $since, $limit, $params);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#order-book
         *
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrderBook() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            // $limit => [5, 10, 20, 50, 100, 500, 1000]. Default => 500
            if ($limit > 1000) {
                $limit = 1000; // Default 500; max 1000.
            }
            $request['limit'] = $limit;
        }
        $response = $this->publicGetFapiV1Depth ($this->extend($request, $params));
        //
        //     {
        //         "lastUpdateId" => 1027024,
        //         "E" => 1589436922972, //     Message output time
        //         "T" => 1589436922959, //     Transaction time
        //         "bids" => array(
        //             array(
        //                 "4.00000000", //     PRICE
        //                 "431.00000000" //     QTY
        //             )
        //         ),
        //         "asks" => array(
        //             array(
        //                 "4.00000200",
        //                 "12.00000000"
        //             )
        //         )
        //     }
        //
        $timestamp = $this->safe_integer($response, 'T');
        return $this->parse_order_book($response, $symbol, $timestamp, 'bids', 'asks');
    }

    public function fetch_funding_rate_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetches historical funding rate prices
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#get-funding-rate-history
         *
         * @param {string} $symbol unified $symbol of the $market to fetch the funding rate history for
         * @param {int} [$since] $timestamp in ms of the earliest funding rate to fetch
         * @param {int} [$limit] the maximum amount of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~ to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] $timestamp in ms of the latest funding rate
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~
         */
        $this->load_markets();
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            if ($limit > 1000) {
                $limit = 1000; // Default 100; max 1000
            }
            $request['limit'] = $limit;
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        $response = $this->publicGetFapiV1FundingRate ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "symbol" => "BTCUSDT",
        //             "fundingTime" => 1747209600000,
        //             "fundingRate" => "0.00010000"
        //         }
        //     )
        //
        $rates = array();
        for ($i = 0; $i < count($response); $i++) {
            $entry = $response[$i];
            $timestamp = $this->safe_integer($entry, 'fundingTime');
            $rates[] = array(
                'info' => $entry,
                'symbol' => $this->safe_symbol($this->safe_string($entry, 'symbol')),
                'fundingRate' => $this->safe_number($entry, 'fundingRate'),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
            );
        }
        $sorted = $this->sort_by($rates, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $symbol, $since, $limit);
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "priceChange" => "1845.7",
        //         "priceChangePercent" => "1.755",
        //         "weightedAvgPrice" => "105515.5",
        //         "lastPrice" => "107037.7",
        //         "lastQty" => "0.004",
        //         "openPrice" => "105192.0",
        //         "highPrice" => "107223.5",
        //         "lowPrice" => "104431.6",
        //         "volume" => "8753.286",
        //         "quoteVolume" => "923607368.61",
        //         "openTime" => 1749976620000,
        //         "closeTime" => 1750063053754,
        //         "firstId" => 24195078,
        //         "lastId" => 24375783,
        //         "count" => 180706
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'closeTime');
        $marketId = $this->safe_string($ticker, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $this->safe_symbol($marketId, $market);
        $last = $this->safe_string($ticker, 'lastPrice');
        $open = $this->safe_string($ticker, 'openPrice');
        $percentage = $this->safe_string($ticker, 'priceChangePercent');
        $percentage = Precise::string_mul($percentage, '100');
        $quoteVolume = $this->safe_string($ticker, 'quoteVolume');
        $baseVolume = $this->safe_string($ticker, 'volume');
        $high = $this->safe_string($ticker, 'highPrice');
        $low = $this->safe_string($ticker, 'lowPrice');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'markPrice' => null,
            'indexPrice' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#24hr-ticker-price-change-statistics
         *
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchTicker() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetFapiV1Ticker24hr ($this->extend($request, $params));
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "priceChange" => "1845.7",
        //         "priceChangePercent" => "1.755",
        //         "weightedAvgPrice" => "105515.5",
        //         "lastPrice" => "107037.7",
        //         "lastQty" => "0.004",
        //         "openPrice" => "105192.0",
        //         "highPrice" => "107223.5",
        //         "lowPrice" => "104431.6",
        //         "volume" => "8753.286",
        //         "quoteVolume" => "923607368.61",
        //         "openTime" => 1749976620000,
        //         "closeTime" => 1750063053754,
        //         "firstId" => 24195078,
        //         "lastId" => 24375783,
        //         "count" => 180706
        //     }
        //
        return $this->parse_ticker($response, $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#24hr-ticker-price-change-statistics
         *
         * @param {string[]} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an array of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $response = $this->publicGetFapiV1Ticker24hr ($params);
        //
        //     array(
        //         {
        //             "symbol" => "BTCUSDT",
        //             "priceChange" => "1845.7",
        //             "priceChangePercent" => "1.755",
        //             "weightedAvgPrice" => "105515.5",
        //             "lastPrice" => "107037.7",
        //             "lastQty" => "0.004",
        //             "openPrice" => "105192.0",
        //             "highPrice" => "107223.5",
        //             "lowPrice" => "104431.6",
        //             "volume" => "8753.286",
        //             "quoteVolume" => "923607368.61",
        //             "openTime" => 1749976620000,
        //             "closeTime" => 1750063053754,
        //             "firstId" => 24195078,
        //             "lastId" => 24375783,
        //             "count" => 180706
        //         }
        //     )
        //
        return $this->parse_tickers($response, $symbols);
    }

    public function parse_funding_rate($contract, ?array $market = null): array {
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "markPrice" => "106729.84047826",
        //         "indexPrice" => "106775.72673913",
        //         "estimatedSettlePrice" => "106708.84997006",
        //         "lastFundingRate" => "0.00010000",
        //         "interestRate" => "0.00010000",
        //         "nextFundingTime" => 1750147200000,
        //         "time" => 1750146970000
        //     }
        //
        $marketId = $this->safe_string($contract, 'symbol');
        $nextFundingTimestamp = $this->safe_integer($contract, 'nextFundingTime');
        $timestamp = $this->safe_integer($contract, 'time');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol($marketId, $market),
            'markPrice' => $this->safe_number($contract, 'markPrice'),
            'indexPrice' => $this->safe_number($contract, 'indexPrice'),
            'interestRate' => $this->safe_number($contract, 'interestRate'),
            'estimatedSettlePrice' => $this->safe_number($contract, 'estimatedSettlePrice'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fundingRate' => $this->safe_number($contract, 'lastFundingRate'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => null,
            'nextFundingTimestamp' => $nextFundingTimestamp,
            'nextFundingDatetime' => $this->iso8601($nextFundingTimestamp),
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
            'interval' => null,
        );
    }

    public function fetch_funding_rate(string $symbol, $params = array ()): array {
        /**
         * fetch the current funding rate
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#mark-price
         *
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingRate() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetFapiV1PremiumIndex ($this->extend($request, $params));
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "markPrice" => "106729.84047826",
        //         "indexPrice" => "106775.72673913",
        //         "estimatedSettlePrice" => "106708.84997006",
        //         "lastFundingRate" => "0.00010000",
        //         "interestRate" => "0.00010000",
        //         "nextFundingTime" => 1750147200000,
        //         "time" => 1750146970000
        //     }
        //
        return $this->parse_funding_rate($response, $market);
    }

    public function fetch_funding_rates(?array $symbols = null, $params = array ()): array {
        /**
         * fetch the current funding rate for multiple $symbols
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#24hr-ticker-price-change-statistics
         *
         * @param {string[]} [$symbols] list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structures~
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $response = $this->publicGetFapiV1PremiumIndex ($this->extend($params));
        //
        //     array(
        //         {
        //             "symbol" => "BTCUSDT",
        //             "markPrice" => "106729.84047826",
        //             "indexPrice" => "106775.72673913",
        //             "estimatedSettlePrice" => "106708.84997006",
        //             "lastFundingRate" => "0.00010000",
        //             "interestRate" => "0.00010000",
        //             "nextFundingTime" => 1750147200000,
        //             "time" => 1750146970000
        //         }
        //     )
        //
        return $this->parse_funding_rates($response, $symbols);
    }

    public function parse_balance($response): array {
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'availableBalance');
            $account['total'] = $this->safe_string($balance, 'balance');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#futures-account-balance-v2-user_data
         *
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $response = $this->privateGetFapiV2Balance ($params);
        //
        //     array(
        //         {
        //             "accountAlias" => "SgsR", // unique account code
        //             "asset" => "USDT", // asset name
        //             "balance" => "122607.35137903", // wallet balance
        //             "crossWalletBalance" => "23.72469206", // crossed wallet balance
        //             "crossUnPnl" => "0.00000000", // unrealized profit of crossed positions
        //             "availableBalance" => "23.72469206", // available balance
        //             "maxWithdrawAmount" => "23.72469206", // maximum amount for transfer out
        //             "marginAvailable" => true, // whether the asset can be used in Multi-Assets mode
        //             "updateTime" => 1617939110373
        //         }
        //     )
        //
        return $this->parse_balance($response);
    }

    public function set_margin_mode(string $marginMode, ?string $symbol = null, $params = array ()) {
        /**
         * set margin mode to 'cross' or 'isolated'
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#change-margin-type-trade
         *
         * @param {string} $marginMode 'cross' or 'isolated'
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} $response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
        }
        $marginMode = strtoupper($marginMode);
        if ($marginMode === 'CROSS') {
            $marginMode = 'CROSSED';
        }
        if (($marginMode !== 'ISOLATED') && ($marginMode !== 'CROSSED')) {
            throw new BadRequest($this->id . ' $marginMode must be either isolated or cross');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'marginType' => $marginMode,
        );
        $response = $this->privatePostFapiV1MarginType ($this->extend($request, $params));
        //
        //     {
        //         "amount" => 100.0,
        //         "code" => 200,
        //         "msg" => "Successfully modify position margin.",
        //         "type" => 1
        //     }
        //
        return $response;
    }

    public function fetch_position_mode(?string $symbol = null, $params = array ()) {
        /**
         * fetchs the position mode, hedged or one way, hedged for binance is set identically for all linear markets or all inverse markets
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#get-current-position-modeuser_data
         *
         * @param {string} $symbol unified $symbol of the market to fetch the order book for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an object detailing whether the market is in hedged or one-way mode
         */
        $response = $this->privateGetFapiV1PositionSideDual ($params);
        //
        //     {
        //         "dualSidePosition" => true // "true" => Hedge Mode; "false" => One-way Mode
        //     }
        //
        $dualSidePosition = $this->safe_bool($response, 'dualSidePosition');
        return array(
            'info' => $response,
            'hedged' => ($dualSidePosition === true),
        );
    }

    public function set_position_mode(bool $hedged, ?string $symbol = null, $params = array ()) {
        /**
         * set $hedged to true or false for a market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#change-position-modetrade
         *
         * @param {bool} $hedged set to true to use dualSidePosition
         * @param {string} $symbol not used by bingx setPositionMode ()
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} response from the exchange
         */
        $request = array(
            'dualSidePosition' => $hedged,
        );
        //
        //     {
        //         "code" => 200,
        //         "msg" => "success"
        //     }
        //
        return $this->privatePostFapiV1PositionSideDual ($this->extend($request, $params));
    }

    public function parse_trading_fee(array $fee, ?array $market = null): array {
        $marketId = $this->safe_string($fee, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'maker' => $this->safe_number($fee, 'makerCommissionRate'),
            'taker' => $this->safe_number($fee, 'takerCommissionRate'),
            'percentage' => false,
            'tierBased' => false,
        );
    }

    public function fetch_trading_fee(string $symbol, $params = array ()): array {
        /**
         * fetch the trading fees for a $market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#change-position-modetrade
         *
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateGetFapiV1CommissionRate ($this->extend($request, $params));
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "makerCommissionRate" => "0.0002",
        //         "takerCommissionRate" => "0.0004"
        //     }
        //
        return $this->parse_trading_fee($response, $market);
    }

    public function parse_order_status(?string $status) {
        $statuses = array(
            'NEW' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'REJECTED' => 'canceled',
            'EXPIRED' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_type(?string $type) {
        $types = array(
            'LIMIT' => 'limit',
            'MARKET' => 'market',
            'STOP' => 'limit',
            'STOP_MARKET' => 'market',
            'TAKE_PROFIT' => 'limit',
            'TAKE_PROFIT_MARKET' => 'market',
            'TRAILING_STOP_MARKET' => 'market',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_order(array $order, ?array $market = null): array {
        //
        //     {
        //         "avgPrice" => "0.00000",
        //         "clientOrderId" => "abc",
        //         "cumQuote" => "0",
        //         "executedQty" => "0",
        //         "orderId" => 1917641,
        //         "origQty" => "0.40",
        //         "origType" => "TRAILING_STOP_MARKET",
        //         "price" => "0",
        //         "reduceOnly" => false,
        //         "side" => "BUY",
        //         "positionSide" => "SHORT",
        //         "status" => "NEW",
        //         "stopPrice" => "9300",
        //         "closePosition" => false,
        //         "symbol" => "BTCUSDT",
        //         "time" => 1579276756075,
        //         "timeInForce" => "GTC",
        //         "type" => "TRAILING_STOP_MARKET",
        //         "activatePrice" => "9020",
        //         "priceRate" => "0.3",
        //         "updateTime" => 1579276756075,
        //         "workingType" => "CONTRACT_PRICE",
        //         "priceProtect" => false
        //     }
        //
        $info = $order;
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $side = $this->safe_string_lower($order, 'side');
        $timestamp = $this->safe_integer($order, 'time');
        $lastTradeTimestamp = $this->safe_integer($order, 'updateTime');
        $statusId = $this->safe_string_upper($order, 'status');
        $rawType = $this->safe_string_upper($order, 'type');
        $stopPriceString = $this->safe_string($order, 'stopPrice');
        $triggerPrice = $this->parse_number($this->omit_zero($stopPriceString));
        return $this->safe_order(array(
            'info' => $info,
            'id' => $this->safe_string($order, 'orderId'),
            'clientOrderId' => $this->safe_string($order, 'clientOrderId'),
            'symbol' => $this->safe_symbol($marketId, $market),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'lastUpdateTimestamp' => $this->safe_integer($order, 'updateTime'),
            'type' => $this->parse_order_type($rawType),
            'timeInForce' => $this->safe_string($order, 'timeInForce'),
            'postOnly' => null,
            'side' => $side,
            'price' => $this->safe_string($order, 'price'),
            'triggerPrice' => $triggerPrice,
            'average' => $this->safe_string($order, 'avgPrice'),
            'cost' => $this->safe_string($order, 'cumQuote'),
            'amount' => $this->safe_string($order, 'origQty'),
            'filled' => $this->safe_string($order, 'executedQty'),
            'remaining' => null,
            'status' => $this->parse_order_status($statusId),
            'fee' => null,
            'trades' => null,
            'reduceOnly' => $this->safe_bool_2($order, 'reduceOnly', 'ro'),
        ), $market);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#query-order-user_data
         *
         * @param {string} $id the order $id
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->clientOrderId] a unique $id for the order
         * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderId = $this->safe_string_2($params, 'clientOrderId', 'clientOid');
        $params = $this->omit($params, array( 'clientOrderId', 'clientOid' ));
        if ($clientOrderId !== null) {
            $request['origClientOrderId'] = $clientOrderId;
        } else {
            $request['orderId'] = $id;
        }
        $response = $this->privateGetFapiV1Order ($this->extend($request, $params));
        //
        //     {
        //         "avgPrice" => "0.00000",
        //         "clientOrderId" => "abc",
        //         "cumQuote" => "0",
        //         "executedQty" => "0",
        //         "orderId" => 1917641,
        //         "origQty" => "0.40",
        //         "origType" => "TRAILING_STOP_MARKET",
        //         "price" => "0",
        //         "reduceOnly" => false,
        //         "side" => "BUY",
        //         "positionSide" => "SHORT",
        //         "status" => "NEW",
        //         "stopPrice" => "9300",
        //         "closePosition" => false,
        //         "symbol" => "BTCUSDT",
        //         "time" => 1579276756075,
        //         "timeInForce" => "GTC",
        //         "type" => "TRAILING_STOP_MARKET",
        //         "activatePrice" => "9020",
        //         "priceRate" => "0.3",
        //         "updateTime" => 1579276756075,
        //         "workingType" => "CONTRACT_PRICE",
        //         "priceProtect" => false
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_open_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetch an open order by the $id
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#query-current-open-order-user_data
         *
         * @param {string} $id order $id
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderId = $this->safe_string_2($params, 'clientOrderId', 'clientOid');
        $params = $this->omit($params, array( 'clientOrderId', 'clientOid' ));
        if ($clientOrderId !== null) {
            $request['origClientOrderId'] = $clientOrderId;
        } else {
            $request['orderId'] = $id;
        }
        $response = $this->privateGetFapiV1OpenOrder ($this->extend($request, $params));
        //
        //     {
        //         "avgPrice" => "0.00000",
        //         "clientOrderId" => "abc",
        //         "cumQuote" => "0",
        //         "executedQty" => "0",
        //         "orderId" => 1917641,
        //         "origQty" => "0.40",
        //         "origType" => "TRAILING_STOP_MARKET",
        //         "price" => "0",
        //         "reduceOnly" => false,
        //         "side" => "BUY",
        //         "positionSide" => "SHORT",
        //         "status" => "NEW",
        //         "stopPrice" => "9300",
        //         "closePosition" => false,
        //         "symbol" => "BTCUSDT",
        //         "time" => 1579276756075,
        //         "timeInForce" => "GTC",
        //         "type" => "TRAILING_STOP_MARKET",
        //         "activatePrice" => "9020",
        //         "priceRate" => "0.3",
        //         "updateTime" => 1579276756075,
        //         "workingType" => "CONTRACT_PRICE",
        //         "priceProtect" => false
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple orders made by the user
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#all-orders-user_data
         *
         * @param {string} $symbol unified $market $symbol of the $market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
        }
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            if ($limit > 1000) {
                $limit = 1000; // Default 500; max 1000
            }
            $request['limit'] = $limit;
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        $response = $this->privateGetFapiV1AllOrders ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "avgPrice" => "0.00000",
        //             "clientOrderId" => "abc",
        //             "cumQuote" => "0",
        //             "executedQty" => "0",
        //             "orderId" => 1917641,
        //             "origQty" => "0.40",
        //             "origType" => "TRAILING_STOP_MARKET",
        //             "price" => "0",
        //             "reduceOnly" => false,
        //             "side" => "BUY",
        //             "positionSide" => "SHORT",
        //             "status" => "NEW",
        //             "stopPrice" => "9300",
        //             "closePosition" => false,
        //             "symbol" => "BTCUSDT",
        //             "time" => 1579276756075,
        //             "timeInForce" => "GTC",
        //             "type" => "TRAILING_STOP_MARKET",
        //             "activatePrice" => "9020",
        //             "priceRate" => "0.3",
        //             "updateTime" => 1579276756075,
        //             "workingType" => "CONTRACT_PRICE",
        //             "priceProtect" => false
        //         }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#current-all-open-orders-user_data
         *
         * fetch all unfilled currently open orders
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch open orders for
         * @param {int} [$limit] the maximum number of  open orders structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $response = $this->privateGetFapiV1OpenOrders ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "avgPrice" => "0.00000",
        //             "clientOrderId" => "abc",
        //             "cumQuote" => "0",
        //             "executedQty" => "0",
        //             "orderId" => 1917641,
        //             "origQty" => "0.40",
        //             "origType" => "TRAILING_STOP_MARKET",
        //             "price" => "0",
        //             "reduceOnly" => false,
        //             "side" => "BUY",
        //             "positionSide" => "SHORT",
        //             "status" => "NEW",
        //             "stopPrice" => "9300",
        //             "closePosition" => false,
        //             "symbol" => "BTCUSDT",
        //             "time" => 1579276756075,
        //             "timeInForce" => "GTC",
        //             "type" => "TRAILING_STOP_MARKET",
        //             "activatePrice" => "9020",
        //             "priceRate" => "0.3",
        //             "updateTime" => 1579276756075,
        //             "workingType" => "CONTRACT_PRICE",
        //             "priceProtect" => false
        //         }
        //     )
        //
        return $this->parse_orders($response, $market, $since, $limit);
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        /**
         * create a trade order
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#new-order--trade
         *
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit' or 'STOP' or 'STOP_MARKET' or 'TAKE_PROFIT' or 'TAKE_PROFIT_MARKET' or 'TRAILING_STOP_MARKET'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of you want to trade in units of the base currency
         * @param {float} [$price] the $price that the order is to be fulfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->reduceOnly] for swap and future reduceOnly is a string 'true' or 'false' that cant be sent with close position set to true or in hedge mode. For spot margin and option reduceOnly is a boolean.
         * @param {boolean} [$params->test] whether to use the $test endpoint or not, default is false
         * @param {float} [$params->triggerPrice] the $price that a trigger order is triggered at
         * @param {string} [$params->positionSide] "BOTH" for one-way mode, "LONG" for buy $side of hedged mode, "SHORT" for sell $side of hedged mode
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $test = $this->safe_bool($params, 'test', false);
        $params = $this->omit($params, 'test');
        $request = $this->create_order_request($symbol, $type, $side, $amount, $price, $params);
        $response = null;
        if ($test) {
            $response = $this->privatePostFapiV1OrderTest ($request);
        } else {
            $response = $this->privatePostFapiV1Order ($request);
        }
        return $this->parse_order($response, $market);
    }

    public function create_orders(array $orders, $params = array ()) {
        /**
         * create a list of trade $orders
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#place-multiple-$orders--trade
         *
         * @param {Array} $orders list of $orders to create, each object should contain the parameters required by createOrder, namely symbol, $type, $side, $amount, $price and $params
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $ordersRequests = array();
        if (strlen($orders) > 5) {
            throw new InvalidOrder($this->id . ' createOrders() order list max 5 orders');
        }
        for ($i = 0; $i < count($orders); $i++) {
            $rawOrder = $orders[$i];
            $marketId = $this->safe_string($rawOrder, 'symbol');
            $type = $this->safe_string($rawOrder, 'type');
            $side = $this->safe_string($rawOrder, 'side');
            $amount = $this->safe_value($rawOrder, 'amount');
            $price = $this->safe_value($rawOrder, 'price');
            $orderParams = $this->safe_dict($rawOrder, 'params', array());
            $orderRequest = $this->create_order_request($marketId, $type, $side, $amount, $price, $orderParams);
            $ordersRequests[] = $orderRequest;
        }
        $request = array(
            'batchOrders' => $ordersRequests,
        );
        $response = $this->privatePostFapiV1BatchOrders ($this->extend($request, $params));
        return $this->parse_orders($response);
    }

    public function create_order_request(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        /**
         * @ignore
         * helper function to build the $request
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much you want to trade in units of the base currency
         * @param {float} [$price] the $price that the order is to be fulfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} $request to be sent to the exchange
         */
        $market = $this->market($symbol);
        $uppercaseType = strtoupper($type);
        $request = array(
            'symbol' => $market['id'],
            'side' => strtoupper($side),
            'type' => $uppercaseType,
        );
        $clientOrderId = $this->safe_string_2($params, 'newClientOrderId', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['newClientOrderId'] = $clientOrderId;
        }
        $timeInForceIsRequired = false;
        $priceIsRequired = false;
        $triggerPriceIsRequired = false;
        $quantityIsRequired = false;
        if ($uppercaseType === 'MARKET') {
            $quantityIsRequired = true;
        } elseif ($uppercaseType === 'LIMIT') {
            $timeInForceIsRequired = true;
            $quantityIsRequired = true;
            $priceIsRequired = true;
        } elseif (($uppercaseType === 'STOP') || ($uppercaseType === 'TAKE_PROFIT')) {
            $quantityIsRequired = true;
            $priceIsRequired = true;
            $triggerPriceIsRequired = true;
        } elseif (($uppercaseType === 'STOP_MARKET') || ($uppercaseType === 'TAKE_PROFIT_MARKET')) {
            $triggerPriceIsRequired = true;
        } elseif ($uppercaseType === 'TRAILING_STOP_MARKET') {
            $trailingPercent = $this->safe_string_n($params, array( 'trailingPercent', 'callbackRate', 'trailingDelta' ));
            $trailingTriggerPrice = $this->safe_string_2($params, 'trailingTriggerPrice', 'activationPrice');
            $request['callbackRate'] = $trailingPercent;
            if ($trailingTriggerPrice !== null) {
                $request['activationPrice'] = $this->price_to_precision($symbol, $trailingTriggerPrice);
            }
        }
        if ($quantityIsRequired) {
            $marketAmountPrecision = $this->safe_string($market['precision'], 'amount');
            $isPrecisionAvailable = ($marketAmountPrecision !== null);
            if ($isPrecisionAvailable) {
                $request['quantity'] = $this->amount_to_precision($symbol, $amount);
            } else {
                $request['quantity'] = $this->parse_to_numeric($amount);
            }
        }
        if ($priceIsRequired) {
            if ($price === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires a $price argument for a ' . $type . ' order');
            }
            $pricePrecision = $this->safe_string($market['precision'], 'price');
            $isPricePrecisionAvailable = ($pricePrecision !== null);
            if ($isPricePrecisionAvailable) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            } else {
                $request['price'] = $this->parse_to_numeric($price);
            }
        }
        if ($triggerPriceIsRequired) {
            $stopPrice = $this->safe_string_2($params, 'triggerPrice', 'stopPrice');
            if ($stopPrice === null) {
                throw new InvalidOrder($this->id . ' createOrder() requires a $stopPrice extra param for a ' . $type . ' order');
            }
            if ($stopPrice !== null) {
                $request['stopPrice'] = $this->price_to_precision($symbol, $stopPrice);
            }
        }
        if ($timeInForceIsRequired && ($this->safe_string($params, 'timeInForce') === null) && ($this->safe_string($request, 'timeInForce') === null)) {
            $request['timeInForce'] = $this->safe_string($this->options, 'defaultTimeInForce'); // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
        }
        $requestParams = $this->omit($params, array( 'newClientOrderId', 'clientOrderId', 'stopPrice', 'triggerPrice', 'trailingTriggerPrice', 'trailingPercent', 'trailingDelta' ));
        return $this->extend($request, $requestParams);
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders in a $market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#cancel-all-open-orders-trade
         *
         * @param {string} $symbol unified $market $symbol of the $market to cancel orders in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateDeleteFapiV1AllOpenOrders ($this->extend($request, $params));
        //
        //     {
        //         "code" => "200",
        //         "msg" => "The operation of cancel all open order is done."
        //     }
        //
        return array(
            $this->safe_order(array(
                'info' => $response,
            )),
        );
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#cancel-order-trade
         *
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderId = $this->safe_string_n($params, array( 'origClientOrderId', 'clientOrderId', 'newClientStrategyId' ));
        if ($clientOrderId !== null) {
            $request['origClientOrderId'] = $clientOrderId;
        } else {
            $request['orderId'] = $id;
        }
        $params = $this->omit($params, array( 'origClientOrderId', 'clientOrderId', 'newClientStrategyId' ));
        $response = $this->privateDeleteFapiV1Order ($this->extend($request, $params));
        return $this->parse_order($response, $market);
    }

    public function cancel_orders(array $ids, ?string $symbol = null, $params = array ()) {
        /**
         * cancel multiple orders
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#cancel-multiple-orders-trade
         *
         * @param {string[]} $ids order $ids
         * @param {string} [$symbol] unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         *
         * EXCHANGE SPECIFIC PARAMETERS
         * @param {string[]} [$params->origClientOrderIdList] max length 10 e.g. ["my_id_1","my_id_2"], encode the double quotes. No space after comma
         * @param {int[]} [$params->recvWindow]
         * @return {array} an list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderIdList = $this->safe_list($params, 'origClientOrderIdList');
        if ($clientOrderIdList !== null) {
            $request['origClientOrderIdList'] = $clientOrderIdList;
        } else {
            $request['orderIdList'] = $ids;
        }
        $response = $this->privateDeleteFapiV1BatchOrders ($this->extend($request, $params));
        //
        //    array(
        //        array(
        //            "clientOrderId" => "myOrder1",
        //            "cumQty" => "0",
        //            "cumQuote" => "0",
        //            "executedQty" => "0",
        //            "orderId" => 283194212,
        //            "origQty" => "11",
        //            "origType" => "TRAILING_STOP_MARKET",
        //            "price" => "0",
        //            "reduceOnly" => false,
        //            "side" => "BUY",
        //            "positionSide" => "SHORT",
        //            "status" => "CANCELED",
        //            "stopPrice" => "9300",                  // please ignore when order type is TRAILING_STOP_MARKET
        //            "closePosition" => false,               // if Close-All
        //            "symbol" => "BTCUSDT",
        //            "timeInForce" => "GTC",
        //            "type" => "TRAILING_STOP_MARKET",
        //            "activatePrice" => "9020",              // activation price, only return with TRAILING_STOP_MARKET order
        //            "priceRate" => "0.3",                   // callback rate, only return with TRAILING_STOP_MARKET order
        //            "updateTime" => 1571110484038,
        //            "workingType" => "CONTRACT_PRICE",
        //            "priceProtect" => false,                // if conditional order trigger is protected
        //        ),
        //        {
        //            "code" => -2011,
        //            "msg" => "Unknown order sent."
        //        }
        //    )
        //
        return $this->parse_orders($response, $market);
    }

    public function set_leverage(int $leverage, ?string $symbol = null, $params = array ()) {
        /**
         * set the level of $leverage for a $market
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#change-initial-$leverage-trade
         *
         * @param {float} $leverage the rate of $leverage
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} $response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        if (($leverage < 1) || ($leverage > 125)) {
            throw new BadRequest($this->id . ' $leverage should be between 1 and 125');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'leverage' => $leverage,
        );
        $response = $this->privatePostFapiV1Leverage ($this->extend($request, $params));
        //
        //     {
        //         "leverage" => 21,
        //         "maxNotionalValue" => "1000000",
        //         "symbol" => "BTCUSDT"
        //     }
        //
        return $response;
    }

    public function fetch_leverages(?array $symbols = null, $params = array ()): array {
        /**
         * fetch the set leverage for all markets
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#position-information-v2-user_data
         *
         * @param {string[]} [$symbols] a list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structures~
         */
        $this->load_markets();
        $response = $this->privateGetFapiV2PositionRisk ($params);
        //
        //     array(
        //         {
        //             "symbol" => "INJUSDT",
        //             "positionAmt" => "0.0",
        //             "entryPrice" => "0.0",
        //             "markPrice" => "0.00000000",
        //             "unRealizedProfit" => "0.00000000",
        //             "liquidationPrice" => "0",
        //             "leverage" => "20",
        //             "maxNotionalValue" => "25000",
        //             "marginType" => "cross",
        //             "isolatedMargin" => "0.00000000",
        //             "isAutoAddMargin" => "false",
        //             "positionSide" => "BOTH",
        //             "notional" => "0",
        //             "isolatedWallet" => "0",
        //             "updateTime" => 0
        //         }
        //     )
        //
        return $this->parse_leverages($response, $symbols, 'symbol');
    }

    public function parse_leverage(array $leverage, ?array $market = null): array {
        //
        //     {
        //         "symbol" => "INJUSDT",
        //         "positionAmt" => "0.0",
        //         "entryPrice" => "0.0",
        //         "markPrice" => "0.00000000",
        //         "unRealizedProfit" => "0.00000000",
        //         "liquidationPrice" => "0",
        //         "leverage" => "20",
        //         "maxNotionalValue" => "25000",
        //         "marginType" => "cross",
        //         "isolatedMargin" => "0.00000000",
        //         "isAutoAddMargin" => "false",
        //         "positionSide" => "BOTH",
        //         "notional" => "0",
        //         "isolatedWallet" => "0",
        //         "updateTime" => 0
        //     }
        //
        $marketId = $this->safe_string($leverage, 'symbol');
        $marginMode = $this->safe_string_lower($leverage, 'marginType');
        $side = $this->safe_string_lower($leverage, 'positionSide');
        $longLeverage = null;
        $shortLeverage = null;
        $leverageValue = $this->safe_integer($leverage, 'leverage');
        if (($side === null) || ($side === 'both')) {
            $longLeverage = $leverageValue;
            $shortLeverage = $leverageValue;
        } elseif ($side === 'long') {
            $longLeverage = $leverageValue;
        } elseif ($side === 'short') {
            $shortLeverage = $leverageValue;
        }
        return array(
            'info' => $leverage,
            'symbol' => $this->safe_symbol($marketId, $market),
            'marginMode' => $marginMode,
            'longLeverage' => $longLeverage,
            'shortLeverage' => $shortLeverage,
        );
    }

    public function fetch_margin_modes(?array $symbols = null, $params = array ()): array {
        /**
         * fetches margin mode of the user
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#position-information-v2-user_data
         *
         * @param {string[]} $symbols unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=margin-mode-structure margin mode structures~
         */
        $this->load_markets();
        $response = $this->privateGetFapiV2PositionRisk ($params);
        //
        //
        //     array(
        //         {
        //             "symbol" => "INJUSDT",
        //             "positionAmt" => "0.0",
        //             "entryPrice" => "0.0",
        //             "markPrice" => "0.00000000",
        //             "unRealizedProfit" => "0.00000000",
        //             "liquidationPrice" => "0",
        //             "leverage" => "20",
        //             "maxNotionalValue" => "25000",
        //             "marginType" => "cross",
        //             "isolatedMargin" => "0.00000000",
        //             "isAutoAddMargin" => "false",
        //             "positionSide" => "BOTH",
        //             "notional" => "0",
        //             "isolatedWallet" => "0",
        //             "updateTime" => 0
        //         }
        //     )
        //
        //
        return $this->parse_margin_modes($response, $symbols, 'symbol', 'swap');
    }

    public function parse_margin_mode(array $marginMode, $market = null): array {
        //
        //     {
        //         "symbol" => "INJUSDT",
        //         "positionAmt" => "0.0",
        //         "entryPrice" => "0.0",
        //         "markPrice" => "0.00000000",
        //         "unRealizedProfit" => "0.00000000",
        //         "liquidationPrice" => "0",
        //         "leverage" => "20",
        //         "maxNotionalValue" => "25000",
        //         "marginType" => "cross",
        //         "isolatedMargin" => "0.00000000",
        //         "isAutoAddMargin" => "false",
        //         "positionSide" => "BOTH",
        //         "notional" => "0",
        //         "isolatedWallet" => "0",
        //         "updateTime" => 0
        //     }
        //
        $marketId = $this->safe_string($marginMode, 'symbol');
        $market = $this->safe_market($marketId, $market);
        return array(
            'info' => $marginMode,
            'symbol' => $market['symbol'],
            'marginMode' => $this->safe_string_lower($marginMode, 'marginType'),
        );
    }

    public function fetch_margin_adjustment_history(?string $symbol = null, ?string $type = null, ?float $since = null, ?float $limit = null, $params = array ()): array {
        /**
         * fetches the history of margin added or reduced from contract isolated positions
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#get-position-margin-change-history-trade
         *
         * @param {string} $symbol unified $market $symbol
         * @param {string} [$type] "add" or "reduce"
         * @param {int} [$since] timestamp in ms of the earliest change to fetch
         * @param {int} [$limit] the maximum amount of changes to fetch
         * @param {array} $params extra parameters specific to the exchange api endpoint
         * @param {int} [$params->until] timestamp in ms of the latest change to fetch
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin structures~
         */
        $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMarginAdjustmentHistory () requires a $symbol argument');
        }
        $market = $this->market($symbol);
        $until = $this->safe_integer($params, 'until');
        $params = $this->omit($params, 'until');
        $request = array(
            'symbol' => $market['id'],
        );
        if ($type !== null) {
            $request['type'] = ($type === 'add') ? 1 : 2;
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($until !== null) {
            $request['endTime'] = $until;
        }
        $response = $this->privateGetFapiV1PositionMarginHistory ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "amount" => "23.36332311",
        //             "asset" => "USDT",
        //             "symbol" => "BTCUSDT",
        //             "time" => 1578047897183,
        //             "type" => 1,
        //             "positionSide" => "BOTH"
        //         }
        //     )
        //
        $modifications = $this->parse_margin_modifications($response);
        return $this->filter_by_symbol_since_limit($modifications, $symbol, $since, $limit);
    }

    public function parse_margin_modification(array $data, ?array $market = null): array {
        //
        //     {
        //         "amount" => "100",
        //         "asset" => "USDT",
        //         "symbol" => "BTCUSDT",
        //         "time" => 1578047900425,
        //         "type" => 1,
        //         "positionSide" => "LONG"
        //     }
        //
        //     {
        //         "amount" => 100.0,
        //         "code" => 200,
        //         "msg" => "Successfully modify position margin.",
        //         "type" => 1
        //     }
        //
        $rawType = $this->safe_integer($data, 'type');
        $errorCode = $this->safe_string($data, 'code');
        $marketId = $this->safe_string($data, 'symbol');
        $timestamp = $this->safe_integer($data, 'time');
        $market = $this->safe_market($marketId, $market);
        $noErrorCode = $errorCode === null;
        $success = $errorCode === '200';
        return array(
            'info' => $data,
            'symbol' => $market['symbol'],
            'type' => ($rawType === 1) ? 'add' : 'reduce',
            'marginMode' => 'isolated',
            'amount' => $this->safe_number($data, 'amount'),
            'code' => $this->safe_string($data, 'asset'),
            'total' => null,
            'status' => ($success || $noErrorCode) ? 'ok' : 'failed',
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
    }

    public function modify_margin_helper(string $symbol, $amount, $addOrReduce, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $amount = $this->amount_to_precision($symbol, $amount);
        $request = array(
            'type' => $addOrReduce,
            'symbol' => $market['id'],
            'amount' => $amount,
        );
        $code = $market['quote'];
        $response = $this->privatePostFapiV1PositionMargin ($this->extend($request, $params));
        //
        //     {
        //         "amount" => 100.0,
        //         "code" => 200,
        //         "msg" => "Successfully modify position margin.",
        //         "type" => 1
        //     }
        //
        return $this->extend($this->parse_margin_modification($response, $market), array(
            'code' => $code,
        ));
    }

    public function reduce_margin(string $symbol, float $amount, $params = array ()): array {
        /**
         * remove margin from a position
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#modify-isolated-position-margin-trade
         *
         * @param {string} $symbol unified market $symbol
         * @param {float} $amount the $amount of margin to remove
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=reduce-margin-structure margin structure~
         */
        return $this->modify_margin_helper($symbol, $amount, 2, $params);
    }

    public function add_margin(string $symbol, float $amount, $params = array ()): array {
        /**
         * add margin
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#modify-isolated-position-margin-trade
         *
         * @param {string} $symbol unified market $symbol
         * @param {float} $amount amount of margin to add
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=add-margin-structure margin structure~
         */
        return $this->modify_margin_helper($symbol, $amount, 1, $params);
    }

    public function parse_income($income, ?array $market = null) {
        //
        //     {
        //       "symbol" => "ETHUSDT",
        //       "incomeType" => "FUNDING_FEE",
        //       "income" => "0.00134317",
        //       "asset" => "USDT",
        //       "time" => "1621584000000",
        //       "info" => "FUNDING_FEE",
        //       "tranId" => "4480321991774044580",
        //       "tradeId" => ""
        //     }
        //
        $marketId = $this->safe_string($income, 'symbol');
        $currencyId = $this->safe_string($income, 'asset');
        $timestamp = $this->safe_integer($income, 'time');
        return array(
            'info' => $income,
            'symbol' => $this->safe_symbol($marketId, $market, null, 'swap'),
            'code' => $this->safe_currency_code($currencyId),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'id' => $this->safe_string($income, 'tranId'),
            'amount' => $this->safe_number($income, 'income'),
        );
    }

    public function fetch_funding_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch the history of funding payments paid and received on this account
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#get-income-historyuser_data
         *
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch funding history for
         * @param {int} [$limit] the maximum number of funding history structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp in ms of the latest funding history entry
         * @param {boolean} [$params->portfolioMargin] set to true if you would like to fetch the funding history for a portfolio margin account
         * @param {string} [$params->subType] "linear" or "inverse"
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-history-structure funding history structure~
         */
        $this->load_markets();
        $market = null;
        $request = array(
            'incomeType' => 'FUNDING_FEE', // "TRANSFER"，"WELCOME_BONUS", "REALIZED_PNL"，"FUNDING_FEE", "COMMISSION", "INSURANCE_CLEAR", and "MARKET_MERCHANT_RETURN_REWARD"
        );
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = min ($limit, 1000); // max 1000
        }
        $response = $this->privateGetFapiV1Income ($this->extend($request, $params));
        return $this->parse_incomes($response, $market, $since, $limit);
    }

    public function parse_ledger_entry(array $item, ?array $currency = null): array {
        //
        //     {
        //         "symbol" => "",
        //         "incomeType" => "TRANSFER",
        //         "income" => "10.00000000",
        //         "asset" => "USDT",
        //         "time" => 1677645250000,
        //         "info" => "TRANSFER",
        //         "tranId" => 131001573082,
        //         "tradeId" => ""
        //     }
        //
        $amount = $this->safe_string($item, 'income');
        $direction = null;
        if (Precise::string_le($amount, '0')) {
            $direction = 'out';
            $amount = Precise::string_mul('-1', $amount);
        } else {
            $direction = 'in';
        }
        $currencyId = $this->safe_string($item, 'asset');
        $code = $this->safe_currency_code($currencyId, $currency);
        $currency = $this->safe_currency($currencyId, $currency);
        $timestamp = $this->safe_integer($item, 'time');
        $type = $this->safe_string($item, 'incomeType');
        return $this->safe_ledger_entry(array(
            'info' => $item,
            'id' => $this->safe_string($item, 'tranId'),
            'direction' => $direction,
            'account' => null,
            'referenceAccount' => null,
            'referenceId' => $this->safe_string($item, 'tradeId'),
            'type' => $this->parse_ledger_entry_type($type),
            'currency' => $code,
            'amount' => $this->parse_number($amount),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'before' => null,
            'after' => null,
            'status' => null,
            'fee' => null,
        ), $currency);
    }

    public function parse_ledger_entry_type($type) {
        $ledgerType = array(
            'TRANSFER' => 'transfer',
            'WELCOME_BONUS' => 'cashback',
            'REALIZED_PNL' => 'trade',
            'FUNDING_FEE' => 'fee',
            'COMMISSION' => 'commission',
            'INSURANCE_CLEAR' => 'settlement',
            'MARKET_MERCHANT_RETURN_REWARD' => 'cashback',
        );
        return $this->safe_string($ledgerType, $type, $type);
    }

    public function fetch_ledger(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch the history of changes, actions done by the user or operations that altered the balance of the user
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#get-income-historyuser_data
         *
         * @param {string} [$code] unified $currency $code
         * @param {int} [$since] timestamp in ms of the earliest ledger entry
         * @param {int} [$limit] max number of ledger entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp in ms of the latest ledger entry
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ledger ledger structure~
         */
        $this->load_markets();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        $request = array();
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = min ($limit, 1000); // max 1000
        }
        $until = $this->safe_integer($params, 'until');
        if ($until !== null) {
            $params = $this->omit($params, 'until');
            $request['endTime'] = $until;
        }
        $response = $this->privateGetFapiV1Income ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "symbol" => "",
        //             "incomeType" => "TRANSFER",
        //             "income" => "10.00000000",
        //             "asset" => "USDT",
        //             "time" => 1677645250000,
        //             "info" => "TRANSFER",
        //             "tranId" => 131001573082,
        //             "tradeId" => ""
        //         }
        //     )
        //
        return $this->parse_ledger($response, $currency, $since, $limit);
    }

    public function parse_position_risk($position, ?array $market = null) {
        //
        //     {
        //         "entryPrice" => "6563.66500",
        //         "marginType" => "isolated",
        //         "isAutoAddMargin" => "false",
        //         "isolatedMargin" => "15517.54150468",
        //         "leverage" => "10",
        //         "liquidationPrice" => "5930.78",
        //         "markPrice" => "6679.50671178",
        //         "maxNotionalValue" => "20000000",
        //         "positionSide" => "LONG",
        //         "positionAmt" => "20.000",
        //         "symbol" => "BTCUSDT",
        //         "unRealizedProfit" => "2316.83423560",
        //         "updateTime" => 1625474304765
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market, null, 'contract');
        $symbol = $this->safe_string($market, 'symbol');
        $contractsAbs = Precise::string_abs($this->safe_string($position, 'positionAmt'));
        $contracts = $this->parse_number($contractsAbs);
        $unrealizedPnlString = $this->safe_string($position, 'unRealizedProfit');
        $unrealizedPnl = $this->parse_number($unrealizedPnlString);
        $liquidationPriceString = $this->omit_zero($this->safe_string($position, 'liquidationPrice'));
        $liquidationPrice = $this->parse_number($liquidationPriceString);
        $marginMode = $this->safe_string($position, 'marginType');
        $side = $this->safe_string_lower($position, 'positionSide');
        $entryPriceString = $this->safe_string($position, 'entryPrice');
        $entryPrice = $this->parse_number($entryPriceString);
        $collateralString = $this->safe_string($position, 'isolatedMargin');
        $collateral = $this->parse_number($collateralString);
        $markPrice = $this->parse_number($this->omit_zero($this->safe_string($position, 'markPrice')));
        $timestamp = $this->safe_integer($position, 'updateTime');
        $positionSide = $this->safe_string($position, 'positionSide');
        $hedged = $positionSide !== 'BOTH';
        return array(
            'info' => $position,
            'id' => null,
            'symbol' => $symbol,
            'contracts' => $contracts,
            'contractSize' => null,
            'unrealizedPnl' => $unrealizedPnl,
            'leverage' => $this->safe_number($position, 'leverage'),
            'liquidationPrice' => $liquidationPrice,
            'collateral' => $collateral,
            'notional' => null,
            'markPrice' => $markPrice,
            'entryPrice' => $entryPrice,
            'timestamp' => $timestamp,
            'initialMargin' => null,
            'initialMarginPercentage' => null,
            'maintenanceMargin' => null,
            'maintenanceMarginPercentage' => null,
            'marginRatio' => null,
            'datetime' => $this->iso8601($timestamp),
            'marginMode' => $marginMode,
            'marginType' => $marginMode, // deprecated
            'side' => $side,
            'hedged' => $hedged,
            'percentage' => null,
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        );
    }

    public function fetch_positions_risk(?array $symbols = null, $params = array ()) {
        /**
         * fetch positions risk
         *
         * @see https://github.com/asterdex/api-docs/blob/master/aster-finance-api.md#position-information-v2-user_data
         *
         * @param {string[]|null} $symbols list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} data on the positions risk
         */
        if ($symbols !== null) {
            if (gettype($symbols) !== 'array' || array_keys($symbols) !== array_keys(array_keys($symbols))) {
                throw new ArgumentsRequired($this->id . ' fetchPositionsRisk() requires an array argument for symbols');
            }
        }
        $this->load_markets();
        $request = array();
        $response = $this->privateGetFapiV2PositionRisk ($this->extend($request, $params));
        //
        //     array(
        //         {
        //             "entryPrice" => "6563.66500",
        //             "marginType" => "isolated",
        //             "isAutoAddMargin" => "false",
        //             "isolatedMargin" => "15517.54150468",
        //             "leverage" => "10",
        //             "liquidationPrice" => "5930.78",
        //             "markPrice" => "6679.50671178",
        //             "maxNotionalValue" => "20000000",
        //             "positionSide" => "LONG",
        //             "positionAmt" => "20.000", // negative value for 'SHORT'
        //             "symbol" => "BTCUSDT",
        //             "unRealizedProfit" => "2316.83423560",
        //             "updateTime" => 1625474304765
        //         }
        //     )
        //
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $rawPosition = $response[$i];
            $entryPriceString = $this->safe_string($rawPosition, 'entryPrice');
            if (Precise::string_gt($entryPriceString, '0')) {
                $result[] = $this->parse_position_risk($response[$i]);
            }
        }
        $symbols = $this->market_symbols($symbols);
        return $this->filter_by_array_positions($result, 'symbol', $symbols, false);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()): array {
        /**
         * fetch all open positions
         *
         * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
         * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Account-Information
         * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V2
         * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/rest-api/Position-Information
         * @see https://developers.binance.com/docs/derivatives/option/trade/Option-Position-Information
         *
         * @param {string[]} [$symbols] list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {array} [$params->params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->method] method name to call, "positionRisk", "account" or "option", default is "positionRisk"
         * @param {bool} [$params->useV2] set to true if you want to use the obsolete endpoint, where some more additional fields were provided
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
         */
        $defaultMethod = null;
        list($defaultMethod, $params) = $this->handle_option_and_params($params, 'fetchPositions', 'method');
        if ($defaultMethod === null) {
            $options = $this->safe_dict($this->options, 'fetchPositions');
            if ($options === null) {
                $defaultMethod = $this->safe_string($this->options, 'fetchPositions', 'positionRisk');
            } else {
                $defaultMethod = 'positionRisk';
            }
        }
        if ($defaultMethod === 'positionRisk') {
            return $this->fetch_positions_risk($symbols, $params);
        } elseif ($defaultMethod === 'account') {
            return $this->fetch_account_positions($symbols, $params);
        } else {
            throw new NotSupported($this->id . '.options["fetchPositions"]["method"] or $params["method"] = "' . $defaultMethod . '" is invalid, please choose between "account", "positionRisk" and "option"');
        }
    }

    public function fetch_account_positions(?array $symbols = null, $params = array ()) {
        /**
         * @ignore
         * fetch account positions
         *
         * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V2
         * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/account/rest-api/Account-Information
         * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/rest-api/Position-Information-V2
         * @see https://developers.binance.com/docs/derivatives/coin-margined-futures/trade/rest-api/Position-Information
         * @see https://developers.binance.com/docs/derivatives/usds-margined-futures/account/rest-api/Account-Information-V3
         *
         * @param {string[]} [$symbols] list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->portfolioMargin] set to true if you would like to fetch positions in a portfolio margin account
         * @param {string} [$params->subType] "linear" or "inverse"
         * @param {boolean} [$params->filterClosed] set to true if you would like to filter out closed positions, default is false
         * @param {boolean} [$params->useV2] set to true if you want to use obsolete endpoint, where some more additional fields were provided
         * @return {array} data on account positions
         */
        if ($symbols !== null) {
            if (gettype($symbols) !== 'array' || array_keys($symbols) !== array_keys(array_keys($symbols))) {
                throw new ArgumentsRequired($this->id . ' fetchPositions() requires an array argument for symbols');
            }
        }
        $this->load_markets();
        $this->load_leverage_brackets(false, $params);
        $defaultType = $this->safe_string($this->options, 'defaultType', 'future');
        $type = $this->safe_string($params, 'type', $defaultType);
        $params = $this->omit($params, 'type');
        $subType = null;
        list($subType, $params) = $this->handle_sub_type_and_params('fetchAccountPositions', null, $params, 'linear');
        $isPortfolioMargin = null;
        list($isPortfolioMargin, $params) = $this->handle_option_and_params_2($params, 'fetchAccountPositions', 'papi', 'portfolioMargin', false);
        $response = $this->privateGetFapiV2Account ($params);
        $filterClosed = null;
        list($filterClosed, $params) = $this->handle_option_and_params($params, 'fetchAccountPositions', 'filterClosed', false);
        $result = $this->parse_account_positions($response, $filterClosed);
        $symbols = $this->market_symbols($symbols);
        return $this->filter_by_array_positions($result, 'symbol', $symbols, false);
    }

    public function load_leverage_brackets($reload = false, $params = array ()) {
        $this->load_markets();
        // by default cache the leverage $bracket
        // it contains useful stuff like the maintenance margin and initial margin for positions
        $leverageBrackets = $this->safe_dict($this->options, 'leverageBrackets');
        if (($leverageBrackets === null) || ($reload)) {
            $defaultType = $this->safe_string($this->options, 'defaultType', 'future');
            $type = $this->safe_string($params, 'type', $defaultType);
            $query = $this->omit($params, 'type');
            $subType = null;
            list($subType, $params) = $this->handle_sub_type_and_params('loadLeverageBrackets', null, $params, 'linear');
            $isPortfolioMargin = null;
            list($isPortfolioMargin, $params) = $this->handle_option_and_params_2($params, 'loadLeverageBrackets', 'papi', 'portfolioMargin', false);
            $response = $this->publicGetFapiV1LeverageBracket ($query);
            $this->options['leverageBrackets'] = $this->create_safe_dictionary();
            for ($i = 0; $i < count($response); $i++) {
                $entry = $response[$i];
                $marketId = $this->safe_string($entry, 'symbol');
                $symbol = $this->safe_symbol($marketId, null, null, 'contract');
                $brackets = $this->safe_list($entry, 'brackets', array());
                $result = array();
                for ($j = 0; $j < count($brackets); $j++) {
                    $bracket = $brackets[$j];
                    $floorValue = $this->safe_string_2($bracket, 'notionalFloor', 'qtyFloor');
                    $maintenanceMarginPercentage = $this->safe_string($bracket, 'maintMarginRatio');
                    $result[] = array( $floorValue, $maintenanceMarginPercentage );
                }
                $this->options['leverageBrackets'][$symbol] = $result;
            }
        }
        return $this->options['leverageBrackets'];
    }

    public function parse_account_positions($account, $filterClosed = false) {
        $positions = $this->safe_list($account, 'positions');
        $assets = $this->safe_list($account, 'assets', array());
        $balances = array();
        for ($i = 0; $i < count($assets); $i++) {
            $entry = $assets[$i];
            $currencyId = $this->safe_string($entry, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $crossWalletBalance = $this->safe_string($entry, 'crossWalletBalance');
            $crossUnPnl = $this->safe_string($entry, 'crossUnPnl');
            $balances[$code] = array(
                'crossMargin' => Precise::string_add($crossWalletBalance, $crossUnPnl),
                'crossWalletBalance' => $crossWalletBalance,
            );
        }
        $result = array();
        for ($i = 0; $i < count($positions); $i++) {
            $position = $positions[$i];
            $marketId = $this->safe_string($position, 'symbol');
            $market = $this->safe_market($marketId, null, null, 'contract');
            $code = $market['linear'] ? $market['quote'] : $market['base'];
            $maintenanceMargin = $this->safe_string($position, 'maintMargin');
            // check for maintenance margin so empty $positions are not returned
            $isPositionOpen = ($maintenanceMargin !== '0') && ($maintenanceMargin !== '0.00000000');
            if (!$filterClosed || $isPositionOpen) {
                // sometimes not all the codes are correctly returned...
                if (is_array($balances) && array_key_exists($code, $balances)) {
                    $parsed = $this->parse_account_position($this->extend($position, array(
                        'crossMargin' => $balances[$code]['crossMargin'],
                        'crossWalletBalance' => $balances[$code]['crossWalletBalance'],
                    )), $market);
                    $result[] = $parsed;
                }
            }
        }
        return $result;
    }

    public function parse_account_position($position, ?array $market = null) {
        //
        // $usdm
        //
        // v3 (similar for cross & $isolated)
        //
        //    {
        //        "symbol" => "WLDUSDT",
        //        "positionSide" => "BOTH",
        //        "positionAmt" => "-849",
        //        "unrealizedProfit" => "11.17920750",
        //        "notional" => "-1992.46079250",
        //        "isolatedMargin" => "0",
        //        "isolatedWallet" => "0",
        //        "initialMargin" => "99.62303962",
        //        "maintMargin" => "11.95476475",
        //        "updateTime" => "1721995760449"
        //        "leverage" => "50",                        // in v2
        //        "entryPrice" => "2.34",                    // in v2
        //        "positionInitialMargin" => "118.82116614", // in v2
        //        "openOrderInitialMargin" => "0",           // in v2
        //        "isolated" => false,                       // in v2
        //        "breakEvenPrice" => "2.3395788",           // in v2
        //        "maxNotional" => "25000",                  // in v2
        //        "bidNotional" => "0",                      // in v2
        //        "askNotional" => "0"                       // in v2
        //    }
        //
        // coinm
        //
        //     {
        //       "symbol" => "BTCUSD_210625",
        //       "initialMargin" => "0.00024393",
        //       "maintMargin" => "0.00002439",
        //       "unrealizedProfit" => "-0.00000163",
        //       "positionInitialMargin" => "0.00024393",
        //       "openOrderInitialMargin" => "0",
        //       "leverage" => "10",
        //       "isolated" => false,
        //       "positionSide" => "BOTH",
        //       "entryPrice" => "41021.20000069",
        //       "maxQty" => "100",
        //       "notionalValue" => "0.00243939",
        //       "isolatedWallet" => "0",
        //       "crossMargin" => "0.314"
        //       "crossWalletBalance" => "34",
        //     }
        //
        // linear portfolio margin
        //
        //     {
        //         "symbol" => "CTSIUSDT",
        //         "initialMargin" => "0",
        //         "maintMargin" => "0",
        //         "unrealizedProfit" => "0.00000000",
        //         "positionInitialMargin" => "0",
        //         "openOrderInitialMargin" => "0",
        //         "leverage" => "20",
        //         "entryPrice" => "0.0",
        //         "maxNotional" => "25000",
        //         "bidNotional" => "0",
        //         "askNotional" => "0",
        //         "positionSide" => "SHORT",
        //         "positionAmt" => "0",
        //         "updateTime" => 0,
        //         "notional" => "0",
        //         "breakEvenPrice" => "0.0"
        //     }
        //
        // inverse portoflio margin
        //
        //     {
        //         "symbol" => "TRXUSD_PERP",
        //         "initialMargin" => "0",
        //         "maintMargin" => "0",
        //         "unrealizedProfit" => "0.00000000",
        //         "positionInitialMargin" => "0",
        //         "openOrderInitialMargin" => "0",
        //         "leverage" => "20",
        //         "entryPrice" => "0.00000000",
        //         "positionSide" => "SHORT",
        //         "positionAmt" => "0",
        //         "maxQty" => "5000000",
        //         "updateTime" => 0,
        //         "notionalValue" => "0",
        //         "breakEvenPrice" => "0.00000000"
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market, null, 'contract');
        $symbol = $this->safe_string($market, 'symbol');
        $leverageString = $this->safe_string($position, 'leverage');
        $leverage = ($leverageString !== null) ? intval($leverageString) : null;
        $initialMarginString = $this->safe_string($position, 'initialMargin');
        $initialMargin = $this->parse_number($initialMarginString);
        $initialMarginPercentageString = null;
        if ($leverageString !== null) {
            $initialMarginPercentageString = Precise::string_div('1', $leverageString, 8);
            $rational = $this->is_round_number(fmod(1000, $leverage));
            if (!$rational) {
                $initialMarginPercentageString = Precise::string_div(Precise::string_add($initialMarginPercentageString, '1e-8'), '1', 8);
            }
        }
        // to notionalValue
        $usdm = (is_array($position) && array_key_exists('notional', $position));
        $maintenanceMarginString = $this->safe_string($position, 'maintMargin');
        $maintenanceMargin = $this->parse_number($maintenanceMarginString);
        $entryPriceString = $this->safe_string($position, 'entryPrice');
        $entryPrice = $this->parse_number($entryPriceString);
        $notionalString = $this->safe_string_2($position, 'notional', 'notionalValue');
        $notionalStringAbs = Precise::string_abs($notionalString);
        $notional = $this->parse_number($notionalStringAbs);
        $contractsString = $this->safe_string($position, 'positionAmt');
        $contractsStringAbs = Precise::string_abs($contractsString);
        if ($contractsString === null) {
            $entryNotional = Precise::string_mul(Precise::string_mul($leverageString, $initialMarginString), $entryPriceString);
            $contractSizeNew = $this->safe_string($market, 'contractSize');
            $contractsString = Precise::string_div($entryNotional, $contractSizeNew);
            $contractsStringAbs = Precise::string_div(Precise::string_add($contractsString, '0.5'), '1', 0);
        }
        $contracts = $this->parse_number($contractsStringAbs);
        $leverageBrackets = $this->safe_dict($this->options, 'leverageBrackets', array());
        $leverageBracket = $this->safe_list($leverageBrackets, $symbol, array());
        $maintenanceMarginPercentageString = null;
        for ($i = 0; $i < count($leverageBracket); $i++) {
            $bracket = $leverageBracket[$i];
            if (Precise::string_lt($notionalStringAbs, $bracket[0])) {
                break;
            }
            $maintenanceMarginPercentageString = $bracket[1];
        }
        $maintenanceMarginPercentage = $this->parse_number($maintenanceMarginPercentageString);
        $unrealizedPnlString = $this->safe_string($position, 'unrealizedProfit');
        $unrealizedPnl = $this->parse_number($unrealizedPnlString);
        $timestamp = $this->safe_integer($position, 'updateTime');
        if ($timestamp === 0) {
            $timestamp = null;
        }
        $isolated = $this->safe_bool($position, 'isolated');
        if ($isolated === null) {
            $isolatedMarginRaw = $this->safe_string($position, 'isolatedMargin');
            $isolated = !Precise::string_eq($isolatedMarginRaw, '0');
        }
        $marginMode = null;
        $collateralString = null;
        $walletBalance = null;
        if ($isolated) {
            $marginMode = 'isolated';
            $walletBalance = $this->safe_string($position, 'isolatedWallet');
            $collateralString = Precise::string_add($walletBalance, $unrealizedPnlString);
        } else {
            $marginMode = 'cross';
            $walletBalance = $this->safe_string($position, 'crossWalletBalance');
            $collateralString = $this->safe_string($position, 'crossMargin');
        }
        $collateral = $this->parse_number($collateralString);
        $marginRatio = null;
        $side = null;
        $percentage = null;
        $liquidationPriceStringRaw = null;
        $liquidationPrice = null;
        $contractSize = $this->safe_value($market, 'contractSize');
        $contractSizeString = $this->number_to_string($contractSize);
        if (Precise::string_equals($notionalString, '0')) {
            $entryPrice = null;
        } else {
            $side = Precise::string_lt($notionalString, '0') ? 'short' : 'long';
            $marginRatio = $this->parse_number(Precise::string_div(Precise::string_add(Precise::string_div($maintenanceMarginString, $collateralString), '5e-5'), '1', 4));
            $percentage = $this->parse_number(Precise::string_mul(Precise::string_div($unrealizedPnlString, $initialMarginString, 4), '100'));
            if ($usdm) {
                // calculate liquidation price
                //
                // $liquidationPrice = ($walletBalance / ($contracts * (±1 . mmp))) . (±$entryPrice / (±1 . mmp))
                //
                // mmp = $maintenanceMarginPercentage
                // where ± is negative for long and positive for short
                // TODO => calculate liquidation price for coinm $contracts
                $onePlusMaintenanceMarginPercentageString = null;
                $entryPriceSignString = $entryPriceString;
                if ($side === 'short') {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_add('1', $maintenanceMarginPercentageString);
                } else {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_add('-1', $maintenanceMarginPercentageString);
                    $entryPriceSignString = Precise::string_mul('-1', $entryPriceSignString);
                }
                $leftSide = Precise::string_div($walletBalance, Precise::string_mul($contractsStringAbs, $onePlusMaintenanceMarginPercentageString));
                $rightSide = Precise::string_div($entryPriceSignString, $onePlusMaintenanceMarginPercentageString);
                $liquidationPriceStringRaw = Precise::string_add($leftSide, $rightSide);
            } else {
                // calculate liquidation price
                //
                // $liquidationPrice = ($contracts * $contractSize(±1 - mmp)) / (±1/entryPrice * $contracts * $contractSize - $walletBalance)
                //
                $onePlusMaintenanceMarginPercentageString = null;
                $entryPriceSignString = $entryPriceString;
                if ($side === 'short') {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_sub('1', $maintenanceMarginPercentageString);
                } else {
                    $onePlusMaintenanceMarginPercentageString = Precise::string_sub('-1', $maintenanceMarginPercentageString);
                    $entryPriceSignString = Precise::string_mul('-1', $entryPriceSignString);
                }
                $size = Precise::string_mul($contractsStringAbs, $contractSizeString);
                $leftSide = Precise::string_mul($size, $onePlusMaintenanceMarginPercentageString);
                $rightSide = Precise::string_sub(Precise::string_mul(Precise::string_div('1', $entryPriceSignString), $size), $walletBalance);
                $liquidationPriceStringRaw = Precise::string_div($leftSide, $rightSide);
            }
            $pricePrecision = $this->precision_from_string($this->safe_string($market['precision'], 'price'));
            $pricePrecisionPlusOne = $pricePrecision + 1;
            $pricePrecisionPlusOneString = (string) $pricePrecisionPlusOne;
            // round half up
            $rounder = new Precise ('5e-' . $pricePrecisionPlusOneString);
            $rounderString = (string) $rounder;
            $liquidationPriceRoundedString = Precise::string_add($rounderString, $liquidationPriceStringRaw);
            $truncatedLiquidationPrice = Precise::string_div($liquidationPriceRoundedString, '1', $pricePrecision);
            if ($truncatedLiquidationPrice[0] === '-') {
                // user cannot be liquidated
                // since he has more $collateral than the $size of the $position
                $truncatedLiquidationPrice = null;
            }
            $liquidationPrice = $this->parse_number($truncatedLiquidationPrice);
        }
        $positionSide = $this->safe_string($position, 'positionSide');
        $hedged = $positionSide !== 'BOTH';
        return array(
            'info' => $position,
            'id' => null,
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'initialMargin' => $initialMargin,
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentageString),
            'maintenanceMargin' => $maintenanceMargin,
            'maintenanceMarginPercentage' => $maintenanceMarginPercentage,
            'entryPrice' => $entryPrice,
            'notional' => $notional,
            'leverage' => $this->parse_number($leverageString),
            'unrealizedPnl' => $unrealizedPnl,
            'contracts' => $contracts,
            'contractSize' => $contractSize,
            'marginRatio' => $marginRatio,
            'liquidationPrice' => $liquidationPrice,
            'markPrice' => null,
            'collateral' => $collateral,
            'marginMode' => $marginMode,
            'side' => $side,
            'hedged' => $hedged,
            'percentage' => $percentage,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->implode_hostname($this->urls['api']['rest']) . '/' . $path;
        if ($api === 'public') {
            if ($params) {
                $url .= '?' . $this->rawencode($params);
            }
        } elseif ($api === 'private') {
            $this->check_required_credentials();
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
            $defaultRecvWindow = $this->safe_integer($this->options, 'recvWindow');
            $extendedParams = $this->extend(array(
                'timestamp' => $this->milliseconds(),
            ), $params);
            if ($defaultRecvWindow !== null) {
                $extendedParams['recvWindow'] = $defaultRecvWindow;
            }
            $recvWindow = $this->safe_integer($params, 'recvWindow');
            if ($recvWindow !== null) {
                $extendedParams['recvWindow'] = $recvWindow;
            }
            $query = null;
            if (($method === 'DELETE') && ($path === 'fapi/v1/batchOrders')) {
                $orderidlist = $this->safe_list($extendedParams, 'orderIdList', array());
                $origclientorderidlist = $this->safe_list($extendedParams, 'origClientOrderIdList', array());
                $extendedParams = $this->omit($extendedParams, array( 'orderIdList', 'origClientOrderIdList' ));
                $query = $this->rawencode($extendedParams);
                $orderidlistLength = count($orderidlist);
                $origclientorderidlistLength = count($origclientorderidlist);
                if ($orderidlistLength > 0) {
                    $query = $query . '&' . 'orderidlist=%5B' . implode('%2C', $orderidlist) . '%5D';
                }
                if ($origclientorderidlistLength > 0) {
                    $query = $query . '&' . 'origclientorderidlist=%5B' . implode('%2C', $origclientorderidlist) . '%5D';
                }
            } else {
                $query = $this->rawencode($extendedParams);
            }
            $signature = $this->hmac($this->encode($query), $this->encode($this->secret), 'sha256');
            $query .= '&' . 'signature=' . $signature;
            if ($method === 'GET') {
                $url .= '?' . $query;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function is_inverse(string $type, ?string $subType = null): bool {
        if ($subType === null) {
            return ($type === 'delivery');
        } else {
            return $subType === 'inverse';
        }
    }

    public function is_linear(string $type, ?string $subType = null): bool {
        if ($subType === null) {
            return ($type === 'future') || ($type === 'swap');
        } else {
            return $subType === 'linear';
        }
    }

    public function handle_errors(int $httpCode, string $reason, string $url, string $method, array $headers, string $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // fallback to default error handler
        }
        //
        //    {
        //        "code" => -1121,
        //        "msg" => "Invalid symbol.",
        //    }
        //
        $code = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg');
        if ($code !== null && $code !== '200') {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
        return null;
    }
}
