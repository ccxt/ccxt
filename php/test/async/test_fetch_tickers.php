<?php
namespace ccxt;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
use React\Async;
use React\Promise;
include_once PATH_TO_CCXT . '/test/base/test_ticker.php';

function test_fetch_tickers($exchange, $skipped_properties, $symbol) {
    return Async\async(function () use ($exchange, $skipped_properties, $symbol) {
        $without_symbol = test_fetch_tickers_helper($exchange, $skipped_properties, null);
        $with_symbol = test_fetch_tickers_helper($exchange, $skipped_properties, [$symbol]);
        Async\await(Promise\all([$with_symbol, $without_symbol]));
    }) ();
}


function test_fetch_tickers_helper($exchange, $skipped_properties, $arg_symbols, $arg_params = array()) {
    return Async\async(function () use ($exchange, $skipped_properties, $arg_symbols, $arg_params) {
        $method = 'fetchTickers';
        $response = Async\await($exchange->fetch_tickers($arg_symbols, $arg_params));
        assert(is_array($response), $exchange->id . ' ' . $method . ' ' . $exchange->json($arg_symbols) . ' must return an object. ' . $exchange->json($response));
        $values = is_array($response) ? array_values($response) : array();
        $checked_symbol = null;
        if ($arg_symbols !== null && count($arg_symbols) === 1) {
            $checked_symbol = $arg_symbols[0];
        }
        for ($i = 0; $i < count($values); $i++) {
            // todo: symbol check here
            $ticker = $values[$i];
            test_ticker($exchange, $skipped_properties, $method, $ticker, $checked_symbol);
        }
    }) ();
}
