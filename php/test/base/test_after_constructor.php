<?php
namespace ccxt;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
include_once PATH_TO_CCXT . '/test/exchange/base/test_shared_methods.php';

function test_after_constructor() {
    $exchange = new \ccxt\Exchange(array(
        'id' => 'sampleexchange',
        'rateLimit' => 10.8,
    ));
    // todo: assert (exchange.MAX_VALUE !== undefined);
    // ############# throttler ############# //
    $tocken_bucket = $exchange->get_property($exchange, 'tokenBucket'); // trick for uncamelcase transpilation
    $rate_limit = $exchange->get_property($exchange, 'rateLimit');
    assert($rate_limit === 10.8);
    assert($tocken_bucket !== null);
    assert($tocken_bucket['delay'] === 0.001);
    assert($tocken_bucket['refillRate'] === 1 / $rate_limit);
    // fix decimal/integer issues across langs
    assert($exchange->in_array($tocken_bucket['capacity'], [1, 1]));
    assert($exchange->in_array($tocken_bucket['cost'], [1, 1]));
    assert($exchange->in_array($tocken_bucket['maxCapacity'], [1000, 1000]));
    // todo: assert (exchange.throttler !== undefined);
    // todo: add after change assertion
    // todo: add initial tockenbtucket test
    // ############# markets ############# //
    $sample_market = array(
        'id' => 'BtcUsd',
        'symbol' => 'BTC/USD',
        'base' => 'BTC',
        'quote' => 'USD',
        'baseId' => 'Btc',
        'quoteId' => 'Usd',
        'type' => 'spot',
        'spot' => true,
    );
    $exchange2 = new \ccxt\Exchange(array(
        'id' => 'sampleexchange',
        'markets' => array(
            'BTC/USD' => $sample_market,
        ),
    ));
    assert($exchange2->markets['BTC/USD'] !== null);
    assert('GO_SKIP_START');
    try {
        $exchange3 = new \ccxt\Exchange(array(
            'id' => 'sampleexchange',
            'options' => array(
                'sandbox' => true,
            ),
        ));
        // todo: some extra things should be checked in "catch" but atm skip complexity
        assert($exchange3->urls !== null);
        assert($exchange3->urls['test'] !== null);
        $is_sandbox_mode_enabled = $exchange3->get_property($exchange3, 'isSandboxModeEnabled');
        assert($is_sandbox_mode_enabled);
    } catch(\Throwable $e) {
        $exchange3 = new \ccxt\Exchange(array(
            'id' => 'sampleexchange',
        ));
        // if exception was thrown, it should only happen if 'test' was not in urls
        assert($exchange3->urls === null || !(is_array($exchange3->urls) && array_key_exists('test', $exchange3->urls)));
    }
    assert('GO_SKIP_END');
}
