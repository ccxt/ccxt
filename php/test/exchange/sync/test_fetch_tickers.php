<?php
namespace ccxt;

// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------
include_once PATH_TO_CCXT . '/test/exchange/base/test_ticker.php';

function test_fetch_tickers($exchange, $skipped_properties, $symbol) {
    // const withoutSymbol = testFetchTickersHelper (exchange, skippedProperties, undefined);
    // const withSymbol = testFetchTickersHelper (exchange, skippedProperties, [ symbol ]);
    Promise\all([test_fetch_tickers_helper($exchange, $skipped_properties, null), test_fetch_tickers_helper($exchange, $skipped_properties, [$symbol])]);
}


function test_fetch_tickers_helper($exchange, $skipped_properties, $arg_symbols, $arg_params = array()) {
    $method = 'fetchTickers';
    $response = $exchange->fetch_tickers($arg_symbols, $arg_params);
    assert(is_array($response), $exchange->id . ' ' . $method . ' ' . $exchange->json($arg_symbols) . ' must return an object. ' . $exchange->json($response));
    $values = is_array($response) ? array_values($response) : array();
    $checked_symbol = null;
    if ($arg_symbols !== null && count($arg_symbols) === 1) {
        $checked_symbol = $arg_symbols[0];
    }
    assert_non_emtpy_array($exchange, $skipped_properties, $method, $values, $checked_symbol);
    for ($i = 0; $i < count($values); $i++) {
        // todo: symbol check here
        $ticker = $values[$i];
        test_ticker($exchange, $skipped_properties, $method, $ticker, $checked_symbol);
    }
}
