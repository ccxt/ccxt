<?php

namespace ccxt\async\abstract;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


abstract class binancecoinm extends \ccxt\async\binance {
    public function sapi_get_system_status($params = array()) {
        return $this->request('system/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_accountsnapshot($params = array()) {
        return $this->request('accountSnapshot', 'sapi', 'GET', $params, null, null, array("cost" => 240));
    }
    public function sapi_get_margin_asset($params = array()) {
        return $this->request('margin/asset', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_pair($params = array()) {
        return $this->request('margin/pair', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_allassets($params = array()) {
        return $this->request('margin/allAssets', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_allpairs($params = array()) {
        return $this->request('margin/allPairs', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_priceindex($params = array()) {
        return $this->request('margin/priceIndex', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_spot_delist_schedule($params = array()) {
        return $this->request('spot/delist-schedule', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapi_get_asset_assetdividend($params = array()) {
        return $this->request('asset/assetDividend', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_asset_dribblet($params = array()) {
        return $this->request('asset/dribblet', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_asset_transfer($params = array()) {
        return $this->request('asset/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_asset_assetdetail($params = array()) {
        return $this->request('asset/assetDetail', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_asset_tradefee($params = array()) {
        return $this->request('asset/tradeFee', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_asset_ledger_transfer_cloud_mining_querybypage($params = array()) {
        return $this->request('asset/ledger-transfer/cloud-mining/queryByPage', 'sapi', 'GET', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_get_asset_convert_transfer_querybypage($params = array()) {
        return $this->request('asset/convert-transfer/queryByPage', 'sapi', 'GET', $params, null, null, array("cost" => 0.033335));
    }
    public function sapi_get_asset_wallet_balance($params = array()) {
        return $this->request('asset/wallet/balance', 'sapi', 'GET', $params, null, null, array("cost" => 6));
    }
    public function sapi_get_asset_custody_transfer_history($params = array()) {
        return $this->request('asset/custody/transfer-history', 'sapi', 'GET', $params, null, null, array("cost" => 6));
    }
    public function sapi_get_margin_borrow_repay($params = array()) {
        return $this->request('margin/borrow-repay', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_loan($params = array()) {
        return $this->request('margin/loan', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_repay($params = array()) {
        return $this->request('margin/repay', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_account($params = array()) {
        return $this->request('margin/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_transfer($params = array()) {
        return $this->request('margin/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_interesthistory($params = array()) {
        return $this->request('margin/interestHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_forceliquidationrec($params = array()) {
        return $this->request('margin/forceLiquidationRec', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_order($params = array()) {
        return $this->request('margin/order', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_openorders($params = array()) {
        return $this->request('margin/openOrders', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_allorders($params = array()) {
        return $this->request('margin/allOrders', 'sapi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function sapi_get_margin_mytrades($params = array()) {
        return $this->request('margin/myTrades', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_maxborrowable($params = array()) {
        return $this->request('margin/maxBorrowable', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapi_get_margin_maxtransferable($params = array()) {
        return $this->request('margin/maxTransferable', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapi_get_margin_tradecoeff($params = array()) {
        return $this->request('margin/tradeCoeff', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_isolated_transfer($params = array()) {
        return $this->request('margin/isolated/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_isolated_account($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_isolated_pair($params = array()) {
        return $this->request('margin/isolated/pair', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_isolated_allpairs($params = array()) {
        return $this->request('margin/isolated/allPairs', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_isolated_accountlimit($params = array()) {
        return $this->request('margin/isolated/accountLimit', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_interestratehistory($params = array()) {
        return $this->request('margin/interestRateHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_orderlist($params = array()) {
        return $this->request('margin/orderList', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_allorderlist($params = array()) {
        return $this->request('margin/allOrderList', 'sapi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function sapi_get_margin_openorderlist($params = array()) {
        return $this->request('margin/openOrderList', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_margin_crossmargindata($params = array()) {
        return $this->request('margin/crossMarginData', 'sapi', 'GET', $params, null, null, array("cost" => 0.1, "noCoin" => 0.5));
    }
    public function sapi_get_margin_isolatedmargindata($params = array()) {
        return $this->request('margin/isolatedMarginData', 'sapi', 'GET', $params, null, null, array("cost" => 0.1, "noCoin" => 1));
    }
    public function sapi_get_margin_isolatedmargintier($params = array()) {
        return $this->request('margin/isolatedMarginTier', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_ratelimit_order($params = array()) {
        return $this->request('margin/rateLimit/order', 'sapi', 'GET', $params, null, null, array("cost" => 2));
    }
    public function sapi_get_margin_dribblet($params = array()) {
        return $this->request('margin/dribblet', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_margin_dust($params = array()) {
        return $this->request('margin/dust', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_margin_crossmargincollateralratio($params = array()) {
        return $this->request('margin/crossMarginCollateralRatio', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapi_get_margin_exchange_small_liability($params = array()) {
        return $this->request('margin/exchange-small-liability', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapi_get_margin_exchange_small_liability_history($params = array()) {
        return $this->request('margin/exchange-small-liability-history', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapi_get_margin_next_hourly_interest_rate($params = array()) {
        return $this->request('margin/next-hourly-interest-rate', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapi_get_margin_capital_flow($params = array()) {
        return $this->request('margin/capital-flow', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapi_get_margin_delist_schedule($params = array()) {
        return $this->request('margin/delist-schedule', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapi_get_margin_available_inventory($params = array()) {
        return $this->request('margin/available-inventory', 'sapi', 'GET', $params, null, null, array("cost" => 0.3334));
    }
    public function sapi_get_margin_leveragebracket($params = array()) {
        return $this->request('margin/leverageBracket', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_loan_vip_loanable_data($params = array()) {
        return $this->request('loan/vip/loanable/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_vip_collateral_data($params = array()) {
        return $this->request('loan/vip/collateral/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_vip_request_data($params = array()) {
        return $this->request('loan/vip/request/data', 'sapi', 'GET', $params, null, null, array("cost" => 2.6668));
    }
    public function sapi_get_loan_vip_request_interestrate($params = array()) {
        return $this->request('loan/vip/request/interestRate', 'sapi', 'GET', $params, null, null, array("cost" => 2.6668));
    }
    public function sapi_get_loan_income($params = array()) {
        return $this->request('loan/income', 'sapi', 'GET', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_get_loan_ongoing_orders($params = array()) {
        return $this->request('loan/ongoing/orders', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_ltv_adjustment_history($params = array()) {
        return $this->request('loan/ltv/adjustment/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_borrow_history($params = array()) {
        return $this->request('loan/borrow/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_repay_history($params = array()) {
        return $this->request('loan/repay/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_loanable_data($params = array()) {
        return $this->request('loan/loanable/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_collateral_data($params = array()) {
        return $this->request('loan/collateral/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_repay_collateral_rate($params = array()) {
        return $this->request('loan/repay/collateral/rate', 'sapi', 'GET', $params, null, null, array("cost" => 600));
    }
    public function sapi_get_loan_flexible_ongoing_orders($params = array()) {
        return $this->request('loan/flexible/ongoing/orders', 'sapi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function sapi_get_loan_flexible_borrow_history($params = array()) {
        return $this->request('loan/flexible/borrow/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_flexible_repay_history($params = array()) {
        return $this->request('loan/flexible/repay/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_flexible_ltv_adjustment_history($params = array()) {
        return $this->request('loan/flexible/ltv/adjustment/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_flexible_loanable_data($params = array()) {
        return $this->request('loan/flexible/loanable/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_flexible_collateral_data($params = array()) {
        return $this->request('loan/flexible/collateral/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_vip_ongoing_orders($params = array()) {
        return $this->request('loan/vip/ongoing/orders', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_vip_repay_history($params = array()) {
        return $this->request('loan/vip/repay/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapi_get_loan_vip_collateral_account($params = array()) {
        return $this->request('loan/vip/collateral/account', 'sapi', 'GET', $params, null, null, array("cost" => 600));
    }
    public function sapi_get_fiat_orders($params = array()) {
        return $this->request('fiat/orders', 'sapi', 'GET', $params, null, null, array("cost" => 600.03));
    }
    public function sapi_get_fiat_payments($params = array()) {
        return $this->request('fiat/payments', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_futures_transfer($params = array()) {
        return $this->request('futures/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_futures_histdatalink($params = array()) {
        return $this->request('futures/histDataLink', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_rebate_taxquery($params = array()) {
        return $this->request('rebate/taxQuery', 'sapi', 'GET', $params, null, null, array("cost" => 80.004));
    }
    public function sapi_get_capital_config_getall($params = array()) {
        return $this->request('capital/config/getall', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_capital_deposit_address($params = array()) {
        return $this->request('capital/deposit/address', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_capital_deposit_address_list($params = array()) {
        return $this->request('capital/deposit/address/list', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_capital_deposit_hisrec($params = array()) {
        return $this->request('capital/deposit/hisrec', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_capital_deposit_subaddress($params = array()) {
        return $this->request('capital/deposit/subAddress', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_capital_deposit_subhisrec($params = array()) {
        return $this->request('capital/deposit/subHisrec', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_capital_withdraw_history($params = array()) {
        return $this->request('capital/withdraw/history', 'sapi', 'GET', $params, null, null, array("cost" => 1800));
    }
    public function sapi_get_capital_contract_convertible_coins($params = array()) {
        return $this->request('capital/contract/convertible-coins', 'sapi', 'GET', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_get_convert_tradeflow($params = array()) {
        return $this->request('convert/tradeFlow', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_convert_exchangeinfo($params = array()) {
        return $this->request('convert/exchangeInfo', 'sapi', 'GET', $params, null, null, array("cost" => 50));
    }
    public function sapi_get_convert_assetinfo($params = array()) {
        return $this->request('convert/assetInfo', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapi_get_convert_orderstatus($params = array()) {
        return $this->request('convert/orderStatus', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapi_get_convert_limit_queryopenorders($params = array()) {
        return $this->request('convert/limit/queryOpenOrders', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_account_status($params = array()) {
        return $this->request('account/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_account_apitradingstatus($params = array()) {
        return $this->request('account/apiTradingStatus', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_account_apirestrictions_iprestriction($params = array()) {
        return $this->request('account/apiRestrictions/ipRestriction', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_bnbburn($params = array()) {
        return $this->request('bnbBurn', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_futures_account($params = array()) {
        return $this->request('sub-account/futures/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_sub_account_futures_accountsummary($params = array()) {
        return $this->request('sub-account/futures/accountSummary', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_futures_positionrisk($params = array()) {
        return $this->request('sub-account/futures/positionRisk', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_sub_account_futures_internaltransfer($params = array()) {
        return $this->request('sub-account/futures/internalTransfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_list($params = array()) {
        return $this->request('sub-account/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_margin_account($params = array()) {
        return $this->request('sub-account/margin/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_sub_account_margin_accountsummary($params = array()) {
        return $this->request('sub-account/margin/accountSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_sub_account_spotsummary($params = array()) {
        return $this->request('sub-account/spotSummary', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_status($params = array()) {
        return $this->request('sub-account/status', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_sub_account_sub_transfer_history($params = array()) {
        return $this->request('sub-account/sub/transfer/history', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_transfer_subuserhistory($params = array()) {
        return $this->request('sub-account/transfer/subUserHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_universaltransfer($params = array()) {
        return $this->request('sub-account/universalTransfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_sub_account_apirestrictions_iprestriction_thirdpartylist($params = array()) {
        return $this->request('sub-account/apiRestrictions/ipRestriction/thirdPartyList', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_sub_account_transaction_statistics($params = array()) {
        return $this->request('sub-account/transaction-statistics', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapi_get_sub_account_subaccountapi_iprestriction($params = array()) {
        return $this->request('sub-account/subAccountApi/ipRestriction', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_managed_subaccount_asset($params = array()) {
        return $this->request('managed-subaccount/asset', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_managed_subaccount_accountsnapshot($params = array()) {
        return $this->request('managed-subaccount/accountSnapshot', 'sapi', 'GET', $params, null, null, array("cost" => 240));
    }
    public function sapi_get_managed_subaccount_querytranslogforinvestor($params = array()) {
        return $this->request('managed-subaccount/queryTransLogForInvestor', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_managed_subaccount_querytranslogfortradeparent($params = array()) {
        return $this->request('managed-subaccount/queryTransLogForTradeParent', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapi_get_managed_subaccount_fetch_future_asset($params = array()) {
        return $this->request('managed-subaccount/fetch-future-asset', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapi_get_managed_subaccount_marginasset($params = array()) {
        return $this->request('managed-subaccount/marginAsset', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_managed_subaccount_info($params = array()) {
        return $this->request('managed-subaccount/info', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapi_get_managed_subaccount_deposit_address($params = array()) {
        return $this->request('managed-subaccount/deposit/address', 'sapi', 'GET', $params, null, null, array("cost" => 0.006667));
    }
    public function sapi_get_managed_subaccount_query_trans_log($params = array()) {
        return $this->request('managed-subaccount/query-trans-log', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapi_get_lending_daily_product_list($params = array()) {
        return $this->request('lending/daily/product/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_daily_userleftquota($params = array()) {
        return $this->request('lending/daily/userLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_daily_userredemptionquota($params = array()) {
        return $this->request('lending/daily/userRedemptionQuota', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_daily_token_position($params = array()) {
        return $this->request('lending/daily/token/position', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_union_account($params = array()) {
        return $this->request('lending/union/account', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_union_purchaserecord($params = array()) {
        return $this->request('lending/union/purchaseRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_union_redemptionrecord($params = array()) {
        return $this->request('lending/union/redemptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_union_interesthistory($params = array()) {
        return $this->request('lending/union/interestHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_project_list($params = array()) {
        return $this->request('lending/project/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_project_position_list($params = array()) {
        return $this->request('lending/project/position/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_eth_staking_eth_history_stakinghistory($params = array()) {
        return $this->request('eth-staking/eth/history/stakingHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_eth_history_redemptionhistory($params = array()) {
        return $this->request('eth-staking/eth/history/redemptionHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_eth_history_rewardshistory($params = array()) {
        return $this->request('eth-staking/eth/history/rewardsHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_eth_quota($params = array()) {
        return $this->request('eth-staking/eth/quota', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_eth_history_ratehistory($params = array()) {
        return $this->request('eth-staking/eth/history/rateHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_account($params = array()) {
        return $this->request('eth-staking/account', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_wbeth_history_wraphistory($params = array()) {
        return $this->request('eth-staking/wbeth/history/wrapHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_wbeth_history_unwraphistory($params = array()) {
        return $this->request('eth-staking/wbeth/history/unwrapHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_eth_staking_eth_history_wbethrewardshistory($params = array()) {
        return $this->request('eth-staking/eth/history/wbethRewardsHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_mining_pub_algolist($params = array()) {
        return $this->request('mining/pub/algoList', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_mining_pub_coinlist($params = array()) {
        return $this->request('mining/pub/coinList', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_mining_worker_detail($params = array()) {
        return $this->request('mining/worker/detail', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_get_mining_worker_list($params = array()) {
        return $this->request('mining/worker/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_get_mining_payment_list($params = array()) {
        return $this->request('mining/payment/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_get_mining_statistics_user_status($params = array()) {
        return $this->request('mining/statistics/user/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_get_mining_statistics_user_list($params = array()) {
        return $this->request('mining/statistics/user/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_get_mining_payment_uid($params = array()) {
        return $this->request('mining/payment/uid', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_get_bswap_pools($params = array()) {
        return $this->request('bswap/pools', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_bswap_liquidity($params = array()) {
        return $this->request('bswap/liquidity', 'sapi', 'GET', $params, null, null, array("cost" => 0.1, "noPoolId" => 1));
    }
    public function sapi_get_bswap_liquidityops($params = array()) {
        return $this->request('bswap/liquidityOps', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_bswap_quote($params = array()) {
        return $this->request('bswap/quote', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapi_get_bswap_swap($params = array()) {
        return $this->request('bswap/swap', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_bswap_poolconfigure($params = array()) {
        return $this->request('bswap/poolConfigure', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapi_get_bswap_addliquiditypreview($params = array()) {
        return $this->request('bswap/addLiquidityPreview', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapi_get_bswap_removeliquiditypreview($params = array()) {
        return $this->request('bswap/removeLiquidityPreview', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapi_get_bswap_unclaimedrewards($params = array()) {
        return $this->request('bswap/unclaimedRewards', 'sapi', 'GET', $params, null, null, array("cost" => 6.667));
    }
    public function sapi_get_bswap_claimedhistory($params = array()) {
        return $this->request('bswap/claimedHistory', 'sapi', 'GET', $params, null, null, array("cost" => 6.667));
    }
    public function sapi_get_blvt_tokeninfo($params = array()) {
        return $this->request('blvt/tokenInfo', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_blvt_subscribe_record($params = array()) {
        return $this->request('blvt/subscribe/record', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_blvt_redeem_record($params = array()) {
        return $this->request('blvt/redeem/record', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_blvt_userlimit($params = array()) {
        return $this->request('blvt/userLimit', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_apireferral_ifnewuser($params = array()) {
        return $this->request('apiReferral/ifNewUser', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_apireferral_rebate_recentrecord($params = array()) {
        return $this->request('apiReferral/rebate/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_apireferral_rebate_historicalrecord($params = array()) {
        return $this->request('apiReferral/rebate/historicalRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_apireferral_kickback_recentrecord($params = array()) {
        return $this->request('apiReferral/kickback/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_apireferral_kickback_historicalrecord($params = array()) {
        return $this->request('apiReferral/kickback/historicalRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccountapi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccount($params = array()) {
        return $this->request('broker/subAccount', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccountapi_commission_futures($params = array()) {
        return $this->request('broker/subAccountApi/commission/futures', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccountapi_commission_coinfutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/coinFutures', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_info($params = array()) {
        return $this->request('broker/info', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_transfer($params = array()) {
        return $this->request('broker/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_transfer_futures($params = array()) {
        return $this->request('broker/transfer/futures', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_rebate_recentrecord($params = array()) {
        return $this->request('broker/rebate/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_rebate_historicalrecord($params = array()) {
        return $this->request('broker/rebate/historicalRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccount_bnbburn_status($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/status', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccount_deposithist($params = array()) {
        return $this->request('broker/subAccount/depositHist', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccount_spotsummary($params = array()) {
        return $this->request('broker/subAccount/spotSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccount_marginsummary($params = array()) {
        return $this->request('broker/subAccount/marginSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccount_futuressummary($params = array()) {
        return $this->request('broker/subAccount/futuresSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_rebate_futures_recentrecord($params = array()) {
        return $this->request('broker/rebate/futures/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_subaccountapi_iprestriction($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_broker_universaltransfer($params = array()) {
        return $this->request('broker/universalTransfer', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapi_get_account_apirestrictions($params = array()) {
        return $this->request('account/apiRestrictions', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_c2c_ordermatch_listuserorderhistory($params = array()) {
        return $this->request('c2c/orderMatch/listUserOrderHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_nft_history_transactions($params = array()) {
        return $this->request('nft/history/transactions', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_nft_history_deposit($params = array()) {
        return $this->request('nft/history/deposit', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_nft_history_withdraw($params = array()) {
        return $this->request('nft/history/withdraw', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_nft_user_getasset($params = array()) {
        return $this->request('nft/user/getAsset', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_pay_transactions($params = array()) {
        return $this->request('pay/transactions', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_get_giftcard_verify($params = array()) {
        return $this->request('giftcard/verify', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_giftcard_cryptography_rsa_public_key($params = array()) {
        return $this->request('giftcard/cryptography/rsa-public-key', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_giftcard_buycode_token_limit($params = array()) {
        return $this->request('giftcard/buyCode/token-limit', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_algo_spot_openorders($params = array()) {
        return $this->request('algo/spot/openOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_algo_spot_historicalorders($params = array()) {
        return $this->request('algo/spot/historicalOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_algo_spot_suborders($params = array()) {
        return $this->request('algo/spot/subOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_algo_futures_openorders($params = array()) {
        return $this->request('algo/futures/openOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_algo_futures_historicalorders($params = array()) {
        return $this->request('algo/futures/historicalOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_algo_futures_suborders($params = array()) {
        return $this->request('algo/futures/subOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_portfolio_account($params = array()) {
        return $this->request('portfolio/account', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_portfolio_collateralrate($params = array()) {
        return $this->request('portfolio/collateralRate', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapi_get_portfolio_pmloan($params = array()) {
        return $this->request('portfolio/pmLoan', 'sapi', 'GET', $params, null, null, array("cost" => 3.3335));
    }
    public function sapi_get_portfolio_interest_history($params = array()) {
        return $this->request('portfolio/interest-history', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapi_get_portfolio_asset_index_price($params = array()) {
        return $this->request('portfolio/asset-index-price', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_portfolio_repay_futures_switch($params = array()) {
        return $this->request('portfolio/repay-futures-switch', 'sapi', 'GET', $params, null, null, array("cost" => 3));
    }
    public function sapi_get_portfolio_margin_asset_leverage($params = array()) {
        return $this->request('portfolio/margin-asset-leverage', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapi_get_staking_productlist($params = array()) {
        return $this->request('staking/productList', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_staking_position($params = array()) {
        return $this->request('staking/position', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_staking_stakingrecord($params = array()) {
        return $this->request('staking/stakingRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_staking_personalleftquota($params = array()) {
        return $this->request('staking/personalLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_target_asset_list($params = array()) {
        return $this->request('lending/auto-invest/target-asset/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_target_asset_roi_list($params = array()) {
        return $this->request('lending/auto-invest/target-asset/roi/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_all_asset($params = array()) {
        return $this->request('lending/auto-invest/all/asset', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_source_asset_list($params = array()) {
        return $this->request('lending/auto-invest/source-asset/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_plan_list($params = array()) {
        return $this->request('lending/auto-invest/plan/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_plan_id($params = array()) {
        return $this->request('lending/auto-invest/plan/id', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_history_list($params = array()) {
        return $this->request('lending/auto-invest/history/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_index_info($params = array()) {
        return $this->request('lending/auto-invest/index/info', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_index_user_summary($params = array()) {
        return $this->request('lending/auto-invest/index/user-summary', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_one_off_status($params = array()) {
        return $this->request('lending/auto-invest/one-off/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_redeem_history($params = array()) {
        return $this->request('lending/auto-invest/redeem/history', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_lending_auto_invest_rebalance_history($params = array()) {
        return $this->request('lending/auto-invest/rebalance/history', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_get_simple_earn_flexible_list($params = array()) {
        return $this->request('simple-earn/flexible/list', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_list($params = array()) {
        return $this->request('simple-earn/locked/list', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_personalleftquota($params = array()) {
        return $this->request('simple-earn/flexible/personalLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_personalleftquota($params = array()) {
        return $this->request('simple-earn/locked/personalLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_subscriptionpreview($params = array()) {
        return $this->request('simple-earn/flexible/subscriptionPreview', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_subscriptionpreview($params = array()) {
        return $this->request('simple-earn/locked/subscriptionPreview', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_history_ratehistory($params = array()) {
        return $this->request('simple-earn/flexible/history/rateHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_position($params = array()) {
        return $this->request('simple-earn/flexible/position', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_position($params = array()) {
        return $this->request('simple-earn/locked/position', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_account($params = array()) {
        return $this->request('simple-earn/account', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_history_subscriptionrecord($params = array()) {
        return $this->request('simple-earn/flexible/history/subscriptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_history_subscriptionrecord($params = array()) {
        return $this->request('simple-earn/locked/history/subscriptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_history_redemptionrecord($params = array()) {
        return $this->request('simple-earn/flexible/history/redemptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_history_redemptionrecord($params = array()) {
        return $this->request('simple-earn/locked/history/redemptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_history_rewardsrecord($params = array()) {
        return $this->request('simple-earn/flexible/history/rewardsRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_locked_history_rewardsrecord($params = array()) {
        return $this->request('simple-earn/locked/history/rewardsRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapi_get_simple_earn_flexible_history_collateralrecord($params = array()) {
        return $this->request('simple-earn/flexible/history/collateralRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_asset_dust($params = array()) {
        return $this->request('asset/dust', 'sapi', 'POST', $params, null, null, array("cost" => 0.06667));
    }
    public function sapi_post_asset_dust_btc($params = array()) {
        return $this->request('asset/dust-btc', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_asset_transfer($params = array()) {
        return $this->request('asset/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 6.0003));
    }
    public function sapi_post_asset_get_funding_asset($params = array()) {
        return $this->request('asset/get-funding-asset', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_asset_convert_transfer($params = array()) {
        return $this->request('asset/convert-transfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.033335));
    }
    public function sapi_post_account_disablefastwithdrawswitch($params = array()) {
        return $this->request('account/disableFastWithdrawSwitch', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_account_enablefastwithdrawswitch($params = array()) {
        return $this->request('account/enableFastWithdrawSwitch', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_capital_withdraw_apply($params = array()) {
        return $this->request('capital/withdraw/apply', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_post_capital_contract_convertible_coins($params = array()) {
        return $this->request('capital/contract/convertible-coins', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_post_capital_deposit_credit_apply($params = array()) {
        return $this->request('capital/deposit/credit-apply', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_margin_borrow_repay($params = array()) {
        return $this->request('margin/borrow-repay', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_margin_transfer($params = array()) {
        return $this->request('margin/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_post_margin_loan($params = array()) {
        return $this->request('margin/loan', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_margin_repay($params = array()) {
        return $this->request('margin/repay', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_margin_order($params = array()) {
        return $this->request('margin/order', 'sapi', 'POST', $params, null, null, array("cost" => 0.040002));
    }
    public function sapi_post_margin_order_oco($params = array()) {
        return $this->request('margin/order/oco', 'sapi', 'POST', $params, null, null, array("cost" => 0.040002));
    }
    public function sapi_post_margin_dust($params = array()) {
        return $this->request('margin/dust', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_margin_exchange_small_liability($params = array()) {
        return $this->request('margin/exchange-small-liability', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_margin_isolated_transfer($params = array()) {
        return $this->request('margin/isolated/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_post_margin_isolated_account($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'POST', $params, null, null, array("cost" => 2.0001));
    }
    public function sapi_post_margin_max_leverage($params = array()) {
        return $this->request('margin/max-leverage', 'sapi', 'POST', $params, null, null, array("cost" => 300));
    }
    public function sapi_post_bnbburn($params = array()) {
        return $this->request('bnbBurn', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_virtualsubaccount($params = array()) {
        return $this->request('sub-account/virtualSubAccount', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_margin_transfer($params = array()) {
        return $this->request('sub-account/margin/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapi_post_sub_account_margin_enable($params = array()) {
        return $this->request('sub-account/margin/enable', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_futures_enable($params = array()) {
        return $this->request('sub-account/futures/enable', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_futures_transfer($params = array()) {
        return $this->request('sub-account/futures/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_futures_internaltransfer($params = array()) {
        return $this->request('sub-account/futures/internalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_transfer_subtosub($params = array()) {
        return $this->request('sub-account/transfer/subToSub', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_transfer_subtomaster($params = array()) {
        return $this->request('sub-account/transfer/subToMaster', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_universaltransfer($params = array()) {
        return $this->request('sub-account/universalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_sub_account_options_enable($params = array()) {
        return $this->request('sub-account/options/enable', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_managed_subaccount_deposit($params = array()) {
        return $this->request('managed-subaccount/deposit', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_managed_subaccount_withdraw($params = array()) {
        return $this->request('managed-subaccount/withdraw', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_userdatastream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_userdatastream_isolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_futures_transfer($params = array()) {
        return $this->request('futures/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_customizedfixed_purchase($params = array()) {
        return $this->request('lending/customizedFixed/purchase', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_daily_purchase($params = array()) {
        return $this->request('lending/daily/purchase', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_daily_redeem($params = array()) {
        return $this->request('lending/daily/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_bswap_liquidityadd($params = array()) {
        return $this->request('bswap/liquidityAdd', 'sapi', 'POST', $params, null, null, array("cost" => 60));
    }
    public function sapi_post_bswap_liquidityremove($params = array()) {
        return $this->request('bswap/liquidityRemove', 'sapi', 'POST', $params, null, null, array("cost" => 60));
    }
    public function sapi_post_bswap_swap($params = array()) {
        return $this->request('bswap/swap', 'sapi', 'POST', $params, null, null, array("cost" => 60));
    }
    public function sapi_post_bswap_claimrewards($params = array()) {
        return $this->request('bswap/claimRewards', 'sapi', 'POST', $params, null, null, array("cost" => 6.667));
    }
    public function sapi_post_blvt_subscribe($params = array()) {
        return $this->request('blvt/subscribe', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_blvt_redeem($params = array()) {
        return $this->request('blvt/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_apireferral_rebate_historicalrecord($params = array()) {
        return $this->request('apiReferral/rebate/historicalRecord', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_apireferral_kickback_historicalrecord($params = array()) {
        return $this->request('apiReferral/kickback/historicalRecord', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccount($params = array()) {
        return $this->request('broker/subAccount', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccount_margin($params = array()) {
        return $this->request('broker/subAccount/margin', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccount_futures($params = array()) {
        return $this->request('broker/subAccount/futures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_permission($params = array()) {
        return $this->request('broker/subAccountApi/permission', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_commission($params = array()) {
        return $this->request('broker/subAccountApi/commission', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_commission_futures($params = array()) {
        return $this->request('broker/subAccountApi/commission/futures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_commission_coinfutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/coinFutures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_transfer($params = array()) {
        return $this->request('broker/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_transfer_futures($params = array()) {
        return $this->request('broker/transfer/futures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_rebate_historicalrecord($params = array()) {
        return $this->request('broker/rebate/historicalRecord', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccount_bnbburn_spot($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/spot', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccount_bnbburn_margininterest($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/marginInterest', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccount_blvt($params = array()) {
        return $this->request('broker/subAccount/blvt', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_iprestriction($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_iprestriction_iplist($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction/ipList', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_universaltransfer($params = array()) {
        return $this->request('broker/universalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_permission_universaltransfer($params = array()) {
        return $this->request('broker/subAccountApi/permission/universalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_broker_subaccountapi_permission_vanillaoptions($params = array()) {
        return $this->request('broker/subAccountApi/permission/vanillaOptions', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapi_post_giftcard_createcode($params = array()) {
        return $this->request('giftcard/createCode', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_giftcard_redeemcode($params = array()) {
        return $this->request('giftcard/redeemCode', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_giftcard_buycode($params = array()) {
        return $this->request('giftcard/buyCode', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_algo_spot_newordertwap($params = array()) {
        return $this->request('algo/spot/newOrderTwap', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_algo_futures_newordervp($params = array()) {
        return $this->request('algo/futures/newOrderVp', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_algo_futures_newordertwap($params = array()) {
        return $this->request('algo/futures/newOrderTwap', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_staking_purchase($params = array()) {
        return $this->request('staking/purchase', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_staking_redeem($params = array()) {
        return $this->request('staking/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_staking_setautostaking($params = array()) {
        return $this->request('staking/setAutoStaking', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_eth_staking_eth_stake($params = array()) {
        return $this->request('eth-staking/eth/stake', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapi_post_eth_staking_eth_redeem($params = array()) {
        return $this->request('eth-staking/eth/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapi_post_eth_staking_wbeth_wrap($params = array()) {
        return $this->request('eth-staking/wbeth/wrap', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapi_post_mining_hash_transfer_config($params = array()) {
        return $this->request('mining/hash-transfer/config', 'sapi', 'POST', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_post_mining_hash_transfer_config_cancel($params = array()) {
        return $this->request('mining/hash-transfer/config/cancel', 'sapi', 'POST', $params, null, null, array("cost" => 0.5));
    }
    public function sapi_post_portfolio_repay($params = array()) {
        return $this->request('portfolio/repay', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapi_post_loan_vip_renew($params = array()) {
        return $this->request('loan/vip/renew', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_vip_borrow($params = array()) {
        return $this->request('loan/vip/borrow', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_borrow($params = array()) {
        return $this->request('loan/borrow', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_repay($params = array()) {
        return $this->request('loan/repay', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_adjust_ltv($params = array()) {
        return $this->request('loan/adjust/ltv', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_customize_margin_call($params = array()) {
        return $this->request('loan/customize/margin_call', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_flexible_borrow($params = array()) {
        return $this->request('loan/flexible/borrow', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_flexible_repay($params = array()) {
        return $this->request('loan/flexible/repay', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_flexible_adjust_ltv($params = array()) {
        return $this->request('loan/flexible/adjust/ltv', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_loan_vip_repay($params = array()) {
        return $this->request('loan/vip/repay', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapi_post_convert_getquote($params = array()) {
        return $this->request('convert/getQuote', 'sapi', 'POST', $params, null, null, array("cost" => 1.3334));
    }
    public function sapi_post_convert_acceptquote($params = array()) {
        return $this->request('convert/acceptQuote', 'sapi', 'POST', $params, null, null, array("cost" => 3.3335));
    }
    public function sapi_post_convert_limit_placeorder($params = array()) {
        return $this->request('convert/limit/placeOrder', 'sapi', 'POST', $params, null, null, array("cost" => 3.3335));
    }
    public function sapi_post_convert_limit_cancelorder($params = array()) {
        return $this->request('convert/limit/cancelOrder', 'sapi', 'POST', $params, null, null, array("cost" => 1.3334));
    }
    public function sapi_post_portfolio_auto_collection($params = array()) {
        return $this->request('portfolio/auto-collection', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapi_post_portfolio_asset_collection($params = array()) {
        return $this->request('portfolio/asset-collection', 'sapi', 'POST', $params, null, null, array("cost" => 6));
    }
    public function sapi_post_portfolio_bnb_transfer($params = array()) {
        return $this->request('portfolio/bnb-transfer', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapi_post_portfolio_repay_futures_switch($params = array()) {
        return $this->request('portfolio/repay-futures-switch', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapi_post_portfolio_repay_futures_negative_balance($params = array()) {
        return $this->request('portfolio/repay-futures-negative-balance', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapi_post_lending_auto_invest_plan_add($params = array()) {
        return $this->request('lending/auto-invest/plan/add', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_auto_invest_plan_edit($params = array()) {
        return $this->request('lending/auto-invest/plan/edit', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_auto_invest_plan_edit_status($params = array()) {
        return $this->request('lending/auto-invest/plan/edit-status', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_auto_invest_one_off($params = array()) {
        return $this->request('lending/auto-invest/one-off', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_lending_auto_invest_redeem($params = array()) {
        return $this->request('lending/auto-invest/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_simple_earn_flexible_subscribe($params = array()) {
        return $this->request('simple-earn/flexible/subscribe', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_simple_earn_locked_subscribe($params = array()) {
        return $this->request('simple-earn/locked/subscribe', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_simple_earn_flexible_redeem($params = array()) {
        return $this->request('simple-earn/flexible/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_simple_earn_locked_redeem($params = array()) {
        return $this->request('simple-earn/locked/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_post_simple_earn_flexible_setautosubscribe($params = array()) {
        return $this->request('simple-earn/flexible/setAutoSubscribe', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapi_post_simple_earn_locked_setautosubscribe($params = array()) {
        return $this->request('simple-earn/locked/setAutoSubscribe', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapi_put_userdatastream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'PUT', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_put_userdatastream_isolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'PUT', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_delete_margin_openorders($params = array()) {
        return $this->request('margin/openOrders', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_delete_margin_order($params = array()) {
        return $this->request('margin/order', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.006667));
    }
    public function sapi_delete_margin_orderlist($params = array()) {
        return $this->request('margin/orderList', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.006667));
    }
    public function sapi_delete_margin_isolated_account($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'DELETE', $params, null, null, array("cost" => 2.0001));
    }
    public function sapi_delete_userdatastream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_delete_userdatastream_isolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_delete_broker_subaccountapi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function sapi_delete_broker_subaccountapi_iprestriction_iplist($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction/ipList', 'sapi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function sapi_delete_algo_spot_order($params = array()) {
        return $this->request('algo/spot/order', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_delete_algo_futures_order($params = array()) {
        return $this->request('algo/futures/order', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapi_delete_sub_account_subaccountapi_iprestriction_iplist($params = array()) {
        return $this->request('sub-account/subAccountApi/ipRestriction/ipList', 'sapi', 'DELETE', $params, null, null, array("cost" => 20.001));
    }
    public function sapiv2_get_eth_staking_account($params = array()) {
        return $this->request('eth-staking/account', 'sapiV2', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiv2_get_sub_account_futures_account($params = array()) {
        return $this->request('sub-account/futures/account', 'sapiV2', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiv2_get_sub_account_futures_accountsummary($params = array()) {
        return $this->request('sub-account/futures/accountSummary', 'sapiV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiv2_get_sub_account_futures_positionrisk($params = array()) {
        return $this->request('sub-account/futures/positionRisk', 'sapiV2', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiv2_post_eth_staking_eth_stake($params = array()) {
        return $this->request('eth-staking/eth/stake', 'sapiV2', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiv2_post_sub_account_subaccountapi_iprestriction($params = array()) {
        return $this->request('sub-account/subAccountApi/ipRestriction', 'sapiV2', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiv3_get_sub_account_assets($params = array()) {
        return $this->request('sub-account/assets', 'sapiV3', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiv3_post_asset_getuserasset($params = array()) {
        return $this->request('asset/getUserAsset', 'sapiV3', 'POST', $params, null, null, array("cost" => 0.5));
    }
    public function sapiv4_get_sub_account_assets($params = array()) {
        return $this->request('sub-account/assets', 'sapiV4', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function dapipublic_get_ping($params = array()) {
        return $this->request('ping', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapipublic_get_time($params = array()) {
        return $this->request('time', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapipublic_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapipublic_get_depth($params = array()) {
        return $this->request('depth', 'dapiPublic', 'GET', $params, null, null, array("cost" => 2, "byLimit" => [[50, 2], [100, 5], [500, 10], [1000, 20]]));
    }
    public function dapipublic_get_trades($params = array()) {
        return $this->request('trades', 'dapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapipublic_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'dapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapipublic_get_aggtrades($params = array()) {
        return $this->request('aggTrades', 'dapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapipublic_get_premiumindex($params = array()) {
        return $this->request('premiumIndex', 'dapiPublic', 'GET', $params, null, null, array("cost" => 10));
    }
    public function dapipublic_get_fundingrate($params = array()) {
        return $this->request('fundingRate', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapipublic_get_klines($params = array()) {
        return $this->request('klines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapipublic_get_continuousklines($params = array()) {
        return $this->request('continuousKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapipublic_get_indexpriceklines($params = array()) {
        return $this->request('indexPriceKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapipublic_get_markpriceklines($params = array()) {
        return $this->request('markPriceKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapipublic_get_premiumindexklines($params = array()) {
        return $this->request('premiumIndexKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapipublic_get_ticker_24hr($params = array()) {
        return $this->request('ticker/24hr', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 40));
    }
    public function dapipublic_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 2));
    }
    public function dapipublic_get_ticker_bookticker($params = array()) {
        return $this->request('ticker/bookTicker', 'dapiPublic', 'GET', $params, null, null, array("cost" => 2, "noSymbol" => 5));
    }
    public function dapipublic_get_constituents($params = array()) {
        return $this->request('constituents', 'dapiPublic', 'GET', $params, null, null, array("cost" => 2));
    }
    public function dapipublic_get_openinterest($params = array()) {
        return $this->request('openInterest', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_delivery_price($params = array()) {
        return $this->request('delivery-price', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_openinteresthist($params = array()) {
        return $this->request('openInterestHist', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_toplongshortaccountratio($params = array()) {
        return $this->request('topLongShortAccountRatio', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_toplongshortpositionratio($params = array()) {
        return $this->request('topLongShortPositionRatio', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_globallongshortaccountratio($params = array()) {
        return $this->request('globalLongShortAccountRatio', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_takerbuysellvol($params = array()) {
        return $this->request('takerBuySellVol', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapidata_get_basis($params = array()) {
        return $this->request('basis', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function dapiprivate_get_orderamendment($params = array()) {
        return $this->request('orderAmendment', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_openorder($params = array()) {
        return $this->request('openOrder', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_openorders($params = array()) {
        return $this->request('openOrders', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 5));
    }
    public function dapiprivate_get_allorders($params = array()) {
        return $this->request('allOrders', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 40));
    }
    public function dapiprivate_get_balance($params = array()) {
        return $this->request('balance', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_account($params = array()) {
        return $this->request('account', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_get_positionmargin_history($params = array()) {
        return $this->request('positionMargin/history', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_positionrisk($params = array()) {
        return $this->request('positionRisk', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_usertrades($params = array()) {
        return $this->request('userTrades', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 40));
    }
    public function dapiprivate_get_income($params = array()) {
        return $this->request('income', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapiprivate_get_leveragebracket($params = array()) {
        return $this->request('leverageBracket', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_get_forceorders($params = array()) {
        return $this->request('forceOrders', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 50));
    }
    public function dapiprivate_get_adlquantile($params = array()) {
        return $this->request('adlQuantile', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_get_commissionrate($params = array()) {
        return $this->request('commissionRate', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapiprivate_get_income_asyn($params = array()) {
        return $this->request('income/asyn', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_get_income_asyn_id($params = array()) {
        return $this->request('income/asyn/id', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_get_pmexchangeinfo($params = array()) {
        return $this->request('pmExchangeInfo', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function dapiprivate_get_pmaccountinfo($params = array()) {
        return $this->request('pmAccountInfo', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function dapiprivate_post_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_post_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 4));
    }
    public function dapiprivate_post_batchorders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_post_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 10));
    }
    public function dapiprivate_post_leverage($params = array()) {
        return $this->request('leverage', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_post_margintype($params = array()) {
        return $this->request('marginType', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_post_positionmargin($params = array()) {
        return $this->request('positionMargin', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_post_listenkey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_put_listenkey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_put_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_put_batchorders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'PUT', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_delete_order($params = array()) {
        return $this->request('order', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_delete_allopenorders($params = array()) {
        return $this->request('allOpenOrders', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function dapiprivate_delete_batchorders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 5));
    }
    public function dapiprivate_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function dapiprivatev2_get_leveragebracket($params = array()) {
        return $this->request('leverageBracket', 'dapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_ping($params = array()) {
        return $this->request('ping', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_time($params = array()) {
        return $this->request('time', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_depth($params = array()) {
        return $this->request('depth', 'fapiPublic', 'GET', $params, null, null, array("cost" => 2, "byLimit" => [[50, 2], [100, 5], [500, 10], [1000, 20]]));
    }
    public function fapipublic_get_trades($params = array()) {
        return $this->request('trades', 'fapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapipublic_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'fapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function fapipublic_get_aggtrades($params = array()) {
        return $this->request('aggTrades', 'fapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function fapipublic_get_klines($params = array()) {
        return $this->request('klines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapipublic_get_continuousklines($params = array()) {
        return $this->request('continuousKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapipublic_get_markpriceklines($params = array()) {
        return $this->request('markPriceKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapipublic_get_indexpriceklines($params = array()) {
        return $this->request('indexPriceKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapipublic_get_fundingrate($params = array()) {
        return $this->request('fundingRate', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_fundinginfo($params = array()) {
        return $this->request('fundingInfo', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_premiumindex($params = array()) {
        return $this->request('premiumIndex', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_ticker_24hr($params = array()) {
        return $this->request('ticker/24hr', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 40));
    }
    public function fapipublic_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 2));
    }
    public function fapipublic_get_ticker_bookticker($params = array()) {
        return $this->request('ticker/bookTicker', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 2));
    }
    public function fapipublic_get_openinterest($params = array()) {
        return $this->request('openInterest', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_indexinfo($params = array()) {
        return $this->request('indexInfo', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapipublic_get_assetindex($params = array()) {
        return $this->request('assetIndex', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 10));
    }
    public function fapipublic_get_constituents($params = array()) {
        return $this->request('constituents', 'fapiPublic', 'GET', $params, null, null, array("cost" => 2));
    }
    public function fapipublic_get_apitradingstatus($params = array()) {
        return $this->request('apiTradingStatus', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 10));
    }
    public function fapipublic_get_lvtklines($params = array()) {
        return $this->request('lvtKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_delivery_price($params = array()) {
        return $this->request('delivery-price', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_openinteresthist($params = array()) {
        return $this->request('openInterestHist', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_toplongshortaccountratio($params = array()) {
        return $this->request('topLongShortAccountRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_toplongshortpositionratio($params = array()) {
        return $this->request('topLongShortPositionRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_globallongshortaccountratio($params = array()) {
        return $this->request('globalLongShortAccountRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_takerlongshortratio($params = array()) {
        return $this->request('takerlongshortRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapidata_get_basis($params = array()) {
        return $this->request('basis', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_forceorders($params = array()) {
        return $this->request('forceOrders', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 50));
    }
    public function fapiprivate_get_allorders($params = array()) {
        return $this->request('allOrders', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_openorder($params = array()) {
        return $this->request('openOrder', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_openorders($params = array()) {
        return $this->request('openOrders', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_account($params = array()) {
        return $this->request('account', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_balance($params = array()) {
        return $this->request('balance', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_leveragebracket($params = array()) {
        return $this->request('leverageBracket', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_positionmargin_history($params = array()) {
        return $this->request('positionMargin/history', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_positionrisk($params = array()) {
        return $this->request('positionRisk', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function fapiprivate_get_usertrades($params = array()) {
        return $this->request('userTrades', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_income($params = array()) {
        return $this->request('income', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function fapiprivate_get_commissionrate($params = array()) {
        return $this->request('commissionRate', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 20));
    }
    public function fapiprivate_get_apitradingstatus($params = array()) {
        return $this->request('apiTradingStatus', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_multiassetsmargin($params = array()) {
        return $this->request('multiAssetsMargin', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function fapiprivate_get_apireferral_ifnewuser($params = array()) {
        return $this->request('apiReferral/ifNewUser', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_tradernum($params = array()) {
        return $this->request('apiReferral/traderNum', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_overview($params = array()) {
        return $this->request('apiReferral/overview', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_tradevol($params = array()) {
        return $this->request('apiReferral/tradeVol', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_rebatevol($params = array()) {
        return $this->request('apiReferral/rebateVol', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_apireferral_tradersummary($params = array()) {
        return $this->request('apiReferral/traderSummary', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_adlquantile($params = array()) {
        return $this->request('adlQuantile', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_pmaccountinfo($params = array()) {
        return $this->request('pmAccountInfo', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_get_orderamendment($params = array()) {
        return $this->request('orderAmendment', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_get_income_asyn($params = array()) {
        return $this->request('income/asyn', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1000));
    }
    public function fapiprivate_get_income_asyn_id($params = array()) {
        return $this->request('income/asyn/id', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 10));
    }
    public function fapiprivate_get_order_asyn($params = array()) {
        return $this->request('order/asyn', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1000));
    }
    public function fapiprivate_get_order_asyn_id($params = array()) {
        return $this->request('order/asyn/id', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 10));
    }
    public function fapiprivate_get_trade_asyn($params = array()) {
        return $this->request('trade/asyn', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1000));
    }
    public function fapiprivate_get_trade_asyn_id($params = array()) {
        return $this->request('trade/asyn/id', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 10));
    }
    public function fapiprivate_post_batchorders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_post_positionside_dual($params = array()) {
        return $this->request('positionSide/dual', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_positionmargin($params = array()) {
        return $this->request('positionMargin', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_margintype($params = array()) {
        return $this->request('marginType', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 4));
    }
    public function fapiprivate_post_leverage($params = array()) {
        return $this->request('leverage', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_listenkey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 10));
    }
    public function fapiprivate_post_multiassetsmargin($params = array()) {
        return $this->request('multiAssetsMargin', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_apireferral_customization($params = array()) {
        return $this->request('apiReferral/customization', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_post_apireferral_usercustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_put_listenkey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_put_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_put_batchorders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'PUT', $params, null, null, array("cost" => 5));
    }
    public function fapiprivate_delete_batchorders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_delete_order($params = array()) {
        return $this->request('order', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_delete_allopenorders($params = array()) {
        return $this->request('allOpenOrders', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiprivate_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapipublicv2_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'fapiPublicV2', 'GET', $params, null, null, array("cost" => 0));
    }
    public function fapiprivatev2_get_account($params = array()) {
        return $this->request('account', 'fapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivatev2_get_balance($params = array()) {
        return $this->request('balance', 'fapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiprivatev2_get_positionrisk($params = array()) {
        return $this->request('positionRisk', 'fapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_ping($params = array()) {
        return $this->request('ping', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_time($params = array()) {
        return $this->request('time', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_index($params = array()) {
        return $this->request('index', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_ticker($params = array()) {
        return $this->request('ticker', 'eapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapipublic_get_mark($params = array()) {
        return $this->request('mark', 'eapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapipublic_get_depth($params = array()) {
        return $this->request('depth', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_klines($params = array()) {
        return $this->request('klines', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapipublic_get_trades($params = array()) {
        return $this->request('trades', 'eapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapipublic_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'eapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function eapipublic_get_exercisehistory($params = array()) {
        return $this->request('exerciseHistory', 'eapiPublic', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapipublic_get_openinterest($params = array()) {
        return $this->request('openInterest', 'eapiPublic', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiprivate_get_account($params = array()) {
        return $this->request('account', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiprivate_get_position($params = array()) {
        return $this->request('position', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiprivate_get_openorders($params = array()) {
        return $this->request('openOrders', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 40));
    }
    public function eapiprivate_get_historyorders($params = array()) {
        return $this->request('historyOrders', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiprivate_get_usertrades($params = array()) {
        return $this->request('userTrades', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiprivate_get_exerciserecord($params = array()) {
        return $this->request('exerciseRecord', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiprivate_get_bill($params = array()) {
        return $this->request('bill', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_get_income_asyn($params = array()) {
        return $this->request('income/asyn', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiprivate_get_income_asyn_id($params = array()) {
        return $this->request('income/asyn/id', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiprivate_get_marginaccount($params = array()) {
        return $this->request('marginAccount', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiprivate_get_mmp($params = array()) {
        return $this->request('mmp', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_get_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_get_order($params = array()) {
        return $this->request('order', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_post_order($params = array()) {
        return $this->request('order', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_post_batchorders($params = array()) {
        return $this->request('batchOrders', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 5));
    }
    public function eapiprivate_post_listenkey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_post_mmpset($params = array()) {
        return $this->request('mmpSet', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_post_mmpreset($params = array()) {
        return $this->request('mmpReset', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_post_countdowncancelall($params = array()) {
        return $this->request('countdownCancelAll', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_post_countdowncancelallheartbeat($params = array()) {
        return $this->request('countdownCancelAllHeartBeat', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 10));
    }
    public function eapiprivate_put_listenkey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_delete_order($params = array()) {
        return $this->request('order', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_delete_batchorders($params = array()) {
        return $this->request('batchOrders', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_delete_allopenorders($params = array()) {
        return $this->request('allOpenOrders', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_delete_allopenordersbyunderlying($params = array()) {
        return $this->request('allOpenOrdersByUnderlying', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiprivate_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function public_get_ping($params = array()) {
        return $this->request('ping', 'public', 'GET', $params, null, null, array("cost" => 0.2));
    }
    public function public_get_time($params = array()) {
        return $this->request('time', 'public', 'GET', $params, null, null, array("cost" => 0.2));
    }
    public function public_get_depth($params = array()) {
        return $this->request('depth', 'public', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[100, 1], [500, 5], [1000, 10], [5000, 50]]));
    }
    public function public_get_trades($params = array()) {
        return $this->request('trades', 'public', 'GET', $params, null, null, array("cost" => 2));
    }
    public function public_get_aggtrades($params = array()) {
        return $this->request('aggTrades', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function public_get_historicaltrades($params = array()) {
        return $this->request('historicalTrades', 'public', 'GET', $params, null, null, array("cost" => 2));
    }
    public function public_get_klines($params = array()) {
        return $this->request('klines', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function public_get_uiklines($params = array()) {
        return $this->request('uiKlines', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function public_get_ticker_24hr($params = array()) {
        return $this->request('ticker/24hr', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 16));
    }
    public function public_get_ticker($params = array()) {
        return $this->request('ticker', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 16));
    }
    public function public_get_ticker_tradingday($params = array()) {
        return $this->request('ticker/tradingDay', 'public', 'GET', $params, null, null, array("cost" => 0.8));
    }
    public function public_get_ticker_price($params = array()) {
        return $this->request('ticker/price', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 0.8));
    }
    public function public_get_ticker_bookticker($params = array()) {
        return $this->request('ticker/bookTicker', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 0.8));
    }
    public function public_get_exchangeinfo($params = array()) {
        return $this->request('exchangeInfo', 'public', 'GET', $params, null, null, array("cost" => 4));
    }
    public function public_get_avgprice($params = array()) {
        return $this->request('avgPrice', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function public_put_userdatastream($params = array()) {
        return $this->request('userDataStream', 'public', 'PUT', $params, null, null, array("cost" => 0.4));
    }
    public function public_post_userdatastream($params = array()) {
        return $this->request('userDataStream', 'public', 'POST', $params, null, null, array("cost" => 0.4));
    }
    public function public_delete_userdatastream($params = array()) {
        return $this->request('userDataStream', 'public', 'DELETE', $params, null, null, array("cost" => 0.4));
    }
    public function private_get_allorderlist($params = array()) {
        return $this->request('allOrderList', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_get_openorderlist($params = array()) {
        return $this->request('openOrderList', 'private', 'GET', $params, null, null, array("cost" => 1.2));
    }
    public function private_get_orderlist($params = array()) {
        return $this->request('orderList', 'private', 'GET', $params, null, null, array("cost" => 0.8));
    }
    public function private_get_order($params = array()) {
        return $this->request('order', 'private', 'GET', $params, null, null, array("cost" => 0.8));
    }
    public function private_get_openorders($params = array()) {
        return $this->request('openOrders', 'private', 'GET', $params, null, null, array("cost" => 1.2, "noSymbol" => 16));
    }
    public function private_get_allorders($params = array()) {
        return $this->request('allOrders', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_get_account($params = array()) {
        return $this->request('account', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_get_mytrades($params = array()) {
        return $this->request('myTrades', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_get_ratelimit_order($params = array()) {
        return $this->request('rateLimit/order', 'private', 'GET', $params, null, null, array("cost" => 8));
    }
    public function private_get_mypreventedmatches($params = array()) {
        return $this->request('myPreventedMatches', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_get_myallocations($params = array()) {
        return $this->request('myAllocations', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_get_account_commission($params = array()) {
        return $this->request('account/commission', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function private_post_order_oco($params = array()) {
        return $this->request('order/oco', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function private_post_sor_order($params = array()) {
        return $this->request('sor/order', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function private_post_sor_order_test($params = array()) {
        return $this->request('sor/order/test', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function private_post_order($params = array()) {
        return $this->request('order', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function private_post_order_cancelreplace($params = array()) {
        return $this->request('order/cancelReplace', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function private_post_order_test($params = array()) {
        return $this->request('order/test', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function private_delete_openorders($params = array()) {
        return $this->request('openOrders', 'private', 'DELETE', $params, null, null, array("cost" => 0.2));
    }
    public function private_delete_orderlist($params = array()) {
        return $this->request('orderList', 'private', 'DELETE', $params, null, null, array("cost" => 0.2));
    }
    public function private_delete_order($params = array()) {
        return $this->request('order', 'private', 'DELETE', $params, null, null, array("cost" => 0.2));
    }
    public function papi_get_ping($params = array()) {
        return $this->request('ping', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_order($params = array()) {
        return $this->request('um/order', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_openorder($params = array()) {
        return $this->request('um/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_openorders($params = array()) {
        return $this->request('um/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_allorders($params = array()) {
        return $this->request('um/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_cm_order($params = array()) {
        return $this->request('cm/order', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_cm_openorder($params = array()) {
        return $this->request('cm/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_cm_openorders($params = array()) {
        return $this->request('cm/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_cm_allorders($params = array()) {
        return $this->request('cm/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_um_conditional_openorder($params = array()) {
        return $this->request('um/conditional/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_conditional_openorders($params = array()) {
        return $this->request('um/conditional/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papi_get_um_conditional_orderhistory($params = array()) {
        return $this->request('um/conditional/orderHistory', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_conditional_allorders($params = array()) {
        return $this->request('um/conditional/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papi_get_cm_conditional_openorder($params = array()) {
        return $this->request('cm/conditional/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_cm_conditional_openorders($params = array()) {
        return $this->request('cm/conditional/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papi_get_cm_conditional_orderhistory($params = array()) {
        return $this->request('cm/conditional/orderHistory', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_cm_conditional_allorders($params = array()) {
        return $this->request('cm/conditional/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papi_get_margin_order($params = array()) {
        return $this->request('margin/order', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_margin_openorders($params = array()) {
        return $this->request('margin/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_margin_allorders($params = array()) {
        return $this->request('margin/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 100));
    }
    public function papi_get_margin_orderlist($params = array()) {
        return $this->request('margin/orderList', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_margin_allorderlist($params = array()) {
        return $this->request('margin/allOrderList', 'papi', 'GET', $params, null, null, array("cost" => 100));
    }
    public function papi_get_margin_openorderlist($params = array()) {
        return $this->request('margin/openOrderList', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_margin_mytrades($params = array()) {
        return $this->request('margin/myTrades', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_balance($params = array()) {
        return $this->request('balance', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_account($params = array()) {
        return $this->request('account', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_margin_maxborrowable($params = array()) {
        return $this->request('margin/maxBorrowable', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_margin_maxwithdraw($params = array()) {
        return $this->request('margin/maxWithdraw', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_um_positionrisk($params = array()) {
        return $this->request('um/positionRisk', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_cm_positionrisk($params = array()) {
        return $this->request('cm/positionRisk', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_positionside_dual($params = array()) {
        return $this->request('um/positionSide/dual', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papi_get_cm_positionside_dual($params = array()) {
        return $this->request('cm/positionSide/dual', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papi_get_um_usertrades($params = array()) {
        return $this->request('um/userTrades', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_cm_usertrades($params = array()) {
        return $this->request('cm/userTrades', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_um_leveragebracket($params = array()) {
        return $this->request('um/leverageBracket', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_cm_leveragebracket($params = array()) {
        return $this->request('cm/leverageBracket', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_margin_forceorders($params = array()) {
        return $this->request('margin/forceOrders', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_forceorders($params = array()) {
        return $this->request('um/forceOrders', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_cm_forceorders($params = array()) {
        return $this->request('cm/forceOrders', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_um_apitradingstatus($params = array()) {
        return $this->request('um/apiTradingStatus', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_um_commissionrate($params = array()) {
        return $this->request('um/commissionRate', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_cm_commissionrate($params = array()) {
        return $this->request('cm/commissionRate', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papi_get_margin_marginloan($params = array()) {
        return $this->request('margin/marginLoan', 'papi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function papi_get_margin_repayloan($params = array()) {
        return $this->request('margin/repayLoan', 'papi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function papi_get_margin_margininteresthistory($params = array()) {
        return $this->request('margin/marginInterestHistory', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papi_get_portfolio_interest_history($params = array()) {
        return $this->request('portfolio/interest-history', 'papi', 'GET', $params, null, null, array("cost" => 50));
    }
    public function papi_get_um_income($params = array()) {
        return $this->request('um/income', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papi_get_cm_income($params = array()) {
        return $this->request('cm/income', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papi_get_um_account($params = array()) {
        return $this->request('um/account', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_cm_account($params = array()) {
        return $this->request('cm/account', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_repay_futures_switch($params = array()) {
        return $this->request('repay-futures-switch', 'papi', 'GET', $params, null, null, array("cost" => 3));
    }
    public function papi_get_um_adlquantile($params = array()) {
        return $this->request('um/adlQuantile', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_get_cm_adlquantile($params = array()) {
        return $this->request('cm/adlQuantile', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papi_post_um_order($params = array()) {
        return $this->request('um/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_um_conditional_order($params = array()) {
        return $this->request('um/conditional/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_cm_order($params = array()) {
        return $this->request('cm/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_cm_conditional_order($params = array()) {
        return $this->request('cm/conditional/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_margin_order($params = array()) {
        return $this->request('margin/order', 'papi', 'POST', $params, null, null, array("cost" => 0.0133));
    }
    public function papi_post_marginloan($params = array()) {
        return $this->request('marginLoan', 'papi', 'POST', $params, null, null, array("cost" => 0.1333));
    }
    public function papi_post_repayloan($params = array()) {
        return $this->request('repayLoan', 'papi', 'POST', $params, null, null, array("cost" => 0.1333));
    }
    public function papi_post_margin_order_oco($params = array()) {
        return $this->request('margin/order/oco', 'papi', 'POST', $params, null, null, array("cost" => 0.04));
    }
    public function papi_post_um_leverage($params = array()) {
        return $this->request('um/leverage', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_cm_leverage($params = array()) {
        return $this->request('cm/leverage', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_um_positionside_dual($params = array()) {
        return $this->request('um/positionSide/dual', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_cm_positionside_dual($params = array()) {
        return $this->request('cm/positionSide/dual', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_auto_collection($params = array()) {
        return $this->request('auto-collection', 'papi', 'POST', $params, null, null, array("cost" => 0.6667));
    }
    public function papi_post_bnb_transfer($params = array()) {
        return $this->request('bnb-transfer', 'papi', 'POST', $params, null, null, array("cost" => 0.6667));
    }
    public function papi_post_repay_futures_switch($params = array()) {
        return $this->request('repay-futures-switch', 'papi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function papi_post_repay_futures_negative_balance($params = array()) {
        return $this->request('repay-futures-negative-balance', 'papi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function papi_post_listenkey($params = array()) {
        return $this->request('listenKey', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papi_post_asset_collection($params = array()) {
        return $this->request('asset-collection', 'papi', 'POST', $params, null, null, array("cost" => 3));
    }
    public function papi_put_listenkey($params = array()) {
        return $this->request('listenKey', 'papi', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_um_order($params = array()) {
        return $this->request('um/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_um_conditional_order($params = array()) {
        return $this->request('um/conditional/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_um_allopenorders($params = array()) {
        return $this->request('um/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_um_conditional_allopenorders($params = array()) {
        return $this->request('um/conditional/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_cm_order($params = array()) {
        return $this->request('cm/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_cm_conditional_order($params = array()) {
        return $this->request('cm/conditional/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_cm_allopenorders($params = array()) {
        return $this->request('cm/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_cm_conditional_allopenorders($params = array()) {
        return $this->request('cm/conditional/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_margin_order($params = array()) {
        return $this->request('margin/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papi_delete_margin_allopenorders($params = array()) {
        return $this->request('margin/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 5));
    }
    public function papi_delete_margin_orderlist($params = array()) {
        return $this->request('margin/orderList', 'papi', 'DELETE', $params, null, null, array("cost" => 2));
    }
    public function papi_delete_listenkey($params = array()) {
        return $this->request('listenKey', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSystemStatus($params = array()) {
        return $this->request('system/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAccountSnapshot($params = array()) {
        return $this->request('accountSnapshot', 'sapi', 'GET', $params, null, null, array("cost" => 240));
    }
    public function sapiGetMarginAsset($params = array()) {
        return $this->request('margin/asset', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginPair($params = array()) {
        return $this->request('margin/pair', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginAllAssets($params = array()) {
        return $this->request('margin/allAssets', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginAllPairs($params = array()) {
        return $this->request('margin/allPairs', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginPriceIndex($params = array()) {
        return $this->request('margin/priceIndex', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSpotDelistSchedule($params = array()) {
        return $this->request('spot/delist-schedule', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapiGetAssetAssetDividend($params = array()) {
        return $this->request('asset/assetDividend', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetAssetDribblet($params = array()) {
        return $this->request('asset/dribblet', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAssetTransfer($params = array()) {
        return $this->request('asset/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAssetAssetDetail($params = array()) {
        return $this->request('asset/assetDetail', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAssetTradeFee($params = array()) {
        return $this->request('asset/tradeFee', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAssetLedgerTransferCloudMiningQueryByPage($params = array()) {
        return $this->request('asset/ledger-transfer/cloud-mining/queryByPage', 'sapi', 'GET', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiGetAssetConvertTransferQueryByPage($params = array()) {
        return $this->request('asset/convert-transfer/queryByPage', 'sapi', 'GET', $params, null, null, array("cost" => 0.033335));
    }
    public function sapiGetAssetWalletBalance($params = array()) {
        return $this->request('asset/wallet/balance', 'sapi', 'GET', $params, null, null, array("cost" => 6));
    }
    public function sapiGetAssetCustodyTransferHistory($params = array()) {
        return $this->request('asset/custody/transfer-history', 'sapi', 'GET', $params, null, null, array("cost" => 6));
    }
    public function sapiGetMarginBorrowRepay($params = array()) {
        return $this->request('margin/borrow-repay', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginLoan($params = array()) {
        return $this->request('margin/loan', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginRepay($params = array()) {
        return $this->request('margin/repay', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginAccount($params = array()) {
        return $this->request('margin/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginTransfer($params = array()) {
        return $this->request('margin/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginInterestHistory($params = array()) {
        return $this->request('margin/interestHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginForceLiquidationRec($params = array()) {
        return $this->request('margin/forceLiquidationRec', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginOrder($params = array()) {
        return $this->request('margin/order', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginOpenOrders($params = array()) {
        return $this->request('margin/openOrders', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginAllOrders($params = array()) {
        return $this->request('margin/allOrders', 'sapi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function sapiGetMarginMyTrades($params = array()) {
        return $this->request('margin/myTrades', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginMaxBorrowable($params = array()) {
        return $this->request('margin/maxBorrowable', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapiGetMarginMaxTransferable($params = array()) {
        return $this->request('margin/maxTransferable', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapiGetMarginTradeCoeff($params = array()) {
        return $this->request('margin/tradeCoeff', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginIsolatedTransfer($params = array()) {
        return $this->request('margin/isolated/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginIsolatedAccount($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginIsolatedPair($params = array()) {
        return $this->request('margin/isolated/pair', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginIsolatedAllPairs($params = array()) {
        return $this->request('margin/isolated/allPairs', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginIsolatedAccountLimit($params = array()) {
        return $this->request('margin/isolated/accountLimit', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginInterestRateHistory($params = array()) {
        return $this->request('margin/interestRateHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginOrderList($params = array()) {
        return $this->request('margin/orderList', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginAllOrderList($params = array()) {
        return $this->request('margin/allOrderList', 'sapi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function sapiGetMarginOpenOrderList($params = array()) {
        return $this->request('margin/openOrderList', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetMarginCrossMarginData($params = array()) {
        return $this->request('margin/crossMarginData', 'sapi', 'GET', $params, null, null, array("cost" => 0.1, "noCoin" => 0.5));
    }
    public function sapiGetMarginIsolatedMarginData($params = array()) {
        return $this->request('margin/isolatedMarginData', 'sapi', 'GET', $params, null, null, array("cost" => 0.1, "noCoin" => 1));
    }
    public function sapiGetMarginIsolatedMarginTier($params = array()) {
        return $this->request('margin/isolatedMarginTier', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginRateLimitOrder($params = array()) {
        return $this->request('margin/rateLimit/order', 'sapi', 'GET', $params, null, null, array("cost" => 2));
    }
    public function sapiGetMarginDribblet($params = array()) {
        return $this->request('margin/dribblet', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMarginDust($params = array()) {
        return $this->request('margin/dust', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetMarginCrossMarginCollateralRatio($params = array()) {
        return $this->request('margin/crossMarginCollateralRatio', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapiGetMarginExchangeSmallLiability($params = array()) {
        return $this->request('margin/exchange-small-liability', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapiGetMarginExchangeSmallLiabilityHistory($params = array()) {
        return $this->request('margin/exchange-small-liability-history', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapiGetMarginNextHourlyInterestRate($params = array()) {
        return $this->request('margin/next-hourly-interest-rate', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapiGetMarginCapitalFlow($params = array()) {
        return $this->request('margin/capital-flow', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapiGetMarginDelistSchedule($params = array()) {
        return $this->request('margin/delist-schedule', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapiGetMarginAvailableInventory($params = array()) {
        return $this->request('margin/available-inventory', 'sapi', 'GET', $params, null, null, array("cost" => 0.3334));
    }
    public function sapiGetMarginLeverageBracket($params = array()) {
        return $this->request('margin/leverageBracket', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLoanVipLoanableData($params = array()) {
        return $this->request('loan/vip/loanable/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanVipCollateralData($params = array()) {
        return $this->request('loan/vip/collateral/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanVipRequestData($params = array()) {
        return $this->request('loan/vip/request/data', 'sapi', 'GET', $params, null, null, array("cost" => 2.6668));
    }
    public function sapiGetLoanVipRequestInterestRate($params = array()) {
        return $this->request('loan/vip/request/interestRate', 'sapi', 'GET', $params, null, null, array("cost" => 2.6668));
    }
    public function sapiGetLoanIncome($params = array()) {
        return $this->request('loan/income', 'sapi', 'GET', $params, null, null, array("cost" => 40.002));
    }
    public function sapiGetLoanOngoingOrders($params = array()) {
        return $this->request('loan/ongoing/orders', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanLtvAdjustmentHistory($params = array()) {
        return $this->request('loan/ltv/adjustment/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanBorrowHistory($params = array()) {
        return $this->request('loan/borrow/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanRepayHistory($params = array()) {
        return $this->request('loan/repay/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanLoanableData($params = array()) {
        return $this->request('loan/loanable/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanCollateralData($params = array()) {
        return $this->request('loan/collateral/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanRepayCollateralRate($params = array()) {
        return $this->request('loan/repay/collateral/rate', 'sapi', 'GET', $params, null, null, array("cost" => 600));
    }
    public function sapiGetLoanFlexibleOngoingOrders($params = array()) {
        return $this->request('loan/flexible/ongoing/orders', 'sapi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function sapiGetLoanFlexibleBorrowHistory($params = array()) {
        return $this->request('loan/flexible/borrow/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanFlexibleRepayHistory($params = array()) {
        return $this->request('loan/flexible/repay/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanFlexibleLtvAdjustmentHistory($params = array()) {
        return $this->request('loan/flexible/ltv/adjustment/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanFlexibleLoanableData($params = array()) {
        return $this->request('loan/flexible/loanable/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanFlexibleCollateralData($params = array()) {
        return $this->request('loan/flexible/collateral/data', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanVipOngoingOrders($params = array()) {
        return $this->request('loan/vip/ongoing/orders', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanVipRepayHistory($params = array()) {
        return $this->request('loan/vip/repay/history', 'sapi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function sapiGetLoanVipCollateralAccount($params = array()) {
        return $this->request('loan/vip/collateral/account', 'sapi', 'GET', $params, null, null, array("cost" => 600));
    }
    public function sapiGetFiatOrders($params = array()) {
        return $this->request('fiat/orders', 'sapi', 'GET', $params, null, null, array("cost" => 600.03));
    }
    public function sapiGetFiatPayments($params = array()) {
        return $this->request('fiat/payments', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetFuturesTransfer($params = array()) {
        return $this->request('futures/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetFuturesHistDataLink($params = array()) {
        return $this->request('futures/histDataLink', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetRebateTaxQuery($params = array()) {
        return $this->request('rebate/taxQuery', 'sapi', 'GET', $params, null, null, array("cost" => 80.004));
    }
    public function sapiGetCapitalConfigGetall($params = array()) {
        return $this->request('capital/config/getall', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetCapitalDepositAddress($params = array()) {
        return $this->request('capital/deposit/address', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetCapitalDepositAddressList($params = array()) {
        return $this->request('capital/deposit/address/list', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetCapitalDepositHisrec($params = array()) {
        return $this->request('capital/deposit/hisrec', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetCapitalDepositSubAddress($params = array()) {
        return $this->request('capital/deposit/subAddress', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetCapitalDepositSubHisrec($params = array()) {
        return $this->request('capital/deposit/subHisrec', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetCapitalWithdrawHistory($params = array()) {
        return $this->request('capital/withdraw/history', 'sapi', 'GET', $params, null, null, array("cost" => 1800));
    }
    public function sapiGetCapitalContractConvertibleCoins($params = array()) {
        return $this->request('capital/contract/convertible-coins', 'sapi', 'GET', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiGetConvertTradeFlow($params = array()) {
        return $this->request('convert/tradeFlow', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetConvertExchangeInfo($params = array()) {
        return $this->request('convert/exchangeInfo', 'sapi', 'GET', $params, null, null, array("cost" => 50));
    }
    public function sapiGetConvertAssetInfo($params = array()) {
        return $this->request('convert/assetInfo', 'sapi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function sapiGetConvertOrderStatus($params = array()) {
        return $this->request('convert/orderStatus', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapiGetConvertLimitQueryOpenOrders($params = array()) {
        return $this->request('convert/limit/queryOpenOrders', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetAccountStatus($params = array()) {
        return $this->request('account/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAccountApiTradingStatus($params = array()) {
        return $this->request('account/apiTradingStatus', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAccountApiRestrictionsIpRestriction($params = array()) {
        return $this->request('account/apiRestrictions/ipRestriction', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetBnbBurn($params = array()) {
        return $this->request('bnbBurn', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountFuturesAccount($params = array()) {
        return $this->request('sub-account/futures/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSubAccountFuturesAccountSummary($params = array()) {
        return $this->request('sub-account/futures/accountSummary', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountFuturesPositionRisk($params = array()) {
        return $this->request('sub-account/futures/positionRisk', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSubAccountFuturesInternalTransfer($params = array()) {
        return $this->request('sub-account/futures/internalTransfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountList($params = array()) {
        return $this->request('sub-account/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountMarginAccount($params = array()) {
        return $this->request('sub-account/margin/account', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSubAccountMarginAccountSummary($params = array()) {
        return $this->request('sub-account/margin/accountSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSubAccountSpotSummary($params = array()) {
        return $this->request('sub-account/spotSummary', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountStatus($params = array()) {
        return $this->request('sub-account/status', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSubAccountSubTransferHistory($params = array()) {
        return $this->request('sub-account/sub/transfer/history', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountTransferSubUserHistory($params = array()) {
        return $this->request('sub-account/transfer/subUserHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountUniversalTransfer($params = array()) {
        return $this->request('sub-account/universalTransfer', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSubAccountApiRestrictionsIpRestrictionThirdPartyList($params = array()) {
        return $this->request('sub-account/apiRestrictions/ipRestriction/thirdPartyList', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetSubAccountTransactionStatistics($params = array()) {
        return $this->request('sub-account/transaction-statistics', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiGetSubAccountSubAccountApiIpRestriction($params = array()) {
        return $this->request('sub-account/subAccountApi/ipRestriction', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetManagedSubaccountAsset($params = array()) {
        return $this->request('managed-subaccount/asset', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetManagedSubaccountAccountSnapshot($params = array()) {
        return $this->request('managed-subaccount/accountSnapshot', 'sapi', 'GET', $params, null, null, array("cost" => 240));
    }
    public function sapiGetManagedSubaccountQueryTransLogForInvestor($params = array()) {
        return $this->request('managed-subaccount/queryTransLogForInvestor', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetManagedSubaccountQueryTransLogForTradeParent($params = array()) {
        return $this->request('managed-subaccount/queryTransLogForTradeParent', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiGetManagedSubaccountFetchFutureAsset($params = array()) {
        return $this->request('managed-subaccount/fetch-future-asset', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiGetManagedSubaccountMarginAsset($params = array()) {
        return $this->request('managed-subaccount/marginAsset', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetManagedSubaccountInfo($params = array()) {
        return $this->request('managed-subaccount/info', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiGetManagedSubaccountDepositAddress($params = array()) {
        return $this->request('managed-subaccount/deposit/address', 'sapi', 'GET', $params, null, null, array("cost" => 0.006667));
    }
    public function sapiGetManagedSubaccountQueryTransLog($params = array()) {
        return $this->request('managed-subaccount/query-trans-log', 'sapi', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiGetLendingDailyProductList($params = array()) {
        return $this->request('lending/daily/product/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingDailyUserLeftQuota($params = array()) {
        return $this->request('lending/daily/userLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingDailyUserRedemptionQuota($params = array()) {
        return $this->request('lending/daily/userRedemptionQuota', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingDailyTokenPosition($params = array()) {
        return $this->request('lending/daily/token/position', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingUnionAccount($params = array()) {
        return $this->request('lending/union/account', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingUnionPurchaseRecord($params = array()) {
        return $this->request('lending/union/purchaseRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingUnionRedemptionRecord($params = array()) {
        return $this->request('lending/union/redemptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingUnionInterestHistory($params = array()) {
        return $this->request('lending/union/interestHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingProjectList($params = array()) {
        return $this->request('lending/project/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingProjectPositionList($params = array()) {
        return $this->request('lending/project/position/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetEthStakingEthHistoryStakingHistory($params = array()) {
        return $this->request('eth-staking/eth/history/stakingHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingEthHistoryRedemptionHistory($params = array()) {
        return $this->request('eth-staking/eth/history/redemptionHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingEthHistoryRewardsHistory($params = array()) {
        return $this->request('eth-staking/eth/history/rewardsHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingEthQuota($params = array()) {
        return $this->request('eth-staking/eth/quota', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingEthHistoryRateHistory($params = array()) {
        return $this->request('eth-staking/eth/history/rateHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingAccount($params = array()) {
        return $this->request('eth-staking/account', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingWbethHistoryWrapHistory($params = array()) {
        return $this->request('eth-staking/wbeth/history/wrapHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingWbethHistoryUnwrapHistory($params = array()) {
        return $this->request('eth-staking/wbeth/history/unwrapHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetEthStakingEthHistoryWbethRewardsHistory($params = array()) {
        return $this->request('eth-staking/eth/history/wbethRewardsHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetMiningPubAlgoList($params = array()) {
        return $this->request('mining/pub/algoList', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMiningPubCoinList($params = array()) {
        return $this->request('mining/pub/coinList', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetMiningWorkerDetail($params = array()) {
        return $this->request('mining/worker/detail', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapiGetMiningWorkerList($params = array()) {
        return $this->request('mining/worker/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapiGetMiningPaymentList($params = array()) {
        return $this->request('mining/payment/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapiGetMiningStatisticsUserStatus($params = array()) {
        return $this->request('mining/statistics/user/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapiGetMiningStatisticsUserList($params = array()) {
        return $this->request('mining/statistics/user/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapiGetMiningPaymentUid($params = array()) {
        return $this->request('mining/payment/uid', 'sapi', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function sapiGetBswapPools($params = array()) {
        return $this->request('bswap/pools', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetBswapLiquidity($params = array()) {
        return $this->request('bswap/liquidity', 'sapi', 'GET', $params, null, null, array("cost" => 0.1, "noPoolId" => 1));
    }
    public function sapiGetBswapLiquidityOps($params = array()) {
        return $this->request('bswap/liquidityOps', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetBswapQuote($params = array()) {
        return $this->request('bswap/quote', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapiGetBswapSwap($params = array()) {
        return $this->request('bswap/swap', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetBswapPoolConfigure($params = array()) {
        return $this->request('bswap/poolConfigure', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapiGetBswapAddLiquidityPreview($params = array()) {
        return $this->request('bswap/addLiquidityPreview', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapiGetBswapRemoveLiquidityPreview($params = array()) {
        return $this->request('bswap/removeLiquidityPreview', 'sapi', 'GET', $params, null, null, array("cost" => 1.00005));
    }
    public function sapiGetBswapUnclaimedRewards($params = array()) {
        return $this->request('bswap/unclaimedRewards', 'sapi', 'GET', $params, null, null, array("cost" => 6.667));
    }
    public function sapiGetBswapClaimedHistory($params = array()) {
        return $this->request('bswap/claimedHistory', 'sapi', 'GET', $params, null, null, array("cost" => 6.667));
    }
    public function sapiGetBlvtTokenInfo($params = array()) {
        return $this->request('blvt/tokenInfo', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetBlvtSubscribeRecord($params = array()) {
        return $this->request('blvt/subscribe/record', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetBlvtRedeemRecord($params = array()) {
        return $this->request('blvt/redeem/record', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetBlvtUserLimit($params = array()) {
        return $this->request('blvt/userLimit', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetApiReferralIfNewUser($params = array()) {
        return $this->request('apiReferral/ifNewUser', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetApiReferralCustomization($params = array()) {
        return $this->request('apiReferral/customization', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetApiReferralUserCustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetApiReferralRebateRecentRecord($params = array()) {
        return $this->request('apiReferral/rebate/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetApiReferralRebateHistoricalRecord($params = array()) {
        return $this->request('apiReferral/rebate/historicalRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetApiReferralKickbackRecentRecord($params = array()) {
        return $this->request('apiReferral/kickback/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetApiReferralKickbackHistoricalRecord($params = array()) {
        return $this->request('apiReferral/kickback/historicalRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountApi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccount($params = array()) {
        return $this->request('broker/subAccount', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountApiCommissionFutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/futures', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountApiCommissionCoinFutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/coinFutures', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerInfo($params = array()) {
        return $this->request('broker/info', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerTransfer($params = array()) {
        return $this->request('broker/transfer', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerTransferFutures($params = array()) {
        return $this->request('broker/transfer/futures', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerRebateRecentRecord($params = array()) {
        return $this->request('broker/rebate/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerRebateHistoricalRecord($params = array()) {
        return $this->request('broker/rebate/historicalRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountBnbBurnStatus($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/status', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountDepositHist($params = array()) {
        return $this->request('broker/subAccount/depositHist', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountSpotSummary($params = array()) {
        return $this->request('broker/subAccount/spotSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountMarginSummary($params = array()) {
        return $this->request('broker/subAccount/marginSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountFuturesSummary($params = array()) {
        return $this->request('broker/subAccount/futuresSummary', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerRebateFuturesRecentRecord($params = array()) {
        return $this->request('broker/rebate/futures/recentRecord', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerSubAccountApiIpRestriction($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetBrokerUniversalTransfer($params = array()) {
        return $this->request('broker/universalTransfer', 'sapi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiGetAccountApiRestrictions($params = array()) {
        return $this->request('account/apiRestrictions', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetC2cOrderMatchListUserOrderHistory($params = array()) {
        return $this->request('c2c/orderMatch/listUserOrderHistory', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetNftHistoryTransactions($params = array()) {
        return $this->request('nft/history/transactions', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetNftHistoryDeposit($params = array()) {
        return $this->request('nft/history/deposit', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetNftHistoryWithdraw($params = array()) {
        return $this->request('nft/history/withdraw', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetNftUserGetAsset($params = array()) {
        return $this->request('nft/user/getAsset', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetPayTransactions($params = array()) {
        return $this->request('pay/transactions', 'sapi', 'GET', $params, null, null, array("cost" => 20.001));
    }
    public function sapiGetGiftcardVerify($params = array()) {
        return $this->request('giftcard/verify', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetGiftcardCryptographyRsaPublicKey($params = array()) {
        return $this->request('giftcard/cryptography/rsa-public-key', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetGiftcardBuyCodeTokenLimit($params = array()) {
        return $this->request('giftcard/buyCode/token-limit', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAlgoSpotOpenOrders($params = array()) {
        return $this->request('algo/spot/openOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAlgoSpotHistoricalOrders($params = array()) {
        return $this->request('algo/spot/historicalOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAlgoSpotSubOrders($params = array()) {
        return $this->request('algo/spot/subOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAlgoFuturesOpenOrders($params = array()) {
        return $this->request('algo/futures/openOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAlgoFuturesHistoricalOrders($params = array()) {
        return $this->request('algo/futures/historicalOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetAlgoFuturesSubOrders($params = array()) {
        return $this->request('algo/futures/subOrders', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetPortfolioAccount($params = array()) {
        return $this->request('portfolio/account', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetPortfolioCollateralRate($params = array()) {
        return $this->request('portfolio/collateralRate', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapiGetPortfolioPmLoan($params = array()) {
        return $this->request('portfolio/pmLoan', 'sapi', 'GET', $params, null, null, array("cost" => 3.3335));
    }
    public function sapiGetPortfolioInterestHistory($params = array()) {
        return $this->request('portfolio/interest-history', 'sapi', 'GET', $params, null, null, array("cost" => 0.6667));
    }
    public function sapiGetPortfolioAssetIndexPrice($params = array()) {
        return $this->request('portfolio/asset-index-price', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetPortfolioRepayFuturesSwitch($params = array()) {
        return $this->request('portfolio/repay-futures-switch', 'sapi', 'GET', $params, null, null, array("cost" => 3));
    }
    public function sapiGetPortfolioMarginAssetLeverage($params = array()) {
        return $this->request('portfolio/margin-asset-leverage', 'sapi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function sapiGetStakingProductList($params = array()) {
        return $this->request('staking/productList', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetStakingPosition($params = array()) {
        return $this->request('staking/position', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetStakingStakingRecord($params = array()) {
        return $this->request('staking/stakingRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetStakingPersonalLeftQuota($params = array()) {
        return $this->request('staking/personalLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestTargetAssetList($params = array()) {
        return $this->request('lending/auto-invest/target-asset/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestTargetAssetRoiList($params = array()) {
        return $this->request('lending/auto-invest/target-asset/roi/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestAllAsset($params = array()) {
        return $this->request('lending/auto-invest/all/asset', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestSourceAssetList($params = array()) {
        return $this->request('lending/auto-invest/source-asset/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestPlanList($params = array()) {
        return $this->request('lending/auto-invest/plan/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestPlanId($params = array()) {
        return $this->request('lending/auto-invest/plan/id', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestHistoryList($params = array()) {
        return $this->request('lending/auto-invest/history/list', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestIndexInfo($params = array()) {
        return $this->request('lending/auto-invest/index/info', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestIndexUserSummary($params = array()) {
        return $this->request('lending/auto-invest/index/user-summary', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestOneOffStatus($params = array()) {
        return $this->request('lending/auto-invest/one-off/status', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestRedeemHistory($params = array()) {
        return $this->request('lending/auto-invest/redeem/history', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetLendingAutoInvestRebalanceHistory($params = array()) {
        return $this->request('lending/auto-invest/rebalance/history', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiGetSimpleEarnFlexibleList($params = array()) {
        return $this->request('simple-earn/flexible/list', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedList($params = array()) {
        return $this->request('simple-earn/locked/list', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexiblePersonalLeftQuota($params = array()) {
        return $this->request('simple-earn/flexible/personalLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedPersonalLeftQuota($params = array()) {
        return $this->request('simple-earn/locked/personalLeftQuota', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexibleSubscriptionPreview($params = array()) {
        return $this->request('simple-earn/flexible/subscriptionPreview', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedSubscriptionPreview($params = array()) {
        return $this->request('simple-earn/locked/subscriptionPreview', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexibleHistoryRateHistory($params = array()) {
        return $this->request('simple-earn/flexible/history/rateHistory', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexiblePosition($params = array()) {
        return $this->request('simple-earn/flexible/position', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedPosition($params = array()) {
        return $this->request('simple-earn/locked/position', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnAccount($params = array()) {
        return $this->request('simple-earn/account', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexibleHistorySubscriptionRecord($params = array()) {
        return $this->request('simple-earn/flexible/history/subscriptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedHistorySubscriptionRecord($params = array()) {
        return $this->request('simple-earn/locked/history/subscriptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexibleHistoryRedemptionRecord($params = array()) {
        return $this->request('simple-earn/flexible/history/redemptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedHistoryRedemptionRecord($params = array()) {
        return $this->request('simple-earn/locked/history/redemptionRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexibleHistoryRewardsRecord($params = array()) {
        return $this->request('simple-earn/flexible/history/rewardsRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnLockedHistoryRewardsRecord($params = array()) {
        return $this->request('simple-earn/locked/history/rewardsRecord', 'sapi', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiGetSimpleEarnFlexibleHistoryCollateralRecord($params = array()) {
        return $this->request('simple-earn/flexible/history/collateralRecord', 'sapi', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostAssetDust($params = array()) {
        return $this->request('asset/dust', 'sapi', 'POST', $params, null, null, array("cost" => 0.06667));
    }
    public function sapiPostAssetDustBtc($params = array()) {
        return $this->request('asset/dust-btc', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostAssetTransfer($params = array()) {
        return $this->request('asset/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 6.0003));
    }
    public function sapiPostAssetGetFundingAsset($params = array()) {
        return $this->request('asset/get-funding-asset', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostAssetConvertTransfer($params = array()) {
        return $this->request('asset/convert-transfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.033335));
    }
    public function sapiPostAccountDisableFastWithdrawSwitch($params = array()) {
        return $this->request('account/disableFastWithdrawSwitch', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostAccountEnableFastWithdrawSwitch($params = array()) {
        return $this->request('account/enableFastWithdrawSwitch', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostCapitalWithdrawApply($params = array()) {
        return $this->request('capital/withdraw/apply', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiPostCapitalContractConvertibleCoins($params = array()) {
        return $this->request('capital/contract/convertible-coins', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiPostCapitalDepositCreditApply($params = array()) {
        return $this->request('capital/deposit/credit-apply', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostMarginBorrowRepay($params = array()) {
        return $this->request('margin/borrow-repay', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostMarginTransfer($params = array()) {
        return $this->request('margin/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiPostMarginLoan($params = array()) {
        return $this->request('margin/loan', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostMarginRepay($params = array()) {
        return $this->request('margin/repay', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostMarginOrder($params = array()) {
        return $this->request('margin/order', 'sapi', 'POST', $params, null, null, array("cost" => 0.040002));
    }
    public function sapiPostMarginOrderOco($params = array()) {
        return $this->request('margin/order/oco', 'sapi', 'POST', $params, null, null, array("cost" => 0.040002));
    }
    public function sapiPostMarginDust($params = array()) {
        return $this->request('margin/dust', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostMarginExchangeSmallLiability($params = array()) {
        return $this->request('margin/exchange-small-liability', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostMarginIsolatedTransfer($params = array()) {
        return $this->request('margin/isolated/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiPostMarginIsolatedAccount($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'POST', $params, null, null, array("cost" => 2.0001));
    }
    public function sapiPostMarginMaxLeverage($params = array()) {
        return $this->request('margin/max-leverage', 'sapi', 'POST', $params, null, null, array("cost" => 300));
    }
    public function sapiPostBnbBurn($params = array()) {
        return $this->request('bnbBurn', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountVirtualSubAccount($params = array()) {
        return $this->request('sub-account/virtualSubAccount', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountMarginTransfer($params = array()) {
        return $this->request('sub-account/margin/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 4.0002));
    }
    public function sapiPostSubAccountMarginEnable($params = array()) {
        return $this->request('sub-account/margin/enable', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountFuturesEnable($params = array()) {
        return $this->request('sub-account/futures/enable', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountFuturesTransfer($params = array()) {
        return $this->request('sub-account/futures/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountFuturesInternalTransfer($params = array()) {
        return $this->request('sub-account/futures/internalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountTransferSubToSub($params = array()) {
        return $this->request('sub-account/transfer/subToSub', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountTransferSubToMaster($params = array()) {
        return $this->request('sub-account/transfer/subToMaster', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountUniversalTransfer($params = array()) {
        return $this->request('sub-account/universalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSubAccountOptionsEnable($params = array()) {
        return $this->request('sub-account/options/enable', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostManagedSubaccountDeposit($params = array()) {
        return $this->request('managed-subaccount/deposit', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostManagedSubaccountWithdraw($params = array()) {
        return $this->request('managed-subaccount/withdraw', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostUserDataStream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostUserDataStreamIsolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostFuturesTransfer($params = array()) {
        return $this->request('futures/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingCustomizedFixedPurchase($params = array()) {
        return $this->request('lending/customizedFixed/purchase', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingDailyPurchase($params = array()) {
        return $this->request('lending/daily/purchase', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingDailyRedeem($params = array()) {
        return $this->request('lending/daily/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostBswapLiquidityAdd($params = array()) {
        return $this->request('bswap/liquidityAdd', 'sapi', 'POST', $params, null, null, array("cost" => 60));
    }
    public function sapiPostBswapLiquidityRemove($params = array()) {
        return $this->request('bswap/liquidityRemove', 'sapi', 'POST', $params, null, null, array("cost" => 60));
    }
    public function sapiPostBswapSwap($params = array()) {
        return $this->request('bswap/swap', 'sapi', 'POST', $params, null, null, array("cost" => 60));
    }
    public function sapiPostBswapClaimRewards($params = array()) {
        return $this->request('bswap/claimRewards', 'sapi', 'POST', $params, null, null, array("cost" => 6.667));
    }
    public function sapiPostBlvtSubscribe($params = array()) {
        return $this->request('blvt/subscribe', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostBlvtRedeem($params = array()) {
        return $this->request('blvt/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostApiReferralCustomization($params = array()) {
        return $this->request('apiReferral/customization', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostApiReferralUserCustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostApiReferralRebateHistoricalRecord($params = array()) {
        return $this->request('apiReferral/rebate/historicalRecord', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostApiReferralKickbackHistoricalRecord($params = array()) {
        return $this->request('apiReferral/kickback/historicalRecord', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccount($params = array()) {
        return $this->request('broker/subAccount', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountMargin($params = array()) {
        return $this->request('broker/subAccount/margin', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountFutures($params = array()) {
        return $this->request('broker/subAccount/futures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiPermission($params = array()) {
        return $this->request('broker/subAccountApi/permission', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiCommission($params = array()) {
        return $this->request('broker/subAccountApi/commission', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiCommissionFutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/futures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiCommissionCoinFutures($params = array()) {
        return $this->request('broker/subAccountApi/commission/coinFutures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerTransfer($params = array()) {
        return $this->request('broker/transfer', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerTransferFutures($params = array()) {
        return $this->request('broker/transfer/futures', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerRebateHistoricalRecord($params = array()) {
        return $this->request('broker/rebate/historicalRecord', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountBnbBurnSpot($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/spot', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountBnbBurnMarginInterest($params = array()) {
        return $this->request('broker/subAccount/bnbBurn/marginInterest', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountBlvt($params = array()) {
        return $this->request('broker/subAccount/blvt', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiIpRestriction($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiIpRestrictionIpList($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction/ipList', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerUniversalTransfer($params = array()) {
        return $this->request('broker/universalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiPermissionUniversalTransfer($params = array()) {
        return $this->request('broker/subAccountApi/permission/universalTransfer', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostBrokerSubAccountApiPermissionVanillaOptions($params = array()) {
        return $this->request('broker/subAccountApi/permission/vanillaOptions', 'sapi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function sapiPostGiftcardCreateCode($params = array()) {
        return $this->request('giftcard/createCode', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostGiftcardRedeemCode($params = array()) {
        return $this->request('giftcard/redeemCode', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostGiftcardBuyCode($params = array()) {
        return $this->request('giftcard/buyCode', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostAlgoSpotNewOrderTwap($params = array()) {
        return $this->request('algo/spot/newOrderTwap', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostAlgoFuturesNewOrderVp($params = array()) {
        return $this->request('algo/futures/newOrderVp', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostAlgoFuturesNewOrderTwap($params = array()) {
        return $this->request('algo/futures/newOrderTwap', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostStakingPurchase($params = array()) {
        return $this->request('staking/purchase', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostStakingRedeem($params = array()) {
        return $this->request('staking/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostStakingSetAutoStaking($params = array()) {
        return $this->request('staking/setAutoStaking', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostEthStakingEthStake($params = array()) {
        return $this->request('eth-staking/eth/stake', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiPostEthStakingEthRedeem($params = array()) {
        return $this->request('eth-staking/eth/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiPostEthStakingWbethWrap($params = array()) {
        return $this->request('eth-staking/wbeth/wrap', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiPostMiningHashTransferConfig($params = array()) {
        return $this->request('mining/hash-transfer/config', 'sapi', 'POST', $params, null, null, array("cost" => 0.5));
    }
    public function sapiPostMiningHashTransferConfigCancel($params = array()) {
        return $this->request('mining/hash-transfer/config/cancel', 'sapi', 'POST', $params, null, null, array("cost" => 0.5));
    }
    public function sapiPostPortfolioRepay($params = array()) {
        return $this->request('portfolio/repay', 'sapi', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiPostLoanVipRenew($params = array()) {
        return $this->request('loan/vip/renew', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanVipBorrow($params = array()) {
        return $this->request('loan/vip/borrow', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanBorrow($params = array()) {
        return $this->request('loan/borrow', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanRepay($params = array()) {
        return $this->request('loan/repay', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanAdjustLtv($params = array()) {
        return $this->request('loan/adjust/ltv', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanCustomizeMarginCall($params = array()) {
        return $this->request('loan/customize/margin_call', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanFlexibleBorrow($params = array()) {
        return $this->request('loan/flexible/borrow', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanFlexibleRepay($params = array()) {
        return $this->request('loan/flexible/repay', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanFlexibleAdjustLtv($params = array()) {
        return $this->request('loan/flexible/adjust/ltv', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostLoanVipRepay($params = array()) {
        return $this->request('loan/vip/repay', 'sapi', 'POST', $params, null, null, array("cost" => 40.002));
    }
    public function sapiPostConvertGetQuote($params = array()) {
        return $this->request('convert/getQuote', 'sapi', 'POST', $params, null, null, array("cost" => 1.3334));
    }
    public function sapiPostConvertAcceptQuote($params = array()) {
        return $this->request('convert/acceptQuote', 'sapi', 'POST', $params, null, null, array("cost" => 3.3335));
    }
    public function sapiPostConvertLimitPlaceOrder($params = array()) {
        return $this->request('convert/limit/placeOrder', 'sapi', 'POST', $params, null, null, array("cost" => 3.3335));
    }
    public function sapiPostConvertLimitCancelOrder($params = array()) {
        return $this->request('convert/limit/cancelOrder', 'sapi', 'POST', $params, null, null, array("cost" => 1.3334));
    }
    public function sapiPostPortfolioAutoCollection($params = array()) {
        return $this->request('portfolio/auto-collection', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapiPostPortfolioAssetCollection($params = array()) {
        return $this->request('portfolio/asset-collection', 'sapi', 'POST', $params, null, null, array("cost" => 6));
    }
    public function sapiPostPortfolioBnbTransfer($params = array()) {
        return $this->request('portfolio/bnb-transfer', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapiPostPortfolioRepayFuturesSwitch($params = array()) {
        return $this->request('portfolio/repay-futures-switch', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapiPostPortfolioRepayFuturesNegativeBalance($params = array()) {
        return $this->request('portfolio/repay-futures-negative-balance', 'sapi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function sapiPostLendingAutoInvestPlanAdd($params = array()) {
        return $this->request('lending/auto-invest/plan/add', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingAutoInvestPlanEdit($params = array()) {
        return $this->request('lending/auto-invest/plan/edit', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingAutoInvestPlanEditStatus($params = array()) {
        return $this->request('lending/auto-invest/plan/edit-status', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingAutoInvestOneOff($params = array()) {
        return $this->request('lending/auto-invest/one-off', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostLendingAutoInvestRedeem($params = array()) {
        return $this->request('lending/auto-invest/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSimpleEarnFlexibleSubscribe($params = array()) {
        return $this->request('simple-earn/flexible/subscribe', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSimpleEarnLockedSubscribe($params = array()) {
        return $this->request('simple-earn/locked/subscribe', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSimpleEarnFlexibleRedeem($params = array()) {
        return $this->request('simple-earn/flexible/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSimpleEarnLockedRedeem($params = array()) {
        return $this->request('simple-earn/locked/redeem', 'sapi', 'POST', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPostSimpleEarnFlexibleSetAutoSubscribe($params = array()) {
        return $this->request('simple-earn/flexible/setAutoSubscribe', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiPostSimpleEarnLockedSetAutoSubscribe($params = array()) {
        return $this->request('simple-earn/locked/setAutoSubscribe', 'sapi', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiPutUserDataStream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'PUT', $params, null, null, array("cost" => 0.1));
    }
    public function sapiPutUserDataStreamIsolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'PUT', $params, null, null, array("cost" => 0.1));
    }
    public function sapiDeleteMarginOpenOrders($params = array()) {
        return $this->request('margin/openOrders', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapiDeleteMarginOrder($params = array()) {
        return $this->request('margin/order', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.006667));
    }
    public function sapiDeleteMarginOrderList($params = array()) {
        return $this->request('margin/orderList', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.006667));
    }
    public function sapiDeleteMarginIsolatedAccount($params = array()) {
        return $this->request('margin/isolated/account', 'sapi', 'DELETE', $params, null, null, array("cost" => 2.0001));
    }
    public function sapiDeleteUserDataStream($params = array()) {
        return $this->request('userDataStream', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapiDeleteUserDataStreamIsolated($params = array()) {
        return $this->request('userDataStream/isolated', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapiDeleteBrokerSubAccountApi($params = array()) {
        return $this->request('broker/subAccountApi', 'sapi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function sapiDeleteBrokerSubAccountApiIpRestrictionIpList($params = array()) {
        return $this->request('broker/subAccountApi/ipRestriction/ipList', 'sapi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function sapiDeleteAlgoSpotOrder($params = array()) {
        return $this->request('algo/spot/order', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapiDeleteAlgoFuturesOrder($params = array()) {
        return $this->request('algo/futures/order', 'sapi', 'DELETE', $params, null, null, array("cost" => 0.1));
    }
    public function sapiDeleteSubAccountSubAccountApiIpRestrictionIpList($params = array()) {
        return $this->request('sub-account/subAccountApi/ipRestriction/ipList', 'sapi', 'DELETE', $params, null, null, array("cost" => 20.001));
    }
    public function sapiV2GetEthStakingAccount($params = array()) {
        return $this->request('eth-staking/account', 'sapiV2', 'GET', $params, null, null, array("cost" => 15));
    }
    public function sapiV2GetSubAccountFuturesAccount($params = array()) {
        return $this->request('sub-account/futures/account', 'sapiV2', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiV2GetSubAccountFuturesAccountSummary($params = array()) {
        return $this->request('sub-account/futures/accountSummary', 'sapiV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function sapiV2GetSubAccountFuturesPositionRisk($params = array()) {
        return $this->request('sub-account/futures/positionRisk', 'sapiV2', 'GET', $params, null, null, array("cost" => 0.1));
    }
    public function sapiV2PostEthStakingEthStake($params = array()) {
        return $this->request('eth-staking/eth/stake', 'sapiV2', 'POST', $params, null, null, array("cost" => 15));
    }
    public function sapiV2PostSubAccountSubAccountApiIpRestriction($params = array()) {
        return $this->request('sub-account/subAccountApi/ipRestriction', 'sapiV2', 'POST', $params, null, null, array("cost" => 20.001));
    }
    public function sapiV3GetSubAccountAssets($params = array()) {
        return $this->request('sub-account/assets', 'sapiV3', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function sapiV3PostAssetGetUserAsset($params = array()) {
        return $this->request('asset/getUserAsset', 'sapiV3', 'POST', $params, null, null, array("cost" => 0.5));
    }
    public function sapiV4GetSubAccountAssets($params = array()) {
        return $this->request('sub-account/assets', 'sapiV4', 'GET', $params, null, null, array("cost" => 0.40002));
    }
    public function dapiPublicGetPing($params = array()) {
        return $this->request('ping', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPublicGetTime($params = array()) {
        return $this->request('time', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPublicGetExchangeInfo($params = array()) {
        return $this->request('exchangeInfo', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPublicGetDepth($params = array()) {
        return $this->request('depth', 'dapiPublic', 'GET', $params, null, null, array("cost" => 2, "byLimit" => [[50, 2], [100, 5], [500, 10], [1000, 20]]));
    }
    public function dapiPublicGetTrades($params = array()) {
        return $this->request('trades', 'dapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiPublicGetHistoricalTrades($params = array()) {
        return $this->request('historicalTrades', 'dapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapiPublicGetAggTrades($params = array()) {
        return $this->request('aggTrades', 'dapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapiPublicGetPremiumIndex($params = array()) {
        return $this->request('premiumIndex', 'dapiPublic', 'GET', $params, null, null, array("cost" => 10));
    }
    public function dapiPublicGetFundingRate($params = array()) {
        return $this->request('fundingRate', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPublicGetKlines($params = array()) {
        return $this->request('klines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapiPublicGetContinuousKlines($params = array()) {
        return $this->request('continuousKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapiPublicGetIndexPriceKlines($params = array()) {
        return $this->request('indexPriceKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapiPublicGetMarkPriceKlines($params = array()) {
        return $this->request('markPriceKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapiPublicGetPremiumIndexKlines($params = array()) {
        return $this->request('premiumIndexKlines', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function dapiPublicGetTicker24hr($params = array()) {
        return $this->request('ticker/24hr', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 40));
    }
    public function dapiPublicGetTickerPrice($params = array()) {
        return $this->request('ticker/price', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 2));
    }
    public function dapiPublicGetTickerBookTicker($params = array()) {
        return $this->request('ticker/bookTicker', 'dapiPublic', 'GET', $params, null, null, array("cost" => 2, "noSymbol" => 5));
    }
    public function dapiPublicGetConstituents($params = array()) {
        return $this->request('constituents', 'dapiPublic', 'GET', $params, null, null, array("cost" => 2));
    }
    public function dapiPublicGetOpenInterest($params = array()) {
        return $this->request('openInterest', 'dapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetDeliveryPrice($params = array()) {
        return $this->request('delivery-price', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetOpenInterestHist($params = array()) {
        return $this->request('openInterestHist', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetTopLongShortAccountRatio($params = array()) {
        return $this->request('topLongShortAccountRatio', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetTopLongShortPositionRatio($params = array()) {
        return $this->request('topLongShortPositionRatio', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetGlobalLongShortAccountRatio($params = array()) {
        return $this->request('globalLongShortAccountRatio', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetTakerBuySellVol($params = array()) {
        return $this->request('takerBuySellVol', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiDataGetBasis($params = array()) {
        return $this->request('basis', 'dapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetPositionSideDual($params = array()) {
        return $this->request('positionSide/dual', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function dapiPrivateGetOrderAmendment($params = array()) {
        return $this->request('orderAmendment', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetOrder($params = array()) {
        return $this->request('order', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetOpenOrder($params = array()) {
        return $this->request('openOrder', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetOpenOrders($params = array()) {
        return $this->request('openOrders', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 5));
    }
    public function dapiPrivateGetAllOrders($params = array()) {
        return $this->request('allOrders', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 40));
    }
    public function dapiPrivateGetBalance($params = array()) {
        return $this->request('balance', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetAccount($params = array()) {
        return $this->request('account', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivateGetPositionMarginHistory($params = array()) {
        return $this->request('positionMargin/history', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetPositionRisk($params = array()) {
        return $this->request('positionRisk', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetUserTrades($params = array()) {
        return $this->request('userTrades', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 40));
    }
    public function dapiPrivateGetIncome($params = array()) {
        return $this->request('income', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapiPrivateGetLeverageBracket($params = array()) {
        return $this->request('leverageBracket', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateGetForceOrders($params = array()) {
        return $this->request('forceOrders', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 50));
    }
    public function dapiPrivateGetAdlQuantile($params = array()) {
        return $this->request('adlQuantile', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivateGetCommissionRate($params = array()) {
        return $this->request('commissionRate', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 20));
    }
    public function dapiPrivateGetIncomeAsyn($params = array()) {
        return $this->request('income/asyn', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivateGetIncomeAsynId($params = array()) {
        return $this->request('income/asyn/id', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivateGetPmExchangeInfo($params = array()) {
        return $this->request('pmExchangeInfo', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function dapiPrivateGetPmAccountInfo($params = array()) {
        return $this->request('pmAccountInfo', 'dapiPrivate', 'GET', $params, null, null, array("cost" => 0.5));
    }
    public function dapiPrivatePostPositionSideDual($params = array()) {
        return $this->request('positionSide/dual', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePostOrder($params = array()) {
        return $this->request('order', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 4));
    }
    public function dapiPrivatePostBatchOrders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivatePostCountdownCancelAll($params = array()) {
        return $this->request('countdownCancelAll', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 10));
    }
    public function dapiPrivatePostLeverage($params = array()) {
        return $this->request('leverage', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePostMarginType($params = array()) {
        return $this->request('marginType', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePostPositionMargin($params = array()) {
        return $this->request('positionMargin', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePostListenKey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePutListenKey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePutOrder($params = array()) {
        return $this->request('order', 'dapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivatePutBatchOrders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'PUT', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivateDeleteOrder($params = array()) {
        return $this->request('order', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateDeleteAllOpenOrders($params = array()) {
        return $this->request('allOpenOrders', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateDeleteBatchOrders($params = array()) {
        return $this->request('batchOrders', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 5));
    }
    public function dapiPrivateDeleteListenKey($params = array()) {
        return $this->request('listenKey', 'dapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function dapiPrivateV2GetLeverageBracket($params = array()) {
        return $this->request('leverageBracket', 'dapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetPing($params = array()) {
        return $this->request('ping', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetTime($params = array()) {
        return $this->request('time', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetExchangeInfo($params = array()) {
        return $this->request('exchangeInfo', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetDepth($params = array()) {
        return $this->request('depth', 'fapiPublic', 'GET', $params, null, null, array("cost" => 2, "byLimit" => [[50, 2], [100, 5], [500, 10], [1000, 20]]));
    }
    public function fapiPublicGetTrades($params = array()) {
        return $this->request('trades', 'fapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPublicGetHistoricalTrades($params = array()) {
        return $this->request('historicalTrades', 'fapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function fapiPublicGetAggTrades($params = array()) {
        return $this->request('aggTrades', 'fapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function fapiPublicGetKlines($params = array()) {
        return $this->request('klines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapiPublicGetContinuousKlines($params = array()) {
        return $this->request('continuousKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapiPublicGetMarkPriceKlines($params = array()) {
        return $this->request('markPriceKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapiPublicGetIndexPriceKlines($params = array()) {
        return $this->request('indexPriceKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[99, 1], [499, 2], [1000, 5], [10000, 10]]));
    }
    public function fapiPublicGetFundingRate($params = array()) {
        return $this->request('fundingRate', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetFundingInfo($params = array()) {
        return $this->request('fundingInfo', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetPremiumIndex($params = array()) {
        return $this->request('premiumIndex', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetTicker24hr($params = array()) {
        return $this->request('ticker/24hr', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 40));
    }
    public function fapiPublicGetTickerPrice($params = array()) {
        return $this->request('ticker/price', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 2));
    }
    public function fapiPublicGetTickerBookTicker($params = array()) {
        return $this->request('ticker/bookTicker', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 2));
    }
    public function fapiPublicGetOpenInterest($params = array()) {
        return $this->request('openInterest', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetIndexInfo($params = array()) {
        return $this->request('indexInfo', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicGetAssetIndex($params = array()) {
        return $this->request('assetIndex', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 10));
    }
    public function fapiPublicGetConstituents($params = array()) {
        return $this->request('constituents', 'fapiPublic', 'GET', $params, null, null, array("cost" => 2));
    }
    public function fapiPublicGetApiTradingStatus($params = array()) {
        return $this->request('apiTradingStatus', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 10));
    }
    public function fapiPublicGetLvtKlines($params = array()) {
        return $this->request('lvtKlines', 'fapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetDeliveryPrice($params = array()) {
        return $this->request('delivery-price', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetOpenInterestHist($params = array()) {
        return $this->request('openInterestHist', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetTopLongShortAccountRatio($params = array()) {
        return $this->request('topLongShortAccountRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetTopLongShortPositionRatio($params = array()) {
        return $this->request('topLongShortPositionRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetGlobalLongShortAccountRatio($params = array()) {
        return $this->request('globalLongShortAccountRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetTakerlongshortRatio($params = array()) {
        return $this->request('takerlongshortRatio', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiDataGetBasis($params = array()) {
        return $this->request('basis', 'fapiData', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetForceOrders($params = array()) {
        return $this->request('forceOrders', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 20, "noSymbol" => 50));
    }
    public function fapiPrivateGetAllOrders($params = array()) {
        return $this->request('allOrders', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetOpenOrder($params = array()) {
        return $this->request('openOrder', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetOpenOrders($params = array()) {
        return $this->request('openOrders', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetOrder($params = array()) {
        return $this->request('order', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetAccount($params = array()) {
        return $this->request('account', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetBalance($params = array()) {
        return $this->request('balance', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetLeverageBracket($params = array()) {
        return $this->request('leverageBracket', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetPositionMarginHistory($params = array()) {
        return $this->request('positionMargin/history', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetPositionRisk($params = array()) {
        return $this->request('positionRisk', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetPositionSideDual($params = array()) {
        return $this->request('positionSide/dual', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function fapiPrivateGetUserTrades($params = array()) {
        return $this->request('userTrades', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetIncome($params = array()) {
        return $this->request('income', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function fapiPrivateGetCommissionRate($params = array()) {
        return $this->request('commissionRate', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 20));
    }
    public function fapiPrivateGetApiTradingStatus($params = array()) {
        return $this->request('apiTradingStatus', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetMultiAssetsMargin($params = array()) {
        return $this->request('multiAssetsMargin', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 30));
    }
    public function fapiPrivateGetApiReferralIfNewUser($params = array()) {
        return $this->request('apiReferral/ifNewUser', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralCustomization($params = array()) {
        return $this->request('apiReferral/customization', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralUserCustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralTraderNum($params = array()) {
        return $this->request('apiReferral/traderNum', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralOverview($params = array()) {
        return $this->request('apiReferral/overview', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralTradeVol($params = array()) {
        return $this->request('apiReferral/tradeVol', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralRebateVol($params = array()) {
        return $this->request('apiReferral/rebateVol', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetApiReferralTraderSummary($params = array()) {
        return $this->request('apiReferral/traderSummary', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetAdlQuantile($params = array()) {
        return $this->request('adlQuantile', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetPmAccountInfo($params = array()) {
        return $this->request('pmAccountInfo', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateGetOrderAmendment($params = array()) {
        return $this->request('orderAmendment', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateGetIncomeAsyn($params = array()) {
        return $this->request('income/asyn', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1000));
    }
    public function fapiPrivateGetIncomeAsynId($params = array()) {
        return $this->request('income/asyn/id', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 10));
    }
    public function fapiPrivateGetOrderAsyn($params = array()) {
        return $this->request('order/asyn', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1000));
    }
    public function fapiPrivateGetOrderAsynId($params = array()) {
        return $this->request('order/asyn/id', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 10));
    }
    public function fapiPrivateGetTradeAsyn($params = array()) {
        return $this->request('trade/asyn', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 1000));
    }
    public function fapiPrivateGetTradeAsynId($params = array()) {
        return $this->request('trade/asyn/id', 'fapiPrivate', 'GET', $params, null, null, array("cost" => 10));
    }
    public function fapiPrivatePostBatchOrders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivatePostPositionSideDual($params = array()) {
        return $this->request('positionSide/dual', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostPositionMargin($params = array()) {
        return $this->request('positionMargin', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostMarginType($params = array()) {
        return $this->request('marginType', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostOrder($params = array()) {
        return $this->request('order', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 4));
    }
    public function fapiPrivatePostLeverage($params = array()) {
        return $this->request('leverage', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostListenKey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostCountdownCancelAll($params = array()) {
        return $this->request('countdownCancelAll', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 10));
    }
    public function fapiPrivatePostMultiAssetsMargin($params = array()) {
        return $this->request('multiAssetsMargin', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostApiReferralCustomization($params = array()) {
        return $this->request('apiReferral/customization', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePostApiReferralUserCustomization($params = array()) {
        return $this->request('apiReferral/userCustomization', 'fapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePutListenKey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePutOrder($params = array()) {
        return $this->request('order', 'fapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivatePutBatchOrders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'PUT', $params, null, null, array("cost" => 5));
    }
    public function fapiPrivateDeleteBatchOrders($params = array()) {
        return $this->request('batchOrders', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateDeleteOrder($params = array()) {
        return $this->request('order', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateDeleteAllOpenOrders($params = array()) {
        return $this->request('allOpenOrders', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateDeleteListenKey($params = array()) {
        return $this->request('listenKey', 'fapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function fapiPublicV2GetTickerPrice($params = array()) {
        return $this->request('ticker/price', 'fapiPublicV2', 'GET', $params, null, null, array("cost" => 0));
    }
    public function fapiPrivateV2GetAccount($params = array()) {
        return $this->request('account', 'fapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateV2GetBalance($params = array()) {
        return $this->request('balance', 'fapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function fapiPrivateV2GetPositionRisk($params = array()) {
        return $this->request('positionRisk', 'fapiPrivateV2', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetPing($params = array()) {
        return $this->request('ping', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetTime($params = array()) {
        return $this->request('time', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetExchangeInfo($params = array()) {
        return $this->request('exchangeInfo', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetIndex($params = array()) {
        return $this->request('index', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetTicker($params = array()) {
        return $this->request('ticker', 'eapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPublicGetMark($params = array()) {
        return $this->request('mark', 'eapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPublicGetDepth($params = array()) {
        return $this->request('depth', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetKlines($params = array()) {
        return $this->request('klines', 'eapiPublic', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPublicGetTrades($params = array()) {
        return $this->request('trades', 'eapiPublic', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPublicGetHistoricalTrades($params = array()) {
        return $this->request('historicalTrades', 'eapiPublic', 'GET', $params, null, null, array("cost" => 20));
    }
    public function eapiPublicGetExerciseHistory($params = array()) {
        return $this->request('exerciseHistory', 'eapiPublic', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiPublicGetOpenInterest($params = array()) {
        return $this->request('openInterest', 'eapiPublic', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiPrivateGetAccount($params = array()) {
        return $this->request('account', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiPrivateGetPosition($params = array()) {
        return $this->request('position', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPrivateGetOpenOrders($params = array()) {
        return $this->request('openOrders', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1, "noSymbol" => 40));
    }
    public function eapiPrivateGetHistoryOrders($params = array()) {
        return $this->request('historyOrders', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiPrivateGetUserTrades($params = array()) {
        return $this->request('userTrades', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPrivateGetExerciseRecord($params = array()) {
        return $this->request('exerciseRecord', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPrivateGetBill($params = array()) {
        return $this->request('bill', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateGetIncomeAsyn($params = array()) {
        return $this->request('income/asyn', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPrivateGetIncomeAsynId($params = array()) {
        return $this->request('income/asyn/id', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 5));
    }
    public function eapiPrivateGetMarginAccount($params = array()) {
        return $this->request('marginAccount', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 3));
    }
    public function eapiPrivateGetMmp($params = array()) {
        return $this->request('mmp', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateGetCountdownCancelAll($params = array()) {
        return $this->request('countdownCancelAll', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateGetOrder($params = array()) {
        return $this->request('order', 'eapiPrivate', 'GET', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivatePostOrder($params = array()) {
        return $this->request('order', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivatePostBatchOrders($params = array()) {
        return $this->request('batchOrders', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 5));
    }
    public function eapiPrivatePostListenKey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivatePostMmpSet($params = array()) {
        return $this->request('mmpSet', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivatePostMmpReset($params = array()) {
        return $this->request('mmpReset', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivatePostCountdownCancelAll($params = array()) {
        return $this->request('countdownCancelAll', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivatePostCountdownCancelAllHeartBeat($params = array()) {
        return $this->request('countdownCancelAllHeartBeat', 'eapiPrivate', 'POST', $params, null, null, array("cost" => 10));
    }
    public function eapiPrivatePutListenKey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateDeleteOrder($params = array()) {
        return $this->request('order', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateDeleteBatchOrders($params = array()) {
        return $this->request('batchOrders', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateDeleteAllOpenOrders($params = array()) {
        return $this->request('allOpenOrders', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateDeleteAllOpenOrdersByUnderlying($params = array()) {
        return $this->request('allOpenOrdersByUnderlying', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function eapiPrivateDeleteListenKey($params = array()) {
        return $this->request('listenKey', 'eapiPrivate', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function publicGetPing($params = array()) {
        return $this->request('ping', 'public', 'GET', $params, null, null, array("cost" => 0.2));
    }
    public function publicGetTime($params = array()) {
        return $this->request('time', 'public', 'GET', $params, null, null, array("cost" => 0.2));
    }
    public function publicGetDepth($params = array()) {
        return $this->request('depth', 'public', 'GET', $params, null, null, array("cost" => 1, "byLimit" => [[100, 1], [500, 5], [1000, 10], [5000, 50]]));
    }
    public function publicGetTrades($params = array()) {
        return $this->request('trades', 'public', 'GET', $params, null, null, array("cost" => 2));
    }
    public function publicGetAggTrades($params = array()) {
        return $this->request('aggTrades', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function publicGetHistoricalTrades($params = array()) {
        return $this->request('historicalTrades', 'public', 'GET', $params, null, null, array("cost" => 2));
    }
    public function publicGetKlines($params = array()) {
        return $this->request('klines', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function publicGetUiKlines($params = array()) {
        return $this->request('uiKlines', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function publicGetTicker24hr($params = array()) {
        return $this->request('ticker/24hr', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 16));
    }
    public function publicGetTicker($params = array()) {
        return $this->request('ticker', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 16));
    }
    public function publicGetTickerTradingDay($params = array()) {
        return $this->request('ticker/tradingDay', 'public', 'GET', $params, null, null, array("cost" => 0.8));
    }
    public function publicGetTickerPrice($params = array()) {
        return $this->request('ticker/price', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 0.8));
    }
    public function publicGetTickerBookTicker($params = array()) {
        return $this->request('ticker/bookTicker', 'public', 'GET', $params, null, null, array("cost" => 0.4, "noSymbol" => 0.8));
    }
    public function publicGetExchangeInfo($params = array()) {
        return $this->request('exchangeInfo', 'public', 'GET', $params, null, null, array("cost" => 4));
    }
    public function publicGetAvgPrice($params = array()) {
        return $this->request('avgPrice', 'public', 'GET', $params, null, null, array("cost" => 0.4));
    }
    public function publicPutUserDataStream($params = array()) {
        return $this->request('userDataStream', 'public', 'PUT', $params, null, null, array("cost" => 0.4));
    }
    public function publicPostUserDataStream($params = array()) {
        return $this->request('userDataStream', 'public', 'POST', $params, null, null, array("cost" => 0.4));
    }
    public function publicDeleteUserDataStream($params = array()) {
        return $this->request('userDataStream', 'public', 'DELETE', $params, null, null, array("cost" => 0.4));
    }
    public function privateGetAllOrderList($params = array()) {
        return $this->request('allOrderList', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privateGetOpenOrderList($params = array()) {
        return $this->request('openOrderList', 'private', 'GET', $params, null, null, array("cost" => 1.2));
    }
    public function privateGetOrderList($params = array()) {
        return $this->request('orderList', 'private', 'GET', $params, null, null, array("cost" => 0.8));
    }
    public function privateGetOrder($params = array()) {
        return $this->request('order', 'private', 'GET', $params, null, null, array("cost" => 0.8));
    }
    public function privateGetOpenOrders($params = array()) {
        return $this->request('openOrders', 'private', 'GET', $params, null, null, array("cost" => 1.2, "noSymbol" => 16));
    }
    public function privateGetAllOrders($params = array()) {
        return $this->request('allOrders', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privateGetAccount($params = array()) {
        return $this->request('account', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privateGetMyTrades($params = array()) {
        return $this->request('myTrades', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privateGetRateLimitOrder($params = array()) {
        return $this->request('rateLimit/order', 'private', 'GET', $params, null, null, array("cost" => 8));
    }
    public function privateGetMyPreventedMatches($params = array()) {
        return $this->request('myPreventedMatches', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privateGetMyAllocations($params = array()) {
        return $this->request('myAllocations', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privateGetAccountCommission($params = array()) {
        return $this->request('account/commission', 'private', 'GET', $params, null, null, array("cost" => 4));
    }
    public function privatePostOrderOco($params = array()) {
        return $this->request('order/oco', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function privatePostSorOrder($params = array()) {
        return $this->request('sor/order', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function privatePostSorOrderTest($params = array()) {
        return $this->request('sor/order/test', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function privatePostOrder($params = array()) {
        return $this->request('order', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function privatePostOrderCancelReplace($params = array()) {
        return $this->request('order/cancelReplace', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function privatePostOrderTest($params = array()) {
        return $this->request('order/test', 'private', 'POST', $params, null, null, array("cost" => 0.2));
    }
    public function privateDeleteOpenOrders($params = array()) {
        return $this->request('openOrders', 'private', 'DELETE', $params, null, null, array("cost" => 0.2));
    }
    public function privateDeleteOrderList($params = array()) {
        return $this->request('orderList', 'private', 'DELETE', $params, null, null, array("cost" => 0.2));
    }
    public function privateDeleteOrder($params = array()) {
        return $this->request('order', 'private', 'DELETE', $params, null, null, array("cost" => 0.2));
    }
    public function papiGetPing($params = array()) {
        return $this->request('ping', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmOrder($params = array()) {
        return $this->request('um/order', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmOpenOrder($params = array()) {
        return $this->request('um/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmOpenOrders($params = array()) {
        return $this->request('um/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmAllOrders($params = array()) {
        return $this->request('um/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetCmOrder($params = array()) {
        return $this->request('cm/order', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetCmOpenOrder($params = array()) {
        return $this->request('cm/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetCmOpenOrders($params = array()) {
        return $this->request('cm/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetCmAllOrders($params = array()) {
        return $this->request('cm/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetUmConditionalOpenOrder($params = array()) {
        return $this->request('um/conditional/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmConditionalOpenOrders($params = array()) {
        return $this->request('um/conditional/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papiGetUmConditionalOrderHistory($params = array()) {
        return $this->request('um/conditional/orderHistory', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmConditionalAllOrders($params = array()) {
        return $this->request('um/conditional/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papiGetCmConditionalOpenOrder($params = array()) {
        return $this->request('cm/conditional/openOrder', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetCmConditionalOpenOrders($params = array()) {
        return $this->request('cm/conditional/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papiGetCmConditionalOrderHistory($params = array()) {
        return $this->request('cm/conditional/orderHistory', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetCmConditionalAllOrders($params = array()) {
        return $this->request('cm/conditional/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 40));
    }
    public function papiGetMarginOrder($params = array()) {
        return $this->request('margin/order', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetMarginOpenOrders($params = array()) {
        return $this->request('margin/openOrders', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetMarginAllOrders($params = array()) {
        return $this->request('margin/allOrders', 'papi', 'GET', $params, null, null, array("cost" => 100));
    }
    public function papiGetMarginOrderList($params = array()) {
        return $this->request('margin/orderList', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetMarginAllOrderList($params = array()) {
        return $this->request('margin/allOrderList', 'papi', 'GET', $params, null, null, array("cost" => 100));
    }
    public function papiGetMarginOpenOrderList($params = array()) {
        return $this->request('margin/openOrderList', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetMarginMyTrades($params = array()) {
        return $this->request('margin/myTrades', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetBalance($params = array()) {
        return $this->request('balance', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetAccount($params = array()) {
        return $this->request('account', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetMarginMaxBorrowable($params = array()) {
        return $this->request('margin/maxBorrowable', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetMarginMaxWithdraw($params = array()) {
        return $this->request('margin/maxWithdraw', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetUmPositionRisk($params = array()) {
        return $this->request('um/positionRisk', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetCmPositionRisk($params = array()) {
        return $this->request('cm/positionRisk', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmPositionSideDual($params = array()) {
        return $this->request('um/positionSide/dual', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papiGetCmPositionSideDual($params = array()) {
        return $this->request('cm/positionSide/dual', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papiGetUmUserTrades($params = array()) {
        return $this->request('um/userTrades', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetCmUserTrades($params = array()) {
        return $this->request('cm/userTrades', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetUmLeverageBracket($params = array()) {
        return $this->request('um/leverageBracket', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetCmLeverageBracket($params = array()) {
        return $this->request('cm/leverageBracket', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetMarginForceOrders($params = array()) {
        return $this->request('margin/forceOrders', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmForceOrders($params = array()) {
        return $this->request('um/forceOrders', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetCmForceOrders($params = array()) {
        return $this->request('cm/forceOrders', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetUmApiTradingStatus($params = array()) {
        return $this->request('um/apiTradingStatus', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetUmCommissionRate($params = array()) {
        return $this->request('um/commissionRate', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetCmCommissionRate($params = array()) {
        return $this->request('cm/commissionRate', 'papi', 'GET', $params, null, null, array("cost" => 20));
    }
    public function papiGetMarginMarginLoan($params = array()) {
        return $this->request('margin/marginLoan', 'papi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function papiGetMarginRepayLoan($params = array()) {
        return $this->request('margin/repayLoan', 'papi', 'GET', $params, null, null, array("cost" => 10));
    }
    public function papiGetMarginMarginInterestHistory($params = array()) {
        return $this->request('margin/marginInterestHistory', 'papi', 'GET', $params, null, null, array("cost" => 1));
    }
    public function papiGetPortfolioInterestHistory($params = array()) {
        return $this->request('portfolio/interest-history', 'papi', 'GET', $params, null, null, array("cost" => 50));
    }
    public function papiGetUmIncome($params = array()) {
        return $this->request('um/income', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papiGetCmIncome($params = array()) {
        return $this->request('cm/income', 'papi', 'GET', $params, null, null, array("cost" => 30));
    }
    public function papiGetUmAccount($params = array()) {
        return $this->request('um/account', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetCmAccount($params = array()) {
        return $this->request('cm/account', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetRepayFuturesSwitch($params = array()) {
        return $this->request('repay-futures-switch', 'papi', 'GET', $params, null, null, array("cost" => 3));
    }
    public function papiGetUmAdlQuantile($params = array()) {
        return $this->request('um/adlQuantile', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiGetCmAdlQuantile($params = array()) {
        return $this->request('cm/adlQuantile', 'papi', 'GET', $params, null, null, array("cost" => 5));
    }
    public function papiPostUmOrder($params = array()) {
        return $this->request('um/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostUmConditionalOrder($params = array()) {
        return $this->request('um/conditional/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostCmOrder($params = array()) {
        return $this->request('cm/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostCmConditionalOrder($params = array()) {
        return $this->request('cm/conditional/order', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostMarginOrder($params = array()) {
        return $this->request('margin/order', 'papi', 'POST', $params, null, null, array("cost" => 0.0133));
    }
    public function papiPostMarginLoan($params = array()) {
        return $this->request('marginLoan', 'papi', 'POST', $params, null, null, array("cost" => 0.1333));
    }
    public function papiPostRepayLoan($params = array()) {
        return $this->request('repayLoan', 'papi', 'POST', $params, null, null, array("cost" => 0.1333));
    }
    public function papiPostMarginOrderOco($params = array()) {
        return $this->request('margin/order/oco', 'papi', 'POST', $params, null, null, array("cost" => 0.04));
    }
    public function papiPostUmLeverage($params = array()) {
        return $this->request('um/leverage', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostCmLeverage($params = array()) {
        return $this->request('cm/leverage', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostUmPositionSideDual($params = array()) {
        return $this->request('um/positionSide/dual', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostCmPositionSideDual($params = array()) {
        return $this->request('cm/positionSide/dual', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostAutoCollection($params = array()) {
        return $this->request('auto-collection', 'papi', 'POST', $params, null, null, array("cost" => 0.6667));
    }
    public function papiPostBnbTransfer($params = array()) {
        return $this->request('bnb-transfer', 'papi', 'POST', $params, null, null, array("cost" => 0.6667));
    }
    public function papiPostRepayFuturesSwitch($params = array()) {
        return $this->request('repay-futures-switch', 'papi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function papiPostRepayFuturesNegativeBalance($params = array()) {
        return $this->request('repay-futures-negative-balance', 'papi', 'POST', $params, null, null, array("cost" => 150));
    }
    public function papiPostListenKey($params = array()) {
        return $this->request('listenKey', 'papi', 'POST', $params, null, null, array("cost" => 1));
    }
    public function papiPostAssetCollection($params = array()) {
        return $this->request('asset-collection', 'papi', 'POST', $params, null, null, array("cost" => 3));
    }
    public function papiPutListenKey($params = array()) {
        return $this->request('listenKey', 'papi', 'PUT', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteUmOrder($params = array()) {
        return $this->request('um/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteUmConditionalOrder($params = array()) {
        return $this->request('um/conditional/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteUmAllOpenOrders($params = array()) {
        return $this->request('um/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteUmConditionalAllOpenOrders($params = array()) {
        return $this->request('um/conditional/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteCmOrder($params = array()) {
        return $this->request('cm/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteCmConditionalOrder($params = array()) {
        return $this->request('cm/conditional/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteCmAllOpenOrders($params = array()) {
        return $this->request('cm/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteCmConditionalAllOpenOrders($params = array()) {
        return $this->request('cm/conditional/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteMarginOrder($params = array()) {
        return $this->request('margin/order', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
    public function papiDeleteMarginAllOpenOrders($params = array()) {
        return $this->request('margin/allOpenOrders', 'papi', 'DELETE', $params, null, null, array("cost" => 5));
    }
    public function papiDeleteMarginOrderList($params = array()) {
        return $this->request('margin/orderList', 'papi', 'DELETE', $params, null, null, array("cost" => 2));
    }
    public function papiDeleteListenKey($params = array()) {
        return $this->request('listenKey', 'papi', 'DELETE', $params, null, null, array("cost" => 1));
    }
}
