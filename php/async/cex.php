<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\cex as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\NullResponse;
use ccxt\InvalidOrder;
use ccxt\Precise;
use React\Async;
use React\Promise\PromiseInterface;

class cex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'cex',
            'name' => 'CEX.IO',
            'countries' => array( 'GB', 'EU', 'CY', 'RU' ),
            'rateLimit' => 1500,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false, // has but not through api
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDeposit' => false,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => false,
                'fetchDepositsWithdrawals' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPositionMode' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTransactions' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'fetchWithdrawalWhitelist' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMargin' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '1h' => '1h',
                '1d' => '1d',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766442-8ddc33b0-5ed8-11e7-8b98-f786aef0f3c9.jpg',
                'api' => array(
                    'rest' => 'https://cex.io/api',
                ),
                'www' => 'https://cex.io',
                'doc' => 'https://cex.io/cex-api',
                'fees' => array(
                    'https://cex.io/fee-schedule',
                    'https://cex.io/limits-commissions',
                ),
                'referral' => 'https://cex.io/r/0/up105393824/0/',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'uid' => true,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'currency_profile',
                        'currency_limits/',
                        'last_price/{pair}/',
                        'last_prices/{currencies}/',
                        'ohlcv/hd/{yyyymmdd}/{pair}',
                        'order_book/{pair}/',
                        'ticker/{pair}/',
                        'tickers/{currencies}/',
                        'trade_history/{pair}/',
                    ),
                    'post' => array(
                        'convert/{pair}',
                        'price_stats/{pair}',
                    ),
                ),
                'private' => array(
                    'post' => array(
                        'active_orders_status/',
                        'archived_orders/{pair}/',
                        'balance/',
                        'cancel_order/',
                        'cancel_orders/{pair}/',
                        'cancel_replace_order/{pair}/',
                        'close_position/{pair}/',
                        'get_address/',
                        'get_crypto_address',
                        'get_myfee/',
                        'get_order/',
                        'get_order_tx/',
                        'open_orders/{pair}/',
                        'open_orders/',
                        'open_position/{pair}/',
                        'open_positions/{pair}/',
                        'place_order/{pair}/',
                        'raw_tx_history',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'maker' => $this->parse_number('0.0016'),
                    'taker' => $this->parse_number('0.0025'),
                ),
                'funding' => array(
                    'withdraw' => array(),
                    'deposit' => array(
                        // 'USD' => amount => amount * 0.035 + 0.25,
                        // 'EUR' => amount => amount * 0.035 + 0.24,
                        // 'RUB' => amount => amount * 0.05 + 15.57,
                        // 'GBP' => amount => amount * 0.035 + 0.2,
                        'BTC' => 0.0,
                        'ETH' => 0.0,
                        'BCH' => 0.0,
                        'DASH' => 0.0,
                        'BTG' => 0.0,
                        'ZEC' => 0.0,
                        'XRP' => 0.0,
                        'XLM' => 0.0,
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(),
                'broad' => array(
                    'Insufficient funds' => '\\ccxt\\InsufficientFunds',
                    'Nonce must be incremented' => '\\ccxt\\InvalidNonce',
                    'Invalid Order' => '\\ccxt\\InvalidOrder',
                    'Order not found' => '\\ccxt\\OrderNotFound',
                    'limit exceeded' => '\\ccxt\\RateLimitExceeded', // array("error":"rate limit exceeded")
                    'Invalid API key' => '\\ccxt\\AuthenticationError',
                    'There was an error while placing your order' => '\\ccxt\\InvalidOrder',
                    'Sorry, too many clients already' => '\\ccxt\\DDoSProtection',
                    'Invalid Symbols Pair' => '\\ccxt\\BadSymbol',
                    'Wrong currency pair' => '\\ccxt\\BadSymbol', // array("error":"There was an error while placing your order => Wrong currency pair.","safe":true)
                ),
            ),
            'options' => array(
                'fetchOHLCVWarning' => true,
                'createMarketBuyOrderRequiresPrice' => true,
                'order' => array(
                    'status' => array(
                        'c' => 'canceled',
                        'd' => 'closed',
                        'cd' => 'canceled',
                        'a' => 'open',
                    ),
                ),
                'defaultNetwork' => 'ERC20',
                'defaultNetworks' => array(
                    'USDT' => 'TRC20',
                ),
                'networks' => array(
                    'ERC20' => 'Ethereum',
                    'BTC' => 'BTC',
                    'BEP20' => 'Binance Smart Chain',
                    'TRC20' => 'Tron',
                ),
            ),
        ));
    }

    public function fetch_currencies_from_cache($params = array ()) {
        return Async\async(function () use ($params) {
            // this method is $now redundant
            // currencies are $now fetched before markets
            $options = $this->safe_value($this->options, 'fetchCurrencies', array());
            $timestamp = $this->safe_integer($options, 'timestamp');
            $expires = $this->safe_integer($options, 'expires', 1000);
            $now = $this->milliseconds();
            if (($timestamp === null) || (($now - $timestamp) > $expires)) {
                $response = Async\await($this->publicGetCurrencyProfile ($params));
                $this->options['fetchCurrencies'] = array_merge($options, array(
                    'response' => $response,
                    'timestamp' => $now,
                ));
            }
            return $this->safe_value($this->options['fetchCurrencies'], 'response');
        }) ();
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches all available $currencies on an exchange
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of $currencies
             */
            $response = Async\await($this->fetch_currencies_from_cache($params));
            $this->options['currencies'] = array(
                'timestamp' => $this->milliseconds(),
                'response' => $response,
            );
            //
            //     {
            //         "e":"currency_profile",
            //         "ok":"ok",
            //         "data":{
            //             "symbols":array(
            //                 array(
            //                     "code":"GHS",
            //                     "contract":true,
            //                     "commodity":true,
            //                     "fiat":false,
            //                     "description":"CEX.IO doesn't provide cloud mining services anymore.",
            //                     "precision":8,
            //                     "scale":0,
            //                     "minimumCurrencyAmount":"0.00000001",
            //                     "minimalWithdrawalAmount":-1
            //                 ),
            //                 array(
            //                     "code":"BTC",
            //                     "contract":false,
            //                     "commodity":false,
            //                     "fiat":false,
            //                     "description":"",
            //                     "precision":8,
            //                     "scale":0,
            //                     "minimumCurrencyAmount":"0.00000001",
            //                     "minimalWithdrawalAmount":0.002
            //                 ),
            //                 {
            //                     "code":"ETH",
            //                     "contract":false,
            //                     "commodity":false,
            //                     "fiat":false,
            //                     "description":"",
            //                     "precision":8,
            //                     "scale":2,
            //                     "minimumCurrencyAmount":"0.00000100",
            //                     "minimalWithdrawalAmount":0.01
            //                 }
            //             ),
            //             "pairs":array(
            //                 array(
            //                     "symbol1":"BTC",
            //                     "symbol2":"USD",
            //                     "pricePrecision":1,
            //                     "priceScale":"/1000000",
            //                     "minLotSize":0.002,
            //                     "minLotSizeS2":20
            //                 ),
            //                 {
            //                     "symbol1":"ETH",
            //                     "symbol2":"USD",
            //                     "pricePrecision":2,
            //                     "priceScale":"/10000",
            //                     "minLotSize":0.1,
            //                     "minLotSizeS2":20
            //                 }
            //             )
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $currencies = $this->safe_value($data, 'symbols', array());
            $result = array();
            for ($i = 0; $i < count($currencies); $i++) {
                $currency = $currencies[$i];
                $id = $this->safe_string($currency, 'code');
                $code = $this->safe_currency_code($id);
                $active = true;
                $result[$code] = array(
                    'id' => $id,
                    'code' => $code,
                    'name' => $id,
                    'active' => $active,
                    'deposit' => null,
                    'withdraw' => null,
                    'precision' => $this->parse_number($this->parse_precision($this->safe_string($currency, 'precision'))),
                    'fee' => null,
                    'limits' => array(
                        'amount' => array(
                            'min' => $this->safe_number($currency, 'minimumCurrencyAmount'),
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->safe_number($currency, 'minimalWithdrawalAmount'),
                            'max' => null,
                        ),
                    ),
                    'info' => $currency,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for cex
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $currenciesResponse = Async\await($this->fetch_currencies_from_cache($params));
            $currenciesData = $this->safe_value($currenciesResponse, 'data', array());
            $currencies = $this->safe_value($currenciesData, 'symbols', array());
            $currenciesById = $this->index_by($currencies, 'code');
            $pairs = $this->safe_value($currenciesData, 'pairs', array());
            $response = Async\await($this->publicGetCurrencyLimits ($params));
            //
            //     {
            //         "e":"currency_limits",
            //         "ok":"ok",
            //         "data" => {
            //             "pairs":array(
            //                 array(
            //                     "symbol1":"BTC",
            //                     "symbol2":"USD",
            //                     "minLotSize":0.002,
            //                     "minLotSizeS2":20,
            //                     "maxLotSize":30,
            //                     "minPrice":"1500",
            //                     "maxPrice":"35000"
            //                 ),
            //                 {
            //                     "symbol1":"BCH",
            //                     "symbol2":"EUR",
            //                     "minLotSize":0.1,
            //                     "minLotSizeS2":20,
            //                     "maxLotSize":null,
            //                     "minPrice":"25",
            //                     "maxPrice":"8192"
            //                 }
            //             )
            //         }
            //     }
            //
            $result = array();
            $markets = $this->safe_value($response['data'], 'pairs');
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $baseId = $this->safe_string($market, 'symbol1');
                $quoteId = $this->safe_string($market, 'symbol2');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $baseCurrency = $this->safe_value($currenciesById, $baseId, array());
                $quoteCurrency = $this->safe_value($currenciesById, $quoteId, array());
                $pricePrecisionString = $this->safe_string($quoteCurrency, 'precision', '8');
                for ($j = 0; $j < count($pairs); $j++) {
                    $pair = $pairs[$j];
                    if (($pair['symbol1'] === $baseId) && ($pair['symbol2'] === $quoteId)) {
                        // we might need to account for `priceScale` here
                        $pricePrecisionString = $this->safe_string($pair, 'pricePrecision', $pricePrecisionString);
                    }
                }
                $baseCurrencyPrecision = $this->safe_string($baseCurrency, 'precision', '8');
                $baseCurrencyScale = $this->safe_string($baseCurrency, 'scale', '0');
                $amountPrecisionString = Precise::string_sub($baseCurrencyPrecision, $baseCurrencyScale);
                $result[] = array(
                    'id' => $baseId . '/' . $quoteId,
                    'symbol' => $base . '/' . $quote,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => null,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => null,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($amountPrecisionString)),
                        'price' => $this->parse_number($this->parse_precision($pricePrecisionString)),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'minLotSize'),
                            'max' => $this->safe_number($market, 'maxLotSize'),
                        ),
                        'price' => array(
                            'min' => $this->safe_number($market, 'minPrice'),
                            'max' => $this->safe_number($market, 'maxPrice'),
                        ),
                        'cost' => array(
                            'min' => $this->safe_number($market, 'minLotSizeS2'),
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function parse_balance($response): array {
        $result = array( 'info' => $response );
        $ommited = array( 'username', 'timestamp' );
        $balances = $this->omit($response, $ommited);
        $currencyIds = is_array($balances) ? array_keys($balances) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $currencyId = $currencyIds[$i];
            $balance = $this->safe_value($balances, $currencyId, array());
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            // https://github.com/ccxt/ccxt/issues/5484
            $account['used'] = $this->safe_string($balance, 'orders', '0');
            $code = $this->safe_currency_code($currencyId);
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * @see https://docs.cex.io/#account-balance
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privatePostBalance ($params));
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * @see https://docs.cex.io/#orderbook
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            if ($limit !== null) {
                $request['depth'] = $limit;
            }
            $response = Async\await($this->publicGetOrderBookPair (array_merge($request, $params)));
            $timestamp = $this->safe_timestamp($response, 'timestamp');
            return $this->parse_order_book($response, $market['symbol'], $timestamp);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //         1591403940,
        //         0.024972,
        //         0.024972,
        //         0.024969,
        //         0.024969,
        //         0.49999900
        //     )
        //
        return array(
            $this->safe_timestamp($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * @see https://docs.cex.io/#historical-ohlcv-chart
             * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($since === null) {
                $since = $this->milliseconds() - 86400000; // yesterday
            } else {
                if ($this->options['fetchOHLCVWarning']) {
                    throw new ExchangeError($this->id . " fetchOHLCV warning => CEX can return historical candles for a certain date only, this might produce an empty or null reply. Set exchange.options['fetchOHLCVWarning'] = false or add (array( 'options' => array( 'fetchOHLCVWarning' => false ))) to constructor $params to suppress this warning message.");
                }
            }
            $request = array(
                'pair' => $market['id'],
                'yyyymmdd' => $this->yyyymmdd($since, ''),
            );
            try {
                $response = Async\await($this->publicGetOhlcvHdYyyymmddPair (array_merge($request, $params)));
                //
                //     {
                //         "time":20200606,
                //         "data1m":"[[1591403940,0.024972,0.024972,0.024969,0.024969,0.49999900]]",
                //     }
                //
                $key = 'data' . $this->safe_string($this->timeframes, $timeframe, $timeframe);
                $data = $this->safe_string($response, $key);
                $ohlcvs = json_decode($data, $as_associative_array = true);
                return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
            } catch (Exception $e) {
                if ($e instanceof NullResponse) {
                    return array();
                }
            }
            return null;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        $timestamp = $this->safe_timestamp($ticker, 'timestamp');
        $volume = $this->safe_string($ticker, 'volume');
        $high = $this->safe_string($ticker, 'high');
        $low = $this->safe_string($ticker, 'low');
        $bid = $this->safe_string($ticker, 'bid');
        $ask = $this->safe_string($ticker, 'ask');
        $last = $this->safe_string($ticker, 'last');
        $symbol = $this->safe_symbol(null, $market);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $volume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $currencies = is_array($this->currencies) ? array_keys($this->currencies) : array();
            $request = array(
                'currencies' => implode('/', $currencies),
            );
            $response = Async\await($this->publicGetTickersCurrencies (array_merge($request, $params)));
            $tickers = $this->safe_value($response, 'data', array());
            $result = array();
            for ($t = 0; $t < count($tickers); $t++) {
                $ticker = $tickers[$t];
                $marketId = $this->safe_string($ticker, 'pair');
                $market = $this->safe_market($marketId, null, ':');
                $symbol = $market['symbol'];
                $result[$symbol] = $this->parse_ticker($ticker, $market);
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * @see https://docs.cex.io/#$ticker
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $ticker = Async\await($this->publicGetTickerPair (array_merge($request, $params)));
            return $this->parse_ticker($ticker, $market);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchTrades (public)
        //
        //      {
        //          "type" => "sell",
        //          "date" => "1638401878",
        //          "amount" => "0.401000",
        //          "price" => "249",
        //          "tid" => "11922"
        //      }
        //
        $timestamp = $this->safe_timestamp($trade, 'date');
        $id = $this->safe_string($trade, 'tid');
        $type = null;
        $side = $this->safe_string($trade, 'type');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $market = $this->safe_market(null, $market);
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'type' => $type,
            'side' => $side,
            'order' => null,
            'takerOrMaker' => null,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => null,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.cex.io/#trade-history
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $response = Async\await($this->publicGetTradeHistoryPair (array_merge($request, $params)));
            return $this->parse_trades($response, $market, $since, $limit);
        }) ();
    }

    public function fetch_trading_fees($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * @see https://docs.cex.io/#get-my-$fee
             * fetch the trading fees for multiple markets
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$fee-structure $fee structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privatePostGetMyfee ($params));
            //
            //      {
            //          "e" => "get_myfee",
            //          "ok" => "ok",
            //          "data" => {
            //            'BTC:USD' => array( buy => '0.25', sell => '0.25', buyMaker => '0.15', sellMaker => "0.15" ),
            //            'ETH:USD' => array( buy => '0.25', sell => '0.25', buyMaker => '0.15', sellMaker => "0.15" ),
            //            ..
            //          }
            //      }
            //
            $data = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($this->symbols); $i++) {
                $symbol = $this->symbols[$i];
                $market = $this->market($symbol);
                $fee = $this->safe_value($data, $market['id'], array());
                $makerString = $this->safe_string($fee, 'buyMaker');
                $takerString = $this->safe_string($fee, 'buy');
                $maker = $this->parse_number(Precise::string_div($makerString, '100'));
                $taker = $this->parse_number(Precise::string_div($takerString, '100'));
                $result[$symbol] = array(
                    'info' => $fee,
                    'symbol' => $symbol,
                    'maker' => $maker,
                    'taker' => $taker,
                    'percentage' => true,
                );
            }
            return $result;
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * @see https://docs.cex.io/#place-order
             * create a trade order
             * @see https://cex.io/rest-api#place-order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {float} [$params->cost] the quote quantity that can be used alternative for the $amount for $market buy orders
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
                'type' => $side,
            );
            // for $market buy it requires the $amount of quote currency to spend
            if (($type === 'market') && ($side === 'buy')) {
                $quoteAmount = null;
                $createMarketBuyOrderRequiresPrice = true;
                list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
                $cost = $this->safe_string($params, 'cost');
                $params = $this->omit($params, 'cost');
                if ($cost !== null) {
                    $quoteAmount = $this->cost_to_precision($symbol, $cost);
                } elseif ($createMarketBuyOrderRequiresPrice) {
                    if ($price === null) {
                        throw new InvalidOrder($this->id . ' createOrder() requires the $price argument for $market buy orders to calculate the total $cost to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option or param to false and pass the $cost to spend in the $amount argument');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $costRequest = Precise::string_mul($amountString, $priceString);
                        $quoteAmount = $this->cost_to_precision($symbol, $costRequest);
                    }
                } else {
                    $quoteAmount = $this->cost_to_precision($symbol, $amount);
                }
                $request['amount'] = $quoteAmount;
            } else {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if ($type === 'limit') {
                $request['price'] = $this->number_to_string($price);
            } else {
                $request['order_type'] = $type;
            }
            $response = Async\await($this->privatePostPlaceOrderPair (array_merge($request, $params)));
            //
            //     {
            //         "id" => "12978363524",
            //         "time" => 1586610022259,
            //         "type" => "buy",
            //         "price" => "0.033934",
            //         "amount" => "0.10722802",
            //         "pending" => "0.10722802",
            //         "complete" => false
            //     }
            //
            $placedAmount = $this->safe_string($response, 'amount');
            $remaining = $this->safe_string($response, 'pending');
            $timestamp = $this->safe_value($response, 'time');
            $complete = $this->safe_value($response, 'complete');
            $status = $complete ? 'closed' : 'open';
            $filled = null;
            if (($placedAmount !== null) && ($remaining !== null)) {
                $filled = Precise::string_max(Precise::string_sub($placedAmount, $remaining), '0');
            }
            return $this->safe_order(array(
                'id' => $this->safe_string($response, 'id'),
                'info' => $response,
                'clientOrderId' => null,
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'lastTradeTimestamp' => null,
                'type' => $type,
                'side' => $this->safe_string($response, 'type'),
                'symbol' => $market['symbol'],
                'status' => $status,
                'price' => $this->safe_string($response, 'price'),
                'amount' => $placedAmount,
                'cost' => null,
                'average' => null,
                'remaining' => $remaining,
                'filled' => $filled,
                'fee' => null,
                'trades' => null,
            ));
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * @see https://docs.cex.io/#cancel-order
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol not used by cex cancelOrder ()
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'id' => $id,
            );
            $response = Async\await($this->privatePostCancelOrder (array_merge($request, $params)));
            // 'true'
            return array_merge($this->parse_order(array()), array( 'info' => $response, 'type' => null, 'id' => $id, 'status' => 'canceled' ));
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * @see https://docs.cex.io/#cancel-all-$orders-for-given-pair
             * cancel all open $orders in a $market
             * @param {string} $symbol unified $market $symbol of the $market to cancel $orders in
             * @param {array} [$params] extra parameters specific to the cex api endpoint
             * @param {string} [$params->marginMode] 'cross' or 'isolated', for spot margin trading
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders requires a $symbol->');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $orders = Async\await($this->privatePostCancelOrdersPair (array_merge($request, $params)));
            //
            //  {
            //      "e":"cancel_orders",
            //      "ok":"ok",
            //      "data":array(
            //      )
            //   }
            //
            return $orders;
        }) ();
    }

    public function parse_order($order, ?array $market = null): array {
        // Depending on the call, 'time' can be a unix int, unix string or ISO string
        // Yes, really
        $timestamp = $this->safe_value($order, 'time');
        if (gettype($timestamp) === 'string' && mb_strpos($timestamp, 'T') !== false) {
            // ISO8601 string
            $timestamp = $this->parse8601($timestamp);
        } elseif ($timestamp !== null) {
            // either integer or string integer
            $timestamp = intval($timestamp);
        }
        $symbol = null;
        $baseId = $this->safe_string($order, 'symbol1');
        $quoteId = $this->safe_string($order, 'symbol2');
        if ($market === null && $baseId !== null && $quoteId !== null) {
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            if (($base !== null) && ($quote !== null)) {
                $symbol = $base . '/' . $quote;
            }
            if (is_array($this->markets) && array_key_exists($symbol, $this->markets)) {
                $market = $this->market($symbol);
            }
        }
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $price = $this->safe_string($order, 'price');
        $amount = $this->omit_zero($this->safe_string($order, 'amount'));
        // sell orders can have a negative $amount
        // https://github.com/ccxt/ccxt/issues/5338
        if ($amount !== null) {
            $amount = Precise::string_abs($amount);
        } elseif ($market !== null) {
            $amountKey = 'a:' . $market['base'] . 'cds:';
            $amount = Precise::string_abs($this->safe_string($order, $amountKey));
        }
        $remaining = $this->safe_string_2($order, 'pending', 'remains');
        $filled = Precise::string_sub($amount, $remaining);
        $fee = null;
        $cost = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
            $taCost = $this->safe_string($order, 'ta:' . $market['quote']);
            $ttaCost = $this->safe_string($order, 'tta:' . $market['quote']);
            $cost = Precise::string_add($taCost, $ttaCost);
            $baseFee = 'fa:' . $market['base'];
            $baseTakerFee = 'tfa:' . $market['base'];
            $quoteFee = 'fa:' . $market['quote'];
            $quoteTakerFee = 'tfa:' . $market['quote'];
            $feeRate = $this->safe_string($order, 'tradingFeeMaker');
            if (!$feeRate) {
                $feeRate = $this->safe_string($order, 'tradingFeeTaker', $feeRate);
            }
            if ($feeRate) {
                $feeRate = Precise::string_div($feeRate, '100'); // convert to mathematically-correct percentage coefficients => 1.0 = 100%
            }
            if ((is_array($order) && array_key_exists($baseFee, $order)) || (is_array($order) && array_key_exists($baseTakerFee, $order))) {
                $baseFeeCost = $this->safe_number_2($order, $baseFee, $baseTakerFee);
                $fee = array(
                    'currency' => $market['base'],
                    'rate' => $this->parse_number($feeRate),
                    'cost' => $baseFeeCost,
                );
            } elseif ((is_array($order) && array_key_exists($quoteFee, $order)) || (is_array($order) && array_key_exists($quoteTakerFee, $order))) {
                $quoteFeeCost = $this->safe_number_2($order, $quoteFee, $quoteTakerFee);
                $fee = array(
                    'currency' => $market['quote'],
                    'rate' => $this->parse_number($feeRate),
                    'cost' => $quoteFeeCost,
                );
            }
        }
        if (!$cost) {
            $cost = Precise::string_mul($price, $filled);
        }
        $side = $this->safe_string($order, 'type');
        $trades = null;
        $orderId = $this->safe_string($order, 'id');
        if (is_array($order) && array_key_exists('vtx', $order)) {
            $trades = array();
            for ($i = 0; $i < count($order['vtx']); $i++) {
                $item = $order['vtx'][$i];
                $tradeSide = $this->safe_string($item, 'type');
                if ($tradeSide === 'cancel') {
                    // looks like this might represent the cancelled part of an $order
                    //   { "id" => "4426729543",
                    //     "type" => "cancel",
                    //     "time" => "2017-09-22T00:24:30.476Z",
                    //     "user" => "up106404164",
                    //     "c" => "user:up106404164:a:BCH",
                    //     "d" => "order:4426728375:a:BCH",
                    //     "a" => "0.09935956",
                    //     "amount" => "0.09935956",
                    //     "balance" => "0.42580261",
                    //     "symbol" => "BCH",
                    //     "order" => "4426728375",
                    //     "buy" => null,
                    //     "sell" => null,
                    //     "pair" => null,
                    //     "pos" => null,
                    //     "cs" => "0.42580261",
                    //     "ds" => 0 }
                    continue;
                }
                $tradePrice = $this->safe_string($item, 'price');
                if ($tradePrice === null) {
                    // this represents the $order
                    //   {
                    //     "a" => "0.47000000",
                    //     "c" => "user:up106404164:a:EUR",
                    //     "d" => "order:6065499239:a:EUR",
                    //     "cs" => "1432.93",
                    //     "ds" => "476.72",
                    //     "id" => "6065499249",
                    //     "buy" => null,
                    //     "pos" => null,
                    //     "pair" => null,
                    //     "sell" => null,
                    //     "time" => "2018-04-22T13:07:22.152Z",
                    //     "type" => "buy",
                    //     "user" => "up106404164",
                    //     "order" => "6065499239",
                    //     "amount" => "-715.97000000",
                    //     "symbol" => "EUR",
                    //     "balance" => "1432.93000000" }
                    continue;
                }
                // todo => deal with these
                if ($tradeSide === 'costsNothing') {
                    continue;
                }
                // --
                // if ($side !== $tradeSide)
                //     throw new \Exception(json_encode($order, null, 2));
                // if ($orderId !== $item['order'])
                //     throw new \Exception(json_encode($order, null, 2));
                // --
                // partial buy trade
                //   {
                //     "a" => "0.01589885",
                //     "c" => "user:up106404164:a:BTC",
                //     "d" => "order:6065499239:a:BTC",
                //     "cs" => "0.36300000",
                //     "ds" => 0,
                //     "id" => "6067991213",
                //     "buy" => "6065499239",
                //     "pos" => null,
                //     "pair" => null,
                //     "sell" => "6067991206",
                //     "time" => "2018-04-22T23:09:11.773Z",
                //     "type" => "buy",
                //     "user" => "up106404164",
                //     "order" => "6065499239",
                //     "price" => 7146.5,
                //     "amount" => "0.01589885",
                //     "symbol" => "BTC",
                //     "balance" => "0.36300000",
                //     "symbol2" => "EUR",
                //     "fee_amount" => "0.19" }
                // --
                // trade with zero $amount, but non-zero $fee
                //   {
                //     "a" => "0.00000000",
                //     "c" => "user:up106404164:a:EUR",
                //     "d" => "order:5840654423:a:EUR",
                //     "cs" => 559744,
                //     "ds" => 0,
                //     "id" => "5840654429",
                //     "buy" => "5807238573",
                //     "pos" => null,
                //     "pair" => null,
                //     "sell" => "5840654423",
                //     "time" => "2018-03-15T03:20:14.010Z",
                //     "type" => "sell",
                //     "user" => "up106404164",
                //     "order" => "5840654423",
                //     "price" => 730,
                //     "amount" => "0.00000000",
                //     "symbol" => "EUR",
                //     "balance" => "5597.44000000",
                //     "symbol2" => "BCH",
                //     "fee_amount" => "0.01" }
                // --
                // trade which should have an $amount of exactly 0.002BTC
                //   {
                //     "a" => "16.70000000",
                //     "c" => "user:up106404164:a:GBP",
                //     "d" => "order:9927386681:a:GBP",
                //     "cs" => "86.90",
                //     "ds" => 0,
                //     "id" => "9927401610",
                //     "buy" => "9927401601",
                //     "pos" => null,
                //     "pair" => null,
                //     "sell" => "9927386681",
                //     "time" => "2019-08-21T15:25:37.777Z",
                //     "type" => "sell",
                //     "user" => "up106404164",
                //     "order" => "9927386681",
                //     "price" => 8365,
                //     "amount" => "16.70000000",
                //     "office" => "UK",
                //     "symbol" => "GBP",
                //     "balance" => "86.90000000",
                //     "symbol2" => "BTC",
                //     "fee_amount" => "0.03"
                //   }
                $tradeTimestamp = $this->parse8601($this->safe_string($item, 'time'));
                $tradeAmount = $this->safe_string($item, 'amount');
                $feeCost = $this->safe_string($item, 'fee_amount');
                $absTradeAmount = Precise::string_abs($tradeAmount);
                $tradeCost = null;
                if ($tradeSide === 'sell') {
                    $tradeCost = $absTradeAmount;
                    $absTradeAmount = Precise::string_div(Precise::string_add($feeCost, $tradeCost), $tradePrice);
                } else {
                    $tradeCost = Precise::string_mul($absTradeAmount, $tradePrice);
                }
                $trades[] = array(
                    'id' => $this->safe_string($item, 'id'),
                    'timestamp' => $tradeTimestamp,
                    'datetime' => $this->iso8601($tradeTimestamp),
                    'order' => $orderId,
                    'symbol' => $symbol,
                    'price' => $this->parse_number($tradePrice),
                    'amount' => $this->parse_number($absTradeAmount),
                    'cost' => $this->parse_number($tradeCost),
                    'side' => $tradeSide,
                    'fee' => array(
                        'cost' => $this->parse_number($feeCost),
                        'currency' => $market['quote'],
                    ),
                    'info' => $item,
                    'type' => null,
                    'takerOrMaker' => null,
                );
            }
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $orderId,
            'clientOrderId' => null,
            'datetime' => $this->iso8601($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => ($price === null) ? 'market' : 'limit',
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'cost' => $cost,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => $remaining,
            'trades' => $trades,
            'fee' => $fee,
            'average' => null,
        ));
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.cex.io/#open-$orders
             * fetch all unfilled currently open $orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open $orders for
             * @param {int} [$limit] the maximum number of  open $orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            $orders = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['pair'] = $market['id'];
                $orders = Async\await($this->privatePostOpenOrdersPair (array_merge($request, $params)));
            } else {
                $orders = Async\await($this->privatePostOpenOrders (array_merge($request, $params)));
            }
            for ($i = 0; $i < count($orders); $i++) {
                $orders[$i] = array_merge($orders[$i], array( 'status' => 'open' ));
            }
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.cex.io/#archived-orders
             * fetches information on multiple closed orders made by the user
             * @param {string} $symbol unified $market $symbol of the $market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchClosedOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array( 'pair' => $market['id'] );
            $response = Async\await($this->privatePostArchivedOrdersPair (array_merge($request, $params)));
            return $this->parse_orders($response, $market, $since, $limit);
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * @see https://docs.cex.io/?python#get-order-details
             * fetches information on an order made by the user
             * @param {string} $symbol not used by cex fetchOrder
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'id' => (string) $id,
            );
            $response = Async\await($this->privatePostGetOrderTx (array_merge($request, $params)));
            $data = $this->safe_value($response, 'data', array());
            //
            //     {
            //         "id" => "5442731603",
            //         "type" => "sell",
            //         "time" => 1516132358071,
            //         "lastTxTime" => 1516132378452,
            //         "lastTx" => "5442734452",
            //         "pos" => null,
            //         "user" => "up106404164",
            //         "status" => "d",
            //         "symbol1" => "ETH",
            //         "symbol2" => "EUR",
            //         "amount" => "0.50000000",
            //         "kind" => "api",
            //         "price" => "923.3386",
            //         "tfacf" => "1",
            //         "fa:EUR" => "0.55",
            //         "ta:EUR" => "369.77",
            //         "remains" => "0.00000000",
            //         "tfa:EUR" => "0.22",
            //         "tta:EUR" => "91.95",
            //         "a:ETH:cds" => "0.50000000",
            //         "a:EUR:cds" => "461.72",
            //         "f:EUR:cds" => "0.77",
            //         "tradingFeeMaker" => "0.15",
            //         "tradingFeeTaker" => "0.23",
            //         "tradingFeeStrategy" => "userVolumeAmount",
            //         "tradingFeeUserVolumeAmount" => "2896912572",
            //         "orderId" => "5442731603",
            //         "next" => false,
            //         "vtx" => array(
            //             array(
            //                 "id" => "5442734452",
            //                 "type" => "sell",
            //                 "time" => "2018-01-16T19:52:58.452Z",
            //                 "user" => "up106404164",
            //                 "c" => "user:up106404164:a:EUR",
            //                 "d" => "order:5442731603:a:EUR",
            //                 "a" => "104.53000000",
            //                 "amount" => "104.53000000",
            //                 "balance" => "932.71000000",
            //                 "symbol" => "EUR",
            //                 "order" => "5442731603",
            //                 "buy" => "5442734443",
            //                 "sell" => "5442731603",
            //                 "pair" => null,
            //                 "pos" => null,
            //                 "office" => null,
            //                 "cs" => "932.71",
            //                 "ds" => 0,
            //                 "price" => 923.3386,
            //                 "symbol2" => "ETH",
            //                 "fee_amount" => "0.16"
            //             ),
            //             array(
            //                 "id" => "5442731609",
            //                 "type" => "sell",
            //                 "time" => "2018-01-16T19:52:38.071Z",
            //                 "user" => "up106404164",
            //                 "c" => "user:up106404164:a:EUR",
            //                 "d" => "order:5442731603:a:EUR",
            //                 "a" => "91.73000000",
            //                 "amount" => "91.73000000",
            //                 "balance" => "563.49000000",
            //                 "symbol" => "EUR",
            //                 "order" => "5442731603",
            //                 "buy" => "5442618127",
            //                 "sell" => "5442731603",
            //                 "pair" => null,
            //                 "pos" => null,
            //                 "office" => null,
            //                 "cs" => "563.49",
            //                 "ds" => 0,
            //                 "price" => 924.0092,
            //                 "symbol2" => "ETH",
            //                 "fee_amount" => "0.22"
            //             ),
            //             {
            //                 "id" => "5442731604",
            //                 "type" => "sell",
            //                 "time" => "2018-01-16T19:52:38.071Z",
            //                 "user" => "up106404164",
            //                 "c" => "order:5442731603:a:ETH",
            //                 "d" => "user:up106404164:a:ETH",
            //                 "a" => "0.50000000",
            //                 "amount" => "-0.50000000",
            //                 "balance" => "15.80995000",
            //                 "symbol" => "ETH",
            //                 "order" => "5442731603",
            //                 "buy" => null,
            //                 "sell" => null,
            //                 "pair" => null,
            //                 "pos" => null,
            //                 "office" => null,
            //                 "cs" => "0.50000000",
            //                 "ds" => "15.80995000"
            //             }
            //         )
            //     }
            //
            return $this->parse_order($data);
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.cex.io/#archived-orders
             * fetches information on multiple orders made by the user
             * @param {string} $symbol unified $market $symbol of the $market orders were made in
             * @param {int} [$since] the earliest $time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of $order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=$order-structure $order structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'limit' => $limit,
                'pair' => $market['id'],
                'dateFrom' => $since,
            );
            $response = Async\await($this->privatePostArchivedOrdersPair (array_merge($request, $params)));
            $results = array();
            for ($i = 0; $i < count($response); $i++) {
                // cancelled (unfilled):
                //    { "id" => "4005785516",
                //     "type" => "sell",
                //     "time" => "2017-07-18T19:08:34.223Z",
                //     "lastTxTime" => "2017-07-18T19:08:34.396Z",
                //     "lastTx" => "4005785522",
                //     "pos" => null,
                //     "status" => "c",
                //     "symbol1" => "ETH",
                //     "symbol2" => "GBP",
                //     "amount" => "0.20000000",
                //     "price" => "200.5625",
                //     "remains" => "0.20000000",
                //     'a:ETH:cds' => "0.20000000",
                //     "tradingFeeMaker" => "0",
                //     "tradingFeeTaker" => "0.16",
                //     "tradingFeeUserVolumeAmount" => "10155061217",
                //     "orderId" => "4005785516" }
                // --
                // cancelled (partially $filled buy):
                //    { "id" => "4084911657",
                //     "type" => "buy",
                //     "time" => "2017-08-05T03:18:39.596Z",
                //     "lastTxTime" => "2019-03-19T17:37:46.404Z",
                //     "lastTx" => "8459265833",
                //     "pos" => null,
                //     "status" => "cd",
                //     "symbol1" => "BTC",
                //     "symbol2" => "GBP",
                //     "amount" => "0.05000000",
                //     "price" => "2241.4692",
                //     "tfacf" => "1",
                //     "remains" => "0.03910535",
                //     'tfa:GBP' => "0.04",
                //     'tta:GBP' => "24.39",
                //     'a:BTC:cds' => "0.01089465",
                //     'a:GBP:cds' => "112.26",
                //     'f:GBP:cds' => "0.04",
                //     "tradingFeeMaker" => "0",
                //     "tradingFeeTaker" => "0.16",
                //     "tradingFeeUserVolumeAmount" => "13336396963",
                //     "orderId" => "4084911657" }
                // --
                // cancelled (partially $filled sell):
                //    { "id" => "4426728375",
                //     "type" => "sell",
                //     "time" => "2017-09-22T00:24:20.126Z",
                //     "lastTxTime" => "2017-09-22T00:24:30.476Z",
                //     "lastTx" => "4426729543",
                //     "pos" => null,
                //     "status" => "cd",
                //     "symbol1" => "BCH",
                //     "symbol2" => "BTC",
                //     "amount" => "0.10000000",
                //     "price" => "0.11757182",
                //     "tfacf" => "1",
                //     "remains" => "0.09935956",
                //     'tfa:BTC' => "0.00000014",
                //     'tta:BTC' => "0.00007537",
                //     'a:BCH:cds' => "0.10000000",
                //     'a:BTC:cds' => "0.00007537",
                //     'f:BTC:cds' => "0.00000014",
                //     "tradingFeeMaker" => "0",
                //     "tradingFeeTaker" => "0.18",
                //     "tradingFeeUserVolumeAmount" => "3466715450",
                //     "orderId" => "4426728375" }
                // --
                // $filled:
                //    { "id" => "5342275378",
                //     "type" => "sell",
                //     "time" => "2018-01-04T00:28:12.992Z",
                //     "lastTxTime" => "2018-01-04T00:28:12.992Z",
                //     "lastTx" => "5342275393",
                //     "pos" => null,
                //     "status" => "d",
                //     "symbol1" => "BCH",
                //     "symbol2" => "BTC",
                //     "amount" => "0.10000000",
                //     "kind" => "api",
                //     "price" => "0.17",
                //     "remains" => "0.00000000",
                //     'tfa:BTC' => "0.00003902",
                //     'tta:BTC' => "0.01699999",
                //     'a:BCH:cds' => "0.10000000",
                //     'a:BTC:cds' => "0.01699999",
                //     'f:BTC:cds' => "0.00003902",
                //     "tradingFeeMaker" => "0.15",
                //     "tradingFeeTaker" => "0.23",
                //     "tradingFeeUserVolumeAmount" => "1525951128",
                //     "orderId" => "5342275378" }
                // --
                // $market $order (buy):
                //    { "id" => "6281946200",
                //     "pos" => null,
                //     "time" => "2018-05-23T11:55:43.467Z",
                //     "type" => "buy",
                //     "amount" => "0.00000000",
                //     "lastTx" => "6281946210",
                //     "status" => "d",
                //     "amount2" => "20.00",
                //     "orderId" => "6281946200",
                //     "remains" => "0.00000000",
                //     "symbol1" => "ETH",
                //     "symbol2" => "EUR",
                //     "tfa:EUR" => "0.05",
                //     "tta:EUR" => "19.94",
                //     "a:ETH:cds" => "0.03764100",
                //     "a:EUR:cds" => "20.00",
                //     "f:EUR:cds" => "0.05",
                //     "lastTxTime" => "2018-05-23T11:55:43.467Z",
                //     "tradingFeeTaker" => "0.25",
                //     "tradingFeeUserVolumeAmount" => "55998097" }
                // --
                // $market $order (sell):
                //   { "id" => "6282200948",
                //     "pos" => null,
                //     "time" => "2018-05-23T12:42:58.315Z",
                //     "type" => "sell",
                //     "amount" => "-0.05000000",
                //     "lastTx" => "6282200958",
                //     "status" => "d",
                //     "orderId" => "6282200948",
                //     "remains" => "0.00000000",
                //     "symbol1" => "ETH",
                //     "symbol2" => "EUR",
                //     "tfa:EUR" => "0.07",
                //     "tta:EUR" => "26.49",
                //     "a:ETH:cds" => "0.05000000",
                //     "a:EUR:cds" => "26.49",
                //     "f:EUR:cds" => "0.07",
                //     "lastTxTime" => "2018-05-23T12:42:58.315Z",
                //     "tradingFeeTaker" => "0.25",
                //     "tradingFeeUserVolumeAmount" => "56294576" }
                $order = $response[$i];
                $status = $this->parse_order_status($this->safe_string($order, 'status'));
                $baseId = $this->safe_string($order, 'symbol1');
                $quoteId = $this->safe_string($order, 'symbol2');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbolInner = $base . '/' . $quote;
                $side = $this->safe_string($order, 'type');
                $baseAmount = $this->safe_number($order, 'a:' . $baseId . ':cds');
                $quoteAmount = $this->safe_number($order, 'a:' . $quoteId . ':cds');
                $fee = $this->safe_number($order, 'f:' . $quoteId . ':cds');
                $amount = $this->safe_string($order, 'amount');
                $price = $this->safe_string($order, 'price');
                $remaining = $this->safe_string($order, 'remains');
                $filled = Precise::string_sub($amount, $remaining);
                $orderAmount = null;
                $cost = null;
                $average = null;
                $type = null;
                if (!$price) {
                    $type = 'market';
                    $orderAmount = $baseAmount;
                    $cost = $quoteAmount;
                    $average = Precise::string_div($orderAmount, $cost);
                } else {
                    $ta = $this->safe_string($order, 'ta:' . $quoteId, '0');
                    $tta = $this->safe_string($order, 'tta:' . $quoteId, '0');
                    $fa = $this->safe_string($order, 'fa:' . $quoteId, '0');
                    $tfa = $this->safe_string($order, 'tfa:' . $quoteId, '0');
                    if ($side === 'sell') {
                        $cost = Precise::string_add(Precise::string_add($ta, $tta), Precise::string_add($fa, $tfa));
                    } else {
                        $cost = Precise::string_sub(Precise::string_add($ta, $tta), Precise::string_add($fa, $tfa));
                    }
                    $type = 'limit';
                    $orderAmount = $amount;
                    $average = Precise::string_div($cost, $filled);
                }
                $time = $this->safe_string($order, 'time');
                $lastTxTime = $this->safe_string($order, 'lastTxTime');
                $timestamp = $this->parse8601($time);
                $safeOrder = $this->safe_order(array(
                    'info' => $order,
                    'id' => $this->safe_string($order, 'id'),
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                    'lastUpdated' => $this->parse8601($lastTxTime),
                    'status' => $status,
                    'symbol' => $symbolInner,
                    'side' => $side,
                    'price' => $price,
                    'amount' => $orderAmount,
                    'average' => $average,
                    'type' => $type,
                    'filled' => $filled,
                    'cost' => $cost,
                    'remaining' => $remaining,
                    'fee' => array(
                        'cost' => $fee,
                        'currency' => $quote,
                    ),
                ));
                $results[] = $safeOrder;
            }
            return $results;
        }) ();
    }

    public function parse_order_status($status) {
        return $this->safe_string($this->options['order']['status'], $status, $status);
    }

    public function edit_order(string $id, $symbol, $type, $side, $amount = null, $price = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $type, $side, $amount, $price, $params) {
            /**
             * edit a trade order
             * @see https://docs.cex.io/#cancel-replace-order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of the currency you want to trade in units of the base currency
             * @param {float|null} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the cex api endpoint
             * @return {array} an {@link https://docs.ccxt.com/en/latest/manual.html#order-structure order structure}
             */
            if ($amount === null) {
                throw new ArgumentsRequired($this->id . ' editOrder() requires a $amount argument');
            }
            if ($price === null) {
                throw new ArgumentsRequired($this->id . ' editOrder() requires a $price argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            // see => https://cex.io/rest-api#/definitions/CancelReplaceOrderRequest
            $request = array(
                'pair' => $market['id'],
                'type' => $side,
                'amount' => $amount,
                'price' => $price,
                'order_id' => $id,
            );
            $response = Async\await($this->privatePostCancelReplaceOrderPair (array_merge($request, $params)));
            return $this->parse_order($response, $market);
        }) ();
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * @see https://docs.cex.io/#get-crypto-$address
             * fetch the deposit $address for a $currency associated with this account
             * @param {string} $code unified $currency $code
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=$address-structure $address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $request = array(
                'currency' => $currency['id'],
            );
            list($networkCode, $query) = $this->handle_network_code_and_params($params);
            // atm, cex doesn't support network in the $request
            $response = Async\await($this->privatePostGetCryptoAddress (array_merge($request, $query)));
            //
            //    {
            //         "e" => "get_crypto_address",
            //         "ok" => "ok",
            //         "data" => {
            //             "name" => "BTC",
            //             "addresses" => array(
            //                 {
            //                     "blockchain" => "Bitcoin",
            //                     "address" => "2BvKwe1UwrdTjq2nzhscFYXwqCjCaaHCeq"
            //
            //                     // for others coins (i.e. XRP, XLM) other keys are present:
            //                     //     "destination" => "rF1sdh25BJX3qFwneeTBwaq3zPEWYcwjp2",
            //                     //     "destinationTag" => "7519113655",
            //                     //     "memo" => "XLM-memo12345",
            //                 }
            //             )
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $addresses = $this->safe_value($data, 'addresses', array());
            $chainsIndexedById = $this->index_by($addresses, 'blockchain');
            $selectedNetworkId = $this->select_network_id_from_raw_networks($code, $networkCode, $chainsIndexedById);
            $addressObject = $this->safe_value($chainsIndexedById, $selectedNetworkId, array());
            $address = $this->safe_string_2($addressObject, 'address', 'destination');
            $this->check_address($address);
            return array(
                'currency' => $code,
                'address' => $address,
                'tag' => $this->safe_string_2($addressObject, 'destinationTag', 'memo'),
                'network' => $this->network_id_to_code($selectedNetworkId),
                'info' => $data,
            );
        }) ();
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['rest'] . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $nonce = (string) $this->nonce();
            $auth = $nonce . $this->uid . $this->apiKey;
            $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256');
            $body = $this->json(array_merge(array(
                'key' => $this->apiKey,
                'signature' => strtoupper($signature),
                'nonce' => $nonce,
            ), $query));
            $headers = array(
                'Content-Type' => 'application/json',
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (gettype($response) === 'array' && array_keys($response) === array_keys(array_keys($response))) {
            return $response; // public endpoints may return array()-arrays
        }
        if ($body === 'true') {
            return null;
        }
        if ($response === null) {
            throw new NullResponse($this->id . ' returned ' . $this->json($response));
        }
        if (is_array($response) && array_key_exists('e', $response)) {
            if (is_array($response) && array_key_exists('ok', $response)) {
                if ($response['ok'] === 'ok') {
                    return null;
                }
            }
        }
        if (is_array($response) && array_key_exists('error', $response)) {
            $message = $this->safe_string($response, 'error');
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
