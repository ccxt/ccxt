<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\huobijp as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\BadSymbol;
use ccxt\InvalidOrder;
use ccxt\NotSupported;
use ccxt\NetworkError;
use ccxt\Precise;
use React\Async;
use React\Promise\PromiseInterface;

class huobijp extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'huobijp',
            'name' => 'Huobi Japan',
            'countries' => array( 'JP' ),
            'rateLimit' => 100,
            'userAgent' => $this->userAgents['chrome39'],
            'certified' => false,
            'version' => 'v1',
            'hostname' => 'api-cloud.bittrade.co.jp',
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => null,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchOrderTrades' => true,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingLimits' => true,
                'fetchWithdrawals' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1min',
                '5m' => '5min',
                '15m' => '15min',
                '30m' => '30min',
                '1h' => '60min',
                '4h' => '4hour',
                '1d' => '1day',
                '1w' => '1week',
                '1M' => '1mon',
                '1y' => '1year',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/85734211-85755480-b705-11ea-8b35-0b7f1db33a2f.jpg',
                'api' => array(
                    'market' => 'https://{hostname}',
                    'public' => 'https://{hostname}',
                    'private' => 'https://{hostname}',
                    'v2Public' => 'https://{hostname}',
                    'v2Private' => 'https://{hostname}',
                ),
                'www' => 'https://www.huobi.co.jp',
                'referral' => 'https://www.huobi.co.jp/register/?invite_code=znnq3',
                'doc' => 'https://api-doc.huobi.co.jp',
                'fees' => 'https://www.huobi.co.jp/support/fee',
            ),
            'api' => array(
                'v2Public' => array(
                    'get' => array(
                        'reference/currencies' => 1, // 币链参考信息
                        'market-status' => 1, // 获取当前市场状态
                    ),
                ),
                'v2Private' => array(
                    'get' => array(
                        'account/ledger' => 1,
                        'account/withdraw/quota' => 1,
                        'account/withdraw/address' => 1, // 提币地址查询(限母用户可用)
                        'account/deposit/address' => 1,
                        'account/repayment' => 5, // 还币交易记录查询
                        'reference/transact-fee-rate' => 1,
                        'account/asset-valuation' => 0.2, // 获取账户资产估值
                        'point/account' => 5, // 点卡余额查询
                        'sub-user/user-list' => 1, // 获取子用户列表
                        'sub-user/user-state' => 1, // 获取特定子用户的用户状态
                        'sub-user/account-list' => 1, // 获取特定子用户的账户列表
                        'sub-user/deposit-address' => 1, // 子用户充币地址查询
                        'sub-user/query-deposit' => 1, // 子用户充币记录查询
                        'user/api-key' => 1, // 母子用户API key信息查询
                        'user/uid' => 1, // 母子用户获取用户UID
                        'algo-orders/opening' => 1, // 查询未触发OPEN策略委托
                        'algo-orders/history' => 1, // 查询策略委托历史
                        'algo-orders/specific' => 1, // 查询特定策略委托
                        'c2c/offers' => 1, // 查询借入借出订单
                        'c2c/offer' => 1, // 查询特定借入借出订单及其交易记录
                        'c2c/transactions' => 1, // 查询借入借出交易记录
                        'c2c/repayment' => 1, // 查询还币交易记录
                        'c2c/account' => 1, // 查询账户余额
                        'etp/reference' => 1, // 基础参考信息
                        'etp/transactions' => 5, // 获取杠杆ETP申赎记录
                        'etp/transaction' => 5, // 获取特定杠杆ETP申赎记录
                        'etp/rebalance' => 1, // 获取杠杆ETP调仓记录
                        'etp/limit' => 1, // 获取ETP持仓限额
                    ),
                    'post' => array(
                        'account/transfer' => 1,
                        'account/repayment' => 5, // 归还借币（全仓逐仓通用）
                        'point/transfer' => 5, // 点卡划转
                        'sub-user/management' => 1, // 冻结/解冻子用户
                        'sub-user/creation' => 1, // 子用户创建
                        'sub-user/tradable-market' => 1, // 设置子用户交易权限
                        'sub-user/transferability' => 1, // 设置子用户资产转出权限
                        'sub-user/api-key-generation' => 1, // 子用户API key创建
                        'sub-user/api-key-modification' => 1, // 修改子用户API key
                        'sub-user/api-key-deletion' => 1, // 删除子用户API key
                        'sub-user/deduct-mode' => 1, // 设置子用户手续费抵扣模式
                        'algo-orders' => 1, // 策略委托下单
                        'algo-orders/cancel-all-after' => 1, // 自动撤销订单
                        'algo-orders/cancellation' => 1, // 策略委托（触发前）撤单
                        'c2c/offer' => 1, // 借入借出下单
                        'c2c/cancellation' => 1, // 借入借出撤单
                        'c2c/cancel-all' => 1, // 撤销所有借入借出订单
                        'c2c/repayment' => 1, // 还币
                        'c2c/transfer' => 1, // 资产划转
                        'etp/creation' => 5, // 杠杆ETP换入
                        'etp/redemption' => 5, // 杠杆ETP换出
                        'etp/{transactId}/cancel' => 10, // 杠杆ETP单个撤单
                        'etp/batch-cancel' => 50, // 杠杆ETP批量撤单
                    ),
                ),
                'market' => array(
                    'get' => array(
                        'history/kline' => 1, // 获取K线数据
                        'detail/merged' => 1, // 获取聚合行情(Ticker)
                        'depth' => 1, // 获取 Market Depth 数据
                        'trade' => 1, // 获取 Trade Detail 数据
                        'history/trade' => 1, // 批量获取最近的交易记录
                        'detail' => 1, // 获取 Market Detail 24小时成交量数据
                        'tickers' => 1,
                        'etp' => 1, // 获取杠杆ETP实时净值
                    ),
                ),
                'public' => array(
                    'get' => array(
                        'common/symbols' => 1, // 查询系统支持的所有交易对
                        'common/currencys' => 1, // 查询系统支持的所有币种
                        'common/timestamp' => 1, // 查询系统当前时间
                        'common/exchange' => 1, // order limits
                        'settings/currencys' => 1, // ?language=en-US
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/accounts' => 0.2, // 查询当前用户的所有账户(即account-id)
                        'account/accounts/{id}/balance' => 0.2, // 查询指定账户的余额
                        'account/accounts/{sub-uid}' => 1,
                        'account/history' => 4,
                        'cross-margin/loan-info' => 1,
                        'margin/loan-info' => 1, // 查询借币币息率及额度
                        'fee/fee-rate/get' => 1,
                        'order/openOrders' => 0.4,
                        'order/orders' => 0.4,
                        'order/orders/{id}' => 0.4, // 查询某个订单详情
                        'order/orders/{id}/matchresults' => 0.4, // 查询某个订单的成交明细
                        'order/orders/getClientOrder' => 0.4,
                        'order/history' => 1, // 查询当前委托、历史委托
                        'order/matchresults' => 1, // 查询当前成交、历史成交
                        // 'dw/withdraw-virtual/addresses', // 查询虚拟币提现地址（Deprecated）
                        'query/deposit-withdraw' => 1,
                        // 'margin/loan-info', // duplicate
                        'margin/loan-orders' => 0.2, // 借贷订单
                        'margin/accounts/balance' => 0.2, // 借贷账户详情
                        'cross-margin/loan-orders' => 1, // 查询借币订单
                        'cross-margin/accounts/balance' => 1, // 借币账户详情
                        'points/actions' => 1,
                        'points/orders' => 1,
                        'subuser/aggregate-balance' => 10,
                        'stable-coin/exchange_rate' => 1,
                        'stable-coin/quote' => 1,
                    ),
                    'post' => array(
                        'account/transfer' => 1, // 资产划转(该节点为母用户和子用户进行资产划转的通用接口。)
                        'futures/transfer' => 1,
                        'order/batch-orders' => 0.4,
                        'order/orders/place' => 0.2, // 创建并执行一个新订单 (一步下单， 推荐使用)
                        'order/orders/submitCancelClientOrder' => 0.2,
                        'order/orders/batchCancelOpenOrders' => 0.4,
                        // 'order/orders', // 创建一个新的订单请求 （仅创建订单，不执行下单）
                        // 'order/orders/{id}/place', // 执行一个订单 （仅执行已创建的订单）
                        'order/orders/{id}/submitcancel' => 0.2, // 申请撤销一个订单请求
                        'order/orders/batchcancel' => 0.4, // 批量撤销订单
                        // 'dw/balance/transfer', // 资产划转
                        'dw/withdraw/api/create' => 1, // 申请提现虚拟币
                        // 'dw/withdraw-virtual/create', // 申请提现虚拟币
                        // 'dw/withdraw-virtual/{id}/place', // 确认申请虚拟币提现（Deprecated）
                        'dw/withdraw-virtual/{id}/cancel' => 1, // 申请取消提现虚拟币
                        'dw/transfer-in/margin' => 10, // 现货账户划入至借贷账户
                        'dw/transfer-out/margin' => 10, // 借贷账户划出至现货账户
                        'margin/orders' => 10, // 申请借贷
                        'margin/orders/{id}/repay' => 10, // 归还借贷
                        'cross-margin/transfer-in' => 1, // 资产划转
                        'cross-margin/transfer-out' => 1, // 资产划转
                        'cross-margin/orders' => 1, // 申请借币
                        'cross-margin/orders/{id}/repay' => 1, // 归还借币
                        'stable-coin/exchange' => 1,
                        'subuser/transfer' => 10,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.002'),
                    'taker' => $this->parse_number('0.002'),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'broad' => array(
                    'contract is restricted of closing positions on API.  Please contact customer service' => '\\ccxt\\OnMaintenance',
                    'maintain' => '\\ccxt\\OnMaintenance',
                ),
                'exact' => array(
                    // err-code
                    'bad-request' => '\\ccxt\\BadRequest',
                    'base-date-limit-error' => '\\ccxt\\BadRequest', // array("status":"error","err-code":"base-date-limit-error","err-msg":"date less than system limit","data":null)
                    'api-not-support-temp-addr' => '\\ccxt\\PermissionDenied', // array("status":"error","err-code":"api-not-support-temp-addr","err-msg":"API withdrawal does not support temporary addresses","data":null)
                    'timeout' => '\\ccxt\\RequestTimeout', // array("ts":1571653730865,"status":"error","err-code":"timeout","err-msg":"Request Timeout")
                    'gateway-internal-error' => '\\ccxt\\ExchangeNotAvailable', // array("status":"error","err-code":"gateway-internal-error","err-msg":"Failed to load data. Try again later.","data":null)
                    'account-frozen-balance-insufficient-error' => '\\ccxt\\InsufficientFunds', // array("status":"error","err-code":"account-frozen-balance-insufficient-error","err-msg":"trade account balance is not enough, left => `0.0027`","data":null)
                    'invalid-amount' => '\\ccxt\\InvalidOrder', // eg "Paramemter `amount` is invalid."
                    'order-limitorder-amount-min-error' => '\\ccxt\\InvalidOrder', // limit order amount error, min => `0.001`
                    'order-limitorder-amount-max-error' => '\\ccxt\\InvalidOrder', // market order amount error, max => `1000000`
                    'order-marketorder-amount-min-error' => '\\ccxt\\InvalidOrder', // market order amount error, min => `0.01`
                    'order-limitorder-price-min-error' => '\\ccxt\\InvalidOrder', // limit order price error
                    'order-limitorder-price-max-error' => '\\ccxt\\InvalidOrder', // limit order price error
                    'order-holding-limit-failed' => '\\ccxt\\InvalidOrder', // array("status":"error","err-code":"order-holding-limit-failed","err-msg":"Order failed, exceeded the holding limit of this currency","data":null)
                    'order-orderprice-precision-error' => '\\ccxt\\InvalidOrder', // array("status":"error","err-code":"order-orderprice-precision-error","err-msg":"order price precision error, scale => `4`","data":null)
                    'order-etp-nav-price-max-error' => '\\ccxt\\InvalidOrder', // array("status":"error","err-code":"order-etp-nav-price-max-error","err-msg":"Order price cannot be higher than 5% of NAV","data":null)
                    'order-orderstate-error' => '\\ccxt\\OrderNotFound', // canceling an already canceled order
                    'order-queryorder-invalid' => '\\ccxt\\OrderNotFound', // querying a non-existent order
                    'order-update-error' => '\\ccxt\\ExchangeNotAvailable', // undocumented error
                    'api-signature-check-failed' => '\\ccxt\\AuthenticationError',
                    'api-signature-not-valid' => '\\ccxt\\AuthenticationError', // array("status":"error","err-code":"api-signature-not-valid","err-msg":"Signature not valid => Incorrect Access key [Access key错误]","data":null)
                    'base-record-invalid' => '\\ccxt\\OrderNotFound', // https://github.com/ccxt/ccxt/issues/5750
                    'base-symbol-trade-disabled' => '\\ccxt\\BadSymbol', // array("status":"error","err-code":"base-symbol-trade-disabled","err-msg":"Trading is disabled for this symbol","data":null)
                    'base-symbol-error' => '\\ccxt\\BadSymbol', // array("status":"error","err-code":"base-symbol-error","err-msg":"The symbol is invalid","data":null)
                    'system-maintenance' => '\\ccxt\\OnMaintenance', // array("status" => "error", "err-code" => "system-maintenance", "err-msg" => "System is in maintenance!", "data" => null)
                    // err-msg
                    'invalid symbol' => '\\ccxt\\BadSymbol', // array("ts":1568813334794,"status":"error","err-code":"invalid-parameter","err-msg":"invalid symbol")
                    'symbol trade not open now' => '\\ccxt\\BadSymbol', // array("ts":1576210479343,"status":"error","err-code":"invalid-parameter","err-msg":"symbol trade not open now"),
                    'invalid-address' => '\\ccxt\\BadRequest', // array("status":"error","err-code":"invalid-address","err-msg":"Invalid address.","data":null),
                    'base-currency-chain-error' => '\\ccxt\\BadRequest', // array("status":"error","err-code":"base-currency-chain-error","err-msg":"The current currency chain does not exist","data":null),
                    'dw-insufficient-balance' => '\\ccxt\\InsufficientFunds', // array("status":"error","err-code":"dw-insufficient-balance","err-msg":"Insufficient balance. You can only transfer `12.3456` at most.","data":null)
                ),
            ),
            'options' => array(
                'defaultNetwork' => 'ERC20',
                'networks' => array(
                    'ETH' => 'erc20',
                    'TRX' => 'trc20',
                    'HRC20' => 'hrc20',
                    'HECO' => 'hrc20',
                    'HT' => 'hrc20',
                    'ALGO' => 'algo',
                    'OMNI' => '',
                ),
                // https://github.com/ccxt/ccxt/issues/5376
                'fetchOrdersByStatesMethod' => 'private_get_order_orders', // 'private_get_order_history' // https://github.com/ccxt/ccxt/pull/5392
                'fetchOpenOrdersMethod' => 'fetch_open_orders_v1', // 'fetch_open_orders_v2' // https://github.com/ccxt/ccxt/issues/5388
                'createMarketBuyOrderRequiresPrice' => true,
                'fetchMarketsMethod' => 'publicGetCommonSymbols',
                'fetchBalanceMethod' => 'privateGetAccountAccountsIdBalance',
                'createOrderMethod' => 'privatePostOrderOrdersPlace',
                'language' => 'en-US',
                'broker' => array(
                    'id' => 'AA03022abc',
                ),
            ),
            'commonCurrencies' => array(
                // https://github.com/ccxt/ccxt/issues/6081
                // https://github.com/ccxt/ccxt/issues/3365
                // https://github.com/ccxt/ccxt/issues/2873
                'GET' => 'Themis', // conflict with GET (Guaranteed Entrance Token, GET Protocol)
                'GTC' => 'Game.com', // conflict with Gitcoin and Gastrocoin
                'HIT' => 'HitChain',
                // https://github.com/ccxt/ccxt/issues/7399
                // https://coinmarketcap.com/currencies/pnetwork/
                // https://coinmarketcap.com/currencies/penta/markets/
                // https://en.cryptonomist.ch/blog/eidoo/the-edo-to-pnt-upgrade-what-you-need-to-know-updated/
                'PNT' => 'Penta',
                'SBTC' => 'Super Bitcoin',
                'BIFI' => 'Bitcoin File', // conflict with Beefy.Finance https://github.com/ccxt/ccxt/issues/8706
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->publicGetCommonTimestamp ($params));
            return $this->safe_integer($response, 'data');
        }) ();
    }

    public function fetch_trading_limits(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            // this method should not be called directly, use loadTradingLimits () instead
            //  by default it will try load withdrawal fees of all currencies (with separate requests)
            //  however if you define $symbols = array( 'ETH/BTC', 'LTC/BTC' ) in args it will only load those
            Async\await($this->load_markets());
            if ($symbols === null) {
                $symbols = $this->symbols;
            }
            $result = array();
            for ($i = 0; $i < count($symbols); $i++) {
                $symbol = $symbols[$i];
                $result[$symbol] = Async\await($this->fetch_trading_limits_by_id($this->market_id($symbol), $params));
            }
            return $result;
        }) ();
    }

    public function fetch_trading_limits_by_id(string $id, $params = array ()) {
        return Async\async(function () use ($id, $params) {
            $request = array(
                'symbol' => $id,
            );
            $response = Async\await($this->publicGetCommonExchange (array_merge($request, $params)));
            //
            //     { status =>   "ok",
            //         "data" => {                                  symbol => "aidocbtc",
            //                              "buy-limit-must-less-than" =>  1.1,
            //                          "sell-limit-must-greater-than" =>  0.9,
            //                         "limit-order-must-greater-than" =>  1,
            //                            "limit-order-must-less-than" =>  5000000,
            //                    "market-buy-order-must-greater-than" =>  0.0001,
            //                       "market-buy-order-must-less-than" =>  100,
            //                   "market-sell-order-must-greater-than" =>  1,
            //                      "market-sell-order-must-less-than" =>  500000,
            //                       "circuit-break-when-greater-than" =>  10000,
            //                          "circuit-break-when-less-than" =>  10,
            //                 "market-sell-order-rate-must-less-than" =>  0.1,
            //                  "market-buy-order-rate-must-less-than" =>  0.1        } }
            //
            return $this->parse_trading_limits($this->safe_value($response, 'data', array()));
        }) ();
    }

    public function parse_trading_limits($limits, ?string $symbol = null, $params = array ()) {
        //
        //   {                                  $symbol => "aidocbtc",
        //                  "buy-limit-must-less-than" =>  1.1,
        //              "sell-limit-must-greater-than" =>  0.9,
        //             "limit-order-must-greater-than" =>  1,
        //                "limit-order-must-less-than" =>  5000000,
        //        "market-buy-order-must-greater-than" =>  0.0001,
        //           "market-buy-order-must-less-than" =>  100,
        //       "market-sell-order-must-greater-than" =>  1,
        //          "market-sell-order-must-less-than" =>  500000,
        //           "circuit-break-when-greater-than" =>  10000,
        //              "circuit-break-when-less-than" =>  10,
        //     "market-sell-order-rate-must-less-than" =>  0.1,
        //      "market-buy-order-rate-must-less-than" =>  0.1        }
        //
        return array(
            'info' => $limits,
            'limits' => array(
                'amount' => array(
                    'min' => $this->safe_number($limits, 'limit-order-must-greater-than'),
                    'max' => $this->safe_number($limits, 'limit-order-must-less-than'),
                ),
            ),
        );
    }

    public function cost_to_precision($symbol, $cost) {
        return $this->decimal_to_precision($cost, TRUNCATE, $this->markets[$symbol]['precision']['cost'], $this->precisionMode);
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for huobijp
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $method = $this->options['fetchMarketsMethod'];
            $response = Async\await($this->$method ($params));
            //
            //    {
            //        "status" => "ok",
            //        "data" => array(
            //            {
            //                "base-currency" => "xrp",
            //                "quote-currency" => "btc",
            //                "price-precision" => 9,
            //                "amount-precision" => 2,
            //                "symbol-partition" => "default",
            //                "symbol" => "xrpbtc",
            //                "state" => "online",
            //                "value-precision" => 8,
            //                "min-order-amt" => 1,
            //                "max-order-amt" => 5000000,
            //                "min-order-value" => 0.0001,
            //                "limit-order-min-order-amt" => 1,
            //                "limit-order-max-order-amt" => 5000000,
            //                "limit-order-max-buy-amt" => 5000000,
            //                "limit-order-max-sell-amt" => 5000000,
            //                "sell-$market-min-order-amt" => 1,
            //                "sell-$market-max-order-amt" => 500000,
            //                "buy-$market-max-order-value" => 100,
            //                "leverage-ratio" => 5,
            //                "super-$margin-leverage-ratio" => 3,
            //                "api-trading" => "enabled",
            //                "tags" => ""
            //            }
            //            ...
            //         )
            //    }
            //
            $markets = $this->safe_value($response, 'data', array());
            $numMarkets = count($markets);
            if ($numMarkets < 1) {
                throw new NetworkError($this->id . ' fetchMarkets() returned empty $response => ' . $this->json($markets));
            }
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $baseId = $this->safe_string($market, 'base-currency');
                $quoteId = $this->safe_string($market, 'quote-currency');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $state = $this->safe_string($market, 'state');
                $leverageRatio = $this->safe_string($market, 'leverage-ratio', '1');
                $superLeverageRatio = $this->safe_string($market, 'super-$margin-leverage-ratio', '1');
                $margin = Precise::string_gt($leverageRatio, '1') || Precise::string_gt($superLeverageRatio, '1');
                $fee = ($base === 'OMG') ? $this->parse_number('0') : $this->parse_number('0.002');
                $result[] = array(
                    'id' => $baseId . $quoteId,
                    'symbol' => $base . '/' . $quote,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => $margin,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => ($state === 'online'),
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'taker' => $fee,
                    'maker' => $fee,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'price-precision'))),
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'amount-precision'))),
                        'cost' => $this->parse_number($this->parse_precision($this->safe_string($market, 'value-precision'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => $this->parse_number('1'),
                            'max' => $this->parse_number($leverageRatio),
                            'superMax' => $this->parse_number($superLeverageRatio),
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'min-order-amt'),
                            'max' => $this->safe_number($market, 'max-order-amt'),
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => $this->safe_number($market, 'min-order-value'),
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // fetchTicker
        //
        //     {
        //         "amount" => 26228.672978342216,
        //         "open" => 9078.95,
        //         "close" => 9146.86,
        //         "high" => 9155.41,
        //         "id" => 209988544334,
        //         "count" => 265846,
        //         "low" => 8988.0,
        //         "version" => 209988544334,
        //         "ask" => array( 9146.87, 0.156134 ),
        //         "vol" => 2.3822168242201668E8,
        //         "bid" => array( 9146.86, 0.080758 ),
        //     }
        //
        // fetchTickers
        //     {
        //         "symbol" => "bhdht",
        //         "open" =>  2.3938,
        //         "high" =>  2.4151,
        //         "low" =>  2.3323,
        //         "close" =>  2.3909,
        //         "amount" =>  628.992,
        //         "vol" =>  1493.71841095,
        //         "count" =>  2088,
        //         "bid" =>  2.3643,
        //         "bidSize" =>  0.7136,
        //         "ask" =>  2.4061,
        //         "askSize" =>  0.4156
        //     }
        //
        $symbol = $this->safe_symbol(null, $market);
        $timestamp = $this->safe_integer($ticker, 'ts');
        $bid = null;
        $bidVolume = null;
        $ask = null;
        $askVolume = null;
        if (is_array($ticker) && array_key_exists('bid', $ticker)) {
            if (gettype($ticker['bid']) === 'array' && array_keys($ticker['bid']) === array_keys(array_keys($ticker['bid']))) {
                $bid = $this->safe_string($ticker['bid'], 0);
                $bidVolume = $this->safe_string($ticker['bid'], 1);
            } else {
                $bid = $this->safe_string($ticker, 'bid');
                $bidVolume = $this->safe_string($ticker, 'bidSize');
            }
        }
        if (is_array($ticker) && array_key_exists('ask', $ticker)) {
            if (gettype($ticker['ask']) === 'array' && array_keys($ticker['ask']) === array_keys(array_keys($ticker['ask']))) {
                $ask = $this->safe_string($ticker['ask'], 0);
                $askVolume = $this->safe_string($ticker['ask'], 1);
            } else {
                $ask = $this->safe_string($ticker, 'ask');
                $askVolume = $this->safe_string($ticker, 'askSize');
            }
        }
        $open = $this->safe_string($ticker, 'open');
        $close = $this->safe_string($ticker, 'close');
        $baseVolume = $this->safe_string($ticker, 'amount');
        $quoteVolume = $this->safe_string($ticker, 'vol');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $bid,
            'bidVolume' => $bidVolume,
            'ask' => $ask,
            'askVolume' => $askVolume,
            'vwap' => null,
            'open' => $open,
            'close' => $close,
            'last' => $close,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'type' => 'step0',
            );
            $response = Async\await($this->marketGetDepth (array_merge($request, $params)));
            //
            //     {
            //         "status" => "ok",
            //         "ch" => "market.btcusdt.depth.step0",
            //         "ts" => 1583474832790,
            //         "tick" => {
            //             "bids" => array(
            //                 array( 9100.290000000000000000, 0.200000000000000000 ),
            //                 array( 9099.820000000000000000, 0.200000000000000000 ),
            //                 array( 9099.610000000000000000, 0.205000000000000000 ),
            //             ),
            //             "asks" => array(
            //                 array( 9100.640000000000000000, 0.005904000000000000 ),
            //                 array( 9101.010000000000000000, 0.287311000000000000 ),
            //                 array( 9101.030000000000000000, 0.012121000000000000 ),
            //             ),
            //             "ts":1583474832008,
            //             "version":104999698780
            //         }
            //     }
            //
            if (is_array($response) && array_key_exists('tick', $response)) {
                if (!$response['tick']) {
                    throw new BadSymbol($this->id . ' fetchOrderBook() returned empty $response => ' . $this->json($response));
                }
                $tick = $this->safe_value($response, 'tick');
                $timestamp = $this->safe_integer($tick, 'ts', $this->safe_integer($response, 'ts'));
                $result = $this->parse_order_book($tick, $symbol, $timestamp);
                $result['nonce'] = $this->safe_integer($tick, 'version');
                return $result;
            }
            throw new ExchangeError($this->id . ' fetchOrderBook() returned unrecognized $response => ' . $this->json($response));
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->marketGetDetailMerged (array_merge($request, $params)));
            //
            //     {
            //         "status" => "ok",
            //         "ch" => "market.btcusdt.detail.merged",
            //         "ts" => 1583494336669,
            //         "tick" => {
            //             "amount" => 26228.672978342216,
            //             "open" => 9078.95,
            //             "close" => 9146.86,
            //             "high" => 9155.41,
            //             "id" => 209988544334,
            //             "count" => 265846,
            //             "low" => 8988.0,
            //             "version" => 209988544334,
            //             "ask" => array( 9146.87, 0.156134 ),
            //             "vol" => 2.3822168242201668E8,
            //             "bid" => array( 9146.86, 0.080758 ),
            //         }
            //     }
            //
            $ticker = $this->parse_ticker($response['tick'], $market);
            $timestamp = $this->safe_integer($response, 'ts');
            $ticker['timestamp'] = $timestamp;
            $ticker['datetime'] = $this->iso8601($timestamp);
            return $ticker;
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->marketGetTickers ($params));
            $tickers = $this->safe_value($response, 'data', array());
            $timestamp = $this->safe_integer($response, 'ts');
            $result = array();
            for ($i = 0; $i < count($tickers); $i++) {
                $marketId = $this->safe_string($tickers[$i], 'symbol');
                $market = $this->safe_market($marketId);
                $symbol = $market['symbol'];
                $ticker = $this->parse_ticker($tickers[$i], $market);
                $ticker['timestamp'] = $timestamp;
                $ticker['datetime'] = $this->iso8601($timestamp);
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchTrades (public)
        //
        //     {
        //         "amount" => 0.010411000000000000,
        //         "trade-$id" => 102090736910,
        //         "ts" => 1583497692182,
        //         "id" => 10500517034273194594947,
        //         "price" => 9096.050000000000000000,
        //         "direction" => "sell"
        //     }
        //
        // fetchMyTrades (private)
        //
        //     array(
        //          "symbol" => "swftcbtc",
        //          "fee-currency" => "swftc",
        //          "filled-fees" => "0",
        //          "source" => "spot-api",
        //          "id" => 83789509854000,
        //          "type" => "buy-limit",
        //          "order-$id" => 83711103204909,
        //          'filled-points' => "0.005826843283532154",
        //          "fee-deduct-currency" => "ht",
        //          'filled-amount' => "45941.53",
        //          "price" => "0.0000001401",
        //          "created-at" => 1597933260729,
        //          "match-$id" => 100087455560,
        //          "role" => "maker",
        //          "trade-$id" => 100050305348
        //     ),
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_integer_2($trade, 'ts', 'created-at');
        $order = $this->safe_string($trade, 'order-id');
        $side = $this->safe_string($trade, 'direction');
        $type = $this->safe_string($trade, 'type');
        if ($type !== null) {
            $typeParts = explode('-', $type);
            $side = $typeParts[0];
            $type = $typeParts[1];
        }
        $takerOrMaker = $this->safe_string($trade, 'role');
        $price = $this->safe_string($trade, 'price');
        $amount = $this->safe_string_2($trade, 'filled-amount', 'amount');
        $cost = Precise::string_mul($price, $amount);
        $fee = null;
        $feeCost = $this->safe_string($trade, 'filled-fees');
        $feeCurrency = $this->safe_currency_code($this->safe_string($trade, 'fee-currency'));
        $filledPoints = $this->safe_string($trade, 'filled-points');
        if ($filledPoints !== null) {
            if (($feeCost === null) || (Precise::string_eq($feeCost, '0.0'))) {
                $feeCost = $filledPoints;
                $feeCurrency = $this->safe_currency_code($this->safe_string($trade, 'fee-deduct-currency'));
            }
        }
        if ($feeCost !== null) {
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrency,
            );
        }
        $tradeId = $this->safe_string_2($trade, 'trade-id', 'tradeId');
        $id = $this->safe_string($trade, 'id', $tradeId);
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'symbol' => $symbol,
            'order' => $order,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'type' => $type,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        ));
    }

    public function fetch_order_trades(string $id, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $since, $limit, $params) {
            /**
             * fetch all the trades made from a single order
             * @param {string} $id order $id
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?$id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $request = array(
                'id' => $id,
            );
            $response = Async\await($this->privateGetOrderOrdersIdMatchresults (array_merge($request, $params)));
            return $this->parse_trades($response['data'], null, $since, $limit);
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $market = null;
            $request = array();
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($limit !== null) {
                $request['size'] = $limit; // 1-100 orders, default is 100
            }
            if ($since !== null) {
                $request['start-time'] = $since; // a date within 120 days from today
                // $request['end-time'] = $this->sum($since, 172800000); // 48 hours window
            }
            $response = Async\await($this->privateGetOrderMatchresults (array_merge($request, $params)));
            return $this->parse_trades($response['data'], $market, $since, $limit);
        }) ();
    }

    public function fetch_trades(string $symbol, ?int $since = null, $limit = 1000, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent $trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] timestamp in ms of the earliest $trade to fetch
             * @param {int} [$limit] the maximum amount of $trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades $trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['size'] = min ($limit, 2000);
            }
            $response = Async\await($this->marketGetHistoryTrade (array_merge($request, $params)));
            //
            //     {
            //         "status" => "ok",
            //         "ch" => "market.btcusdt.trade.detail",
            //         "ts" => 1583497692365,
            //         "data" => array(
            //             {
            //                 "id" => 105005170342,
            //                 "ts" => 1583497692182,
            //                 "data" => array(
            //                     array(
            //                         "amount" => 0.010411000000000000,
            //                         "trade-id" => 102090736910,
            //                         "ts" => 1583497692182,
            //                         "id" => 10500517034273194594947,
            //                         "price" => 9096.050000000000000000,
            //                         "direction" => "sell"
            //                     }
            //                 )
            //             ),
            //             // ...
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $trades = $this->safe_value($data[$i], 'data', array());
                for ($j = 0; $j < count($trades); $j++) {
                    $trade = $this->parse_trade($trades[$j], $market);
                    $result[] = $trade;
                }
            }
            $result = $this->sort_by($result, 'timestamp');
            return $this->filter_by_symbol_since_limit($result, $market['symbol'], $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     {
        //         "amount":1.2082,
        //         "open":0.025096,
        //         "close":0.025095,
        //         "high":0.025096,
        //         "id":1591515300,
        //         "count":6,
        //         "low":0.025095,
        //         "vol":0.0303205097
        //     }
        //
        return array(
            $this->safe_timestamp($ohlcv, 'id'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'amount'),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, $limit = 1000, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'period' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($limit !== null) {
                $request['size'] = $limit;
            }
            $response = Async\await($this->marketGetHistoryKline (array_merge($request, $params)));
            //
            //     {
            //         "status":"ok",
            //         "ch":"market.ethbtc.kline.1min",
            //         "ts":1591515374371,
            //         "data":array(
            //             array("amount":0.0,"open":0.025095,"close":0.025095,"high":0.025095,"id":1591515360,"count":0,"low":0.025095,"vol":0.0),
            //             array("amount":1.2082,"open":0.025096,"close":0.025095,"high":0.025096,"id":1591515300,"count":6,"low":0.025095,"vol":0.0303205097),
            //             array("amount":0.0648,"open":0.025096,"close":0.025096,"high":0.025096,"id":1591515240,"count":2,"low":0.025096,"vol":0.0016262208),
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_accounts($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch all the accounts associated with a profile
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=account-structure account structures~ indexed by the account type
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetAccountAccounts ($params));
            return $response['data'];
        }) ();
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches all available $currencies on an exchange
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of $currencies
             */
            $request = array(
                'language' => $this->options['language'],
            );
            $response = Async\await($this->publicGetSettingsCurrencys (array_merge($request, $params)));
            //
            //     {
            //         "status":"ok",
            //         "data":[
            //             {
            //                 "currency-addr-with-tag":false,
            //                 "fast-confirms":12,
            //                 "safe-confirms":12,
            //                 "currency-type":"eth",
            //                 "quote-$currency":true,
            //                 "withdraw-enable-timestamp":1609430400000,
            //                 "deposit-enable-timestamp":1609430400000,
            //                 "currency-partition":"all",
            //                 "support-sites":["OTC","INSTITUTION","MINEPOOL"],
            //                 "withdraw-$precision":6,
            //                 "visible-assets-timestamp":1508839200000,
            //                 "deposit-min-amount":"1",
            //                 "withdraw-min-amount":"10",
            //                 "show-$precision":"8",
            //                 "tags":"",
            //                 "weight":23,
            //                 "full-$name":"Tether USDT",
            //                 "otc-enable":1,
            //                 "visible":true,
            //                 "white-enabled":false,
            //                 "country-disabled":false,
            //                 "deposit-enabled":true,
            //                 "withdraw-enabled":true,
            //                 "name":"usdt",
            //                 "state":"online",
            //                 "display-$name":"USDT",
            //                 "suspend-withdraw-desc":null,
            //                 "withdraw-desc":"Minimum withdrawal amount => 10 USDT (ERC20). !>_<!To ensure the safety of your funds, your withdrawal $request will be manually reviewed if your security strategy or password is changed. Please wait for phone calls or emails from our staff.!>_<!Please make sure that your computer and browser are secure and your information is protected from being tampered or leaked.",
            //                 "suspend-deposit-desc":null,
            //                 "deposit-desc":"Please don’t deposit any other digital assets except USDT to the above address. Otherwise, you may lose your assets permanently. !>_<!Depositing to the above address requires confirmations of the entire network. It will arrive after 12 confirmations, and it will be available to withdraw after 12 confirmations. !>_<!Minimum deposit amount => 1 USDT. Any deposits less than the minimum will not be credited or refunded.!>_<!Your deposit address won’t change often. If there are any changes, we will notify you via announcement or email.!>_<!Please make sure that your computer and browser are secure and your information is protected from being tampered or leaked.",
            //                 "suspend-$visible-desc":null
            //             }
            //         ]
            //     }
            //
            $currencies = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($currencies); $i++) {
                $currency = $currencies[$i];
                $id = $this->safe_value($currency, 'name');
                $code = $this->safe_currency_code($id);
                $depositEnabled = $this->safe_value($currency, 'deposit-enabled');
                $withdrawEnabled = $this->safe_value($currency, 'withdraw-enabled');
                $countryDisabled = $this->safe_value($currency, 'country-disabled');
                $visible = $this->safe_value($currency, 'visible', false);
                $state = $this->safe_string($currency, 'state');
                $active = $visible && $depositEnabled && $withdrawEnabled && ($state === 'online') && !$countryDisabled;
                $name = $this->safe_string($currency, 'display-name');
                $precision = $this->parse_number($this->parse_precision($this->safe_string($currency, 'withdraw-precision')));
                $result[$code] = array(
                    'id' => $id,
                    'code' => $code,
                    'type' => 'crypto',
                    // 'payin' => $currency['deposit-enabled'],
                    // 'payout' => $currency['withdraw-enabled'],
                    // 'transfer' => null,
                    'name' => $name,
                    'active' => $active,
                    'deposit' => $depositEnabled,
                    'withdraw' => $withdrawEnabled,
                    'fee' => null, // todo need to fetch from fee endpoint
                    'precision' => $precision,
                    'limits' => array(
                        'amount' => array(
                            'min' => $precision,
                            'max' => null,
                        ),
                        'deposit' => array(
                            'min' => $this->safe_number($currency, 'deposit-min-amount'),
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->safe_number($currency, 'withdraw-min-amount'),
                            'max' => null,
                        ),
                    ),
                    'info' => $currency,
                );
            }
            return $result;
        }) ();
    }

    public function parse_balance($response): array {
        $balances = $this->safe_value($response['data'], 'list', array());
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = null;
            if (is_array($result) && array_key_exists($code, $result)) {
                $account = $result[$code];
            } else {
                $account = $this->account();
            }
            if ($balance['type'] === 'trade') {
                $account['free'] = $this->safe_string($balance, 'balance');
            }
            if ($balance['type'] === 'frozen') {
                $account['used'] = $this->safe_string($balance, 'balance');
            }
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            Async\await($this->load_accounts());
            $method = $this->options['fetchBalanceMethod'];
            $request = array(
                'id' => $this->accounts[0]['id'],
            );
            $response = Async\await($this->$method (array_merge($request, $params)));
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_orders_by_states($states, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($states, $symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array(
                'states' => $states,
            );
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $method = $this->safe_string($this->options, 'fetchOrdersByStatesMethod', 'private_get_order_orders');
            $response = Async\await($this->$method (array_merge($request, $params)));
            //
            //     { "status" =>   "ok",
            //         "data" => array( {                  id =>  13997833014,
            //                                "symbol" => "ethbtc",
            //                          "account-id" =>  3398321,
            //                                "amount" => "0.045000000000000000",
            //                                 "price" => "0.034014000000000000",
            //                          "created-at" =>  1545836976871,
            //                                  "type" => "sell-$limit",
            //                        "field-amount" => "0.045000000000000000",
            //                   "field-cash-amount" => "0.001530630000000000",
            //                          "field-fees" => "0.000003061260000000",
            //                         "finished-at" =>  1545837948214,
            //                                "source" => "spot-api",
            //                                 "state" => "filled",
            //                         "canceled-at" =>  0                      }  ) }
            //
            return $this->parse_orders($response['data'], $market, $since, $limit);
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an $order made by the user
             * @param {string} $symbol unified $symbol of the market the $order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'id' => $id,
            );
            $response = Async\await($this->privateGetOrderOrdersId (array_merge($request, $params)));
            $order = $this->safe_value($response, 'data');
            return $this->parse_order($order);
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple orders made by the user
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_states('pre-submitted,submitted,partial-filled,filled,partial-canceled,canceled', $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of  open orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $method = $this->safe_string($this->options, 'fetchOpenOrdersMethod', 'fetch_open_orders_v1');
            return Async\await($this->$method ($symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_open_orders_v1(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOpenOrdersV1() requires a $symbol argument');
            }
            return Async\await($this->fetch_orders_by_states('pre-submitted,submitted,partial-filled', $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed orders made by the user
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_states('filled,partial-canceled,canceled', $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_open_orders_v2(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $accountId = $this->safe_string($params, 'account-id');
            if ($accountId === null) {
                // pick the first $account
                Async\await($this->load_accounts());
                for ($i = 0; $i < count($this->accounts); $i++) {
                    $account = $this->accounts[$i];
                    if ($account['type'] === 'spot') {
                        $accountId = $this->safe_string($account, 'id');
                        if ($accountId !== null) {
                            break;
                        }
                    }
                }
            }
            $request['account-id'] = $accountId;
            if ($limit !== null) {
                $request['size'] = $limit;
            }
            $omitted = $this->omit($params, 'account-id');
            $response = Async\await($this->privateGetOrderOpenOrders (array_merge($request, $omitted)));
            //
            //     {
            //         "status":"ok",
            //         "data":array(
            //             {
            //                 "symbol":"ethusdt",
            //                 "source":"api",
            //                 "amount":"0.010000000000000000",
            //                 "account-id":1528640,
            //                 "created-at":1561597491963,
            //                 "price":"400.000000000000000000",
            //                 "filled-amount":"0.0",
            //                 "filled-cash-amount":"0.0",
            //                 "filled-fees":"0.0",
            //                 "id":38477101630,
            //                 "state":"submitted",
            //                 "type":"sell-$limit"
            //             }
            //         )
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_orders($data, $market, $since, $limit);
        }) ();
    }

    public function parse_order_status($status) {
        $statuses = array(
            'partial-filled' => 'open',
            'partial-canceled' => 'canceled',
            'filled' => 'closed',
            'canceled' => 'canceled',
            'submitted' => 'open',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        //     {                  $id =>  13997833014,
        //                    "symbol" => "ethbtc",
        //              "account-$id" =>  3398321,
        //                    "amount" => "0.045000000000000000",
        //                     "price" => "0.034014000000000000",
        //              "created-at" =>  1545836976871,
        //                      "type" => "sell-limit",
        //            "field-$amount" => "0.045000000000000000", // they have fixed it for $filled-$amount
        //       "field-cash-$amount" => "0.001530630000000000", // they have fixed it for $filled-cash-$amount
        //              "field-fees" => "0.000003061260000000", // they have fixed it for $filled-fees
        //             "finished-at" =>  1545837948214,
        //                    "source" => "spot-api",
        //                     "state" => "filled",
        //             "canceled-at" =>  0                      }
        //
        //     {                  $id =>  20395337822,
        //                    "symbol" => "ethbtc",
        //              "account-$id" =>  5685075,
        //                    "amount" => "0.001000000000000000",
        //                     "price" => "0.0",
        //              "created-at" =>  1545831584023,
        //                      "type" => "buy-$market",
        //            "field-$amount" => "0.029100000000000000", // they have fixed it for $filled-$amount
        //       "field-cash-$amount" => "0.000999788700000000", // they have fixed it for $filled-cash-$amount
        //              "field-fees" => "0.000058200000000000", // they have fixed it for $filled-fees
        //             "finished-at" =>  1545831584181,
        //                    "source" => "spot-api",
        //                     "state" => "filled",
        //             "canceled-at" =>  0                      }
        //
        $id = $this->safe_string($order, 'id');
        $side = null;
        $type = null;
        $status = null;
        if (is_array($order) && array_key_exists('type', $order)) {
            $orderType = explode('-', $order['type']);
            $side = $orderType[0];
            $type = $orderType[1];
            $status = $this->parse_order_status($this->safe_string($order, 'state'));
        }
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $timestamp = $this->safe_integer($order, 'created-at');
        $clientOrderId = $this->safe_string($order, 'client-$order-id');
        $amount = $this->safe_string($order, 'amount');
        $filled = $this->safe_string_2($order, 'filled-amount', 'field-amount'); // typo in their API, $filled $amount
        $price = $this->safe_string($order, 'price');
        $cost = $this->safe_string_2($order, 'filled-cash-amount', 'field-cash-amount'); // same typo
        $feeCost = $this->safe_string_2($order, 'filled-fees', 'field-fees'); // typo in their API, $filled fees
        $fee = null;
        if ($feeCost !== null) {
            $feeCurrency = ($side === 'sell') ? $market['quote'] : $market['base'];
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrency,
            );
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $market['symbol'],
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'average' => null,
            'cost' => $cost,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function create_market_buy_order_with_cost(string $symbol, $cost, $params = array ()) {
        return Async\async(function () use ($symbol, $cost, $params) {
            /**
             * create a $market buy order by providing the $symbol and $cost
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {float} $cost how much you want to trade in units of the quote currency
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['spot']) {
                throw new NotSupported($this->id . ' createMarketBuyOrderWithCost() supports spot orders only');
            }
            $params['createMarketBuyOrderRequiresPrice'] = false;
            return Async\await($this->create_order($symbol, 'market', 'buy', $cost, null, $params));
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            Async\await($this->load_accounts());
            $market = $this->market($symbol);
            $request = array(
                'account-id' => $this->accounts[0]['id'],
                'symbol' => $market['id'],
                'type' => $side . '-' . $type,
            );
            $clientOrderId = $this->safe_string_2($params, 'clientOrderId', 'client-order-id'); // must be 64 chars max and unique within 24 hours
            if ($clientOrderId === null) {
                $broker = $this->safe_value($this->options, 'broker', array());
                $brokerId = $this->safe_string($broker, 'id');
                $request['client-order-id'] = $brokerId . $this->uuid();
            } else {
                $request['client-order-id'] = $clientOrderId;
            }
            $params = $this->omit($params, array( 'clientOrderId', 'client-order-id' ));
            if (($type === 'market') && ($side === 'buy')) {
                $quoteAmount = null;
                $createMarketBuyOrderRequiresPrice = true;
                list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
                $cost = $this->safe_number($params, 'cost');
                $params = $this->omit($params, 'cost');
                if ($cost !== null) {
                    $quoteAmount = $this->amount_to_precision($symbol, $cost);
                } elseif ($createMarketBuyOrderRequiresPrice) {
                    if ($price === null) {
                        throw new InvalidOrder($this->id . ' createOrder() requires the $price argument for $market buy orders to calculate the total $cost to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option or param to false and pass the $cost to spend in the $amount argument');
                    } else {
                        // despite that $cost = $amount * $price is in quote currency and should have quote precision
                        // the exchange API requires the $cost supplied in 'amount' to be of base precision
                        // more about it here:
                        // https://github.com/ccxt/ccxt/pull/4395
                        // https://github.com/ccxt/ccxt/issues/7611
                        // we use amountToPrecision here because the exchange requires $cost in base precision
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $quoteAmount = $this->amount_to_precision($symbol, Precise::string_mul($amountString, $priceString));
                    }
                } else {
                    $quoteAmount = $this->amount_to_precision($symbol, $amount);
                }
                $request['amount'] = $quoteAmount;
            } else {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if ($type === 'limit' || $type === 'ioc' || $type === 'limit-maker' || $type === 'stop-limit' || $type === 'stop-limit-fok') {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $method = $this->options['createOrderMethod'];
            $response = Async\await($this->$method (array_merge($request, $params)));
            $id = $this->safe_string($response, 'data');
            return $this->safe_order(array(
                'info' => $response,
                'id' => $id,
                'timestamp' => null,
                'datetime' => null,
                'lastTradeTimestamp' => null,
                'status' => null,
                'symbol' => $symbol,
                'type' => $type,
                'side' => $side,
                'price' => $price,
                'amount' => $amount,
                'filled' => null,
                'remaining' => null,
                'cost' => null,
                'trades' => null,
                'fee' => null,
                'clientOrderId' => null,
                'average' => null,
            ), $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol not used by huobijp cancelOrder ()
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            $response = Async\await($this->privatePostOrderOrdersIdSubmitcancel (array( 'id' => $id )));
            //
            //     {
            //         "status" => "ok",
            //         "data" => "10138899000",
            //     }
            //
            return array_merge($this->parse_order($response), array(
                'id' => $id,
                'status' => 'canceled',
            ));
        }) ();
    }

    public function cancel_orders($ids, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($ids, $symbol, $params) {
            /**
             * cancel multiple orders
             * @param {string[]} $ids order $ids
             * @param {string} $symbol not used by huobijp cancelOrders ()
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $clientOrderIds = $this->safe_value_2($params, 'clientOrderIds', 'client-order-ids');
            $params = $this->omit($params, array( 'clientOrderIds', 'client-order-ids' ));
            $request = array();
            if ($clientOrderIds === null) {
                $request['order-ids'] = $ids;
            } else {
                $request['client-order-ids'] = $clientOrderIds;
            }
            $response = Async\await($this->privatePostOrderOrdersBatchcancel (array_merge($request, $params)));
            //
            //     {
            //         "status" => "ok",
            //         "data" => {
            //             "success" => array(
            //                 "5983466"
            //             ),
            //             "failed" => array(
            //                 array(
            //                     "err-msg" => "Incorrect order state",
            //                     "order-state" => 7,
            //                     "order-id" => "",
            //                     "err-code" => "order-orderstate-error",
            //                     "client-order-id" => "first"
            //                 ),
            //                 array(
            //                     "err-msg" => "Incorrect order state",
            //                     "order-state" => 7,
            //                     "order-id" => "",
            //                     "err-code" => "order-orderstate-error",
            //                     "client-order-id" => "second"
            //                 ),
            //                 {
            //                     "err-msg" => "The record is not found.",
            //                     "order-id" => "",
            //                     "err-code" => "base-not-found",
            //                     "client-order-id" => "third"
            //                 }
            //             )
            //         }
            //     }
            //
            return $response;
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders
             * @param {string} $symbol unified $market $symbol, only orders in the $market of this $symbol are cancelled when $symbol is not null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array(
                // 'account-id' string false NA The account id used for this cancel Refer to GET /v1/account/accounts
                // 'symbol' => $market['id'], // a list of comma-separated symbols, all symbols by default
                // 'types' 'string', buy-$market, sell-$market, buy-limit, sell-limit, buy-ioc, sell-ioc, buy-stop-limit, sell-stop-limit, buy-limit-fok, sell-limit-fok, buy-stop-limit-fok, sell-stop-limit-fok
                // 'side' => 'buy', // or 'sell'
                // 'size' => 100, // the number of orders to cancel 1-100
            );
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $response = Async\await($this->privatePostOrderOrdersBatchCancelOpenOrders (array_merge($request, $params)));
            //
            //     {
            //         "code" => 200,
            //         "data" => {
            //             "success-count" => 2,
            //             "failed-count" => 0,
            //             "next-id" => 5454600
            //         }
            //     }
            //
            return $response;
        }) ();
    }

    public function currency_to_precision($code, $fee, $networkCode = null) {
        return $this->decimal_to_precision($fee, 0, $this->currencies[$code]['precision'], $this->precisionMode);
    }

    public function safe_network($networkId) {
        $lastCharacterIndex = strlen($networkId) - 1;
        $lastCharacter = $networkId[$lastCharacterIndex];
        if ($lastCharacter === '1') {
            $networkId = mb_substr($networkId, 0, $lastCharacterIndex - 0);
        }
        $networksById = array();
        return $this->safe_string($networksById, $networkId, $networkId);
    }

    public function parse_deposit_address($depositAddress, ?array $currency = null) {
        //
        //     {
        //         "currency" => "usdt",
        //         "address" => "0xf7292eb9ba7bc50358e27f0e025a4d225a64127b",
        //         "addressTag" => "",
        //         "chain" => "usdterc20", // trc20usdt, hrc20usdt, usdt, algousdt
        //     }
        //
        $address = $this->safe_string($depositAddress, 'address');
        $tag = $this->safe_string($depositAddress, 'addressTag');
        $currencyId = $this->safe_string($depositAddress, 'currency');
        $currency = $this->safe_currency($currencyId, $currency);
        $code = $this->safe_currency_code($currencyId, $currency);
        $networkId = $this->safe_string($depositAddress, 'chain');
        $networks = $this->safe_value($currency, 'networks', array());
        $networksById = $this->index_by($networks, 'id');
        $networkValue = $this->safe_value($networksById, $networkId, $networkId);
        $network = $this->safe_string($networkValue, 'network');
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => $network,
            'info' => $depositAddress,
        );
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch deposits for
             * @param {int} [$limit] the maximum number of deposits structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            if ($limit === null || $limit > 100) {
                $limit = 100;
            }
            Async\await($this->load_markets());
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            $request = array(
                'type' => 'deposit',
                'from' => 0, // From 'id' ... if you want to get results after a particular transaction id, pass the id in $params->from
            );
            if ($currency !== null) {
                $request['currency'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['size'] = $limit; // max 100
            }
            $response = Async\await($this->privateGetQueryDepositWithdraw (array_merge($request, $params)));
            // return $response
            return $this->parse_transactions($response['data'], $currency, $since, $limit);
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            if ($limit === null || $limit > 100) {
                $limit = 100;
            }
            Async\await($this->load_markets());
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            $request = array(
                'type' => 'withdraw',
                'from' => 0, // From 'id' ... if you want to get results after a particular transaction id, pass the id in $params->from
            );
            if ($currency !== null) {
                $request['currency'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['size'] = $limit; // max 100
            }
            $response = Async\await($this->privateGetQueryDepositWithdraw (array_merge($request, $params)));
            // return $response
            return $this->parse_transactions($response['data'], $currency, $since, $limit);
        }) ();
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        // fetchDeposits
        //
        //     {
        //         "id" => 8211029,
        //         "type" => "deposit",
        //         "currency" => "eth",
        //         "chain" => "eth",
        //         'tx-hash' => "bd315....",
        //         "amount" => 0.81162421,
        //         "address" => "4b8b....",
        //         'address-tag" => '",
        //         "fee" => 0,
        //         "state" => "safe",
        //         "created-at" => 1542180380965,
        //         "updated-at" => 1542180788077
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "id" => 6908275,
        //         "type" => "withdraw",
        //         "currency" => "btc",
        //         "chain" => "btc",
        //         'tx-hash' => "c1a1a....",
        //         "amount" => 0.80257005,
        //         "address" => "1QR....",
        //         'address-tag" => '",
        //         "fee" => 0.0005,
        //         "state" => "confirmed",
        //         "created-at" => 1552107295685,
        //         "updated-at" => 1552108032859
        //     }
        //
        // withdraw
        //
        //     {
        //         "status" => "ok",
        //         "data" => "99562054"
        //     }
        //
        $timestamp = $this->safe_integer($transaction, 'created-at');
        $code = $this->safe_currency_code($this->safe_string($transaction, 'currency'));
        $type = $this->safe_string($transaction, 'type');
        if ($type === 'withdraw') {
            $type = 'withdrawal';
        }
        $feeCost = $this->safe_string($transaction, 'fee');
        if ($feeCost !== null) {
            $feeCost = Precise::string_abs($feeCost);
        }
        return array(
            'info' => $transaction,
            'id' => $this->safe_string_2($transaction, 'id', 'data'),
            'txid' => $this->safe_string($transaction, 'tx-hash'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => $this->safe_string_upper($transaction, 'chain'),
            'address' => $this->safe_string($transaction, 'address'),
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $this->safe_string($transaction, 'address-tag'),
            'tagTo' => null,
            'tagFrom' => null,
            'type' => $type,
            'amount' => $this->safe_number($transaction, 'amount'),
            'currency' => $code,
            'status' => $this->parse_transaction_status($this->safe_string($transaction, 'state')),
            'updated' => $this->safe_integer($transaction, 'updated-at'),
            'comment' => null,
            'internal' => null,
            'fee' => array(
                'currency' => $code,
                'cost' => $this->parse_number($feeCost),
                'rate' => null,
            ),
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            // deposit $statuses
            'unknown' => 'failed',
            'confirming' => 'pending',
            'confirmed' => 'ok',
            'safe' => 'ok',
            'orphan' => 'failed',
            // withdrawal $statuses
            'submitted' => 'pending',
            'canceled' => 'canceled',
            'reexamine' => 'pending',
            'reject' => 'failed',
            'pass' => 'pending',
            'wallet-reject' => 'failed',
            // 'confirmed' => 'ok', // present in deposit $statuses
            'confirm-error' => 'failed',
            'repealed' => 'failed',
            'wallet-transfer' => 'pending',
            'pre-transfer' => 'pending',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        return Async\async(function () use ($code, $amount, $address, $tag, $params) {
            /**
             * make a withdrawal
             * @param {string} $code unified $currency $code
             * @param {float} $amount the $amount to withdraw
             * @param {string} $address the $address to withdraw to
             * @param {string} $tag
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
             */
            list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
            Async\await($this->load_markets());
            $this->check_address($address);
            $currency = $this->currency($code);
            $request = array(
                'address' => $address, // only supports existing addresses in your withdraw $address list
                'amount' => $amount,
                'currency' => strtolower($currency['id']),
            );
            if ($tag !== null) {
                $request['addr-tag'] = $tag; // only for XRP?
            }
            $networks = $this->safe_value($this->options, 'networks', array());
            $network = $this->safe_string_upper($params, 'network'); // this line allows the user to specify either ERC20 or ETH
            $network = $this->safe_string_lower($networks, $network, $network); // handle ETH>ERC20 alias
            if ($network !== null) {
                // possible chains - usdterc20, trc20usdt, hrc20usdt, usdt, algousdt
                if ($network === 'erc20') {
                    $request['chain'] = $currency['id'] . $network;
                } else {
                    $request['chain'] = $network . $currency['id'];
                }
                $params = $this->omit($params, 'network');
            }
            $response = Async\await($this->privatePostDwWithdrawApiCreate (array_merge($request, $params)));
            //
            //     {
            //         "status" => "ok",
            //         "data" => "99562054"
            //     }
            //
            return $this->parse_transaction($response, $currency);
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = '/';
        if ($api === 'market') {
            $url .= $api;
        } elseif (($api === 'public') || ($api === 'private')) {
            $url .= $this->version;
        } elseif (($api === 'v2Public') || ($api === 'v2Private')) {
            $url .= 'v2';
        }
        $url .= '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'private' || $api === 'v2Private') {
            $this->check_required_credentials();
            $timestamp = $this->ymdhms($this->milliseconds(), 'T');
            $request = array(
                'SignatureMethod' => 'HmacSHA256',
                'SignatureVersion' => '2',
                'AccessKeyId' => $this->apiKey,
                'Timestamp' => $timestamp,
            );
            if ($method !== 'POST') {
                $request = array_merge($request, $query);
            }
            $requestSorted = $this->keysort($request);
            $auth = $this->urlencode($requestSorted);
            // unfortunately, PHP demands double quotes for the escaped newline symbol
            // eslint-disable-next-line quotes
            $payload = implode("\n", array($method, $this->hostname, $url, $auth));
            $signature = $this->hmac($this->encode($payload), $this->encode($this->secret), 'sha256', 'base64');
            $auth .= '&' . $this->urlencode(array( 'Signature' => $signature ));
            $url .= '?' . $auth;
            if ($method === 'POST') {
                $body = $this->json($query);
                $headers = array(
                    'Content-Type' => 'application/json',
                );
            } else {
                $headers = array(
                    'Content-Type' => 'application/x-www-form-urlencoded',
                );
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        $url = $this->implode_params($this->urls['api'][$api], array(
            'hostname' => $this->hostname,
        )) . $url;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // fallback to default error handler
        }
        if (is_array($response) && array_key_exists('status', $response)) {
            //
            //     array("status":"error","err-$code":"order-limitorder-amount-min-error","err-msg":"limit order amount error, min => `0.001`","data":null)
            //
            $status = $this->safe_string($response, 'status');
            if ($status === 'error') {
                $code = $this->safe_string($response, 'err-code');
                $feedback = $this->id . ' ' . $body;
                $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
                $message = $this->safe_string($response, 'err-msg');
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
                throw new ExchangeError($feedback);
            }
        }
        return null;
    }
}
