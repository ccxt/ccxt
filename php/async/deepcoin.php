<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\deepcoin as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use \React\Async;
use \React\Promise\PromiseInterface;

class deepcoin extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'deepcoin',
            'name' => 'deepcoin',
            'version' => 'v1',
            'countries' => array( 'SG' ),
            'rateLimit' => 1000,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1H' => '1H',
                '2H' => '2H',
                '4H' => '4H',
                '12H' => '12H',
                '1D' => '1D',
                '1W' => '1W',
                '1M' => '1M',
                '1Y' => '1Y',
            ),
            'urls' => array(
                'logo' => 'https://www.deepcoin.com/static/images/nav-logo-black-7ad2482d753feb3.svg',
                'api' => array(
                    'v1' => array(
                        'public' => 'https://api.deepcoin.com', // 'https://test-api.goodtest.cc', // 'https://api.deepcoin.com/',
                        'private' => 'https://test-api.goodtest.cc',
                    ),
                ),
                'www' => 'https://www.deepcoin.com',
                'doc' => 'https://www.deepcoin.com/en/docs',
            ),
            'precisionMode' => TICK_SIZE,
            'api' => array(
                'v1' => array(
                    'private' => array(
                        'post' => array(
                            'deepcoin/trade/cancel-order',
                            'deepcoin/trade/order',
                        ),
                        'get' => array(
                            'deepcoin/trade/orders-pending',
                            'deepcoin/trade/orders-history',
                            'deepcoin/trade/order',
                            'deepcoin/trade/fills',
                            'deepcoin/account/balances',
                        ),
                    ),
                    'public' => array(
                        'get' => array(
                            'deepcoin/market/instruments',
                            'deepcoin/market/tickers',
                            'deepcoin/market/books',
                            'deepcoin/market/candles',
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    // 'tierBased' => false,
                    // 'percentage' => true,
                    // 'taker' => $this->parse_number('0.001'),
                    // 'maker' => $this->parse_number('0.001'),
                ),
            ),
            'exceptions' => array(
                'exact' => array(),
                'broad' => array(
                ),
            ),
        ));
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @see https://www.deepcoin.com/en/docs#deepcoin-trade-fills
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades structures to retrieve
             * @param {string} [$params->instType] Instrument type. 'SPOT' or 'SWAP', 'SPOT' by default
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
            }
            $request = array(
                'instType' => $this->safe_string($params, 'instType', 'SPOT'),
            );
            if ($since !== null) {
                $request['begin'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->v1PrivateGetDeepcoinTradeFills ($this->extend($request, $params)));
            $result = $this->safe_list($response, 'data', array());
            return $this->parse_trades($result, $market, $since, $limit);
        }) ();
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {string} [$params->instType] Instrument type. 'SPOT' or 'SWAP', 'SPOT' by default
             * @param {array} [$params->ccy] currency, eg:'USDT'
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            $request = array(
                'instType' => $this->safe_string($params, 'instType', 'SPOT'),
            );
            $response = Async\await($this->v1PrivateGetDeepcoinAccountBalances ($this->extend($request, $params)));
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instId' => $market['id'],
                'ordId' => $id,
            );
            $response = Async\await($this->v1PrivateGetDeepcoinTradeOrder ($this->extend($request, $params)));
            $data = $this->safe_list($response, 'data', array());
            if (strlen($data) === 0) {
                return $this->safe_order(array());
            }
            return $this->parse_order($this->extend($request, $params, $data[0]));
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @see https://www.deepcoin.com/en/docs#deepcoin-trade-orders-history
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of open order structures to retrieve
             * @param {string} [$params->instType] Instrument type. 'SPOT' or 'SWAP', 'SPOT' by default
             * @param {string} [$params->ordType] Order type. 'market' => Market order,'limit' => Limit order,'post_only' => Post-only order
             * @param {string} [$params->state] State. 'live' or 'partially_filled'
             * @param {string} [$params->after] Pagination of $data to return records earlier than the requested ordId, eg:"1000314896749646
             * @param {string} [$params->before] Pagination of $data to return records newer than the requested ordId, eg:"1000314896749646
             * @param {array} [$params->ordId] order id
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $request = array(
                'instType' => $this->safe_string($params, 'instType', 'SPOT'),
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->v1PrivateGetDeepcoinTradeOrdersHistory ($this->extend($request, $params)));
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $result[] = $this->parse_order($this->extend($request, $params, $data[$i]));
            }
            return $result;
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @see https://www.deepcoin.com/en/docs#deepcoin-trade-orders-pending
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of open order structures to retrieve
             * @param {string} [$params->instType] Instrument type. 'SPOT' or 'SWAP', 'SPOT' by default
             * @param {string} [$params->ordType] Order type. 'market' => Market order,'limit' => Limit order,'post_only' => Post-only order
             * @param {string} [$params->state] State. 'live' or 'partially_filled'
             * @param {string} [$params->after] Pagination of $data to return records earlier than the requested ordId, eg:"1000314896749646
             * @param {string} [$params->before] Pagination of $data to return records newer than the requested ordId, eg:"1000314896749646
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $ordType = $this->safe_string($params, 'ordType');
            $state = $this->safe_string($params, 'state');
            $after = $this->safe_string($params, 'after');
            $before = $this->safe_string($params, 'before');
            $request = array(
                'instType' => $this->safe_string($params, 'instType', 'SPOT'),
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            if ($ordType !== null) {
                $request['ordType'] = $ordType;
            }
            if ($state !== null) {
                $request['state'] = $state;
            }
            if ($after !== null) {
                $request['after'] = $after;
            }
            if ($before !== null) {
                $request['before'] = $before;
            }
            $response = Async\await($this->v1PrivateGetDeepcoinTradeOrdersPending ($this->extend($request, $params)));
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $result[] = $this->parse_order($this->extend($request, $params, $data[$i]));
            }
            return $result;
        }) ();
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://www.deepcoin.com/en/docs#deepcoin-$market-candles
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume(base units)
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instId' => $market['id'],
                'bar' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($since !== null) {
                $request['before'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->v1PublicGetDeepcoinMarketCandles ($this->extend($request, $params)));
            $result = $this->safe_list($response, 'data', array());
            return $this->parse_ohlcvs($result, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = 10, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @see https://www.deepcoin.com/en/docs#deepcoin-$market-books
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instId' => $market['id'],
                'sz' => $limit,
            );
            $response = Async\await($this->v1PublicGetDeepcoinMarketBooks ($this->extend($request, $params)));
            $result = $this->safe_dict($response, 'data', array());
            return $this->parse_order_book($result, $market['symbol'], null);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches price $tickers for multiple data, statistical information calculated over the past 24 hours for each $market
             * @see https://www.deepcoin.com/en/docs#deepcoin-$market-$tickers
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of {@link https://www.deepcoin.com/en/docs#deepcoin-$market-$tickers $ticker structures}
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instType' => $this->market_type_to_inst_type($market['type']),
                'instId' => $market['id'],
            );
            $response = Async\await($this->v1PublicGetDeepcoinMarketTickers ($this->extend($request, $params)));
            $tickers = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($tickers); $i++) {
                $ticker = $this->parse_ticker($tickers[$i]);
                $result[$ticker['symbol']] = $ticker;
            }
            $result = $this->filter_by_array_tickers($result, 'symbol', array( $symbol ));
            return $result[$symbol];
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://www.deepcoin.com/en/docs#deepcoin-market-$tickers
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of {@link https://www.deepcoin.com/en/docs#deepcoin-market-$tickers $ticker structures}
             */
            $request = array(
                'instType' => $this->safe_string($params, 'instType', 'SPOT'),
            );
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->v1PublicGetDeepcoinMarketTickers ($this->extend($request, $params)));
            $tickers = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($tickers); $i++) {
                $ticker = $this->parse_ticker($tickers[$i]);
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for deepcoin
             * @see https://www.deepcoin.com/en/docs#deepcoin-market-instruments
             * @param {string} [$params->uly] Underlying. Only applicable to SWAP
             * @param {string} [$params->instId] Instrument ID
             * @return {array[]} an array of objects representing market data
             */
            $instTypes = array( 'SPOT', 'SWAP' );
            $result = array();
            for ($j = 0; $j < count($instTypes); $j++) {
                $request = array(
                    'instType' => $instTypes[$j],
                );
                $response = Async\await($this->v1PublicGetDeepcoinMarketInstruments ($this->extend($request, $params)));
                $markets = $this->safe_list($response, 'data', array());
                for ($i = 0; $i < count($markets); $i++) {
                    $result[] = $this->parse_market($markets[$i]);
                }
            }
            return $result;
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://www.deepcoin.com/en/docs#deepcoin-trade-order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fulfilled, in units of the quote currency, ignored in $market orders
             * @param {string} [$params->tdMode] Margin mode 'cross', isolated Non-Margin mode 'cash', 'cash' by default
             * @param {string} [$params->ccy] Margin currency. Only applicable to cross MARGIN orders in Single-currency margin. eg:'USDT'
             * @param {string} [$params->clOrdId] client order id by the client, A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters
             * @param {string} [$params->ccy] Margin currency. Only applicable to cross MARGIN orders in Single-currency margin. eg:'USDT'
             * @param {string} [$params->tag]  Order tag. A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 16 characters
             * @param {string} [$params->posSide] Position $side-> 'long' or 'short'
             * @param {string} [$params->mrgPosition] Margin position. 'merge' or 'split'
             * @param {string} [$params->closePosId] Waiting for closing split margin positions. Required in split margin mode. eg:'1001063717138767'
             * @param {string} [$params->reduceOnly] Whether the order can only reduce the position size. Valid options => 'true' or 'false'. The default value is 'false'. Only applicable to MARGIN orders, and FUTURES/SWAP orders in net mode Only applicable to Single-currency margin and Multi-currency margin
             * @param {string} [$params->tgtCcy] Quantity $type-> 'base_ccy' => Base currency, 'quote_ccy' => Quote currency, Only applicable to SPOT Market Orders Default is 'quote_ccy' for buy, 'base_ccy' for sell
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $tdMode = $this->safe_string($params, 'tdMode', 'cash');
            $request = array(
                'instId' => $market['id'],
                'side' => $side,
                'sz' => $amount,
                'tdMode' => $tdMode,
                'ordType' => $type,
                'px' => $price,
            );
            $response = Async\await($this->v1PrivatePostDeepcoinTradeOrder ($this->extend($request, $params)));
            $result = $this->safe_dict($response, 'data', array());
            return $this->parse_order($this->extend($request, $params, $result));
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://www.deepcoin.com/en/docs#deepcoin-trade-cancel-order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {string} [$params->clOrdId] client order $id by the client, A combination of case-sensitive alphanumerics, all numbers, or all letters of up to 32 characters.
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'instId' => $market['id'],
                'ordId' => $id,
            );
            $response = Async\await($this->v1PrivatePostDeepcoinTradeCancelOrder ($this->extend($request, $params)));
            return $this->parse_order($response);
        }) ();
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        $orderId = $this->safe_string($trade, 'ordId');
        $timestamp = $this->safe_number($trade, 'ts');
        $fee = array(
            'cost' => $this->safe_string($trade, 'fee'),
            'currency' => $this->safe_string($trade, 'feeCcy'),
        );
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $orderId,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $this->safe_string_upper($trade, 'instId'),
            'type' => null,
            'side' => $this->safe_string($trade, 'side'),
            'price' => $this->safe_number($trade, 'fillPx'),
            'amount' => $this->safe_number($trade, 'fillSz'),
            'cost' => null,
            'takerOrMaker' => $this->safe_string_upper($trade, 'execType'),
            'fee' => $fee,
        ), $market);
    }

    public function parse_balance($response): array {
        $balances = $this->safe_list($response, 'data', array());
        $result = array( 'info' => $balances );
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $code = $this->safe_string($balance, 'ccy');
            $account = $this->account();
            $account['total'] = $this->safe_string($balance, 'bal');
            $account['free'] = $this->safe_string($balance, 'availBal');
            $account['used'] = $this->safe_string($balance, 'frozenBal');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        $timestamp = $this->safe_number($ticker, 'ts', 0.001);
        // $last = $this->safe_string($ticker, 'close');
        return $this->safe_ticker(array(
            'info' => $ticker,
            'symbol' => $this->safe_string_upper($ticker, 'instId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_number($ticker, 'high24h'),
            'low' => $this->safe_number($ticker, 'low24h'),
            'bid' => $this->safe_number($ticker, 'bidPx'),
            'bidVolume' => $this->safe_number($ticker, 'bidSz'),
            'ask' => $this->safe_number($ticker, 'askPx'),
            'askVolume' => $this->safe_number($ticker, 'askSz'),
            'vwap' => null, // volume weighed average price
            'open' => $this->safe_string($ticker, 'open24h'),
            'close' => $this->safe_number($ticker, 'last'),  // price of $last trade (closing price for current period)
            'last' => $this->safe_number($ticker, 'last'),  // same as `close`, duplicated for convenience
            'previousClose' => null,  // closing price for the previous period
            'baseVolume' => $this->safe_number($ticker, 'volCcy24h'),    // volume of base currency traded for $last 24 hours
            'quoteVolume' => $this->safe_number($ticker, 'vol24h'),  // volume of quote currency traded for $last 24 hours
        ), $market);
    }

    public function parse_market(array $market): array {
        $instType = $this->safe_string($market, 'instType');
        $id = $this->safe_string($market, 'instId');
        $isSpot = false;
        $isSwap = false;
        $isContract = false;
        if ($instType === 'SPOT') {
            $isSpot = true;
            $type = 'spot';
        } elseif ($instType === 'SWAP') {
            $isSwap = true;
            $isContract = true;
            $type = 'swap';
        }
        // $uly = $this->safe_string($market, 'uly');
        $base = $this->safe_string_upper($market, 'baseCcy');
        $quote = $this->safe_string_upper($market, 'quoteCcy');
        $state = $this->safe_string($market, 'state');
        $active = $state === 'live';
        $contractSize = $this->safe_number($market, 'ctVal');
        $settle = $this->safe_string($market, 'ctValCcy');
        $created = $this->safe_number($market, 'listTime');
        $maxLever = $this->safe_number($market, 'lever');
        $minSz = $this->safe_number($market, 'minSz');
        $ctType = $this->safe_string($market, 'ctType');
        // $alias = $this->safe_string($market, 'alias');
        // $maxLmtSz = $this->safe_string($market, 'maxLmtSz');
        // $maxMktSz = $this->safe_string($market, 'maxMktSz');
        $pricePrecision = $this->safe_number($market, 'tickSz');
        $amountPrecision = $this->safe_number($market, 'lotSz');
        return array(
            'info' => $market,
            'id' => $id,                           // string literal for referencing within an exchange
            'symbol' => $this->safe_string_upper($market, 'instId'),                   // uppercase string literal of a pair of currencies
            'base' => $base,                       // uppercase string, unified $base currency code, 3 or more letters
            'quote' => $quote,                     // uppercase string, unified $quote currency code, 3 or more letters
            'baseId' => $base,                     // any string, exchange-specific $base currency $id
            'quoteId' => $quote,                   // any string, exchange-specific $quote currency $id
            'active' => $active,                   // boolean, $market status
            'type' => $type,                       // spot for spot, future for expiry futures, swap for perpetual swaps, 'option' for options
            'spot' => $isSpot,                     // whether the $market is a spot $market
            'margin' => null,                // whether the $market is a margin $market
            'future' => null,                // whether the $market is a expiring future
            'swap' => $isSwap,                     // whether the $market is a perpetual swap
            'option' => null,                // whether the $market is an option contract
            'contract' => $isContract,              // whether the $market is a future, a perpetual swap, or an option
            'settle' => $settle,                // the unified currency code that the contract will $settle in, only set if `contract` is true
            'settleId' => $settle,              // the currencyId of that the contract will $settle in, only set if `contract` is true
            'contractSize' => $contractSize,          // the size of one contract, only used if `contract` is true
            'linear' => $ctType === 'linear',      // the contract is a linear contract (is_array($quote currency) && array_key_exists(settled, $quote currency))
            'inverse' => $ctType === 'inverse',               // the contract is an inverse contract (is_array($base currency) && array_key_exists(settled, $base currency))
            'expiry' => null,                // the unix expiry timestamp in milliseconds, null for everything except $market['type'] `future`
            'expiryDatetime' => null,        // The datetime contract will in iso8601 format
            'strike' => null,                // price at which a put or call option can be exercised
            'optionType' => null,            // call or put string, call option represents an option with the right to buy and put an option with the right to sell
            'taker' => null,                 // taker fee rate, 0.002 = 0.2%
            'maker' => null,                 // maker fee rate, 0.0016 = 0.16%
            'percentage' => null,            // whether the taker and maker fee rate is a multiplier or a fixed flat amount
            'tierBased' => null,             // whether the fee depends on your trading tier (your trading volume)
            'feeSide' => null,               // string literal can be 'get', 'give', 'base', 'quote', 'other'
            'precision' => array(                      // number of decimal digits "after the dot"
                'price' => $pricePrecision,            // integer or float for tick_size roundingMode, might be missing if not supplied by the exchange
                'amount' => $amountPrecision,          // integer, might be missing if not supplied by the exchange
                'cost' => null,                  // integer, very few exchanges actually have it
            ),
            'limits' => array(                         // value limits when placing orders on this $market
                'amount' => array(
                    'min' => $minSz,    // order amount should be > min
                    'max' => null,                   // order amount should be < max
                ),
                'price' => array(          // same min/max limits for the price of the order
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(           // same limits for order cost = price * amount
                    'min' => null,
                    'max' => null,
                ),
                'leverage' => array(           // same limits for order cost = price * amount
                    'min' => null,
                    'max' => $maxLever,
                ),
            ),
            'created' => $created,
        );
    }

    public function parse_status(string $state): string {
        if ($state === 'live' || $state === 'partially_filled') {
            return 'open';
        } elseif ($state === 'filled') {
            return 'closed';
        } elseif ($state === 'canceled') {
            return 'canceled';
        } else {
            return null;
        }
    }

    public function parse_order(array $order, ?array $market = null): array {
        $timestamp = $this->safe_number($order, 'cTime');
        $lastTradeTimestamp = $this->safe_number($order, 'fillTime');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $this->safe_string($order, 'ordId'),
            'symbol' => $this->safe_string_upper($order, 'instId'),
            'clientOrderId' => $this->safe_string($order, 'clOrdId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'status' => $this->parse_status($this->safe_string($order, 'state')),
            'timeInForce' => null,                                              // 'GTC', 'IOC', 'FOK', 'PO'
            'side' => $this->safe_string($order, 'side'),
            'type' => $this->safe_string($order, 'ordType'),                         // 'market', 'limit'
            'price' => $this->safe_number($order, 'px'),                             // float price in quote currency (may be empty for $market orders)
            'average' => $this->safe_number($order, 'avgPx'),                        // float average filling price
            'amount' => $this->safe_number($order, 'sz'),                            // ordered amount of base currency
            'filled' => $this->safe_number($order, 'accFillSz'),                     // filled amount of base currency
            'remaining' => null,                                                 // remaining amount to fill
            'cost' => null,                                                      // 'filled' * 'price' (filling price used where available)
            'fee' => array(
                'currency' => $this->safe_string($order, 'feeCcy'),
                'cost' => $this->safe_number($order, 'fee'),
            ),
            // stopPrice? => number;
            // triggerPrice? => number;
            // 'takeProfitPrice' => $this->safe_number($order, 'tpOrdPx'),
            // 'stopLossPrice' => $this->safe_number($order, 'slOrdPx'),
            // reduceOnly => Bool;
            'postOnly' => $this->safe_string($order, 'ordType') === 'post_only',
            'trades' => null,
        ));
    }

    public function market_type_to_inst_type(string $type): string {
        return strtoupper($type);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $version = $this->safe_value($api, 0);
        $accessibility = $this->safe_value($api, 1);
        $query = $this->urlencode($params);
        $timestamp = $this->iso8601($this->milliseconds());
        $url = $this->urls['api'][$version][$accessibility] . '/' . $path;
        $payload = $timestamp . $method . '/' . $path;
        if ($method === 'GET') {
            $url .= '?' . $query;
            $payload .= '?' . $query;
        } elseif ($method === 'POST') {
            $body = $this->json($params);
            $payload .= $body;
        }
        if ($accessibility === 'private') {
            $secret = $this->secret;
            $signature = $this->hmac($this->encode($payload), $this->encode($secret), 'sha256', 'base64');
            $headers = array(
                'Content-Type' => 'application/json',
                'DC-ACCESS-KEY' => $this->apiKey,
                'DC-ACCESS-SIGN' => $signature,
                'DC-ACCESS-TIMESTAMP' => $timestamp,
                'DC-ACCESS-PASSPHRASE' => $this->password,
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors(int $code, string $reason, string $url, string $method, array $headers, string $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        $errorCode = $this->safe_string_2($response, 'sCode', 'code');
        $errorMsg = $this->safe_string_2($response, 'sMsg', 'msg');
        if ($errorCode !== null && $errorCode !== '0') {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $errorMsg, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
