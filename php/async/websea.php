<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\websea as Exchange;
use ccxt\ExchangeError;
use ccxt\BadSymbol;
use ccxt\NotSupported;
use \React\Async;
use \React\Promise\PromiseInterface;

class websea extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'websea',
            'name' => 'Websea',
            'countries' => array( 'SG' ), // Singapore
            'rateLimit' => 1000,
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'createOrders' => false,
                'createPostOnlyOrder' => false,
                'createReduceOnlyOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'fetchAccounts' => false,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => false,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchDepositsWithdrawals' => false,
                'fetchDepositWithdrawFee' => false,
                'fetchDepositWithdrawFees' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchGreeks' => false,
                'fetchIndexOHLCV' => false,
                'fetchLeverage' => false,
                'fetchLeverages' => false,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarginModes' => false,
                'fetchMarketLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMySettlementHistory' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOption' => false,
                'fetchOptionChain' => false,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchPosition' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchSettlementHistory' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTransactionFee' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchVolatilityHistory' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'reduceMargin' => false,
                'sandbox' => false,
                'setLeverage' => true,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
            ),
            'features' => array(
                'default' => array(
                    'sandbox' => false,
                    'createOrder' => array(
                        'marginMode' => false,
                        'triggerPrice' => false,
                        'triggerPriceType' => null,
                        'stopLossPrice' => false,
                        'takeProfitPrice' => false,
                        'attachedStopLossTakeProfit' => null,
                        'timeInForce' => array(
                            'GTC' => true,
                            'IOC' => false,
                            'FOK' => false,
                            'PO' => false,
                            'GTD' => false,
                        ),
                        'hedged' => false,
                        'trailing' => false,
                        'leverage' => false,
                        'marketBuyRequiresPrice' => false,
                        'marketBuyByCost' => false,
                        'selfTradePrevention' => false,
                        'iceberg' => false,
                    ),
                    'createOrders' => array(
                        'max' => 5,
                    ),
                    'fetchMyTrades' => array(
                        'marginMode' => false,
                        'daysBack' => 0,
                        'limit' => 0,
                        'untilDays' => 0,
                        'symbolRequired' => true,
                    ),
                    'fetchOrder' => array(
                        'marginMode' => false,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => true,
                    ),
                    'fetchOpenOrders' => array(
                        'marginMode' => false,
                        'limit' => 0,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => true,
                    ),
                    'fetchOrders' => array(
                        'marginMode' => false,
                        'limit' => 0,
                        'daysBack' => 0,
                        'untilDays' => 0,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => true,
                    ),
                    'fetchClosedOrders' => array(
                        'marginMode' => false,
                        'limit' => 0,
                        'daysBack' => 0,
                        'daysBackCanceled' => 0,
                        'untilDays' => 0,
                        'trigger' => false,
                        'trailing' => false,
                        'symbolRequired' => true,
                    ),
                    'fetchOHLCV' => array(
                        'limit' => 0,
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '2h' => '120',
                '4h' => '240',
                '6h' => '360',
                '12h' => '720',
                '1d' => '1d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'version' => 'v1',
            'urls' => array(
                'logo' => 'https://webseaex.github.io/favicon.ico',
                'api' => array(
                    'rest' => 'https://oapi.websea.com',
                ),
                'test' => array(
                    'rest' => 'https://oapi.websea.com',
                ),
                'www' => 'https://www.websea.com',
                'doc' => array(
                    'https://webseaex.github.io/en/',
                ),
                'fees' => 'https://websea.com/fees',
                'referral' => array(
                    'url' => 'https://www.websea.com',
                    'discount' => 0,
                ),
            ),
            'api' => array(
                'openApi' => array(
                    'public' => array(
                        'get' => array(
                            'openApi/market/symbols' => 1, // 交易对列表
                            'openApi/market/currencies' => 1, // 币种列表
                            'openApi/market/trade' => 1, // 市场交易记录
                            'openApi/market/depth' => 1, // 市场深度
                            'openApi/market/orderbook' => 1, // 订单簿
                            'openApi/market/kline' => 1, // K线数据
                            'openApi/market/24kline' => 1, // 24小时K线数据
                            'openApi/market/24kline-list' => 1, // 24小时市场列表
                            'openApi/market/precision' => 1, // 交易对精度
                            'openApi/futures/symbols' => 1, // 期货交易对列表
                            'openApi/futures/trade' => 1, // 期货交易记录
                            'openApi/futures/depth' => 1, // 期货市场深度
                            'openApi/futures/kline' => 1, // 期货K线数据
                        ),
                    ),
                    'private' => array(
                        'post' => array(
                            'openApi/entrust/add' => 1, // 下单
                            'openApi/entrust/cancel' => 1, // 取消订单
                            'openApi/entrust/orderList' => 1, // 当前订单列表
                            'openApi/entrust/orderDetail' => 1, // 订单详情
                            'openApi/entrust/orderTrade' => 1, // 订单成交记录
                            'openApi/entrust/historyList' => 1, // 历史订单列表
                            'openApi/entrust/historyDetail' => 1, // 历史订单详情
                            'openApi/wallet/list' => 1, // 钱包列表
                            'openApi/wallet/detail' => 1, // 钱包详情
                            'openApi/futures/entrust/add' => 1, // 期货下单
                            'openApi/futures/entrust/cancel' => 1, // 期货取消订单
                            'openApi/futures/entrust/orderList' => 1, // 期货当前订单列表
                            'openApi/futures/entrust/orderDetail' => 1, // 期货订单详情
                            'openApi/futures/position/list' => 1, // 期货持仓列表
                            'openApi/futures/position/detail' => 1, // 期货持仓详情
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.002'),
                    'taker' => $this->parse_number('0.002'),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                ),
                'broad' => array(
                ),
            ),
            'commonCurrencies' => array(
                // 常见货币映射
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for websea
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $response = Async\await($this->openApiPublicGetOpenApiMarketSymbols ($params));
            //
            //     {
            //         "errno" => 0,
            //         "errmsg" => "success",
            //         "result" => array(
            //             {
            //                 "id" => 1223,
            //                 "symbol" => "BTC-USDT",
            //                 "base_currency" => "BTC",
            //                 "quote_currency" => "USDT",
            //                 "min_size" => "0.0000001",
            //                 "max_size" => "10000",
            //                 "min_price" => "0.001",
            //                 "max_price" => "1000",
            //                 "maker_fee" => "0.002",
            //                 "taker_fee" => "0.002"
            //             }
            //         )
            //     }
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_markets($result);
        }) ();
    }

    public function parse_market($market): array {
        //
        //     {
        //         "id" => 1223,
        //         "symbol" => "BTC-USDT",
        //         "base_currency" => "BTC",
        //         "quote_currency" => "USDT",
        //         "min_size" => 0.0000001,
        //         "max_size" => 10000,
        //         "min_price" => 0.001,
        //         "max_price" => 1000,
        //         "maker_fee" => 0.002,
        //         "taker_fee" => 0.002
        //     }
        //
        $marketId = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'base_currency');
        $quoteId = $this->safe_string($market, 'quote_currency');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $minAmount = $this->safe_number($market, 'min_size');
        $maxAmount = $this->safe_number($market, 'max_size');
        $minPrice = $this->safe_number($market, 'min_price');
        $maxPrice = $this->safe_number($market, 'max_price');
        // 检测是否为永续合约市场
        $isSwap = mb_strpos($marketId, '-PERP') !== false || mb_strpos($marketId, '-SWAP') !== false;
        $isSpot = !$isSwap;
        // Convert $market ID to unified $symbol format
        $symbol = $isSpot ? ($base . '/' . $quote) : ($base . '/' . $quote . ':' . $quote);
        // Calculate precision from min values - derive tick sizes from the minimum values
        $minSizeString = $this->safe_string($market, 'min_size');
        $minPriceString = $this->safe_string($market, 'min_price');
        // For TICK_SIZE mode, we need to ensure precision values are proper tick sizes
        // Use the minimum values sizes, but ensure they're not problematic integers
        $amountPrecision = $this->parse_number($minSizeString);
        $pricePrecision = $this->parse_number($minPriceString);
        // Ensure precision values are valid tick sizes (not integers like 5.0)
        // Convert problematic integer-like values to proper decimal tick sizes
        if ($amountPrecision !== null && $amountPrecision >= 1 && fmod($amountPrecision, 1) === 0) {
            $amountPrecision = $this->parse_number('0.00000001'); // Default to 8 decimal places
        }
        if ($pricePrecision !== null && $pricePrecision >= 1 && fmod($pricePrecision, 1) === 0) {
            $pricePrecision = $this->parse_number('0.0001'); // Default to 4 decimal places for price
        }
        // If precision values are still null, set safe defaults
        if ($amountPrecision === null) {
            $amountPrecision = $this->parse_number('0.00000001');
        }
        if ($pricePrecision === null) {
            $pricePrecision = $this->parse_number('0.0001');
        }
        return array(
            'id' => $marketId,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $isSwap ? $quote : null, // 永续合约的结算币种
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $isSwap ? $quoteId : null,
            'type' => $isSwap ? 'swap' : 'spot',
            'spot' => $isSpot,
            'margin' => false,
            'swap' => $isSwap,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => $isSwap,
            'linear' => $isSwap ? true : null, // U本位永续合约
            'inverse' => $isSwap ? false : null,
            'contractSize' => $isSwap ? 1 : null, // 永续合约的合约大小
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $amountPrecision,
                'price' => $pricePrecision,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => $minAmount,
                    'max' => $maxAmount,
                ),
                'price' => array(
                    'min' => $minPrice,
                    'max' => $maxPrice,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_currencies($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches all available $currencies on an exchange
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of $currencies
             */
            $response = Async\await($this->openApiPublicGetOpenApiMarketCurrencies ($params));
            //
            //     {
            //         "errno" => 0,
            //         "errmsg" => "success",
            //         "result" => {
            //             "BTC" => array(
            //                 "name" => "Bitcoin",
            //                 "canWithdraw" => true,
            //                 "canDeposit" => true,
            //                 "minWithdraw" => "0.001",
            //                 "maxWithdraw" => "8",
            //                 "makerFee" => "0.0016",
            //                 "takerFee" => "0.0018"
            //             ),
            //             ...
            //         }
            //     }
            //
            $result = $this->safe_value($response, 'result', array());
            $currencies = array();
            $currencyCodes = is_array($result) ? array_keys($result) : array();
            for ($i = 0; $i < count($currencyCodes); $i++) {
                $code = $currencyCodes[$i];
                $currency = $result[$code];
                $parsed = $this->parse_currency($currency, $code);
                $currencies[$code] = $parsed;
            }
            return $currencies;
        }) ();
    }

    public function parse_currency($currency, $code = null) {
        //
        //     {
        //         "name" => "Bitcoin",
        //         "canWithdraw" => true,
        //         "canDeposit" => true,
        //         "minWithdraw" => "0.001",
        //         "maxWithdraw" => "8",
        //         "makerFee" => "0.0016",
        //         "takerFee" => "0.0018"
        //     }
        //
        $currencyCode = $this->safe_currency_code($code);
        $name = $this->safe_string($currency, 'name');
        $canDeposit = $this->safe_bool($currency, 'canDeposit');
        $canWithdraw = $this->safe_bool($currency, 'canWithdraw');
        $active = $canDeposit && $canWithdraw;
        $minWithdraw = $this->safe_number($currency, 'minWithdraw');
        $maxWithdraw = $this->safe_number($currency, 'maxWithdraw');
        // For TICK_SIZE mode, use a proper tick size value
        $precision = $this->parse_number('0.00000001'); // 8 decimal places proper tick size
        return array(
            'id' => $currencyCode,
            'code' => $currencyCode,
            'name' => $name,
            'type' => 'crypto',
            'active' => $active,
            'deposit' => $canDeposit,
            'withdraw' => $canWithdraw,
            'fee' => null,
            'precision' => $precision,
            'limits' => array(
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'deposit' => array(
                    'min' => null,
                    'max' => null,
                ),
                'withdraw' => array(
                    'min' => $minWithdraw,
                    'max' => $maxWithdraw,
                ),
            ),
            'networks' => array(),
            'info' => $currency,
        );
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->openApiPublicGetOpenApiMarketDepth ($this->extend($request, $params)));
            //
            // {
            //     "errno" => 0,
            //     "errmsg" => "success",
            //     "result" => {
            //         "buyType" => 1,
            //         "sellType" => 1,
            //         "ts" => 1760939021875,
            //         "symbol" => "BTC-USDT",
            //         "asks" => [["110725.6","0.2525"], ...],
            //         "bids" => [["110725.5","1.9671"], ...]
            //     }
            // }
            //
            $result = $this->safe_value($response, 'result', array());
            $timestamp = $this->safe_integer($result, 'ts');
            // 处理订单簿数据，确保价格严格排序
            $rawBids = $this->safe_value($result, 'bids', array());
            $rawAsks = $this->safe_value($result, 'asks', array());
            // 聚合相同价格的订单
            $aggregatedBids = $this->aggregate_order_book_side($rawBids);
            $aggregatedAsks = $this->aggregate_order_book_side($rawAsks);
            // 创建新的订单簿对象，parseOrderBook会自动处理排序
            $orderBook = array(
                'bids' => $aggregatedBids,
                'asks' => $aggregatedAsks,
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'nonce' => null,
            );
            return $this->parse_order_book($orderBook, $market['symbol'], $timestamp, 'bids', 'asks');
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->openApiPublicGetOpenApiMarket24kline ($this->extend($request, $params)));
            $result = $this->safe_value($response, 'result', array());
            if (gettype($result) === 'array' && array_keys($result) === array_keys(array_keys($result))) {
                for ($i = 0; $i < count($result); $i++) {
                    $tickerData = $result[$i];
                    $marketId = $this->safe_string($tickerData, 'symbol');
                    if ($marketId === $market['id']) {
                        return $this->parse_ticker($tickerData, $market);
                    }
                }
                throw new BadSymbol($this->id . ' fetchTicker() $symbol ' . $symbol . ' not found');
            } else {
                // If $result is not an array, it might be a single ticker object
                return $this->parse_ticker($result, $market);
            }
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @param {string[]} [$symbols] unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->openApiPublicGetOpenApiMarket24kline ($params));
            $result = $this->safe_value($response, 'result', array());
            $tickers = array();
            for ($i = 0; $i < count($result); $i++) {
                $ticker = $this->parse_ticker($result[$i]);
                $tickers[] = $ticker;
            }
            return $this->filter_by_array($tickers, 'symbol', $symbols);
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // Websea API响应格式:
        // {
        //     "symbol" => "BTC-USDT",
        //     "data" => array(
        //         "id" => 1760938769,
        //         "amount" => "1289.933562236625251263",
        //         "count" => 48117,
        //         "open" => "106889.1",
        //         "close" => "110752.1",
        //         "low" => "106110.3",
        //         "high" => "110812.8",
        //         "vol" => "139704901.8914099999997562741"
        //     ),
        //     "ask" => "110752.3",
        //     "bid" => "110752.0"
        // }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $data = $this->safe_value($ticker, 'data', array());
        $last = $this->safe_number($data, 'close');
        $open = $this->safe_number($data, 'open');
        $change = ($last !== null && $open !== null) ? $last - $open : null;
        $percentage = ($change !== null && $open !== null && $open !== 0) ? ($change / $open) * 100 : null;
        $baseVolume = $this->safe_number($data, 'amount');
        $quoteVolume = $this->safe_number($data, 'vol');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $this->safe_number($data, 'high'),
            'low' => $this->safe_number($data, 'low'),
            'bid' => $this->safe_number($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_number($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'period' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($since !== null) {
                $request['since'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->openApiPublicGetOpenApiMarketKline ($this->extend($request, $params)));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            $ohlcvs = $this->safe_value($result, 'data', array());
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        // 需要根据实际API响应结构调整
        //
        return array(
            $this->safe_integer($ohlcv, 0), // timestamp
            $this->safe_number($ohlcv, 1), // open
            $this->safe_number($ohlcv, 2), // high
            $this->safe_number($ohlcv, 3), // low
            $this->safe_number($ohlcv, 4), // close
            $this->safe_number($ohlcv, 5), // volume
        );
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent $trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of $trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $request['since'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->openApiPublicGetOpenApiMarketTrade ($this->extend($request, $params)));
            //
            // {
            //     "errno" => 0,
            //     "errmsg" => "success",
            //     "result" => {
            //         "symbol" => "BTC-USDT",
            //         "ts" => 1760939128378,
            //         "data" => array(
            //             {
            //                 "id" => 1760939127130444,
            //                 "amount" => "0.0003",
            //                 "price" => "110798.6",
            //                 "vol" => "33.23958",
            //                 "direction" => "buy",
            //                 "ts" => 1760939127
            //             }
            //         )
            //     }
            // }
            //
            $result = $this->safe_value($response, 'result', array());
            $trades = $this->safe_value($result, 'data', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // {
        //     "id" => 1760939127130444,
        //     "amount" => "0.0003",
        //     "price" => "110798.6",
        //     "vol" => "33.23958",
        //     "direction" => "buy",
        //     "ts" => 1760939127
        // }
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $id = $this->safe_string($trade, 'id');
        $timestamp = $this->safe_timestamp($trade, 'ts'); // Convert to milliseconds
        $side = $this->safe_string($trade, 'direction');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $costString = $this->safe_string($trade, 'vol');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'order' => null,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => null,
        ), $market);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->openApiPrivatePostOpenApiWalletList ($params));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_balance($result);
        }) ();
    }

    public function fetch_positions(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch all open $positions
             * @param {string[]} [$symbols] list of unified market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=$position-structure $position structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->openApiPrivatePostOpenApiFuturesPositionList ($params));
            //
            // 需要根据实际API响应结构调整
            //
            $positions = $this->safe_value($response, 'result', array());
            $result = array();
            for ($i = 0; $i < count($positions); $i++) {
                $position = $this->parse_position($positions[$i]);
                $result[] = $position;
            }
            return $this->filter_by_array($result, 'symbol', $symbols);
        }) ();
    }

    public function parse_position($position, $market = null) {
        //
        // 需要根据实际API响应结构调整
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $side = $this->safe_string($position, 'side');
        $amount = $this->safe_number($position, 'amount');
        $entryPrice = $this->safe_number($position, 'entryPrice');
        $markPrice = $this->safe_number($position, 'markPrice');
        $liquidationPrice = $this->safe_number($position, 'liquidationPrice');
        $leverage = $this->safe_number($position, 'leverage');
        $unrealizedPnl = $this->safe_number($position, 'unrealizedPnl');
        $realizedPnl = $this->safe_number($position, 'realizedPnl');
        return array(
            'info' => $position,
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'isolated' => null,
            'leverage' => $leverage,
            'side' => $side,
            'contracts' => $amount,
            'contractSize' => $market['contractSize'],
            'entryPrice' => $entryPrice,
            'markPrice' => $markPrice,
            'notional' => null,
            'liquidationPrice' => $liquidationPrice,
            'collateral' => null,
            'initialMargin' => null,
            'maintenanceMargin' => null,
            'initialMarginPercentage' => null,
            'maintenanceMarginPercentage' => null,
            'marginRatio' => null,
            'hedged' => null,
            'percentage' => null,
            'unrealizedPnl' => $unrealizedPnl,
            'realizedPnl' => $realizedPnl,
        );
    }

    public function fetch_funding_rate(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the current funding rate
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
            }
            // 需要根据实际API实现
            throw new NotSupported($this->id . ' fetchFundingRate() is not yet implemented');
        }) ();
    }

    public function parse_balance($response): array {
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'currency');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'available');
            $account['used'] = $this->safe_string($balance, 'frozen');
            $account['total'] = $this->safe_string($balance, 'total');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function aggregate_order_book_side(array $orderBookSide): array {
        /**
         * aggregates orders with the same $price by summing their amounts
         * @param {any[]} $orderBookSide array of [$price, $amount] tuples
         * @return {any[]} $aggregated $order book side
         */
        $aggregated = array();
        for ($i = 0; $i < count($orderBookSide); $i++) {
            $order = $orderBookSide[$i];
            $price = $this->safe_number($order, 0);
            $amount = $this->safe_number($order, 1);
            if ($price !== null && $amount !== null) {
                $priceKey = (string) $price;
                if (!(is_array($aggregated) && array_key_exists($priceKey, $aggregated))) {
                    $aggregated[$priceKey] = array( $price, $amount );
                } else {
                    $aggregated[$priceKey][1] .= $amount;
                }
            }
        }
        return is_array($aggregated) ? array_values($aggregated) : array();
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fulfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $orderType = ($type === 'limit') ? $side . '-limit' : $side . '-market';
            $request = array(
                'symbol' => $market['id'],
                'type' => $orderType,
                'amount' => $this->amount_to_precision($symbol, $amount),
            );
            if ($type === 'limit') {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $response = Async\await($this->openApiPrivatePostOpenApiEntrustAdd ($this->extend($request, $params)));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_order($result, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $response = Async\await($this->openApiPrivatePostOpenApiEntrustCancel ($this->extend($request, $params)));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_order($result);
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $response = Async\await($this->openApiPrivatePostOpenApiEntrustOrderDetail ($this->extend($request, $params)));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_order($result);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of  open orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['since'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->openApiPrivatePostOpenApiEntrustOrderList ($this->extend($request, $params)));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_orders($result, null, $since, $limit);
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed orders made by the user
             * @param {string} $symbol unified $market $symbol of the $market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            if ($since !== null) {
                $request['since'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->openApiPrivatePostOpenApiEntrustHistoryList ($this->extend($request, $params)));
            //
            // 需要根据实际API响应结构调整
            //
            $result = $this->safe_value($response, 'result', array());
            return $this->parse_orders($result, null, $since, $limit);
        }) ();
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // 需要根据实际API响应结构调整
        //
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $id = $this->safe_string($order, 'order_id');
        $timestamp = $this->safe_integer($order, 'create_time');
        $status = $this->safe_string($order, 'status');
        $side = $this->safe_string($order, 'side');
        $type = $this->safe_string($order, 'type');
        $price = $this->safe_number($order, 'price');
        $amount = $this->safe_number($order, 'amount');
        $filled = $this->safe_number($order, 'filled');
        $remaining = $this->safe_number($order, 'remaining');
        $cost = $this->safe_number($order, 'cost');
        $fee = null; // 需要根据实际API调整
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'triggerPrice' => null,
            'amount' => $amount,
            'cost' => $cost,
            'average' => null,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['rest'];
        $url .= '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($api === 'private') {
            $this->check_required_credentials();
            $nonce = (string) $this->milliseconds() . '_' . $this->uuid();
            $auth = array(
                $this->apiKey,
                $this->secret,
                $nonce,
            );
            $keys = is_array($query) ? array_keys($query) : array();
            for ($i = 0; $i < count($keys); $i++) {
                $key = $keys[$i];
                $value = (string) $query[$key];
                $auth[] = $key . '=' . $value;
            }
            $auth->sort ();
            $message = implode('', $auth);
            $signature = base64_encode($this->hash($this->encode($message), 'sha1', 'hex'));
            $headers = array(
                'Nonce' => $nonce,
                'Token' => $this->apiKey,
                'Signature' => $signature,
            );
            if ($method === 'GET') {
                if ($query) {
                    $url .= '?' . $this->urlencode($query);
                }
            } else {
                $body = $this->urlencode($query);
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors(int $code, string $reason, string $url, string $method, array $headers, string $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        $errorCode = $this->safe_string($response, 'errno');
        if ($errorCode !== null && $errorCode !== '0') {
            $errorMessage = $this->safe_string($response, 'errmsg', 'Unknown error');
            if (mb_strpos($errorMessage, 'symbol error') !== false || mb_strpos($errorMessage, 'base symbol error') !== false) {
                throw new BadSymbol($this->id . ' ' . $errorMessage);
            }
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $errorMessage);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $errorMessage, $errorMessage);
            throw new ExchangeError($this->id . ' ' . $errorMessage);
        }
        return null;
    }
}
