<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\bingx as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\BadRequest;
use ccxt\BadSymbol;
use ccxt\NotSupported;
use ccxt\Precise;
use React\Async;
use React\Promise;
use React\Promise\PromiseInterface;

class bingx extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bingx',
            'name' => 'BingX',
            'countries' => array( 'US' ), // North America, Canada, the EU, Hong Kong and Taiwan
            // cheapest is 60 requests a minute = 1 requests per second on average => ( 1000ms / 1) = 1000 ms between requests on average
            'rateLimit' => 1000,
            'version' => 'v1',
            'certified' => true,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'closeAllPositions' => true,
                'closePosition' => true,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => true,
                'createMarketSellOrderWithCost' => true,
                'createOrder' => true,
                'createOrders' => true,
                'createOrderWithTakeProfitAndStopLoss' => true,
                'createStopLossOrder' => true,
                'createTakeProfitOrder' => true,
                'createTrailingAmountOrder' => true,
                'createTrailingPercentOrder' => true,
                'createTriggerOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchLeverage' => true,
                'fetchLiquidations' => false,
                'fetchMarkets' => true,
                'fetchMyLiquidations' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPositions' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTransfers' => true,
                'fetchWithdrawals' => true,
                'setLeverage' => true,
                'setMargin' => true,
                'setMarginMode' => true,
                'transfer' => true,
            ),
            'hostname' => 'bingx.com',
            'urls' => array(
                'logo' => 'https://github-production-user-asset-6210df.s3.amazonaws.com/1294454/253675376-6983b72e-4999-4549-b177-33b374c195e3.jpg',
                'api' => array(
                    'spot' => 'https://open-api.{hostname}/openApi',
                    'swap' => 'https://open-api.{hostname}/openApi',
                    'contract' => 'https://open-api.{hostname}/openApi',
                    'wallets' => 'https://open-api.{hostname}/openApi',
                    'user' => 'https://open-api.{hostname}/openApi',
                    'subAccount' => 'https://open-api.{hostname}/openApi',
                    'account' => 'https://open-api.{hostname}/openApi',
                    'copyTrading' => 'https://open-api.{hostname}/openApi',
                ),
                'test' => array(
                    'swap' => 'https://open-api-vst.{hostname}/openApi', // only swap is really "test" but since the API keys are the same, we want to keep all the functionalities when the user enables the sandboxmode
                ),
                'www' => 'https://bingx.com/',
                'doc' => 'https://bingx-api.github.io/docs/',
                'referral' => 'https://bingx.com/invite/OHETOM',
            ),
            'fees' => array(
                'tierBased' => true,
                'spot' => array(
                    'feeSide' => 'get',
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
                'swap' => array(
                    'feeSide' => 'quote',
                    'maker' => $this->parse_number('0.0002'),
                    'taker' => $this->parse_number('0.0005'),
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'spot' => array(
                    'v1' => array(
                        'public' => array(
                            'get' => array(
                                'common/symbols' => 3,
                                'market/trades' => 3,
                                'market/depth' => 3,
                                'market/kline' => 3,
                                'ticker/24hr' => 1,
                            ),
                        ),
                        'private' => array(
                            'get' => array(
                                'trade/query' => 3,
                                'trade/openOrders' => 3,
                                'trade/historyOrders' => 3,
                                'trade/myTrades' => 3,
                                'user/commissionRate' => 3,
                                'account/balance' => 3,
                            ),
                            'post' => array(
                                'trade/order' => 3,
                                'trade/cancel' => 3,
                                'trade/batchOrders' => 3,
                                'trade/cancelOrders' => 3,
                                'trade/cancelOpenOrders' => 3,
                            ),
                        ),
                    ),
                    'v3' => array(
                        'private' => array(
                            'get' => array(
                                'get/asset/transfer' => 3,
                                'asset/transfer' => 3,
                                'capital/deposit/hisrec' => 3,
                                'capital/withdraw/history' => 3,
                            ),
                            'post' => array(
                                'post/asset/transfer' => 3,
                            ),
                        ),
                    ),
                ),
                'swap' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'positionSide/dual' => 1,
                            ),
                            'post' => array(
                                'positionSide/dual' => 1,
                            ),
                        ),
                    ),
                    'v2' => array(
                        'public' => array(
                            'get' => array(
                                'server/time' => 3,
                                'quote/contracts' => 1,
                                'quote/price' => 1,
                                'quote/depth' => 1,
                                'quote/trades' => 1,
                                'quote/premiumIndex' => 1,
                                'quote/fundingRate' => 1,
                                'quote/klines' => 1,
                                'quote/openInterest' => 1,
                                'quote/ticker' => 1,
                                'quote/bookTicker' => 1,
                            ),
                        ),
                        'private' => array(
                            'get' => array(
                                'user/balance' => 3,
                                'user/positions' => 3,
                                'user/income' => 3,
                                'trade/openOrders' => 3,
                                'trade/openOrder' => 3,
                                'trade/order' => 3,
                                'trade/marginType' => 3,
                                'trade/leverage' => 3,
                                'trade/forceOrders' => 3,
                                'trade/allOrders' => 3,
                                'trade/allFillOrders' => 3,
                                'user/income/export' => 3,
                                'user/commissionRate' => 3,
                                'quote/bookTicker' => 3,
                            ),
                            'post' => array(
                                'trade/order' => 3,
                                'trade/batchOrders' => 3,
                                'trade/closeAllPositions' => 3,
                                'trade/marginType' => 3,
                                'trade/leverage' => 3,
                                'trade/positionMargin' => 3,
                                'trade/order/test' => 3,
                            ),
                            'delete' => array(
                                'trade/order' => 3,
                                'trade/batchOrders' => 3,
                                'trade/allOpenOrders' => 3,
                            ),
                        ),
                    ),
                    'v3' => array(
                        'public' => array(
                            'get' => array(
                                'quote/klines' => 1,
                            ),
                        ),
                    ),
                ),
                'contract' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'allPosition' => 3,
                                'allOrders' => 3,
                                'balance' => 3,
                            ),
                        ),
                    ),
                ),
                'wallets' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'capital/config/getall' => 3,
                                'capital/deposit/address' => 1,
                                'capital/innerTransfer/records' => 1,
                                'capital/subAccount/deposit/address' => 1,
                                'capital/deposit/subHisrec' => 1,
                                'capital/subAccount/innerTransfer/records' => 1,
                            ),
                            'post' => array(
                                'capital/withdraw/apply' => 3,
                                'capital/innerTransfer/apply' => 3,
                                'capital/subAccountInnerTransfer/apply' => 3,
                                'capital/deposit/createSubAddress' => 1,
                            ),
                        ),
                    ),
                ),
                'subAccount' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'list' => 3,
                                'assets' => 3,
                                'apiKey/query' => 1,
                            ),
                            'post' => array(
                                'create' => 3,
                                'apiKey/create' => 3,
                                'apiKey/edit' => 3,
                                'apiKey/del' => 3,
                                'updateStatus' => 3,
                            ),
                        ),
                    ),
                ),
                'account' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'uid' => 1,
                            ),
                            'post' => array(
                                'innerTransfer/authorizeSubAccount' => 3,
                            ),
                        ),
                    ),
                ),
                'user' => array(
                    'auth' => array(
                        'private' => array(
                            'post' => array(
                                'userDataStream' => 1,
                            ),
                            'put' => array(
                                'userDataStream' => 1,
                            ),
                        ),
                    ),
                ),
                'copyTrading' => array(
                    'v1' => array(
                        'private' => array(
                            'get' => array(
                                'swap/trace/currentTrack' => 1,
                            ),
                            'post' => array(
                                'swap/trace/closeTrackOrder' => 1,
                                'swap/trace/setTPSL' => 1,
                            ),
                        ),
                    ),
                ),
                'api' => array(
                    'v3' => array(
                        'private' => array(
                            'get' => array(
                                'asset/transfer' => 1,
                                'capital/deposit/hisrec' => 1,
                                'capital/withdraw/history' => 1,
                            ),
                            'post' => array(
                                'post/asset/transfer' => 1,
                            ),
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'precisionMode' => DECIMAL_PLACES,
            'exceptions' => array(
                'exact' => array(
                    '400' => '\\ccxt\\BadRequest',
                    '401' => '\\ccxt\\AuthenticationError',
                    '403' => '\\ccxt\\PermissionDenied',
                    '404' => '\\ccxt\\BadRequest',
                    '429' => '\\ccxt\\DDoSProtection',
                    '418' => '\\ccxt\\PermissionDenied',
                    '500' => '\\ccxt\\ExchangeError',
                    '504' => '\\ccxt\\ExchangeError',
                    '100001' => '\\ccxt\\AuthenticationError',
                    '100412' => '\\ccxt\\AuthenticationError',
                    '100202' => '\\ccxt\\InsufficientFunds',
                    '100204' => '\\ccxt\\BadRequest',
                    '100400' => '\\ccxt\\BadRequest',
                    '100421' => '\\ccxt\\BadSymbol', // array("code":100421,"msg":"This pair is currently restricted from API trading","debugMsg":"")
                    '100440' => '\\ccxt\\ExchangeError',
                    '100500' => '\\ccxt\\ExchangeError',
                    '100503' => '\\ccxt\\ExchangeError',
                    '80001' => '\\ccxt\\BadRequest',
                    '80012' => '\\ccxt\\ExchangeNotAvailable',
                    '80014' => '\\ccxt\\BadRequest',
                    '80016' => '\\ccxt\\OrderNotFound',
                    '80017' => '\\ccxt\\OrderNotFound',
                    '100414' => '\\ccxt\\AccountSuspended', // array("code":100414,"msg":"Code => 100414, Msg => risk control check fail,code(1)","debugMsg":"")
                    '100419' => '\\ccxt\\PermissionDenied', // array("code":100419,"msg":"IP does not match IP whitelist","success":false,"timestamp":1705274099347)
                    '100437' => '\\ccxt\\BadRequest', // array("code":100437,"msg":"The withdrawal amount is lower than the minimum limit, please re-enter.","timestamp":1689258588845)
                    '101204' => '\\ccxt\\InsufficientFunds', // bingx array("code":101204,"msg":"","data":array())
                ),
                'broad' => array(),
            ),
            'commonCurrencies' => array(
            ),
            'options' => array(
                'defaultType' => 'spot',
                'accountsByType' => array(
                    'spot' => 'FUND',
                    'swap' => 'PFUTURES',
                    'future' => 'SFUTURES',
                ),
                'accountsById' => array(
                    'FUND' => 'spot',
                    'PFUTURES' => 'swap',
                    'SFUTURES' => 'future',
                ),
                'recvWindow' => 5 * 1000, // 5 sec
                'broker' => 'CCXT',
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the bingx server
             * @see https://bingx-api.github.io/docs/#/swapV2/base-info.html#Get%20Server%20Time
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the bingx server
             */
            $response = Async\await($this->swapV2PublicGetServerTime ($params));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "serverTime" => 1675319535362
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            return $this->safe_integer($data, 'serverTime');
        }) ();
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches all available currencies on an exchange
             * @see https://bingx-api.github.io/docs/#/common/account-api.html#All%20Coins
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of currencies
             */
            if (!$this->check_required_credentials(false)) {
                return null;
            }
            $isSandbox = $this->safe_value($this->options, 'sandboxMode', false);
            if ($isSandbox) {
                return null;
            }
            $response = Async\await($this->walletsV1PrivateGetCapitalConfigGetall ($params));
            //
            //    {
            //        "code" => 0,
            //        "timestamp" => 1688045966616,
            //        "data" => array(
            //            {
            //              "coin" => "BTC",
            //              "name" => "BTC",
            //              "networkList" => array(
            //                array(
            //                  "name" => "BTC",
            //                  "network" => "BTC",
            //                  "isDefault" => true,
            //                  "minConfirm" => "2",
            //                  "withdrawEnable" => true,
            //                  "withdrawFee" => "0.00035",
            //                  "withdrawMax" => "1.62842",
            //                  "withdrawMin" => "0.0005"
            //                ),
            //                array(
            //                  "name" => "BTC",
            //                  "network" => "BEP20",
            //                  "isDefault" => false,
            //                  "minConfirm" => "15",
            //                  "withdrawEnable" => true,
            //                  "withdrawFee" => "0.00001",
            //                  "withdrawMax" => "1.62734",
            //                  "withdrawMin" => "0.0001"
            //                }
            //              )
            //          ),
            //          ...
            //        ),
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $currencyId = $this->safe_string($entry, 'coin');
                $code = $this->safe_currency_code($currencyId);
                $name = $this->safe_string($entry, 'name');
                $networkList = $this->safe_value($entry, 'networkList');
                $networks = array();
                $fee = null;
                $active = null;
                $withdrawEnabled = null;
                $defaultLimits = array();
                for ($j = 0; $j < count($networkList); $j++) {
                    $rawNetwork = $networkList[$j];
                    $network = $this->safe_string($rawNetwork, 'network');
                    $networkCode = $this->network_id_to_code($network);
                    $isDefault = $this->safe_value($rawNetwork, 'isDefault');
                    $withdrawEnabled = $this->safe_value($rawNetwork, 'withdrawEnable');
                    $limits = array(
                        'amounts' => array( 'min' => $this->safe_number($rawNetwork, 'withdrawMin'), 'max' => $this->safe_number($rawNetwork, 'withdrawMax') ),
                    );
                    if ($isDefault) {
                        $fee = $this->safe_number($rawNetwork, 'withdrawFee');
                        $active = $withdrawEnabled;
                        $defaultLimits = $limits;
                    }
                    $networks[$networkCode] = array(
                        'info' => $rawNetwork,
                        'id' => $network,
                        'network' => $networkCode,
                        'fee' => $fee,
                        'active' => $active,
                        'deposit' => null,
                        'withdraw' => $withdrawEnabled,
                        'precision' => null,
                        'limits' => $limits,
                    );
                }
                $result[$code] = array(
                    'info' => $entry,
                    'code' => $code,
                    'id' => $currencyId,
                    'precision' => null,
                    'name' => $name,
                    'active' => $active,
                    'deposit' => null,
                    'withdraw' => $withdrawEnabled,
                    'networks' => $networks,
                    'fee' => $fee,
                    'limits' => $defaultLimits,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_spot_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->spotV1PublicGetCommonSymbols ($params));
            //
            //    {
            //        "code" => 0,
            //            "msg" => "",
            //            "debugMsg" => "",
            //            "data" => {
            //              "symbols" => array(
            //                  array(
            //                    "symbol" => "GEAR-USDT",
            //                    "minQty" => 735,
            //                    "maxQty" => 2941177,
            //                    "minNotional" => 5,
            //                    "maxNotional" => 20000,
            //                    "status" => 1,
            //                    "tickSize" => 0.000001,
            //                    "stepSize" => 1
            //                  ),
            //                  ...
            //              )
            //         }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            $markets = $this->safe_value($data, 'symbols', array());
            return $this->parse_markets($markets);
        }) ();
    }

    public function fetch_swap_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->swapV2PublicGetQuoteContracts ($params));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => array(
            //            array(
            //              "contractId" => "100",
            //              "symbol" => "BTC-USDT",
            //              "size" => "0.0001",
            //              "quantityPrecision" => 4,
            //              "pricePrecision" => 1,
            //              "feeRate" => 0.0005,
            //              "tradeMinLimit" => 1,
            //              "maxLongLeverage" => 150,
            //              "maxShortLeverage" => 150,
            //              "currency" => "USDT",
            //              "asset" => "BTC",
            //              "status" => 1
            //            ),
            //            ...
            //        )
            //    }
            //
            $markets = $this->safe_value($response, 'data', array());
            return $this->parse_markets($markets);
        }) ();
    }

    public function parse_market($market): array {
        $id = $this->safe_string($market, 'symbol');
        $symbolParts = explode('-', $id);
        $baseId = $symbolParts[0];
        $quoteId = $symbolParts[1];
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $currency = $this->safe_string($market, 'currency');
        $settle = $this->safe_currency_code($currency);
        $pricePrecision = $this->safe_integer($market, 'pricePrecision');
        if ($pricePrecision === null) {
            $pricePrecision = $this->precision_from_string($this->safe_string($market, 'tickSize'));
        }
        $quantityPrecision = $this->safe_integer($market, 'quantityPrecision');
        if ($quantityPrecision === null) {
            $quantityPrecision = $this->precision_from_string($this->safe_string($market, 'stepSize'));
        }
        $type = ($settle !== null) ? 'swap' : 'spot';
        $spot = $type === 'spot';
        $swap = $type === 'swap';
        $symbol = $base . '/' . $quote;
        if ($settle !== null) {
            $symbol .= ':' . $settle;
        }
        $fees = $this->safe_value($this->fees, $type, array());
        $contractSize = $this->safe_number($market, 'size');
        $isActive = $this->safe_string($market, 'status') === '1';
        $isInverse = ($spot) ? null : false;
        $isLinear = ($spot) ? null : $swap;
        return $this->safe_market_structure(array(
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $currency,
            'type' => $type,
            'spot' => $spot,
            'margin' => false,
            'swap' => $swap,
            'future' => false,
            'option' => false,
            'active' => $isActive,
            'contract' => $swap,
            'linear' => $isLinear,
            'inverse' => $isInverse,
            'taker' => $this->safe_number($fees, 'taker'),
            'maker' => $this->safe_number($fees, 'maker'),
            'feeSide' => $this->safe_string($fees, 'feeSide'),
            'contractSize' => $contractSize,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $quantityPrecision,
                'price' => $pricePrecision,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => $this->safe_integer($market, 'maxLongLeverage'),
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'minQty'),
                    'max' => $this->safe_number($market, 'maxQty'),
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => $this->safe_number($market, 'minNotional'),
                    'max' => $this->safe_number($market, 'maxNotional'),
                ),
            ),
            'created' => null,
            'info' => $market,
        ));
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for bingx
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20Symbols
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Contract%20Information
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $requests = array( $this->fetch_swap_markets($params) );
            $isSandbox = $this->safe_value($this->options, 'sandboxMode', false);
            if (!$isSandbox) {
                $requests[] = $this->fetch_spot_markets($params); // sandbox is swap only
            }
            $promises = Async\await(Promise\all($requests));
            $spotMarkets = $this->safe_value($promises, 0, array());
            $swapMarkets = $this->safe_value($promises, 1, array());
            return $this->array_concat($spotMarkets, $swapMarkets);
        }) ();
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#K-Line%20Data
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Candlestick%20chart%20data
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#%20K-Line%20Data
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] timestamp in ms of the latest candle to fetch
             * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $paginate = false;
            list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOHLCV', 'paginate', false);
            if ($paginate) {
                return Async\await($this->fetch_paginated_call_deterministic('fetchOHLCV', $symbol, $since, $limit, $timeframe, $params, 1440));
            }
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $request['interval'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $until = $this->safe_integer_2($params, 'until', 'endTime');
            if ($until !== null) {
                $params = $this->omit($params, array( 'until' ));
                $request['endTime'] = $until;
            }
            $response = null;
            if ($market['spot']) {
                $response = Async\await($this->spotV1PublicGetMarketKline (array_merge($request, $params)));
            } else {
                $response = Async\await($this->swapV3PublicGetQuoteKlines (array_merge($request, $params)));
            }
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => array(
            //          array(
            //            "open" => "19396.8",
            //            "close" => "19394.4",
            //            "high" => "19397.5",
            //            "low" => "19385.7",
            //            "volume" => "110.05",
            //            "time" => 1666583700000
            //          ),
            //          ...
            //        )
            //    }
            //
            $ohlcvs = $this->safe_value($response, 'data', array());
            if (gettype($ohlcvs) !== 'array' || array_keys($ohlcvs) !== array_keys(array_keys($ohlcvs))) {
                $ohlcvs = array( $ohlcvs );
            }
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //    {
        //        "open" => "19394.4",
        //        "close" => "19379.0",
        //        "high" => "19394.4",
        //        "low" => "19368.3",
        //        "volume" => "167.44",
        //        "time" => 1666584000000
        //    }
        // spot
        //    array(
        //        1691402580000,
        //        29093.61,
        //        29093.93,
        //        29087.73,
        //        29093.24,
        //        0.59,
        //        1691402639999,
        //        17221.07
        //    )
        //
        if (gettype($ohlcv) === 'array' && array_keys($ohlcv) === array_keys(array_keys($ohlcv))) {
            return array(
                $this->safe_integer($ohlcv, 0),
                $this->safe_number($ohlcv, 1),
                $this->safe_number($ohlcv, 2),
                $this->safe_number($ohlcv, 3),
                $this->safe_number($ohlcv, 4),
                $this->safe_number($ohlcv, 5),
            );
        }
        return array(
            $this->safe_integer($ohlcv, 'time'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent $trades for a particular $symbol
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20transaction%20records
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#The%20latest%20Trade%20of%20a%20Trading%20Pair
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of $trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = min ($limit, 100); // avoid API exception "limit should less than 100"
            }
            $response = null;
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchTrades', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PublicGetMarketTrades (array_merge($request, $params)));
            } else {
                $response = Async\await($this->swapV2PublicGetQuoteTrades (array_merge($request, $params)));
            }
            //
            // spot
            //
            //    {
            //        "code" => 0,
            //        "data" => array(
            //            {
            //                "id" => 43148253,
            //                "price" => 25714.71,
            //                "qty" => 1.674571,
            //                "time" => 1655085975589,
            //                "buyerMaker" => false
            //            }
            //        )
            //    }
            //
            // swap
            //
            //    {
            //      "code":0,
            //      "msg":"",
            //      "data":array(
            //        array(
            //          "time" => 1672025549368,
            //          "isBuyerMaker" => true,
            //          "price" => "16885.0",
            //          "qty" => "3.3002",
            //          "quoteQty" => "55723.87"
            //        ),
            //        ...
            //      )
            //    }
            //
            $trades = $this->safe_value($response, 'data', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // spot
        // fetchTrades
        //
        //    {
        //        "id" => 43148253,
        //        "price" => 25714.71,
        //        "qty" => 1.674571,
        //        "time" => 1655085975589,
        //        "buyerMaker" => false
        //    }
        //
        // spot
        // fetchMyTrades
        //     {
        //         "symbol" => "LTC-USDT",
        //         "id" => 36237072,
        //         "orderId" => 1674069326895775744,
        //         "price" => "85.891",
        //         "qty" => "0.0582",
        //         "quoteQty" => "4.9988562000000005",
        //         "commission" => -0.00005820000000000001,
        //         "commissionAsset" => "LTC",
        //         "time" => 1687964205000,
        //         "isBuyer" => true,
        //         "isMaker" => false
        //     }
        //
        // swap
        // fetchTrades
        //
        //    {
        //        "time" => 1672025549368,
        //        "isBuyerMaker" => true,
        //        "price" => "16885.0",
        //        "qty" => "3.3002",
        //        "quoteQty" => "55723.87"
        //    }
        //
        // swap
        // fetchMyTrades
        //
        //    {
        //        "volume" => "0.1",
        //        "price" => "106.75",
        //        "amount" => "10.6750",
        //        "commission" => "-0.0053",
        //        "currency" => "USDT",
        //        "orderId" => "1676213270274379776",
        //        "liquidatedPrice" => "0.00",
        //        "liquidatedMarginRatio" => "0.00",
        //        "filledTime" => "2023-07-04T20:56:01.000+0800"
        //    }
        //
        //
        // ws
        //
        // spot
        //
        //    {
        //        "E" => 1690214529432,
        //        "T" => 1690214529386,
        //        "e" => "trade",
        //        "m" => true,
        //        "p" => "29110.19",
        //        "q" => "0.1868",
        //        "s" => "BTC-USDT",
        //        "t" => "57903921"
        //    }
        //
        // swap
        //
        //    {
        //        "q" => "0.0421",
        //        "p" => "29023.5",
        //        "T" => 1690221401344,
        //        "m" => false,
        //        "s" => "BTC-USDT"
        //    }
        //
        $time = $this->safe_integer_n($trade, array( 'time', 'filledTm', 'T' ));
        $datetimeId = $this->safe_string($trade, 'filledTm');
        if ($datetimeId !== null) {
            $time = $this->parse8601($datetimeId);
        }
        if ($time === 0) {
            $time = null;
        }
        $cost = $this->safe_string($trade, 'quoteQty');
        $type = ($cost === null) ? 'spot' : 'swap';
        $currencyId = $this->safe_string_n($trade, array( 'currency', 'N', 'commissionAsset' ));
        $currencyCode = $this->safe_currency_code($currencyId);
        $m = $this->safe_value($trade, 'm');
        $marketId = $this->safe_string($trade, 's');
        $isBuyerMaker = $this->safe_value_2($trade, 'buyerMaker', 'isBuyerMaker');
        $takeOrMaker = null;
        if (($isBuyerMaker !== null) || ($m !== null)) {
            $takeOrMaker = ($isBuyerMaker || $m) ? 'maker' : 'taker';
        }
        $side = $this->safe_string_lower_2($trade, 'side', 'S');
        if ($side === null) {
            if (($isBuyerMaker !== null) || ($m !== null)) {
                $side = ($isBuyerMaker || $m) ? 'sell' : 'buy';
                $takeOrMaker = 'taker';
            }
        }
        $isBuyer = $this->safe_value($trade, 'isBuyer');
        if ($isBuyer !== null) {
            $side = $isBuyer ? 'buy' : 'sell';
        }
        $isMaker = $this->safe_value($trade, 'isMaker');
        if ($isMaker !== null) {
            $takeOrMaker = $isMaker ? 'maker' : 'taker';
        }
        return $this->safe_trade(array(
            'id' => $this->safe_string_n($trade, array( 'id', 't' )),
            'info' => $trade,
            'timestamp' => $time,
            'datetime' => $this->iso8601($time),
            'symbol' => $this->safe_symbol($marketId, $market, '-', $type),
            'order' => $this->safe_string_2($trade, 'orderId', 'i'),
            'type' => $this->safe_string_lower($trade, 'o'),
            'side' => $this->parse_order_side($side),
            'takerOrMaker' => $takeOrMaker,
            'price' => $this->safe_string_2($trade, 'price', 'p'),
            'amount' => $this->safe_string_n($trade, array( 'qty', 'volume', 'amount', 'q' )),
            'cost' => $cost,
            'fee' => array(
                'cost' => $this->parse_number(Precise::string_abs($this->safe_string_2($trade, 'commission', 'n'))),
                'currency' => $currencyCode,
                'rate' => null,
            ),
        ), $market);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#Query%20depth%20information
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Market%20Depth
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchOrderBook', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PublicGetMarketDepth (array_merge($request, $params)));
            } else {
                $response = Async\await($this->swapV2PublicGetQuoteDepth (array_merge($request, $params)));
            }
            //
            // spot
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //           "bids" => array(
            //             array(
            //               "26324.73",
            //               "0.37655"
            //             ),
            //             array(
            //               "26324.71",
            //               "0.31888"
            //             ),
            //         ),
            //         "asks" => array(
            //             array(
            //               "26340.30",
            //               "6.45221"
            //             ),
            //             array(
            //               "26340.15",
            //               "6.73261"
            //             ),
            //         )}
            //     }
            //
            // swap
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //           "T" => 1683914263304,
            //           "bids" => array(
            //             array(
            //               "26300.90000000",
            //               "30408.00000000"
            //             ),
            //             array(
            //               "26300.80000000",
            //               "50906.00000000"
            //             ),
            //         ),
            //         "asks" => array(
            //             array(
            //               "26301.00000000",
            //               "43616.00000000"
            //             ),
            //             array(
            //               "26301.10000000",
            //               "49402.00000000"
            //             ),
            //         )}
            //     }
            //
            $orderbook = $this->safe_value($response, 'data', array());
            $timestamp = $this->safe_integer_2($orderbook, 'T', 'ts');
            return $this->parse_order_book($orderbook, $market['symbol'], $timestamp, 'bids', 'asks', 0, 1);
        }) ();
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the current funding rate
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Current%20Funding%20Rate
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PublicGetQuotePremiumIndex (array_merge($request, $params)));
            //
            //    {
            //        "code":0,
            //        "msg":"",
            //        "data":array(
            //          array(
            //            "symbol" => "BTC-USDT",
            //            "markPrice" => "16884.5",
            //            "indexPrice" => "16886.9",
            //            "lastFundingRate" => "0.0001",
            //            "nextFundingTime" => 1672041600000
            //          ),
            //          ...
            //        )
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_funding_rate($data, $market);
        }) ();
    }

    public function fetch_funding_rates(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch the current funding rate
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Current%20Funding%20Rate
             * @param {string[]} [$symbols] list of unified $market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols, 'swap', true);
            $response = Async\await($this->swapV2PublicGetQuotePremiumIndex (array_merge($params)));
            $data = $this->safe_value($response, 'data', array());
            $filteredResponse = array();
            for ($i = 0; $i < count($data); $i++) {
                $item = $data[$i];
                $marketId = $this->safe_string($item, 'symbol');
                $market = $this->safe_market($marketId, null, null, 'swap');
                if (($symbols === null) || $this->in_array($market['symbol'], $symbols)) {
                    $filteredResponse[] = $this->parse_funding_rate($item, $market);
                }
            }
            return $filteredResponse;
        }) ();
    }

    public function parse_funding_rate($contract, ?array $market = null) {
        //
        //     {
        //         "symbol" => "BTC-USDT",
        //         "markPrice" => "16884.5",
        //         "indexPrice" => "16886.9",
        //         "lastFundingRate" => "0.0001",
        //         "nextFundingTime" => 1672041600000
        //     }
        //
        $marketId = $this->safe_string($contract, 'symbol');
        $nextFundingTimestamp = $this->safe_integer($contract, 'nextFundingTime');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol($marketId, $market, '-', 'swap'),
            'markPrice' => $this->safe_number($contract, 'markPrice'),
            'indexPrice' => $this->safe_number($contract, 'indexPrice'),
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $this->safe_number($contract, 'lastFundingRate'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => null,
            'nextFundingTimestamp' => $nextFundingTimestamp,
            'nextFundingDatetime' => $this->iso8601($nextFundingTimestamp),
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_funding_rate_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches historical funding rate prices
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Funding%20Rate%20History
             * @param {string} $symbol unified $symbol of the $market to fetch the funding rate history for
             * @param {int} [$since] $timestamp in ms of the earliest funding rate to fetch
             * @param {int} [$limit] the maximum amount of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~ to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] $timestamp in ms of the latest funding rate to fetch
             * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $paginate = false;
            list($paginate, $params) = $this->handle_option_and_params($params, 'fetchFundingRateHistory', 'paginate');
            if ($paginate) {
                return Async\await($this->fetch_paginated_call_deterministic('fetchFundingRateHistory', $symbol, $since, $limit, '8h', $params));
            }
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $until = $this->safe_integer_2($params, 'until', 'startTime');
            if ($until !== null) {
                $params = $this->omit($params, array( 'until' ));
                $request['startTime'] = $until;
            }
            $response = Async\await($this->swapV2PublicGetQuoteFundingRate (array_merge($request, $params)));
            //
            //    {
            //        "code":0,
            //        "msg":"",
            //        "data":array(
            //          array(
            //            "symbol" => "BTC-USDT",
            //            "fundingRate" => "0.0001",
            //            "fundingTime" => 1585684800000
            //          ),
            //          ...
            //        )
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $rates = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $marketId = $this->safe_string($entry, 'symbol');
                $symbolInner = $this->safe_symbol($marketId, $market, '-', 'swap');
                $timestamp = $this->safe_integer($entry, 'fundingTime');
                $rates[] = array(
                    'info' => $entry,
                    'symbol' => $symbolInner,
                    'fundingRate' => $this->safe_number($entry, 'fundingRate'),
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                );
            }
            $sorted = $this->sort_by($rates, 'timestamp');
            return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
        }) ();
    }

    public function fetch_open_interest(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * Retrieves the open interest of a currency
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Swap%20Open%20Positions
             * @param {string} $symbol Unified CCXT $market $symbol
             * @param {array} [$params] exchange specific parameters
             * @return {array} an open interest structurearray(@link https://docs.ccxt.com/#/?id=open-interest-structure)
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PublicGetQuoteOpenInterest (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //           "openInterest" => "3289641547.10",
            //           "symbol" => "BTC-USDT",
            //           "time" => 1672026617364
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_open_interest($data, $market);
        }) ();
    }

    public function parse_open_interest($interest, ?array $market = null) {
        //
        //    {
        //        "openInterest" => "3289641547.10",
        //        "symbol" => "BTC-USDT",
        //        "time" => 1672026617364
        //    }
        //
        $timestamp = $this->safe_integer($interest, 'time');
        $id = $this->safe_string($interest, 'symbol');
        $symbol = $this->safe_symbol($id, $market, '-', 'swap');
        $openInterest = $this->safe_number($interest, 'openInterest');
        return $this->safe_open_interest(array(
            'symbol' => $symbol,
            'baseVolume' => null,
            'quoteVolume' => null,  // deprecated
            'openInterestAmount' => null,
            'openInterestValue' => $openInterest,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $interest,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Ticker
             * @see https://bingx-api.github.io/docs/#/spot/market-api.html#24%E5%B0%8F%E6%97%B6%E4%BB%B7%E6%A0%BC%E5%8F%98%E5%8A%A8%E6%83%85%E5%86%B5
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = null;
            if ($market['spot']) {
                $response = Async\await($this->spotV1PublicGetTicker24hr (array_merge($request, $params)));
            } else {
                $response = Async\await($this->swapV2PublicGetQuoteTicker (array_merge($request, $params)));
            }
            $data = $this->safe_value($response, 'data');
            $ticker = $this->safe_value($data, 0, $data);
            return $this->parse_ticker($ticker, $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @see https://bingx-api.github.io/docs/#/swapV2/market-api.html#Get%20Ticker
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
             */
            Async\await($this->load_markets());
            $market = null;
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
                $firstSymbol = $this->safe_string($symbols, 0);
                $market = $this->market($firstSymbol);
            }
            $type = null;
            list($type, $params) = $this->handle_market_type_and_params('fetchTickers', $market, $params);
            $response = null;
            if ($type === 'spot') {
                $response = Async\await($this->spotV1PublicGetTicker24hr ($params));
            } else {
                $response = Async\await($this->swapV2PublicGetQuoteTicker ($params));
            }
            $tickers = $this->safe_value($response, 'data');
            return $this->parse_tickers($tickers, $symbols);
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // spot
        //    {
        //        "symbol" => "BTC-USDT",
        //        "openPrice" => "26032.08",
        //        "highPrice" => "26178.86",
        //        "lowPrice" => "25968.18",
        //        "lastPrice" => "26113.60",
        //        "volume" => "1161.79",
        //        "quoteVolume" => "30288466.44",
        //        "openTime" => "1693081020762",
        //        "closeTime" => "1693167420762",
        //  added 2023-11-10:
        //        "bidPrice" => 16726.0,
        //        "bidQty" => 0.05,
        //        "askPrice" => 16726.0,
        //        "askQty" => 0.05,
        //    }
        // swap
        //
        //    {
        //        "symbol" => "BTC-USDT",
        //        "priceChange" => "52.5",
        //        "priceChangePercent" => "0.31%", // they started to add the percent sign in value
        //        "lastPrice" => "16880.5",
        //        "lastQty" => "2.2238",          // only present in swap!
        //        "highPrice" => "16897.5",
        //        "lowPrice" => "16726.0",
        //        "volume" => "245870.1692",
        //        "quoteVolume" => "4151395117.73",
        //        "openPrice" => "16832.0",
        //        "openTime" => 1672026667803,
        //        "closeTime" => 1672026648425,
        //  added 2023-11-10:
        //        "bidPrice" => 16726.0,
        //        "bidQty" => 0.05,
        //        "askPrice" => 16726.0,
        //        "askQty" => 0.05,
        //    }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $lastQty = $this->safe_string($ticker, 'lastQty');
        // in spot markets, $lastQty is not present
        // it's (bad, but) the only way we can check the tickers origin
        $type = ($lastQty === null) ? 'spot' : 'swap';
        $market = $this->safe_market($marketId, $market, null, $type);
        $symbol = $market['symbol'];
        $open = $this->safe_string($ticker, 'openPrice');
        $high = $this->safe_string($ticker, 'highPrice');
        $low = $this->safe_string($ticker, 'lowPrice');
        $close = $this->safe_string($ticker, 'lastPrice');
        $quoteVolume = $this->safe_string($ticker, 'quoteVolume');
        $baseVolume = $this->safe_string($ticker, 'volume');
        $percentage = $this->safe_string($ticker, 'priceChangePercent');
        if ($percentage !== null) {
            $percentage = str_replace('%', '', $percentage);
        }
        $change = $this->safe_string($ticker, 'priceChange');
        $ts = $this->safe_integer($ticker, 'closeTime');
        $datetime = $this->iso8601($ts);
        $bid = $this->safe_string($ticker, 'bidPrice');
        $bidVolume = $this->safe_string($ticker, 'bidQty');
        $ask = $this->safe_string($ticker, 'askPrice');
        $askVolume = $this->safe_string($ticker, 'askQty');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $ts,
            'datetime' => $datetime,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => $bidVolume,
            'ask' => $ask,
            'askVolume' => $askVolume,
            'vwap' => null,
            'open' => $open,
            'close' => $close,
            'last' => null,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Assets
             * @see https://bingx-api.github.io/docs/#/swapV2/account-api.html#Get%20Perpetual%20Swap%20Account%20Asset%20Information
             * @see https://bingx-api.github.io/docs/#/standard/contract-interface.html#Query%20standard%20contract%20balance
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {boolean} [$params->standard] whether to fetch $standard contract balances
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = null;
            $standard = null;
            list($standard, $params) = $this->handle_option_and_params($params, 'fetchBalance', 'standard', false);
            list($marketType, $marketTypeQuery) = $this->handle_market_type_and_params('fetchBalance', null, $params);
            if ($standard) {
                $response = Async\await($this->contractV1PrivateGetBalance ($marketTypeQuery));
            } elseif ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetAccountBalance ($marketTypeQuery));
            } else {
                $response = Async\await($this->swapV2PrivateGetUserBalance ($marketTypeQuery));
            }
            //
            // spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "ttl" => 1,
            //        "data" => {
            //            "balances" => array(
            //                {
            //                    "asset" => "USDT",
            //                    "free" => "16.73971130673954",
            //                    "locked" => "0"
            //                }
            //            )
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "balance" => {
            //            "asset" => "USDT",
            //            "balance" => "15.6128",
            //            "equity" => "15.6128",
            //            "unrealizedProfit" => "0.0000",
            //            "realisedProfit" => "0.0000",
            //            "availableMargin" => "15.6128",
            //            "usedMargin" => "0.0000",
            //            "freezedMargin" => "0.0000"
            //          }
            //        }
            //    }
            // $standard futures
            //    {
            //        "code":"0",
            //        "timestamp":"1691148990942",
            //        "data":array(
            //           array(
            //              "asset":"VST",
            //              "balance":"100000.00000000000000000000",
            //              "crossWalletBalance":"100000.00000000000000000000",
            //              "crossUnPnl":"0",
            //              "availableBalance":"100000.00000000000000000000",
            //              "maxWithdrawAmount":"100000.00000000000000000000",
            //              "marginAvailable":false,
            //              "updateTime":"1691148990902"
            //           ),
            //           array(
            //              "asset":"USDT",
            //              "balance":"0",
            //              "crossWalletBalance":"0",
            //              "crossUnPnl":"0",
            //              "availableBalance":"0",
            //              "maxWithdrawAmount":"0",
            //              "marginAvailable":false,
            //              "updateTime":"1691148990902"
            //           ),
            //        )
            //     }
            //
            return $this->parse_balance($response);
        }) ();
    }

    public function parse_balance($response): array {
        $data = $this->safe_value($response, 'data');
        $balances = $this->safe_value_2($data, 'balance', 'balances', $data);
        $result = array( 'info' => $response );
        if (gettype($balances) === 'array' && array_keys($balances) === array_keys(array_keys($balances))) {
            for ($i = 0; $i < count($balances); $i++) {
                $balance = $balances[$i];
                $currencyId = $this->safe_string($balance, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string_2($balance, 'free', 'availableBalance');
                $account['used'] = $this->safe_string($balance, 'locked');
                $account['total'] = $this->safe_string($balance, 'balance');
                $result[$code] = $account;
            }
        } else {
            $currencyId = $this->safe_string($balances, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balances, 'availableMargin');
            $account['used'] = $this->safe_string($balances, 'usedMargin');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch all open $positions
             * @see https://bingx-api.github.io/docs/#/swapV2/account-api.html#Perpetual%20Swap%20Positions
             * @see https://bingx-api.github.io/docs/#/standard/contract-interface.html#Query%20standard%20contract%20balance
             * @param {string[]|null} $symbols list of unified market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {boolean} [$params->standard] whether to fetch $standard contract $positions
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $standard = null;
            list($standard, $params) = $this->handle_option_and_params($params, 'fetchPositions', 'standard', false);
            $response = null;
            if ($standard) {
                $response = Async\await($this->contractV1PrivateGetAllPosition ($params));
            } else {
                $response = Async\await($this->swapV2PrivateGetUserPositions ($params));
            }
            //
            //    {
            //        "code" => 0,
            //            "msg" => "",
            //            "data" => array(
            //            {
            //                "symbol" => "BTC-USDT",
            //                "positionId" => "12345678",
            //                "positionSide" => "LONG",
            //                "isolated" => true,
            //                "positionAmt" => "123.33",
            //                "availableAmt" => "128.99",
            //                "unrealizedProfit" => "1.22",
            //                "realisedProfit" => "8.1",
            //                "initialMargin" => "123.33",
            //                "avgPrice" => "2.2",
            //                "leverage" => 10,
            //            }
            //        )
            //    }
            //
            $positions = $this->safe_value($response, 'data', array());
            return $this->parse_positions($positions, $symbols);
        }) ();
    }

    public function parse_position($position, ?array $market = null) {
        //
        //     {
        //         "symbol" => "BTC-USDT",
        //         "positionId" => "12345678",
        //         "positionSide" => "LONG",
        //         "isolated" => true,
        //         "positionAmt" => "123.33",
        //         "availableAmt" => "128.99",
        //         "unrealizedProfit" => "1.22",
        //         "realisedProfit" => "8.1",
        //         "initialMargin" => "123.33",
        //         "avgPrice" => "2.2",
        //         "leverage" => 10,
        //     }
        //
        // standard $position
        //
        //     {
        //         "currentPrice" => "82.91",
        //         "symbol" => "LTC/USDT",
        //         "initialMargin" => "5.00000000000000000000",
        //         "unrealizedProfit" => "-0.26464500",
        //         "leverage" => "20.000000000",
        //         "isolated" => true,
        //         "entryPrice" => "83.13",
        //         "positionSide" => "LONG",
        //         "positionAmt" => "1.20365912",
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol', '');
        $marketId = str_replace('/', '-', $marketId); // standard return different format
        $isolated = $this->safe_value($position, 'isolated');
        $marginMode = null;
        if ($isolated !== null) {
            $marginMode = $isolated ? 'isolated' : 'cross';
        }
        return $this->safe_position(array(
            'info' => $position,
            'id' => $this->safe_string($position, 'positionId'),
            'symbol' => $this->safe_symbol($marketId, $market, '-', 'swap'),
            'notional' => $this->safe_number($position, 'positionAmt'),
            'marginMode' => $marginMode,
            'liquidationPrice' => null,
            'entryPrice' => $this->safe_number_2($position, 'avgPrice', 'entryPrice'),
            'unrealizedPnl' => $this->safe_number($position, 'unrealizedProfit'),
            'realizedPnl' => $this->safe_number($position, 'realisedProfit'),
            'percentage' => null,
            'contracts' => $this->safe_number($position, 'positionAmt'),
            'contractSize' => null,
            'markPrice' => null,
            'lastPrice' => null,
            'side' => $this->safe_string_lower($position, 'positionSide'),
            'hedged' => null,
            'timestamp' => null,
            'datetime' => null,
            'lastUpdateTimestamp' => null,
            'maintenanceMargin' => null,
            'maintenanceMarginPercentage' => null,
            'collateral' => $this->safe_number($position, 'positionAmt'),
            'initialMargin' => $this->safe_number($position, 'initialMargin'),
            'initialMarginPercentage' => null,
            'leverage' => $this->safe_number($position, 'leverage'),
            'marginRatio' => null,
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        ));
    }

    public function create_market_order_with_cost(string $symbol, string $side, $cost, $params = array ()) {
        return Async\async(function () use ($symbol, $side, $cost, $params) {
            /**
             * create a market order by providing the $symbol, $side and $cost
             * @param {string} $symbol unified $symbol of the market to create an order in
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $cost how much you want to trade in units of the quote currency
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            $params['quoteOrderQty'] = $cost;
            return Async\await($this->create_order($symbol, 'market', $side, $cost, null, $params));
        }) ();
    }

    public function create_market_buy_order_with_cost(string $symbol, $cost, $params = array ()) {
        return Async\async(function () use ($symbol, $cost, $params) {
            /**
             * create a market buy order by providing the $symbol and $cost
             * @param {string} $symbol unified $symbol of the market to create an order in
             * @param {float} $cost how much you want to trade in units of the quote currency
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            $params['quoteOrderQty'] = $cost;
            return Async\await($this->create_order($symbol, 'market', 'buy', $cost, null, $params));
        }) ();
    }

    public function create_market_sell_order_with_cost(string $symbol, $cost, $params = array ()) {
        return Async\async(function () use ($symbol, $cost, $params) {
            /**
             * create a market sell order by providing the $symbol and $cost
             * @param {string} $symbol unified $symbol of the market to create an order in
             * @param {float} $cost how much you want to trade in units of the quote currency
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            $params['quoteOrderQty'] = $cost;
            return Async\await($this->create_order($symbol, 'market', 'sell', $cost, null, $params));
        }) ();
    }

    public function create_order_request(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * @ignore
         * helper function to build $request
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much you want to trade in units of the base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} $request to be sent to the exchange
         */
        $market = $this->market($symbol);
        $postOnly = null;
        $marketType = null;
        list($marketType, $params) = $this->handle_market_type_and_params('createOrder', $market, $params);
        $type = strtoupper($type);
        $request = array(
            'symbol' => $market['id'],
            'type' => $type,
            'side' => strtoupper($side),
        );
        $isMarketOrder = $type === 'MARKET';
        $isSpot = $marketType === 'spot';
        $exchangeClientOrderId = $isSpot ? 'newClientOrderId' : 'clientOrderID';
        $clientOrderId = $this->safe_string_2($params, $exchangeClientOrderId, 'clientOrderId');
        if ($clientOrderId !== null) {
            $request[$exchangeClientOrderId] = $clientOrderId;
        }
        $timeInForce = $this->safe_string_upper($params, 'timeInForce');
        if ($timeInForce === 'IOC') {
            $request['timeInForce'] = 'IOC';
        }
        if ($isSpot) {
            list($postOnly, $params) = $this->handle_post_only($isMarketOrder, $timeInForce === 'POC', $params);
            if ($postOnly || ($timeInForce === 'POC')) {
                $request['timeInForce'] = 'POC';
            }
            $cost = $this->safe_number_2($params, 'cost', 'quoteOrderQty');
            $params = $this->omit($params, 'cost');
            if ($cost !== null) {
                $request['quoteOrderQty'] = $this->parse_to_numeric($this->cost_to_precision($symbol, $cost));
            } else {
                if ($market['spot'] && $isMarketOrder && ($price !== null)) {
                    // keep the legacy behavior, to avoid  breaking the old spot-$market-buying code
                    $calculatedCost = Precise::string_mul($this->number_to_string($amount), $this->number_to_string($price));
                    $request['quoteOrderQty'] = $this->parse_to_numeric($calculatedCost);
                } else {
                    $request['quantity'] = $this->parse_to_numeric($this->amount_to_precision($symbol, $amount));
                }
            }
            if (!$isMarketOrder) {
                $request['price'] = $this->parse_to_numeric($this->price_to_precision($symbol, $price));
            }
        } else {
            list($postOnly, $params) = $this->handle_post_only($isMarketOrder, $timeInForce === 'PostOnly', $params);
            if ($postOnly || ($timeInForce === 'PostOnly')) {
                $request['timeInForce'] = 'PostOnly';
            } elseif ($timeInForce === 'GTC') {
                $request['timeInForce'] = 'GTC';
            } elseif ($timeInForce === 'FOK') {
                $request['timeInForce'] = 'FOK';
            }
            $triggerPrice = $this->safe_string_2($params, 'stopPrice', 'triggerPrice');
            $stopLossPrice = $this->safe_string($params, 'stopLossPrice');
            $takeProfitPrice = $this->safe_string($params, 'takeProfitPrice');
            $trailingAmount = $this->safe_string($params, 'trailingAmount');
            $trailingPercent = $this->safe_string_2($params, 'trailingPercent', 'priceRate');
            $isTriggerOrder = $triggerPrice !== null;
            $isStopLossPriceOrder = $stopLossPrice !== null;
            $isTakeProfitPriceOrder = $takeProfitPrice !== null;
            $isTrailingAmountOrder = $trailingAmount !== null;
            $isTrailingPercentOrder = $trailingPercent !== null;
            $isTrailing = $isTrailingAmountOrder || $isTrailingPercentOrder;
            $stopLoss = $this->safe_value($params, 'stopLoss');
            $takeProfit = $this->safe_value($params, 'takeProfit');
            $isStopLoss = $stopLoss !== null;
            $isTakeProfit = $takeProfit !== null;
            if ((($type === 'LIMIT') || ($type === 'TRIGGER_LIMIT') || ($type === 'STOP') || ($type === 'TAKE_PROFIT')) && !$isTrailing) {
                $request['price'] = $this->parse_to_numeric($this->price_to_precision($symbol, $price));
            }
            $reduceOnly = $this->safe_value($params, 'reduceOnly', false);
            if ($isTriggerOrder) {
                $request['stopPrice'] = $this->parse_to_numeric($this->price_to_precision($symbol, $triggerPrice));
                if ($isMarketOrder || ($type === 'TRIGGER_MARKET')) {
                    $request['type'] = 'TRIGGER_MARKET';
                } elseif (($type === 'LIMIT') || ($type === 'TRIGGER_LIMIT')) {
                    $request['type'] = 'TRIGGER_LIMIT';
                }
            } elseif ($isStopLossPriceOrder || $isTakeProfitPriceOrder) {
                // This can be used to set the stop loss and take profit, but the position needs to be opened first
                $reduceOnly = true;
                if ($isStopLossPriceOrder) {
                    $request['stopPrice'] = $this->parse_to_numeric($this->price_to_precision($symbol, $stopLossPrice));
                    if ($isMarketOrder || ($type === 'STOP_MARKET')) {
                        $request['type'] = 'STOP_MARKET';
                    } elseif (($type === 'LIMIT') || ($type === 'STOP')) {
                        $request['type'] = 'STOP';
                    }
                } elseif ($isTakeProfitPriceOrder) {
                    $request['stopPrice'] = $this->parse_to_numeric($this->price_to_precision($symbol, $takeProfitPrice));
                    if ($isMarketOrder || ($type === 'TAKE_PROFIT_MARKET')) {
                        $request['type'] = 'TAKE_PROFIT_MARKET';
                    } elseif (($type === 'LIMIT') || ($type === 'TAKE_PROFIT')) {
                        $request['type'] = 'TAKE_PROFIT';
                    }
                }
            } elseif ($isTrailing) {
                $request['type'] = 'TRAILING_STOP_MARKET';
                if ($isTrailingAmountOrder) {
                    $request['price'] = $this->parse_to_numeric($trailingAmount);
                } elseif ($isTrailingPercentOrder) {
                    $requestTrailingPercent = Precise::string_div($trailingPercent, '100');
                    $request['priceRate'] = $this->parse_to_numeric($requestTrailingPercent);
                }
            }
            if ($isStopLoss || $isTakeProfit) {
                if ($isStopLoss) {
                    $slTriggerPrice = $this->safe_string_2($stopLoss, 'triggerPrice', 'stopPrice', $stopLoss);
                    $slWorkingType = $this->safe_string($stopLoss, 'workingType', 'MARK_PRICE');
                    $slType = $this->safe_string($stopLoss, 'type', 'STOP_MARKET');
                    $slRequest = array(
                        'stopPrice' => $this->parse_to_numeric($this->price_to_precision($symbol, $slTriggerPrice)),
                        'workingType' => $slWorkingType,
                        'type' => $slType,
                    );
                    $slPrice = $this->safe_string($stopLoss, 'price');
                    if ($slPrice !== null) {
                        $slRequest['price'] = $this->parse_to_numeric($this->price_to_precision($symbol, $slPrice));
                    }
                    $slQuantity = $this->safe_string($stopLoss, 'quantity', $amount);
                    $slRequest['quantity'] = $this->parse_to_numeric($this->amount_to_precision($symbol, $slQuantity));
                    $request['stopLoss'] = $this->json($slRequest);
                }
                if ($isTakeProfit) {
                    $tkTriggerPrice = $this->safe_string_2($takeProfit, 'triggerPrice', 'stopPrice', $takeProfit);
                    $tkWorkingType = $this->safe_string($takeProfit, 'workingType', 'MARK_PRICE');
                    $tpType = $this->safe_string($takeProfit, 'type', 'TAKE_PROFIT_MARKET');
                    $tpRequest = array(
                        'stopPrice' => $this->parse_to_numeric($this->price_to_precision($symbol, $tkTriggerPrice)),
                        'workingType' => $tkWorkingType,
                        'type' => $tpType,
                    );
                    $slPrice = $this->safe_string($takeProfit, 'price');
                    if ($slPrice !== null) {
                        $tpRequest['price'] = $this->parse_to_numeric($this->price_to_precision($symbol, $slPrice));
                    }
                    $tkQuantity = $this->safe_string($takeProfit, 'quantity', $amount);
                    $tpRequest['quantity'] = $this->parse_to_numeric($this->amount_to_precision($symbol, $tkQuantity));
                    $request['takeProfit'] = $this->json($tpRequest);
                }
            }
            $positionSide = null;
            if ($reduceOnly) {
                $positionSide = ($side === 'buy') ? 'SHORT' : 'LONG';
            } else {
                $positionSide = ($side === 'buy') ? 'LONG' : 'SHORT';
            }
            $request['positionSide'] = $positionSide;
            $request['quantity'] = $this->parse_to_numeric($this->amount_to_precision($symbol, $amount));
            $params = $this->omit($params, array( 'reduceOnly', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'trailingAmount', 'trailingPercent', 'takeProfit', 'stopLoss', 'clientOrderId' ));
        }
        return array_merge($request, $params);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade $order
             * @see https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Trade%20order
             * @see https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Create%20an%20Order
             * @param {string} $symbol unified $symbol of the $market to create an $order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much you want to trade in units of the base currency
             * @param {float} [$price] the $price at which the $order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] a unique id for the $order
             * @param {bool} [$params->postOnly] true to place a post only $order
             * @param {string} [$params->timeInForce] spot supports 'PO' and 'IOC', swap supports 'PO', 'GTC', 'IOC' and 'FOK'
             * @param {bool} [$params->reduceOnly] *swap only* true or false whether the $order is reduce only
             * @param {float} [$params->triggerPrice] *swap only* triggerPrice at which the attached take profit / stop loss $order will be triggered
             * @param {float} [$params->stopLossPrice] *swap only* stop loss trigger $price
             * @param {float} [$params->takeProfitPrice] *swap only* take profit trigger $price
             * @param {float} [$params->cost] the quote quantity that can be used alternative for the $amount
             * @param {float} [$params->trailingAmount] *swap only* the quote $amount to trail away from the current $market $price
             * @param {float} [$params->trailingPercent] *swap only* the percent to trail away from the current $market $price
             * @param {array} [$params->takeProfit] *takeProfit object in $params* containing the triggerPrice at which the attached take profit $order will be triggered
             * @param {float} [$params->takeProfit.triggerPrice] take profit trigger $price
             * @param {array} [$params->stopLoss] *stopLoss object in $params* containing the triggerPrice at which the attached stop loss $order will be triggered
             * @param {float} [$params->stopLoss.triggerPrice] stop loss trigger $price
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=$order-structure $order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = $this->create_order_request($symbol, $type, $side, $amount, $price, $params);
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->swapV2PrivatePostTradeOrder ($request));
            } else {
                $response = Async\await($this->spotV1PrivatePostTradeOrder ($request));
            }
            //
            // spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "symbol" => "XRP-USDT",
            //            "orderId" => 1514090846268424192,
            //            "transactTime" => 1649822362855,
            //            "price" => "0.5",
            //            "origQty" => "10",
            //            "executedQty" => "0",
            //            "cummulativeQuoteQty" => "0",
            //            "status" => "PENDING",
            //            "type" => "LIMIT",
            //            "side" => "BUY"
            //        }
            //    }
            //
            // swap
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //             "order" => {
            //                 "symbol" => "BTC-USDT",
            //                 "orderId" => 1709036527545438208,
            //                 "side" => "BUY",
            //                 "positionSide" => "LONG",
            //                 "type" => "TRIGGER_LIMIT",
            //                 "clientOrderID" => "",
            //                 "workingType" => ""
            //             }
            //         }
            //     }
            //
            if (gettype($response) === 'string') {
                // broken api engine : $order-ids are too long numbers (i.e. 1742930526912864656)
                // and JSON.parse can not handle them in JS, so we have to use .parse_json            // however, when $order has an attached SL/TP, their value types need extra parsing
                $response = $this->fix_stringified_json_members($response);
                $response = $this->parse_json($response);
            }
            $data = $this->safe_value($response, 'data', array());
            $order = $this->safe_value($data, 'order', $data);
            return $this->parse_order($order, $market);
        }) ();
    }

    public function create_orders(array $orders, $params = array ()) {
        return Async\async(function () use ($orders, $params) {
            /**
             * create a list of trade $orders
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Batch%20Placing%20Orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Bulk%20order
             * @param {Array} $orders list of $orders to create, each object should contain the parameters required by createOrder, namely $symbol, $type, $side, $amount, $price and $params
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $ordersRequests = array();
            $symbol = null;
            for ($i = 0; $i < count($orders); $i++) {
                $rawOrder = $orders[$i];
                $marketId = $this->safe_string($rawOrder, 'symbol');
                if ($symbol === null) {
                    $symbol = $marketId;
                } else {
                    if ($symbol !== $marketId) {
                        throw new BadRequest($this->id . ' createOrders() requires all $orders to have the same symbol');
                    }
                }
                $type = $this->safe_string($rawOrder, 'type');
                $side = $this->safe_string($rawOrder, 'side');
                $amount = $this->safe_number($rawOrder, 'amount');
                $price = $this->safe_number($rawOrder, 'price');
                $orderParams = $this->safe_value($rawOrder, 'params', array());
                $orderRequest = $this->create_order_request($marketId, $type, $side, $amount, $price, $orderParams);
                $ordersRequests[] = $orderRequest;
            }
            $market = $this->market($symbol);
            $request = array();
            $response = null;
            if ($market['swap']) {
                $request['batchOrders'] = $this->json($ordersRequests);
                $response = Async\await($this->swapV2PrivatePostTradeBatchOrders ($request));
            } else {
                $request['data'] = $this->json($ordersRequests);
                $response = Async\await($this->spotV1PrivatePostTradeBatchOrders ($request));
            }
            //
            // spot
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "debugMsg" => "",
            //         "data" => {
            //             "orders" => array(
            //                 array(
            //                     "symbol" => "BTC-USDT",
            //                     "orderId" => 1720661389564968960,
            //                     "transactTime" => 1699072618272,
            //                     "price" => "25000",
            //                     "origQty" => "0.0002",
            //                     "executedQty" => "0",
            //                     "cummulativeQuoteQty" => "0",
            //                     "status" => "PENDING",
            //                     "type" => "LIMIT",
            //                     "side" => "BUY"
            //                 ),
            //             )
            //         }
            //     }
            //
            // swap
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //             "orders" => array(
            //                 array(
            //                     "symbol" => "BTC-USDT",
            //                     "orderId" => 1720657081994006528,
            //                     "side" => "BUY",
            //                     "positionSide" => "LONG",
            //                     "type" => "LIMIT",
            //                     "clientOrderID" => "",
            //                     "workingType" => ""
            //                 ),
            //             )
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $result = $this->safe_value($data, 'orders', array());
            return $this->parse_orders($result, $market);
        }) ();
    }

    public function parse_order_side($side) {
        $sides = array(
            'BUY' => 'buy',
            'SELL' => 'sell',
            'SHORT' => 'sell',
            'LONG' => 'buy',
        );
        return $this->safe_string($sides, $side, $side);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // spot
        // createOrder, createOrders, cancelOrder
        //
        //    {
        //        "symbol" => "XRP-USDT",
        //        "orderId" => 1514090846268424192,
        //        "transactTime" => 1649822362855,
        //        "price" => "0.5",
        //        "origQty" => "10",
        //        "executedQty" => "0",
        //        "cummulativeQuoteQty" => "0",
        //        "status" => "PENDING",
        //        "type" => "LIMIT",
        //        "side" => "BUY"
        //    }
        //
        // fetchOrder
        //
        //    {
        //        "symbol" => "ETH-USDT",
        //        "orderId" => "1660602123001266176",
        //        "price" => "1700",
        //        "origQty" => "0.003",
        //        "executedQty" => "0",
        //        "cummulativeQuoteQty" => "0",
        //        "status" => "PENDING",
        //        "type" => "LIMIT",
        //        "side" => "BUY",
        //        "time" => "1684753373276",
        //        "updateTime" => "1684753373276",
        //        "origQuoteOrderQty" => "0",
        //        "fee" => "0",
        //        "feeAsset" => "ETH"
        //    }
        //
        // fetchOpenOrders, fetchClosedOrders
        //
        //   {
        //       "symbol" => "XRP-USDT",
        //       "orderId" => 1514073325788200960,
        //       "price" => "0.5",
        //       "StopPrice" => "0",
        //       "origQty" => "20",
        //       "executedQty" => "10",
        //       "cummulativeQuoteQty" => "5",
        //       "status" => "PENDING",
        //       "type" => "LIMIT",
        //       "side" => "BUY",
        //       "time" => 1649818185647,
        //       "updateTime" => 1649818185647,
        //       "origQuoteOrderQty" => "0"
        //       "fee" => "-0.01"
        //   }
        //
        //
        // swap
        // createOrder, createOrders
        //
        //    {
        //      "symbol" => "BTC-USDT",
        //      "orderId" => 1590973236294713344,
        //      "side" => "BUY",
        //      "positionSide" => "LONG",
        //      "type" => "LIMIT"
        //    }
        //
        // fetchOrder, fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "symbol" => "BTC-USDT",
        //         "orderId" => 1709036527545438208,
        //         "side" => "BUY",
        //         "positionSide" => "LONG",
        //         "type" => "TRIGGER_LIMIT",
        //         "origQty" => "0.0010",
        //         "price" => "22000.0",
        //         "executedQty" => "0.0000",
        //         "avgPrice" => "0.0",
        //         "cumQuote" => "",
        //         "stopPrice" => "23000.0",
        //         "profit" => "",
        //         "commission" => "",
        //         "status" => "NEW",
        //         "time" => 1696301035187,
        //         "updateTime" => 1696301035187,
        //         "clientOrderId" => "",
        //         "leverage" => "",
        //         "takeProfit" => "",
        //         "stopLoss" => "",
        //         "advanceAttr" => 0,
        //         "positionID" => 0,
        //         "takeProfitEntrustPrice" => 0,
        //         "stopLossEntrustPrice" => 0,
        //         "orderType" => "",
        //         "workingType" => "MARK_PRICE"
        //     }
        // with tp and sl
        //    {
        //        $orderId => 1741440894764281900,
        //        $symbol => 'LTC-USDT',
        //        $positionSide => 'LONG',
        //        $side => 'BUY',
        //        $type => 'MARKET',
        //        $price => 0,
        //        quantity => 1,
        //        stopPrice => 0,
        //        workingType => 'MARK_PRICE',
        //        clientOrderID => '',
        //        timeInForce => 'GTC',
        //        priceRate => 0,
        //        $stopLoss => 'array("stopPrice":50,"workingType":"MARK_PRICE","type":"STOP_MARKET","quantity":1)',
        //        $takeProfit => 'array("stopPrice":150,"workingType":"MARK_PRICE","type":"TAKE_PROFIT_MARKET","quantity":1)',
        //        reduceOnly => false
        //    }
        //
        $positionSide = $this->safe_string_2($order, 'positionSide', 'ps');
        $marketType = ($positionSide === null) ? 'spot' : 'swap';
        $marketId = $this->safe_string_2($order, 'symbol', 's');
        if ($market === null) {
            $market = $this->safe_market($marketId, null, null, $marketType);
        }
        $symbol = $this->safe_symbol($marketId, $market, '-', $marketType);
        $orderId = $this->safe_string_2($order, 'orderId', 'i');
        $side = $this->safe_string_lower_2($order, 'side', 'S');
        $type = $this->safe_string_lower_2($order, 'type', 'o');
        $timestamp = $this->safe_integer_n($order, array( 'time', 'transactTime', 'E' ));
        $lastTradeTimestamp = $this->safe_integer_2($order, 'updateTime', 'T');
        $price = $this->safe_string_2($order, 'price', 'p');
        $average = $this->safe_string_2($order, 'avgPrice', 'ap');
        $amount = $this->safe_string_2($order, 'origQty', 'q');
        $filled = $this->safe_string_2($order, 'executedQty', 'z');
        $statusId = $this->safe_string_2($order, 'status', 'X');
        $feeCurrencyCode = $this->safe_string_2($order, 'feeAsset', 'N');
        $feeCost = $this->safe_string_n($order, array( 'fee', 'commission', 'n' ));
        if (($feeCurrencyCode === null)) {
            if ($market['spot']) {
                if ($side === 'buy') {
                    $feeCurrencyCode = $market['base'];
                } else {
                    $feeCurrencyCode = $market['quote'];
                }
            } else {
                $feeCurrencyCode = $market['quote'];
            }
        }
        $fee = array(
            'currency' => $feeCurrencyCode,
            'cost' => Precise::string_abs($feeCost),
        );
        $clientOrderId = $this->safe_string_n($order, array( 'clientOrderID', 'origClientOrderId', 'c' ));
        $stopLoss = $this->safe_value($order, 'stopLoss');
        $stopLossPrice = null;
        if ($stopLoss !== null) {
            $stopLossPrice = $this->safe_number($stopLoss, 'stopLoss');
        }
        if (($stopLoss !== null) && (!(is_float($stopLoss) || is_int($stopLoss)))) {
            //  $stopLoss => 'array("stopPrice":50,"workingType":"MARK_PRICE","type":"STOP_MARKET","quantity":1)',
            if (gettype($stopLoss) === 'string') {
                $stopLoss = $this->parse_json($stopLoss);
            }
            $stopLossPrice = $this->safe_number($stopLoss, 'stopPrice');
        }
        $takeProfit = $this->safe_value($order, 'takeProfit');
        $takeProfitPrice = null;
        if ($takeProfit !== null) {
            $takeProfitPrice = $this->safe_number($takeProfit, 'takeProfit');
        }
        if (($takeProfit !== null) && (!(is_float($takeProfit) || is_int($takeProfit)))) {
            //  $takeProfit => 'array("stopPrice":150,"workingType":"MARK_PRICE","type":"TAKE_PROFIT_MARKET","quantity":1)',
            if (gettype($takeProfit) === 'string') {
                $takeProfit = $this->parse_json($takeProfit);
            }
            $takeProfitPrice = $this->safe_number($takeProfit, 'stopPrice');
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $orderId,
            'clientOrderId' => $clientOrderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'lastUpdateTimestamp' => $this->safe_integer($order, 'updateTime'),
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $this->parse_order_side($side),
            'price' => $price,
            'stopPrice' => $this->safe_number($order, 'stopPrice'),
            'triggerPrice' => $this->safe_number($order, 'stopPrice'),
            'stopLossPrice' => $stopLossPrice,
            'takeProfitPrice' => $takeProfitPrice,
            'average' => $average,
            'cost' => null,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'status' => $this->parse_order_status($statusId),
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'PENDING' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'CANCELLED' => 'canceled',
            'FAILED' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Cancel%20an%20Order
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20an%20Order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] a unique $id for the order
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $clientOrderId = $this->safe_string_2($params, 'clientOrderId', 'clientOrderID');
            $params = $this->omit($params, array( 'clientOrderId' ));
            if ($clientOrderId !== null) {
                $request['clientOrderID'] = $clientOrderId;
            } else {
                $request['orderId'] = $id;
            }
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('cancelOrder', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivatePostTradeCancel (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateDeleteTradeOrder (array_merge($request, $query)));
            }
            //
            // spot
            //
            //   {
            //       "code" => 0,
            //       "msg" => "",
            //       "data" => {
            //           "symbol" => "XRP-USDT",
            //           "orderId" => 1514090846268424192,
            //           "price" => "0.5",
            //           "origQty" => "10",
            //           "executedQty" => "0",
            //           "cummulativeQuoteQty" => "0",
            //           "status" => "CANCELED",
            //           "type" => "LIMIT",
            //           "side" => "BUY"
            //       }
            //   }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "order" => {
            //            "symbol" => "LINK-USDT",
            //            "orderId" => 1597783850786750464,
            //            "side" => "BUY",
            //            "positionSide" => "LONG",
            //            "type" => "TRIGGER_MARKET",
            //            "origQty" => "5.0",
            //            "price" => "5.0000",
            //            "executedQty" => "0.0",
            //            "avgPrice" => "0.0000",
            //            "cumQuote" => "0",
            //            "stopPrice" => "5.0000",
            //            "profit" => "",
            //            "commission" => "",
            //            "status" => "CANCELLED",
            //            "time" => 1669776330000,
            //            "updateTime" => 1669776330000
            //          }
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            $first = $this->safe_value($data, 'order', $data);
            return $this->parse_order($first, $market);
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders
             * @see https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Cancel%20orders%20by%20symbol
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20All%20Orders
             * @param {string} [$symbol] unified $market $symbol, only orders in the $market of this $symbol are cancelled when $symbol is not null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = null;
            if ($market['spot']) {
                $response = Async\await($this->spotV1PrivatePostTradeCancelOpenOrders (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "msg" => "",
                //         "debugMsg" => "",
                //         "data" => {
                //             "orders" => [array(
                //                 "symbol" => "ADA-USDT",
                //                 "orderId" => 1740659971369992192,
                //                 "transactTime" => 1703840651730,
                //                 "price" => 5,
                //                 "stopPrice" => 0,
                //                 "origQty" => 10,
                //                 "executedQty" => 0,
                //                 "cummulativeQuoteQty" => 0,
                //                 "status" => "CANCELED",
                //                 "type" => "LIMIT",
                //                 "side" => "SELL"
                //             )]
                //         }
                //     }
                //
            } elseif ($market['swap']) {
                $response = Async\await($this->swapV2PrivateDeleteTradeAllOpenOrders (array_merge($request, $params)));
                //
                //    {
                //        "code" => 0,
                //        "msg" => "",
                //        "data" => {
                //          "success" => array(
                //            {
                //              "symbol" => "LINK-USDT",
                //              "orderId" => 1597783835095859200,
                //              "side" => "BUY",
                //              "positionSide" => "LONG",
                //              "type" => "TRIGGER_LIMIT",
                //              "origQty" => "5.0",
                //              "price" => "9.0000",
                //              "executedQty" => "0.0",
                //              "avgPrice" => "0.0000",
                //              "cumQuote" => "0",
                //              "stopPrice" => "9.5000",
                //              "profit" => "",
                //              "commission" => "",
                //              "status" => "NEW",
                //              "time" => 1669776326000,
                //              "updateTime" => 1669776326000
                //            }
                //          ),
                //          "failed" => null
                //        }
                //    }
                //
            } else {
                throw new BadRequest($this->id . ' cancelAllOrders is only supported for spot and swap markets.');
            }
            return $response;
        }) ();
    }

    public function cancel_orders(array $ids, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($ids, $symbol, $params) {
            /**
             * cancel multiple orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Cancel%20a%20Batch%20of%20Orders
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Cancel%20a%20Batch%20of%20Orders
             * @param {string[]} $ids order $ids
             * @param {string} $symbol unified $market $symbol, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string[]} [$params->clientOrderIds] client order $ids
             * @return {array} an list of ~@link https://docs.ccxt.com/#/?$id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $clientOrderIds = $this->safe_value($params, 'clientOrderIds');
            $params = $this->omit($params, 'clientOrderIds');
            $idsToParse = $ids;
            $areClientOrderIds = ($clientOrderIds !== null);
            if ($areClientOrderIds) {
                $idsToParse = $clientOrderIds;
            }
            $parsedIds = array();
            for ($i = 0; $i < count($idsToParse); $i++) {
                $id = $idsToParse[$i];
                $stringId = (string) $id;
                $parsedIds[] = $stringId;
            }
            $response = null;
            if ($market['spot']) {
                $spotReqKey = $areClientOrderIds ? 'clientOrderIDs' : 'orderIds';
                $request[$spotReqKey] = implode(',', $parsedIds);
                $response = Async\await($this->spotV1PrivatePostTradeCancelOrders (array_merge($request, $params)));
            } else {
                if ($areClientOrderIds) {
                    $request['clientOrderIDList'] = $this->json($parsedIds);
                } else {
                    $request['orderIdList'] = $parsedIds;
                }
                $response = Async\await($this->swapV2PrivateDeleteTradeBatchOrders (array_merge($request, $params)));
            }
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "success" => array(
            //            {
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1597783850786750464,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_MARKET",
            //              "origQty" => "5.0",
            //              "price" => "5.5710",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0.0000",
            //              "cumQuote" => "0",
            //              "stopPrice" => "5.0000",
            //              "profit" => "0.0000",
            //              "commission" => "0.000000",
            //              "status" => "CANCELLED",
            //              "time" => 1669776330000,
            //              "updateTime" => 1672370837000
            //            }
            //          ),
            //          "failed" => null
            //        }
            //    }
            //
            return $response;
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20Order
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'orderId' => $id,
            );
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetTradeQuery (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateGetTradeOrder (array_merge($request, $query)));
            }
            //
            // spot
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //             "symbol" => "XRP-USDT",
            //             "orderId" => 1514087361158316032,
            //             "price" => "0.5",
            //             "origQty" => "10",
            //             "executedQty" => "0",
            //             "cummulativeQuoteQty" => "0",
            //             "status" => "CANCELED",
            //             "type" => "LIMIT",
            //             "side" => "BUY",
            //             "time" => 1649821532000,
            //             "updateTime" => 1649821543000,
            //             "origQuoteOrderQty" => "0",
            //             "fee" => "0",
            //             "feeAsset" => "XRP"
            //         }
            //     }
            //
            // swap
            //
            //      {
            //          "code" => 0,
            //          "msg" => "",
            //          "data" => {
            //            "order" => {
            //              "symbol" => "BTC-USDT",
            //              "orderId" => 1597597642269917184,
            //              "side" => "SELL",
            //              "positionSide" => "LONG",
            //              "type" => "TAKE_PROFIT_MARKET",
            //              "origQty" => "1.0000",
            //              "price" => "0.0",
            //              "executedQty" => "0.0000",
            //              "avgPrice" => "0.0",
            //              "cumQuote" => "",
            //              "stopPrice" => "16494.0",
            //              "profit" => "",
            //              "commission" => "",
            //              "status" => "FILLED",
            //              "time" => 1669731935000,
            //              "updateTime" => 1669752524000
            //            }
            //          }
            //      }
            //
            $data = $this->safe_value($response, 'data');
            $first = $this->safe_value($data, 'order', $data);
            return $this->parse_order($first, $market);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Open%20Orders
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20all%20current%20pending%20orders
             * fetch all unfilled currently open $orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open $orders for
             * @param {int} [$limit] the maximum number of open order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $market = null;
            $request = array();
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $response = null;
            list($marketType, $query) = $this->handle_market_type_and_params('fetchOpenOrders', $market, $params);
            if ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetTradeOpenOrders (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateGetTradeOpenOrders (array_merge($request, $query)));
            }
            //
            //  spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "orders" => array(
            //                {
            //                    "symbol" => "XRP-USDT",
            //                    "orderId" => 1514073325788200960,
            //                    "price" => "0.5",
            //                    "origQty" => "20",
            //                    "executedQty" => "0",
            //                    "cummulativeQuoteQty" => "0",
            //                    "status" => "PENDING",
            //                    "type" => "LIMIT",
            //                    "side" => "BUY",
            //                    "time" => 1649818185647,
            //                    "updateTime" => 1649818185647,
            //                    "origQuoteOrderQty" => "0"
            //                }
            //            )
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "orders" => array(
            //            array(
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1585839271162413056,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_MARKET",
            //              "origQty" => "5.0",
            //              "price" => "9",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0",
            //              "cumQuote" => "0",
            //              "stopPrice" => "5",
            //              "profit" => "0.0000",
            //              "commission" => "0.000000",
            //              "status" => "CANCELLED",
            //              "time" => 1667631605000,
            //              "updateTime" => 1667631605000
            //            ),
            //          )
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $orders = $this->safe_value($data, 'orders', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed $orders made by the user
             * @see https://bingx-api.github.io/docs/#/spot/trade-api.html#Query%20Order%20History
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#User's%20Force%20Orders
             * @see https://bingx-api.github.io/docs/#/standard/contract-interface.html#Historical%20order
             * @param {string} [$symbol] unified $market $symbol of the $market $orders were made in
             * @param {int} [$since] the earliest time in ms to fetch $orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] the latest time in ms to fetch $orders for
             * @param {boolean} [$params->standard] whether to fetch $standard contract $orders
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchClosedOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = null;
            $standard = null;
            list($standard, $params) = $this->handle_option_and_params($params, 'fetchClosedOrders', 'standard', false);
            list($marketType, $query) = $this->handle_market_type_and_params('fetchClosedOrders', $market, $params);
            if ($standard) {
                $response = Async\await($this->contractV1PrivateGetAllOrders (array_merge($request, $query)));
            } elseif ($marketType === 'spot') {
                $response = Async\await($this->spotV1PrivateGetTradeHistoryOrders (array_merge($request, $query)));
            } else {
                $response = Async\await($this->swapV2PrivateGetTradeAllOrders (array_merge($request, $query)));
            }
            //
            //  spot
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "orders" => array(
            //                {
            //                    "symbol" => "XRP-USDT",
            //                    "orderId" => 1514073325788200960,
            //                    "price" => "0.5",
            //                    "origQty" => "20",
            //                    "executedQty" => "0",
            //                    "cummulativeQuoteQty" => "0",
            //                    "status" => "PENDING",
            //                    "type" => "LIMIT",
            //                    "side" => "BUY",
            //                    "time" => 1649818185647,
            //                    "updateTime" => 1649818185647,
            //                    "origQuoteOrderQty" => "0"
            //                }
            //            )
            //        }
            //    }
            //
            // swap
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //          "orders" => array(
            //            array(
            //              "symbol" => "LINK-USDT",
            //              "orderId" => 1585839271162413056,
            //              "side" => "BUY",
            //              "positionSide" => "LONG",
            //              "type" => "TRIGGER_MARKET",
            //              "origQty" => "5.0",
            //              "price" => "9",
            //              "executedQty" => "0.0",
            //              "avgPrice" => "0",
            //              "cumQuote" => "0",
            //              "stopPrice" => "5",
            //              "profit" => "0.0000",
            //              "commission" => "0.000000",
            //              "status" => "CANCELLED",
            //              "time" => 1667631605000,
            //              "updateTime" => 1667631605000
            //            ),
            //          )
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $orders = $this->safe_value($data, 'orders', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function transfer(string $code, $amount, $fromAccount, $toAccount, $params = array ()) {
        return Async\async(function () use ($code, $amount, $fromAccount, $toAccount, $params) {
            /**
             * transfer $currency internally between wallets on the same account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#User%20Universal%20Transfer
             * @param {string} $code unified $currency $code
             * @param {float} $amount amount to transfer
             * @param {string} $fromAccount account to transfer from
             * @param {string} $toAccount account to transfer to
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
            $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
            $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
            $request = array(
                'asset' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
                'type' => $fromId . '_' . $toId,
            );
            $response = Async\await($this->spotV3PrivateGetGetAssetTransfer (array_merge($request, $params)));
            //
            //    {
            //        "tranId":13526853623
            //    }
            //
            return array(
                'info' => $response,
                'id' => $this->safe_string($response, 'tranId'),
                'timestamp' => null,
                'datetime' => null,
                'currency' => $code,
                'amount' => $amount,
                'fromAccount' => $fromAccount,
                'toAccount' => $toAccount,
                'status' => null,
            );
        }) ();
    }

    public function fetch_transfers(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch a history of internal transfers made on an account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#Query%20User%20Universal%20Transfer%20History%20(USER_DATA)
             * @param {string} [$code] unified $currency $code of the $currency transferred
             * @param {int} [$since] the earliest time in ms to fetch transfers for
             * @param {int} [$limit] the maximum number of transfers structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structures~
             */
            Async\await($this->load_markets());
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
            $fromAccount = $this->safe_string($params, 'fromAccount');
            $toAccount = $this->safe_string($params, 'toAccount');
            $fromId = $this->safe_string($accountsByType, $fromAccount, $fromAccount);
            $toId = $this->safe_string($accountsByType, $toAccount, $toAccount);
            if ($fromId === null || $toId === null) {
                throw new ExchangeError($this->id . ' $fromAccount & $toAccount parameter are required');
            }
            $request = array(
                'type' => $fromId . '_' . $toId,
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['size'] = $limit;
            }
            $response = Async\await($this->spotV3PrivateGetAssetTransfer (array_merge($request, $params)));
            //
            //     {
            //         "total" => 3,
            //         "rows" => array(
            //             array(
            //                 "asset":"USDT",
            //                 "amount":"-100.00000000000000000000",
            //                 "type":"FUND_SFUTURES",
            //                 "status":"CONFIRMED",
            //                 "tranId":1067594500957016069,
            //                 "timestamp":1658388859000
            //             ),
            //         )
            //     }
            //
            $rows = $this->safe_value($response, 'rows', array());
            return $this->parse_transfers($rows, $currency, $since, $limit);
        }) ();
    }

    public function parse_transfer($transfer, ?array $currency = null) {
        $tranId = $this->safe_string($transfer, 'tranId');
        $timestamp = $this->safe_integer($transfer, 'timestamp');
        $currencyCode = $this->safe_currency_code(null, $currency);
        $status = $this->safe_string($transfer, 'status');
        $accountsById = $this->safe_value($this->options, 'accountsById', array());
        $typeId = $this->safe_string($transfer, 'type');
        $typeIdSplit = explode('_', $typeId);
        $fromId = $this->safe_string($typeIdSplit, 0);
        $toId = $this->safe_string($typeId, 1);
        $fromAccount = $this->safe_string($accountsById, $fromId, $fromId);
        $toAccount = $this->safe_string($accountsById, $toId, $toId);
        return array(
            'info' => $transfer,
            'id' => $tranId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $currencyCode,
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $status,
        );
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * fetch the deposit address for a $currency associated with this account
             * @see https://bingx-api.github.io/docs/#/common/sub-account#Query%20Main%20Account%20Deposit%20Address
             * @param {string} $code unified $currency $code
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $defaultRecvWindow = $this->safe_integer($this->options, 'recvWindow');
            $recvWindow = $this->safe_integer(array($this, 'parse_params'), 'recvWindow', $defaultRecvWindow);
            $request = array(
                'coin' => $currency['id'],
                'offset' => 0,
                'limit' => 1000,
                'recvWindow' => $recvWindow,
            );
            $response = Async\await($this->walletsV1PrivateGetCapitalDepositAddress (array_merge($request, $params)));
            //
            //     {
            //         "code" => "0",
            //         "timestamp" => "1695200226859",
            //         "data" => {
            //           "data" => array(
            //             {
            //               "coinId" => "799",
            //               "coin" => "USDT",
            //               "network" => "BEP20",
            //               "address" => "6a7eda2817462dabb6493277a2cfe0f5c3f2550b",
            //               "tag" => ''
            //             }
            //           ),
            //           "total" => "1"
            //         }
            //     }
            //
            $data = $this->safe_value($this->safe_value($response, 'data'), 'data');
            $parsed = $this->parse_deposit_addresses($data, [ $currency['code'] ], false);
            return $this->index_by($parsed, 'network');
        }) ();
    }

    public function parse_deposit_address($depositAddress, ?array $currency = null) {
        //
        //     {
        //         "coinId" => "799",
        //         "coin" => "USDT",
        //         "network" => "BEP20",
        //         "address" => "6a7eda2817462dabb6493277a2cfe0f5c3f2550b",
        //         "tag" => ''
        //     }
        //
        $address = $this->safe_string($depositAddress, 'address');
        $tag = $this->safe_string($depositAddress, 'tag');
        $currencyId = $this->safe_string($depositAddress, 'coin');
        $currency = $this->safe_currency($currencyId, $currency);
        $code = $currency['code'];
        $network = $this->safe_string($depositAddress, 'network');
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => $network,
            'info' => $depositAddress,
        );
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#Deposit%20History(supporting%20network)
             * @param {string} [$code] unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch deposits for
             * @param {int} [$limit] the maximum number of deposits structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            Async\await($this->load_markets());
            $request = array(
            );
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit; // default 1000
            }
            $response = Async\await($this->spotV3PrivateGetCapitalDepositHisrec (array_merge($request, $params)));
            //
            //    array(
            //        array(
            //            "amount":"0.00999800",
            //            "coin":"PAXG",
            //            "network":"ETH",
            //            "status":1,
            //            "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
            //            "addressTag":"",
            //            "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
            //            "insertTime":1599621997000,
            //            "transferType":0,
            //            "unlockConfirm":"12/12", // confirm times for unlocking
            //            "confirmTimes":"12/12"
            //        ),
            //    )
            //
            return $this->parse_transactions($response, $currency, $since, $limit);
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @see https://bingx-api.github.io/docs/#/spot/account-api.html#Withdraw%20History%20(supporting%20network)
             * @param {string} [$code] unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            Async\await($this->load_markets());
            $request = array(
            );
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit; // default 1000
            }
            $response = Async\await($this->spotV3PrivateGetCapitalWithdrawHistory (array_merge($request, $params)));
            //
            //    array(
            //        array(
            //            "address" => "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
            //            "amount" => "8.91000000",
            //            "applyTime" => "2019-10-12 11:12:02",
            //            "coin" => "USDT",
            //            "id" => "b6ae22b3aa844210a7041aee7589627c",
            //            "withdrawOrderId" => "WITHDRAWtest123",
            //            "network" => "ETH",
            //            "transferType" => 0
            //            "status" => 6,
            //            "transactionFee" => "0.004",
            //            "confirmNo":3,
            //            "info" => "The address is not valid. Please confirm with the recipient",
            //            "txId" => "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
            //        ),
            //    )
            //
            return $this->parse_transactions($response, $currency, $since, $limit);
        }) ();
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        // fetchDeposits
        //
        //    {
        //        "amount":"0.00999800",
        //        "coin":"PAXG",
        //        "network":"ETH",
        //        "status":1,
        //        "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
        //        "addressTag":"",
        //        "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
        //        "insertTime":1599621997000,
        //        "transferType":0,
        //        "unlockConfirm":"12/12", // confirm times for unlocking
        //        "confirmTimes":"12/12"
        //    }
        //
        // fetchWithdrawals
        //
        //    {
        //        "address" => "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
        //        "amount" => "8.91000000",
        //        "applyTime" => "2019-10-12 11:12:02",
        //        "coin" => "USDT",
        //        "id" => "b6ae22b3aa844210a7041aee7589627c",
        //        "withdrawOrderId" => "WITHDRAWtest123",
        //        "network" => "ETH",
        //        "transferType" => 0
        //        "status" => 6,
        //        "transactionFee" => "0.004",
        //        "confirmNo":3,
        //        "info" => "The $address is not valid. Please confirm with the recipient",
        //        "txId" => "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
        //    }
        //
        // withdraw
        //
        //     {
        //         "code":0,
        //         "timestamp":1705274263621,
        //         "data":{
        //             "id":"1264246141278773252"
        //         }
        //     }
        //
        // parse withdraw-$type output first...
        //
        $data = $this->safe_value($transaction, 'data');
        $dataId = ($data === null) ? null : $this->safe_string($data, 'id');
        $id = $this->safe_string($transaction, 'id', $dataId);
        $address = $this->safe_string($transaction, 'address');
        $tag = $this->safe_string($transaction, 'addressTag');
        $timestamp = $this->safe_integer($transaction, 'insertTime');
        $datetime = $this->iso8601($timestamp);
        if ($timestamp === null) {
            $datetime = $this->safe_string($transaction, 'applyTime');
            $timestamp = $this->parse8601($datetime);
        }
        $network = $this->safe_string($transaction, 'network');
        $currencyId = $this->safe_string($transaction, 'coin');
        $code = $this->safe_currency_code($currencyId, $currency);
        if (($code !== null) && ($code !== $network) && mb_strpos($code, $network) !== false) {
            if ($network !== null) {
                $code = str_replace($network, '', $code);
            }
        }
        $rawType = $this->safe_string($transaction, 'transferType');
        $type = ($rawType === '0') ? 'deposit' : 'withdrawal';
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $this->safe_string($transaction, 'txId'),
            'type' => $type,
            'currency' => $code,
            'network' => $this->network_id_to_code($network),
            'amount' => $this->safe_number($transaction, 'amount'),
            'status' => $this->parse_transaction_status($this->safe_string($transaction, 'status')),
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'address' => $address,
            'addressFrom' => null,
            'addressTo' => $address,
            'tag' => $tag,
            'tagFrom' => $tag,
            'tagTo' => null,
            'updated' => null,
            'comment' => $this->safe_string($transaction, 'info'),
            'fee' => array(
                'currency' => $code,
                'cost' => $this->safe_number($transaction, 'transactionFee'),
                'rate' => null,
            ),
            'internal' => null,
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            '0' => 'pending',
            '1' => 'ok',
            '10' => 'pending',
            '20' => 'rejected',
            '30' => 'ok',
            '40' => 'rejected',
            '50' => 'ok',
            '60' => 'pending',
            '70' => 'rejected',
            '2' => 'pending',
            '3' => 'rejected',
            '4' => 'pending',
            '5' => 'rejected',
            '6' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function set_margin_mode(string $marginMode, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($marginMode, $symbol, $params) {
            /**
             * set margin mode to 'cross' or 'isolated'
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Switch%20Margin%20Mode
             * @param {string} $marginMode 'cross' or 'isolated'
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['type'] !== 'swap') {
                throw new BadSymbol($this->id . ' setMarginMode() supports swap contracts only');
            }
            $marginMode = strtoupper($marginMode);
            if ($marginMode === 'CROSS') {
                $marginMode = 'CROSSED';
            }
            if ($marginMode !== 'ISOLATED' && $marginMode !== 'CROSSED') {
                throw new BadRequest($this->id . ' setMarginMode() $marginMode argument should be isolated or cross');
            }
            $request = array(
                'symbol' => $market['id'],
                'marginType' => $marginMode,
            );
            return Async\await($this->swapV2PrivatePostTradeMarginType (array_merge($request, $params)));
        }) ();
    }

    public function set_margin(string $symbol, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $amount, $params) {
            /**
             * Either adds or reduces margin in an isolated position in order to set the margin to a specific value
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Adjust%20isolated%20margin
             * @param {string} $symbol unified $market $symbol of the $market to set margin in
             * @param {float} $amount the $amount to set the margin to
             * @param {array} [$params] parameters specific to the bingx api endpoint
             * @return {array} A ~@link https://docs.ccxt.com/#/?id=add-margin-structure margin structure~
             */
            $type = $this->safe_integer($params, 'type'); // 1 increase margin 2 decrease margin
            if ($type === null) {
                throw new ArgumentsRequired($this->id . ' setMargin() requires a $type parameter either 1 (increase margin) or 2 (decrease margin)');
            }
            if (!$this->in_array($type, array( 1, 2 ))) {
                throw new ArgumentsRequired($this->id . ' setMargin() requires a $type parameter either 1 (increase margin) or 2 (decrease margin)');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'amount' => $this->amount_to_precision($market['symbol'], $amount),
                'type' => $type,
            );
            $response = Async\await($this->swapV2PrivatePostTradePositionMargin (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "amount" => 1,
            //        "type" => 1
            //    }
            //
            return $response;
        }) ();
    }

    public function fetch_leverage(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the set leverage for a $market
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20Leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PrivateGetTradeLeverage (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "longLeverage" => 6,
            //            "shortLeverage" => 6
            //        }
            //    }
            //
            return $response;
        }) ();
    }

    public function set_leverage($leverage, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($leverage, $symbol, $params) {
            /**
             * set the level of $leverage for a $market
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Switch%20Leverage
             * @param {float} $leverage the rate of $leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
            }
            $side = $this->safe_string_upper($params, 'side');
            $this->check_required_argument('setLeverage', $side, 'side', array( 'LONG', 'SHORT' ));
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'side' => $side,
                'leverage' => $leverage,
            );
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "leverage" => 6,
            //            "symbol" => "BTC-USDT"
            //        }
            //    }
            //
            return Async\await($this->swapV2PrivatePostTradeLeverage (array_merge($request, $params)));
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @see https://bingx-api.github.io/docs/#/en-us/spot/trade-api.html#Query%20Order%20History
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#Query%20historical%20transaction%20orders
             * @param {string} [$symbol] unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] timestamp in ms for the ending date filter, default is null
             * @param {string} $params->trandingUnit COIN (directly represent assets such and ETH) or CONT (represents the number of contract sheets)
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $now = $this->milliseconds();
            $response = null;
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $startTimeReq = $market['spot'] ? 'startTime' : 'startTs';
                $request[$startTimeReq] = $since;
            } elseif ($market['swap']) {
                $request['startTs'] = $now - 7776000000; // 90 days
            }
            $until = $this->safe_integer($params, 'until');
            $params = $this->omit($params, 'until');
            if ($until !== null) {
                $endTimeReq = $market['spot'] ? 'endTime' : 'endTs';
                $request[$endTimeReq] = $until;
            } elseif ($market['swap']) {
                $request['endTs'] = $now;
            }
            $fills = null;
            if ($market['spot']) {
                $response = Async\await($this->spotV1PrivateGetTradeMyTrades (array_merge($request, $params)));
                $data = $this->safe_value($response, 'data', array());
                $fills = $this->safe_value($data, 'fills', array());
                //
                //     {
                //         "code" => 0,
                //         "msg" => "",
                //         "debugMsg" => "",
                //         "data" => {
                //             "fills" => array(
                //                 {
                //                     "symbol" => "LTC-USDT",
                //                     "id" => 36237072,
                //                     "orderId" => 1674069326895775744,
                //                     "price" => "85.891",
                //                     "qty" => "0.0582",
                //                     "quoteQty" => "4.9988562000000005",
                //                     "commission" => -0.00005820000000000001,
                //                     "commissionAsset" => "LTC",
                //                     "time" => 1687964205000,
                //                     "isBuyer" => true,
                //                     "isMaker" => false
                //                 }
                //             )
                //         }
                //     }
                //
            } else {
                $tradingUnit = $this->safe_string_upper($params, 'tradingUnit', 'CONT');
                $params = $this->omit($params, 'tradingUnit');
                $request['tradingUnit'] = $tradingUnit;
                $response = Async\await($this->swapV2PrivateGetTradeAllFillOrders (array_merge($request, $params)));
                $data = $this->safe_value($response, 'data', array());
                $fills = $this->safe_value($data, 'fill_orders', array());
                //
                //    {
                //       "code" => "0",
                //       "msg" => '',
                //       "data" => { fill_orders => array(
                //          {
                //              "volume" => "0.1",
                //              "price" => "106.75",
                //              "amount" => "10.6750",
                //              "commission" => "-0.0053",
                //              "currency" => "USDT",
                //              "orderId" => "1676213270274379776",
                //              "liquidatedPrice" => "0.00",
                //              "liquidatedMarginRatio" => "0.00",
                //              "filledTime" => "2023-07-04T20:56:01.000+0800"
                //          }
                //        )
                //      }
                //    }
                //
            }
            return $this->parse_trades($fills, $market, $since, $limit, $params);
        }) ();
    }

    public function parse_deposit_withdraw_fee($fee, ?array $currency = null) {
        //
        //    {
        //        "coin" => "BTC",
        //        "name" => "BTC",
        //        "networkList" => array(
        //          array(
        //            "name" => "BTC",
        //            "network" => "BTC",
        //            "isDefault" => true,
        //            "minConfirm" => "2",
        //            "withdrawEnable" => true,
        //            "withdrawFee" => "0.00035",
        //            "withdrawMax" => "1.62842",
        //            "withdrawMin" => "0.0005"
        //          ),
        //          {
        //            "name" => "BTC",
        //            "network" => "BEP20",
        //            "isDefault" => false,
        //            "minConfirm" => "15",
        //            "withdrawEnable" => true,
        //            "withdrawFee" => "0.00001",
        //            "withdrawMax" => "1.62734",
        //            "withdrawMin" => "0.0001"
        //          }
        //        )
        //    }
        //
        $networkList = $this->safe_value($fee, 'networkList', array());
        $networkListLength = count($networkList);
        $result = array(
            'info' => $fee,
            'withdraw' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'deposit' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'networks' => array(),
        );
        if ($networkListLength !== 0) {
            for ($i = 0; $i < $networkListLength; $i++) {
                $network = $networkList[$i];
                $networkId = $this->safe_string($network, 'network');
                $isDefault = $this->safe_value($network, 'isDefault');
                $currencyCode = $this->safe_string($currency, 'code');
                $networkCode = $this->network_id_to_code($networkId, $currencyCode);
                $result['networks'][$networkCode] = array(
                    'deposit' => array( 'fee' => null, 'percentage' => null ),
                    'withdraw' => array( 'fee' => $this->safe_number($network, 'withdrawFee'), 'percentage' => false ),
                );
                if ($isDefault) {
                    $result['withdraw']['fee'] = $this->safe_number($network, 'withdrawFee');
                    $result['withdraw']['percentage'] = false;
                }
            }
        }
        return $result;
    }

    public function fetch_deposit_withdraw_fees(?array $codes = null, $params = array ()) {
        return Async\async(function () use ($codes, $params) {
            /**
             * fetch deposit and withdraw fees
             * @see https://bingx-api.github.io/docs/#/common/account-api.html#All%20Coins'%20Information
             * @param {string[]|null} $codes list of unified currency $codes
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=fee-structure fee structures~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->walletsV1PrivateGetCapitalConfigGetall ($params));
            $coins = $this->safe_value($response, 'data');
            return $this->parse_deposit_withdraw_fees($coins, $codes, 'coin');
        }) ();
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        return Async\async(function () use ($code, $amount, $address, $tag, $params) {
            /**
             * make a withdrawal
             * @see https://bingx-api.github.io/docs/#/common/account-api.html#Withdraw
             * @param {string} $code unified $currency $code
             * @param {float} $amount the $amount to withdraw
             * @param {string} $address the $address to withdraw to
             * @param {string} [$tag]
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->walletType] 1 fund account, 2 standard account, 3 perpetual account
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $walletType = $this->safe_integer($params, 'walletType');
            if ($walletType === null) {
                $walletType = 1;
            }
            if (!$this->in_array($walletType, array( 1, 2, 3 ))) {
                throw new BadRequest($this->id . ' withdraw() requires either 1 fund account, 2 standard futures account, 3 perpetual account for walletType');
            }
            $request = array(
                'coin' => $currency['id'],
                'address' => $address,
                'amount' => $this->number_to_string($amount),
                'walletType' => $walletType,
            );
            $network = $this->safe_string_upper($params, 'network');
            if ($network !== null) {
                $request['network'] = $this->network_code_to_id($network);
            }
            $params = $this->omit($params, array( 'walletType', 'network' ));
            $response = Async\await($this->walletsV1PrivatePostCapitalWithdrawApply (array_merge($request, $params)));
            $data = $this->safe_value($response, 'data');
            //    {
            //        "code":0,
            //        "timestamp":1689258953651,
            //        "data":{
            //           "id":"1197073063359000577"
            //        }
            //    }
            $this->parse_transaction($data);
        }) ();
    }

    public function parse_params($params) {
        $sortedParams = $this->keysort($params);
        $keys = is_array($sortedParams) ? array_keys($sortedParams) : array();
        for ($i = 0; $i < count($keys); $i++) {
            $key = $keys[$i];
            $value = $sortedParams[$key];
            if (gettype($value) === 'array' && array_keys($value) === array_keys(array_keys($value))) {
                $arrStr = '[';
                for ($j = 0; $j < count($value); $j++) {
                    $arrayElement = $value[$j];
                    if ($j > 0) {
                        $arrStr .= ',';
                    }
                    $arrStr .= (string) $arrayElement;
                }
                $arrStr .= ']';
                $sortedParams[$key] = $arrStr;
            }
        }
        return $sortedParams;
    }

    public function fetch_my_liquidations(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * retrieves the users liquidated positions
             * @see https://bingx-api.github.io/docs/#/swapV2/trade-api.html#User's%20Force%20Orders
             * @param {string} [$symbol] unified CCXT $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch $liquidations for
             * @param {int} [$limit] the maximum number of liquidation structures to retrieve
             * @param {array} [$params] exchange specific parameters for the bingx api endpoint
             * @param {int} [$params->until] timestamp in ms of the latest liquidation
             * @return {array} an array of ~@link https://docs.ccxt.com/#/?id=liquidation-structure liquidation structures~
             */
            Async\await($this->load_markets());
            $request = array(
                'autoCloseType' => 'LIQUIDATION',
            );
            list($request, $params) = $this->handle_until_option('endTime', $request, $params);
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $symbol;
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->swapV2PrivateGetTradeForceOrders (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "msg" => "",
            //         "data" => {
            //             "orders" => array(
            //                 array(
            //                     "time" => "int64",
            //                     "symbol" => "string",
            //                     "side" => "string",
            //                      "type" => "string",
            //                     "positionSide" => "string",
            //                     "cumQuote" => "string",
            //                     "status" => "string",
            //                     "stopPrice" => "string",
            //                     "price" => "string",
            //                     "origQty" => "string",
            //                     "avgPrice" => "string",
            //                     "executedQty" => "string",
            //                     "orderId" => "int64",
            //                     "profit" => "string",
            //                     "commission" => "string",
            //                     "workingType" => "string",
            //                     "updateTime" => "int64"
            //                 ),
            //             )
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $liquidations = $this->safe_value($data, 'orders', array());
            return $this->parse_liquidations($liquidations, $market, $since, $limit);
        }) ();
    }

    public function parse_liquidation($liquidation, ?array $market = null) {
        //
        //     {
        //         "time" => "int64",
        //         "symbol" => "string",
        //         "side" => "string",
        //         "type" => "string",
        //         "positionSide" => "string",
        //         "cumQuote" => "string",
        //         "status" => "string",
        //         "stopPrice" => "string",
        //         "price" => "string",
        //         "origQty" => "string",
        //         "avgPrice" => "string",
        //         "executedQty" => "string",
        //         "orderId" => "int64",
        //         "profit" => "string",
        //         "commission" => "string",
        //         "workingType" => "string",
        //         "updateTime" => "int64"
        //     }
        //
        $marketId = $this->safe_string($liquidation, 'symbol');
        $timestamp = $this->safe_integer($liquidation, 'time');
        $contractsString = $this->safe_string($liquidation, 'executedQty');
        $contractSizeString = $this->safe_string($market, 'contractSize');
        $priceString = $this->safe_string($liquidation, 'avgPrice');
        $baseValueString = Precise::string_mul($contractsString, $contractSizeString);
        $quoteValueString = Precise::string_mul($baseValueString, $priceString);
        return $this->safe_liquidation(array(
            'info' => $liquidation,
            'symbol' => $this->safe_symbol($marketId, $market),
            'contracts' => $this->parse_number($contractsString),
            'contractSize' => $this->parse_number($contractSizeString),
            'price' => $this->parse_number($priceString),
            'baseValue' => $this->parse_number($baseValueString),
            'quoteValue' => $this->parse_number($quoteValueString),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        ));
    }

    public function close_position(string $symbol, ?string $side = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $side, $params) {
            /**
             * closes open positions for a $market
             * @see https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#One-Click%20Close%20All%20Positions
             * @param {string} $symbol Unified CCXT $market $symbol
             * @param {string} [$side] not used by bingx
             * @param {array} [$params] extra parameters specific to the bingx api endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->swapV2PrivatePostTradeCloseAllPositions (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "success" => array(
            //                1727686766700486656,
            //            ),
            //            "failed" => null
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_order($data);
        }) ();
    }

    public function close_all_positions($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * closes open $positions for a market
             * @see https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#One-Click%20Close%20All%20Positions
             * @param {array} [$params] extra parameters specific to the okx api endpoint
             * @param {string} [$params->recvWindow] $request valid time window value
             * @return {array[]} ~@link https://docs.ccxt.com/#/?id=$position-structure A list of $position structures~
             */
            Async\await($this->load_markets());
            $defaultRecvWindow = $this->safe_integer($this->options, 'recvWindow');
            $recvWindow = $this->safe_integer(array($this, 'parse_params'), 'recvWindow', $defaultRecvWindow);
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('closeAllPositions', null, $params);
            if ($marketType === 'margin') {
                throw new BadRequest($this->id . ' closePositions () cannot be used for ' . $marketType . ' markets');
            }
            $request = array(
                'recvWindow' => $recvWindow,
            );
            $response = Async\await($this->swapV2PrivatePostTradeCloseAllPositions (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "msg" => "",
            //        "data" => {
            //            "success" => array(
            //                1727686766700486656,
            //                1727686767048613888
            //            ),
            //            "failed" => null
            //        }
            //    }
            //
            $data = $this->safe_value($response, 'data', array());
            $success = $this->safe_value($data, 'success', array());
            $positions = array();
            for ($i = 0; $i < count($success); $i++) {
                $position = $this->parse_position(array( 'positionId' => $success[$i] ));
                $positions[] = $position;
            }
            return $positions;
        }) ();
    }

    public function set_position_mode($hedged, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($hedged, $symbol, $params) {
            /**
             * set $hedged to true or false for a market
             * @see https://bingx-api.github.io/docs/#/en-us/swapV2/trade-api.html#Set%20Position%20Mode
             * @param {bool} $hedged set to true to use $dualSidePosition
             * @param {string} $symbol not used by bingx setPositionMode ()
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} response from the exchange
             */
            $dualSidePosition = null;
            if ($hedged) {
                $dualSidePosition = 'true';
            } else {
                $dualSidePosition = 'false';
            }
            $request = array(
                'dualSidePosition' => $dualSidePosition,
            );
            //
            //     {
            //         code => '0',
            //         msg => '',
            //         timeStamp => '1703327432734',
            //         data => array( $dualSidePosition => 'false' )
            //     }
            //
            return Async\await($this->swapV1PrivatePostPositionSideDual (array_merge($request, $params)));
        }) ();
    }

    public function sign($path, $section = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $type = $section[0];
        $version = $section[1];
        $access = $section[2];
        $isSandbox = $this->safe_value($this->options, 'sandboxMode', false);
        if ($isSandbox && ($type !== 'swap')) {
            throw new NotSupported($this->id . ' does not have a testnet/sandbox URL for ' . $type . ' endpoints');
        }
        $url = $this->implode_hostname($this->urls['api'][$type]);
        if ($type === 'spot' && $version === 'v3') {
            $url .= '/api';
        } else {
            $url .= '/' . $type;
        }
        $url .= '/' . $version . '/';
        $path = $this->implode_params($path, $params);
        $url .= $path;
        $params = $this->omit($params, $this->extract_params($path));
        $params = $this->keysort($params);
        if ($access === 'public') {
            $params['timestamp'] = $this->nonce();
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        } elseif ($access === 'private') {
            $this->check_required_credentials();
            $params['timestamp'] = $this->nonce();
            $parsedParams = $this->parse_params($params);
            $query = $this->urlencode($parsedParams);
            $signature = $this->hmac($this->encode($this->rawencode($parsedParams)), $this->encode($this->secret), 'sha256');
            if ($params) {
                $query = '?' . $query . '&';
            } else {
                $query .= '?';
            }
            $query .= 'signature=' . $signature;
            $headers = array(
                'X-BX-APIKEY' => $this->apiKey,
                'X-SOURCE-KEY' => $this->safe_string($this->options, 'broker', 'CCXT'),
            );
            $url .= $query;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function set_sandbox_mode($enable) {
        parent::set_sandbox_mode($enable);
        $this->options['sandboxMode'] = $enable;
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // fallback to default error handler
        }
        //
        //    {
        //        "code" => 80014,
        //        "msg" => "Invalid parameters, err:Key => 'GetTickerRequest.Symbol' Error:Field validation for "Symbol" failed on the "len=0|endswith=-USDT" tag",
        //        "data" => {
        //        }
        //    }
        //
        $code = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg');
        if ($code !== null && $code !== '0') {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
        return null;
    }
}
