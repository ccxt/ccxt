<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\luno as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\Precise;
use React\Async;
use React\Promise\PromiseInterface;

class luno extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'luno',
            'name' => 'luno',
            'countries' => array( 'GB', 'SG', 'ZA' ),
            // 300 calls per minute = 5 calls per second = 1000ms / 5 = 200ms between requests
            'rateLimit' => 200,
            'version' => '1',
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchLedger' => true,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPosition' => false,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => false,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
            ),
            'urls' => array(
                'referral' => 'https://www.luno.com/invite/44893A',
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766607-8c1a69d8-5ede-11e7-930c-540b5eb9be24.jpg',
                'api' => array(
                    'public' => 'https://api.luno.com/api',
                    'private' => 'https://api.luno.com/api',
                    'exchange' => 'https://api.luno.com/api/exchange',
                    'exchangePrivate' => 'https://api.luno.com/api/exchange',
                ),
                'www' => 'https://www.luno.com',
                'doc' => array(
                    'https://www.luno.com/en/api',
                    'https://npmjs.org/package/bitx',
                    'https://github.com/bausmeier/node-bitx',
                ),
            ),
            'api' => array(
                'exchange' => array(
                    'get' => array(
                        'markets' => 1,
                    ),
                ),
                'exchangePrivate' => array(
                    'get' => array(
                        'candles' => 1,
                    ),
                ),
                'public' => array(
                    'get' => array(
                        'orderbook' => 1,
                        'orderbook_top' => 1,
                        'ticker' => 1,
                        'tickers' => 1,
                        'trades' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'accounts/{id}/pending' => 1,
                        'accounts/{id}/transactions' => 1,
                        'balance' => 1,
                        'beneficiaries' => 1,
                        'fee_info' => 1,
                        'funding_address' => 1,
                        'listorders' => 1,
                        'listtrades' => 1,
                        'send_fee' => 1,
                        'orders/{id}' => 1,
                        'withdrawals' => 1,
                        'withdrawals/{id}' => 1,
                        'transfers' => 1,
                        // GET /api/exchange/1/move
                        // GET /api/exchange/1/move/list_moves
                        // GET /api/exchange/1/candles
                        // GET /api/exchange/1/transfers
                        // GET /api/exchange/2/listorders
                        // GET /api/exchange/2/orders/{id}
                        // GET /api/exchange/3/order
                    ),
                    'post' => array(
                        'accounts' => 1,
                        'address/validate' => 1,
                        'postorder' => 1,
                        'marketorder' => 1,
                        'stoporder' => 1,
                        'funding_address' => 1,
                        'withdrawals' => 1,
                        'send' => 1,
                        'oauth2/grant' => 1,
                        // POST /api/exchange/1/move
                    ),
                    'put' => array(
                        'accounts/{id}/name' => 1,
                    ),
                    'delete' => array(
                        'withdrawals/{id}' => 1,
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => 60,
                '5m' => 300,
                '15m' => 900,
                '30m' => 1800,
                '1h' => 3600,
                '3h' => 10800,
                '4h' => 14400,
                '1d' => 86400,
                '3d' => 259200,
                '1w' => 604800,
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true, // based on volume from your primary currency (not the same for everyone)
                    'percentage' => true,
                    'taker' => $this->parse_number('0.001'),
                    'maker' => $this->parse_number('0'),
                ),
            ),
            'precisionMode' => TICK_SIZE,
        ));
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for luno
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->exchangeGetMarkets ($params));
            //
            //     {
            //         "markets":array(
            //             array(
            //                 "market_id":"BCHXBT",
            //                 "trading_status":"ACTIVE",
            //                 "base_currency":"BCH",
            //                 "counter_currency":"XBT",
            //                 "min_volume":"0.01",
            //                 "max_volume":"100.00",
            //                 "volume_scale":2,
            //                 "min_price":"0.0001",
            //                 "max_price":"1.00",
            //                 "price_scale":6,
            //                 "fee_scale":8,
            //             ),
            //         )
            //     }
            //
            $result = array();
            $markets = $this->safe_value($response, 'markets', array());
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $id = $this->safe_string($market, 'market_id');
                $baseId = $this->safe_string($market, 'base_currency');
                $quoteId = $this->safe_string($market, 'counter_currency');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $status = $this->safe_string($market, 'trading_status');
                $result[] = array(
                    'id' => $id,
                    'symbol' => $base . '/' . $quote,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => false,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => ($status === 'ACTIVE'),
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'volume_scale'))),
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'price_scale'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'min_volume'),
                            'max' => $this->safe_number($market, 'max_volume'),
                        ),
                        'price' => array(
                            'min' => $this->safe_number($market, 'min_price'),
                            'max' => $this->safe_number($market, 'max_price'),
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_accounts($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch all the accounts associated with a profile
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$account-structure $account structures~ indexed by the $account type
             */
            $response = Async\await($this->privateGetBalance ($params));
            $wallets = $this->safe_value($response, 'balance', array());
            $result = array();
            for ($i = 0; $i < count($wallets); $i++) {
                $account = $wallets[$i];
                $accountId = $this->safe_string($account, 'account_id');
                $currencyId = $this->safe_string($account, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $result[] = array(
                    'id' => $accountId,
                    'type' => null,
                    'currency' => $code,
                    'info' => $account,
                );
            }
            return $result;
        }) ();
    }

    public function parse_balance($response): array {
        $wallets = $this->safe_value($response, 'balance', array());
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        for ($i = 0; $i < count($wallets); $i++) {
            $wallet = $wallets[$i];
            $currencyId = $this->safe_string($wallet, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $reserved = $this->safe_string($wallet, 'reserved');
            $unconfirmed = $this->safe_string($wallet, 'unconfirmed');
            $balance = $this->safe_string($wallet, 'balance');
            $reservedUnconfirmed = Precise::string_add($reserved, $unconfirmed);
            $balanceUnconfirmed = Precise::string_add($balance, $unconfirmed);
            if (is_array($result) && array_key_exists($code, $result)) {
                $result[$code]['used'] = Precise::string_add($result[$code]['used'], $reservedUnconfirmed);
                $result[$code]['total'] = Precise::string_add($result[$code]['total'], $balanceUnconfirmed);
            } else {
                $account = $this->account();
                $account['used'] = $reservedUnconfirmed;
                $account['total'] = $balanceUnconfirmed;
                $result[$code] = $account;
            }
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetBalance ($params));
            //
            //     {
            //         "balance" => [
            //             array('account_id' => '119...1336','asset' => 'XBT','balance' => '0.00','reserved' => '0.00',"unconfirmed" => "0.00"),
            //             array('account_id' => '66...289','asset' => 'XBT','balance' => '0.00','reserved' => '0.00',"unconfirmed" => "0.00"),
            //             array('account_id' => '718...5300','asset' => 'ETH','balance' => '0.00','reserved' => '0.00',"unconfirmed" => "0.00"),
            //             array('account_id' => '818...7072','asset' => 'ZAR','balance' => '0.001417','reserved' => '0.00',"unconfirmed" => "0.00")]}
            //         ]
            //     }
            //
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $response = null;
            if ($limit !== null && $limit <= 100) {
                $response = Async\await($this->publicGetOrderbookTop (array_merge($request, $params)));
            } else {
                $response = Async\await($this->publicGetOrderbook (array_merge($request, $params)));
            }
            $timestamp = $this->safe_integer($response, 'timestamp');
            return $this->parse_order_book($response, $market['symbol'], $timestamp, 'bids', 'asks', 'price', 'volume');
        }) ();
    }

    public function parse_order_status($status) {
        $statuses = array(
            // todo add other $statuses
            'PENDING' => 'open',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        //     {
        //         "base" => "string",
        //         "completed_timestamp" => "string",
        //         "counter" => "string",
        //         "creation_timestamp" => "string",
        //         "expiration_timestamp" => "string",
        //         "fee_base" => "string",
        //         "fee_counter" => "string",
        //         "limit_price" => "string",
        //         "limit_volume" => "string",
        //         "order_id" => "string",
        //         "pair" => "string",
        //         "state" => "PENDING",
        //         "type" => "BID"
        //     }
        //
        $timestamp = $this->safe_integer($order, 'creation_timestamp');
        $status = $this->parse_order_status($this->safe_string($order, 'state'));
        $status = ($status === 'open') ? $status : $status;
        $side = null;
        $orderType = $this->safe_string($order, 'type');
        if (($orderType === 'ASK') || ($orderType === 'SELL')) {
            $side = 'sell';
        } elseif (($orderType === 'BID') || ($orderType === 'BUY')) {
            $side = 'buy';
        }
        $marketId = $this->safe_string($order, 'pair');
        $market = $this->safe_market($marketId, $market);
        $price = $this->safe_string($order, 'limit_price');
        $amount = $this->safe_string($order, 'limit_volume');
        $quoteFee = $this->safe_number($order, 'fee_counter');
        $baseFee = $this->safe_number($order, 'fee_base');
        $filled = $this->safe_string($order, 'base');
        $cost = $this->safe_string($order, 'counter');
        $fee = null;
        if ($quoteFee !== null) {
            $fee = array(
                'cost' => $quoteFee,
                'currency' => $market['quote'],
            );
        } elseif ($baseFee !== null) {
            $fee = array(
                'cost' => $baseFee,
                'currency' => $market['base'],
            );
        }
        $id = $this->safe_string($order, 'order_id');
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'datetime' => $this->iso8601($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $market['symbol'],
            'type' => null,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'amount' => $amount,
            'filled' => $filled,
            'cost' => $cost,
            'remaining' => null,
            'trades' => null,
            'fee' => $fee,
            'info' => $order,
            'average' => null,
        ), $market);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @param {string} $symbol not used by luno fetchOrder
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'id' => $id,
            );
            $response = Async\await($this->privateGetOrdersId (array_merge($request, $params)));
            return $this->parse_order($response);
        }) ();
    }

    public function fetch_orders_by_state($state = null, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($state, $symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($state !== null) {
                $request['state'] = $state;
            }
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['pair'] = $market['id'];
            }
            $response = Async\await($this->privateGetListorders (array_merge($request, $params)));
            $orders = $this->safe_value($response, 'orders', array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple orders made by the user
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_state(null, $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of  open orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_state('PENDING', $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed orders made by the user
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_state('COMPLETE', $symbol, $since, $limit, $params));
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //     "pair":"XBTAUD",
        //     "timestamp":1642201439301,
        //     "bid":"59972.30000000",
        //     "ask":"59997.99000000",
        //     "last_trade":"59997.99000000",
        //     "rolling_24_hour_volume":"1.89510000",
        //     "status":"ACTIVE"
        // }
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $marketId = $this->safe_string($ticker, 'pair');
        $symbol = $this->safe_symbol($marketId, $market);
        $last = $this->safe_string($ticker, 'last_trade');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => null,
            'low' => null,
            'bid' => $this->safe_string($ticker, 'bid'),
            'bidVolume' => null,
            'ask' => $this->safe_string($ticker, 'ask'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'rolling_24_hour_volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?$id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $response = Async\await($this->publicGetTickers ($params));
            $tickers = $this->index_by($response['tickers'], 'pair');
            $ids = is_array($tickers) ? array_keys($tickers) : array();
            $result = array();
            for ($i = 0; $i < count($ids); $i++) {
                $id = $ids[$i];
                $market = $this->safe_market($id);
                $symbol = $market['symbol'];
                $ticker = $tickers[$id];
                $result[$symbol] = $this->parse_ticker($ticker, $market);
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $response = Async\await($this->publicGetTicker (array_merge($request, $params)));
            // {
            //     "pair":"XBTAUD",
            //     "timestamp":1642201439301,
            //     "bid":"59972.30000000",
            //     "ask":"59997.99000000",
            //     "last_trade":"59997.99000000",
            //     "rolling_24_hour_volume":"1.89510000",
            //     "status":"ACTIVE"
            // }
            return $this->parse_ticker($response, $market);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchTrades (public)
        //
        //      {
        //          "sequence":276989,
        //          "timestamp":1648651276949,
        //          "price":"35773.20000000",
        //          "volume":"0.00300000",
        //          "is_buy":false
        //      }
        //
        // fetchMyTrades (private)
        //
        //      {
        //          "pair":"LTCXBT",
        //          "sequence":3256813,
        //          "order_id":"BXEX6XHHDT5EGW2",
        //          "type":"ASK",
        //          "timestamp":1648652135235,
        //          "price":"0.002786",
        //          "volume":"0.10",
        //          "base":"0.10",
        //          "counter":"0.0002786",
        //          "fee_base":"0.0001",
        //          "fee_counter":"0.00",
        //          "is_buy":false,
        //          "client_order_id":""
        //      }
        //
        // For public $trade data (is_buy === True) indicates 'buy' $side but for private $trade data
        // is_buy indicates maker or taker. The value of "type" (ASK/BID) indicate sell/buy $side->
        // Private $trade data includes ID field which public $trade data does not.
        $orderId = $this->safe_string($trade, 'order_id');
        $id = $this->safe_string($trade, 'sequence');
        $takerOrMaker = null;
        $side = null;
        if ($orderId !== null) {
            $type = $this->safe_string($trade, 'type');
            if (($type === 'ASK') || ($type === 'SELL')) {
                $side = 'sell';
            } elseif (($type === 'BID') || ($type === 'BUY')) {
                $side = 'buy';
            }
            if ($side === 'sell' && $trade['is_buy']) {
                $takerOrMaker = 'maker';
            } elseif ($side === 'buy' && !$trade['is_buy']) {
                $takerOrMaker = 'maker';
            } else {
                $takerOrMaker = 'taker';
            }
        } else {
            $side = $trade['is_buy'] ? 'buy' : 'sell';
        }
        $feeBaseString = $this->safe_string($trade, 'fee_base');
        $feeCounterString = $this->safe_string($trade, 'fee_counter');
        $feeCurrency = null;
        $feeCost = null;
        if ($feeBaseString !== null) {
            if (!Precise::string_equals($feeBaseString, '0.0')) {
                $feeCurrency = $market['base'];
                $feeCost = $feeBaseString;
            }
        } elseif ($feeCounterString !== null) {
            if (!Precise::string_equals($feeCounterString, '0.0')) {
                $feeCurrency = $market['quote'];
                $feeCost = $feeCounterString;
            }
        }
        $timestamp = $this->safe_integer($trade, 'timestamp');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $this->safe_string($trade, 'price'),
            'amount' => $this->safe_string_2($trade, 'volume', 'base'),
            // Does not include potential fee costs
            'cost' => $this->safe_string($trade, 'counter'),
            'fee' => array(
                'cost' => $feeCost,
                'currency' => $feeCurrency,
            ),
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent $trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of $trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            if ($since !== null) {
                $request['since'] = $since;
            }
            $response = Async\await($this->publicGetTrades (array_merge($request, $params)));
            //
            //      {
            //          "trades":array(
            //              array(
            //                  "sequence":276989,
            //                  "timestamp":1648651276949,
            //                  "price":"35773.20000000",
            //                  "volume":"0.00300000",
            //                  "is_buy":false
            //              ),...
            //          )
            //      }
            //
            $trades = $this->safe_value($response, 'trades', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function fetch_ohlcv($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * @see https://www.luno.com/en/developers/api#tag/Market/operation/GetCandles
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} $params extra parameters specific to the luno api endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'duration' => $this->safe_value($this->timeframes, $timeframe, $timeframe),
                'pair' => $market['id'],
            );
            if ($since !== null) {
                $request['since'] = intval($since);
            } else {
                $duration = 1000 * 1000 * $this->parse_timeframe($timeframe);
                $request['since'] = $this->milliseconds() - $duration;
            }
            $response = Async\await($this->exchangePrivateGetCandles (array_merge($request, $params)));
            //
            //     {
            //          "candles" => array(
            //              array(
            //                  "timestamp" => 1664055240000,
            //                  "open" => "19612.65",
            //                  "close" => "19612.65",
            //                  "high" => "19612.65",
            //                  "low" => "19612.65",
            //                  "volume" => "0.00"
            //              ),...
            //          ),
            //          "duration" => 60,
            //          "pair" => "XBTEUR"
            //     }
            //
            $ohlcvs = $this->safe_value($response, 'candles', array());
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        // {
        //     "timestamp" => 1664055240000,
        //     "open" => "19612.65",
        //     "close" => "19612.65",
        //     "high" => "19612.65",
        //     "low" => "19612.65",
        //     "volume" => "0.00"
        // }
        return array(
            $this->safe_integer($ohlcv, 'timestamp'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all $trades made by the user
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch $trades for
             * @param {int} [$limit] the maximum number of $trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            if ($since !== null) {
                $request['since'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetListtrades (array_merge($request, $params)));
            //
            //      {
            //          "trades":array(
            //              array(
            //                  "pair":"LTCXBT",
            //                  "sequence":3256813,
            //                  "order_id":"BXEX6XHHDT5EGW2",
            //                  "type":"ASK",
            //                  "timestamp":1648652135235,
            //                  "price":"0.002786",
            //                  "volume":"0.10",
            //                  "base":"0.10",
            //                  "counter":"0.0002786",
            //                  "fee_base":"0.0001",
            //                  "fee_counter":"0.00",
            //                  "is_buy":false,
            //                  "client_order_id":""
            //              ),...
            //          )
            //      }
            //
            $trades = $this->safe_value($response, 'trades', array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function fetch_trading_fee(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the trading fees for a $market
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $response = Async\await($this->privateGetFeeInfo (array_merge($request, $params)));
            //
            //     {
            //          "maker_fee" => "0.00250000",
            //          "taker_fee" => "0.00500000",
            //          "thirty_day_volume" => "0"
            //     }
            //
            return array(
                'info' => $response,
                'symbol' => $symbol,
                'maker' => $this->safe_number($response, 'maker_fee'),
                'taker' => $this->safe_number($response, 'taker_fee'),
            );
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'pair' => $market['id'],
            );
            $response = null;
            if ($type === 'market') {
                $request['type'] = strtoupper($side);
                // todo add createMarketBuyOrderRequires $price logic is implemented in the other exchanges
                if ($side === 'buy') {
                    $request['counter_volume'] = $this->amount_to_precision($market['symbol'], $amount);
                } else {
                    $request['base_volume'] = $this->amount_to_precision($market['symbol'], $amount);
                }
                $response = Async\await($this->privatePostMarketorder (array_merge($request, $params)));
            } else {
                $request['volume'] = $this->amount_to_precision($market['symbol'], $amount);
                $request['price'] = $this->price_to_precision($market['symbol'], $price);
                $request['type'] = ($side === 'buy') ? 'BID' : 'ASK';
                $response = Async\await($this->privatePostPostorder (array_merge($request, $params)));
            }
            return $this->safe_order(array(
                'info' => $response,
                'id' => $response['order_id'],
            ), $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            return Async\await($this->privatePostStoporder (array_merge($request, $params)));
        }) ();
    }

    public function fetch_ledger_by_entries(?string $code = null, $entry = null, $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $entry, $limit, $params) {
            // by default without $entry number or $limit number, return most recent $entry
            if ($entry === null) {
                $entry = -1;
            }
            if ($limit === null) {
                $limit = 1;
            }
            $since = null;
            $request = array(
                'min_row' => $entry,
                'max_row' => $this->sum($entry, $limit),
            );
            return Async\await($this->fetch_ledger($code, $since, $limit, array_merge($request, $params)));
        }) ();
    }

    public function fetch_ledger(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch the history of changes, actions done by the user or operations that altered balance of the user
             * @param {string} $code unified $currency $code, default is null
             * @param {int} [$since] timestamp in ms of the earliest ledger entry, default is null
             * @param {int} [$limit] max number of ledger entrys to return, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?$id=ledger-structure ledger structure~
             */
            Async\await($this->load_markets());
            Async\await($this->load_accounts());
            $currency = null;
            $id = $this->safe_string($params, 'id'); // $account $id
            $min_row = $this->safe_value($params, 'min_row');
            $max_row = $this->safe_value($params, 'max_row');
            if ($id === null) {
                if ($code === null) {
                    throw new ArgumentsRequired($this->id . ' fetchLedger() requires a $currency $code argument if no $account $id specified in params');
                }
                $currency = $this->currency($code);
                $accountsByCurrencyCode = $this->index_by($this->accounts, 'currency');
                $account = $this->safe_value($accountsByCurrencyCode, $code);
                if ($account === null) {
                    throw new ExchangeError($this->id . ' fetchLedger() could not find $account $id for ' . $code);
                }
                $id = $account['id'];
            }
            if ($min_row === null && $max_row === null) {
                $max_row = 0; // Default to most recent transactions
                $min_row = -1000; // Maximum number of records supported
            } elseif ($min_row === null || $max_row === null) {
                throw new ExchangeError($this->id . " fetchLedger() require both $params 'max_row' and 'min_row' or neither to be defined");
            }
            if ($limit !== null && $max_row - $min_row > $limit) {
                if ($max_row <= 0) {
                    $min_row = $max_row - $limit;
                } elseif ($min_row > 0) {
                    $max_row = $min_row . $limit;
                }
            }
            if ($max_row - $min_row > 1000) {
                throw new ExchangeError($this->id . " fetchLedger() requires the $params 'max_row' - 'min_row' <= 1000");
            }
            $request = array(
                'id' => $id,
                'min_row' => $min_row,
                'max_row' => $max_row,
            );
            $response = Async\await($this->privateGetAccountsIdTransactions (array_merge($params, $request)));
            $entries = $this->safe_value($response, 'transactions', array());
            return $this->parse_ledger($entries, $currency, $since, $limit);
        }) ();
    }

    public function parse_ledger_comment($comment) {
        $words = explode(' ', $comment);
        $types = array(
            'Withdrawal' => 'fee',
            'Trading' => 'fee',
            'Payment' => 'transaction',
            'Sent' => 'transaction',
            'Deposit' => 'transaction',
            'Received' => 'transaction',
            'Released' => 'released',
            'Reserved' => 'reserved',
            'Sold' => 'trade',
            'Bought' => 'trade',
            'Failure' => 'failed',
        );
        $referenceId = null;
        $firstWord = $this->safe_string($words, 0);
        $thirdWord = $this->safe_string($words, 2);
        $fourthWord = $this->safe_string($words, 3);
        $type = $this->safe_string($types, $firstWord, null);
        if (($type === null) && ($thirdWord === 'fee')) {
            $type = 'fee';
        }
        if (($type === 'reserved') && ($fourthWord === 'order')) {
            $referenceId = $this->safe_string($words, 4);
        }
        return array(
            'type' => $type,
            'referenceId' => $referenceId,
        );
    }

    public function parse_ledger_entry($entry, ?array $currency = null) {
        // $details = $this->safe_value($entry, 'details', array());
        $id = $this->safe_string($entry, 'row_index');
        $account_id = $this->safe_string($entry, 'account_id');
        $timestamp = $this->safe_integer($entry, 'timestamp');
        $currencyId = $this->safe_string($entry, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $available_delta = $this->safe_string($entry, 'available_delta');
        $balance_delta = $this->safe_string($entry, 'balance_delta');
        $after = $this->safe_string($entry, 'balance');
        $comment = $this->safe_string($entry, 'description');
        $before = $after;
        $amount = '0.0';
        $result = $this->parse_ledger_comment($comment);
        $type = $result['type'];
        $referenceId = $result['referenceId'];
        $direction = null;
        $status = null;
        if (!Precise::string_equals($balance_delta, '0.0')) {
            $before = Precise::string_sub($after, $balance_delta);
            $status = 'ok';
            $amount = Precise::string_abs($balance_delta);
        } elseif (Precise::string_lt($available_delta, '0.0')) {
            $status = 'pending';
            $amount = Precise::string_abs($available_delta);
        } elseif (Precise::string_gt($available_delta, '0.0')) {
            $status = 'canceled';
            $amount = Precise::string_abs($available_delta);
        }
        if (Precise::string_gt($balance_delta, '0') || Precise::string_gt($available_delta, '0')) {
            $direction = 'in';
        } elseif (Precise::string_lt($balance_delta, '0') || Precise::string_lt($available_delta, '0')) {
            $direction = 'out';
        }
        return array(
            'id' => $id,
            'direction' => $direction,
            'account' => $account_id,
            'referenceId' => $referenceId,
            'referenceAccount' => null,
            'type' => $type,
            'currency' => $code,
            'amount' => $this->parse_number($amount),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'before' => $this->parse_number($before),
            'after' => $this->parse_number($after),
            'status' => $status,
            'fee' => null,
            'info' => $entry,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api] . '/' . $this->version . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($query) {
            $url .= '?' . $this->urlencode($query);
        }
        if (($api === 'private') || ($api === 'exchangePrivate')) {
            $this->check_required_credentials();
            $auth = base64_encode($this->apiKey . ':' . $this->secret);
            $headers = array(
                'Authorization' => 'Basic ' . $auth,
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        $error = $this->safe_value($response, 'error');
        if ($error !== null) {
            throw new ExchangeError($this->id . ' ' . $this->json($response));
        }
        return null;
    }
}
