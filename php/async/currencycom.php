<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\currencycom as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\InvalidOrder;
use ccxt\NotSupported;
use ccxt\DDoSProtection;
use ccxt\Precise;
use React\Async;
use React\Promise\PromiseInterface;

class currencycom extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'currencycom',
            'name' => 'Currency.com',
            'countries' => array( 'BY' ), // Belarus
            'rateLimit' => 100,
            'certified' => false,
            'pro' => true,
            'version' => 'v2',
            // new metainfo interface
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => null,
                'cancelAllOrders' => null,
                'cancelOrder' => true,
                'cancelOrders' => null,
                'createDepositAddress' => null,
                'createLimitOrder' => true,
                'createMarketOrder' => true,
                'createOrder' => true,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'editOrder' => 'emulated',
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => null,
                'fetchBorrowRateHistory' => null,
                'fetchCanceledOrders' => null,
                'fetchClosedOrder' => null,
                'fetchClosedOrders' => null,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDeposit' => null,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => true,
                'fetchDepositsWithdrawals' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => true,
                'fetchLedger' => true,
                'fetchLedgerEntry' => false,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => null,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => null,
                'fetchOrders' => null,
                'fetchOrderTrades' => null,
                'fetchPosition' => null,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPositionsRisk' => null,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => true,
                'fetchTradingLimits' => null,
                'fetchTransactionFee' => null,
                'fetchTransactionFees' => null,
                'fetchTransactions' => 'emulated',
                'fetchTransfers' => null,
                'fetchWithdrawal' => null,
                'fetchWithdrawals' => true,
                'reduceMargin' => null,
                'setLeverage' => null,
                'setMarginMode' => null,
                'setPositionMode' => null,
                'signIn' => null,
                'transfer' => null,
                'withdraw' => null,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '10m' => '10m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'hostname' => 'backend.currency.com',
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/83718672-36745c00-a63e-11ea-81a9-677b1f789a4d.jpg',
                'api' => array(
                    'public' => 'https://api-adapter.{hostname}/api',
                    'private' => 'https://api-adapter.{hostname}/api',
                    'marketcap' => 'https://marketcap.{hostname}/api',
                ),
                'test' => array(
                    'public' => 'https://demo-api-adapter.{hostname}/api',
                    'private' => 'https://demo-api-adapter.{hostname}/api',
                ),
                'www' => 'https://www.currency.com',
                'referral' => 'https://currency.com/trading/signup?c=362jaimv&pid=referral',
                'doc' => array(
                    'https://currency.com/api',
                ),
                'fees' => 'https://currency.com/fees-charges',
            ),
            // rate-limits are described at => https://currency.com/api-get-started
            'api' => array(
                'public' => array(
                    'get' => array(
                        'v1/time' => 1,
                        'v1/exchangeInfo' => 1,
                        'v1/depth' => 1,
                        'v1/aggTrades' => 1,
                        'v1/klines' => 1,
                        'v1/ticker/24hr' => 1,
                        'v2/time' => 1,
                        'v2/exchangeInfo' => 1,
                        'v2/depth' => 1,
                        'v2/aggTrades' => 1,
                        'v2/klines' => 1,
                        'v2/ticker/24hr' => 1,
                    ),
                ),
                'marketcap' => array(
                    'get' => array(
                        'v1/assets' => 1,
                        'v1/candles' => 1,
                        'v1/orderbook' => 1,
                        'v1/summary' => 1,
                        'v1/ticker' => 1,
                        'v1/token/assets' => 1,
                        'v1/token/orderbook' => 1,
                        'v1/token/summary' => 1,
                        'v1/token/ticker' => 1,
                        'v1/token/trades' => 1,
                        'v1/token_crypto/OHLC' => 1,
                        'v1/token_crypto/assets' => 1,
                        'v1/token_crypto/orderbook' => 1,
                        'v1/token_crypto/summary' => 1,
                        'v1/token_crypto/ticker' => 1,
                        'v1/token_crypto/trades' => 1,
                        'v1/trades' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'v1/account' => 1,
                        'v1/currencies' => 1,
                        'v1/deposits' => 1,
                        'v1/depositAddress' => 1,
                        'v1/ledger' => 1,
                        'v1/leverageSettings' => 1,
                        'v1/myTrades' => 1,
                        'v1/openOrders' => 1,
                        'v1/tradingPositions' => 1,
                        'v1/tradingPositionsHistory' => 1,
                        'v1/transactions' => 1,
                        'v1/withdrawals' => 1,
                        'v2/account' => 1,
                        'v2/currencies' => 1,
                        'v2/deposits' => 1,
                        'v2/depositAddress' => 1,
                        'v2/ledger' => 1,
                        'v2/leverageSettings' => 1,
                        'v2/myTrades' => 1,
                        'v2/openOrders' => 1,
                        'v2/tradingPositions' => 1,
                        'v2/tradingPositionsHistory' => 1,
                        'v2/transactions' => 1,
                        'v2/withdrawals' => 1,
                        'v2/fetchOrder' => 1,
                    ),
                    'post' => array(
                        'v1/order' => 1,
                        'v1/updateTradingPosition' => 1,
                        'v1/updateTradingOrder' => 1,
                        'v1/closeTradingPosition' => 1,
                        'v2/order' => 1,
                        'v2/updateTradingPosition' => 1,
                        'v2/updateTradingOrder' => 1,
                        'v2/closeTradingPosition' => 1,
                    ),
                    'delete' => array(
                        'v1/order' => 1,
                        'v2/order' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'feeSide' => 'get',
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.002'),
                    'maker' => $this->parse_number('0.002'),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            // exchange-specific options
            'options' => array(
                'defaultTimeInForce' => 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel, 'FOK' = Fill Or Kill
                'warnOnFetchOpenOrdersWithoutSymbol' => true,
                'recvWindow' => 5 * 1000, // 5 sec, default
                'timeDifference' => 0, // the difference between system clock and Binance clock
                'adjustForTimeDifference' => false, // controls the adjustment logic upon instantiation
                'parseOrderToPrecision' => false, // force amounts and costs in parseOrder to precision
                'newOrderRespType' => array(
                    'market' => 'FULL', // 'ACK' for order id, 'RESULT' for full order or 'FULL' for order with fills
                    'limit' => 'RESULT', // we change it from 'ACK' by default to 'RESULT'
                    'stop' => 'RESULT',
                ),
                'leverage_markets_suffix' => '_LEVERAGE',
                'collateralCurrencies' => array( 'USD', 'EUR', 'USDT' ),
            ),
            'exceptions' => array(
                'broad' => array(
                    'FIELD_VALIDATION_ERROR Cancel is available only for LIMIT order' => '\\ccxt\\InvalidOrder',
                    'API key does not exist' => '\\ccxt\\AuthenticationError',
                    'Order would trigger immediately.' => '\\ccxt\\InvalidOrder',
                    'Account has insufficient balance for requested action.' => '\\ccxt\\InsufficientFunds',
                    'Rest API trading is not enabled.' => '\\ccxt\\ExchangeNotAvailable',
                    'Combination of parameters invalid' => '\\ccxt\\BadRequest',
                    'Invalid limit price' => '\\ccxt\\BadRequest',
                    'Only leverage symbol allowed here:' => '\\ccxt\\BadSymbol', // when you fetchLeverage for non-leverage symbols, like 'BTC/USDT' instead of 'BTC/USDT_LEVERAGE' => array("code":"-1128","msg":"Only leverage symbol allowed here => BTC/USDT")
                    'market data service is not available' => '\\ccxt\\ExchangeNotAvailable', // array("code":"-1021","msg":"market data service is not available")
                    'your time is ahead of server' => '\\ccxt\\InvalidNonce', // array("code":"-1021","msg":"your time is ahead of server")
                    'Can not find account' => '\\ccxt\\BadRequest', // -1128
                    'You mentioned an invalid value for the price parameter' => '\\ccxt\\BadRequest', // -1030
                ),
                'exact' => array(
                    '-1000' => '\\ccxt\\ExchangeNotAvailable', // array("code":-1000,"msg":"An unknown error occured while processing the request.")
                    '-1013' => '\\ccxt\\InvalidOrder', // createOrder -> 'invalid quantity'/'invalid price'/MIN_NOTIONAL
                    // '-1021' => '\\ccxt\\InvalidNonce', // array("code":"-1021","msg":"your time is ahead of server") // see above in the broad section
                    '-1022' => '\\ccxt\\AuthenticationError', // array("code":-1022,"msg":"Signature for this request is not valid.")
                    '-1030' => '\\ccxt\\InvalidOrder', // array("code":"-1030","msg":"You mentioned an invalid value for the price parameter.")
                    '-1100' => '\\ccxt\\InvalidOrder', // createOrder(symbol, 1, asdf) -> 'Illegal characters found in parameter 'price'
                    '-1104' => '\\ccxt\\ExchangeError', // Not all sent parameters were read, read 8 parameters but was sent 9
                    '-1025' => '\\ccxt\\AuthenticationError', // array("code":-1025,"msg":"Invalid API-key, IP, or permissions for action")
                    '-1128' => '\\ccxt\\BadRequest', // array("code":-1128,"msg":"Combination of optional parameters invalid.") | array("code":"-1128","msg":"Combination of parameters invalid") | array("code":"-1128","msg":"Invalid limit price") | array("code":"-1128","msg":"Can not find account => null")
                    '-2010' => '\\ccxt\\ExchangeError', // generic error code for createOrder -> 'Account has insufficient balance for requested action.', array("code":-2010,"msg":"Rest API trading is not enabled."), etc...
                    '-2011' => '\\ccxt\\OrderNotFound', // cancelOrder(1, 'BTC/USDT') -> 'UNKNOWN_ORDER'
                    '-2013' => '\\ccxt\\OrderNotFound', // fetchOrder (1, 'BTC/USDT') -> 'Order does not exist'
                    '-2014' => '\\ccxt\\AuthenticationError', // array( "code":-2014, "msg" => "API-key format invalid." )
                    '-2015' => '\\ccxt\\AuthenticationError', // "Invalid API-key, IP, or permissions for action."
                ),
            ),
            'commonCurrencies' => array(
                'ACN' => 'Accenture',
                'AMC' => 'AMC Entertainment Holdings',
                'BNS' => 'Bank of Nova Scotia',
                'CAR' => 'Avis Budget Group Inc',
                'CLR' => 'Continental Resources',
                'EDU' => 'New Oriental Education & Technology Group Inc',
                'ETN' => 'Eaton',
                'FOX' => 'Fox Corporation',
                'GM' => 'General Motors Co',
                'IQ' => 'iQIYI',
                'OSK' => 'Oshkosh',
                'PLAY' => "Dave & Buster's Entertainment",
            ),
        ));
    }

    public function nonce() {
        return $this->milliseconds() - $this->options['timeDifference'];
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->publicGetV2Time ($params));
            //
            //     {
            //         "serverTime" => 1590998366609
            //     }
            //
            return $this->safe_integer($response, 'serverTime');
        }) ();
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches all available currencies on an exchange
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of currencies
             */
            // requires authentication
            if (!$this->check_required_credentials(false)) {
                return null;
            }
            $response = Async\await($this->privateGetV2Currencies ($params));
            //
            //     array(
            //         array(
            //             "name" => "Euro",
            //             "displaySymbol" => "EUR.cx",
            //             "precision" => "2",
            //             "type" => "FIAT",
            //             "minWithdrawal" => "90.0",
            //             "maxWithdrawal" => "1.0E+8",
            //             "commissionMin" => "0.02", // some instruments do not have this property
            //             "commissionPercent" => "1.5", // some instruments do not have this property
            //             "minDeposit" => "90.0",
            //         ),
            //         array(
            //             "name" => "Bitcoin",
            //             "displaySymbol" => "BTC",
            //             "precision" => "8",
            //             "type" => "CRYPTO", // only a few major currencies have this value, others like USDT have a value of "TOKEN"
            //             "minWithdrawal" => "0.00020",
            //             "commissionFixed" => "0.00010",
            //             "minDeposit" => "0.00010",
            //         ),
            //     )
            //
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $currency = $response[$i];
                $id = $this->safe_string($currency, 'displaySymbol');
                $code = $this->safe_currency_code($id);
                $fee = $this->safe_number($currency, 'commissionFixed');
                $result[$code] = array(
                    'id' => $id,
                    'code' => $code,
                    'type' => $this->safe_string_lower($currency, 'type'),
                    'name' => $this->safe_string($currency, 'name'),
                    'active' => null,
                    'deposit' => null,
                    'withdraw' => null,
                    'fee' => $fee,
                    'precision' => $this->parse_number($this->parse_precision($this->safe_string($currency, 'precision'))),
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->safe_number($currency, 'minWithdrawal'),
                            'max' => $this->safe_number($currency, 'maxWithdrawal'),
                        ),
                        'deposit' => array(
                            'min' => $this->safe_number($currency, 'minDeposit'),
                            'max' => null,
                        ),
                    ),
                    'info' => $currency,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for currencycom
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetV2ExchangeInfo ($params));
            //
            //     {
            //         "timezone" => "UTC",
            //         "serverTime" => "1645186287261",
            //         "rateLimits" => array(
            //             array( rateLimitType => "REQUEST_WEIGHT", interval => "MINUTE", intervalNum => "1", limit => "1200" ),
            //             array( rateLimitType => "ORDERS", interval => "SECOND", intervalNum => "1", limit => "10" ),
            //             array( rateLimitType => "ORDERS", interval => "DAY", intervalNum => "1", limit => "864000" ),
            //         ),
            //         "exchangeFilters" => array(),
            //         "symbols" => array(
            //             array(
            //                 "symbol" => "BTC/USDT", // BTC/USDT, BTC/USDT_LEVERAGE
            //                 "name" => "Bitcoin / Tether",
            //                 "status" => "TRADING", // TRADING, BREAK, HALT
            //                 "baseAsset" => "BTC",
            //                 "baseAssetPrecision" => "4",
            //                 "quoteAsset" => "USDT",
            //                 "quoteAssetId" => "USDT", // USDT, USDT_LEVERAGE
            //                 "quotePrecision" => "4",
            //                 "orderTypes" => array( "LIMIT", "MARKET" ), // LIMIT, MARKET, STOP
            //                 "filters" => array(
            //                     array( filterType => "LOT_SIZE", minQty => "0.0001", maxQty => "100", stepSize => "0.0001", ),
            //                     array( filterType => "MIN_NOTIONAL", minNotional => "5", ),
            //                 ),
            //                 "marketModes" => array( "REGULAR" ), // CLOSE_ONLY, LONG_ONLY, REGULAR
            //                 "marketType" => "SPOT", // SPOT, LEVERAGE
            //                 "longRate" => -0.0684932, // LEVERAGE only
            //                 "shortRate" => -0.0684932, // LEVERAGE only
            //                 "swapChargeInterval" => 1440, // LEVERAGE only
            //                 "country" => "",
            //                 "sector" => "",
            //                 "industry" => "",
            //                 "tradingHours" => "UTC; Mon - 22:00, 22:05 -; Tue - 22:00, 22:05 -; Wed - 22:00, 22:05 -; Thu - 22:00, 22:05 -; Fri - 22:00, 23:01 -; Sat - 22:00, 22:05 -; Sun - 21:00, 22:05 -",
            //                 "tickSize" => "0.01",
            //                 "tickValue" => "403.4405", // not available in BTC/USDT_LEVERAGE, but available in BTC/USD_LEVERAGE
            //                 "exchangeFee" => "0.2", // SPOT only
            //                 "tradingFee" => 0.075, // LEVERAGE only
            //                 "makerFee" => -0.025, // LEVERAGE only
            //                 "takerFee" => 0.06, // LEVERAGE only
            //                 "maxSLGap" => 50, // LEVERAGE only
            //                 "minSLGap" => 1, // LEVERAGE only
            //                 "maxTPGap" => 50, // LEVERAGE only
            //                 "minTPGap" => 0.5, // LEVERAGE only
            //                 "assetType" => "CRYPTOCURRENCY",
            //             ),
            //         )
            //     }
            //
            if ($this->options['adjustForTimeDifference']) {
                Async\await($this->load_time_difference());
            }
            $markets = $this->safe_value($response, 'symbols', array());
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $id = $this->safe_string($market, 'symbol');
                $baseId = $this->safe_string($market, 'baseAsset');
                $quoteId = $this->safe_string($market, 'quoteAsset');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                $typeRaw = $this->safe_string($market, 'marketType');
                $spot = ($typeRaw === 'SPOT');
                $futures = false;
                $swap = ($typeRaw === 'LEVERAGE');
                $type = $swap ? 'swap' : 'spot';
                $margin = null;
                if ($swap) {
                    $symbol = str_replace($this->options['leverage_markets_suffix'], '', $symbol);
                    $symbol .= ':' . $quote;
                }
                $active = $this->safe_string($market, 'status') === 'TRADING';
                // to set taker & maker fees, we use one from the below data - pairs either have 'exchangeFee' or 'tradingFee', if none of them (rare cases), then they should have 'takerFee & makerFee'
                $exchangeFee = $this->safe_string_2($market, 'exchangeFee', 'tradingFee');
                $makerFee = $this->safe_string($market, 'makerFee', $exchangeFee);
                $takerFee = $this->safe_string($market, 'takerFee', $exchangeFee);
                $makerFee = Precise::string_div($makerFee, '100');
                $takerFee = Precise::string_div($takerFee, '100');
                $filters = $this->safe_value($market, 'filters', array());
                $filtersByType = $this->index_by($filters, 'filterType');
                $limitPriceMin = null;
                $limitPriceMax = null;
                $precisionPrice = $this->safe_number($market, 'tickSize');
                if (is_array($filtersByType) && array_key_exists('PRICE_FILTER', $filtersByType)) {
                    $filter = $this->safe_value($filtersByType, 'PRICE_FILTER', array());
                    $precisionPrice = $this->safe_number($filter, 'tickSize');
                    // PRICE_FILTER reports zero values for $maxPrice
                    // since they updated $filter types in November 2018
                    // https://github.com/ccxt/ccxt/issues/4286
                    // therefore limits['price']['max'] doesn't have any meaningful value except null
                    $limitPriceMin = $this->safe_number($filter, 'minPrice');
                    $maxPrice = $this->safe_string($filter, 'maxPrice');
                    if (($maxPrice !== null) && (Precise::string_gt($maxPrice, '0'))) {
                        $limitPriceMax = $maxPrice;
                    }
                }
                $precisionAmount = $this->parse_number($this->parse_precision($this->safe_string($market, 'baseAssetPrecision')));
                $limitAmount = array(
                    'min' => null,
                    'max' => null,
                );
                if (is_array($filtersByType) && array_key_exists('LOT_SIZE', $filtersByType)) {
                    $filter = $this->safe_value($filtersByType, 'LOT_SIZE', array());
                    $precisionAmount = $this->safe_number($filter, 'stepSize');
                    $limitAmount = array(
                        'min' => $this->safe_number($filter, 'minQty'),
                        'max' => $this->safe_number($filter, 'maxQty'),
                    );
                }
                $limitMarket = array(
                    'min' => null,
                    'max' => null,
                );
                if (is_array($filtersByType) && array_key_exists('MARKET_LOT_SIZE', $filtersByType)) {
                    $filter = $this->safe_value($filtersByType, 'MARKET_LOT_SIZE', array());
                    $limitMarket = array(
                        'min' => $this->safe_number($filter, 'minQty'),
                        'max' => $this->safe_number($filter, 'maxQty'),
                    );
                }
                $costMin = null;
                if (is_array($filtersByType) && array_key_exists('MIN_NOTIONAL', $filtersByType)) {
                    $filter = $this->safe_value($filtersByType, 'MIN_NOTIONAL', array());
                    $costMin = $this->safe_number($filter, 'minNotional');
                }
                $isContract = $swap || $futures;
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => $type,
                    'spot' => $spot,
                    'margin' => $margin,
                    'swap' => $swap,
                    'future' => $futures,
                    'option' => false,
                    'active' => $active,
                    'contract' => $isContract,
                    'linear' => $isContract ? true : null,
                    'inverse' => null,
                    'taker' => $this->parse_number($takerFee),
                    'maker' => $this->parse_number($makerFee),
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $precisionAmount,
                        'price' => $precisionPrice,
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => $limitAmount,
                        'market' => $limitMarket,
                        'price' => array(
                            'min' => $limitPriceMin,
                            'max' => $this->parse_number($limitPriceMax),
                        ),
                        'cost' => array(
                            'min' => $costMin,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_accounts($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch all the $accounts associated with a profile
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$account-structure $account structures~ indexed by the $account type
             */
            $response = Async\await($this->privateGetV2Account ($params));
            //
            //     {
            //         "makerCommission" => "0.20",
            //         "takerCommission" => "0.20",
            //         "buyerCommission" => "0.20",
            //         "sellerCommission" => "0.20",
            //         "canTrade" => true,
            //         "canWithdraw" => true,
            //         "canDeposit" => true,
            //         "updateTime" => "1645266330",
            //         "userId" => "644722",
            //         "balances" => array(
            //             array(
            //                 "accountId" => "120702016179403605",
            //                 "collateralCurrency" => false,
            //                 "asset" => "CAKE",
            //                 "free" => "3.1",
            //                 "locked" => "0.0",
            //                 "default" => false,
            //             ),
            //             {
            //                 "accountId" => "109698017713125316",
            //                 "collateralCurrency" => true,
            //                 "asset" => "USD",
            //                 "free" => "17.58632",
            //                 "locked" => "0.0",
            //                 "default" => true,
            //             }
            //         )
            //     }
            //
            $accounts = $this->safe_value($response, 'balances', array());
            $result = array();
            for ($i = 0; $i < count($accounts); $i++) {
                $account = $accounts[$i];
                $accountId = $this->safe_string($account, 'accountId'); // must be string, because the numeric value is far too big for integer, and causes bugs
                $currencyId = $this->safe_string($account, 'asset');
                $currencyCode = $this->safe_currency_code($currencyId);
                $result[] = array(
                    'id' => $accountId,
                    'type' => null,
                    'currency' => $currencyCode,
                    'info' => $account,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_trading_fees($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch the trading fees for multiple markets
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=fee-structure fee structures~ indexed by market symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetV2Account ($params));
            //
            //    {
            //        "makerCommission" => "0.20",
            //        "takerCommission" => "0.20",
            //        "buyerCommission" => "0.20",
            //        "sellerCommission" => "0.20",
            //        "canTrade" => true,
            //        "canWithdraw" => true,
            //        "canDeposit" => true,
            //        "updateTime" => "1645738976",
            //        "userId" => "-1924114235",
            //        "balances" => array()
            //    }
            //
            $makerFee = $this->safe_number($response, 'makerCommission');
            $takerFee = $this->safe_number($response, 'takerCommission');
            $result = array();
            for ($i = 0; $i < count($this->symbols); $i++) {
                $symbol = $this->symbols[$i];
                $result[$symbol] = array(
                    'info' => $response,
                    'symbol' => $symbol,
                    'maker' => $makerFee,
                    'taker' => $takerFee,
                    'percentage' => true,
                    'tierBased' => false,
                );
            }
            return $result;
        }) ();
    }

    public function parse_balance($response, $type = null) {
        //
        //     {
        //         "makerCommission":0.20,
        //         "takerCommission":0.20,
        //         "buyerCommission":0.20,
        //         "sellerCommission":0.20,
        //         "canTrade":true,
        //         "canWithdraw":true,
        //         "canDeposit":true,
        //         "updateTime":1591056268,
        //         "balances":array(
        //             array(
        //                 "accountId":5470306579272368,
        //                 "collateralCurrency":true,
        //                 "asset":"ETH",
        //                 "free":0.0,
        //                 "locked":0.0,
        //                 "default":false,
        //             ),
        //         )
        //     }
        //
        $result = array( 'info' => $response );
        $balances = $this->safe_value($response, 'balances', array());
        for ($i = 0; $i < count($balances); $i++) {
            $balance = $balances[$i];
            $currencyId = $this->safe_string($balance, 'asset');
            $code = $this->safe_currency_code($currencyId);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'free');
            $account['used'] = $this->safe_string($balance, 'locked');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetV2Account ($params));
            //
            //     {
            //         "makerCommission" => "0.20",
            //         "takerCommission" => "0.20",
            //         "buyerCommission" => "0.20",
            //         "sellerCommission" => "0.20",
            //         "canTrade" => true,
            //         "canWithdraw" => true,
            //         "canDeposit" => true,
            //         "updateTime" => "1645266330",
            //         "userId" => "644722",
            //         "balances" => array(
            //             array(
            //                 "accountId" => "120702016179403605",
            //                 "collateralCurrency" => false,
            //                 "asset" => "CAKE",
            //                 "free" => "1.784",
            //                 "locked" => "0.0",
            //                 "default" => false,
            //             ),
            //             {
            //                 "accountId" => "109698017413175316",
            //                 "collateralCurrency" => true,
            //                 "asset" => "USD",
            //                 "free" => "7.58632",
            //                 "locked" => "0.0",
            //                 "default" => true,
            //             }
            //         )
            //     }
            //
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit; // default 100, max 1000, valid limits 5, 10, 20, 50, 100, 500, 1000, 5000
            }
            $response = Async\await($this->publicGetV2Depth (array_merge($request, $params)));
            //
            //     {
            //         "lastUpdateId":1590999849037,
            //         "asks":[
            //             [0.02495,60.0345],
            //             [0.02496,34.1],
            //             ...
            //         ],
            //         "bids":[
            //             [0.02487,72.4144854],
            //             [0.02486,24.043],
            //             ...
            //         ]
            //     }
            //
            $orderbook = $this->parse_order_book($response, $symbol);
            $orderbook['nonce'] = $this->safe_integer($response, 'lastUpdateId');
            return $orderbook;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // fetchTicker
        //
        //     {
        //         "symbol":"ETH/BTC",
        //         "priceChange":"0.00030",
        //         "priceChangePercent":"1.21",
        //         "weightedAvgPrice":"0.02481",
        //         "prevClosePrice":"0.02447",
        //         "lastPrice":"0.02477",
        //         "lastQty":"60.0",
        //         "bidPrice":"0.02477",
        //         "askPrice":"0.02484",
        //         "openPrice":"0.02447",
        //         "highPrice":"0.02524",
        //         "lowPrice":"0.02438",
        //         "volume":"11.97",
        //         "quoteVolume":"0.298053",
        //         "openTime":1590969600000,
        //         "closeTime":1591000072693
        //     }
        //
        // fetchTickers
        //
        //     {
        //          "symbol" => "SHIB/USD_LEVERAGE",
        //          "weightedAvgPrice" => "0.000027595",
        //          "lastPrice" => "0.00002737",
        //          "lastQty" => "1.11111111E8",
        //          "bidPrice" => "0.00002737",
        //          "askPrice" => "0.00002782",
        //          "highPrice" => "0.00002896",
        //          "lowPrice" => "0.00002738",
        //          "volume" => "16472160000",
        //          "quoteVolume" => "454796.3376",
        //          "openTime" => "1645187472000",
        //          "closeTime" => "1645273872000",
        //     }
        //
        // ws:marketData.subscribe
        //
        //     {
        //          "symbolName":"TXN",
        //          "bid":139.85,
        //          "bidQty":2500,
        //          "ofr":139.92000000000002,
        //          "ofrQty":2500,
        //          "timestamp":1597850971558
        //      }
        //
        $timestamp = $this->safe_integer_2($ticker, 'closeTime', 'timestamp');
        $marketId = $this->safe_string_2($ticker, 'symbol', 'symbolName');
        $market = $this->safe_market($marketId, $market, '/');
        $last = $this->safe_string($ticker, 'lastPrice');
        return $this->safe_ticker(array(
            'symbol' => $market['symbol'],
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'highPrice'),
            'low' => $this->safe_string($ticker, 'lowPrice'),
            'bid' => $this->safe_string_2($ticker, 'bidPrice', 'bid'),
            'bidVolume' => $this->safe_string($ticker, 'bidQty'),
            'ask' => $this->safe_string_2($ticker, 'askPrice', 'ofr'),
            'askVolume' => $this->safe_string($ticker, 'ofrQty'),
            'vwap' => $this->safe_string($ticker, 'weightedAvgPrice'),
            'open' => $this->safe_string($ticker, 'openPrice'),
            'close' => $last,
            'last' => $last,
            'previousClose' => $this->safe_string($ticker, 'prevClosePrice'), // previous day close
            'change' => $this->safe_string($ticker, 'priceChange'),
            'percentage' => $this->safe_string($ticker, 'priceChangePercent'),
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'volume'),
            'quoteVolume' => $this->safe_string($ticker, 'quoteVolume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->publicGetV2Ticker24hr (array_merge($request, $params)));
            //
            //     {
            //         "symbol":"ETH/BTC",
            //         "priceChange":"0.00030",
            //         "priceChangePercent":"1.21",
            //         "weightedAvgPrice":"0.02481",
            //         "prevClosePrice":"0.02447",
            //         "lastPrice":"0.02477",
            //         "lastQty":"60.0",
            //         "bidPrice":"0.02477",
            //         "askPrice":"0.02484",
            //         "openPrice":"0.02447",
            //         "highPrice":"0.02524",
            //         "lowPrice":"0.02438",
            //         "volume":"11.97",
            //         "quoteVolume":"0.298053",
            //         "openTime":1590969600000,
            //         "closeTime":1591000072693
            //     }
            //
            return $this->parse_ticker($response, $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->publicGetV2Ticker24hr ($params));
            //
            //     array(
            //         {
            //              "symbol" => "SHIB/USD_LEVERAGE",
            //              "weightedAvgPrice" => "0.000027595",
            //              "lastPrice" => "0.00002737",
            //              "lastQty" => "1.11111111E8",
            //              "bidPrice" => "0.00002737",
            //              "askPrice" => "0.00002782",
            //              "highPrice" => "0.00002896",
            //              "lowPrice" => "0.00002738",
            //              "volume" => "16472160000",
            //              "quoteVolume" => "454796.3376",
            //              "openTime" => "1645187472000",
            //              "closeTime" => "1645273872000",
            //         }
            //     )
            //
            return $this->parse_tickers($response, $symbols);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //         1590971040000,
        //         "0.02454",
        //         "0.02456",
        //         "0.02452",
        //         "0.02456",
        //         249
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'interval' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit; // default 500, max 1000
            }
            $response = Async\await($this->publicGetV2Klines (array_merge($request, $params)));
            //
            //     [
            //         [1590971040000,"0.02454","0.02456","0.02452","0.02456",249],
            //         [1590971100000,"0.02455","0.02457","0.02452","0.02456",300],
            //         [1590971160000,"0.02455","0.02456","0.02453","0.02454",286],
            //     ]
            //
            return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchTrades (public aggregate trades)
        //
        //     {
        //         "a":"1658318071",    // Aggregate tradeId
        //         "p":"0.02476",       // Price
        //         "q":"0.0",           // Official doc says => "Quantity (should be ignored)"
        //         "T":"1591001423382", // Epoch $timestamp in MS
        //         "m":false            // Was the buyer the maker
        //     }
        //
        // createOrder fills (private)
        //
        //     {
        //         "price" => "9807.05",
        //         "qty" => "0.01",
        //         "commission" => "0",
        //         "commissionAsset" => "dUSD"
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "symbol" => "DOGE/USD",
        //         "id" => "116046000",
        //         "orderId" => "00000000-0000-0000-0000-000006dbb8ad",
        //         "price" => "0.14094",
        //         "qty" => "40.0",
        //         "commission" => "0.01",
        //         "commissionAsset" => "USD",
        //         "time" => "1645283022351",
        //         "buyer" => false,
        //         "maker" => false,
        //         "isBuyer" => false,
        //         "isMaker" => false
        //     }
        //
        $timestamp = $this->safe_integer_2($trade, 'T', 'time');
        $priceString = $this->safe_string_2($trade, 'p', 'price');
        $amountString = $this->safe_string_2($trade, 'q', 'qty');
        $id = $this->safe_string_2($trade, 'a', 'id');
        $side = null;
        $orderId = $this->safe_string($trade, 'orderId');
        $takerOrMaker = null;
        if (is_array($trade) && array_key_exists('m', $trade)) {
            $side = $trade['m'] ? 'sell' : 'buy'; // this is reversed intentionally [TODO => needs reason to be mentioned]
            $takerOrMaker = 'taker'; // in public trades, it's always taker
        } elseif (is_array($trade) && array_key_exists('isBuyer', $trade)) {
            $side = ($trade['isBuyer']) ? 'buy' : 'sell'; // this is a true $side
            $takerOrMaker = $trade['isMaker'] ? 'maker' : 'taker';
        }
        $fee = null;
        if (is_array($trade) && array_key_exists('commission', $trade)) {
            $fee = array(
                'cost' => $this->safe_string($trade, 'commission'),
                'currency' => $this->safe_currency_code($this->safe_string($trade, 'commissionAsset')),
            );
        }
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        return $this->safe_trade(array(
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'type' => null,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => $fee,
            'info' => $trade,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                // 'limit' => 500, // default 500, max 1000
            );
            if ($limit !== null) {
                $request['limit'] = min ($limit, 1000); // default 500, max 1000
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            $response = Async\await($this->publicGetV2AggTrades (array_merge($request, $params)));
            //
            // array(
            //     array(
            //         "a":"1658318071",    // Aggregate tradeId
            //         "p":"0.02476",       // Price
            //         "q":"0.0",           // Official doc says => "Quantity (should be ignored)"
            //         "T":"1591001423382", // Epoch timestamp in MS
            //         "m":false            // Was the buyer the maker
            //     ),
            // )
            //
            return $this->parse_trades($response, $market, $since, $limit);
        }) ();
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // createOrder
        //
        // limit
        //
        //     {
        //         "symbol" => "BTC/USD",
        //         "orderId" => "00000000-0000-0000-0000-000006eacaa0",
        //         "transactTime" => "1645281669295",
        //         "price" => "30000.00000000",
        //         "origQty" => "0.0002",     // might not be present for "market" $order
        //         "executedQty" => "0.0",    // positive for BUY, negative for SELL. This property might not be present in Leverage markets
        //         "margin" => 0.1,           // present in leverage markets
        //         "status" => "NEW",         // NEW, FILLED, ...
        //         "timeInForce" => "GTC",
        //         "type" => "LIMIT",         // LIMIT, MARKET
        //         "side" => "BUY",
        //         "fills" => array(               // this field might not be present if there were no $fills
        //             array(
        //                 "price" => "0.14094",
        //                 "qty" => "40.0",
        //                 "commission" => "0",
        //                 "commissionAsset" => "dUSD",
        //             ),
        //         ),
        //     }
        //
        // fetchOrder (fetchOpenOrders is an array same structure, with some extra fields)
        //
        //    {
        //        "symbol" => "BTC/USD_LEVERAGE",
        //        "accountId" => "123456789012345678",
        //        "orderId" => "00a01234-0123-54c4-0000-123451234567",
        //        "price" => "25779.35",
        //        "status" => "MODIFIED",
        //        "type" => "LIMIT",
        //        "timeInForceType" => "GTC",
        //        "side" => "BUY",
        //        "guaranteedStopLoss" => false,
        //        "trailingStopLoss" => false,
        //        "margin" => "0.05",
        //        "takeProfit" => "27020.00",
        //        "stopLoss" => "24500.35",
        //        "fills" => array(), // might not be present
        //        "timestamp" => "1685958369623",  // "time" in "fetchOpenOrders"
        //        "expireTime" => "1686167960000", // "expireTimestamp" in "fetchOpenOrders"
        //        "quantity" => "0.00040", // "origQty" in "fetchOpenOrders"
        //        "executedQty" => "0.0", // present in "fetchOpenOrders"
        //        "updateTime" => "1685958369542", // present in "fetchOpenOrders"
        //        "leverage" => true, // present in "fetchOpenOrders"
        //        "working" => true // present in "fetchOpenOrders"
        //    }
        //
        // cancelOrder
        //
        //     {
        //         "symbol" => "DOGE/USD",
        //         "orderId" => "00000000-0000-0003-0000-000006db714c",
        //         "price" => "0.13",
        //         "origQty" => "30.0",
        //         "executedQty" => "0.0",
        //         "status" => "CANCELED",
        //         "timeInForce" => "GTC",
        //         "type" => "LIMIT",
        //         "side" => "BUY",
        //     }
        //
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, '/');
        $id = $this->safe_string($order, 'orderId');
        $price = $this->safe_string($order, 'price');
        $amount = $this->safe_string_2($order, 'origQty', 'quantity');
        $filledRaw = $this->safe_string($order, 'executedQty');
        $filled = Precise::string_abs($filledRaw);
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $timeInForce = $this->parse_order_time_in_force($this->safe_string_2($order, 'timeInForce', 'timeInForceType'));
        $type = $this->parse_order_type($this->safe_string($order, 'type'));
        $side = $this->parse_order_side($this->safe_string($order, 'side'));
        $timestamp = $this->safe_integer_n($order, array( 'time', 'transactTime', 'timestamp' ));
        $fills = $this->safe_value($order, 'fills');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'amount' => $amount,
            'cost' => null,
            'average' => null,
            'filled' => $filled,
            'remaining' => null,
            'status' => $status,
            'fee' => null,
            'trades' => $fills,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'NEW' => 'open',
            'CREATED' => 'open',
            'MODIFIED' => 'open',
            'PARTIALLY_FILLED' => 'open',
            'FILLED' => 'closed',
            'CANCELED' => 'canceled',
            'PENDING_CANCEL' => 'canceling',
            'REJECTED' => 'rejected',
            'EXPIRED' => 'expired',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_type($status) {
        $statuses = array(
            'MARKET' => 'market',
            'LIMIT' => 'limit',
            'STOP' => 'stop',
            // temporarily we remove custom mappings
            // 'LIMIT_MAKER' => '',
            // 'STOP_LOSS' => 'stop-loss',
            // 'STOP_LOSS_LIMIT' => 'stop-limit',
            // 'TAKE_PROFIT' => 'take-profit',
            // 'TAKE_PROFIT_LIMIT' => 'take-profit',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_time_in_force($status) {
        $statuses = array(
            'GTC' => 'GTC',
            'FOK' => 'FOK',
            'IOC' => 'IOC',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_side($status) {
        $statuses = array(
            'BUY' => 'buy',
            'SELL' => 'sell',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $accountId = null;
            if ($market['margin']) {
                $accountId = $this->safe_string($this->options, 'accountId');
                $accountId = $this->safe_string($params, 'accountId', $accountId);
                if ($accountId === null) {
                    throw new ArgumentsRequired($this->id . " createOrder() requires an $accountId parameter or an exchange.options['accountId'] option for " . $market['type'] . ' markets');
                }
            }
            $newOrderRespType = $this->safe_value($this->options['newOrderRespType'], $type, 'RESULT');
            $request = array(
                'symbol' => $market['id'],
                'quantity' => $this->amount_to_precision($symbol, $amount),
                'type' => strtoupper($type),
                'side' => strtoupper($side),
                'newOrderRespType' => $newOrderRespType, // 'RESULT' for full order or 'FULL' for order with fills
                // 'leverage' => 1,
                // 'accountId' => 5470306579272968, // required for leverage markets
                // 'takeProfit' => '123.45',
                // 'stopLoss' => '54.321',
                // 'guaranteedStopLoss' => '54.321',
            );
            if ($type === 'limit') {
                $request['price'] = $this->price_to_precision($symbol, $price);
                $request['timeInForce'] = $this->options['defaultTimeInForce'];
            } else {
                if ($type === 'stop') {
                    $request['type'] = 'STOP';
                    $request['price'] = $this->price_to_precision($symbol, $price);
                } elseif ($type === 'market') {
                    $stopPrice = $this->safe_value_2($params, 'triggerPrice', 'stopPrice');
                    $params = $this->omit($params, array( 'triggerPrice', 'stopPrice' ));
                    if ($stopPrice !== null) {
                        $request['type'] = 'STOP';
                        $request['price'] = $this->price_to_precision($symbol, $stopPrice);
                    }
                }
            }
            $response = Async\await($this->privatePostV2Order (array_merge($request, $params)));
            //
            // limit
            //
            //     {
            //         "symbol" => "BTC/USD",
            //         "orderId" => "00000000-0000-0000-0000-000006eaaaa0",
            //         "transactTime" => "1645281669295",
            //         "price" => "30000.00000000",
            //         "origQty" => "0.0002",
            //         "executedQty" => "0.0",  // positive for BUY, negative for SELL
            //         "status" => "NEW",
            //         "timeInForce" => "GTC",
            //         "type" => "LIMIT",
            //         "side" => "BUY",
            //     }
            //
            // $market
            //
            //     {
            //         "symbol" => "DOGE/USD",
            //         "orderId" => "00000000-0000-0000-0000-000006eab8ad",
            //         "transactTime" => "1645283022252",
            //         "price" => "0.14066000",
            //         "origQty" => "40",
            //         "executedQty" => "40.0",  // positive for BUY, negative for SELL
            //         "status" => "FILLED",
            //         "timeInForce" => "FOK",
            //         "type" => "MARKET",
            //         "side" => "BUY",
            //         "fills" => array(
            //             {
            //                 "price" => "0.14094",
            //                 "qty" => "40.0",
            //                 "commission" => "0",
            //                 "commissionAsset" => "dUSD"
            //             }
            //         )
            //     }
            //
            return $this->parse_order($response, $market);
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://apitradedoc.currency.com/swagger-ui.html#/rest-api/getOrderUsingGET
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'orderId' => $id,
                'symbol' => $market['id'],
            );
            $response = Async\await($this->privateGetV2FetchOrder (array_merge($request, $params)));
            //
            //    {
            //        "accountId" => "109698017413125316",
            //        "orderId" => "2810f1c5-0079-54c4-0000-000080421601",
            //        "quantity" => "20.0",
            //        "price" => "0.06",
            //        "timestamp" => "1661157503788",
            //        "status" => "CREATED",
            //        "type" => "LIMIT",
            //        "timeInForceType" => "GTC",
            //        "side" => "BUY",
            //        "margin" => "0.1",
            //        "fills" => array( // might not be present
            //             {
            //                 "price" => "0.14094",
            //                 "qty" => "40.0",
            //                 "commission" => "0",
            //                 "commissionAsset" => "dUSD"
            //             }
            //        )
            //    }
            //
            return $this->parse_order($response);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of  open orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $market = null;
            $request = array();
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            } elseif ($this->options['warnOnFetchOpenOrdersWithoutSymbol']) {
                $symbols = $this->symbols;
                $numSymbols = count($symbols);
                $fetchOpenOrdersRateLimit = $this->parse_to_int($numSymbols / 2);
                throw new ExchangeError($this->id . ' fetchOpenOrders() WARNING => fetching open orders without specifying a $symbol is rate-limited to one call per ' . (string) $fetchOpenOrdersRateLimit . ' seconds. Do not call this method frequently to avoid ban. Set ' . $this->id . '.options["warnOnFetchOpenOrdersWithoutSymbol"] = false to suppress this warning message.');
            }
            $response = Async\await($this->privateGetV2OpenOrders (array_merge($request, $params)));
            //
            //     array(
            //         array(
            //             "symbol" => "DOGE/USD",
            //             "orderId" => "00000000-0000-0003-0000-000004bac57a",
            //             "price" => "0.13",
            //             "origQty" => "39.0",
            //             "executedQty" => "0.0",  // positive for BUY, negative for SELL
            //             "status" => "NEW",
            //             "timeInForce" => "GTC",
            //             "type" => "LIMIT",
            //             "side" => "BUY",
            //             "time" => "1645284216240",
            //             "updateTime" => "1645284216240",
            //             "leverage" => false,
            //             "working" => true
            //         ),
            //     )
            //
            return $this->parse_orders($response, $market, $since, $limit, $params);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $origClientOrderId = $this->safe_value($params, 'origClientOrderId');
            $request = array(
                'symbol' => $market['id'],
                // 'orderId' => intval($id),
                // 'origClientOrderId' => $id,
            );
            if ($origClientOrderId === null) {
                $request['orderId'] = $id;
            } else {
                $request['origClientOrderId'] = $origClientOrderId;
            }
            $response = Async\await($this->privateDeleteV2Order (array_merge($request, $params)));
            //
            //     {
            //         "symbol" => "DOGE/USD",
            //         "orderId" => "00000000-0000-0003-0000-000006db764c",
            //         "price" => "0.13",
            //         "origQty" => "30.0",
            //         "executedQty" => "0.0",  // positive for BUY, negative for SELL
            //         "status" => "CANCELED",
            //         "timeInForce" => "GTC",
            //         "type" => "LIMIT",
            //         "side" => "BUY",
            //     }
            //
            return $this->parse_order($response, $market);
        }) ();
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all trades made by the user
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch trades for
             * @param {int} [$limit] the maximum number of trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetV2MyTrades (array_merge($request, $params)));
            //
            //     array(
            //         array(
            //             "symbol" => "DOGE/USD",
            //             "id" => "116046000",
            //             "orderId" => "00000000-0000-0000-0000-000006dbb8ad",
            //             "price" => "0.14094",
            //             "qty" => "40.0",
            //             "commission" => "0.01",
            //             "commissionAsset" => "USD",
            //             "time" => "1645283022351",
            //             "buyer" => false,
            //             "maker" => false,
            //             "isBuyer" => false,
            //             "isMaker" => false
            //         ),
            //     )
            //
            return $this->parse_trades($response, $market, $since, $limit);
        }) ();
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @param {string} $code unified currency $code
             * @param {int} [$since] the earliest time in ms to fetch deposits for
             * @param {int} [$limit] the maximum number of deposits structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            return Async\await($this->fetch_transactions_by_method('privateGetV2Deposits', $code, $since, $limit, $params));
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @param {string} $code unified currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            return Async\await($this->fetch_transactions_by_method('privateGetV2Withdrawals', $code, $since, $limit, $params));
        }) ();
    }

    public function fetch_deposits_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch history of deposits and withdrawals
             * @param {string} [$code] unified currency $code for the currency of the deposit/withdrawals, default is null
             * @param {int} [$since] timestamp in ms of the earliest deposit/withdrawal, default is null
             * @param {int} [$limit] max number of deposit/withdrawals to return, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
             */
            return Async\await($this->fetch_transactions_by_method('privateGetV2Transactions', $code, $since, $limit, $params));
        }) ();
    }

    public function fetch_transactions_by_method($method, ?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($method, $code, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            if ($method === 'privateGetV2Deposits') {
                $response = Async\await($this->privateGetV2Deposits (array_merge($request, $params)));
            } elseif ($method === 'privateGetV2Withdrawals') {
                $response = Async\await($this->privateGetV2Withdrawals (array_merge($request, $params)));
            } elseif ($method === 'privateGetV2Transactions') {
                $response = Async\await($this->privateGetV2Transactions (array_merge($request, $params)));
            } else {
                throw new NotSupported($this->id . ' fetchTransactionsByMethod() not support this method');
            }
            //
            //    array(
            //        array(
            //            "id" => "616769213",
            //            "balance" => "2.088",
            //            "amount" => "1.304",   // negative for 'withdrawal'
            //            "currency" => "CAKE",
            //            "type" => "deposit",
            //            "timestamp" => "1645282121023",
            //            "paymentMethod" => "BLOCKCHAIN",
            //            "blockchainTransactionHash" => "0x57c68c1f2ae74d5eda5a2a00516361d241a5c9e1ee95bf32573523857c38c112",
            //            "status" => "PROCESSED",
            //            "commission" => "0.14", // this property only exists in withdrawal
            //        ),
            //    )
            //
            return $this->parse_transactions($response, $currency, $since, $limit, $params);
        }) ();
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        //    {
        //        "id" => "616769213",
        //        "balance" => "2.088",
        //        "amount" => "1.304",   // negative for 'withdrawal'
        //        "currency" => "CAKE",
        //        "type" => "deposit",
        //        "timestamp" => "1645282121023",
        //        "paymentMethod" => "BLOCKCHAIN",
        //        "blockchainTransactionHash" => "0x57c68c1f2ae74d5eda5a2a00516361d241a5c9e1ee95bf32573523857c38c112",
        //        "status" => "PROCESSED",
        //        "commission" => "0.14", // this property only exists in withdrawal
        //    }
        //
        $timestamp = $this->safe_integer($transaction, 'timestamp');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $feeCost = $this->safe_string($transaction, 'commission');
        $fee = array(
            'currency' => null,
            'cost' => null,
            'rate' => null,
        );
        if ($feeCost !== null) {
            $fee['currency'] = $code;
            $fee['cost'] = $feeCost;
        }
        return array(
            'info' => $transaction,
            'id' => $this->safe_string($transaction, 'id'),
            'txid' => $this->safe_string($transaction, 'blockchainTransactionHash'),
            'type' => $this->parse_transaction_type($this->safe_string($transaction, 'type')),
            'currency' => $code,
            'network' => null,
            'amount' => $this->safe_number($transaction, 'amount'),
            'status' => $this->parse_transaction_status($this->safe_string($transaction, 'state')),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'address' => null,
            'addressFrom' => null,
            'addressTo' => null,
            'tag' => null,
            'tagFrom' => null,
            'tagTo' => null,
            'updated' => null,
            'internal' => null,
            'comment' => null,
            'fee' => $fee,
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'APPROVAL' => 'pending',
            'PROCESSED' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction_type($type) {
        $types = array(
            'deposit' => 'deposit',
            'withdrawal' => 'withdrawal',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function fetch_ledger(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch the history of changes, actions done by the user or operations that altered balance of the user
             * @param {string} $code unified $currency $code, default is null
             * @param {int} [$since] timestamp in ms of the earliest ledger entry, default is null
             * @param {int} [$limit] max number of ledger entrys to return, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ledger-structure ledger structure~
             */
            Async\await($this->load_markets());
            $request = array();
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetV2Ledger (array_merge($request, $params)));
            // in the below example, first item expresses withdrawal/deposit type, second example expresses trade
            //
            // array(
            //     array(
            //       "id" => "619031398",
            //       "balance" => "0.0",
            //       "amount" => "-1.088",
            //       "currency" => "CAKE",
            //       "type" => "withdrawal",
            //       "timestamp" => "1645460496425",
            //       "commission" => "0.13",
            //       "paymentMethod" => "BLOCKCHAIN", // present in withdrawal/deposit
            //       "blockchainTransactionHash" => "0x400ac905557c3d34638b1c60eba110b3ee0f97f4eb0f7318015ab76e7f16b7d6", // present in withdrawal/deposit
            //       "status" => "PROCESSED"
            //     ),
            //     array(
            //       "id" => "619031034",
            //       "balance" => "8.17223588",
            //       "amount" => "-0.01326294",
            //       "currency" => "USD",
            //       "type" => "exchange_commission",
            //       "timestamp" => "1645460461235",
            //       "commission" => "0.01326294",
            //       "status" => "PROCESSED"
            //     ),
            // )
            //
            return $this->parse_ledger($response, $currency, $since, $limit);
        }) ();
    }

    public function parse_ledger_entry($item, ?array $currency = null) {
        $id = $this->safe_string($item, 'id');
        $amountString = $this->safe_string($item, 'amount');
        $amount = Precise::string_abs($amountString);
        $timestamp = $this->safe_integer($item, 'timestamp');
        $currencyId = $this->safe_string($item, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $feeCost = $this->safe_string($item, 'commission');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array( 'currency' => $code, 'cost' => $feeCost );
        }
        $direction = Precise::string_lt($amountString, '0') ? 'out' : 'in';
        $result = array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'direction' => $direction,
            'account' => null,
            'referenceId' => $this->safe_string($item, 'blockchainTransactionHash'),
            'referenceAccount' => null,
            'type' => $this->parse_ledger_entry_type($this->safe_string($item, 'type')),
            'currency' => $code,
            'amount' => $amount,
            'before' => null,
            'after' => $this->safe_string($item, 'balance'),
            'status' => $this->parse_ledger_entry_status($this->safe_string($item, 'status')),
            'fee' => $fee,
            'info' => $item,
        );
        return $result;
    }

    public function parse_ledger_entry_status($status) {
        $statuses = array(
            'APPROVAL' => 'pending',
            'PROCESSED' => 'ok',
            'CANCELLED' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_ledger_entry_type($type) {
        $types = array(
            'deposit' => 'transaction',
            'withdrawal' => 'transaction',
            'exchange_commission' => 'fee',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function fetch_leverage(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the set leverage for a $market
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->privateGetV2LeverageSettings (array_merge($request, $params)));
            //
            // {
            //     "values" => array( 1, 2, 5, 10, ),
            //     "value" => "10",
            // }
            //
            return $this->safe_number($response, 'value');
        }) ();
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * fetch the deposit address for a $currency associated with this account
             * @param {string} $code unified $currency $code
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $request = array(
                'coin' => $currency['id'],
            );
            $response = Async\await($this->privateGetV2DepositAddress (array_merge($request, $params)));
            //
            //     array( "address":"0x97d64eb014ac779194991e7264f01c74c90327f0" )
            //
            return $this->parse_deposit_address($response, $currency);
        }) ();
    }

    public function parse_deposit_address($depositAddress, ?array $currency = null) {
        $address = $this->safe_string($depositAddress, 'address');
        $this->check_address($address);
        $currency = $this->safe_currency(null, $currency);
        return array(
            'currency' => $currency['code'],
            'address' => $address,
            'tag' => null,
            'network' => null,
            'info' => $depositAddress,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api] . '/' . $path;
        if ($path === 'historicalTrades') {
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $query = $this->urlencode(array_merge(array(
                'timestamp' => $this->nonce(),
                'recvWindow' => $this->options['recvWindow'],
            ), $params));
            $signature = $this->hmac($this->encode($query), $this->encode($this->secret), 'sha256');
            $query .= '&' . 'signature=' . $signature;
            $headers = array(
                'X-MBX-APIKEY' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'DELETE')) {
                $url .= '?' . $query;
            } else {
                $body = $query;
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
            }
        } else {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        $url = $this->implode_hostname($url);
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch all open positions
             * @param {string[]|null} $symbols list of unified market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetV2TradingPositions ($params));
            //
            //    {
            //        "positions" => array(
            //          {
            //            "accountId" => "109698017416453793",
            //            "id" => "00a18490-0079-54c4-0000-0000803e73d3",
            //            "instrumentId" => "45463225268524228",
            //            "orderId" => "00a18490-0079-54c4-0000-0000803e73d2",
            //            "openQuantity" => "13.6",
            //            "openPrice" => "0.75724",
            //            "closeQuantity" => "0.0",
            //            "closePrice" => "0",
            //            "rpl" => "-0.007723848",
            //            "rplConverted" => "0",
            //            "upl" => "-0.006664",
            //            "uplConverted" => "-0.006664",
            //            "swap" => "0",
            //            "swapConverted" => "0",
            //            "fee" => "-0.007723848",
            //            "dividend" => "0",
            //            "margin" => "0.2",
            //            "state" => "ACTIVE",
            //            "currency" => "USD",
            //            "createdTimestamp" => "1645473877236",
            //            "openTimestamp" => "1645473877193",
            //            "type" => "NET",
            //            "cost" => "2.0583600",
            //            "symbol" => "XRP/USD_LEVERAGE"
            //          }
            //        )
            //    }
            //
            $data = $this->safe_value($response, 'positions', array());
            return $this->parse_positions($data, $symbols);
        }) ();
    }

    public function parse_position($position, ?array $market = null) {
        //
        //    {
        //        "accountId" => "109698017416453793",
        //        "id" => "00a18490-0079-54c4-0000-0000803e73d3",
        //        "instrumentId" => "45463225268524228",
        //        "orderId" => "00a18490-0079-54c4-0000-0000803e73d2",
        //        "openQuantity" => "13.6",
        //        "openPrice" => "0.75724",
        //        "closeQuantity" => "0.0",
        //        "closePrice" => "0",
        //        "rpl" => "-0.007723848",
        //        "rplConverted" => "0",
        //        "upl" => "-0.006664",
        //        "uplConverted" => "-0.006664",
        //        "swap" => "0",
        //        "swapConverted" => "0",
        //        "fee" => "-0.007723848",
        //        "dividend" => "0",
        //        "margin" => "0.2",
        //        "state" => "ACTIVE",
        //        "currency" => "USD",
        //        "createdTimestamp" => "1645473877236",
        //        "openTimestamp" => "1645473877193",
        //        "type" => "NET",
        //        "cost" => "2.0583600",
        //        "symbol" => "XRP/USD_LEVERAGE"
        //    }
        //
        $market = $this->safe_market($this->safe_string($position, 'symbol'), $market);
        $symbol = $market['symbol'];
        $timestamp = $this->safe_number($position, 'createdTimestamp');
        $quantityRaw = $this->safe_string($position, 'openQuantity');
        $side = Precise::string_gt($quantityRaw, '0') ? 'long' : 'short';
        $quantity = Precise::string_abs($quantityRaw);
        $entryPrice = $this->safe_number($position, 'openPrice');
        $unrealizedProfit = $this->safe_number($position, 'upl');
        $marginCoeff = $this->safe_string($position, 'margin');
        $leverage = Precise::string_div('1', $marginCoeff);
        return $this->safe_position(array(
            'info' => $position,
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastUpdateTimestamp' => null,
            'contracts' => $this->parse_number($quantity),
            'contractSize' => null,
            'entryPrice' => $entryPrice,
            'collateral' => null,
            'side' => $side,
            // 'realizedProfit' => $this->safe_number($position, 'rpl'),
            'unrealizedProfit' => $unrealizedProfit,
            'leverage' => $leverage,
            'percentage' => null,
            'marginMode' => null,
            'notional' => null,
            'markPrice' => null,
            'lastPrice' => null,
            'liquidationPrice' => null,
            'initialMargin' => null,
            'initialMarginPercentage' => null,
            'maintenanceMargin' => $this->parse_number($marginCoeff),
            'maintenanceMarginPercentage' => null,
            'marginRatio' => null,
            'id' => null,
            'unrealizedPnl' => null,
            'hedged' => null,
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        ));
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (($httpCode === 418) || ($httpCode === 429)) {
            throw new DDoSProtection($this->id . ' ' . (string) $httpCode . ' ' . $reason . ' ' . $body);
        }
        // error $response in a form => array( "code" => -1013, "msg" => "Invalid quantity." )
        // following block cointains legacy checks against $message patterns in "msg" property
        // will switch "code" checks eventually, when we know all of them
        if ($httpCode >= 400) {
            if (mb_strpos($body, 'Price * QTY is zero or less') !== false) {
                throw new InvalidOrder($this->id . ' order cost = amount * price is zero or less ' . $body);
            }
            if (mb_strpos($body, 'LOT_SIZE') !== false) {
                throw new InvalidOrder($this->id . ' order amount should be evenly divisible by lot size ' . $body);
            }
            if (mb_strpos($body, 'PRICE_FILTER') !== false) {
                throw new InvalidOrder($this->id . ' order price is invalid, i.e. exceeds allowed price precision, exceeds min price or max price limits or is invalid float value in general, use $this->price_to_precision(symbol, amount) ' . $body);
            }
        }
        if ($response === null) {
            return null; // fallback to default error handler
        }
        //
        //     array("code":-1128,"msg":"Combination of optional parameters invalid.")
        //
        $errorCode = $this->safe_string($response, 'code');
        if (($errorCode !== null) && ($errorCode !== '0')) {
            $feedback = $this->id . ' ' . $this->json($response);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $message = $this->safe_string($response, 'msg');
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
