<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\coinex as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\BadRequest;
use ccxt\BadSymbol;
use ccxt\InvalidOrder;
use ccxt\NotSupported;
use ccxt\Precise;
use React\Async;
use React\Promise;
use React\Promise\PromiseInterface;

class coinex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'coinex',
            'name' => 'CoinEx',
            'version' => 'v1',
            'countries' => array( 'CN' ),
            // IP ratelimit is 400 requests per second
            // rateLimit = 1000ms / 400 = 2.5
            // 200 per 2 seconds => 100 per second => weight = 4
            // 120 per 2 seconds => 60 per second => weight = 6.667
            // 80 per 2 seconds => 40 per second => weight = 10
            // 60 per 2 seconds => 30 per second => weight = 13.334
            // 40 per 2 seconds => 20 per second => weight = 20
            // 20 per 2 seconds => 10 per second => weight = 40
            'rateLimit' => 2.5,
            'pro' => true,
            'certified' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => true,
                'borrowCrossMargin' => false,
                'borrowIsolatedMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'createDepositAddress' => true,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createOrders' => true,
                'createReduceOnlyOrder' => true,
                'createStopLossOrder' => true,
                'createTakeProfitOrder' => true,
                'createTriggerOrder' => true,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowInterest' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDepositAddressByNetwork' => false,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => true,
                'fetchIsolatedBorrowRates' => true,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => true,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPosition' => true,
                'fetchPositions' => true,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransfer' => false,
                'fetchTransfers' => true,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => true,
                'repayCrossMargin' => false,
                'repayIsolatedMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1min',
                '3m' => '3min',
                '5m' => '5min',
                '15m' => '15min',
                '30m' => '30min',
                '1h' => '1hour',
                '2h' => '2hour',
                '4h' => '4hour',
                '6h' => '6hour',
                '12h' => '12hour',
                '1d' => '1day',
                '3d' => '3day',
                '1w' => '1week',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg',
                'api' => array(
                    'public' => 'https://api.coinex.com',
                    'private' => 'https://api.coinex.com',
                    'perpetualPublic' => 'https://api.coinex.com/perpetual',
                    'perpetualPrivate' => 'https://api.coinex.com/perpetual',
                ),
                'www' => 'https://www.coinex.com',
                'doc' => 'https://github.com/coinexcom/coinex_exchange_api/wiki',
                'fees' => 'https://www.coinex.com/fees',
                'referral' => 'https://www.coinex.com/register?refer_code=yw5fz',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'amm/market' => 1,
                        'common/currency/rate' => 1,
                        'common/asset/config' => 1,
                        'common/maintain/info' => 1,
                        'common/temp-maintain/info' => 1,
                        'margin/market' => 1,
                        'market/info' => 1,
                        'market/list' => 1,
                        'market/ticker' => 1,
                        'market/ticker/all' => 1,
                        'market/depth' => 1,
                        'market/deals' => 1,
                        'market/kline' => 1,
                        'market/detail' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account/amm/balance' => 40,
                        'account/investment/balance' => 40,
                        'account/balance/history' => 40,
                        'account/market/fee' => 40,
                        'balance/coin/deposit' => 40,
                        'balance/coin/withdraw' => 40,
                        'balance/info' => 40,
                        'balance/deposit/address/{coin_type}' => 40,
                        'contract/transfer/history' => 40,
                        'credit/info' => 40,
                        'credit/balance' => 40,
                        'investment/transfer/history' => 40,
                        'margin/account' => 1,
                        'margin/config' => 1,
                        'margin/loan/history' => 40,
                        'margin/transfer/history' => 40,
                        'order/deals' => 40,
                        'order/finished' => 40,
                        'order/pending' => 8,
                        'order/status' => 8,
                        'order/status/batch' => 8,
                        'order/user/deals' => 40,
                        'order/stop/finished' => 40,
                        'order/stop/pending' => 8,
                        'order/user/trade/fee' => 1,
                        'order/market/trade/info' => 1,
                        'sub_account/balance' => 1,
                        'sub_account/transfer/history' => 40,
                        'sub_account/auth/api' => 40,
                        'sub_account/auth/api/{user_auth_id}' => 40,
                    ),
                    'post' => array(
                        'balance/coin/withdraw' => 40,
                        'contract/balance/transfer' => 40,
                        'margin/flat' => 40,
                        'margin/loan' => 40,
                        'margin/transfer' => 40,
                        'order/limit/batch' => 40,
                        'order/ioc' => 13.334,
                        'order/limit' => 13.334,
                        'order/market' => 13.334,
                        'order/modify' => 13.334,
                        'order/stop/limit' => 13.334,
                        'order/stop/market' => 13.334,
                        'order/stop/modify' => 13.334,
                        'sub_account/transfer' => 40,
                        'sub_account/register' => 1,
                        'sub_account/unfrozen' => 40,
                        'sub_account/frozen' => 40,
                        'sub_account/auth/api' => 40,
                    ),
                    'put' => array(
                        'balance/deposit/address/{coin_type}' => 40,
                        'sub_account/unfrozen' => 40,
                        'sub_account/frozen' => 40,
                        'sub_account/auth/api/{user_auth_id}' => 40,
                        'v1/account/settings' => 40,
                    ),
                    'delete' => array(
                        'balance/coin/withdraw' => 40,
                        'order/pending/batch' => 40,
                        'order/pending' => 13.334,
                        'order/stop/pending' => 40,
                        'order/stop/pending/{id}' => 13.334,
                        'order/pending/by_client_id' => 40,
                        'order/stop/pending/by_client_id' => 40,
                        'sub_account/auth/api/{user_auth_id}' => 40,
                        'sub_account/authorize/{id}' => 40,
                    ),
                ),
                'perpetualPublic' => array(
                    'get' => array(
                        'ping' => 1,
                        'time' => 1,
                        'market/list' => 1,
                        'market/limit_config' => 1,
                        'market/ticker' => 1,
                        'market/ticker/all' => 1,
                        'market/depth' => 1,
                        'market/deals' => 1,
                        'market/funding_history' => 1,
                        'market/kline' => 1,
                    ),
                ),
                'perpetualPrivate' => array(
                    'get' => array(
                        'market/user_deals' => 1,
                        'asset/query' => 40,
                        'order/pending' => 8,
                        'order/finished' => 40,
                        'order/stop_finished' => 40,
                        'order/stop_pending' => 8,
                        'order/status' => 8,
                        'order/stop_status' => 8,
                        'position/finished' => 40,
                        'position/pending' => 40,
                        'position/funding' => 40,
                        'position/adl_history' => 40,
                        'market/preference' => 40,
                        'position/margin_history' => 40,
                        'position/settle_history' => 40,
                    ),
                    'post' => array(
                        'market/adjust_leverage' => 1,
                        'market/position_expect' => 1,
                        'order/put_limit' => 20,
                        'order/put_market' => 20,
                        'order/put_stop_limit' => 20,
                        'order/put_stop_market' => 20,
                        'order/modify' => 20,
                        'order/modify_stop' => 20,
                        'order/cancel' => 20,
                        'order/cancel_all' => 40,
                        'order/cancel_batch' => 40,
                        'order/cancel_stop' => 20,
                        'order/cancel_stop_all' => 40,
                        'order/close_limit' => 20,
                        'order/close_market' => 20,
                        'position/adjust_margin' => 20,
                        'position/stop_loss' => 20,
                        'position/take_profit' => 20,
                        'position/market_close' => 20,
                        'order/cancel/by_client_id' => 20,
                        'order/cancel_stop/by_client_id' => 20,
                        'market/preference' => 20,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'maker' => 0.001,
                    'taker' => 0.001,
                ),
                'funding' => array(
                    'withdraw' => array(
                        'BCH' => 0.0,
                        'BTC' => 0.001,
                        'LTC' => 0.001,
                        'ETH' => 0.001,
                        'ZEC' => 0.0001,
                        'DASH' => 0.0001,
                    ),
                ),
            ),
            'limits' => array(
                'amount' => array(
                    'min' => 0.001,
                    'max' => null,
                ),
            ),
            'options' => array(
                'brokerId' => 'x-167673045',
                'createMarketBuyOrderRequiresPrice' => true,
                'defaultType' => 'spot', // spot, swap, margin
                'defaultSubType' => 'linear', // linear, inverse
                'fetchDepositAddress' => array(
                    'fillResponseFromRequest' => true,
                ),
                'accountsById' => array(
                    'spot' => '0',
                ),
                'networks' => array(
                    'BEP20' => 'BSC',
                    'TRX' => 'TRC20',
                    'ETH' => 'ERC20',
                ),
            ),
            'commonCurrencies' => array(
                'ACM' => 'Actinium',
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    // https://github.com/coinexcom/coinex_exchange_api/wiki/013error_code
                    '23' => '\\ccxt\\PermissionDenied', // IP Prohibited
                    '24' => '\\ccxt\\AuthenticationError',
                    '25' => '\\ccxt\\AuthenticationError',
                    '34' => '\\ccxt\\AuthenticationError', // Access id is expires
                    '35' => '\\ccxt\\ExchangeNotAvailable', // Service unavailable
                    '36' => '\\ccxt\\RequestTimeout', // Service timeout
                    '213' => '\\ccxt\\RateLimitExceeded', // Too many requests
                    '107' => '\\ccxt\\InsufficientFunds',
                    '600' => '\\ccxt\\OrderNotFound',
                    '601' => '\\ccxt\\InvalidOrder',
                    '602' => '\\ccxt\\InvalidOrder',
                    '606' => '\\ccxt\\InvalidOrder',
                ),
                'broad' => array(
                    'ip not allow visit' => '\\ccxt\\PermissionDenied',
                ),
            ),
        ));
    }

    public function fetch_currencies($params = array ()) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->publicGetCommonAssetConfig ($params));
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "USDT-ERC20" => array(
            //                  "asset" => "USDT",
            //                  "chain" => "ERC20",
            //                  "withdrawal_precision" => 6,
            //                  "can_deposit" => true,
            //                  "can_withdraw" => true,
            //                  "deposit_least_amount" => "4.9",
            //                  "withdraw_least_amount" => "4.9",
            //                  "withdraw_tx_fee" => "4.9",
            //                  "explorer_asset_url" => "https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7"
            //             ),
            //             ...
            //         ),
            //         "message" => "Success",
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $coins = is_array($data) ? array_keys($data) : array();
            $result = array();
            for ($i = 0; $i < count($coins); $i++) {
                $coin = $coins[$i];
                $currency = $data[$coin];
                $currencyId = $this->safe_string($currency, 'asset');
                $networkId = $this->safe_string($currency, 'chain');
                $code = $this->safe_currency_code($currencyId);
                $precisionString = $this->parse_precision($this->safe_string($currency, 'withdrawal_precision'));
                $precision = $this->parse_number($precisionString);
                $canDeposit = $this->safe_value($currency, 'can_deposit');
                $canWithdraw = $this->safe_value($currency, 'can_withdraw');
                $feeString = $this->safe_string($currency, 'withdraw_tx_fee');
                $fee = $this->parse_number($feeString);
                $minNetworkDepositString = $this->safe_string($currency, 'deposit_least_amount');
                $minNetworkDeposit = $this->parse_number($minNetworkDepositString);
                $minNetworkWithdrawString = $this->safe_string($currency, 'withdraw_least_amount');
                $minNetworkWithdraw = $this->parse_number($minNetworkWithdrawString);
                if ($this->safe_value($result, $code) === null) {
                    $result[$code] = array(
                        'id' => $currencyId,
                        'numericId' => null,
                        'code' => $code,
                        'info' => null,
                        'name' => null,
                        'active' => $canDeposit && $canWithdraw,
                        'deposit' => $canDeposit,
                        'withdraw' => $canWithdraw,
                        'fee' => $fee,
                        'precision' => $precision,
                        'limits' => array(
                            'amount' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'deposit' => array(
                                'min' => $minNetworkDeposit,
                                'max' => null,
                            ),
                            'withdraw' => array(
                                'min' => $minNetworkWithdraw,
                                'max' => null,
                            ),
                        ),
                    );
                }
                $minFeeString = $this->safe_string($result[$code], 'fee');
                if ($feeString !== null) {
                    $minFeeString = ($minFeeString === null) ? $feeString : Precise::string_min($feeString, $minFeeString);
                }
                $depositAvailable = $this->safe_value($result[$code], 'deposit');
                $depositAvailable = ($canDeposit) ? $canDeposit : $depositAvailable;
                $withdrawAvailable = $this->safe_value($result[$code], 'withdraw');
                $withdrawAvailable = ($canWithdraw) ? $canWithdraw : $withdrawAvailable;
                $minDepositString = $this->safe_string($result[$code]['limits']['deposit'], 'min');
                if ($minNetworkDepositString !== null) {
                    $minDepositString = ($minDepositString === null) ? $minNetworkDepositString : Precise::string_min($minNetworkDepositString, $minDepositString);
                }
                $minWithdrawString = $this->safe_string($result[$code]['limits']['withdraw'], 'min');
                if ($minNetworkWithdrawString !== null) {
                    $minWithdrawString = ($minWithdrawString === null) ? $minNetworkWithdrawString : Precise::string_min($minNetworkWithdrawString, $minWithdrawString);
                }
                $minPrecisionString = $this->safe_string($result[$code], 'precision');
                if ($precisionString !== null) {
                    $minPrecisionString = ($minPrecisionString === null) ? $precisionString : Precise::string_min($precisionString, $minPrecisionString);
                }
                $networks = $this->safe_value($result[$code], 'networks', array());
                $network = array(
                    'info' => $currency,
                    'id' => $networkId,
                    'network' => $networkId,
                    'name' => null,
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'deposit' => array(
                            'min' => $this->safe_number($currency, 'deposit_least_amount'),
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->safe_number($currency, 'withdraw_least_amount'),
                            'max' => null,
                        ),
                    ),
                    'active' => $canDeposit && $canWithdraw,
                    'deposit' => $canDeposit,
                    'withdraw' => $canWithdraw,
                    'fee' => $fee,
                    'precision' => $precision,
                );
                $networks[$networkId] = $network;
                $result[$code]['networks'] = $networks;
                $result[$code]['active'] = $depositAvailable && $withdrawAvailable;
                $result[$code]['deposit'] = $depositAvailable;
                $result[$code]['withdraw'] = $withdrawAvailable;
                $info = $this->safe_value($result[$code], 'info', array());
                $info[] = $currency;
                $result[$code]['info'] = $info;
                $result[$code]['fee'] = $this->parse_number($minFeeString);
                $result[$code]['precision'] = $this->parse_number($minPrecisionString);
                $result[$code]['limits']['deposit']['min'] = $this->parse_number($minDepositString);
                $result[$code]['limits']['withdraw']['min'] = $this->parse_number($minWithdrawString);
            }
            return $result;
        }) ();
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for coinex
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market002_all_market_info
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http006_market_list
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $promises = array(
                $this->fetch_spot_markets($params),
                $this->fetch_contract_markets($params),
            );
            $promises = Async\await(Promise\all($promises));
            $spotMarkets = $promises[0];
            $swapMarkets = $promises[1];
            return $this->array_concat($spotMarkets, $swapMarkets);
        }) ();
    }

    public function fetch_spot_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->publicGetMarketInfo ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "WAVESBTC" => {
            //                 "name" => "WAVESBTC",
            //                 "min_amount" => "1",
            //                 "maker_fee_rate" => "0.001",
            //                 "taker_fee_rate" => "0.001",
            //                 "pricing_name" => "BTC",
            //                 "pricing_decimal" => 8,
            //                 "trading_name" => "WAVES",
            //                 "trading_decimal" => 8
            //             }
            //         }
            //     }
            //
            $markets = $this->safe_value($response, 'data', array());
            $result = array();
            $keys = is_array($markets) ? array_keys($markets) : array();
            for ($i = 0; $i < count($keys); $i++) {
                $key = $keys[$i];
                $market = $markets[$key];
                $id = $this->safe_string($market, 'name');
                $tradingName = $this->safe_string($market, 'trading_name');
                $baseId = $tradingName;
                $quoteId = $this->safe_string($market, 'pricing_name');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                if ($tradingName === $id) {
                    $symbol = $id;
                }
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => null,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => null,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'taker' => $this->safe_number($market, 'taker_fee_rate'),
                    'maker' => $this->safe_number($market, 'maker_fee_rate'),
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'trading_decimal'))),
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'pricing_decimal'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'min_amount'),
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_contract_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->perpetualPublicGetMarketList ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => [
            //             array(
            //                 "name" => "BTCUSD",
            //                 "type" => 2, // 1 => USDT-M Contracts, 2 => Coin-M Contracts
            //                 "leverages" => ["3", "5", "8", "10", "15", "20", "30", "50", "100"],
            //                 "stock" => "BTC",
            //                 "money" => "USD",
            //                 "fee_prec" => 5,
            //                 "stock_prec" => 8,
            //                 "money_prec" => 1,
            //                 "amount_prec" => 0,
            //                 "amount_min" => "10",
            //                 "multiplier" => "1",
            //                 "tick_size" => "0.1", // Min. Price Increment
            //                 "available" => true
            //             ),
            //         ],
            //         "message" => "OK"
            //     }
            //
            $markets = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $entry = $markets[$i];
                $fees = $this->fees;
                $leverages = $this->safe_value($entry, 'leverages', array());
                $subType = $this->safe_integer($entry, 'type');
                $linear = ($subType === 1);
                $inverse = ($subType === 2);
                $id = $this->safe_string($entry, 'name');
                $baseId = $this->safe_string($entry, 'stock');
                $quoteId = $this->safe_string($entry, 'money');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $settleId = ($subType === 1) ? 'USDT' : $baseId;
                $settle = $this->safe_currency_code($settleId);
                $symbol = $base . '/' . $quote . ':' . $settle;
                $leveragesLength = count($leverages);
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => $settle,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => $settleId,
                    'type' => 'swap',
                    'spot' => false,
                    'margin' => false,
                    'swap' => true,
                    'future' => false,
                    'option' => false,
                    'active' => $this->safe_value($entry, 'available'),
                    'contract' => true,
                    'linear' => $linear,
                    'inverse' => $inverse,
                    'taker' => $fees['trading']['taker'],
                    'maker' => $fees['trading']['maker'],
                    'contractSize' => $this->safe_number($entry, 'multiplier'),
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($entry, 'amount_prec'))),
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($entry, 'money_prec'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => $this->safe_number($leverages, 0),
                            'max' => $this->safe_number($leverages, $leveragesLength - 1),
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($entry, 'amount_min'),
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $entry,
                );
            }
            return $result;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // Spot fetchTicker, fetchTickers
        //
        //     {
        //         "vol" => "293.19415130",
        //         "low" => "38200.00",
        //         "open" => "39514.99",
        //         "high" => "39530.00",
        //         "last" => "38649.57",
        //         "buy" => "38640.20",
        //         "buy_amount" => "0.22800000",
        //         "sell" => "38640.21",
        //         "sell_amount" => "0.02828439"
        //     }
        //
        // Swap fetchTicker, fetchTickers
        //
        //     {
        //         "vol" => "7714.2175",
        //         "low" => "38200.00",
        //         "open" => "39569.23",
        //         "high" => "39569.23",
        //         "last" => "38681.37",
        //         "buy" => "38681.36",
        //         "period" => 86400,
        //         "funding_time" => 462,
        //         "position_amount" => "296.7552",
        //         "funding_rate_last" => "0.00009395",
        //         "funding_rate_next" => "0.00000649",
        //         "funding_rate_predict" => "-0.00007176",
        //         "insurance" => "16464465.09431942163278132918",
        //         "sign_price" => "38681.93",
        //         "index_price" => "38681.69500000",
        //         "sell_total" => "16.6039",
        //         "buy_total" => "19.8481",
        //         "buy_amount" => "4.6315",
        //         "sell" => "38681.37",
        //         "sell_amount" => "11.4044"
        //     }
        //
        $timestamp = $this->safe_integer($ticker, 'date');
        $symbol = $this->safe_symbol(null, $market);
        $ticker = $this->safe_value($ticker, 'ticker', array());
        $last = $this->safe_string($ticker, 'last');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => $this->safe_string($ticker, 'buy'),
            'bidVolume' => $this->safe_string($ticker, 'buy_amount'),
            'ask' => $this->safe_string($ticker, 'sell'),
            'askVolume' => $this->safe_string($ticker, 'sell_amount'),
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_string_2($ticker, 'vol', 'volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market007_single_market_ticker
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http008_market_ticker
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->perpetualPublicGetMarketTicker (array_merge($request, $params)));
            } else {
                $response = Async\await($this->publicGetMarketTicker (array_merge($request, $params)));
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "date" => 1651306913414,
            //             "ticker" => array(
            //                 "vol" => "293.19415130",
            //                 "low" => "38200.00",
            //                 "open" => "39514.99",
            //                 "high" => "39530.00",
            //                 "last" => "38649.57",
            //                 "buy" => "38640.20",
            //                 "buy_amount" => "0.22800000",
            //                 "sell" => "38640.21",
            //                 "sell_amount" => "0.02828439"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "date" => 1651306641500,
            //             "ticker" => array(
            //                 "vol" => "7714.2175",
            //                 "low" => "38200.00",
            //                 "open" => "39569.23",
            //                 "high" => "39569.23",
            //                 "last" => "38681.37",
            //                 "buy" => "38681.36",
            //                 "period" => 86400,
            //                 "funding_time" => 462,
            //                 "position_amount" => "296.7552",
            //                 "funding_rate_last" => "0.00009395",
            //                 "funding_rate_next" => "0.00000649",
            //                 "funding_rate_predict" => "-0.00007176",
            //                 "insurance" => "16464465.09431942163278132918",
            //                 "sign_price" => "38681.93",
            //                 "index_price" => "38681.69500000",
            //                 "sell_total" => "16.6039",
            //                 "buy_total" => "19.8481",
            //                 "buy_amount" => "4.6315",
            //                 "sell" => "38681.37",
            //                 "sell_amount" => "11.4044"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            return $this->parse_ticker($response['data'], $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market008_all_market_ticker
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http009_market_ticker_all
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $market = null;
            if ($symbols !== null) {
                $symbol = $this->safe_value($symbols, 0);
                $market = $this->market($symbol);
            }
            list($marketType, $query) = $this->handle_market_type_and_params('fetchTickers', $market, $params);
            $response = null;
            if ($marketType === 'swap') {
                $response = Async\await($this->perpetualPublicGetMarketTickerAll ($query));
            } else {
                $response = Async\await($this->publicGetMarketTickerAll ());
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "date" => 1651519857284,
            //             "ticker" => array(
            //                 "PSPUSDT" => array(
            //                     "vol" => "127131.55227034",
            //                     "low" => "0.0669",
            //                     "open" => "0.0688",
            //                     "high" => "0.0747",
            //                     "last" => "0.0685",
            //                     "buy" => "0.0676",
            //                     "buy_amount" => "702.70117866",
            //                     "sell" => "0.0690",
            //                     "sell_amount" => "686.76861562"
            //                 ),
            //             }
            //         ),
            //         "message" => "Ok"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "date" => 1651520268644,
            //             "ticker" => array(
            //                 "KAVAUSDT" => array(
            //                     "vol" => "834924",
            //                     "low" => "3.9418",
            //                     "open" => "4.1834",
            //                     "high" => "4.4328",
            //                     "last" => "4.0516",
            //                     "buy" => "4.0443",
            //                     "period" => 86400,
            //                     "funding_time" => 262,
            //                     "position_amount" => "16111",
            //                     "funding_rate_last" => "-0.00069514",
            //                     "funding_rate_next" => "-0.00061009",
            //                     "funding_rate_predict" => "-0.00055812",
            //                     "insurance" => "16532425.53026084124483989548",
            //                     "sign_price" => "4.0516",
            //                     "index_price" => "4.0530",
            //                     "sell_total" => "59446",
            //                     "buy_total" => "62423",
            //                     "buy_amount" => "959",
            //                     "sell" => "4.0466",
            //                     "sell_amount" => "141"
            //                 ),
            //             }
            //         ),
            //         "message" => "Ok"
            //     }
            //
            $data = $this->safe_value($response, 'data');
            $timestamp = $this->safe_integer($data, 'date');
            $tickers = $this->safe_value($data, 'ticker', array());
            $marketIds = is_array($tickers) ? array_keys($tickers) : array();
            $result = array();
            for ($i = 0; $i < count($marketIds); $i++) {
                $marketId = $marketIds[$i];
                $marketInner = $this->safe_market($marketId, null, null, $marketType);
                $symbol = $marketInner['symbol'];
                $ticker = $this->parse_ticker(array(
                    'date' => $timestamp,
                    'ticker' => $tickers[$marketId],
                ), $marketInner);
                $ticker['symbol'] = $symbol;
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http005_system_time
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->perpetualPublicGetTime ($params));
            //
            //     {
            //         "code" => "0",
            //         "data" => "1653261274414",
            //         "message" => "OK"
            //     }
            //
            return $this->safe_integer($response, 'data');
        }) ();
    }

    public function fetch_order_book(string $symbol, $limit = 20, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market004_market_depth
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http010_market_depth
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($limit === null) {
                $limit = 20; // default
            }
            $request = array(
                'market' => $this->market_id($symbol),
                'merge' => '0',
                'limit' => (string) $limit,
            );
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->perpetualPublicGetMarketDepth (array_merge($request, $params)));
            } else {
                $response = Async\await($this->publicGetMarketDepth (array_merge($request, $params)));
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "asks" => [
            //                 ["41056.33", "0.31727613"],
            //                 ["41056.34", "1.05657294"],
            //                 ["41056.35", "0.02346648"]
            //             ],
            //             "bids" => [
            //                 ["41050.61", "0.40618608"],
            //                 ["41046.98", "0.13800000"],
            //                 ["41046.56", "0.22579234"]
            //             ],
            //             "last" => "41050.61",
            //             "time" => 1650573220346
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "asks" => [
            //                 ["40620.90", "0.0384"],
            //                 ["40625.50", "0.0219"],
            //                 ["40625.90", "0.3506"]
            //             ],
            //             "bids" => [
            //                 ["40620.89", "19.6861"],
            //                 ["40620.80", "0.0012"],
            //                 ["40619.87", "0.0365"]
            //             ],
            //             "last" => "40620.89",
            //             "time" => 1650587672406,
            //             "sign_price" => "40619.32",
            //             "index_price" => "40609.93"
            //         ),
            //         "message" => "OK"
            //     }
            //
            $result = $this->safe_value($response, 'data', array());
            $timestamp = $this->safe_integer($result, 'time');
            return $this->parse_order_book($result, $symbol, $timestamp);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // Spot and Swap fetchTrades (public)
        //
        //      array(
        //          "id" =>  2611511379,
        //          "type" => "buy",
        //          "price" => "192.63",
        //          "amount" => "0.02266931",
        //          "date" =>  1638990110,
        //          "date_ms" =>  1638990110518
        //      ),
        //
        // Spot and Margin fetchMyTrades (private)
        //
        //      {
        //          "id" => 2611520950,
        //          "order_id" => 63286573298,
        //          "account_id" => 0,
        //          "create_time" => 1638990636,
        //          "type" => "sell",
        //          "role" => "taker",
        //          "price" => "192.29",
        //          "amount" => "0.098",
        //          "fee" => "0.03768884",
        //          "fee_asset" => "USDT",
        //          "market" => "AAVEUSDT",
        //          "deal_money" => "18.84442"
        //      }
        //
        // Swap fetchMyTrades (private)
        //
        //     {
        //         "amount" => "0.0012",
        //         "deal_fee" => "0.0237528",
        //         "deal_insurance" => "0",
        //         "deal_margin" => "15.8352",
        //         "deal_order_id" => 17797031903,
        //         "deal_profit" => "0",
        //         "deal_stock" => "47.5056",
        //         "deal_type" => 1,
        //         "deal_user_id" => 2969195,
        //         "fee_asset" => "",
        //         "fee_discount" => "0",
        //         "fee_price" => "0",
        //         "fee_rate" => "0.0005",
        //         "fee_real_rate" => "0.0005",
        //         "id" => 379044296,
        //         "leverage" => "3",
        //         "margin_amount" => "15.8352",
        //         "market" => "BTCUSDT",
        //         "open_price" => "39588",
        //         "order_id" => 17797092987,
        //         "position_amount" => "0.0012",
        //         "position_id" => 62052321,
        //         "position_type" => 1,
        //         "price" => "39588",
        //         "role" => 2,
        //         "side" => 2,
        //         "time" => 1650675936.016103,
        //         "user_id" => 3620173
        //     }
        //
        $timestamp = $this->safe_timestamp_2($trade, 'create_time', 'time');
        if ($timestamp === null) {
            $timestamp = $this->safe_integer($trade, 'date_ms');
        }
        $tradeId = $this->safe_string($trade, 'id');
        $orderId = $this->safe_string($trade, 'order_id');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $marketId = $this->safe_string($trade, 'market');
        $marketType = $this->safe_string($trade, 'market_type');
        $defaultType = ($marketType === null) ? 'spot' : 'swap';
        $market = $this->safe_market($marketId, $market, null, $defaultType);
        $symbol = $market['symbol'];
        $costString = $this->safe_string($trade, 'deal_money');
        $fee = null;
        $feeCostString = $this->safe_string_2($trade, 'fee', 'deal_fee');
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'fee_asset');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        $takerOrMaker = $this->safe_string($trade, 'role');
        if ($takerOrMaker === '1') {
            $takerOrMaker = 'maker';
        } elseif ($takerOrMaker === '2') {
            $takerOrMaker = 'taker';
        }
        $side = null;
        if ($market['type'] === 'swap') {
            $rawSide = $this->safe_integer($trade, 'side');
            if ($rawSide === 1) {
                $side = 'sell';
            } elseif ($rawSide === 2) {
                $side = 'buy';
            }
            if ($side === null) {
                $side = $this->safe_string($trade, 'type');
            }
        } else {
            $side = $this->safe_string($trade, 'type');
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $tradeId,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent trades for a particular $symbol
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market005_market_deals
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http011_market_deals
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                // 'last_id' => 0,
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->perpetualPublicGetMarketDeals (array_merge($request, $params)));
            } else {
                $response = Async\await($this->publicGetMarketDeals (array_merge($request, $params)));
            }
            //
            // Spot and Swap
            //
            //      {
            //          "code" =>    0,
            //          "data" => array(
            //              array(
            //                  "id" =>  2611511379,
            //                  "type" => "buy",
            //                  "price" => "192.63",
            //                  "amount" => "0.02266931",
            //                  "date" =>  1638990110,
            //                  "date_ms" =>  1638990110518
            //                  ),
            //              ),
            //          "message" => "OK"
            //      }
            //
            return $this->parse_trades($response['data'], $market, $since, $limit);
        }) ();
    }

    public function fetch_trading_fee(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the trading fees for a $market
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market003_single_market_info
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->publicGetMarketDetail (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //           "name" => "BTCUSDC",
            //           "min_amount" => "0.0005",
            //           "maker_fee_rate" => "0.002",
            //           "taker_fee_rate" => "0.002",
            //           "pricing_name" => "USDC",
            //           "pricing_decimal" => 2,
            //           "trading_name" => "BTC",
            //           "trading_decimal" => 8
            //         ),
            //         "message" => "OK"
            //      }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_trading_fee($data, $market);
        }) ();
    }

    public function fetch_trading_fees($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch the trading fees for multiple markets
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market002_all_market_info
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$fee-structure $fee structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->publicGetMarketInfo ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "WAVESBTC" => {
            //                 "name" => "WAVESBTC",
            //                 "min_amount" => "1",
            //                 "maker_fee_rate" => "0.001",
            //                 "taker_fee_rate" => "0.001",
            //                 "pricing_name" => "BTC",
            //                 "pricing_decimal" => 8,
            //                 "trading_name" => "WAVES",
            //                 "trading_decimal" => 8
            //             }
            //             ...
            //         }
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($this->symbols); $i++) {
                $symbol = $this->symbols[$i];
                $market = $this->market($symbol);
                $fee = $this->safe_value($data, $market['id'], array());
                $result[$symbol] = $this->parse_trading_fee($fee, $market);
            }
            return $result;
        }) ();
    }

    public function parse_trading_fee($fee, ?array $market = null) {
        $marketId = $this->safe_value($fee, 'name');
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'maker' => $this->safe_number($fee, 'maker_fee_rate'),
            'taker' => $this->safe_number($fee, 'taker_fee_rate'),
            'percentage' => true,
            'tierBased' => true,
        );
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //         1591484400,
        //         "0.02505349",
        //         "0.02506988",
        //         "0.02507000",
        //         "0.02505304",
        //         "343.19716223",
        //         "8.6021323866383196",
        //         "ETHBTC"
        //     )
        //
        return array(
            $this->safe_timestamp($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market006_market_kline
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http012_market_kline
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'type' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->perpetualPublicGetMarketKline (array_merge($request, $params)));
            } else {
                $response = Async\await($this->publicGetMarketKline (array_merge($request, $params)));
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => [
            //             [1591484400, "0.02505349", "0.02506988", "0.02507000", "0.02505304", "343.19716223", "8.6021323866383196", "ETHBTC"],
            //             [1591484700, "0.02506990", "0.02508109", "0.02508109", "0.02506979", "91.59841581", "2.2972047780447000", "ETHBTC"],
            //             [1591485000, "0.02508106", "0.02507996", "0.02508106", "0.02507500", "65.15307697", "1.6340597822306000", "ETHBTC"],
            //         ],
            //         "message" => "OK"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => [
            //             [1650569400, "41524.64", "41489.31", "41564.61", "41480.58", "29.7060", "1233907.099562"],
            //             [1650569700, "41489.31", "41438.29", "41489.31", "41391.87", "42.4115", "1756154.189061"],
            //             [1650570000, "41438.29", "41482.21", "41485.05", "41427.31", "22.2892", "924000.317861"]
            //         ],
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_margin_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $symbol = $this->safe_string($params, 'symbol');
            $marketId = $this->safe_string($params, 'market');
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $marketId = $market['id'];
            } elseif ($marketId === null) {
                throw new ArgumentsRequired($this->id . ' fetchMarginBalance() fetching a margin account requires a $market parameter or a $symbol parameter');
            }
            $params = $this->omit($params, array( 'symbol', 'market' ));
            $request = array(
                'market' => $marketId,
            );
            $response = Async\await($this->privateGetMarginAccount (array_merge($request, $params)));
            //
            //      {
            //          "code" =>    0,
            //           "data" => array(
            //              "account_id" =>    126,
            //              "leverage" =>    3,
            //              "market_type" =>   "AAVEUSDT",
            //              "sell_asset_type" =>   "AAVE",
            //              "buy_asset_type" =>   "USDT",
            //              "balance" => array(
            //                  "sell_type" => "0.3",     // borrowed
            //                  "buy_type" => "30"
            //                  ),
            //              "frozen" => array(
            //                  "sell_type" => "0",
            //                  "buy_type" => "0"
            //                  ),
            //              "loan" => array(
            //                  "sell_type" => "0.3", // $loan
            //                  "buy_type" => "0"
            //                  ),
            //              "interest" => array(
            //                  "sell_type" => "0.0000125",
            //                  "buy_type" => "0"
            //                  ),
            //              "can_transfer" => array(
            //                  "sell_type" => "0.02500646",
            //                  "buy_type" => "4.28635738"
            //                  ),
            //              "warn_rate" =>   "",
            //              "liquidation_price" =>   ""
            //              ),
            //          "message" => "Success"
            //      }
            //
            $result = array( 'info' => $response );
            $data = $this->safe_value($response, 'data', array());
            $free = $this->safe_value($data, 'can_transfer', array());
            $total = $this->safe_value($data, 'balance', array());
            $loan = $this->safe_value($data, 'loan', array());
            $interest = $this->safe_value($data, 'interest', array());
            //
            $sellAccount = $this->account();
            $sellCurrencyId = $this->safe_string($data, 'sell_asset_type');
            $sellCurrencyCode = $this->safe_currency_code($sellCurrencyId);
            $sellAccount['free'] = $this->safe_string($free, 'sell_type');
            $sellAccount['total'] = $this->safe_string($total, 'sell_type');
            $sellDebt = $this->safe_string($loan, 'sell_type');
            $sellInterest = $this->safe_string($interest, 'sell_type');
            $sellAccount['debt'] = Precise::string_add($sellDebt, $sellInterest);
            $result[$sellCurrencyCode] = $sellAccount;
            //
            $buyAccount = $this->account();
            $buyCurrencyId = $this->safe_string($data, 'buy_asset_type');
            $buyCurrencyCode = $this->safe_currency_code($buyCurrencyId);
            $buyAccount['free'] = $this->safe_string($free, 'buy_type');
            $buyAccount['total'] = $this->safe_string($total, 'buy_type');
            $buyDebt = $this->safe_string($loan, 'buy_type');
            $buyInterest = $this->safe_string($interest, 'buy_type');
            $buyAccount['debt'] = Precise::string_add($buyDebt, $buyInterest);
            $result[$buyCurrencyCode] = $buyAccount;
            //
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_spot_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetBalanceInfo ($params));
            //
            //     {
            //       "code" => 0,
            //       "data" => {
            //         "BCH" => array(                     # BCH $account
            //           "available" => "13.60109",   # Available BCH
            //           "frozen" => "0.00000"        # Frozen BCH
            //         ),
            //         "BTC" => array(                     # BTC $account
            //           "available" => "32590.16",   # Available BTC
            //           "frozen" => "7000.00"        # Frozen BTC
            //         ),
            //         "ETH" => array(                     # ETH $account
            //           "available" => "5.06000",    # Available ETH
            //           "frozen" => "0.00000"        # Frozen ETH
            //         }
            //       ),
            //       "message" => "Ok"
            //     }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_value($response, 'data', array());
            $currencyIds = is_array($balances) ? array_keys($balances) : array();
            for ($i = 0; $i < count($currencyIds); $i++) {
                $currencyId = $currencyIds[$i];
                $code = $this->safe_currency_code($currencyId);
                $balance = $this->safe_value($balances, $currencyId, array());
                $account = $this->account();
                $account['free'] = $this->safe_string($balance, 'available');
                $account['used'] = $this->safe_string($balance, 'frozen');
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_swap_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->perpetualPrivateGetAssetQuery ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "USDT" => array(
            //                 "available" => "37.24817690383456000000",
            //                 "balance_total" => "37.24817690383456000000",
            //                 "frozen" => "0.00000000000000000000",
            //                 "margin" => "0.00000000000000000000",
            //                 "profit_unreal" => "0.00000000000000000000",
            //                 "transfer" => "37.24817690383456000000"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_value($response, 'data', array());
            $currencyIds = is_array($balances) ? array_keys($balances) : array();
            for ($i = 0; $i < count($currencyIds); $i++) {
                $currencyId = $currencyIds[$i];
                $code = $this->safe_currency_code($currencyId);
                $balance = $this->safe_value($balances, $currencyId, array());
                $account = $this->account();
                $account['free'] = $this->safe_string($balance, 'available');
                $account['used'] = $this->safe_string($balance, 'frozen');
                $account['total'] = $this->safe_string($balance, 'balance_total');
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_financial_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetAccountInvestmentBalance ($params));
            //
            //     {
            //          "code" => 0,
            //          "data" => array(
            //              array(
            //                  "asset" => "CET",
            //                  "available" => "0",
            //                  "frozen" => "0",
            //                  "lock" => "0",
            //              ),
            //              {
            //                  "asset" => "USDT",
            //                  "available" => "999900",
            //                  "frozen" => "0",
            //                  "lock" => "0"
            //              }
            //          ),
            //          "message" => "Success"
            //      }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_value($response, 'data', array());
            for ($i = 0; $i < count($balances); $i++) {
                $balance = $balances[$i];
                $currencyId = $this->safe_string($balance, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($balance, 'available');
                $frozen = $this->safe_string($balance, 'frozen');
                $locked = $this->safe_string($balance, 'lock');
                $account['used'] = Precise::string_add($frozen, $locked);
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account001_account_info         // spot
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account004_investment_balance   // financial
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account006_margin_account       // margin
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http016_asset_query       // swap
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->type] 'margin', 'swap', 'financial', or 'spot'
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchBalance', null, $params);
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchBalance', $params);
            $marketType = ($marginMode !== null) ? 'margin' : $marketType;
            $params = $this->omit($params, 'margin');
            if ($marketType === 'margin') {
                return Async\await($this->fetch_margin_balance($params));
            } elseif ($marketType === 'swap') {
                return Async\await($this->fetch_swap_balance($params));
            } elseif ($marketType === 'financial') {
                return Async\await($this->fetch_financial_balance($params));
            } else {
                return Async\await($this->fetch_spot_balance($params));
            }
        }) ();
    }

    public function parse_order_status($status) {
        $statuses = array(
            'rejected' => 'rejected',
            'open' => 'open',
            'not_deal' => 'open',
            'part_deal' => 'open',
            'done' => 'closed',
            'cancel' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // fetchOrder
        //
        //     {
        //         "amount" => "0.1",
        //         "asset_fee" => "0.22736197736197736197",
        //         "avg_price" => "196.85000000000000000000",
        //         "create_time" => 1537270135,
        //         "deal_amount" => "0.1",
        //         "deal_fee" => "0",
        //         "deal_money" => "19.685",
        //         "fee_asset" => "CET",
        //         "fee_discount" => "0.5",
        //         "id" => 1788259447,
        //         "left" => "0",
        //         "maker_fee_rate" => "0",
        //         "market" => "ETHUSDT",
        //         "order_type" => "limit",
        //         "price" => "170.00000000",
        //         "status" => "done",
        //         "taker_fee_rate" => "0.0005",
        //         "type" => "sell",
        //         "client_id" => "",
        //     }
        //
        // Spot and Margin createOrder, createOrders, cancelOrder, cancelOrders, fetchOrder
        //
        //      {
        //          "amount":"1.5",
        //          "asset_fee":"0",
        //          "avg_price":"0.14208538",
        //          "client_id":"",
        //          "create_time":1650993819,
        //          "deal_amount":"10.55703267",
        //          "deal_fee":"0.0029999999971787292",
        //          "deal_money":"1.4999999985893646",
        //          "fee_asset":null,
        //          "fee_discount":"1",
        //          "finished_time":null,
        //          "id":74556296907,
        //          "left":"0.0000000014106354",
        //          "maker_fee_rate":"0",
        //          "market":"DOGEUSDT",
        //          "money_fee":"0.0029999999971787292",
        //          "order_type":"market",
        //          "price":"0",
        //          "status":"done",
        //          "stock_fee":"0",
        //          "taker_fee_rate":"0.002",
        //          "type":"buy"
        //          "client_id" => "",
        //      }
        //
        // Swap createOrder, cancelOrder, fetchOrder
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651004578.618224,
        //         "deal_asset_fee" => "0.00000000000000000000",
        //         "deal_fee" => "0.00000000000000000000",
        //         "deal_profit" => "0.00000000000000000000",
        //         "deal_stock" => "0.00000000000000000000",
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "last_deal_amount" => "0.00000000000000000000",
        //         "last_deal_id" => 0,
        //         "last_deal_price" => "0.00000000000000000000",
        //         "last_deal_role" => 0,
        //         "last_deal_time" => 0,
        //         "last_deal_type" => 0,
        //         "left" => "0.0005",
        //         "leverage" => "3",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18221659097,
        //         "position_id" => 0,
        //         "position_type" => 1,
        //         "price" => "30000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "stop_id" => 0,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1651004578.618224,
        //         "user_id" => 3620173
        //     }
        //
        // Stop $order createOrder
        //
        //     array("status":"success")
        //
        // Swap Stop cancelOrder, fetchOrder
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651034023.008771,
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18256915101,
        //         "price" => "31000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "state" => 1,
        //         "stop_price" => "31500.00",
        //         "stop_type" => 1,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1651034397.193624,
        //         "user_id" => 3620173
        //     }
        //
        //
        // Spot and Margin fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "account_id" => 0,
        //         "amount" => "0.0005",
        //         "asset_fee" => "0",
        //         "avg_price" => "0.00",
        //         "client_id" => "",
        //         "create_time" => 1651089247,
        //         "deal_amount" => "0",
        //         "deal_fee" => "0",
        //         "deal_money" => "0",
        //         "fee_asset" => null,
        //         "fee_discount" => "1",
        //         "finished_time" => 0,
        //         "id" => 74660190839,
        //         "left" => "0.0005",
        //         "maker_fee_rate" => "0.002",
        //         "market" => "BTCUSDT",
        //         "money_fee" => "0",
        //         "order_type" => "limit",
        //         "price" => "31000",
        //         "status" => "not_deal",
        //         "stock_fee" => "0",
        //         "taker_fee_rate" => "0.002",
        //         "type" => "buy"
        //     }
        //
        // Swap fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651030414.088431,
        //         "deal_asset_fee" => "0",
        //         "deal_fee" => "0.00960069",
        //         "deal_profit" => "0.009825",
        //         "deal_stock" => "19.20138",
        //         "effect_type" => 0,
        //         "fee_asset" => "",
        //         "fee_discount" => "0",
        //         "left" => "0",
        //         "leverage" => "3",
        //         "maker_fee" => "0",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18253447431,
        //         "position_id" => 0,
        //         "position_type" => 1,
        //         "price" => "0",
        //         "side" => 1,
        //         "source" => "web",
        //         "stop_id" => 0,
        //         "taker_fee" => "0.0005",
        //         "target" => 0,
        //         "type" => 2,
        //         "update_time" => 1651030414.08847,
        //         "user_id" => 3620173
        //     }
        //
        // Spot and Margin Stop fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "account_id" => 0,
        //         "amount" => "155",
        //         "client_id" => "",
        //         "create_time" => 1651089182,
        //         "fee_asset" => null,
        //         "fee_discount" => "1",
        //         "maker_fee" => "0.002",
        //         "market" => "BTCUSDT",
        //         "order_id" => 74660111965,
        //         "order_type" => "market",
        //         "price" => "0",
        //         "state" => 0,
        //         "stop_price" => "31500",
        //         "taker_fee" => "0.002",
        //         "type" => "buy"
        //     }
        //
        // Swap Stop fetchOpenOrders
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "",
        //         "create_time" => 1651089147.321691,
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "order_id" => 18332143848,
        //         "price" => "31000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "state" => 1,
        //         "stop_price" => "31500.00",
        //         "stop_type" => 1,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1651089147.321691,
        //         "user_id" => 3620173
        //     }
        //
        // swap => cancelOrders
        //
        //     {
        //         "amount" => "0.0005",
        //         "client_id" => "x-167673045-b0cee0c584718b65",
        //         "create_time" => 1701233683.294231,
        //         "deal_asset_fee" => "0.00000000000000000000",
        //         "deal_fee" => "0.00000000000000000000",
        //         "deal_profit" => "0.00000000000000000000",
        //         "deal_stock" => "0.00000000000000000000",
        //         "effect_type" => 1,
        //         "fee_asset" => "",
        //         "fee_discount" => "0.00000000000000000000",
        //         "last_deal_amount" => "0.00000000000000000000",
        //         "last_deal_id" => 0,
        //         "last_deal_price" => "0.00000000000000000000",
        //         "last_deal_role" => 0,
        //         "last_deal_time" => 0,
        //         "last_deal_type" => 0,
        //         "left" => "0.0005",
        //         "leverage" => "3",
        //         "maker_fee" => "0.00030",
        //         "market" => "BTCUSDT",
        //         "option" => 0,
        //         "order_id" => 115940476323,
        //         "position_id" => 0,
        //         "position_type" => 2,
        //         "price" => "25000.00",
        //         "side" => 2,
        //         "source" => "api.v1",
        //         "stop_id" => 0,
        //         "stop_loss_price" => "0.00000000000000000000",
        //         "stop_loss_type" => 0,
        //         "take_profit_price" => "0.00000000000000000000",
        //         "take_profit_type" => 0,
        //         "taker_fee" => "0.00050",
        //         "target" => 0,
        //         "type" => 1,
        //         "update_time" => 1701233721.718884,
        //         "user_id" => 3620173
        //     }
        //
        $rawStatus = $this->safe_string($order, 'status');
        $timestamp = $this->safe_timestamp($order, 'create_time');
        $marketId = $this->safe_string($order, 'market');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $orderType = (is_array($order) && array_key_exists('source', $order)) ? 'swap' : $defaultType;
        $market = $this->safe_market($marketId, $market, null, $orderType);
        $feeCurrencyId = $this->safe_string($order, 'fee_asset');
        $feeCurrency = $this->safe_currency_code($feeCurrencyId);
        if ($feeCurrency === null) {
            $feeCurrency = $market['quote'];
        }
        $rawSide = $this->safe_integer($order, 'side');
        $side = null;
        if ($rawSide === 1) {
            $side = 'sell';
        } elseif ($rawSide === 2) {
            $side = 'buy';
        } else {
            $side = $this->safe_string($order, 'type');
        }
        $rawType = $this->safe_string($order, 'order_type');
        $type = null;
        if ($rawType === null) {
            $typeInteger = $this->safe_integer($order, 'type');
            if ($typeInteger === 1) {
                $type = 'limit';
            } elseif ($typeInteger === 2) {
                $type = 'market';
            }
        } else {
            $type = $rawType;
        }
        $clientOrderId = $this->safe_string($order, 'client_id');
        if ($clientOrderId === '') {
            $clientOrderId = null;
        }
        return $this->safe_order(array(
            'id' => $this->safe_string_2($order, 'id', 'order_id'),
            'clientOrderId' => $clientOrderId,
            'datetime' => $this->iso8601($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => $this->safe_timestamp($order, 'update_time'),
            'status' => $this->parse_order_status($rawStatus),
            'symbol' => $market['symbol'],
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'reduceOnly' => null,
            'side' => $side,
            'price' => $this->safe_string($order, 'price'),
            'stopPrice' => $this->safe_string($order, 'stop_price'),
            'triggerPrice' => $this->safe_string($order, 'stop_price'),
            'takeProfitPrice' => $this->safe_number($order, 'take_profit_price'),
            'stopLossPrice' => $this->safe_number($order, 'stop_loss_price'),
            'cost' => $this->safe_string($order, 'deal_money'),
            'average' => $this->safe_string($order, 'avg_price'),
            'amount' => $this->safe_string($order, 'amount'),
            'filled' => $this->safe_string($order, 'deal_amount'),
            'remaining' => $this->safe_string($order, 'left'),
            'trades' => null,
            'fee' => array(
                'currency' => $feeCurrency,
                'cost' => $this->safe_string($order, 'deal_fee'),
            ),
            'info' => $order,
        ), $market);
    }

    public function create_market_buy_order_with_cost(string $symbol, $cost, $params = array ()) {
        return Async\async(function () use ($symbol, $cost, $params) {
            /**
             * create a $market buy order by providing the $symbol and $cost
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade003_market_order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {float} $cost how much you want to trade in units of the quote currency
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['spot']) {
                throw new NotSupported($this->id . ' createMarketBuyOrderWithCost() supports spot orders only');
            }
            $params['createMarketBuyOrderRequiresPrice'] = false;
            return Async\await($this->create_order($symbol, 'market', 'buy', $cost, null, $params));
        }) ();
    }

    public function create_order_request($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $market = $this->market($symbol);
        $swap = $market['swap'];
        $clientOrderId = $this->safe_string_2($params, 'client_id', 'clientOrderId');
        $stopPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
        $stopLossPrice = $this->safe_value($params, 'stopLossPrice');
        $takeProfitPrice = $this->safe_value($params, 'takeProfitPrice');
        $option = $this->safe_string($params, 'option');
        $isMarketOrder = $type === 'market';
        $postOnly = $this->is_post_only($isMarketOrder, $option === 'MAKER_ONLY', $params);
        $positionId = $this->safe_integer_2($params, 'position_id', 'positionId'); // Required for closing $swap positions
        $timeInForceRaw = $this->safe_string($params, 'timeInForce'); // Spot => IOC, FOK, PO, GTC, ... NORMAL (default), MAKER_ONLY
        $reduceOnly = $this->safe_value($params, 'reduceOnly');
        if ($reduceOnly) {
            if (!$market['swap']) {
                throw new InvalidOrder($this->id . ' createOrder() does not support $reduceOnly for ' . $market['type'] . ' orders, $reduceOnly orders are supported for $swap markets only');
            }
            if ($positionId === null) {
                throw new ArgumentsRequired($this->id . ' createOrder() requires a position_id/positionId parameter for $reduceOnly orders');
            }
        }
        $request = array(
            'market' => $market['id'],
        );
        if ($clientOrderId === null) {
            $defaultId = 'x-167673045';
            $brokerId = $this->safe_string($this->options, 'brokerId', $defaultId);
            $request['client_id'] = $brokerId . '-' . $this->uuid16();
        } else {
            $request['client_id'] = $clientOrderId;
        }
        if ($swap) {
            if ($stopLossPrice || $takeProfitPrice) {
                $request['stop_type'] = $this->safe_integer($params, 'stop_type', 1); // 1 => triggered by the latest transaction, 2 => mark $price, 3 => index $price
                if ($positionId === null) {
                    throw new ArgumentsRequired($this->id . ' createOrder() requires a position_id parameter for stop loss and take profit orders');
                }
                $request['position_id'] = $positionId;
                if ($stopLossPrice) {
                    $request['stop_loss_price'] = $this->price_to_precision($symbol, $stopLossPrice);
                } elseif ($takeProfitPrice) {
                    $request['take_profit_price'] = $this->price_to_precision($symbol, $takeProfitPrice);
                }
            } else {
                $requestSide = ($side === 'buy') ? 2 : 1;
                if ($stopPrice !== null) {
                    $request['stop_price'] = $this->price_to_precision($symbol, $stopPrice);
                    $request['stop_type'] = $this->safe_integer($params, 'stop_type', 1); // 1 => triggered by the latest transaction, 2 => mark $price, 3 => index $price;
                    $request['amount'] = $this->amount_to_precision($symbol, $amount);
                    $request['side'] = $requestSide;
                    if ($type === 'limit') {
                        $request['price'] = $this->price_to_precision($symbol, $price);
                    }
                    $request['amount'] = $this->amount_to_precision($symbol, $amount);
                }
                $timeInForce = null;
                if (($type !== 'market') || ($stopPrice !== null)) {
                    if ($postOnly) {
                        $request['option'] = 1;
                    } elseif ($timeInForceRaw !== null) {
                        if ($timeInForceRaw === 'IOC') {
                            $timeInForce = 2;
                        } elseif ($timeInForceRaw === 'FOK') {
                            $timeInForce = 3;
                        } else {
                            $timeInForce = 1;
                        }
                        $request['effect_type'] = $timeInForce; // exchange takes 'IOC' and 'FOK'
                    }
                }
                if ($type === 'limit' && $stopPrice === null) {
                    if ($reduceOnly) {
                        $request['position_id'] = $positionId;
                    } else {
                        $request['side'] = $requestSide;
                    }
                    $request['price'] = $this->price_to_precision($symbol, $price);
                    $request['amount'] = $this->amount_to_precision($symbol, $amount);
                } elseif ($type === 'market' && $stopPrice === null) {
                    if ($reduceOnly) {
                        $request['position_id'] = $positionId;
                    } else {
                        $request['side'] = $requestSide;
                        $request['amount'] = $this->amount_to_precision($symbol, $amount);
                    }
                }
            }
        } else {
            $request['type'] = $side;
            if (($type === 'market') && ($side === 'buy')) {
                $createMarketBuyOrderRequiresPrice = true;
                list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
                $cost = $this->safe_number($params, 'cost');
                $params = $this->omit($params, 'cost');
                if ($createMarketBuyOrderRequiresPrice) {
                    if (($price === null) && ($cost === null)) {
                        throw new InvalidOrder($this->id . ' createOrder() requires the $price argument for $market buy orders to calculate the total $cost to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice $option or param to false and pass the $cost to spend in the $amount argument');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $quoteAmount = $this->parse_to_numeric(Precise::string_mul($amountString, $priceString));
                        $costRequest = ($cost !== null) ? $cost : $quoteAmount;
                        $request['amount'] = $this->cost_to_precision($symbol, $costRequest);
                    }
                } else {
                    $request['amount'] = $this->cost_to_precision($symbol, $amount);
                }
            } else {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if (($type === 'limit') || ($type === 'ioc')) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            if ($stopPrice !== null) {
                $request['stop_price'] = $this->price_to_precision($symbol, $stopPrice);
            }
            if (($type !== 'market') || ($stopPrice !== null)) {
                // following options cannot be applied to vanilla $market orders (but can be applied to stop-$market orders)
                if (($timeInForceRaw !== null) || $postOnly) {
                    if (($postOnly || ($timeInForceRaw !== 'IOC')) && (($type === 'limit') && ($stopPrice !== null))) {
                        throw new InvalidOrder($this->id . ' createOrder() only supports the IOC $option for stop-limit orders');
                    }
                    if ($postOnly) {
                        $request['option'] = 'MAKER_ONLY';
                    } else {
                        if ($timeInForceRaw !== null) {
                            $request['option'] = $timeInForceRaw; // exchange takes 'IOC' and 'FOK'
                        }
                    }
                }
            }
        }
        $accountId = $this->safe_integer($params, 'account_id');
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('createOrder', $params);
        if ($marginMode !== null) {
            if ($accountId === null) {
                throw new BadRequest($this->id . ' createOrder() requires an account_id parameter for margin orders');
            }
            $request['account_id'] = $accountId;
        }
        $params = $this->omit($params, array( 'reduceOnly', 'positionId', 'timeInForce', 'postOnly', 'stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice' ));
        return array_merge($request, $params);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade001_limit_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade003_market_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade004_IOC_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade005_stop_limit_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade006_stop_market_order
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http017_put_limit
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http018_put_market
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http019_put_limit_stop
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http020_put_market_stop
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http031_market_close
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http030_limit_close
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much you want to trade in units of the base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {float} [$params->triggerPrice] $price to trigger stop orders
             * @param {float} [$params->stopLossPrice] $price to trigger stop loss orders
             * @param {float} [$params->takeProfitPrice] $price to trigger take profit orders
             * @param {string} [$params->timeInForce] 'GTC', 'IOC', 'FOK', 'PO'
             * @param {boolean} [$params->postOnly] set to true if you wish to make a post only order
             * @param {boolean} [$params->reduceOnly] *contract only* indicates if this order is to reduce the size of a position
             * @param {int} [$params->position_id] *required for reduce only orders* the position id to reduce
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $reduceOnly = $this->safe_value($params, 'reduceOnly');
            $triggerPrice = $this->safe_number_2($params, 'stopPrice', 'triggerPrice');
            $stopLossTriggerPrice = $this->safe_number($params, 'stopLossPrice');
            $takeProfitTriggerPrice = $this->safe_number($params, 'takeProfitPrice');
            $isTriggerOrder = $triggerPrice !== null;
            $isStopLossTriggerOrder = $stopLossTriggerPrice !== null;
            $isTakeProfitTriggerOrder = $takeProfitTriggerPrice !== null;
            $isStopLossOrTakeProfitTrigger = $isStopLossTriggerOrder || $isTakeProfitTriggerOrder;
            $request = $this->create_order_request($symbol, $type, $side, $amount, $price, $params);
            $response = null;
            if ($market['spot']) {
                if ($isTriggerOrder) {
                    if ($type === 'limit') {
                        $response = Async\await($this->privatePostOrderStopLimit ($request));
                    } else {
                        $response = Async\await($this->privatePostOrderStopMarket ($request));
                    }
                } else {
                    if ($type === 'limit') {
                        $response = Async\await($this->privatePostOrderLimit ($request));
                    } else {
                        $response = Async\await($this->privatePostOrderMarket ($request));
                    }
                }
            } else {
                if ($isTriggerOrder) {
                    if ($type === 'limit') {
                        $response = Async\await($this->perpetualPrivatePostOrderPutStopLimit ($request));
                    } else {
                        $response = Async\await($this->perpetualPrivatePostOrderPutStopMarket ($request));
                    }
                } elseif ($isStopLossOrTakeProfitTrigger) {
                    if ($isStopLossTriggerOrder) {
                        $response = Async\await($this->perpetualPrivatePostPositionStopLoss ($request));
                    } elseif ($isTakeProfitTriggerOrder) {
                        $response = Async\await($this->perpetualPrivatePostPositionTakeProfit ($request));
                    }
                } else {
                    if ($reduceOnly) {
                        if ($type === 'limit') {
                            $response = Async\await($this->perpetualPrivatePostOrderCloseLimit ($request));
                        } else {
                            $response = Async\await($this->perpetualPrivatePostOrderCloseMarket ($request));
                        }
                    } else {
                        if ($type === 'limit') {
                            $response = Async\await($this->perpetualPrivatePostOrderPutLimit ($request));
                        } else {
                            $response = Async\await($this->perpetualPrivatePostOrderPutMarket ($request));
                        }
                    }
                }
            }
            //
            // Spot and Margin
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "asset_fee" => "0",
            //             "avg_price" => "0.00",
            //             "client_id" => "",
            //             "create_time" => 1650951627,
            //             "deal_amount" => "0",
            //             "deal_fee" => "0",
            //             "deal_money" => "0",
            //             "fee_asset" => null,
            //             "fee_discount" => "1",
            //             "finished_time" => null,
            //             "id" => 74510932594,
            //             "left" => "0.0005",
            //             "maker_fee_rate" => "0.002",
            //             "market" => "BTCUSDT",
            //             "money_fee" => "0",
            //             "order_type" => "limit",
            //             "price" => "30000",
            //             "status" => "not_deal",
            //             "stock_fee" => "0",
            //             "taker_fee_rate" => "0.002",
            //             "type" => "buy"
            //         ),
            //         "message" => "Success"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "client_id" => "",
            //             "create_time" => 1651004578.618224,
            //             "deal_asset_fee" => "0.00000000000000000000",
            //             "deal_fee" => "0.00000000000000000000",
            //             "deal_profit" => "0.00000000000000000000",
            //             "deal_stock" => "0.00000000000000000000",
            //             "effect_type" => 1,
            //             "fee_asset" => "",
            //             "fee_discount" => "0.00000000000000000000",
            //             "last_deal_amount" => "0.00000000000000000000",
            //             "last_deal_id" => 0,
            //             "last_deal_price" => "0.00000000000000000000",
            //             "last_deal_role" => 0,
            //             "last_deal_time" => 0,
            //             "last_deal_type" => 0,
            //             "left" => "0.0005",
            //             "leverage" => "3",
            //             "maker_fee" => "0.00030",
            //             "market" => "BTCUSDT",
            //             "order_id" => 18221659097,
            //             "position_id" => 0,
            //             "position_type" => 1,
            //             "price" => "30000.00",
            //             "side" => 2,
            //             "source" => "api.v1",
            //             "stop_id" => 0,
            //             "taker_fee" => "0.00050",
            //             "target" => 0,
            //             "type" => 1,
            //             "update_time" => 1651004578.618224,
            //             "user_id" => 3620173
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Stop Order
            //
            //     array("code":0,"data":array("status":"success"),"message":"OK")
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function create_orders(array $orders, $params = array ()): PromiseInterface {
        return Async\async(function () use ($orders, $params) {
            /**
             * create a list of trade $orders (all $orders should be of the same $symbol)
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade002_batch_limit_orders
             * @param {Array} $orders list of $orders to create, each object should contain the parameters required by createOrder, namely $symbol, $type, $side, $amount, $price and $params
             * @param {array} [$params] extra parameters specific to the api endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=$order-structure $order structure~
             */
            Async\await($this->load_markets());
            $ordersRequests = array();
            $symbol = null;
            for ($i = 0; $i < count($orders); $i++) {
                $rawOrder = $orders[$i];
                $marketId = $this->safe_string($rawOrder, 'symbol');
                if ($symbol === null) {
                    $symbol = $marketId;
                } else {
                    if ($symbol !== $marketId) {
                        throw new BadRequest($this->id . ' createOrders() requires all $orders to have the same symbol');
                    }
                }
                $type = $this->safe_string($rawOrder, 'type');
                $side = $this->safe_string($rawOrder, 'side');
                $amount = $this->safe_value($rawOrder, 'amount');
                $price = $this->safe_value($rawOrder, 'price');
                $orderParams = $this->safe_value($rawOrder, 'params', array());
                if ($type !== 'limit') {
                    throw new NotSupported($this->id . ' createOrders() does not support ' . $type . ' $orders, only limit $orders are accepted');
                }
                $orderRequest = $this->create_order_request($marketId, $type, $side, $amount, $price, $orderParams);
                $ordersRequests[] = $orderRequest;
            }
            $market = $this->market($symbol);
            if (!$market['spot']) {
                throw new NotSupported($this->id . ' createOrders() does not support ' . $market['type'] . ' $orders, only spot $orders are accepted');
            }
            $request = array(
                'market' => $market['id'],
                'batch_orders' => $this->json($ordersRequests),
            );
            $response = Async\await($this->privatePostOrderLimitBatch ($request));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "code" => 0,
            //                 "data" => array(
            //                     "amount" => "0.0005",
            //                     "asset_fee" => "0",
            //                     "avg_price" => "0.00",
            //                     "client_id" => "x-167673045-d34bfb41242d8fd1",
            //                     "create_time" => 1701229157,
            //                     "deal_amount" => "0",
            //                     "deal_fee" => "0",
            //                     "deal_money" => "0",
            //                     "fee_asset" => null,
            //                     "fee_discount" => "1",
            //                     "finished_time" => null,
            //                     "id" => 107745856676,
            //                     "left" => "0.0005",
            //                     "maker_fee_rate" => "0.002",
            //                     "market" => "BTCUSDT",
            //                     "money_fee" => "0",
            //                     "order_type" => "limit",
            //                     "price" => "23000",
            //                     "source_id" => "",
            //                     "status" => "not_deal",
            //                     "stock_fee" => "0",
            //                     "taker_fee_rate" => "0.002",
            //                     "type" => "buy"
            //                 ),
            //                 "message" => "OK"
            //             ),
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $results = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $status = null;
                $code = $this->safe_integer($entry, 'code');
                if ($code !== null) {
                    if ($code !== 0) {
                        $status = 'rejected';
                    } else {
                        $status = 'open';
                    }
                }
                $item = $this->safe_value($entry, 'data', array());
                $item['status'] = $status;
                $order = $this->parse_order($item, $market);
                $results[] = $order;
            }
            return $results;
        }) ();
    }

    public function cancel_orders($ids, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($ids, $symbol, $params) {
            /**
             * cancel multiple orders
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade016_batch_cancel_order
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http021-0_cancel_order_batch
             * @param {string[]} $ids $order $ids
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=$order-structure $order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $idsString = implode(',', $ids);
            $response = null;
            if ($market['spot']) {
                $request['batch_ids'] = $idsString;
                $response = Async\await($this->privateDeleteOrderPendingBatch (array_merge($request, $params)));
            } else {
                $request['order_ids'] = $idsString;
                $response = Async\await($this->perpetualPrivatePostOrderCancelBatch (array_merge($request, $params)));
            }
            //
            // spot
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "code" => 0,
            //                 "data" => array(
            //                     "account_id" => 0,
            //                     "amount" => "0.0005",
            //                     "asset_fee" => "0",
            //                     "avg_price" => "0.00",
            //                     "client_id" => "x-167673045-d4e03c38f4d19b4e",
            //                     "create_time" => 1701229157,
            //                     "deal_amount" => "0",
            //                     "deal_fee" => "0",
            //                     "deal_money" => "0",
            //                     "fee_asset" => null,
            //                     "fee_discount" => "1",
            //                     "finished_time" => 0,
            //                     "id" => 107745856682,
            //                     "left" => "0",
            //                     "maker_fee_rate" => "0.002",
            //                     "market" => "BTCUSDT",
            //                     "money_fee" => "0",
            //                     "order_type" => "limit",
            //                     "price" => "22000",
            //                     "status" => "not_deal",
            //                     "stock_fee" => "0",
            //                     "taker_fee_rate" => "0.002",
            //                     "type" => "buy"
            //                 ),
            //                 "message" => ""
            //             ),
            //         ),
            //         "message" => "Success"
            //     }
            //
            // swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "code" => 0,
            //                 "message" => "",
            //                 "order" => array(
            //                     "amount" => "0.0005",
            //                     "client_id" => "x-167673045-b0cee0c584718b65",
            //                     "create_time" => 1701233683.294231,
            //                     "deal_asset_fee" => "0.00000000000000000000",
            //                     "deal_fee" => "0.00000000000000000000",
            //                     "deal_profit" => "0.00000000000000000000",
            //                     "deal_stock" => "0.00000000000000000000",
            //                     "effect_type" => 1,
            //                     "fee_asset" => "",
            //                     "fee_discount" => "0.00000000000000000000",
            //                     "last_deal_amount" => "0.00000000000000000000",
            //                     "last_deal_id" => 0,
            //                     "last_deal_price" => "0.00000000000000000000",
            //                     "last_deal_role" => 0,
            //                     "last_deal_time" => 0,
            //                     "last_deal_type" => 0,
            //                     "left" => "0.0005",
            //                     "leverage" => "3",
            //                     "maker_fee" => "0.00030",
            //                     "market" => "BTCUSDT",
            //                     "option" => 0,
            //                     "order_id" => 115940476323,
            //                     "position_id" => 0,
            //                     "position_type" => 2,
            //                     "price" => "25000.00",
            //                     "side" => 2,
            //                     "source" => "api.v1",
            //                     "stop_id" => 0,
            //                     "stop_loss_price" => "0.00000000000000000000",
            //                     "stop_loss_type" => 0,
            //                     "take_profit_price" => "0.00000000000000000000",
            //                     "take_profit_type" => 0,
            //                     "taker_fee" => "0.00050",
            //                     "target" => 0,
            //                     "type" => 1,
            //                     "update_time" => 1701233721.718884,
            //                     "user_id" => 3620173
            //                 }
            //             ),
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $results = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $dataRequest = $market['spot'] ? 'data' : 'order';
                $item = $this->safe_value($entry, $dataRequest, array());
                $order = $this->parse_order($item, $market);
                $results[] = $order;
            }
            return $results;
        }) ();
    }

    public function edit_order($id, $symbol, $type, $side, $amount = null, $price = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $type, $side, $amount, $price, $params) {
            /**
             * edit a trade order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade022_modify_order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of the currency you want to trade in units of the base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' editOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['spot']) {
                throw new NotSupported($this->id . ' editOrder() does not support ' . $market['type'] . ' orders, only spot orders are accepted');
            }
            $request = array(
                'market' => $market['id'],
                'id' => intval($id),
            );
            if ($amount !== null) {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if ($price !== null) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $response = Async\await($this->privatePostOrderModify (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "id" => 35436205,
            //             "create_time" => 1636080705,
            //             "finished_time" => null,
            //             "amount" => "0.30000000",
            //             "price" => " 56000",
            //             "deal_amount" => "0.24721428",
            //             "deal_money" => "13843.9996800000000000",
            //             "deal_fee" => "0",
            //             "stock_fee" => "0",
            //             "money_fee" => "0",
            //             " asset_fee" => "8.721719798400000000000000",
            //             "fee_asset" => "CET",
            //             "fee_discount" => "0.70",
            //             "avg_price" => "56000",
            //             "market" => "BTCUSDT",
            //             "left" => "0.05278572 ",
            //             "maker_fee_rate" => "0.0018",
            //             "taker_fee_rate" => "0.0018",
            //             "order_type" => "limit",
            //             "type" => "buy",
            //             "status" => "cancel",
            //             "client_id " => "abcd222",
            //             "source_id" => "1234"
            //     ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade018_cancle_stop_pending_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade015_cancel_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade024_cancel_order_by_client_id
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade025_cancel_stop_order_by_client_id
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http023_cancel_stop_order
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http021_cancel_order
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http042_cancel_order_by_client_id
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http043_cancel_stop_order_by_client_id
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] client order $id, defaults to $id if not passed
             * @param {boolean} [$params->stop] if $stop order = true, default = false
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $stop = $this->safe_value($params, 'stop');
            $swap = $market['swap'];
            $request = array(
                'market' => $market['id'],
            );
            $accountId = $this->safe_integer($params, 'account_id');
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('cancelOrder', $params);
            $clientOrderId = $this->safe_string_2($params, 'client_id', 'clientOrderId');
            if ($marginMode !== null) {
                if ($accountId === null) {
                    throw new BadRequest($this->id . ' cancelOrder() requires an account_id parameter for margin orders');
                }
                $request['account_id'] = $accountId;
            }
            $query = $this->omit($params, array( 'stop', 'account_id', 'clientOrderId' ));
            $response = null;
            if ($clientOrderId !== null) {
                $request['client_id'] = $clientOrderId;
                if ($stop) {
                    if ($swap) {
                        $response = Async\await($this->perpetualPrivatePostOrderCancelStopByClientId (array_merge($request, $query)));
                    } else {
                        $response = Async\await($this->privateDeleteOrderStopPendingByClientId (array_merge($request, $query)));
                    }
                } else {
                    if ($swap) {
                        $response = Async\await($this->perpetualPrivatePostOrderCancelByClientId (array_merge($request, $query)));
                    } else {
                        $response = Async\await($this->privateDeleteOrderPendingByClientId (array_merge($request, $query)));
                    }
                }
            } else {
                $idRequest = $swap ? 'order_id' : 'id';
                $request[$idRequest] = $id;
                if ($stop) {
                    if ($swap) {
                        $response = Async\await($this->perpetualPrivatePostOrderCancelStop (array_merge($request, $query)));
                    } else {
                        $response = Async\await($this->privateDeleteOrderStopPendingId (array_merge($request, $query)));
                    }
                } else {
                    if ($swap) {
                        $response = Async\await($this->perpetualPrivatePostOrderCancel (array_merge($request, $query)));
                    } else {
                        $response = Async\await($this->privateDeleteOrderPending (array_merge($request, $query)));
                    }
                }
            }
            //
            // Spot and Margin
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "asset_fee" => "0",
            //             "avg_price" => "0.00",
            //             "client_id" => "",
            //             "create_time" => 1650951627,
            //             "deal_amount" => "0",
            //             "deal_fee" => "0",
            //             "deal_money" => "0",
            //             "fee_asset" => null,
            //             "fee_discount" => "1",
            //             "finished_time" => null,
            //             "id" => 74510932594,
            //             "left" => "0.0005",
            //             "maker_fee_rate" => "0.002",
            //             "market" => "BTCUSDT",
            //             "money_fee" => "0",
            //             "order_type" => "limit",
            //             "price" => "30000",
            //             "status" => "not_deal",
            //             "stock_fee" => "0",
            //             "taker_fee_rate" => "0.002",
            //             "type" => "buy"
            //         ),
            //         "message" => "Success"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "client_id" => "",
            //             "create_time" => 1651004578.618224,
            //             "deal_asset_fee" => "0.00000000000000000000",
            //             "deal_fee" => "0.00000000000000000000",
            //             "deal_profit" => "0.00000000000000000000",
            //             "deal_stock" => "0.00000000000000000000",
            //             "effect_type" => 1,
            //             "fee_asset" => "",
            //             "fee_discount" => "0.00000000000000000000",
            //             "last_deal_amount" => "0.00000000000000000000",
            //             "last_deal_id" => 0,
            //             "last_deal_price" => "0.00000000000000000000",
            //             "last_deal_role" => 0,
            //             "last_deal_time" => 0,
            //             "last_deal_type" => 0,
            //             "left" => "0.0005",
            //             "leverage" => "3",
            //             "maker_fee" => "0.00030",
            //             "market" => "BTCUSDT",
            //             "order_id" => 18221659097,
            //             "position_id" => 0,
            //             "position_type" => 1,
            //             "price" => "30000.00",
            //             "side" => 2,
            //             "source" => "api.v1",
            //             "stop_id" => 0,
            //             "taker_fee" => "0.00050",
            //             "target" => 0,
            //             "type" => 1,
            //             "update_time" => 1651004578.618224,
            //             "user_id" => 3620173
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Swap Stop
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "client_id" => "",
            //             "create_time" => 1651034023.008771,
            //             "effect_type" => 1,
            //             "fee_asset" => "",
            //             "fee_discount" => "0.00000000000000000000",
            //             "maker_fee" => "0.00030",
            //             "market" => "BTCUSDT",
            //             "order_id" => 18256915101,
            //             "price" => "31000.00",
            //             "side" => 2,
            //             "source" => "api.v1",
            //             "state" => 1,
            //             "stop_price" => "31500.00",
            //             "stop_type" => 1,
            //             "taker_fee" => "0.00050",
            //             "target" => 0,
            //             "type" => 1,
            //             "update_time" => 1651034397.193624,
            //             "user_id" => 3620173
            //         ),
            //         "message":"OK"
            //     }
            //
            // Spot and Margin Stop
            //
            //     array("code":0,"data":array(),"message":"Success")
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_order($data, $market);
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders in a $market
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade018_cancle_stop_pending_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade015_cancel_order
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http024_cancel_stop_all
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http022_cancel_all
             * @param {string} $symbol unified $market $symbol of the $market to cancel orders in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $marketId = $market['id'];
            $accountId = $this->safe_integer($params, 'account_id', 0);
            $request = array(
                'market' => $marketId,
                // 'account_id' => $accountId, // SPOT, main account ID => 0, margin account ID => See < Inquire Margin Account Market Info >, future account ID => See < Inquire Future Account Market Info >
                // 'side' => 0, // SWAP, 0 => All, 1 => Sell, 2 => Buy
            );
            $swap = $market['swap'];
            $stop = $this->safe_value($params, 'stop');
            $params = $this->omit($params, array( 'stop', 'account_id' ));
            $response = null;
            if ($swap) {
                if ($stop) {
                    $response = Async\await($this->perpetualPrivatePostOrderCancelStopAll (array_merge($request, $params)));
                } else {
                    $response = Async\await($this->perpetualPrivatePostOrderCancelAll (array_merge($request, $params)));
                }
            } else {
                $request['account_id'] = $accountId;
                if ($stop) {
                    $response = Async\await($this->privateDeleteOrderStopPending (array_merge($request, $params)));
                } else {
                    $response = Async\await($this->privateDeleteOrderPending (array_merge($request, $params)));
                }
            }
            //
            // Spot and Margin
            //
            //     array("code" => 0, "data" => null, "message" => "Success")
            //
            // Swap
            //
            //     array("code" => 0, "data" => array("status":"success"), "message" => "OK")
            //
            return $response;
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http028_stop_status
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http026_order_status
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade007_order_status
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $swap = $market['swap'];
            $stop = $this->safe_value($params, 'stop');
            $params = $this->omit($params, 'stop');
            $request = array(
                'market' => $market['id'],
                // 'id' => $id, // SPOT
                // 'order_id' => $id, // SWAP
            );
            $idRequest = $swap ? 'order_id' : 'id';
            $request[$idRequest] = $id;
            $response = null;
            if ($swap) {
                if ($stop) {
                    $response = Async\await($this->perpetualPrivateGetOrderStopStatus (array_merge($request, $params)));
                } else {
                    $response = Async\await($this->perpetualPrivateGetOrderStatus (array_merge($request, $params)));
                }
            } else {
                $response = Async\await($this->privateGetOrderStatus (array_merge($request, $params)));
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.1",
            //             "asset_fee" => "0.22736197736197736197",
            //             "avg_price" => "196.85000000000000000000",
            //             "create_time" => 1537270135,
            //             "deal_amount" => "0.1",
            //             "deal_fee" => "0",
            //             "deal_money" => "19.685",
            //             "fee_asset" => "CET",
            //             "fee_discount" => "0.5",
            //             "id" => 1788259447,
            //             "left" => "0",
            //             "maker_fee_rate" => "0",
            //             "market" => "ETHUSDT",
            //             "order_type" => "limit",
            //             "price" => "170.00000000",
            //             "status" => "done",
            //             "taker_fee_rate" => "0.0005",
            //             "type" => "sell",
            //         ),
            //         "message" => "Ok"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "client_id" => "",
            //             "create_time" => 1651004578.618224,
            //             "deal_asset_fee" => "0.00000000000000000000",
            //             "deal_fee" => "0.00000000000000000000",
            //             "deal_profit" => "0.00000000000000000000",
            //             "deal_stock" => "0.00000000000000000000",
            //             "effect_type" => 1,
            //             "fee_asset" => "",
            //             "fee_discount" => "0.00000000000000000000",
            //             "last_deal_amount" => "0.00000000000000000000",
            //             "last_deal_id" => 0,
            //             "last_deal_price" => "0.00000000000000000000",
            //             "last_deal_role" => 0,
            //             "last_deal_time" => 0,
            //             "last_deal_type" => 0,
            //             "left" => "0.0005",
            //             "leverage" => "3",
            //             "maker_fee" => "0.00030",
            //             "market" => "BTCUSDT",
            //             "order_id" => 18221659097,
            //             "position_id" => 0,
            //             "position_type" => 1,
            //             "price" => "30000.00",
            //             "side" => 2,
            //             "source" => "api.v1",
            //             "stop_id" => 0,
            //             "taker_fee" => "0.00050",
            //             "target" => 0,
            //             "type" => 1,
            //             "update_time" => 1651004578.618224,
            //             "user_id" => 3620173
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Swap Stop
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "amount" => "0.0005",
            //             "client_id" => "",
            //             "create_time" => 1651034023.008771,
            //             "effect_type" => 1,
            //             "fee_asset" => "",
            //             "fee_discount" => "0.00000000000000000000",
            //             "maker_fee" => "0.00030",
            //             "market" => "BTCUSDT",
            //             "order_id" => 18256915101,
            //             "price" => "31000.00",
            //             "side" => 2,
            //             "source" => "api.v1",
            //             "state" => 1,
            //             "stop_price" => "31500.00",
            //             "stop_type" => 1,
            //             "taker_fee" => "0.00050",
            //             "target" => 0,
            //             "type" => 1,
            //             "update_time" => 1651034397.193624,
            //             "user_id" => 3620173
            //         ),
            //         "message":"OK"
            //     }
            //
            $data = $this->safe_value($response, 'data');
            return $this->parse_order($data, $market);
        }) ();
    }

    public function fetch_orders_by_status($status, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($status, $symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $limit = ($limit === null) ? 100 : $limit;
            $request = array(
                'limit' => $limit,
                // 'page' => 1, // SPOT
                // 'offset' => 0, // SWAP
                // 'side' => 0, // SWAP, 0 => All, 1 => Sell, 2 => Buy
            );
            $stop = $this->safe_value($params, 'stop');
            $side = $this->safe_integer($params, 'side');
            $params = $this->omit($params, 'stop');
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            list($marketType, $query) = $this->handle_market_type_and_params('fetchOrdersByStatus', $market, $params);
            $accountId = $this->safe_integer($params, 'account_id');
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchOrdersByStatus', $params);
            if ($marginMode !== null) {
                if ($accountId === null) {
                    throw new BadRequest($this->id . ' fetchOpenOrders() and fetchClosedOrders() require an account_id parameter for margin orders');
                }
                $request['account_id'] = $accountId;
            }
            $params = $this->omit($query, 'account_id');
            $response = null;
            if ($marketType === 'swap') {
                if ($symbol === null) {
                    throw new ArgumentsRequired($this->id . ' fetchOrdersByStatus() requires a $symbol argument for swap markets');
                }
                if ($side !== null) {
                    $request['side'] = $side;
                } else {
                    $request['side'] = 0;
                }
                $request['offset'] = 0;
                if ($stop) {
                    $response = Async\await($this->perpetualPrivateGetOrderStopPending (array_merge($request, $params)));
                } else {
                    if ($status === 'finished') {
                        $response = Async\await($this->perpetualPrivateGetOrderFinished (array_merge($request, $params)));
                    } elseif ($status === 'pending') {
                        $response = Async\await($this->perpetualPrivateGetOrderPending (array_merge($request, $params)));
                    }
                }
            } else {
                $request['page'] = 1;
                if ($status === 'finished') {
                    if ($stop) {
                        $response = Async\await($this->privateGetOrderStopFinished (array_merge($request, $params)));
                    } else {
                        $response = Async\await($this->privateGetOrderFinished (array_merge($request, $params)));
                    }
                } elseif ($status === 'pending') {
                    if ($stop) {
                        $response = Async\await($this->privateGetOrderStopPending (array_merge($request, $params)));
                    } else {
                        $response = Async\await($this->privateGetOrderPending (array_merge($request, $params)));
                    }
                }
            }
            //
            // Spot and Margin
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "count" => 1,
            //             "curr_page" => 1,
            //             "data" => array(
            //                 array(
            //                     "account_id" => 0,
            //                     "amount" => "0.0005",
            //                     "asset_fee" => "0",
            //                     "avg_price" => "0.00",
            //                     "client_id" => "",
            //                     "create_time" => 1651089247,
            //                     "deal_amount" => "0",
            //                     "deal_fee" => "0",
            //                     "deal_money" => "0",
            //                     "fee_asset" => null,
            //                     "fee_discount" => "1",
            //                     "finished_time" => 0,
            //                     "id" => 74660190839,
            //                     "left" => "0.0005",
            //                     "maker_fee_rate" => "0.002",
            //                     "market" => "BTCUSDT",
            //                     "money_fee" => "0",
            //                     "order_type" => "limit",
            //                     "price" => "31000",
            //                     "status" => "not_deal",
            //                     "stock_fee" => "0",
            //                     "taker_fee_rate" => "0.002",
            //                     "type" => "buy"
            //                 }
            //             ),
            //             "has_next" => false,
            //             "total" => 1
            //         ),
            //         "message" => "Success"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "limit" => 100,
            //             "offset" => 0,
            //             "records" => array(
            //                 array(
            //                     "amount" => "0.0005",
            //                     "client_id" => "",
            //                     "create_time" => 1651030414.088431,
            //                     "deal_asset_fee" => "0",
            //                     "deal_fee" => "0.00960069",
            //                     "deal_profit" => "0.009825",
            //                     "deal_stock" => "19.20138",
            //                     "effect_type" => 0,
            //                     "fee_asset" => "",
            //                     "fee_discount" => "0",
            //                     "left" => "0",
            //                     "leverage" => "3",
            //                     "maker_fee" => "0",
            //                     "market" => "BTCUSDT",
            //                     "order_id" => 18253447431,
            //                     "position_id" => 0,
            //                     "position_type" => 1,
            //                     "price" => "0",
            //                     "side" => 1,
            //                     "source" => "web",
            //                     "stop_id" => 0,
            //                     "taker_fee" => "0.0005",
            //                     "target" => 0,
            //                     "type" => 2,
            //                     "update_time" => 1651030414.08847,
            //                     "user_id" => 3620173
            //                 ),
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Spot and Margin Stop
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "count" => 1,
            //             "curr_page" => 1,
            //             "data" => array(
            //                 array(
            //                     "account_id" => 0,
            //                     "amount" => "155",
            //                     "client_id" => "",
            //                     "create_time" => 1651089182,
            //                     "fee_asset" => null,
            //                     "fee_discount" => "1",
            //                     "maker_fee" => "0.002",
            //                     "market" => "BTCUSDT",
            //                     "order_id" => 74660111965,
            //                     "order_type" => "market",
            //                     "price" => "0",
            //                     "state" => 0,
            //                     "stop_price" => "31500",
            //                     "taker_fee" => "0.002",
            //                     "type" => "buy"
            //                 }
            //             ),
            //             "has_next" => false,
            //             "total" => 0
            //         ),
            //         "message" => "Success"
            //     }
            //
            // Swap Stop
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "limit" => 100,
            //             "offset" => 0,
            //             "records" => array(
            //                 array(
            //                     "amount" => "0.0005",
            //                     "client_id" => "",
            //                     "create_time" => 1651089147.321691,
            //                     "effect_type" => 1,
            //                     "fee_asset" => "",
            //                     "fee_discount" => "0.00000000000000000000",
            //                     "maker_fee" => "0.00030",
            //                     "market" => "BTCUSDT",
            //                     "order_id" => 18332143848,
            //                     "price" => "31000.00",
            //                     "side" => 2,
            //                     "source" => "api.v1",
            //                     "state" => 1,
            //                     "stop_price" => "31500.00",
            //                     "stop_type" => 1,
            //                     "taker_fee" => "0.00050",
            //                     "target" => 0,
            //                     "type" => 1,
            //                     "update_time" => 1651089147.321691,
            //                     "user_id" => 3620173
            //                 }
            //             ),
            //             "total" => 1
            //         ),
            //         "message" => "OK"
            //     }
            //
            $tradeRequest = ($marketType === 'swap') ? 'records' : 'data';
            $data = $this->safe_value($response, 'data');
            $orders = $this->safe_value($data, $tradeRequest, array());
            return $this->parse_orders($orders, $market, $since, $limit);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http027_query_pending_stop
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http025_query_pending
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade013_stop_pending_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade011_pending_order
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of  open orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_status('pending', $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed orders made by the user
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http029_query_finished
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade010_stop_finished_order
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade012_finished_order
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_status('finished', $symbol, $since, $limit, $params));
        }) ();
    }

    public function create_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * create a $currency deposit address
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account019_update_deposit_address
             * @param {string} $code unified $currency $code of the $currency for the deposit address
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $request = array(
                'coin_type' => $currency['id'],
            );
            if (is_array($params) && array_key_exists('network', $params)) {
                $network = $this->safe_string($params, 'network');
                $params = $this->omit($params, 'network');
                $request['smart_contract_name'] = $network;
            }
            $response = Async\await($this->privatePutBalanceDepositAddressCoinType (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "coin_address" => "TV639dSpb9iGRtoFYkCp4AoaaDYKrK1pw5",
            //             "is_bitcoin_cash" => false
            //         ),
            //         "message" => "Success"
            //     }
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_deposit_address($data, $currency);
        }) ();
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * fetch the deposit address for a $currency associated with this account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account020_query_deposit_address
             * @param {string} $code unified $currency $code
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $request = array(
                'coin_type' => $currency['id'],
            );
            $networks = $this->safe_value($currency, 'networks', array());
            $network = $this->safe_string($params, 'network');
            $params = $this->omit($params, 'network');
            $networksKeys = is_array($networks) ? array_keys($networks) : array();
            $numOfNetworks = count($networksKeys);
            if ($networks !== null && $numOfNetworks > 1) {
                if ($network === null) {
                    throw new ArgumentsRequired($this->id . ' fetchDepositAddress() ' . $code . ' requires a $network parameter');
                }
                if (!(is_array($networks) && array_key_exists($network, $networks))) {
                    throw new ExchangeError($this->id . ' fetchDepositAddress() ' . $network . ' $network not supported for ' . $code);
                }
            }
            if ($network !== null) {
                $request['smart_contract_name'] = $network;
            }
            $response = Async\await($this->privateGetBalanceDepositAddressCoinType (array_merge($request, $params)));
            //
            //      {
            //          "code" => 0,
            //          "data" => array(
            //            "coin_address" => "1P1JqozxioQwaqPwgMAQdNDYNyaVSqgARq",
            //            // coin_address => "xxxxxxxxxxxxxx:yyyyyyyyy", // with embedded tag/memo
            //            "is_bitcoin_cash" => false
            //          ),
            //          "message" => "Success"
            //      }
            //
            $data = $this->safe_value($response, 'data', array());
            $depositAddress = $this->parse_deposit_address($data, $currency);
            $options = $this->safe_value($this->options, 'fetchDepositAddress', array());
            $fillResponseFromRequest = $this->safe_value($options, 'fillResponseFromRequest', true);
            if ($fillResponseFromRequest) {
                $depositAddress['network'] = $this->safe_network_code($network, $currency);
            }
            return $depositAddress;
        }) ();
    }

    public function safe_network($networkId, ?array $currency = null) {
        $networks = $this->safe_value($currency, 'networks', array());
        $networksCodes = is_array($networks) ? array_keys($networks) : array();
        $networksCodesLength = count($networksCodes);
        if ($networkId === null && $networksCodesLength === 1) {
            return $networks[$networksCodes[0]];
        }
        return array(
            'id' => $networkId,
            'network' => ($networkId === null) ? null : strtoupper($networkId),
        );
    }

    public function safe_network_code($networkId, ?array $currency = null) {
        $network = $this->safe_network($networkId, $currency);
        return $network['network'];
    }

    public function parse_deposit_address($depositAddress, ?array $currency = null) {
        //
        //     {
        //         "coin_address" => "1P1JqozxioQwaqPwgMAQdNDYNyaVSqgARq",
        //         "is_bitcoin_cash" => false
        //     }
        //
        $coinAddress = $this->safe_string($depositAddress, 'coin_address');
        $parts = explode(':', $coinAddress);
        $address = null;
        $tag = null;
        $partsLength = count($parts);
        if ($partsLength > 1 && $parts[0] !== 'cfx') {
            $address = $parts[0];
            $tag = $parts[1];
        } else {
            $address = $coinAddress;
        }
        return array(
            'info' => $depositAddress,
            'currency' => $this->safe_currency_code(null, $currency),
            'address' => $address,
            'tag' => $tag,
            'network' => null,
        );
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all $trades made by the user
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http013_user_deals
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade014_user_deals
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch $trades for
             * @param {int} [$limit] the maximum number of $trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $market = null;
            if ($limit === null) {
                $limit = 100;
            }
            $request = array(
                'limit' => $limit, // SPOT and SWAP
                'offset' => 0, // SWAP, means query from a certain record
                // 'page' => 1, // SPOT
                // 'side' => 2, // SWAP, 0 for no $limit, 1 for sell, 2 for buy
                // 'start_time' => $since, // SWAP
                // 'end_time' => 1524228297, // SWAP
            );
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            $type = null;
            list($type, $params) = $this->handle_market_type_and_params('fetchMyTrades', $market, $params);
            if ($type !== 'spot' && $symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument for non-spot markets');
            }
            $swap = ($type === 'swap');
            $accountId = $this->safe_integer($params, 'account_id');
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchMyTrades', $params);
            if ($marginMode !== null) {
                if ($accountId === null) {
                    throw new BadRequest($this->id . ' fetchMyTrades() requires an account_id parameter for margin trades');
                }
                $request['account_id'] = $accountId;
                $params = $this->omit($params, 'account_id');
            }
            $response = null;
            if ($swap) {
                if ($since !== null) {
                    $request['start_time'] = $since;
                }
                $request['side'] = 0;
                $response = Async\await($this->perpetualPrivateGetMarketUserDeals (array_merge($request, $params)));
            } else {
                $request['page'] = 1;
                $response = Async\await($this->privateGetOrderUserDeals (array_merge($request, $params)));
            }
            //
            // Spot and Margin
            //
            //      {
            //          "code" => 0,
            //          "data" => array(
            //              "data" => array(
            //                  array(
            //                      "id" => 2611520950,
            //                      "order_id" => 63286573298,
            //                      "account_id" => 0,
            //                      "create_time" => 1638990636,
            //                      "type" => "sell",
            //                      "role" => "taker",
            //                      "price" => "192.29",
            //                      "amount" => "0.098",
            //                      "fee" => "0.03768884",
            //                      "fee_asset" => "USDT",
            //                      "market" => "AAVEUSDT",
            //                      "deal_money" => "18.84442"
            //                          ),
            //                      ),
            //              "curr_page" => 1,
            //              "has_next" => false,
            //              "count" => 3
            //              ),
            //          "message" => "Success"
            //      }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "limit" => 100,
            //             "offset" => 0,
            //             "records" => array(
            //                 array(
            //                     "amount" => "0.0012",
            //                     "deal_fee" => "0.0237528",
            //                     "deal_insurance" => "0",
            //                     "deal_margin" => "15.8352",
            //                     "deal_order_id" => 17797031903,
            //                     "deal_profit" => "0",
            //                     "deal_stock" => "47.5056",
            //                     "deal_type" => 1,
            //                     "deal_user_id" => 2969195,
            //                     "fee_asset" => "",
            //                     "fee_discount" => "0",
            //                     "fee_price" => "0",
            //                     "fee_rate" => "0.0005",
            //                     "fee_real_rate" => "0.0005",
            //                     "id" => 379044296,
            //                     "leverage" => "3",
            //                     "margin_amount" => "15.8352",
            //                     "market" => "BTCUSDT",
            //                     "open_price" => "39588",
            //                     "order_id" => 17797092987,
            //                     "position_amount" => "0.0012",
            //                     "position_id" => 62052321,
            //                     "position_type" => 1,
            //                     "price" => "39588",
            //                     "role" => 2,
            //                     "side" => 2,
            //                     "time" => 1650675936.016103,
            //                     "user_id" => 3620173
            //                 }
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            $tradeRequest = $swap ? 'records' : 'data';
            $data = $this->safe_value($response, 'data');
            $trades = $this->safe_value($data, $tradeRequest, array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch all open positions
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033_pending_position
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033-0_finished_position
             * @param {string[]} [$symbols] list of unified $market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->method] the method to use 'perpetualPrivateGetPositionPending' or 'perpetualPrivateGetPositionFinished' default is 'perpetualPrivateGetPositionPending'
             * @param {int} [$params->side] *history endpoint only* 0 => All, 1 => Sell, 2 => Buy, default is 0
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=$position-structure $position structure~
             */
            Async\await($this->load_markets());
            $defaultMethod = null;
            list($defaultMethod, $params) = $this->handle_option_and_params($params, 'fetchPositions', 'method', 'perpetualPrivateGetPositionPending');
            $isHistory = ($defaultMethod === 'perpetualPrivateGetPositionFinished');
            $symbols = $this->market_symbols($symbols);
            $request = array();
            $market = null;
            if ($symbols !== null) {
                $symbol = null;
                if (gettype($symbols) === 'array' && array_keys($symbols) === array_keys(array_keys($symbols))) {
                    $symbolsLength = count($symbols);
                    if ($symbolsLength > 1) {
                        throw new BadRequest($this->id . ' fetchPositions() $symbols argument cannot contain more than 1 symbol');
                    }
                    $symbol = $symbols[0];
                } else {
                    $symbol = $symbols;
                }
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            } else {
                if ($isHistory) {
                    throw new ArgumentsRequired($this->id . ' fetchPositions() requires a $symbol argument for closed positions');
                }
            }
            if ($isHistory) {
                $request['limit'] = 100;
                $request['side'] = $this->safe_integer($params, 'side', 0); // 0 => All, 1 => Sell, 2 => Buy
            }
            $response = null;
            if ($defaultMethod === 'perpetualPrivateGetPositionPending') {
                $response = Async\await($this->perpetualPrivateGetPositionPending (array_merge($request, $params)));
            } else {
                $response = Async\await($this->perpetualPrivateGetPositionFinished (array_merge($request, $params)));
            }
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "adl_sort" => 3396,
            //                 "adl_sort_val" => "0.00007786",
            //                 "amount" => "0.0005",
            //                 "amount_max" => "0.0005",
            //                 "amount_max_margin" => "6.42101333333333333333",
            //                 "bkr_price" => "25684.05333333333333346175",
            //                 "bkr_price_imply" => "0.00000000000000000000",
            //                 "close_left" => "0.0005",
            //                 "create_time" => 1651294226.110899,
            //                 "deal_all" => "19.26000000000000000000",
            //                 "deal_asset_fee" => "0.00000000000000000000",
            //                 "fee_asset" => "",
            //                 "finish_type" => 1,
            //                 "first_price" => "38526.08",
            //                 "insurance" => "0.00000000000000000000",
            //                 "latest_price" => "38526.08",
            //                 "leverage" => "3",
            //                 "liq_amount" => "0.00000000000000000000",
            //                 "liq_order_price" => "0",
            //                 "liq_order_time" => 0,
            //                 "liq_price" => "25876.68373333333333346175",
            //                 "liq_price_imply" => "0.00000000000000000000",
            //                 "liq_profit" => "0.00000000000000000000",
            //                 "liq_time" => 0,
            //                 "mainten_margin" => "0.005",
            //                 "mainten_margin_amount" => "0.09631520000000000000",
            //                 "maker_fee" => "0.00000000000000000000",
            //                 "margin_amount" => "6.42101333333333333333",
            //                 "market" => "BTCUSDT",
            //                 "open_margin" => "0.33333333333333333333",
            //                 "open_margin_imply" => "0.00000000000000000000",
            //                 "open_price" => "38526.08000000000000000000",
            //                 "open_val" => "19.26304000000000000000",
            //                 "open_val_max" => "19.26304000000000000000",
            //                 "position_id" => 65847227,
            //                 "profit_clearing" => "-0.00963152000000000000",
            //                 "profit_real" => "-0.00963152000000000000",
            //                 "profit_unreal" => "0.00",
            //                 "side" => 2,
            //                 "stop_loss_price" => "0.00000000000000000000",
            //                 "stop_loss_type" => 0,
            //                 "sys" => 0,
            //                 "take_profit_price" => "0.00000000000000000000",
            //                 "take_profit_type" => 0,
            //                 "taker_fee" => "0.00000000000000000000",
            //                 "total" => 4661,
            //                 "type" => 1,
            //                 "update_time" => 1651294226.111196,
            //                 "user_id" => 3620173
            //             ),
            //         ),
            //         "message" => "OK"
            //     }
            //
            $position = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($position); $i++) {
                $result[] = $this->parse_position($position[$i], $market);
            }
            return $this->filter_by_array_positions($result, 'symbol', $symbols, false);
        }) ();
    }

    public function fetch_position(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch $data on a single open contract trade position
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033_pending_position
             * @param {string} $symbol unified $market $symbol of the $market the position is held in, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->perpetualPrivateGetPositionPending (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "adl_sort" => 3396,
            //                 "adl_sort_val" => "0.00007786",
            //                 "amount" => "0.0005",
            //                 "amount_max" => "0.0005",
            //                 "amount_max_margin" => "6.42101333333333333333",
            //                 "bkr_price" => "25684.05333333333333346175",
            //                 "bkr_price_imply" => "0.00000000000000000000",
            //                 "close_left" => "0.0005",
            //                 "create_time" => 1651294226.110899,
            //                 "deal_all" => "19.26000000000000000000",
            //                 "deal_asset_fee" => "0.00000000000000000000",
            //                 "fee_asset" => "",
            //                 "finish_type" => 1,
            //                 "first_price" => "38526.08",
            //                 "insurance" => "0.00000000000000000000",
            //                 "latest_price" => "38526.08",
            //                 "leverage" => "3",
            //                 "liq_amount" => "0.00000000000000000000",
            //                 "liq_order_price" => "0",
            //                 "liq_order_time" => 0,
            //                 "liq_price" => "25876.68373333333333346175",
            //                 "liq_price_imply" => "0.00000000000000000000",
            //                 "liq_profit" => "0.00000000000000000000",
            //                 "liq_time" => 0,
            //                 "mainten_margin" => "0.005",
            //                 "mainten_margin_amount" => "0.09631520000000000000",
            //                 "maker_fee" => "0.00000000000000000000",
            //                 "margin_amount" => "6.42101333333333333333",
            //                 "market" => "BTCUSDT",
            //                 "open_margin" => "0.33333333333333333333",
            //                 "open_margin_imply" => "0.00000000000000000000",
            //                 "open_price" => "38526.08000000000000000000",
            //                 "open_val" => "19.26304000000000000000",
            //                 "open_val_max" => "19.26304000000000000000",
            //                 "position_id" => 65847227,
            //                 "profit_clearing" => "-0.00963152000000000000",
            //                 "profit_real" => "-0.00963152000000000000",
            //                 "profit_unreal" => "0.00",
            //                 "side" => 2,
            //                 "stop_loss_price" => "0.00000000000000000000",
            //                 "stop_loss_type" => 0,
            //                 "sys" => 0,
            //                 "take_profit_price" => "0.00000000000000000000",
            //                 "take_profit_type" => 0,
            //                 "taker_fee" => "0.00000000000000000000",
            //                 "total" => 4661,
            //                 "type" => 1,
            //                 "update_time" => 1651294226.111196,
            //                 "user_id" => 3620173
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_position($data[0], $market);
        }) ();
    }

    public function parse_position($position, ?array $market = null) {
        //
        //     {
        //         "adl_sort" => 3396,
        //         "adl_sort_val" => "0.00007786",
        //         "amount" => "0.0005",
        //         "amount_max" => "0.0005",
        //         "amount_max_margin" => "6.42101333333333333333",
        //         "bkr_price" => "25684.05333333333333346175",
        //         "bkr_price_imply" => "0.00000000000000000000",
        //         "close_left" => "0.0005",
        //         "create_time" => 1651294226.110899,
        //         "deal_all" => "19.26000000000000000000",
        //         "deal_asset_fee" => "0.00000000000000000000",
        //         "fee_asset" => "",
        //         "finish_type" => 1,
        //         "first_price" => "38526.08",
        //         "insurance" => "0.00000000000000000000",
        //         "latest_price" => "38526.08",
        //         "leverage" => "3",
        //         "liq_amount" => "0.00000000000000000000",
        //         "liq_order_price" => "0",
        //         "liq_order_time" => 0,
        //         "liq_price" => "25876.68373333333333346175",
        //         "liq_price_imply" => "0.00000000000000000000",
        //         "liq_profit" => "0.00000000000000000000",
        //         "liq_time" => 0,
        //         "mainten_margin" => "0.005",
        //         "mainten_margin_amount" => "0.09631520000000000000",
        //         "maker_fee" => "0.00000000000000000000",
        //         "margin_amount" => "6.42101333333333333333",
        //         "market" => "BTCUSDT",
        //         "open_margin" => "0.33333333333333333333",
        //         "open_margin_imply" => "0.00000000000000000000",
        //         "open_price" => "38526.08000000000000000000",
        //         "open_val" => "19.26304000000000000000",
        //         "open_val_max" => "19.26304000000000000000",
        //         "position_id" => 65847227,
        //         "profit_clearing" => "-0.00963152000000000000",
        //         "profit_real" => "-0.00963152000000000000",
        //         "profit_unreal" => "0.00",
        //         "side" => 2,
        //         "stop_loss_price" => "0.00000000000000000000",
        //         "stop_loss_type" => 0,
        //         "sys" => 0,
        //         "take_profit_price" => "0.00000000000000000000",
        //         "take_profit_type" => 0,
        //         "taker_fee" => "0.00000000000000000000",
        //         "total" => 4661,
        //         "type" => 1,
        //         "update_time" => 1651294226.111196,
        //         "user_id" => 3620173
        //     }
        //
        $marketId = $this->safe_string($position, 'market');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $market = $this->safe_market($marketId, $market, null, $defaultType);
        $symbol = $market['symbol'];
        $positionId = $this->safe_integer($position, 'position_id');
        $marginModeInteger = $this->safe_integer($position, 'type');
        $marginMode = ($marginModeInteger === 1) ? 'isolated' : 'cross';
        $liquidationPrice = $this->safe_string($position, 'liq_price');
        $entryPrice = $this->safe_string($position, 'open_price');
        $unrealizedPnl = $this->safe_string($position, 'profit_unreal');
        $contracts = $this->safe_number($position, 'amount');
        $sideInteger = $this->safe_integer($position, 'side');
        $side = ($sideInteger === 1) ? 'short' : 'long';
        $timestamp = $this->safe_timestamp($position, 'update_time');
        $maintenanceMargin = $this->safe_string($position, 'mainten_margin_amount');
        $maintenanceMarginPercentage = $this->safe_string($position, 'mainten_margin');
        $collateral = $this->safe_string($position, 'margin_amount');
        $leverage = $this->safe_string($position, 'leverage');
        $notional = $this->safe_string($position, 'open_val');
        $initialMargin = Precise::string_div($notional, $leverage);
        $initialMarginPercentage = Precise::string_div('1', $leverage);
        return $this->safe_position(array(
            'info' => $position,
            'id' => $positionId,
            'symbol' => $symbol,
            'notional' => $this->parse_number($notional),
            'marginMode' => $marginMode,
            'liquidationPrice' => $liquidationPrice,
            'entryPrice' => $this->parse_number($entryPrice),
            'unrealizedPnl' => $this->parse_number($unrealizedPnl),
            'percentage' => null,
            'contracts' => $contracts,
            'contractSize' => $this->safe_number($market, 'contractSize'),
            'markPrice' => null,
            'lastPrice' => null,
            'side' => $side,
            'hedged' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastUpdateTimestamp' => null,
            'maintenanceMargin' => $this->parse_number($maintenanceMargin),
            'maintenanceMarginPercentage' => $this->parse_number($maintenanceMarginPercentage),
            'collateral' => $this->parse_number($collateral),
            'initialMargin' => $this->parse_number($initialMargin),
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentage),
            'leverage' => $this->parse_number($leverage),
            'marginRatio' => null,
            'stopLossPrice' => $this->omit_zero($this->safe_string($position, 'stop_loss_price')),
            'takeProfitPrice' => $this->omit_zero($this->safe_string($position, 'take_profit_price')),
        ));
    }

    public function set_margin_mode($marginMode, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($marginMode, $symbol, $params) {
            /**
             * set margin mode to 'cross' or 'isolated'
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http014_adjust_leverage
             * @param {string} $marginMode 'cross' or 'isolated'
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
            }
            $marginMode = strtolower($marginMode);
            if ($marginMode !== 'isolated' && $marginMode !== 'cross') {
                throw new BadRequest($this->id . ' setMarginMode() $marginMode argument should be isolated or cross');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['type'] !== 'swap') {
                throw new BadSymbol($this->id . ' setMarginMode() supports swap contracts only');
            }
            $defaultPositionType = null;
            if ($marginMode === 'isolated') {
                $defaultPositionType = 1;
            } elseif ($marginMode === 'cross') {
                $defaultPositionType = 2;
            }
            $leverage = $this->safe_integer($params, 'leverage');
            $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 100);
            $positionType = $this->safe_integer($params, 'position_type', $defaultPositionType);
            if ($leverage === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $leverage parameter');
            }
            if ($positionType === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a position_type parameter that will transfer margin to the specified trading pair');
            }
            if (($leverage < 3) || ($leverage > $maxLeverage)) {
                throw new BadRequest($this->id . ' setMarginMode() $leverage should be between 3 and ' . (string) $maxLeverage . ' for ' . $symbol);
            }
            $request = array(
                'market' => $market['id'],
                'leverage' => (string) $leverage,
                'position_type' => $positionType, // 1 => isolated, 2 => cross
            );
            return Async\await($this->perpetualPrivatePostMarketAdjustLeverage (array_merge($request, $params)));
        }) ();
    }

    public function set_leverage($leverage, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($leverage, $symbol, $params) {
            /**
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http014_adjust_leverage
             * set the level of $leverage for a $market
             * @param {float} $leverage the rate of $leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->marginMode] 'cross' or 'isolated' (default is 'cross')
             * @return {array} response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadSymbol($this->id . ' setLeverage() supports swap contracts only');
            }
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('setLeverage', $params, 'cross');
            $positionType = null;
            if ($marginMode === 'isolated') {
                $positionType = 1;
            } elseif ($marginMode === 'cross') {
                $positionType = 2;
            }
            $minLeverage = $this->safe_integer($market['limits']['leverage'], 'min', 1);
            $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 100);
            if (($leverage < $minLeverage) || ($leverage > $maxLeverage)) {
                throw new BadRequest($this->id . ' setLeverage() $leverage should be between ' . (string) $minLeverage . ' and ' . (string) $maxLeverage . ' for ' . $symbol);
            }
            $request = array(
                'market' => $market['id'],
                'leverage' => (string) $leverage,
                'position_type' => $positionType, // 1 => isolated, 2 => cross
            );
            return Async\await($this->perpetualPrivatePostMarketAdjustLeverage (array_merge($request, $params)));
        }) ();
    }

    public function fetch_leverage_tiers(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http007_market_limit
             * @param {string[]|null} $symbols list of unified market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=leverage-tiers-structure leverage tiers structures~, indexed by market $symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->perpetualPublicGetMarketLimitConfig ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "BTCUSD" => [
            //                 ["500001", "100", "0.005"],
            //                 ["1000001", "50", "0.01"],
            //                 ["2000001", "30", "0.015"],
            //                 ["5000001", "20", "0.02"],
            //                 ["10000001", "15", "0.025"],
            //                 ["20000001", "10", "0.03"]
            //             ],
            //             ...
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_leverage_tiers($data, $symbols, null);
        }) ();
    }

    public function parse_leverage_tiers($response, ?array $symbols = null, $marketIdKey = null) {
        //
        //     {
        //         "BTCUSD" => [
        //             ["500001", "100", "0.005"],
        //             ["1000001", "50", "0.01"],
        //             ["2000001", "30", "0.015"],
        //             ["5000001", "20", "0.02"],
        //             ["10000001", "15", "0.025"],
        //             ["20000001", "10", "0.03"]
        //         ],
        //         ...
        //     }
        //
        $tiers = array();
        $marketIds = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($marketIds); $i++) {
            $marketId = $marketIds[$i];
            $market = $this->safe_market($marketId, null, null, 'spot');
            $symbol = $this->safe_string($market, 'symbol');
            $symbolsLength = 0;
            if ($symbols !== null) {
                $symbolsLength = count($symbols);
            }
            if ($symbol !== null && ($symbolsLength === 0 || $this->in_array($symbols, $symbol))) {
                $tiers[$symbol] = $this->parse_market_leverage_tiers($response[$marketId], $market);
            }
        }
        return $tiers;
    }

    public function parse_market_leverage_tiers($item, ?array $market = null) {
        $tiers = array();
        $minNotional = 0;
        for ($j = 0; $j < count($item); $j++) {
            $bracket = $item[$j];
            $maxNotional = $this->safe_number($bracket, 0);
            $tiers[] = array(
                'tier' => $j + 1,
                'currency' => $market['linear'] ? $market['base'] : $market['quote'],
                'minNotional' => $minNotional,
                'maxNotional' => $maxNotional,
                'maintenanceMarginRate' => $this->safe_number($bracket, 2),
                'maxLeverage' => $this->safe_integer($bracket, 1),
                'info' => $bracket,
            );
            $minNotional = $maxNotional;
        }
        return $tiers;
    }

    public function modify_margin_helper(string $symbol, $amount, $addOrReduce, $params = array ()) {
        return Async\async(function () use ($symbol, $amount, $addOrReduce, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'amount' => $this->amount_to_precision($symbol, $amount),
                'type' => $addOrReduce,
            );
            $response = Async\await($this->perpetualPrivatePostPositionAdjustMargin (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "adl_sort" => 1,
            //             "adl_sort_val" => "0.00004320",
            //             "amount" => "0.0005",
            //             "amount_max" => "0.0005",
            //             "amount_max_margin" => "6.57352000000000000000",
            //             "bkr_price" => "16294.08000000000000011090",
            //             "bkr_price_imply" => "0.00000000000000000000",
            //             "close_left" => "0.0005",
            //             "create_time" => 1651202571.320778,
            //             "deal_all" => "19.72000000000000000000",
            //             "deal_asset_fee" => "0.00000000000000000000",
            //             "fee_asset" => "",
            //             "finish_type" => 1,
            //             "first_price" => "39441.12",
            //             "insurance" => "0.00000000000000000000",
            //             "latest_price" => "39441.12",
            //             "leverage" => "3",
            //             "liq_amount" => "0.00000000000000000000",
            //             "liq_order_price" => "0",
            //             "liq_order_time" => 0,
            //             "liq_price" => "16491.28560000000000011090",
            //             "liq_price_imply" => "0.00000000000000000000",
            //             "liq_profit" => "0.00000000000000000000",
            //             "liq_time" => 0,
            //             "mainten_margin" => "0.005",
            //             "mainten_margin_amount" => "0.09860280000000000000",
            //             "maker_fee" => "0.00000000000000000000",
            //             "margin_amount" => "11.57352000000000000000",
            //             "market" => "BTCUSDT",
            //             "open_margin" => "0.58687582908396110455",
            //             "open_margin_imply" => "0.00000000000000000000",
            //             "open_price" => "39441.12000000000000000000",
            //             "open_val" => "19.72056000000000000000",
            //             "open_val_max" => "19.72056000000000000000",
            //             "position_id" => 65171206,
            //             "profit_clearing" => "-0.00986028000000000000",
            //             "profit_real" => "-0.00986028000000000000",
            //             "profit_unreal" => "0.00",
            //             "side" => 2,
            //             "stop_loss_price" => "0.00000000000000000000",
            //             "stop_loss_type" => 0,
            //             "sys" => 0,
            //             "take_profit_price" => "0.00000000000000000000",
            //             "take_profit_type" => 0,
            //             "taker_fee" => "0.00000000000000000000",
            //             "total" => 3464,
            //             "type" => 1,
            //             "update_time" => 1651202638.911212,
            //             "user_id" => 3620173
            //         ),
            //         "message":"OK"
            //     }
            //
            $status = $this->safe_string($response, 'message');
            $type = ($addOrReduce === 1) ? 'add' : 'reduce';
            return array_merge($this->parse_margin_modification($response, $market), array(
                'amount' => $this->parse_number($amount),
                'type' => $type,
                'status' => $status,
            ));
        }) ();
    }

    public function parse_margin_modification($data, ?array $market = null) {
        return array(
            'info' => $data,
            'type' => null,
            'amount' => null,
            'code' => $market['quote'],
            'symbol' => $this->safe_symbol(null, $market),
            'status' => null,
        );
    }

    public function add_margin(string $symbol, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $amount, $params) {
            /**
             * add margin
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http032_adjust_position_margin
             * @param {string} $symbol unified market $symbol
             * @param {float} $amount amount of margin to add
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=add-margin-structure margin structure~
             */
            return Async\await($this->modify_margin_helper($symbol, $amount, 1, $params));
        }) ();
    }

    public function reduce_margin(string $symbol, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $amount, $params) {
            /**
             * remove margin from a position
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http032_adjust_position_margin
             * @param {string} $symbol unified market $symbol
             * @param {float} $amount the $amount of margin to remove
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=reduce-margin-structure margin structure~
             */
            return Async\await($this->modify_margin_helper($symbol, $amount, 2, $params));
        }) ();
    }

    public function fetch_funding_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch the history of funding payments paid and received on this account
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http034_funding_position
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch funding history for
             * @param {int} [$limit] the maximum number of funding history structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-history-structure funding history structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchFundingHistory() requires a $symbol argument');
            }
            $limit = ($limit === null) ? 100 : $limit;
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'limit' => $limit,
                // 'offset' => 0,
                // 'end_time' => 1638990636000,
                // 'windowtime' => 1638990636000,
            );
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            $response = Async\await($this->perpetualPrivateGetPositionFunding (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "limit" => 100,
            //             "offset" => 0,
            //             "records" => array(
            //                 array(
            //                     "amount" => "0.0012",
            //                     "asset" => "USDT",
            //                     "funding" => "-0.0095688273996",
            //                     "funding_rate" => "0.00020034",
            //                     "market" => "BTCUSDT",
            //                     "position_id" => 62052321,
            //                     "price" => "39802.45",
            //                     "real_funding_rate" => "0.00020034",
            //                     "side" => 2,
            //                     "time" => 1650729623.933885,
            //                     "type" => 1,
            //                     "user_id" => 3620173,
            //                     "value" => "47.76294"
            //                 ),
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $resultList = $this->safe_value($data, 'records', array());
            $result = array();
            for ($i = 0; $i < count($resultList); $i++) {
                $entry = $resultList[$i];
                $timestamp = $this->safe_timestamp($entry, 'time');
                $currencyId = $this->safe_string($entry, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $result[] = array(
                    'info' => $entry,
                    'symbol' => $symbol,
                    'code' => $code,
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                    'id' => $this->safe_number($entry, 'position_id'),
                    'amount' => $this->safe_number($entry, 'funding'),
                );
            }
            return $result;
        }) ();
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the current funding rate
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http008_market_ticker
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
            }
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->perpetualPublicGetMarketTicker (array_merge($request, $params)));
            //
            //     {
            //          "code" => 0,
            //         "data":
            //         {
            //             "date" => 1650678472474,
            //             "ticker" => array(
            //                 "vol" => "6090.9430",
            //                 "low" => "39180.30",
            //                 "open" => "40474.97",
            //                 "high" => "40798.01",
            //                 "last" => "39659.30",
            //                 "buy" => "39663.79",
            //                 "period" => 86400,
            //                 "funding_time" => 372,
            //                 "position_amount" => "270.1956",
            //                 "funding_rate_last" => "0.00022913",
            //                 "funding_rate_next" => "0.00013158",
            //                 "funding_rate_predict" => "0.00016552",
            //                 "insurance" => "16045554.83969682659674035672",
            //                 "sign_price" => "39652.48",
            //                 "index_price" => "39648.44250000",
            //                 "sell_total" => "22.3913",
            //                 "buy_total" => "19.4498",
            //                 "buy_amount" => "12.8942",
            //                 "sell" => "39663.80",
            //                 "sell_amount" => "0.9388"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $ticker = $this->safe_value($data, 'ticker', array());
            $timestamp = $this->safe_integer($data, 'date');
            $ticker['timestamp'] = $timestamp; // avoid changing parseFundingRate signature
            return $this->parse_funding_rate($ticker, $market);
        }) ();
    }

    public function parse_funding_rate($contract, ?array $market = null) {
        //
        // fetchFundingRate
        //
        //     {
        //         "vol" => "6090.9430",
        //         "low" => "39180.30",
        //         "open" => "40474.97",
        //         "high" => "40798.01",
        //         "last" => "39659.30",
        //         "buy" => "39663.79",
        //         "period" => 86400,
        //         "funding_time" => 372,
        //         "position_amount" => "270.1956",
        //         "funding_rate_last" => "0.00022913",
        //         "funding_rate_next" => "0.00013158",
        //         "funding_rate_predict" => "0.00016552",
        //         "insurance" => "16045554.83969682659674035672",
        //         "sign_price" => "39652.48",
        //         "index_price" => "39648.44250000",
        //         "sell_total" => "22.3913",
        //         "buy_total" => "19.4498",
        //         "buy_amount" => "12.8942",
        //         "sell" => "39663.80",
        //         "sell_amount" => "0.9388"
        //     }
        //
        $timestamp = $this->safe_integer($contract, 'timestamp');
        $contract = $this->omit($contract, 'timestamp');
        $fundingDelta = $this->safe_integer($contract, 'funding_time') * 60 * 1000;
        $fundingHour = ($timestamp . $fundingDelta) / 3600000;
        $fundingTimestamp = (int) round($fundingHour) * 3600000;
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol(null, $market),
            'markPrice' => $this->safe_number($contract, 'sign_price'),
            'indexPrice' => $this->safe_number($contract, 'index_price'),
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fundingRate' => $this->safe_number($contract, 'funding_rate_next'),
            'fundingTimestamp' => $fundingTimestamp,
            'fundingDatetime' => $this->iso8601($fundingTimestamp),
            'nextFundingRate' => $this->safe_number($contract, 'funding_rate_predict'),
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => $this->safe_number($contract, 'funding_rate_last'),
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_funding_rates(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             *  @method
             * fetch the current funding rates
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http009_market_ticker_all
             * @param {string[]} $symbols unified $market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $market = null;
            if ($symbols !== null) {
                $symbol = $this->safe_value($symbols, 0);
                $market = $this->market($symbol);
                if (!$market['swap']) {
                    throw new BadSymbol($this->id . ' fetchFundingRates() supports swap contracts only');
                }
            }
            $response = Async\await($this->perpetualPublicGetMarketTickerAll ($params));
            //
            //     {
            //         "code" => 0,
            //         "data":
            //         {
            //             "date" => 1650678472474,
            //             "ticker" => {
            //                 "BTCUSDT" => array(
            //                     "vol" => "6090.9430",
            //                     "low" => "39180.30",
            //                     "open" => "40474.97",
            //                     "high" => "40798.01",
            //                     "last" => "39659.30",
            //                     "buy" => "39663.79",
            //                     "period" => 86400,
            //                     "funding_time" => 372,
            //                     "position_amount" => "270.1956",
            //                     "funding_rate_last" => "0.00022913",
            //                     "funding_rate_next" => "0.00013158",
            //                     "funding_rate_predict" => "0.00016552",
            //                     "insurance" => "16045554.83969682659674035672",
            //                     "sign_price" => "39652.48",
            //                     "index_price" => "39648.44250000",
            //                     "sell_total" => "22.3913",
            //                     "buy_total" => "19.4498",
            //                     "buy_amount" => "12.8942",
            //                     "sell" => "39663.80",
            //                     "sell_amount" => "0.9388"
            //                 }
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            $data = $this->safe_value($response, 'data', array());
            $tickers = $this->safe_value($data, 'ticker', array());
            $timestamp = $this->safe_integer($data, 'date');
            $result = array();
            $marketIds = is_array($tickers) ? array_keys($tickers) : array();
            for ($i = 0; $i < count($marketIds); $i++) {
                $marketId = $marketIds[$i];
                if (mb_strpos($marketId, '_') === -1) { // skip _signprice and _indexprice
                    $marketInner = $this->safe_market($marketId, null, null, 'swap');
                    $ticker = $tickers[$marketId];
                    $ticker['timestamp'] = $timestamp;
                    $result[] = $this->parse_funding_rate($ticker, $marketInner);
                }
            }
            return $this->filter_by_array($result, 'symbol', $symbols);
        }) ();
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        return Async\async(function () use ($code, $amount, $address, $tag, $params) {
            /**
             * make a withdrawal
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account015_submit_withdraw
             * @param {string} $code unified $currency $code
             * @param {float} $amount the $amount to withdraw
             * @param {string} $address the $address to withdraw to
             * @param {string} $tag
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->network] unified network $code
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$transaction-structure $transaction structure~
             */
            list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
            $this->check_address($address);
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $networkCode = $this->safe_string_upper($params, 'network');
            $params = $this->omit($params, 'network');
            if ($tag) {
                $address = $address . ':' . $tag;
            }
            $request = array(
                'coin_type' => $currency['id'],
                'coin_address' => $address, // must be authorized, inter-user transfer by a registered mobile phone number or an email $address is supported
                'actual_amount' => floatval($amount), // the actual $amount without fees, https://www.coinex.com/fees
                'transfer_method' => 'onchain', // onchain, local
            );
            if ($networkCode !== null) {
                $request['smart_contract_name'] = $this->network_code_to_id($networkCode);
            }
            $response = Async\await($this->privatePostBalanceCoinWithdraw (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "actual_amount" => "1.00000000",
            //             "amount" => "1.00000000",
            //             "coin_address" => "1KAv3pazbTk2JnQ5xTo6fpKK7p1it2RzD4",
            //             "coin_type" => "BCH",
            //             "coin_withdraw_id" => 206,
            //             "confirmations" => 0,
            //             "create_time" => 1524228297,
            //             "status" => "audit",
            //             "tx_fee" => "0",
            //             "tx_id" => ""
            //         ),
            //         "message" => "Ok"
            //     }
            //
            $transaction = $this->safe_value($response, 'data', array());
            return $this->parse_transaction($transaction, $currency);
        }) ();
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'audit' => 'pending',
            'pass' => 'pending',
            'processing' => 'pending',
            'confirming' => 'pending',
            'not_pass' => 'failed',
            'cancel' => 'canceled',
            'finish' => 'ok',
            'fail' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_funding_rate_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http038_funding_history
             * fetches historical funding rate prices
             * @param {string} $symbol unified $symbol of the $market to fetch the funding rate history for
             * @param {int} [$since] $timestamp in ms of the earliest funding rate to fetch
             * @param {int} [$limit] the maximum amount of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~ to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
             * @param {int} [$params->until] $timestamp in ms of the latest funding rate
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $paginate = false;
            list($paginate, $params) = $this->handle_option_and_params($params, 'fetchFundingRateHistory', 'paginate');
            if ($paginate) {
                return Async\await($this->fetch_paginated_call_deterministic('fetchFundingRateHistory', $symbol, $since, $limit, '8h', $params, 1000));
            }
            if ($limit === null) {
                $limit = 100;
            }
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'limit' => $limit,
                'offset' => 0,
                // 'end_time' => 1638990636,
            );
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            list($request, $params) = $this->handle_until_option('end_time', $request, $params);
            $response = Async\await($this->perpetualPublicGetMarketFundingHistory (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "offset" => 0,
            //             "limit" => 3,
            //             "records" => array(
            //                 array(
            //                     "time" => 1650672021.6230309,
            //                     "market" => "BTCUSDT",
            //                     "asset" => "USDT",
            //                     "funding_rate" => "0.00022913",
            //                     "funding_rate_real" => "0.00022913"
            //                 ),
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data');
            $result = $this->safe_value($data, 'records', array());
            $rates = array();
            for ($i = 0; $i < count($result); $i++) {
                $entry = $result[$i];
                $marketId = $this->safe_string($entry, 'market');
                $symbolInner = $this->safe_symbol($marketId, $market, null, 'swap');
                $timestamp = $this->safe_timestamp($entry, 'time');
                $rates[] = array(
                    'info' => $entry,
                    'symbol' => $symbolInner,
                    'fundingRate' => $this->safe_number($entry, 'funding_rate'),
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                );
            }
            $sorted = $this->sort_by($rates, 'timestamp');
            return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
        }) ();
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        // fetchDeposits
        //
        //    {
        //        "coin_deposit_id" => 32555985,
        //        "create_time" => 1673325495,
        //        "amount" => "12.71",
        //        "amount_display" => "12.71",
        //        "diff_amount" => "0",
        //        "min_amount" => "0",
        //        "actual_amount" => "12.71",
        //        "actual_amount_display" => "12.71",
        //        "confirmations" => 35,
        //        "tx_id" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
        //        "tx_id_display" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
        //        "coin_address" => "0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
        //        "coin_address_display" => "0xe7a3****f4b738",
        //        "add_explorer" => "https://bscscan.com/address/0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
        //        "coin_type" => "USDT",
        //        "smart_contract_name" => "BSC",
        //        "transfer_method" => "onchain",
        //        "status" => "finish",
        //        "status_display" => "finish",
        //        "remark" => "",
        //        "explorer" => "https://bscscan.com/tx/0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56"
        //    }
        //
        // fetchWithdrawals
        //
        //    {
        //        "coin_withdraw_id" => 20076836,
        //        "create_time" => 1673325776,
        //        "actual_amount" => "0.029",
        //        "actual_amount_display" => "0.029",
        //        "amount" => "0.03",
        //        "amount_display" => "0.03",
        //        "coin_address" => "MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
        //        "app_coin_address_display" => "MBh****pAb",
        //        "coin_address_display" => "MBhJcc****UdJpAb",
        //        "add_explorer" => "https://explorer.viawallet.com/ltc/address/MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
        //        "coin_type" => "LTC",
        //        "confirmations" => 7,
        //        "explorer" => "https://explorer.viawallet.com/ltc/tx/a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9",
        //        "fee" => "0",
        //        "remark" => "",
        //        "smart_contract_name" => "",
        //        "status" => "finish",
        //        "status_display" => "finish",
        //        "transfer_method" => "onchain",
        //        "tx_fee" => "0.001",
        //        "tx_id" => "a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9"
        //    }
        //
        $id = $this->safe_string_2($transaction, 'coin_withdraw_id', 'coin_deposit_id');
        $address = $this->safe_string($transaction, 'coin_address');
        $tag = $this->safe_string($transaction, 'remark'); // set but unused
        if ($tag !== null) {
            if (strlen($tag) < 1) {
                $tag = null;
            }
        }
        $txid = $this->safe_value($transaction, 'tx_id');
        if ($txid !== null) {
            if (strlen($txid) < 1) {
                $txid = null;
            }
        }
        $currencyId = $this->safe_string($transaction, 'coin_type');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_timestamp($transaction, 'create_time');
        $type = (is_array($transaction) && array_key_exists('coin_withdraw_id', $transaction)) ? 'withdrawal' : 'deposit';
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $networkId = $this->safe_string($transaction, 'smart_contract_name');
        $amount = $this->safe_number($transaction, 'actual_amount');
        $feeCost = $this->safe_string($transaction, 'tx_fee');
        $transferMethod = $this->safe_string($transaction, 'transfer_method');
        $internal = $transferMethod === 'local';
        $addressTo = null;
        $addressFrom = null;
        if ($type === 'deposit') {
            $feeCost = '0';
            $addressTo = $address;
        } else {
            $addressFrom = $address;
        }
        $fee = array(
            'cost' => $this->parse_number($feeCost),
            'currency' => $code,
        );
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => $this->network_id_to_code($networkId),
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => $addressTo,
            'tagFrom' => $addressFrom,
            'type' => $type,
            'amount' => $this->parse_number($amount),
            'currency' => $code,
            'status' => $status,
            'updated' => null,
            'fee' => $fee,
            'comment' => null,
            'internal' => $internal,
        );
    }

    public function transfer(string $code, $amount, $fromAccount, $toAccount, $params = array ()) {
        return Async\async(function () use ($code, $amount, $fromAccount, $toAccount, $params) {
            /**
             * transfer $currency internally between wallets on the same account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account014_balance_contract_transfer
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account013_margin_transfer
             * @param {string} $code unified $currency $code
             * @param {float} $amount amount to transfer
             * @param {string} $fromAccount account to transfer from
             * @param {string} $toAccount account to transfer to
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $amountToPrecision = $this->currency_to_precision($code, $amount);
            $request = array(
                'amount' => $amountToPrecision,
                'coin_type' => $currency['id'],
            );
            $response = null;
            if (($fromAccount === 'spot') && ($toAccount === 'swap')) {
                $request['transfer_side'] = 'in'; // 'in' spot to swap, 'out' swap to spot
                $response = Async\await($this->privatePostContractBalanceTransfer (array_merge($request, $params)));
            } elseif (($fromAccount === 'swap') && ($toAccount === 'spot')) {
                $request['transfer_side'] = 'out'; // 'in' spot to swap, 'out' swap to spot
                $response = Async\await($this->privatePostContractBalanceTransfer (array_merge($request, $params)));
            } else {
                $accountsById = $this->safe_value($this->options, 'accountsById', array());
                $fromId = $this->safe_string($accountsById, $fromAccount, $fromAccount);
                $toId = $this->safe_string($accountsById, $toAccount, $toAccount);
                // $fromAccount and $toAccount must be integers for margin transfers
                // spot is 0, use fetchBalance() to find the margin account id
                $request['from_account'] = intval($fromId);
                $request['to_account'] = intval($toId);
                $response = Async\await($this->privatePostMarginTransfer (array_merge($request, $params)));
            }
            //
            //     array("code" => 0, "data" => null, "message" => "Success")
            //
            return array_merge($this->parse_transfer($response, $currency), array(
                'amount' => $this->parse_number($amountToPrecision),
                'fromAccount' => $fromAccount,
                'toAccount' => $toAccount,
            ));
        }) ();
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            '0' => 'ok',
            'SUCCESS' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transfer($transfer, ?array $currency = null) {
        //
        // fetchTransfers Swap
        //
        //     array(
        //         "amount" => "10",
        //         "asset" => "USDT",
        //         "transfer_type" => "transfer_out", // from swap to spot
        //         "created_at" => 1651633422
        //     ),
        //
        // fetchTransfers Margin
        //
        //     array(
        //         "id" => 7580062,
        //         "updated_at" => 1653684379,
        //         "user_id" => 3620173,
        //         "from_account_id" => 0,
        //         "to_account_id" => 1,
        //         "asset" => "BTC",
        //         "amount" => "0.00160829",
        //         "balance" => "0.00160829",
        //         "transfer_type" => "IN",
        //         "status" => "SUCCESS",
        //         "created_at" => 1653684379
        //     ),
        //
        $timestamp = $this->safe_timestamp($transfer, 'created_at');
        $transferType = $this->safe_string($transfer, 'transfer_type');
        $fromAccount = null;
        $toAccount = null;
        if ($transferType === 'transfer_out') {
            $fromAccount = 'swap';
            $toAccount = 'spot';
        } elseif ($transferType === 'transfer_in') {
            $fromAccount = 'spot';
            $toAccount = 'swap';
        } elseif ($transferType === 'IN') {
            $fromAccount = 'spot';
            $toAccount = 'margin';
        } elseif ($transferType === 'OUT') {
            $fromAccount = 'margin';
            $toAccount = 'spot';
        }
        $currencyId = $this->safe_string($transfer, 'asset');
        $currencyCode = $this->safe_currency_code($currencyId, $currency);
        return array(
            'id' => $this->safe_integer($transfer, 'id'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $currencyCode,
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $this->parse_transfer_status($this->safe_string_2($transfer, 'code', 'status')),
        );
    }

    public function fetch_transfers(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch a history of internal $transfers made on an account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account025_margin_transfer_history
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account024_contract_transfer_history
             * @param {string} $code unified $currency $code of the $currency transferred
             * @param {int} [$since] the earliest time in ms to fetch $transfers for
             * @param {int} [$limit] the maximum number of  $transfers structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structures~
             */
            Async\await($this->load_markets());
            $currency = null;
            $request = array(
                'page' => 1,
                // 'limit' => $limit,
                // 'asset' => 'USDT',
                // 'start_time' => $since,
                // 'end_time' => 1515806440,
                // 'transfer_type' => 'transfer_in', // transfer_in => from Spot to Swap Account, transfer_out => from Swap to Spot Account
            );
            $page = $this->safe_integer($params, 'page');
            if ($page !== null) {
                $request['page'] = $page;
            }
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['asset'] = $currency['id'];
            }
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            } else {
                $request['limit'] = 100;
            }
            $params = $this->omit($params, 'page');
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchTransfers', $params);
            $response = null;
            if ($marginMode !== null) {
                $response = Async\await($this->privateGetMarginTransferHistory (array_merge($request, $params)));
            } else {
                $response = Async\await($this->privateGetContractTransferHistory (array_merge($request, $params)));
            }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "records" => array(
            //                 array(
            //                     "amount" => "10",
            //                     "asset" => "USDT",
            //                     "transfer_type" => "transfer_out",
            //                     "created_at" => 1651633422
            //                 ),
            //             ),
            //             "total" => 5
            //         ),
            //         "message" => "Success"
            //     }
            //
            // Margin
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "records" => array(
            //                 array(
            //                     "id" => 7580062,
            //                     "updated_at" => 1653684379,
            //                     "user_id" => 3620173,
            //                     "from_account_id" => 0,
            //                     "to_account_id" => 1,
            //                     "asset" => "BTC",
            //                     "amount" => "0.00160829",
            //                     "balance" => "0.00160829",
            //                     "transfer_type" => "IN",
            //                     "status" => "SUCCESS",
            //                     "created_at" => 1653684379
            //                 }
            //             ),
            //             "total" => 1
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $transfers = $this->safe_value($data, 'records', array());
            return $this->parse_transfers($transfers, $currency, $since, $limit);
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account026_withdraw_list
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            $request = array();
            $currency = null;
            if ($code !== null) {
                Async\await($this->load_markets());
                $currency = $this->currency($code);
                $request['coin_type'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['Limit'] = $limit;
            }
            $response = Async\await($this->privateGetBalanceCoinWithdraw (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "data" => {
            //            "has_next" => false,
            //            "curr_page" => 1,
            //            "count" => 1,
            //            "data" => array(
            //                array(
            //                    "coin_withdraw_id" => 20076836,
            //                    "create_time" => 1673325776,
            //                    "actual_amount" => "0.029",
            //                    "actual_amount_display" => "0.029",
            //                    "amount" => "0.03",
            //                    "amount_display" => "0.03",
            //                    "coin_address" => "MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
            //                    "app_coin_address_display" => "MBh****pAb",
            //                    "coin_address_display" => "MBhJcc****UdJpAb",
            //                    "add_explorer" => "https://explorer.viawallet.com/ltc/address/MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
            //                    "coin_type" => "LTC",
            //                    "confirmations" => 7,
            //                    "explorer" => "https://explorer.viawallet.com/ltc/tx/a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9",
            //                    "fee" => "0",
            //                    "remark" => "",
            //                    "smart_contract_name" => "",
            //                    "status" => "finish",
            //                    "status_display" => "finish",
            //                    "transfer_method" => "onchain",
            //                    "tx_fee" => "0.001",
            //                    "tx_id" => "a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9"
            //                }
            //            ),
            //            "total" => 1,
            //            "total_page" => 1
            //        ),
            //        "message" => "Success"
            //    }
            //
            $data = $this->safe_value($response, 'data');
            if (gettype($data) !== 'array' || array_keys($data) !== array_keys(array_keys($data))) {
                $data = $this->safe_value($data, 'data', array());
            }
            return $this->parse_transactions($data, $currency, $since, $limit);
        }) ();
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account009_deposit_list
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch deposits for
             * @param {int} [$limit] the maximum number of deposits structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            $request = array();
            $currency = null;
            if ($code !== null) {
                Async\await($this->load_markets());
                $currency = $this->currency($code);
                $request['coin_type'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['Limit'] = $limit;
            }
            $response = Async\await($this->privateGetBalanceCoinDeposit (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "data" => {
            //            "has_next" => false,
            //            "curr_page" => 1,
            //            "count" => 1,
            //            "data" => array(
            //                array(
            //                    "coin_deposit_id" => 32555985,
            //                    "create_time" => 1673325495,
            //                    "amount" => "12.71",
            //                    "amount_display" => "12.71",
            //                    "diff_amount" => "0",
            //                    "min_amount" => "0",
            //                    "actual_amount" => "12.71",
            //                    "actual_amount_display" => "12.71",
            //                    "confirmations" => 35,
            //                    "tx_id" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
            //                    "tx_id_display" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
            //                    "coin_address" => "0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
            //                    "coin_address_display" => "0xe7a3****f4b738",
            //                    "add_explorer" => "https://bscscan.com/address/0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
            //                    "coin_type" => "USDT",
            //                    "smart_contract_name" => "BSC",
            //                    "transfer_method" => "onchain",
            //                    "status" => "finish",
            //                    "status_display" => "finish",
            //                    "remark" => "",
            //                    "explorer" => "https://bscscan.com/tx/0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56"
            //                }
            //            ),
            //            "total" => 1,
            //            "total_page" => 1
            //        ),
            //        "message" => "Success"
            //    }
            //
            $data = $this->safe_value($response, 'data');
            if (gettype($data) !== 'array' || array_keys($data) !== array_keys(array_keys($data))) {
                $data = $this->safe_value($data, 'data', array());
            }
            return $this->parse_transactions($data, $currency, $since, $limit);
        }) ();
    }

    public function parse_isolated_borrow_rate($info, ?array $market = null) {
        //
        //     {
        //         "market" => "BTCUSDT",
        //         "leverage" => 10,
        //         "BTC" => array(
        //             "min_amount" => "0.002",
        //             "max_amount" => "200",
        //             "day_rate" => "0.001"
        //         ),
        //         "USDT" => array(
        //             "min_amount" => "60",
        //             "max_amount" => "5000000",
        //             "day_rate" => "0.001"
        //         }
        //     ),
        //
        $marketId = $this->safe_string($info, 'market');
        $market = $this->safe_market($marketId, $market, null, 'spot');
        $baseInfo = $this->safe_value($info, $market['baseId']);
        $quoteInfo = $this->safe_value($info, $market['quoteId']);
        return array(
            'symbol' => $market['symbol'],
            'base' => $market['base'],
            'baseRate' => $this->safe_number($baseInfo, 'day_rate'),
            'quote' => $market['quote'],
            'quoteRate' => $this->safe_number($quoteInfo, 'day_rate'),
            'period' => 86400000,
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_isolated_borrow_rate(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the rate of interest to borrow a currency for margin trading
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account007_margin_account_settings
             * @param {string} $symbol unified $symbol of the $market to fetch the borrow rate for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=isolated-borrow-rate-structure isolated borrow rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->privateGetMarginConfig (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "market" => "BTCUSDT",
            //             "leverage" => 10,
            //             "BTC" => array(
            //                 "min_amount" => "0.002",
            //                 "max_amount" => "200",
            //                 "day_rate" => "0.001"
            //             ),
            //             "USDT" => array(
            //                 "min_amount" => "60",
            //                 "max_amount" => "5000000",
            //                 "day_rate" => "0.001"
            //             }
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_isolated_borrow_rate($data, $market);
        }) ();
    }

    public function fetch_isolated_borrow_rates($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetch the borrow interest $rates of all currencies
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account007_margin_account_settings
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a list of {@link https://github.com/ccxt/ccxt/wiki/Manual#isolated-borrow-rate-structure isolated borrow rate structures}
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetMarginConfig ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "market" => "BTCUSDT",
            //                 "leverage" => 10,
            //                 "BTC" => array(
            //                     "min_amount" => "0.002",
            //                     "max_amount" => "200",
            //                     "day_rate" => "0.001"
            //                 ),
            //                 "USDT" => array(
            //                     "min_amount" => "60",
            //                     "max_amount" => "5000000",
            //                     "day_rate" => "0.001"
            //                 }
            //             ),
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $rates = array();
            for ($i = 0; $i < count($data); $i++) {
                $rates[] = $this->parse_isolated_borrow_rate($data[$i]);
            }
            return $rates;
        }) ();
    }

    public function fetch_borrow_interest(?string $code = null, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetMarginLoanHistory (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "page" => 1,
            //             "limit" => 10,
            //             "total" => 1,
            //             "has_next" => false,
            //             "curr_page" => 1,
            //             "count" => 1,
            //             "data" => array(
            //                 array(
            //                     "loan_id" => 2616357,
            //                     "create_time" => 1654214027,
            //                     "market_type" => "BTCUSDT",
            //                     "coin_type" => "BTC",
            //                     "day_rate" => "0.001",
            //                     "loan_amount" => "0.0144",
            //                     "interest_amount" => "0",
            //                     "unflat_amount" => "0",
            //                     "expire_time" => 1655078027,
            //                     "is_renew" => true,
            //                     "status" => "finish"
            //                 }
            //             ),
            //             "total_page" => 1
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $rows = $this->safe_value($data, 'data', array());
            $interest = $this->parse_borrow_interests($rows, $market);
            return $this->filter_by_currency_since_limit($interest, $code, $since, $limit);
        }) ();
    }

    public function parse_borrow_interest($info, ?array $market = null) {
        //
        //     {
        //         "loan_id" => 2616357,
        //         "create_time" => 1654214027,
        //         "market_type" => "BTCUSDT",
        //         "coin_type" => "BTC",
        //         "day_rate" => "0.001",
        //         "loan_amount" => "0.0144",
        //         "interest_amount" => "0",
        //         "unflat_amount" => "0",
        //         "expire_time" => 1655078027,
        //         "is_renew" => true,
        //         "status" => "finish"
        //     }
        //
        $marketId = $this->safe_string($info, 'market_type');
        $market = $this->safe_market($marketId, $market, null, 'spot');
        $symbol = $this->safe_string($market, 'symbol');
        $timestamp = $this->safe_timestamp($info, 'expire_time');
        $unflatAmount = $this->safe_string($info, 'unflat_amount');
        $loanAmount = $this->safe_string($info, 'loan_amount');
        $interest = Precise::string_sub($unflatAmount, $loanAmount);
        if ($unflatAmount === '0') {
            $interest = null;
        }
        return array(
            'account' => null, // deprecated
            'symbol' => $symbol,
            'marginMode' => 'isolated',
            'marginType' => null, // deprecated
            'currency' => $this->safe_currency_code($this->safe_string($info, 'coin_type')),
            'interest' => $this->parse_number($interest),
            'interestRate' => $this->safe_number($info, 'day_rate'),
            'amountBorrowed' => $this->parse_number($loanAmount),
            'timestamp' => $timestamp,  // expiry time
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function borrow_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $code, $amount, $params) {
            /**
             * create a loan to borrow margin
             * @see https://github.com/coinexcom/coinex_exchange_api/wiki/086margin_loan
             * @param {string} $symbol unified $market $symbol, required for coinex
             * @param {string} $code unified $currency $code of the $currency to borrow
             * @param {float} $amount the $amount to borrow
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $currency = $this->currency($code);
            $request = array(
                'market' => $market['id'],
                'coin_type' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
            );
            $response = Async\await($this->privatePostMarginLoan (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "loan_id" => 1670
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $transaction = $this->parse_margin_loan($data, $currency);
            return array_merge($transaction, array(
                'amount' => $amount,
                'symbol' => $symbol,
            ));
        }) ();
    }

    public function repay_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $code, $amount, $params) {
            /**
             * repay borrowed margin and interest
             * @see https://github.com/coinexcom/coinex_exchange_api/wiki/087margin_flat
             * @param {string} $symbol unified $market $symbol, required for coinex
             * @param {string} $code unified $currency $code of the $currency to repay
             * @param {float} $amount the $amount to repay
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->loan_id] extra parameter that is not required
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $currency = $this->currency($code);
            $request = array(
                'market' => $market['id'],
                'coin_type' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
            );
            $response = Async\await($this->privatePostMarginFlat (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => null,
            //         "message" => "Success"
            //     }
            //
            $transaction = $this->parse_margin_loan($response, $currency);
            return array_merge($transaction, array(
                'amount' => $amount,
                'symbol' => $symbol,
            ));
        }) ();
    }

    public function parse_margin_loan($info, ?array $currency = null) {
        //
        // borrowMargin
        //
        //     {
        //         "loan_id" => 1670
        //     }
        //
        // repayMargin
        //
        //     {
        //         "code" => 0,
        //         "data" => null,
        //         "message" => "Success"
        //     }
        //
        return array(
            'id' => $this->safe_integer($info, 'loan_id'),
            'currency' => $this->safe_currency_code(null, $currency),
            'amount' => null,
            'symbol' => null,
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_deposit_withdraw_fees(?array $codes = null, $params = array ()) {
        return Async\async(function () use ($codes, $params) {
            /**
             * fetch deposit and withdraw fees
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market010_asset_config
             * @param {string[]|null} $codes list of unified currency $codes
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=fee-structure fees structures~
             */
            Async\await($this->load_markets());
            $request = array();
            if ($codes !== null) {
                $codesLength = count($codes);
                if ($codesLength === 1) {
                    $request['coin_type'] = $this->safe_value($codes, 0);
                }
            }
            $response = Async\await($this->publicGetCommonAssetConfig (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "data" => {
            //            "CET-CSC" => array(
            //                "asset" => "CET",
            //                "chain" => "CSC",
            //                "can_deposit" => true,
            //                "can_withdraw " => false,
            //                "deposit_least_amount" => "1",
            //                "withdraw_least_amount" => "1",
            //                "withdraw_tx_fee" => "0.1"
            //            ),
            //            "CET-ERC20" => array(
            //                "asset" => "CET",
            //                "chain" => "ERC20",
            //                "can_deposit" => true,
            //                "can_withdraw" => false,
            //                "deposit_least_amount" => "14",
            //                "withdraw_least_amount" => "14",
            //                "withdraw_tx_fee" => "14"
            //            }
            //        ),
            //        "message" => "Success"
            //    }
            //
            return $this->parse_deposit_withdraw_fees($response, $codes);
        }) ();
    }

    public function parse_deposit_withdraw_fees($response, $codes = null, $currencyIdKey = null) {
        $depositWithdrawFees = array();
        $codes = $this->market_codes($codes);
        $data = $this->safe_value($response, 'data');
        $currencyIds = is_array($data) ? array_keys($data) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $entry = $currencyIds[$i];
            $splitEntry = explode('-', $entry);
            $feeInfo = $data[$currencyIds[$i]];
            $currencyId = $this->safe_string($feeInfo, 'asset');
            $currency = $this->safe_currency($currencyId);
            $code = $this->safe_string($currency, 'code');
            if (($codes === null) || ($this->in_array($code, $codes))) {
                $depositWithdrawFee = $this->safe_value($depositWithdrawFees, $code);
                if ($depositWithdrawFee === null) {
                    $depositWithdrawFees[$code] = $this->deposit_withdraw_fee(array());
                }
                $depositWithdrawFees[$code]['info'][$entry] = $feeInfo;
                $networkId = $this->safe_string($splitEntry, 1);
                $withdrawFee = $this->safe_value($feeInfo, 'withdraw_tx_fee');
                $withdrawResult = array(
                    'fee' => $withdrawFee,
                    'percentage' => ($withdrawFee !== null) ? false : null,
                );
                $depositResult = array(
                    'fee' => null,
                    'percentage' => null,
                );
                if ($networkId !== null) {
                    $networkCode = $this->network_id_to_code($networkId);
                    $depositWithdrawFees[$code]['networks'][$networkCode] = array(
                        'withdraw' => $withdrawResult,
                        'deposit' => $depositResult,
                    );
                } else {
                    $depositWithdrawFees[$code]['withdraw'] = $withdrawResult;
                    $depositWithdrawFees[$code]['deposit'] = $depositResult;
                }
            }
        }
        $depositWithdrawCodes = is_array($depositWithdrawFees) ? array_keys($depositWithdrawFees) : array();
        for ($i = 0; $i < count($depositWithdrawCodes); $i++) {
            $code = $depositWithdrawCodes[$i];
            $currency = $this->currency($code);
            $depositWithdrawFees[$code] = $this->assign_default_deposit_withdraw_fees($depositWithdrawFees[$code], $currency);
        }
        return $depositWithdrawFees;
    }

    public function handle_margin_mode_and_params($methodName, $params = array (), $defaultValue = null) {
        /**
         * @ignore
         * $marginMode specified by $params["marginMode"], $this->options["marginMode"], $this->options["defaultMarginMode"], $params["margin"] = true or $this->options["defaultType"] = 'margin'
         * @param {array} $params extra parameters specific to the exchange api endpoint
         * @return {Array} the $marginMode in lowercase
         */
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $isMargin = $this->safe_value($params, 'margin', false);
        $marginMode = null;
        list($marginMode, $params) = parent::handle_margin_mode_and_params($methodName, $params, $defaultValue);
        if ($marginMode === null) {
            if (($defaultType === 'margin') || ($isMargin === true)) {
                $marginMode = 'isolated';
            }
        }
        return array( $marginMode, $params );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $path = $this->implode_params($path, $params);
        $url = $this->urls['api'][$api] . '/' . $this->version . '/' . $path;
        $query = $this->omit($params, $this->extract_params($path));
        $nonce = (string) $this->nonce();
        if ($method === 'POST') {
            $parts = explode('/', $path);
            $firstPart = $this->safe_string($parts, 0, '');
            $numParts = count($parts);
            $lastPart = $this->safe_string($parts, $numParts - 1, '');
            $lastWords = explode('_', $lastPart);
            $numWords = count($lastWords);
            $lastWord = $this->safe_string($lastWords, $numWords - 1, '');
            if (($firstPart === 'order') && ($lastWord === 'limit' || $lastWord === 'market')) {
                // inject in implicit API calls
                // POST /order/limit - Place limit orders
                // POST /order/market - Place market orders
                // POST /order/stop/limit - Place stop limit orders
                // POST /order/stop/market - Place stop market orders
                // POST /perpetual/v1/order/put_limit - Place limit orders
                // POST /perpetual/v1/order/put_market - Place market orders
                // POST /perpetual/v1/order/put_stop_limit - Place stop limit orders
                // POST /perpetual/v1/order/put_stop_market - Place stop market orders
                $clientOrderId = $this->safe_string($params, 'client_id');
                if ($clientOrderId === null) {
                    $defaultId = 'x-167673045';
                    $brokerId = $this->safe_value($this->options, 'brokerId', $defaultId);
                    $query['client_id'] = $brokerId . '_' . $this->uuid16();
                }
            }
        }
        if ($api === 'perpetualPrivate') {
            $this->check_required_credentials();
            $query = array_merge(array(
                'access_id' => $this->apiKey,
                'timestamp' => $nonce,
            ), $query);
            $query = $this->keysort($query);
            $urlencoded = $this->rawencode($query);
            $signature = $this->hash($this->encode($urlencoded . '&secret_key=' . $this->secret), 'sha256');
            $headers = array(
                'Authorization' => strtolower($signature),
                'AccessId' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'PUT')) {
                $url .= '?' . $urlencoded;
            } else {
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
                $body = $urlencoded;
            }
        } elseif ($api === 'public' || $api === 'perpetualPublic') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $query = array_merge(array(
                'access_id' => $this->apiKey,
                'tonce' => $nonce,
            ), $query);
            $query = $this->keysort($query);
            $urlencoded = $this->rawencode($query);
            $signature = $this->hash($this->encode($urlencoded . '&secret_key=' . $this->secret), 'md5');
            $headers = array(
                'Authorization' => strtoupper($signature),
                'Content-Type' => 'application/json',
            );
            if (($method === 'GET') || ($method === 'DELETE') || ($method === 'PUT')) {
                $url .= '?' . $urlencoded;
            } else {
                $body = $this->json($query);
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        $code = $this->safe_string($response, 'code');
        $data = $this->safe_value($response, 'data');
        $message = $this->safe_string($response, 'message');
        if (($code !== '0') || (($message !== 'Success') && ($message !== 'Succeeded') && ($message !== 'Ok') && !$data)) {
            $feedback = $this->id . ' ' . $message;
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
