<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\coinex as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\BadRequest;
use ccxt\BadSymbol;
use ccxt\InvalidOrder;
use ccxt\NotSupported;
use ccxt\Precise;
use React\Async;
use React\Promise;
use React\Promise\PromiseInterface;

class coinex extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'coinex',
            'name' => 'CoinEx',
            'version' => 'v1',
            'countries' => array( 'CN' ),
            // IP ratelimit is 400 requests per second
            // rateLimit = 1000ms / 400 = 2.5
            // 200 per 2 seconds => 100 per second => weight = 4
            // 120 per 2 seconds => 60 per second => weight = 6.667
            // 80 per 2 seconds => 40 per second => weight = 10
            // 60 per 2 seconds => 30 per second => weight = 13.334
            // 40 per 2 seconds => 20 per second => weight = 20
            // 20 per 2 seconds => 10 per second => weight = 40
            // v1 is per 2 seconds and v2 is per 1 second
            'rateLimit' => 2.5,
            'pro' => true,
            'certified' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => true,
                'borrowCrossMargin' => false,
                'borrowIsolatedMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'createDepositAddress' => true,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createOrders' => true,
                'createReduceOnlyOrder' => true,
                'createStopLossOrder' => true,
                'createTakeProfitOrder' => true,
                'createTriggerOrder' => true,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowInterest' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDepositAddressByNetwork' => false,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => true,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => true,
                'fetchIsolatedBorrowRates' => true,
                'fetchLeverage' => 'emulated',
                'fetchLeverages' => true,
                'fetchLeverageTiers' => true,
                'fetchMarginAdjustmentHistory' => true,
                'fetchMarketLeverageTiers' => 'emulated',
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPosition' => true,
                'fetchPositionHistory' => true,
                'fetchPositions' => true,
                'fetchPositionsHistory' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransfer' => false,
                'fetchTransfers' => true,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => true,
                'repayCrossMargin' => false,
                'repayIsolatedMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1min',
                '3m' => '3min',
                '5m' => '5min',
                '15m' => '15min',
                '30m' => '30min',
                '1h' => '1hour',
                '2h' => '2hour',
                '4h' => '4hour',
                '6h' => '6hour',
                '12h' => '12hour',
                '1d' => '1day',
                '3d' => '3day',
                '1w' => '1week',
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/51840849/87182089-1e05fa00-c2ec-11ea-8da9-cc73b45abbbc.jpg',
                'api' => array(
                    'public' => 'https://api.coinex.com',
                    'private' => 'https://api.coinex.com',
                    'perpetualPublic' => 'https://api.coinex.com/perpetual',
                    'perpetualPrivate' => 'https://api.coinex.com/perpetual',
                ),
                'www' => 'https://www.coinex.com',
                'doc' => 'https://docs.coinex.com/api/v2',
                'fees' => 'https://www.coinex.com/fees',
                'referral' => 'https://www.coinex.com/register?refer_code=yw5fz',
            ),
            'api' => array(
                'v1' => array(
                    'public' => array(
                        'get' => array(
                            'amm/market' => 1,
                            'common/currency/rate' => 1,
                            'common/asset/config' => 1,
                            'common/maintain/info' => 1,
                            'common/temp-maintain/info' => 1,
                            'margin/market' => 1,
                            'market/info' => 1,
                            'market/list' => 1,
                            'market/ticker' => 1,
                            'market/ticker/all' => 1,
                            'market/depth' => 1,
                            'market/deals' => 1,
                            'market/kline' => 1,
                            'market/detail' => 1,
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'account/amm/balance' => 40,
                            'account/investment/balance' => 40,
                            'account/balance/history' => 40,
                            'account/market/fee' => 40,
                            'balance/coin/deposit' => 40,
                            'balance/coin/withdraw' => 40,
                            'balance/info' => 40,
                            'balance/deposit/address/{coin_type}' => 40,
                            'contract/transfer/history' => 40,
                            'credit/info' => 40,
                            'credit/balance' => 40,
                            'investment/transfer/history' => 40,
                            'margin/account' => 1,
                            'margin/config' => 1,
                            'margin/loan/history' => 40,
                            'margin/transfer/history' => 40,
                            'order/deals' => 40,
                            'order/finished' => 40,
                            'order/pending' => 8,
                            'order/status' => 8,
                            'order/status/batch' => 8,
                            'order/user/deals' => 40,
                            'order/stop/finished' => 40,
                            'order/stop/pending' => 8,
                            'order/user/trade/fee' => 1,
                            'order/market/trade/info' => 1,
                            'sub_account/balance' => 1,
                            'sub_account/transfer/history' => 40,
                            'sub_account/auth/api' => 40,
                            'sub_account/auth/api/{user_auth_id}' => 40,
                        ),
                        'post' => array(
                            'balance/coin/withdraw' => 40,
                            'contract/balance/transfer' => 40,
                            'margin/flat' => 40,
                            'margin/loan' => 40,
                            'margin/transfer' => 40,
                            'order/limit/batch' => 40,
                            'order/ioc' => 13.334,
                            'order/limit' => 13.334,
                            'order/market' => 13.334,
                            'order/modify' => 13.334,
                            'order/stop/limit' => 13.334,
                            'order/stop/market' => 13.334,
                            'order/stop/modify' => 13.334,
                            'sub_account/transfer' => 40,
                            'sub_account/register' => 1,
                            'sub_account/unfrozen' => 40,
                            'sub_account/frozen' => 40,
                            'sub_account/auth/api' => 40,
                        ),
                        'put' => array(
                            'balance/deposit/address/{coin_type}' => 40,
                            'sub_account/unfrozen' => 40,
                            'sub_account/frozen' => 40,
                            'sub_account/auth/api/{user_auth_id}' => 40,
                            'v1/account/settings' => 40,
                        ),
                        'delete' => array(
                            'balance/coin/withdraw' => 40,
                            'order/pending/batch' => 40,
                            'order/pending' => 13.334,
                            'order/stop/pending' => 40,
                            'order/stop/pending/{id}' => 13.334,
                            'order/pending/by_client_id' => 40,
                            'order/stop/pending/by_client_id' => 40,
                            'sub_account/auth/api/{user_auth_id}' => 40,
                            'sub_account/authorize/{id}' => 40,
                        ),
                    ),
                    'perpetualPublic' => array(
                        'get' => array(
                            'ping' => 1,
                            'time' => 1,
                            'market/list' => 1,
                            'market/limit_config' => 1,
                            'market/ticker' => 1,
                            'market/ticker/all' => 1,
                            'market/depth' => 1,
                            'market/deals' => 1,
                            'market/funding_history' => 1,
                            'market/kline' => 1,
                        ),
                    ),
                    'perpetualPrivate' => array(
                        'get' => array(
                            'market/user_deals' => 1,
                            'asset/query' => 40,
                            'order/pending' => 8,
                            'order/finished' => 40,
                            'order/stop_finished' => 40,
                            'order/stop_pending' => 8,
                            'order/status' => 8,
                            'order/stop_status' => 8,
                            'position/finished' => 40,
                            'position/pending' => 40,
                            'position/funding' => 40,
                            'position/adl_history' => 40,
                            'market/preference' => 40,
                            'position/margin_history' => 40,
                            'position/settle_history' => 40,
                        ),
                        'post' => array(
                            'market/adjust_leverage' => 1,
                            'market/position_expect' => 1,
                            'order/put_limit' => 20,
                            'order/put_market' => 20,
                            'order/put_stop_limit' => 20,
                            'order/put_stop_market' => 20,
                            'order/modify' => 20,
                            'order/modify_stop' => 20,
                            'order/cancel' => 20,
                            'order/cancel_all' => 40,
                            'order/cancel_batch' => 40,
                            'order/cancel_stop' => 20,
                            'order/cancel_stop_all' => 40,
                            'order/close_limit' => 20,
                            'order/close_market' => 20,
                            'position/adjust_margin' => 20,
                            'position/stop_loss' => 20,
                            'position/take_profit' => 20,
                            'position/market_close' => 20,
                            'order/cancel/by_client_id' => 20,
                            'order/cancel_stop/by_client_id' => 20,
                            'market/preference' => 20,
                        ),
                    ),
                ),
                'v2' => array(
                    'public' => array(
                        'get' => array(
                            'maintain-info' => 1,
                            'ping' => 1,
                            'time' => 1,
                            'spot/market' => 1,
                            'spot/ticker' => 1,
                            'spot/depth' => 1,
                            'spot/deals' => 1,
                            'spot/kline' => 1,
                            'spot/index' => 1,
                            'futures/market' => 1,
                            'futures/ticker' => 1,
                            'futures/depth' => 1,
                            'futures/deals' => 1,
                            'futures/kline' => 1,
                            'futures/index' => 1,
                            'futures/funding-rate' => 1,
                            'futures/funding-rate-history' => 1,
                            'futures/position-level' => 1,
                            'futures/liquidation-history' => 1,
                            'futures/basis-history' => 1,
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'account/subs' => 1,
                            'account/subs/api-detail' => 40,
                            'account/subs/info' => 1,
                            'account/subs/api' => 40,
                            'account/subs/transfer-history' => 40,
                            'account/subs/spot-balance' => 1,
                            'account/trade-fee-rate' => 40,
                            'assets/spot/balance' => 40,
                            'assets/futures/balance' => 40,
                            'assets/margin/balance' => 1,
                            'assets/financial/balance' => 40,
                            'assets/amm/liquidity' => 40,
                            'assets/credit/info' => 40,
                            'assets/margin/borrow-history' => 40,
                            'assets/margin/interest-limit' => 1,
                            'assets/deposit-address' => 40,
                            'assets/deposit-history' => 40,
                            'assets/withdraw' => 40,
                            'assets/deposit-withdraw-config' => 1,
                            'assets/transfer-history' => 40,
                            'spot/order-status' => 8,
                            'spot/batch-order-status' => 8,
                            'spot/pending-order' => 8,
                            'spot/finished-order' => 40,
                            'spot/pending-stop-order' => 8,
                            'spot/finished-stop-order' => 40,
                            'spot/user-deals' => 40,
                            'spot/order-deals' => 40,
                            'futures/order-status' => 8,
                            'futures/batch-order-status' => 1,
                            'futures/pending-order' => 8,
                            'futures/finished-order' => 40,
                            'futures/pending-stop-order' => 8,
                            'futures/finished-stop-order' => 40,
                            'futures/user-deals' => 1,
                            'futures/order-deals' => 1,
                            'futures/pending-position' => 40,
                            'futures/finished-position' => 1,
                            'futures/position-margin-history' => 1,
                            'futures/position-funding-history' => 40,
                            'futures/position-adl-history' => 1,
                            'futures/position-settle-history' => 1,
                        ),
                        'post' => array(
                            'account/subs' => 40,
                            'account/subs/frozen' => 40,
                            'account/subs/unfrozen' => 40,
                            'account/subs/api' => 40,
                            'account/subs/edit-api' => 40,
                            'account/subs/delete-api' => 40,
                            'account/subs/transfer' => 40,
                            'account/settings' => 40,
                            'assets/margin/borrow' => 40,
                            'assets/margin/repay' => 40,
                            'assets/renewal-deposit-address' => 40,
                            'assets/withdraw' => 40,
                            'assets/cancel-withdraw' => 40,
                            'assets/transfer' => 40,
                            'assets/amm/add-liquidity' => 1,
                            'assets/amm/remove-liquidity' => 1,
                            'spot/order' => 13.334,
                            'spot/stop-order' => 13.334,
                            'spot/batch-order' => 40,
                            'spot/batch-stop-order' => 1,
                            'spot/modify-order' => 13.334,
                            'spot/modify-stop-order' => 13.334,
                            'spot/cancel-all-order' => 1,
                            'spot/cancel-order' => 6.667,
                            'spot/cancel-stop-order' => 6.667,
                            'spot/cancel-batch-order' => 10,
                            'spot/cancel-batch-stop-order' => 10,
                            'spot/cancel-order-by-client-id' => 1,
                            'spot/cancel-stop-order-by-client-id' => 1,
                            'futures/order' => 20,
                            'futures/stop-order' => 20,
                            'futures/batch-order' => 1,
                            'futures/batch-stop-order' => 1,
                            'futures/modify-order' => 20,
                            'futures/modify-stop-order' => 20,
                            'futures/cancel-all-order' => 1,
                            'futures/cancel-order' => 10,
                            'futures/cancel-stop-order' => 10,
                            'futures/cancel-batch-order' => 20,
                            'futures/cancel-batch-stop-order' => 20,
                            'futures/cancel-order-by-client-id' => 1,
                            'futures/cancel-stop-order-by-client-id' => 1,
                            'futures/close-position' => 20,
                            'futures/adjust-position-margin' => 20,
                            'futures/adjust-position-leverage' => 20,
                            'futures/set-position-stop-loss' => 20,
                            'futures/set-position-take-profit' => 20,
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'maker' => 0.001,
                    'taker' => 0.001,
                ),
                'funding' => array(
                    'withdraw' => array(
                        'BCH' => 0.0,
                        'BTC' => 0.001,
                        'LTC' => 0.001,
                        'ETH' => 0.001,
                        'ZEC' => 0.0001,
                        'DASH' => 0.0001,
                    ),
                ),
            ),
            'limits' => array(
                'amount' => array(
                    'min' => 0.001,
                    'max' => null,
                ),
            ),
            'options' => array(
                'brokerId' => 'x-167673045',
                'createMarketBuyOrderRequiresPrice' => true,
                'defaultType' => 'spot', // spot, swap, margin
                'defaultSubType' => 'linear', // linear, inverse
                'fetchDepositAddress' => array(
                    'fillResponseFromRequest' => true,
                ),
                'accountsById' => array(
                    'spot' => '0',
                ),
                'networks' => array(
                    'BEP20' => 'BSC',
                    'TRX' => 'TRC20',
                    'ETH' => 'ERC20',
                ),
            ),
            'commonCurrencies' => array(
                'ACM' => 'Actinium',
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    // https://github.com/coinexcom/coinex_exchange_api/wiki/013error_code
                    '23' => '\\ccxt\\PermissionDenied', // IP Prohibited
                    '24' => '\\ccxt\\AuthenticationError',
                    '25' => '\\ccxt\\AuthenticationError',
                    '34' => '\\ccxt\\AuthenticationError', // Access id is expires
                    '35' => '\\ccxt\\ExchangeNotAvailable', // Service unavailable
                    '36' => '\\ccxt\\RequestTimeout', // Service timeout
                    '213' => '\\ccxt\\RateLimitExceeded', // Too many requests
                    '107' => '\\ccxt\\InsufficientFunds',
                    '600' => '\\ccxt\\OrderNotFound',
                    '601' => '\\ccxt\\InvalidOrder',
                    '602' => '\\ccxt\\InvalidOrder',
                    '606' => '\\ccxt\\InvalidOrder',
                ),
                'broad' => array(
                    'ip not allow visit' => '\\ccxt\\PermissionDenied',
                    'service too busy' => '\\ccxt\\ExchangeNotAvailable',
                ),
            ),
        ));
    }

    public function fetch_currencies($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            $response = Async\await($this->v1PublicGetCommonAssetConfig ($params));
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "USDT-ERC20" => array(
            //                  "asset" => "USDT",
            //                  "chain" => "ERC20",
            //                  "withdrawal_precision" => 6,
            //                  "can_deposit" => true,
            //                  "can_withdraw" => true,
            //                  "deposit_least_amount" => "4.9",
            //                  "withdraw_least_amount" => "4.9",
            //                  "withdraw_tx_fee" => "4.9",
            //                  "explorer_asset_url" => "https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7"
            //             ),
            //             ...
            //         ),
            //         "message" => "Success",
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $coins = is_array($data) ? array_keys($data) : array();
            $result = array();
            for ($i = 0; $i < count($coins); $i++) {
                $coin = $coins[$i];
                $currency = $data[$coin];
                $currencyId = $this->safe_string($currency, 'asset');
                $networkId = $this->safe_string($currency, 'chain');
                $code = $this->safe_currency_code($currencyId);
                $precisionString = $this->parse_precision($this->safe_string($currency, 'withdrawal_precision'));
                $precision = $this->parse_number($precisionString);
                $canDeposit = $this->safe_value($currency, 'can_deposit');
                $canWithdraw = $this->safe_value($currency, 'can_withdraw');
                $feeString = $this->safe_string($currency, 'withdraw_tx_fee');
                $fee = $this->parse_number($feeString);
                $minNetworkDepositString = $this->safe_string($currency, 'deposit_least_amount');
                $minNetworkDeposit = $this->parse_number($minNetworkDepositString);
                $minNetworkWithdrawString = $this->safe_string($currency, 'withdraw_least_amount');
                $minNetworkWithdraw = $this->parse_number($minNetworkWithdrawString);
                if ($this->safe_value($result, $code) === null) {
                    $result[$code] = array(
                        'id' => $currencyId,
                        'numericId' => null,
                        'code' => $code,
                        'info' => null,
                        'name' => null,
                        'active' => $canDeposit && $canWithdraw,
                        'deposit' => $canDeposit,
                        'withdraw' => $canWithdraw,
                        'fee' => $fee,
                        'precision' => $precision,
                        'limits' => array(
                            'amount' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'deposit' => array(
                                'min' => $minNetworkDeposit,
                                'max' => null,
                            ),
                            'withdraw' => array(
                                'min' => $minNetworkWithdraw,
                                'max' => null,
                            ),
                        ),
                    );
                }
                $minFeeString = $this->safe_string($result[$code], 'fee');
                if ($feeString !== null) {
                    $minFeeString = ($minFeeString === null) ? $feeString : Precise::string_min($feeString, $minFeeString);
                }
                $depositAvailable = $this->safe_value($result[$code], 'deposit');
                $depositAvailable = ($canDeposit) ? $canDeposit : $depositAvailable;
                $withdrawAvailable = $this->safe_value($result[$code], 'withdraw');
                $withdrawAvailable = ($canWithdraw) ? $canWithdraw : $withdrawAvailable;
                $minDepositString = $this->safe_string($result[$code]['limits']['deposit'], 'min');
                if ($minNetworkDepositString !== null) {
                    $minDepositString = ($minDepositString === null) ? $minNetworkDepositString : Precise::string_min($minNetworkDepositString, $minDepositString);
                }
                $minWithdrawString = $this->safe_string($result[$code]['limits']['withdraw'], 'min');
                if ($minNetworkWithdrawString !== null) {
                    $minWithdrawString = ($minWithdrawString === null) ? $minNetworkWithdrawString : Precise::string_min($minNetworkWithdrawString, $minWithdrawString);
                }
                $minPrecisionString = $this->safe_string($result[$code], 'precision');
                if ($precisionString !== null) {
                    $minPrecisionString = ($minPrecisionString === null) ? $precisionString : Precise::string_min($precisionString, $minPrecisionString);
                }
                $networks = $this->safe_value($result[$code], 'networks', array());
                $network = array(
                    'info' => $currency,
                    'id' => $networkId,
                    'network' => $networkId,
                    'name' => null,
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'deposit' => array(
                            'min' => $this->safe_number($currency, 'deposit_least_amount'),
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->safe_number($currency, 'withdraw_least_amount'),
                            'max' => null,
                        ),
                    ),
                    'active' => $canDeposit && $canWithdraw,
                    'deposit' => $canDeposit,
                    'withdraw' => $canWithdraw,
                    'fee' => $fee,
                    'precision' => $precision,
                );
                $networks[$networkId] = $network;
                $result[$code]['networks'] = $networks;
                $result[$code]['active'] = $depositAvailable && $withdrawAvailable;
                $result[$code]['deposit'] = $depositAvailable;
                $result[$code]['withdraw'] = $withdrawAvailable;
                $info = $this->safe_value($result[$code], 'info', array());
                $info[] = $currency;
                $result[$code]['info'] = $info;
                $result[$code]['fee'] = $this->parse_number($minFeeString);
                $result[$code]['precision'] = $this->parse_number($minPrecisionString);
                $result[$code]['limits']['deposit']['min'] = $this->parse_number($minDepositString);
                $result[$code]['limits']['withdraw']['min'] = $this->parse_number($minWithdrawString);
            }
            return $result;
        }) ();
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for coinex
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-market
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-market
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $promisesUnresolved = array(
                $this->fetch_spot_markets($params),
                $this->fetch_contract_markets($params),
            );
            $promises = Async\await(Promise\all($promisesUnresolved));
            $spotMarkets = $promises[0];
            $swapMarkets = $promises[1];
            return $this->array_concat($spotMarkets, $swapMarkets);
        }) ();
    }

    public function fetch_spot_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->v2PublicGetSpotMarket ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "base_ccy" => "SORA",
            //                 "base_ccy_precision" => 8,
            //                 "is_amm_available" => true,
            //                 "is_margin_available" => false,
            //                 "maker_fee_rate" => "0.003",
            //                 "market" => "SORAUSDT",
            //                 "min_amount" => "500",
            //                 "quote_ccy" => "USDT",
            //                 "quote_ccy_precision" => 6,
            //                 "taker_fee_rate" => "0.003"
            //             ),
            //         ),
            //         "message" => "OK"
            //     }
            //
            $markets = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $market = $markets[$i];
                $id = $this->safe_string($market, 'market');
                $baseId = $this->safe_string($market, 'base_ccy');
                $quoteId = $this->safe_string($market, 'quote_ccy');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => null,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => null,
                    'type' => 'spot',
                    'spot' => true,
                    'margin' => null,
                    'swap' => false,
                    'future' => false,
                    'option' => false,
                    'active' => null,
                    'contract' => false,
                    'linear' => null,
                    'inverse' => null,
                    'taker' => $this->safe_number($market, 'taker_fee_rate'),
                    'maker' => $this->safe_number($market, 'maker_fee_rate'),
                    'contractSize' => null,
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'base_ccy_precision'))),
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quote_ccy_precision'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($market, 'min_amount'),
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $market,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_contract_markets($params) {
        return Async\async(function () use ($params) {
            $response = Async\await($this->v2PublicGetFuturesMarket ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => [
            //             array(
            //                 "base_ccy" => "BTC",
            //                 "base_ccy_precision" => 8,
            //                 "contract_type" => "inverse",
            //                 "leverage" => ["1","2","3","5","8","10","15","20","30","50","100"],
            //                 "maker_fee_rate" => "0",
            //                 "market" => "BTCUSD",
            //                 "min_amount" => "10",
            //                 "open_interest_volume" => "2566879",
            //                 "quote_ccy" => "USD",
            //                 "quote_ccy_precision" => 2,
            //                 "taker_fee_rate" => "0"
            //             ),
            //         ],
            //         "message" => "OK"
            //     }
            //
            $markets = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($markets); $i++) {
                $entry = $markets[$i];
                $fees = $this->fees;
                $leverages = $this->safe_list($entry, 'leverage', array());
                $subType = $this->safe_string($entry, 'contract_type');
                $linear = ($subType === 'linear');
                $inverse = ($subType === 'inverse');
                $id = $this->safe_string($entry, 'market');
                $baseId = $this->safe_string($entry, 'base_ccy');
                $quoteId = $this->safe_string($entry, 'quote_ccy');
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $settleId = ($subType === 'linear') ? 'USDT' : $baseId;
                $settle = $this->safe_currency_code($settleId);
                $symbol = $base . '/' . $quote . ':' . $settle;
                $leveragesLength = count($leverages);
                $result[] = array(
                    'id' => $id,
                    'symbol' => $symbol,
                    'base' => $base,
                    'quote' => $quote,
                    'settle' => $settle,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'settleId' => $settleId,
                    'type' => 'swap',
                    'spot' => false,
                    'margin' => false,
                    'swap' => true,
                    'future' => false,
                    'option' => false,
                    'active' => null,
                    'contract' => true,
                    'linear' => $linear,
                    'inverse' => $inverse,
                    'taker' => $fees['trading']['taker'],
                    'maker' => $fees['trading']['maker'],
                    'contractSize' => $this->parse_number('1'),
                    'expiry' => null,
                    'expiryDatetime' => null,
                    'strike' => null,
                    'optionType' => null,
                    'precision' => array(
                        'amount' => $this->parse_number($this->parse_precision($this->safe_string($entry, 'base_ccy_precision'))),
                        'price' => $this->parse_number($this->parse_precision($this->safe_string($entry, 'quote_ccy_precision'))),
                    ),
                    'limits' => array(
                        'leverage' => array(
                            'min' => $this->safe_number($leverages, 0),
                            'max' => $this->safe_number($leverages, $leveragesLength - 1),
                        ),
                        'amount' => array(
                            'min' => $this->safe_number($entry, 'min_amount'),
                            'max' => null,
                        ),
                        'price' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'cost' => array(
                            'min' => null,
                            'max' => null,
                        ),
                    ),
                    'created' => null,
                    'info' => $entry,
                );
            }
            return $result;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // Spot fetchTicker, fetchTickers
        //
        //     {
        //         "close" => "62393.47",
        //         "high" => "64106.41",
        //         "last" => "62393.47",
        //         "low" => "59650.01",
        //         "market" => "BTCUSDT",
        //         "open" => "61616.15",
        //         "period" => 86400,
        //         "value" => "28711273.4065667262",
        //         "volume" => "461.76557205",
        //         "volume_buy" => "11.41506354",
        //         "volume_sell" => "7.3240169"
        //     }
        //
        // Swap fetchTicker, fetchTickers
        //
        //     {
        //         "close" => "62480.08",
        //         "high" => "64100",
        //         "index_price" => "62443.05",
        //         "last" => "62480.08",
        //         "low" => "59600",
        //         "mark_price" => "62443.05",
        //         "market" => "BTCUSDT",
        //         "open" => "61679.98",
        //         "period" => 86400,
        //         "value" => "180226025.69791713065326633165",
        //         "volume" => "2900.2218",
        //         "volume_buy" => "7.3847",
        //         "volume_sell" => "6.1249"
        //     }
        //
        $marketType = (is_array($ticker) && array_key_exists('mark_price', $ticker)) ? 'swap' : 'spot';
        $marketId = $this->safe_string($ticker, 'market');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $this->safe_string($ticker, 'high'),
            'low' => $this->safe_string($ticker, 'low'),
            'bid' => null,
            'bidVolume' => $this->safe_string($ticker, 'volume_buy'),
            'ask' => null,
            'askVolume' => $this->safe_string($ticker, 'volume_sell'),
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open'),
            'close' => $this->safe_string($ticker, 'close'),
            'last' => $this->safe_string($ticker, 'last'),
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'volume'),
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market-ticker
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market-ticker
             * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->v2PublicGetFuturesTicker (array_merge($request, $params)));
            } else {
                $response = Async\await($this->v2PublicGetSpotTicker (array_merge($request, $params)));
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "close" => "62393.47",
            //                 "high" => "64106.41",
            //                 "last" => "62393.47",
            //                 "low" => "59650.01",
            //                 "market" => "BTCUSDT",
            //                 "open" => "61616.15",
            //                 "period" => 86400,
            //                 "value" => "28711273.4065667262",
            //                 "volume" => "461.76557205",
            //                 "volume_buy" => "11.41506354",
            //                 "volume_sell" => "7.3240169"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "close" => "62480.08",
            //                 "high" => "64100",
            //                 "index_price" => "62443.05",
            //                 "last" => "62480.08",
            //                 "low" => "59600",
            //                 "mark_price" => "62443.05",
            //                 "market" => "BTCUSDT",
            //                 "open" => "61679.98",
            //                 "period" => 86400,
            //                 "value" => "180226025.69791713065326633165",
            //                 "volume" => "2900.2218",
            //                 "volume_buy" => "7.3847",
            //                 "volume_sell" => "6.1249"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            $result = $this->safe_dict($data, 0, array());
            return $this->parse_ticker($result, $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market-ticker
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market-ticker
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all $market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $market = null;
            if ($symbols !== null) {
                $symbol = $this->safe_value($symbols, 0);
                $market = $this->market($symbol);
            }
            list($marketType, $query) = $this->handle_market_type_and_params('fetchTickers', $market, $params);
            $response = null;
            if ($marketType === 'swap') {
                $response = Async\await($this->v2PublicGetFuturesTicker ($query));
            } else {
                $response = Async\await($this->v2PublicGetSpotTicker ($query));
            }
            //
            // Spot
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "close" => "62393.47",
            //                 "high" => "64106.41",
            //                 "last" => "62393.47",
            //                 "low" => "59650.01",
            //                 "market" => "BTCUSDT",
            //                 "open" => "61616.15",
            //                 "period" => 86400,
            //                 "value" => "28711273.4065667262",
            //                 "volume" => "461.76557205",
            //                 "volume_buy" => "11.41506354",
            //                 "volume_sell" => "7.3240169"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "close" => "62480.08",
            //                 "high" => "64100",
            //                 "index_price" => "62443.05",
            //                 "last" => "62480.08",
            //                 "low" => "59600",
            //                 "mark_price" => "62443.05",
            //                 "market" => "BTCUSDT",
            //                 "open" => "61679.98",
            //                 "period" => 86400,
            //                 "value" => "180226025.69791713065326633165",
            //                 "volume" => "2900.2218",
            //                 "volume_buy" => "7.3847",
            //                 "volume_sell" => "6.1249"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_tickers($data, $symbols);
        }) ();
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @see https://docs.coinex.com/api/v2/common/http/time
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->v2PublicGetTime ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "timestamp" => 1711699867777
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            return $this->safe_integer($data, 'timestamp');
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = 20, $params = array ()) {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market-$depth
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market-$depth
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($limit === null) {
                $limit = 20; // default
            }
            $request = array(
                'market' => $market['id'],
                'limit' => $limit,
                'interval' => '0',
            );
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->v2PublicGetFuturesDepth (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "data" => array(
                //             "depth" => array(
                //                 "asks" => [
                //                     ["70851.94", "0.2119"],
                //                     ["70851.95", "0.0004"],
                //                     ["70851.96", "0.0004"]
                //                 ],
                //                 "bids" => [
                //                     ["70851.93", "1.0314"],
                //                     ["70850.93", "0.0021"],
                //                     ["70850.42", "0.0306"]
                //                 ],
                //                 "checksum" => 2956436260,
                //                 "last" => "70851.94",
                //                 "updated_at" => 1712824003252
                //             ),
                //             "is_full" => true,
                //             "market" => "BTCUSDT"
                //         ),
                //         "message" => "OK"
                //     }
                //
            } else {
                $response = Async\await($this->v2PublicGetSpotDepth (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "data" => array(
                //             "depth" => array(
                //                 "asks" => [
                //                     ["70875.31", "0.28670282"],
                //                     ["70875.32", "0.31008114"],
                //                     ["70875.42", "0.05876653"]
                //                 ],
                //                 "bids" => [
                //                     ["70855.3", "0.00632222"],
                //                     ["70855.29", "0.36216834"],
                //                     ["70855.17", "0.10166802"]
                //                 ],
                //                 "checksum" => 2313816665,
                //                 "last" => "70857.19",
                //                 "updated_at" => 1712823790987
                //             ),
                //             "is_full" => true,
                //             "market" => "BTCUSDT"
                //         ),
                //         "message" => "OK"
                //     }
                //
            }
            $data = $this->safe_dict($response, 'data', array());
            $depth = $this->safe_dict($data, 'depth', array());
            $timestamp = $this->safe_integer($depth, 'updated_at');
            return $this->parse_order_book($depth, $symbol, $timestamp);
        }) ();
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // Spot and Swap fetchTrades (public)
        //
        //     {
        //         "amount" => "0.00049432",
        //         "created_at" => 1713849825667,
        //         "deal_id" => 4137517302,
        //         "price" => "66251",
        //         "side" => "buy"
        //     }
        //
        // Spot and Margin fetchMyTrades (private)
        //
        //      {
        //          "id" => 2611520950,
        //          "order_id" => 63286573298,
        //          "account_id" => 0,
        //          "create_time" => 1638990636,
        //          "type" => "sell",
        //          "role" => "taker",
        //          "price" => "192.29",
        //          "amount" => "0.098",
        //          "fee" => "0.03768884",
        //          "fee_asset" => "USDT",
        //          "market" => "AAVEUSDT",
        //          "deal_money" => "18.84442"
        //      }
        //
        // Swap fetchMyTrades (private)
        //
        //     {
        //         "amount" => "0.0012",
        //         "deal_fee" => "0.0237528",
        //         "deal_insurance" => "0",
        //         "deal_margin" => "15.8352",
        //         "deal_order_id" => 17797031903,
        //         "deal_profit" => "0",
        //         "deal_stock" => "47.5056",
        //         "deal_type" => 1,
        //         "deal_user_id" => 2969195,
        //         "fee_asset" => "",
        //         "fee_discount" => "0",
        //         "fee_price" => "0",
        //         "fee_rate" => "0.0005",
        //         "fee_real_rate" => "0.0005",
        //         "id" => 379044296,
        //         "leverage" => "3",
        //         "margin_amount" => "15.8352",
        //         "market" => "BTCUSDT",
        //         "open_price" => "39588",
        //         "order_id" => 17797092987,
        //         "position_amount" => "0.0012",
        //         "position_id" => 62052321,
        //         "position_type" => 1,
        //         "price" => "39588",
        //         "role" => 2,
        //         "side" => 2,
        //         "time" => 1650675936.016103,
        //         "user_id" => 3620173
        //     }
        //
        $timestamp = $this->safe_timestamp_2($trade, 'create_time', 'time');
        if ($timestamp === null) {
            $timestamp = $this->safe_integer($trade, 'created_at');
        }
        $tradeId = $this->safe_string_2($trade, 'id', 'deal_id');
        $orderId = $this->safe_string($trade, 'order_id');
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'amount');
        $marketId = $this->safe_string($trade, 'market');
        $marketType = $this->safe_string($trade, 'market_type');
        $defaultType = ($marketType === null) ? 'spot' : 'swap';
        $market = $this->safe_market($marketId, $market, null, $defaultType);
        $symbol = $market['symbol'];
        $costString = $this->safe_string($trade, 'deal_money');
        $fee = null;
        $feeCostString = $this->safe_string_2($trade, 'fee', 'deal_fee');
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'fee_asset');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        $takerOrMaker = $this->safe_string($trade, 'role');
        if ($takerOrMaker === '1') {
            $takerOrMaker = 'maker';
        } elseif ($takerOrMaker === '2') {
            $takerOrMaker = 'taker';
        }
        $side = null;
        if ($market['type'] === 'swap') {
            $rawSide = $this->safe_integer($trade, 'side');
            if ($rawSide === 1) {
                $side = 'sell';
            } elseif ($rawSide === 2) {
                $side = 'buy';
            }
            if ($side === null) {
                $side = $this->safe_string_2($trade, 'type', 'side');
            }
        } else {
            $side = $this->safe_string_2($trade, 'type', 'side');
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'id' => $tradeId,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of the most recent trades for a particular $symbol
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market-deals
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market-deals
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                // 'last_id' => 0,
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->v2PublicGetFuturesDeals (array_merge($request, $params)));
            } else {
                $response = Async\await($this->v2PublicGetSpotDeals (array_merge($request, $params)));
            }
            //
            // Spot and Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "amount" => "0.00049432",
            //                 "created_at" => 1713849825667,
            //                 "deal_id" => 4137517302,
            //                 "price" => "66251",
            //                 "side" => "buy"
            //             ),
            //         ),
            //         "message" => "OK"
            //     }
            //
            return $this->parse_trades($response['data'], $market, $since, $limit);
        }) ();
    }

    public function fetch_trading_fee(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the trading fees for a $market
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = null;
            if ($market['spot']) {
                $response = Async\await($this->v2PublicGetSpotMarket (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "data" => array(
                //             {
                //                 "base_ccy" => "BTC",
                //                 "base_ccy_precision" => 8,
                //                 "is_amm_available" => false,
                //                 "is_margin_available" => true,
                //                 "maker_fee_rate" => "0.002",
                //                 "market" => "BTCUSDT",
                //                 "min_amount" => "0.0001",
                //                 "quote_ccy" => "USDT",
                //                 "quote_ccy_precision" => 2,
                //                 "taker_fee_rate" => "0.002"
                //             }
                //         ),
                //         "message" => "OK"
                //     }
                //
            } else {
                $response = Async\await($this->v2PublicGetFuturesMarket (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "data" => [
                //             {
                //                 "base_ccy" => "BTC",
                //                 "base_ccy_precision" => 8,
                //                 "contract_type" => "linear",
                //                 "leverage" => ["1","2","3","5","8","10","15","20","30","50","100"],
                //                 "maker_fee_rate" => "0",
                //                 "market" => "BTCUSDT",
                //                 "min_amount" => "0.0001",
                //                 "open_interest_volume" => "185.7498",
                //                 "quote_ccy" => "USDT",
                //                 "quote_ccy_precision" => 2,
                //                 "taker_fee_rate" => "0"
                //             }
                //         ],
                //         "message" => "OK"
                //     }
                //
            }
            $data = $this->safe_list($response, 'data', array());
            $result = $this->safe_dict($data, 0, array());
            return $this->parse_trading_fee($result, $market);
        }) ();
    }

    public function fetch_trading_fees($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetch the trading fees for multiple markets
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=fee-structure fee structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $type = null;
            list($type, $params) = $this->handle_market_type_and_params('fetchTradingFees', null, $params);
            $response = null;
            if ($type === 'swap') {
                $response = Async\await($this->v2PublicGetFuturesMarket ($params));
                //
                //     {
                //         "code" => 0,
                //         "data" => [
                //             {
                //                 "base_ccy" => "BTC",
                //                 "base_ccy_precision" => 8,
                //                 "contract_type" => "linear",
                //                 "leverage" => ["1","2","3","5","8","10","15","20","30","50","100"],
                //                 "maker_fee_rate" => "0",
                //                 "market" => "BTCUSDT",
                //                 "min_amount" => "0.0001",
                //                 "open_interest_volume" => "185.7498",
                //                 "quote_ccy" => "USDT",
                //                 "quote_ccy_precision" => 2,
                //                 "taker_fee_rate" => "0"
                //             }
                //         ],
                //         "message" => "OK"
                //     }
                //
            } else {
                $response = Async\await($this->v2PublicGetSpotMarket ($params));
                //
                //     {
                //         "code" => 0,
                //         "data" => array(
                //             array(
                //                 "base_ccy" => "BTC",
                //                 "base_ccy_precision" => 8,
                //                 "is_amm_available" => false,
                //                 "is_margin_available" => true,
                //                 "maker_fee_rate" => "0.002",
                //                 "market" => "BTCUSDT",
                //                 "min_amount" => "0.0001",
                //                 "quote_ccy" => "USDT",
                //                 "quote_ccy_precision" => 2,
                //                 "taker_fee_rate" => "0.002"
                //             ),
                //         ),
                //         "message" => "OK"
                //     }
                //
            }
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $marketId = $this->safe_string($entry, 'market');
                $market = $this->safe_market($marketId, null, null, $type);
                $symbol = $market['symbol'];
                $result[$symbol] = $this->parse_trading_fee($entry, $market);
            }
            return $result;
        }) ();
    }

    public function parse_trading_fee($fee, ?array $market = null): array {
        $marketId = $this->safe_value($fee, 'market');
        $symbol = $this->safe_symbol($marketId, $market);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'maker' => $this->safe_number($fee, 'maker_fee_rate'),
            'taker' => $this->safe_number($fee, 'taker_fee_rate'),
            'percentage' => true,
            'tierBased' => true,
        );
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     {
        //         "close" => "66999.95",
        //         "created_at" => 1713934620000,
        //         "high" => "66999.95",
        //         "low" => "66988.53",
        //         "market" => "BTCUSDT",
        //         "open" => "66988.53",
        //         "value" => "0.1572393",        // base volume
        //         "volume" => "10533.2501364336" // quote volume
        //     }
        //
        return array(
            $this->safe_integer($ohlcv, 'created_at'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'value'),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
             * @see https://docs.coinex.com/api/v2/spot/market/http/list-$market-kline
             * @see https://docs.coinex.com/api/v2/futures/market/http/list-$market-kline
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'period' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->v2PublicGetFuturesKline (array_merge($request, $params)));
            } else {
                $response = Async\await($this->v2PublicGetSpotKline (array_merge($request, $params)));
            }
            //
            // Spot and Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "close" => "66999.95",
            //                 "created_at" => 1713934620000,
            //                 "high" => "66999.95",
            //                 "low" => "66988.53",
            //                 "market" => "BTCUSDT",
            //                 "open" => "66988.53",
            //                 "value" => "0.1572393",
            //                 "volume" => "10533.2501364336"
            //             ),
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function fetch_margin_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->v2PrivateGetAssetsMarginBalance ($params));
            //
            //     {
            //         "data" => array(
            //             array(
            //                 "margin_account" => "BTCUSDT",
            //                 "base_ccy" => "BTC",
            //                 "quote_ccy" => "USDT",
            //                 "available" => array(
            //                     "base_ccy" => "0.00000026",
            //                     "quote_ccy" => "0"
            //                 ),
            //                 "frozen" => array(
            //                     "base_ccy" => "0",
            //                     "quote_ccy" => "0"
            //                 ),
            //                 "repaid" => array(
            //                     "base_ccy" => "0",
            //                     "quote_ccy" => "0"
            //                 ),
            //                 "interest" => array(
            //                     "base_ccy" => "0",
            //                     "quote_ccy" => "0"
            //                 ),
            //                 "rik_rate" => "",
            //                 "liq_price" => ""
            //             ),
            //         ),
            //         "code" => 0,
            //         "message" => "OK"
            //     }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_list($response, 'data', array());
            for ($i = 0; $i < count($balances); $i++) {
                $entry = $balances[$i];
                $free = $this->safe_dict($entry, 'available', array());
                $used = $this->safe_dict($entry, 'frozen', array());
                $loan = $this->safe_dict($entry, 'repaid', array());
                $interest = $this->safe_dict($entry, 'interest', array());
                $baseAccount = $this->account();
                $baseCurrencyId = $this->safe_string($entry, 'base_ccy');
                $baseCurrencyCode = $this->safe_currency_code($baseCurrencyId);
                $baseAccount['free'] = $this->safe_string($free, 'base_ccy');
                $baseAccount['used'] = $this->safe_string($used, 'base_ccy');
                $baseDebt = $this->safe_string($loan, 'base_ccy');
                $baseInterest = $this->safe_string($interest, 'base_ccy');
                $baseAccount['debt'] = Precise::string_add($baseDebt, $baseInterest);
                $result[$baseCurrencyCode] = $baseAccount;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_spot_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->v2PrivateGetAssetsSpotBalance ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "available" => "0.00000046",
            //                 "ccy" => "USDT",
            //                 "frozen" => "0"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_list($response, 'data', array());
            for ($i = 0; $i < count($balances); $i++) {
                $entry = $balances[$i];
                $currencyId = $this->safe_string($entry, 'ccy');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($entry, 'available');
                $account['used'] = $this->safe_string($entry, 'frozen');
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_swap_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->v2PrivateGetAssetsFuturesBalance ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "available" => "0.00000046",
            //                 "ccy" => "USDT",
            //                 "frozen" => "0",
            //                 "margin" => "0",
            //                 "transferrable" => "0.00000046",
            //                 "unrealized_pnl" => "0"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_list($response, 'data', array());
            for ($i = 0; $i < count($balances); $i++) {
                $entry = $balances[$i];
                $currencyId = $this->safe_string($entry, 'ccy');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($entry, 'available');
                $account['used'] = $this->safe_string($entry, 'frozen');
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_financial_balance($params = array ()) {
        return Async\async(function () use ($params) {
            Async\await($this->load_markets());
            $response = Async\await($this->v2PrivateGetAssetsFinancialBalance ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "available" => "0.00000046",
            //                 "ccy" => "USDT",
            //                 "frozen" => "0"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $result = array( 'info' => $response );
            $balances = $this->safe_list($response, 'data', array());
            for ($i = 0; $i < count($balances); $i++) {
                $entry = $balances[$i];
                $currencyId = $this->safe_string($entry, 'ccy');
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string($entry, 'available');
                $account['used'] = $this->safe_string($entry, 'frozen');
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }) ();
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @see https://docs.coinex.com/api/v2/assets/balance/http/get-spot-balance         // spot
             * @see https://docs.coinex.com/api/v2/assets/balance/http/get-futures-balance      // swap
             * @see https://docs.coinex.com/api/v2/assets/balance/http/get-marigin-balance      // margin
             * @see https://docs.coinex.com/api/v2/assets/balance/http/get-financial-balance    // financial
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->type] 'margin', 'swap', 'financial', or 'spot'
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchBalance', null, $params);
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchBalance', $params);
            $marketType = ($marginMode !== null) ? 'margin' : $marketType;
            $params = $this->omit($params, 'margin');
            if ($marketType === 'margin') {
                return Async\await($this->fetch_margin_balance($params));
            } elseif ($marketType === 'swap') {
                return Async\await($this->fetch_swap_balance($params));
            } elseif ($marketType === 'financial') {
                return Async\await($this->fetch_financial_balance($params));
            } else {
                return Async\await($this->fetch_spot_balance($params));
            }
        }) ();
    }

    public function parse_order_status($status) {
        $statuses = array(
            'rejected' => 'rejected',
            'open' => 'open',
            'not_deal' => 'open',
            'part_deal' => 'open',
            'done' => 'closed',
            'cancel' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // Spot and Margin createOrder, createOrders, editOrder, cancelOrders, cancelOrder, fetchOpenOrders
        //
        //     {
        //         "amount" => "0.0001",
        //         "base_fee" => "0",
        //         "ccy" => "BTC",
        //         "client_id" => "x-167673045-a0a3c6461459a801",
        //         "created_at" => 1714114386250,
        //         "discount_fee" => "0",
        //         "filled_amount" => "0",
        //         "filled_value" => "0",
        //         "last_fill_amount" => "0",
        //         "last_fill_price" => "0",
        //         "maker_fee_rate" => "0.002",
        //         "market" => "BTCUSDT",
        //         "market_type" => "SPOT",
        //         "order_id" => 117178743547,
        //         "price" => "61000",
        //         "quote_fee" => "0",
        //         "side" => "buy",
        //         "taker_fee_rate" => "0.002",
        //         "type" => "limit",
        //         "unfilled_amount" => "0.0001",
        //         "updated_at" => 1714114386250
        //     }
        //
        // Spot and Margin fetchClosedOrders
        //
        //     {
        //         "order_id" => 117180532345,
        //         "market" => "BTCUSDT",
        //         "market_type" => "SPOT",
        //         "side" => "sell",
        //         "type" => "market",
        //         "ccy" => "BTC",
        //         "amount" => "0.00015484",
        //         "price" => "0",
        //         "client_id" => "",
        //         "created_at" => 1714116494219,
        //         "updated_at" => 0,
        //         "base_fee" => "0",
        //         "quote_fee" => "0.0199931699632",
        //         "discount_fee" => "0",
        //         "maker_fee_rate" => "0",
        //         "taker_fee_rate" => "0.002",
        //         "unfilled_amount" => "0",
        //         "filled_amount" => "0.00015484",
        //         "filled_value" => "9.9965849816"
        //     }
        //
        // Spot, Margin and Swap trigger createOrder, createOrders, editOrder
        //
        //     {
        //         "stop_id" => 117180138153
        //     }
        //
        // Swap createOrder, createOrders, editOrder, cancelOrders, cancelOrder, fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "amount" => "0.0001",
        //         "client_id" => "x-167673045-1471b81d747080a0",
        //         "created_at" => 1714116769986,
        //         "fee" => "0",
        //         "fee_ccy" => "USDT",
        //         "filled_amount" => "0",
        //         "filled_value" => "0",
        //         "last_filled_amount" => "0",
        //         "last_filled_price" => "0",
        //         "maker_fee_rate" => "0.0003",
        //         "market" => "BTCUSDT",
        //         "market_type" => "FUTURES",
        //         "order_id" => 136913377780,
        //         "price" => "61000.42",
        //         "realized_pnl" => "0",
        //         "side" => "buy",
        //         "taker_fee_rate" => "0.0005",
        //         "type" => "limit",
        //         "unfilled_amount" => "0.0001",
        //         "updated_at" => 1714116769986
        //     }
        //
        // Swap stopLossPrice and takeProfitPrice createOrder
        //
        //     {
        //         "adl_level" => 1,
        //         "ath_margin_size" => "2.14586666",
        //         "ath_position_amount" => "0.0001",
        //         "avg_entry_price" => "64376",
        //         "bkr_price" => "0",
        //         "close_avbl" => "0.0001",
        //         "cml_position_value" => "6.4376",
        //         "created_at" => 1714119054558,
        //         "leverage" => "3",
        //         "liq_price" => "0",
        //         "maintenance_margin_rate" => "0.005",
        //         "maintenance_margin_value" => "0.03218632",
        //         "margin_avbl" => "2.14586666",
        //         "margin_mode" => "cross",
        //         "market" => "BTCUSDT",
        //         "market_type" => "FUTURES",
        //         "max_position_value" => "6.4376",
        //         "open_interest" => "0.0001",
        //         "position_id" => 303884204,
        //         "position_margin_rate" => "3.10624785634397912265",
        //         "realized_pnl" => "-0.0032188",
        //         "settle_price" => "64376",
        //         "settle_value" => "6.4376",
        //         "side" => "long",
        //         "stop_loss_price" => "62000",
        //         "stop_loss_type" => "latest_price",
        //         "take_profit_price" => "0",
        //         "take_profit_type" => "",
        //         "unrealized_pnl" => "0",
        //         "updated_at" => 1714119054559
        //     }
        //
        // Swap fetchOrder
        //
        //     {
        //         "amount" => "0.0001",
        //         "client_id" => "x-167673045-da5f31dcd478a829",
        //         "created_at" => 1714460987164,
        //         "fee" => "0",
        //         "fee_ccy" => "USDT",
        //         "filled_amount" => "0",
        //         "filled_value" => "0",
        //         "last_filled_amount" => "0",
        //         "last_filled_price" => "0",
        //         "maker_fee_rate" => "0.0003",
        //         "market" => "BTCUSDT",
        //         "market_type" => "FUTURES",
        //         "order_id" => 137319868771,
        //         "price" => "61000",
        //         "realized_pnl" => "0",
        //         "side" => "buy",
        //         "status" => "open",
        //         "taker_fee_rate" => "0.0005",
        //         "type" => "limit",
        //         "unfilled_amount" => "0.0001",
        //         "updated_at" => 1714460987164
        //     }
        //
        // Spot and Margin fetchOrder
        //
        //     {
        //         "amount" => "0.0001",
        //         "base_fee" => "0",
        //         "ccy" => "BTC",
        //         "client_id" => "x-167673045-da918d6724e3af81",
        //         "created_at" => 1714461638958,
        //         "discount_fee" => "0",
        //         "filled_amount" => "0",
        //         "filled_value" => "0",
        //         "last_fill_amount" => "0",
        //         "last_fill_price" => "0",
        //         "maker_fee_rate" => "0.002",
        //         "market" => "BTCUSDT",
        //         "market_type" => "SPOT",
        //         "order_id" => 117492012985,
        //         "price" => "61000",
        //         "quote_fee" => "0",
        //         "side" => "buy",
        //         "status" => "open",
        //         "taker_fee_rate" => "0.002",
        //         "type" => "limit",
        //         "unfilled_amount" => "0.0001",
        //         "updated_at" => 1714461638958
        //     }
        //
        // Swap trigger fetchOpenOrders, fetchClosedOrders - Spot and Swap trigger cancelOrders, cancelOrder
        //
        //     {
        //         "amount" => "0.0001",
        //         "client_id" => "x-167673045-a7d7714c6478acf6",
        //         "created_at" => 1714187923820,
        //         "market" => "BTCUSDT",
        //         "market_type" => "FUTURES",
        //         "price" => "61000",
        //         "side" => "buy",
        //         "stop_id" => 136984426097,
        //         "trigger_direction" => "higher",
        //         "trigger_price" => "62000",
        //         "trigger_price_type" => "latest_price",
        //         "type" => "limit",
        //         "updated_at" => 1714187974363
        //     }
        //
        // Spot and Margin trigger fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "stop_id" => 117586439530,
        //         "market" => "BTCUSDT",
        //         "market_type" => "SPOT",
        //         "ccy" => "BTC",
        //         "side" => "buy",
        //         "type" => "limit",
        //         "amount" => "0.0001",
        //         "price" => "51000",
        //         "trigger_price" => "52000",
        //         "trigger_direction" => "higher",
        //         "trigger_price_type" => "mark_price",
        //         "client_id" => "x-167673045-df61777094c69312",
        //         "created_at" => 1714551237335,
        //         "updated_at" => 1714551237335
        //     }
        //
        $rawStatus = $this->safe_string($order, 'status');
        $timestamp = $this->safe_integer($order, 'created_at');
        $updatedTimestamp = $this->safe_integer($order, 'updated_at');
        if ($updatedTimestamp === 0) {
            $updatedTimestamp = $timestamp;
        }
        $marketId = $this->safe_string($order, 'market');
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $orderType = $this->safe_string_lower($order, 'market_type', $defaultType);
        if ($orderType === 'futures') {
            $orderType = 'swap';
        }
        $marketType = ($orderType === 'swap') ? 'swap' : 'spot';
        $market = $this->safe_market($marketId, $market, null, $marketType);
        $feeCurrencyId = $this->safe_string($order, 'fee_ccy');
        $feeCurrency = $this->safe_currency_code($feeCurrencyId);
        if ($feeCurrency === null) {
            $feeCurrency = $market['quote'];
        }
        $side = $this->safe_string($order, 'side');
        if ($side === 'long') {
            $side = 'buy';
        } elseif ($side === 'short') {
            $side = 'sell';
        }
        $clientOrderId = $this->safe_string($order, 'client_id');
        if ($clientOrderId === '') {
            $clientOrderId = null;
        }
        return $this->safe_order(array(
            'id' => $this->safe_string_n($order, array( 'position_id', 'order_id', 'stop_id' )),
            'clientOrderId' => $clientOrderId,
            'datetime' => $this->iso8601($timestamp),
            'timestamp' => $timestamp,
            'lastTradeTimestamp' => $updatedTimestamp,
            'status' => $this->parse_order_status($rawStatus),
            'symbol' => $market['symbol'],
            'type' => $this->safe_string($order, 'type'),
            'timeInForce' => null,
            'postOnly' => null,
            'reduceOnly' => null,
            'side' => $side,
            'price' => $this->safe_string($order, 'price'),
            'stopPrice' => $this->safe_string($order, 'trigger_price'),
            'triggerPrice' => $this->safe_string($order, 'trigger_price'),
            'takeProfitPrice' => $this->safe_number($order, 'take_profit_price'),
            'stopLossPrice' => $this->safe_number($order, 'stop_loss_price'),
            'cost' => $this->safe_string($order, 'filled_value'),
            'average' => $this->safe_string($order, 'avg_entry_price'),
            'amount' => $this->safe_string($order, 'amount'),
            'filled' => $this->safe_string($order, 'filled_amount'),
            'remaining' => $this->safe_string($order, 'unfilled_amount'),
            'trades' => null,
            'fee' => array(
                'currency' => $feeCurrency,
                'cost' => $this->safe_string_2($order, 'quote_fee', 'fee'),
            ),
            'info' => $order,
        ), $market);
    }

    public function create_market_buy_order_with_cost(string $symbol, float $cost, $params = array ()) {
        return Async\async(function () use ($symbol, $cost, $params) {
            /**
             * create a $market buy order by providing the $symbol and $cost
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade003_market_order
             * @see https://docs.coinex.com/api/v2/spot/order/http/put-order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {float} $cost how much you want to trade in units of the quote currency
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['spot']) {
                throw new NotSupported($this->id . ' createMarketBuyOrderWithCost() supports spot orders only');
            }
            $params['createMarketBuyOrderRequiresPrice'] = false;
            return Async\await($this->create_order($symbol, 'market', 'buy', $cost, null, $params));
        }) ();
    }

    public function create_order_request(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        $market = $this->market($symbol);
        $swap = $market['swap'];
        $clientOrderId = $this->safe_string_2($params, 'client_id', 'clientOrderId');
        $stopPrice = $this->safe_string_2($params, 'stopPrice', 'triggerPrice');
        $stopLossPrice = $this->safe_string($params, 'stopLossPrice');
        $takeProfitPrice = $this->safe_string($params, 'takeProfitPrice');
        $option = $this->safe_string($params, 'option');
        $isMarketOrder = $type === 'market';
        $postOnly = $this->is_post_only($isMarketOrder, $option === 'maker_only', $params);
        $timeInForceRaw = $this->safe_string_upper($params, 'timeInForce');
        $reduceOnly = $this->safe_bool($params, 'reduceOnly');
        if ($reduceOnly) {
            if (!$market['swap']) {
                throw new InvalidOrder($this->id . ' createOrder() does not support $reduceOnly for ' . $market['type'] . ' orders, $reduceOnly orders are supported for $swap markets only');
            }
        }
        $request = array(
            'market' => $market['id'],
        );
        if ($clientOrderId === null) {
            $defaultId = 'x-167673045';
            $brokerId = $this->safe_string($this->options, 'brokerId', $defaultId);
            $request['client_id'] = $brokerId . '-' . $this->uuid16();
        } else {
            $request['client_id'] = $clientOrderId;
        }
        if (($stopLossPrice === null) && ($takeProfitPrice === null)) {
            if (!$reduceOnly) {
                $request['side'] = $side;
            }
            $requestType = $type;
            if ($postOnly) {
                $requestType = 'maker_only';
            } elseif ($timeInForceRaw !== null) {
                if ($timeInForceRaw === 'IOC') {
                    $requestType = 'ioc';
                } elseif ($timeInForceRaw === 'FOK') {
                    $requestType = 'fok';
                }
            }
            if (!$isMarketOrder) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $request['type'] = $requestType;
        }
        if ($swap) {
            $request['market_type'] = 'FUTURES';
            if ($stopLossPrice || $takeProfitPrice) {
                if ($stopLossPrice) {
                    $request['stop_loss_price'] = $this->price_to_precision($symbol, $stopLossPrice);
                    $request['stop_loss_type'] = $this->safe_string($params, 'stop_type', 'latest_price');
                } elseif ($takeProfitPrice) {
                    $request['take_profit_price'] = $this->price_to_precision($symbol, $takeProfitPrice);
                    $request['take_profit_type'] = $this->safe_string($params, 'stop_type', 'latest_price');
                }
            } else {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
                if ($stopPrice !== null) {
                    $request['trigger_price'] = $this->price_to_precision($symbol, $stopPrice);
                    $request['trigger_price_type'] = $this->safe_string($params, 'stop_type', 'latest_price');
                }
            }
        } else {
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('createOrder', $params);
            if ($marginMode !== null) {
                $request['market_type'] = 'MARGIN';
            } else {
                $request['market_type'] = 'SPOT';
            }
            if (($type === 'market') && ($side === 'buy')) {
                $createMarketBuyOrderRequiresPrice = true;
                list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
                $cost = $this->safe_number($params, 'cost');
                $params = $this->omit($params, 'cost');
                if ($createMarketBuyOrderRequiresPrice) {
                    if (($price === null) && ($cost === null)) {
                        throw new InvalidOrder($this->id . ' createOrder() requires the $price argument for $market buy orders to calculate the total $cost to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice $option or param to false and pass the $cost to spend in the $amount argument');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $quoteAmount = $this->parse_to_numeric(Precise::string_mul($amountString, $priceString));
                        $costRequest = ($cost !== null) ? $cost : $quoteAmount;
                        $request['amount'] = $this->cost_to_precision($symbol, $costRequest);
                    }
                } else {
                    $request['amount'] = $this->cost_to_precision($symbol, $amount);
                }
            } else {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if ($stopPrice !== null) {
                $request['trigger_price'] = $this->price_to_precision($symbol, $stopPrice);
            }
        }
        $params = $this->omit($params, array( 'reduceOnly', 'timeInForce', 'postOnly', 'stopPrice', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice' ));
        return array_merge($request, $params);
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade order
             * @see https://docs.coinex.com/api/v2/spot/order/http/put-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/put-stop-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/put-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/put-stop-order
             * @see https://docs.coinex.com/api/v2/futures/position/http/close-position
             * @see https://docs.coinex.com/api/v2/futures/position/http/set-position-stop-loss
             * @see https://docs.coinex.com/api/v2/futures/position/http/set-position-take-profit
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much you want to trade in units of the base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {float} [$params->triggerPrice] $price to trigger stop orders
             * @param {float} [$params->stopLossPrice] $price to trigger stop loss orders
             * @param {float} [$params->takeProfitPrice] $price to trigger take profit orders
             * @param {string} [$params->timeInForce] 'GTC', 'IOC', 'FOK', 'PO'
             * @param {boolean} [$params->postOnly] set to true if you wish to make a post only order
             * @param {boolean} [$params->reduceOnly] *contract only* indicates if this order is to reduce the size of a position
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $reduceOnly = $this->safe_bool($params, 'reduceOnly');
            $triggerPrice = $this->safe_string_2($params, 'stopPrice', 'triggerPrice');
            $stopLossTriggerPrice = $this->safe_string($params, 'stopLossPrice');
            $takeProfitTriggerPrice = $this->safe_string($params, 'takeProfitPrice');
            $isTriggerOrder = $triggerPrice !== null;
            $isStopLossTriggerOrder = $stopLossTriggerPrice !== null;
            $isTakeProfitTriggerOrder = $takeProfitTriggerPrice !== null;
            $isStopLossOrTakeProfitTrigger = $isStopLossTriggerOrder || $isTakeProfitTriggerOrder;
            $request = $this->create_order_request($symbol, $type, $side, $amount, $price, $params);
            $response = null;
            if ($market['spot']) {
                if ($isTriggerOrder) {
                    $response = Async\await($this->v2PrivatePostSpotStopOrder ($request));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "stop_id" => 117180138153
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } else {
                    $response = Async\await($this->v2PrivatePostSpotOrder ($request));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "amount" => "0.0001",
                    //             "base_fee" => "0",
                    //             "ccy" => "BTC",
                    //             "client_id" => "x-167673045-a0a3c6461459a801",
                    //             "created_at" => 1714114386250,
                    //             "discount_fee" => "0",
                    //             "filled_amount" => "0",
                    //             "filled_value" => "0",
                    //             "last_fill_amount" => "0",
                    //             "last_fill_price" => "0",
                    //             "maker_fee_rate" => "0.002",
                    //             "market" => "BTCUSDT",
                    //             "market_type" => "SPOT",
                    //             "order_id" => 117178743547,
                    //             "price" => "61000",
                    //             "quote_fee" => "0",
                    //             "side" => "buy",
                    //             "taker_fee_rate" => "0.002",
                    //             "type" => "limit",
                    //             "unfilled_amount" => "0.0001",
                    //             "updated_at" => 1714114386250
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                }
            } else {
                if ($isTriggerOrder) {
                    $response = Async\await($this->v2PrivatePostFuturesStopOrder ($request));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "stop_id" => 136915460994
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } elseif ($isStopLossOrTakeProfitTrigger) {
                    if ($isStopLossTriggerOrder) {
                        $response = Async\await($this->v2PrivatePostFuturesSetPositionStopLoss ($request));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "adl_level" => 1,
                        //             "ath_margin_size" => "2.14586666",
                        //             "ath_position_amount" => "0.0001",
                        //             "avg_entry_price" => "64376",
                        //             "bkr_price" => "0",
                        //             "close_avbl" => "0.0001",
                        //             "cml_position_value" => "6.4376",
                        //             "created_at" => 1714119054558,
                        //             "leverage" => "3",
                        //             "liq_price" => "0",
                        //             "maintenance_margin_rate" => "0.005",
                        //             "maintenance_margin_value" => "0.03218632",
                        //             "margin_avbl" => "2.14586666",
                        //             "margin_mode" => "cross",
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "FUTURES",
                        //             "max_position_value" => "6.4376",
                        //             "open_interest" => "0.0001",
                        //             "position_id" => 303884204,
                        //             "position_margin_rate" => "3.10624785634397912265",
                        //             "realized_pnl" => "-0.0032188",
                        //             "settle_price" => "64376",
                        //             "settle_value" => "6.4376",
                        //             "side" => "long",
                        //             "stop_loss_price" => "62000",
                        //             "stop_loss_type" => "latest_price",
                        //             "take_profit_price" => "0",
                        //             "take_profit_type" => "",
                        //             "unrealized_pnl" => "0",
                        //             "updated_at" => 1714119054559
                        //         ),
                        //         "message" => "OK"
                        //     }
                        //
                    } elseif ($isTakeProfitTriggerOrder) {
                        $response = Async\await($this->v2PrivatePostFuturesSetPositionTakeProfit ($request));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "adl_level" => 1,
                        //             "ath_margin_size" => "2.14586666",
                        //             "ath_position_amount" => "0.0001",
                        //             "avg_entry_price" => "64376",
                        //             "bkr_price" => "0",
                        //             "close_avbl" => "0.0001",
                        //             "cml_position_value" => "6.4376",
                        //             "created_at" => 1714119054558,
                        //             "leverage" => "3",
                        //             "liq_price" => "0",
                        //             "maintenance_margin_rate" => "0.005",
                        //             "maintenance_margin_value" => "0.03218632",
                        //             "margin_avbl" => "2.14586666",
                        //             "margin_mode" => "cross",
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "FUTURES",
                        //             "max_position_value" => "6.4376",
                        //             "open_interest" => "0.0001",
                        //             "position_id" => 303884204,
                        //             "position_margin_rate" => "3.10624785634397912265",
                        //             "realized_pnl" => "-0.0032188",
                        //             "settle_price" => "64376",
                        //             "settle_value" => "6.4376",
                        //             "side" => "long",
                        //             "stop_loss_price" => "62000",
                        //             "stop_loss_type" => "latest_price",
                        //             "take_profit_price" => "70000",
                        //             "take_profit_type" => "latest_price",
                        //             "unrealized_pnl" => "0",
                        //             "updated_at" => 1714119054559
                        //         ),
                        //         "message" => "OK"
                        //     }
                        //
                    }
                } else {
                    if ($reduceOnly) {
                        $response = Async\await($this->v2PrivatePostFuturesClosePosition ($request));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "amount" => "0.0001",
                        //             "client_id" => "x-167673045-4f264600c432ac06",
                        //             "created_at" => 1714119323764,
                        //             "fee" => "0.003221",
                        //             "fee_ccy" => "USDT",
                        //             "filled_amount" => "0.0001",
                        //             "filled_value" => "6.442017",
                        //             "last_filled_amount" => "0.0001",
                        //             "last_filled_price" => "64420.17",
                        //             "maker_fee_rate" => "0",
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "FUTURES",
                        //             "order_id" => 136915813578,
                        //             "price" => "0",
                        //             "realized_pnl" => "0.004417",
                        //             "side" => "sell",
                        //             "taker_fee_rate" => "0.0005",
                        //             "type" => "market",
                        //             "unfilled_amount" => "0",
                        //             "updated_at" => 1714119323764
                        //         ),
                        //         "message" => "OK"
                        //     }
                        //
                    } else {
                        $response = Async\await($this->v2PrivatePostFuturesOrder ($request));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "amount" => "0.0001",
                        //             "client_id" => "x-167673045-1471b81d747080a0",
                        //             "created_at" => 1714116769986,
                        //             "fee" => "0",
                        //             "fee_ccy" => "USDT",
                        //             "filled_amount" => "0",
                        //             "filled_value" => "0",
                        //             "last_filled_amount" => "0",
                        //             "last_filled_price" => "0",
                        //             "maker_fee_rate" => "0.0003",
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "FUTURES",
                        //             "order_id" => 136913377780,
                        //             "price" => "61000.42",
                        //             "realized_pnl" => "0",
                        //             "side" => "buy",
                        //             "taker_fee_rate" => "0.0005",
                        //             "type" => "limit",
                        //             "unfilled_amount" => "0.0001",
                        //             "updated_at" => 1714116769986
                        //         ),
                        //         "message" => "OK"
                        //     }
                        //
                    }
                }
            }
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function create_orders(array $orders, $params = array ()): PromiseInterface {
        return Async\async(function () use ($orders, $params) {
            /**
             * create a list of trade $orders (all $orders should be of the same $symbol)
             * @see https://docs.coinex.com/api/v2/spot/order/http/put-multi-$order
             * @see https://docs.coinex.com/api/v2/spot/order/http/put-multi-stop-$order
             * @see https://docs.coinex.com/api/v2/futures/order/http/put-multi-$order
             * @see https://docs.coinex.com/api/v2/futures/order/http/put-multi-stop-$order
             * @param {Array} $orders list of $orders to create, each object should contain the parameters required by createOrder, namely $symbol, $type, $side, $amount, $price and $params
             * @param {array} [$params] extra parameters specific to the api endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=$order-structure $order structure~
             */
            Async\await($this->load_markets());
            $ordersRequests = array();
            $symbol = null;
            $reduceOnly = false;
            $isTriggerOrder = false;
            $isStopLossOrTakeProfitTrigger = false;
            for ($i = 0; $i < count($orders); $i++) {
                $rawOrder = $orders[$i];
                $marketId = $this->safe_string($rawOrder, 'symbol');
                if ($symbol === null) {
                    $symbol = $marketId;
                } else {
                    if ($symbol !== $marketId) {
                        throw new BadRequest($this->id . ' createOrders() requires all $orders to have the same symbol');
                    }
                }
                $type = $this->safe_string($rawOrder, 'type');
                $side = $this->safe_string($rawOrder, 'side');
                $amount = $this->safe_value($rawOrder, 'amount');
                $price = $this->safe_value($rawOrder, 'price');
                $orderParams = $this->safe_value($rawOrder, 'params', array());
                if ($type !== 'limit') {
                    throw new NotSupported($this->id . ' createOrders() does not support ' . $type . ' $orders, only limit $orders are accepted');
                }
                $reduceOnly = $this->safe_value($orderParams, 'reduceOnly');
                $triggerPrice = $this->safe_number_2($orderParams, 'stopPrice', 'triggerPrice');
                $stopLossTriggerPrice = $this->safe_number($orderParams, 'stopLossPrice');
                $takeProfitTriggerPrice = $this->safe_number($orderParams, 'takeProfitPrice');
                $isTriggerOrder = $triggerPrice !== null;
                $isStopLossTriggerOrder = $stopLossTriggerPrice !== null;
                $isTakeProfitTriggerOrder = $takeProfitTriggerPrice !== null;
                $isStopLossOrTakeProfitTrigger = $isStopLossTriggerOrder || $isTakeProfitTriggerOrder;
                $orderRequest = $this->create_order_request($marketId, $type, $side, $amount, $price, $orderParams);
                $ordersRequests[] = $orderRequest;
            }
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'orders' => $ordersRequests,
            );
            $response = null;
            if ($market['spot']) {
                if ($isTriggerOrder) {
                    $response = Async\await($this->v2PrivatePostSpotBatchStopOrder ($request));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "code" => 0,
                    //                 "data" => array(
                    //                     "stop_id" => 117186257510
                    //                 ),
                    //                 "message" => "OK"
                    //             ),
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } else {
                    $response = Async\await($this->v2PrivatePostSpotBatchOrder ($request));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "amount" => "0.0001",
                    //                 "base_fee" => "0",
                    //                 "ccy" => "BTC",
                    //                 "client_id" => "x-167673045-f3651372049dab0d",
                    //                 "created_at" => 1714121403450,
                    //                 "discount_fee" => "0",
                    //                 "filled_amount" => "0",
                    //                 "filled_value" => "0",
                    //                 "last_fill_amount" => "0",
                    //                 "last_fill_price" => "0",
                    //                 "maker_fee_rate" => "0.002",
                    //                 "market" => "BTCUSDT",
                    //                 "market_type" => "SPOT",
                    //                 "order_id" => 117185362233,
                    //                 "price" => "61000",
                    //                 "quote_fee" => "0",
                    //                 "side" => "buy",
                    //                 "taker_fee_rate" => "0.002",
                    //                 "type" => "limit",
                    //                 "unfilled_amount" => "0.0001",
                    //                 "updated_at" => 1714121403450
                    //             ),
                    //             {
                    //                 "code" => 3109,
                    //                 "data" => null,
                    //                 "message" => "balance not enough"
                    //             }
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                }
            } else {
                if ($isTriggerOrder) {
                    $response = Async\await($this->v2PrivatePostFuturesBatchStopOrder ($request));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "code" => 0,
                    //                 "data" => array(
                    //                     "stop_id" => 136919625994
                    //                 ),
                    //                 "message" => "OK"
                    //             ),
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } elseif ($isStopLossOrTakeProfitTrigger) {
                    throw new NotSupported($this->id . ' createOrders() does not support stopLossPrice or takeProfitPrice orders');
                } else {
                    if ($reduceOnly) {
                        throw new NotSupported($this->id . ' createOrders() does not support $reduceOnly orders');
                    } else {
                        $response = Async\await($this->v2PrivatePostFuturesBatchOrder ($request));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             array(
                        //                 "code" => 0,
                        //                 "data" => array(
                        //                     "amount" => "0.0001",
                        //                     "client_id" => "x-167673045-2cb7436f3462a654",
                        //                     "created_at" => 1714122832493,
                        //                     "fee" => "0",
                        //                     "fee_ccy" => "USDT",
                        //                     "filled_amount" => "0",
                        //                     "filled_value" => "0",
                        //                     "last_filled_amount" => "0",
                        //                     "last_filled_price" => "0",
                        //                     "maker_fee_rate" => "0.0003",
                        //                     "market" => "BTCUSDT",
                        //                     "market_type" => "FUTURES",
                        //                     "order_id" => 136918835063,
                        //                     "price" => "61000",
                        //                     "realized_pnl" => "0",
                        //                     "side" => "buy",
                        //                     "taker_fee_rate" => "0.0005",
                        //                     "type" => "limit",
                        //                     "unfilled_amount" => "0.0001",
                        //                     "updated_at" => 1714122832493
                        //                 ),
                        //                 "message" => "OK"
                        //             ),
                        //         ),
                        //         "message" => "OK"
                        //     }
                        //
                    }
                }
            }
            $data = $this->safe_list($response, 'data', array());
            $results = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $status = null;
                $code = $this->safe_integer($entry, 'code');
                if ($code !== null) {
                    if ($code !== 0) {
                        $status = 'rejected';
                    } else {
                        $status = 'open';
                    }
                }
                $innerData = $this->safe_dict($entry, 'data', array());
                $order = null;
                if ($market['spot'] && !$isTriggerOrder) {
                    $entry['status'] = $status;
                    $order = $this->parse_order($entry, $market);
                } else {
                    $innerData['status'] = $status;
                    $order = $this->parse_order($innerData, $market);
                }
                $results[] = $order;
            }
            return $results;
        }) ();
    }

    public function cancel_orders($ids, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($ids, $symbol, $params) {
            /**
             * cancel multiple orders
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-batch-$order
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-batch-$stop-$order
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-batch-$order
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-batch-$stop-$order
             * @param {string[]} $ids $order $ids
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {boolean} [$params->trigger] set to true for canceling $stop orders
             * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=$order-structure $order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $stop = $this->safe_bool_2($params, 'stop', 'trigger');
            $params = $this->omit($params, array( 'stop', 'trigger' ));
            $response = null;
            if ($stop) {
                $request['stop_ids'] = $ids;
            } else {
                $request['order_ids'] = $ids;
            }
            if ($market['spot']) {
                if ($stop) {
                    $response = Async\await($this->v2PrivatePostSpotCancelBatchStopOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "code" => 0,
                    //                 "data" => array(
                    //                     "amount" => "0.0001",
                    //                     "ccy" => "BTC",
                    //                     "client_id" => "x-167673045-8e33d6f4a4bcb022",
                    //                     "created_at" => 1714188827291,
                    //                     "market" => "BTCUSDT",
                    //                     "market_type" => "SPOT",
                    //                     "price" => "61000",
                    //                     "side" => "buy",
                    //                     "stop_id" => 117248845854,
                    //                     "trigger_direction" => "higher",
                    //                     "trigger_price" => "62000",
                    //                     "trigger_price_type" => "mark_price",
                    //                     "type" => "limit",
                    //                     "updated_at" => 1714188827291
                    //                 ),
                    //                 "message" => "OK"
                    //             ),
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } else {
                    $response = Async\await($this->v2PrivatePostSpotCancelBatchOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "code" => 0,
                    //                 "data" => array(
                    //                     "amount" => "0.0001",
                    //                     "base_fee" => "0",
                    //                     "ccy" => "BTC",
                    //                     "client_id" => "x-167673045-c1cc78e5b42d8c4e",
                    //                     "created_at" => 1714188449497,
                    //                     "discount_fee" => "0",
                    //                     "filled_amount" => "0",
                    //                     "filled_value" => "0",
                    //                     "last_fill_amount" => "0",
                    //                     "last_fill_price" => "0",
                    //                     "maker_fee_rate" => "0.002",
                    //                     "market" => "BTCUSDT",
                    //                     "market_type" => "SPOT",
                    //                     "order_id" => 117248494358,
                    //                     "price" => "60000",
                    //                     "quote_fee" => "0",
                    //                     "side" => "buy",
                    //                     "taker_fee_rate" => "0.002",
                    //                     "type" => "limit",
                    //                     "unfilled_amount" => "0.0001",
                    //                     "updated_at" => 1714188449497
                    //                 ),
                    //                 "message" => ""
                    //             ),
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                }
            } else {
                $request['market_type'] = 'FUTURES';
                if ($stop) {
                    $response = Async\await($this->v2PrivatePostFuturesCancelBatchStopOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "code" => 0,
                    //                 "data" => array(
                    //                     "amount" => "0.0001",
                    //                     "client_id" => "x-167673045-a7d7714c6478acf6",
                    //                     "created_at" => 1714187923820,
                    //                     "market" => "BTCUSDT",
                    //                     "market_type" => "FUTURES",
                    //                     "price" => "61000",
                    //                     "side" => "buy",
                    //                     "stop_id" => 136984426097,
                    //                     "trigger_direction" => "higher",
                    //                     "trigger_price" => "62000",
                    //                     "trigger_price_type" => "latest_price",
                    //                     "type" => "limit",
                    //                     "updated_at" => 1714187974363
                    //                 ),
                    //                 "message" => ""
                    //             ),
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } else {
                    $response = Async\await($this->v2PrivatePostFuturesCancelBatchOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             array(
                    //                 "code" => 0,
                    //                 "data" => array(
                    //                     "amount" => "0.0001",
                    //                     "client_id" => "x-167673045-9f80fde284339a72",
                    //                     "created_at" => 1714187491784,
                    //                     "fee" => "0",
                    //                     "fee_ccy" => "USDT",
                    //                     "filled_amount" => "0",
                    //                     "filled_value" => "0",
                    //                     "last_filled_amount" => "0",
                    //                     "last_filled_price" => "0",
                    //                     "maker_fee_rate" => "0.0003",
                    //                     "market" => "BTCUSDT",
                    //                     "market_type" => "FUTURES",
                    //                     "order_id" => 136983851788,
                    //                     "price" => "61000",
                    //                     "realized_pnl" => "0",
                    //                     "side" => "buy",
                    //                     "taker_fee_rate" => "0.0005",
                    //                     "type" => "limit",
                    //                     "unfilled_amount" => "0.0001",
                    //                     "updated_at" => 1714187567079
                    //                 ),
                    //                 "message" => ""
                    //             ),
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                }
            }
            $data = $this->safe_list($response, 'data', array());
            $results = array();
            for ($i = 0; $i < count($data); $i++) {
                $entry = $data[$i];
                $item = $this->safe_dict($entry, 'data', array());
                $order = $this->parse_order($item, $market);
                $results[] = $order;
            }
            return $results;
        }) ();
    }

    public function edit_order(string $id, string $symbol, string $type, string $side, ?float $amount = null, ?float $price = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $type, $side, $amount, $price, $params) {
            /**
             * edit a trade order
             * @see https://docs.coinex.com/api/v2/spot/order/http/edit-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/edit-stop-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/edit-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/edit-stop-order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of the currency you want to trade in units of the base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {float} [$params->triggerPrice] the $price to trigger stop orders
             * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' editOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            if ($amount !== null) {
                $request['amount'] = $this->amount_to_precision($symbol, $amount);
            }
            if ($price !== null) {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            $response = null;
            $triggerPrice = $this->safe_string_n($params, array( 'stopPrice', 'triggerPrice', 'trigger_price' ));
            $params = $this->omit($params, array( 'stopPrice', 'triggerPrice' ));
            $isTriggerOrder = $triggerPrice !== null;
            if ($isTriggerOrder) {
                $request['trigger_price'] = $this->price_to_precision($symbol, $triggerPrice);
                $request['stop_id'] = $this->parse_to_numeric($id);
            } else {
                $request['order_id'] = $this->parse_to_numeric($id);
            }
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('editOrder', $params);
            if ($market['spot']) {
                if ($marginMode !== null) {
                    $request['market_type'] = 'MARGIN';
                } else {
                    $request['market_type'] = 'SPOT';
                }
                if ($isTriggerOrder) {
                    $response = Async\await($this->v2PrivatePostSpotModifyStopOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "stop_id" => 117337235167
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } else {
                    $response = Async\await($this->v2PrivatePostSpotModifyOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "amount" => "0.0001",
                    //             "base_fee" => "0",
                    //             "ccy" => "BTC",
                    //             "client_id" => "x-167673045-87eb2bebf42882d8",
                    //             "created_at" => 1714290302047,
                    //             "discount_fee" => "0",
                    //             "filled_amount" => "0",
                    //             "filled_value" => "0",
                    //             "last_fill_amount" => "0",
                    //             "last_fill_price" => "0",
                    //             "maker_fee_rate" => "0.002",
                    //             "market" => "BTCUSDT",
                    //             "market_type" => "SPOT",
                    //             "order_id" => 117336922195,
                    //             "price" => "61000",
                    //             "quote_fee" => "0",
                    //             "side" => "buy",
                    //             "status" => "open",
                    //             "taker_fee_rate" => "0.002",
                    //             "type" => "limit",
                    //             "unfilled_amount" => "0.0001",
                    //             "updated_at" => 1714290191141
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                }
            } else {
                $request['market_type'] = 'FUTURES';
                if ($isTriggerOrder) {
                    $response = Async\await($this->v2PrivatePostFuturesModifyStopOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "stop_id" => 137091875605
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                } else {
                    $response = Async\await($this->v2PrivatePostFuturesModifyOrder (array_merge($request, $params)));
                    //
                    //     {
                    //         "code" => 0,
                    //         "data" => array(
                    //             "amount" => "0.0001",
                    //             "client_id" => "x-167673045-3f2d09191462b207",
                    //             "created_at" => 1714290927630,
                    //             "fee" => "0",
                    //             "fee_ccy" => "USDT",
                    //             "filled_amount" => "0",
                    //             "filled_value" => "0",
                    //             "last_filled_amount" => "0",
                    //             "last_filled_price" => "0",
                    //             "maker_fee_rate" => "0.0003",
                    //             "market" => "BTCUSDT",
                    //             "market_type" => "FUTURES",
                    //             "order_id" => 137091566717,
                    //             "price" => "61000",
                    //             "realized_pnl" => "0",
                    //             "side" => "buy",
                    //             "taker_fee_rate" => "0.0005",
                    //             "type" => "limit",
                    //             "unfilled_amount" => "0.0001",
                    //             "updated_at" => 1714290927630
                    //         ),
                    //         "message" => "OK"
                    //     }
                    //
                }
            }
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-stop-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-order-by-client-$id
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-stop-order-by-client-$id
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-stop-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-order-by-client-$id
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-stop-order-by-client-$id
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->clientOrderId] client order $id, defaults to $id if not passed
             * @param {boolean} [$params->trigger] set to true for canceling a trigger order
             * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $isTriggerOrder = $this->safe_bool_2($params, 'stop', 'trigger');
            $swap = $market['swap'];
            $request = array(
                'market' => $market['id'],
            );
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('cancelOrder', $params);
            if ($swap) {
                $request['market_type'] = 'FUTURES';
            } else {
                if ($marginMode !== null) {
                    $request['market_type'] = 'MARGIN';
                } else {
                    $request['market_type'] = 'SPOT';
                }
            }
            $clientOrderId = $this->safe_string_2($params, 'client_id', 'clientOrderId');
            $params = $this->omit($params, array( 'stop', 'trigger', 'clientOrderId' ));
            $response = null;
            if ($clientOrderId !== null) {
                $request['client_id'] = $clientOrderId;
                if ($isTriggerOrder) {
                    if ($swap) {
                        $response = Async\await($this->v2PrivatePostFuturesCancelStopOrderByClientId (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "code" => 0,
                        //                 "data" => array(
                        //                     "amount" => "0.0001",
                        //                     "client_id" => "client01",
                        //                     "created_at" => 1714368624473,
                        //                     "market" => "BTCUSDT",
                        //                     "market_type" => "FUTURES",
                        //                     "price" => "61000",
                        //                     "side" => "buy",
                        //                     "stop_id" => 137175823891,
                        //                     "trigger_direction" => "higher",
                        //                     "trigger_price" => "61500",
                        //                     "trigger_price_type" => "latest_price",
                        //                     "type" => "limit",
                        //                     "updated_at" => 1714368661444
                        //                 ),
                        //                 "message" => ""
                        //             }
                        //         ),
                        //         "message" => "OK"
                        //     }
                    } else {
                        $response = Async\await($this->v2PrivatePostSpotCancelStopOrderByClientId (array_merge($request, $params)));
                        //     {
                        //         "code" :0,
                        //         "data" => array(
                        //             {
                        //                 "code" => 0,
                        //                 "data" => array(
                        //                     "amount" => "0.0001",
                        //                     "ccy" => "BTC",
                        //                     "client_id" => "client01",
                        //                     "created_at" => 1714366950279,
                        //                     "market" => "BTCUSDT",
                        //                     "market_type" => "SPOT",
                        //                     "price" => "61000",
                        //                     "side" => "buy",
                        //                     "stop_id" => 117402512706,
                        //                     "trigger_direction" => "higher",
                        //                     "trigger_price" => "61500",
                        //                     "trigger_price_type" => "mark_price",
                        //                     "type" => "limit",
                        //                     "updated_at" => 1714366950279
                        //                 ),
                        //                 "message" => "OK"
                        //             }
                        //         ),
                        //         "message" => "OK"
                        //     }
                    }
                } else {
                    if ($swap) {
                        $response = Async\await($this->v2PrivatePostFuturesCancelOrderByClientId (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "code" => 0,
                        //                 "data" => array(
                        //                     "amount" => "0.0001",
                        //                     "client_id" => "x-167673045-bf60e24bb437a3df",
                        //                     "created_at" => 1714368416437,
                        //                     "fee" => "0",
                        //                     "fee_ccy" => "USDT",
                        //                     "filled_amount" => "0",
                        //                     "filled_value" => "0",
                        //                     "last_filled_amount" => "0",
                        //                     "last_filled_price" => "0",
                        //                     "maker_fee_rate" => "0.0003",
                        //                     "market" => "BTCUSDT",
                        //                     "market_type" => "FUTURES",
                        //                     "order_id" => 137175616437,
                        //                     "price" => "61000",
                        //                     "realized_pnl" => "0",
                        //                     "side" => "buy",
                        //                     "taker_fee_rate" => "0.0005",
                        //                     "type" => "limit",
                        //                     "unfilled_amount" => "0.0001",
                        //                     "updated_at" => 1714368507174
                        //                 ),
                        //                 "message" => ""
                        //             }
                        //         ),
                        //         "message" => "OK"
                        //     }
                    } else {
                        $response = Async\await($this->v2PrivatePostSpotCancelOrderByClientId (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "code" => 0,
                        //                 "data" => array(
                        //                     "amount" => "0.0001",
                        //                     "base_fee" => "0",
                        //                     "ccy" => "BTC",
                        //                     "client_id" => "x-167673045-d49eaca5f412afc8",
                        //                     "created_at" => 1714366502807,
                        //                     "discount_fee" => "0",
                        //                     "filled_amount" => "0",
                        //                     "filled_value" => "0",
                        //                     "last_fill_amount" => "0",
                        //                     "last_fill_price" => "0",
                        //                     "maker_fee_rate" => "0.002",
                        //                     "market" => "BTCUSDT",
                        //                     "market_type" => "SPOT",
                        //                     "order_id" => 117402157490,
                        //                     "price" => "61000",
                        //                     "quote_fee" => "0",
                        //                     "side" => "buy",
                        //                     "taker_fee_rate" => "0.002",
                        //                     "type" => "limit",
                        //                     "unfilled_amount" => "0.0001",
                        //                     "updated_at" => 1714366502807
                        //                 ),
                        //                 "message" => "OK"
                        //             }
                        //         ),
                        //         "message" => "OK"
                        //     }
                    }
                }
            } else {
                if ($isTriggerOrder) {
                    $request['stop_id'] = $this->parse_to_numeric($id);
                    if ($swap) {
                        $response = Async\await($this->v2PrivatePostFuturesCancelStopOrder (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "amount" => "0.0001",
                        //             "ccy" => "BTC",
                        //             "client_id" => "x-167673045-f21ecfd7542abf1f",
                        //             "created_at" => 1714366177334,
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "SPOT",
                        //             "price" => "61000",
                        //             "side" => "buy",
                        //             "stop_id" => 117401897954,
                        //             "trigger_direction" => "higher",
                        //             "trigger_price" => "61500",
                        //             "trigger_price_type" => "mark_price",
                        //             "type" => "limit",
                        //             "updated_at" => 1714366177334
                        //         ),
                        //         "message" => "OK"
                        //     }
                    } else {
                        $response = Async\await($this->v2PrivatePostSpotCancelStopOrder (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "amount" => "0.0001",
                        //             "ccy" => "BTC",
                        //             "client_id" => "x-167673045-f21ecfd7542abf1f",
                        //             "created_at" => 1714366177334,
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "SPOT",
                        //             "price" => "61000",
                        //             "side" => "buy",
                        //             "stop_id" => 117401897954,
                        //             "trigger_direction" => "higher",
                        //             "trigger_price" => "61500",
                        //             "trigger_price_type" => "mark_price",
                        //             "type" => "limit",
                        //             "updated_at" => 1714366177334
                        //         ),
                        //         "message" => "OK"
                        //     }
                    }
                } else {
                    $request['order_id'] = $this->parse_to_numeric($id);
                    if ($swap) {
                        $response = Async\await($this->v2PrivatePostFuturesCancelOrder (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "amount" => "0.0001",
                        //             "client_id" => "x-167673045-7f14381c74a98a85",
                        //             "created_at" => 1714367342024,
                        //             "fee" => "0",
                        //             "fee_ccy" => "USDT",
                        //             "filled_amount" => "0",
                        //             "filled_value" => "0",
                        //             "last_filled_amount" => "0",
                        //             "last_filled_price" => "0",
                        //             "maker_fee_rate" => "0.0003",
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "FUTURES",
                        //             "order_id" => 137174472136,
                        //             "price" => "61000",
                        //             "realized_pnl" => "0",
                        //             "side" => "buy",
                        //             "taker_fee_rate" => "0.0005",
                        //             "type" => "limit",
                        //             "unfilled_amount" => "0.0001",
                        //             "updated_at" => 1714367515978
                        //         ),
                        //         "message" => "OK"
                        //     }
                    } else {
                        $response = Async\await($this->v2PrivatePostSpotCancelOrder (array_merge($request, $params)));
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             "amount" => "0.0001",
                        //             "base_fee" => "0",
                        //             "ccy" => "BTC",
                        //             "client_id" => "x-167673045-86fbe37b54a2aea3",
                        //             "created_at" => 1714365277437,
                        //             "discount_fee" => "0",
                        //             "filled_amount" => "0",
                        //             "filled_value" => "0",
                        //             "last_fill_amount" => "0",
                        //             "last_fill_price" => "0",
                        //             "maker_fee_rate" => "0.002",
                        //             "market" => "BTCUSDT",
                        //             "market_type" => "SPOT",
                        //             "order_id" => 117401168172,
                        //             "price" => "61000",
                        //             "quote_fee" => "0",
                        //             "side" => "buy",
                        //             "taker_fee_rate" => "0.002",
                        //             "type" => "limit",
                        //             "unfilled_amount" => "0.0001",
                        //             "updated_at" => 1714365277437
                        //         ),
                        //         "message" => "OK"
                        //     }
                    }
                }
            }
            $data = null;
            if ($clientOrderId !== null) {
                $rows = $this->safe_list($response, 'data', array());
                $data = $this->safe_dict($rows[0], 'data', array());
            } else {
                $data = $this->safe_dict($response, 'data', array());
            }
            return $this->parse_order($data, $market);
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders in a $market
             * @see https://docs.coinex.com/api/v2/spot/order/http/cancel-all-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/cancel-all-order
             * @param {string} $symbol unified $market $symbol of the $market to cancel orders in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->marginMode] 'cross' or 'isolated' for canceling spot margin orders
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = null;
            if ($market['swap']) {
                $request['market_type'] = 'FUTURES';
                $response = Async\await($this->v2PrivatePostFuturesCancelAllOrder (array_merge($request, $params)));
                //
                // array("code":0,"data":array(),"message":"OK")
                //
            } else {
                $marginMode = null;
                list($marginMode, $params) = $this->handle_margin_mode_and_params('cancelAllOrders', $params);
                if ($marginMode !== null) {
                    $request['market_type'] = 'MARGIN';
                } else {
                    $request['market_type'] = 'SPOT';
                }
                $response = Async\await($this->v2PrivatePostSpotCancelAllOrder (array_merge($request, $params)));
                //
                // array("code":0,"data":array(),"message":"OK")
                //
            }
            return $response;
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an order made by the user
             * @see https://docs.coinex.com/api/v2/spot/order/http/get-order-status
             * @see https://docs.coinex.com/api/v2/futures/order/http/get-order-status
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'order_id' => $this->parse_to_numeric($id),
            );
            $response = null;
            if ($market['swap']) {
                $response = Async\await($this->v2PrivateGetFuturesOrderStatus (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "data" => array(
                //             "amount" => "0.0001",
                //             "client_id" => "x-167673045-da5f31dcd478a829",
                //             "created_at" => 1714460987164,
                //             "fee" => "0",
                //             "fee_ccy" => "USDT",
                //             "filled_amount" => "0",
                //             "filled_value" => "0",
                //             "last_filled_amount" => "0",
                //             "last_filled_price" => "0",
                //             "maker_fee_rate" => "0.0003",
                //             "market" => "BTCUSDT",
                //             "market_type" => "FUTURES",
                //             "order_id" => 137319868771,
                //             "price" => "61000",
                //             "realized_pnl" => "0",
                //             "side" => "buy",
                //             "status" => "open",
                //             "taker_fee_rate" => "0.0005",
                //             "type" => "limit",
                //             "unfilled_amount" => "0.0001",
                //             "updated_at" => 1714460987164
                //         ),
                //         "message" => "OK"
                //     }
                //
            } else {
                $response = Async\await($this->v2PrivateGetSpotOrderStatus (array_merge($request, $params)));
                //
                //     {
                //         "code" => 0,
                //         "data" => array(
                //             "amount" => "0.0001",
                //             "base_fee" => "0",
                //             "ccy" => "BTC",
                //             "client_id" => "x-167673045-da918d6724e3af81",
                //             "created_at" => 1714461638958,
                //             "discount_fee" => "0",
                //             "filled_amount" => "0",
                //             "filled_value" => "0",
                //             "last_fill_amount" => "0",
                //             "last_fill_price" => "0",
                //             "maker_fee_rate" => "0.002",
                //             "market" => "BTCUSDT",
                //             "market_type" => "SPOT",
                //             "order_id" => 117492012985,
                //             "price" => "61000",
                //             "quote_fee" => "0",
                //             "side" => "buy",
                //             "status" => "open",
                //             "taker_fee_rate" => "0.002",
                //             "type" => "limit",
                //             "unfilled_amount" => "0.0001",
                //             "updated_at" => 1714461638958
                //         ),
                //         "message" => "OK"
                //     }
                //
            }
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_order($data, $market);
        }) ();
    }

    public function fetch_orders_by_status($status, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($status, $symbol, $since, $limit, $params) {
            /**
             * fetch a list of orders
             * @see https://docs.coinex.com/api/v2/spot/order/http/list-finished-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/list-finished-$stop-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/list-finished-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/list-finished-$stop-order
             * @param {string} $symbol unified $market $symbol of the $market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {boolean} [$params->trigger] set to true for fetching trigger orders
             * @param {string} [$params->marginMode] 'cross' or 'isolated' for fetching spot margin orders
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $stop = $this->safe_bool_2($params, 'stop', 'trigger');
            $params = $this->omit($params, array( 'stop', 'trigger' ));
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchOrdersByStatus', $market, $params);
            $response = null;
            $isClosed = ($status === 'finished') || ($status === 'closed');
            $isOpen = ($status === 'pending') || ($status === 'open');
            if ($marketType === 'swap') {
                $request['market_type'] = 'FUTURES';
                if ($isClosed) {
                    if ($stop) {
                        $response = Async\await($this->v2PrivateGetFuturesFinishedStopOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             array(
                        //                 "stop_id" => 52431158859,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "FUTURES",
                        //                 "side" => "sell",
                        //                 "type" => "market",
                        //                 "amount" => "0.0005",
                        //                 "price" => "20599.64",
                        //                 "client_id" => "",
                        //                 "created_at" => 1667547909856,
                        //                 "updated_at" => 1667547909856,
                        //                 "trigger_price" => "20599.64",
                        //                 "trigger_price_type" => "latest_price",
                        //                 "trigger_direction" => ""
                        //             ),
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    } else {
                        $response = Async\await($this->v2PrivateGetFuturesFinishedOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             array(
                        //                 "order_id" => 136915813578,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "FUTURES",
                        //                 "side" => "sell",
                        //                 "type" => "market",
                        //                 "amount" => "0.0001",
                        //                 "price" => "0",
                        //                 "client_id" => "x-167673045-4f264600c432ac06",
                        //                 "created_at" => 1714119323764,
                        //                 "updated_at" => 1714119323764,
                        //                 "unfilled_amount" => "0",
                        //                 "filled_amount" => "0.0001",
                        //                 "filled_value" => "6.442017",
                        //                 "fee" => "0.003221",
                        //                 "fee_ccy" => "USDT",
                        //                 "maker_fee_rate" => "0",
                        //                 "taker_fee_rate" => "0.0005"
                        //             ),
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    }
                } elseif ($isOpen) {
                    if ($stop) {
                        $response = Async\await($this->v2PrivateGetFuturesPendingStopOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "stop_id" => 137481469849,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "FUTURES",
                        //                 "side" => "buy",
                        //                 "type" => "limit",
                        //                 "amount" => "0.0001",
                        //                 "price" => "51000",
                        //                 "client_id" => "x-167673045-2b932341949fa2a1",
                        //                 "created_at" => 1714552257876,
                        //                 "updated_at" => 1714552257876,
                        //                 "trigger_price" => "52000",
                        //                 "trigger_price_type" => "latest_price",
                        //                 "trigger_direction" => "higher"
                        //             }
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "total" => 1,
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    } else {
                        $response = Async\await($this->v2PrivateGetFuturesPendingOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "order_id" => 137480580906,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "FUTURES",
                        //                 "side" => "buy",
                        //                 "type" => "limit",
                        //                 "amount" => "0.0001",
                        //                 "price" => "51000",
                        //                 "client_id" => "",
                        //                 "created_at" => 1714551877569,
                        //                 "updated_at" => 1714551877569,
                        //                 "unfilled_amount" => "0.0001",
                        //                 "filled_amount" => "0",
                        //                 "filled_value" => "0",
                        //                 "fee" => "0",
                        //                 "fee_ccy" => "USDT",
                        //                 "maker_fee_rate" => "0.0003",
                        //                 "taker_fee_rate" => "0.0005",
                        //                 "last_filled_amount" => "0",
                        //                 "last_filled_price" => "0",
                        //                 "realized_pnl" => "0"
                        //             }
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "total" => 1,
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    }
                }
            } else {
                $marginMode = null;
                list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchOrdersByStatus', $params);
                if ($marginMode !== null) {
                    $request['market_type'] = 'MARGIN';
                } else {
                    $request['market_type'] = 'SPOT';
                }
                if ($isClosed) {
                    if ($stop) {
                        $response = Async\await($this->v2PrivateGetSpotFinishedStopOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "stop_id" => 117654881420,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "SPOT",
                        //                 "ccy" => "USDT",
                        //                 "side" => "buy",
                        //                 "type" => "market",
                        //                 "amount" => "5.83325524",
                        //                 "price" => "0",
                        //                 "trigger_price" => "57418",
                        //                 "trigger_direction" => "lower",
                        //                 "trigger_price_type" => "mark_price",
                        //                 "client_id" => "",
                        //                 "created_at" => 1714618050597,
                        //                 "updated_at" => 0
                        //             }
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    } else {
                        $response = Async\await($this->v2PrivateGetSpotFinishedOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             array(
                        //                 "order_id" => 117180532345,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "SPOT",
                        //                 "side" => "sell",
                        //                 "type" => "market",
                        //                 "ccy" => "BTC",
                        //                 "amount" => "0.00015484",
                        //                 "price" => "0",
                        //                 "client_id" => "",
                        //                 "created_at" => 1714116494219,
                        //                 "updated_at" => 0,
                        //                 "base_fee" => "0",
                        //                 "quote_fee" => "0.0199931699632",
                        //                 "discount_fee" => "0",
                        //                 "maker_fee_rate" => "0",
                        //                 "taker_fee_rate" => "0.002",
                        //                 "unfilled_amount" => "0",
                        //                 "filled_amount" => "0.00015484",
                        //                 "filled_value" => "9.9965849816"
                        //             ),
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    }
                } elseif ($status === 'pending') {
                    if ($stop) {
                        $response = Async\await($this->v2PrivateGetSpotPendingStopOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "stop_id" => 117586439530,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "SPOT",
                        //                 "ccy" => "BTC",
                        //                 "side" => "buy",
                        //                 "type" => "limit",
                        //                 "amount" => "0.0001",
                        //                 "price" => "51000",
                        //                 "trigger_price" => "52000",
                        //                 "trigger_direction" => "higher",
                        //                 "trigger_price_type" => "mark_price",
                        //                 "client_id" => "x-167673045-df61777094c69312",
                        //                 "created_at" => 1714551237335,
                        //                 "updated_at" => 1714551237335
                        //             }
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "total" => 1,
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    } else {
                        $response = Async\await($this->v2PrivateGetSpotPendingOrder (array_merge($request, $params)));
                        //
                        //     {
                        //         "code" => 0,
                        //         "data" => array(
                        //             {
                        //                 "order_id" => 117585921297,
                        //                 "market" => "BTCUSDT",
                        //                 "market_type" => "SPOT",
                        //                 "side" => "buy",
                        //                 "type" => "limit",
                        //                 "ccy" => "BTC",
                        //                 "amount" => "0.00011793",
                        //                 "price" => "52000",
                        //                 "client_id" => "",
                        //                 "created_at" => 1714550707486,
                        //                 "updated_at" => 1714550707486,
                        //                 "base_fee" => "0",
                        //                 "quote_fee" => "0",
                        //                 "discount_fee" => "0",
                        //                 "maker_fee_rate" => "0.002",
                        //                 "taker_fee_rate" => "0.002",
                        //                 "last_fill_amount" => "0",
                        //                 "last_fill_price" => "0",
                        //                 "unfilled_amount" => "0.00011793",
                        //                 "filled_amount" => "0",
                        //                 "filled_value" => "0"
                        //             }
                        //         ),
                        //         "message" => "OK",
                        //         "pagination" => {
                        //             "total" => 1,
                        //             "has_next" => false
                        //         }
                        //     }
                        //
                    }
                }
            }
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_orders($data, $market, $since, $limit);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @see https://docs.coinex.com/api/v2/spot/order/http/list-pending-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/list-pending-stop-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/list-pending-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/list-pending-stop-order
             * @param {string} $symbol unified market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open orders for
             * @param {int} [$limit] the maximum number of open order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {boolean} [$params->trigger] set to true for fetching trigger orders
             * @param {string} [$params->marginMode] 'cross' or 'isolated' for fetching spot margin orders
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_status('pending', $symbol, $since, $limit, $params));
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed orders made by the user
             * @see https://docs.coinex.com/api/v2/spot/order/http/list-finished-order
             * @see https://docs.coinex.com/api/v2/spot/order/http/list-finished-stop-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/list-finished-order
             * @see https://docs.coinex.com/api/v2/futures/order/http/list-finished-stop-order
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {boolean} [$params->trigger] set to true for fetching trigger orders
             * @param {string} [$params->marginMode] 'cross' or 'isolated' for fetching spot margin orders
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            return Async\await($this->fetch_orders_by_status('finished', $symbol, $since, $limit, $params));
        }) ();
    }

    public function create_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * create a $currency deposit address
             * @see https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/update-deposit-address
             * @param {string} $code unified $currency $code of the $currency for the deposit address
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->network] the blockchain $network to create a deposit address on
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $network = $this->safe_string_2($params, 'chain', 'network');
            if ($network === null) {
                throw new ArgumentsRequired($this->id . ' createDepositAddress() requires a $network parameter');
            }
            $params = $this->omit($params, 'network');
            $request = array(
                'ccy' => $currency['id'],
                'chain' => $this->network_code_to_id($network, $currency['code']),
            );
            $response = Async\await($this->v2PrivatePostAssetsRenewalDepositAddress (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "address" => "0x321bd6479355142334f45653ad5d8b76105a1234",
            //             "memo" => ""
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            return $this->parse_deposit_address($data, $currency);
        }) ();
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * fetch the deposit address for a $currency associated with this account
             * @see https://docs.coinex.com/api/v2/assets/deposit-withdrawal/http/get-deposit-address
             * @param {string} $code unified $currency $code
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->network] the blockchain $network to create a deposit address on
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $networks = $this->safe_dict($currency, 'networks', array());
            $network = $this->safe_string_2($params, 'network', 'chain');
            $params = $this->omit($params, 'network');
            $networksKeys = is_array($networks) ? array_keys($networks) : array();
            $numOfNetworks = count($networksKeys);
            if ($networks !== null && $numOfNetworks > 1) {
                if ($network === null) {
                    throw new ArgumentsRequired($this->id . ' fetchDepositAddress() ' . $code . ' requires a $network parameter');
                }
                if (!(is_array($networks) && array_key_exists($network, $networks))) {
                    throw new ExchangeError($this->id . ' fetchDepositAddress() ' . $network . ' $network not supported for ' . $code);
                }
            }
            $request = array(
                'ccy' => $currency['id'],
                'chain' => $network,
            );
            $response = Async\await($this->v2PrivateGetAssetsDepositAddress (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "address" => "0x321bd6479355142334f45653ad5d8b76105a1234",
            //             "memo" => ""
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_dict($response, 'data', array());
            $depositAddress = $this->parse_deposit_address($data, $currency);
            $options = $this->safe_dict($this->options, 'fetchDepositAddress', array());
            $fillResponseFromRequest = $this->safe_bool($options, 'fillResponseFromRequest', true);
            if ($fillResponseFromRequest) {
                $depositAddress['network'] = $this->safe_network_code($network, $currency);
            }
            return $depositAddress;
        }) ();
    }

    public function safe_network($networkId, ?array $currency = null) {
        $networks = $this->safe_value($currency, 'networks', array());
        $networksCodes = is_array($networks) ? array_keys($networks) : array();
        $networksCodesLength = count($networksCodes);
        if ($networkId === null && $networksCodesLength === 1) {
            return $networks[$networksCodes[0]];
        }
        return array(
            'id' => $networkId,
            'network' => ($networkId === null) ? null : strtoupper($networkId),
        );
    }

    public function safe_network_code($networkId, ?array $currency = null) {
        $network = $this->safe_network($networkId, $currency);
        return $network['network'];
    }

    public function parse_deposit_address($depositAddress, ?array $currency = null) {
        //
        //     {
        //         "address" => "1P1JqozxioQwaqPwgMAQdNDYNyaVSqgARq",
        //         "memo" => ""
        //     }
        //
        $coinAddress = $this->safe_string($depositAddress, 'address');
        $parts = explode(':', $coinAddress);
        $address = null;
        $tag = null;
        $partsLength = count($parts);
        if ($partsLength > 1 && $parts[0] !== 'cfx') {
            $address = $parts[0];
            $tag = $parts[1];
        } else {
            $address = $coinAddress;
        }
        return array(
            'info' => $depositAddress,
            'currency' => $this->safe_currency_code(null, $currency),
            'address' => $address,
            'tag' => $tag,
            'network' => null,
        );
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all $trades made by the user
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http013_user_deals
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot003_trade014_user_deals
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch $trades for
             * @param {int} [$limit] the maximum number of $trades structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
             */
            Async\await($this->load_markets());
            $market = null;
            if ($limit === null) {
                $limit = 100;
            }
            $request = array(
                'limit' => $limit, // SPOT and SWAP
                'offset' => 0, // SWAP, means query from a certain record
                // 'page' => 1, // SPOT
                // 'side' => 2, // SWAP, 0 for no $limit, 1 for sell, 2 for buy
                // 'start_time' => $since, // SWAP
                // 'end_time' => 1524228297, // SWAP
            );
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            $type = null;
            list($type, $params) = $this->handle_market_type_and_params('fetchMyTrades', $market, $params);
            if ($type !== 'spot' && $symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument for non-spot markets');
            }
            $swap = ($type === 'swap');
            $accountId = $this->safe_integer($params, 'account_id');
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchMyTrades', $params);
            if ($marginMode !== null) {
                if ($accountId === null) {
                    throw new BadRequest($this->id . ' fetchMyTrades() requires an account_id parameter for margin trades');
                }
                $request['account_id'] = $accountId;
                $params = $this->omit($params, 'account_id');
            }
            $response = null;
            if ($swap) {
                if ($since !== null) {
                    $request['start_time'] = $since;
                }
                $request['side'] = 0;
                $response = Async\await($this->v1PerpetualPrivateGetMarketUserDeals (array_merge($request, $params)));
            } else {
                $request['page'] = 1;
                $response = Async\await($this->v1PrivateGetOrderUserDeals (array_merge($request, $params)));
            }
            //
            // Spot and Margin
            //
            //      {
            //          "code" => 0,
            //          "data" => array(
            //              "data" => array(
            //                  array(
            //                      "id" => 2611520950,
            //                      "order_id" => 63286573298,
            //                      "account_id" => 0,
            //                      "create_time" => 1638990636,
            //                      "type" => "sell",
            //                      "role" => "taker",
            //                      "price" => "192.29",
            //                      "amount" => "0.098",
            //                      "fee" => "0.03768884",
            //                      "fee_asset" => "USDT",
            //                      "market" => "AAVEUSDT",
            //                      "deal_money" => "18.84442"
            //                          ),
            //                      ),
            //              "curr_page" => 1,
            //              "has_next" => false,
            //              "count" => 3
            //              ),
            //          "message" => "Success"
            //      }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "limit" => 100,
            //             "offset" => 0,
            //             "records" => array(
            //                 array(
            //                     "amount" => "0.0012",
            //                     "deal_fee" => "0.0237528",
            //                     "deal_insurance" => "0",
            //                     "deal_margin" => "15.8352",
            //                     "deal_order_id" => 17797031903,
            //                     "deal_profit" => "0",
            //                     "deal_stock" => "47.5056",
            //                     "deal_type" => 1,
            //                     "deal_user_id" => 2969195,
            //                     "fee_asset" => "",
            //                     "fee_discount" => "0",
            //                     "fee_price" => "0",
            //                     "fee_rate" => "0.0005",
            //                     "fee_real_rate" => "0.0005",
            //                     "id" => 379044296,
            //                     "leverage" => "3",
            //                     "margin_amount" => "15.8352",
            //                     "market" => "BTCUSDT",
            //                     "open_price" => "39588",
            //                     "order_id" => 17797092987,
            //                     "position_amount" => "0.0012",
            //                     "position_id" => 62052321,
            //                     "position_type" => 1,
            //                     "price" => "39588",
            //                     "role" => 2,
            //                     "side" => 2,
            //                     "time" => 1650675936.016103,
            //                     "user_id" => 3620173
            //                 }
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            $tradeRequest = $swap ? 'records' : 'data';
            $data = $this->safe_value($response, 'data');
            $trades = $this->safe_list($data, $tradeRequest, array());
            return $this->parse_trades($trades, $market, $since, $limit);
        }) ();
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch all open positions
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033_pending_position
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033-0_finished_position
             * @param {string[]} [$symbols] list of unified $market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->method] the method to use 'perpetualPrivateGetPositionPending' or 'perpetualPrivateGetPositionFinished' default is 'perpetualPrivateGetPositionPending'
             * @param {int} [$params->side] *history endpoint only* 0 => All, 1 => Sell, 2 => Buy, default is 0
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=$position-structure $position structure~
             */
            Async\await($this->load_markets());
            $defaultMethod = null;
            list($defaultMethod, $params) = $this->handle_option_and_params($params, 'fetchPositions', 'method', 'v1PerpetualPrivateGetPositionPending');
            $isHistory = ($defaultMethod === 'v1PerpetualPrivateGetPositionFinished');
            $symbols = $this->market_symbols($symbols);
            $request = array();
            $market = null;
            if ($symbols !== null) {
                $symbol = null;
                if (gettype($symbols) === 'array' && array_keys($symbols) === array_keys(array_keys($symbols))) {
                    $symbolsLength = count($symbols);
                    if ($symbolsLength > 1) {
                        throw new BadRequest($this->id . ' fetchPositions() $symbols argument cannot contain more than 1 symbol');
                    }
                    $symbol = $symbols[0];
                } else {
                    $symbol = $symbols;
                }
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            } else {
                if ($isHistory) {
                    throw new ArgumentsRequired($this->id . ' fetchPositions() requires a $symbol argument for closed positions');
                }
            }
            if ($isHistory) {
                $request['limit'] = 100;
                $request['side'] = $this->safe_integer($params, 'side', 0); // 0 => All, 1 => Sell, 2 => Buy
            }
            $response = null;
            if ($defaultMethod === 'v1PerpetualPrivateGetPositionPending') {
                $response = Async\await($this->v1PerpetualPrivateGetPositionPending (array_merge($request, $params)));
            } else {
                $response = Async\await($this->v1PerpetualPrivateGetPositionFinished (array_merge($request, $params)));
            }
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             array(
            //                 "adl_sort" => 3396,
            //                 "adl_sort_val" => "0.00007786",
            //                 "amount" => "0.0005",
            //                 "amount_max" => "0.0005",
            //                 "amount_max_margin" => "6.42101333333333333333",
            //                 "bkr_price" => "25684.05333333333333346175",
            //                 "bkr_price_imply" => "0.00000000000000000000",
            //                 "close_left" => "0.0005",
            //                 "create_time" => 1651294226.110899,
            //                 "deal_all" => "19.26000000000000000000",
            //                 "deal_asset_fee" => "0.00000000000000000000",
            //                 "fee_asset" => "",
            //                 "finish_type" => 1,
            //                 "first_price" => "38526.08",
            //                 "insurance" => "0.00000000000000000000",
            //                 "latest_price" => "38526.08",
            //                 "leverage" => "3",
            //                 "liq_amount" => "0.00000000000000000000",
            //                 "liq_order_price" => "0",
            //                 "liq_order_time" => 0,
            //                 "liq_price" => "25876.68373333333333346175",
            //                 "liq_price_imply" => "0.00000000000000000000",
            //                 "liq_profit" => "0.00000000000000000000",
            //                 "liq_time" => 0,
            //                 "mainten_margin" => "0.005",
            //                 "mainten_margin_amount" => "0.09631520000000000000",
            //                 "maker_fee" => "0.00000000000000000000",
            //                 "margin_amount" => "6.42101333333333333333",
            //                 "market" => "BTCUSDT",
            //                 "open_margin" => "0.33333333333333333333",
            //                 "open_margin_imply" => "0.00000000000000000000",
            //                 "open_price" => "38526.08000000000000000000",
            //                 "open_val" => "19.26304000000000000000",
            //                 "open_val_max" => "19.26304000000000000000",
            //                 "position_id" => 65847227,
            //                 "profit_clearing" => "-0.00963152000000000000",
            //                 "profit_real" => "-0.00963152000000000000",
            //                 "profit_unreal" => "0.00",
            //                 "side" => 2,
            //                 "stop_loss_price" => "0.00000000000000000000",
            //                 "stop_loss_type" => 0,
            //                 "sy s" => 0,
            //                 "take_profit_price" => "0.00000000000000000000",
            //                 "take_profit_type" => 0,
            //                 "taker_fee" => "0.00000000000000000000",
            //                 "total" => 4661,
            //                 "type" => 1,
            //                 "update_time" => 1651294226.111196,
            //                 "user_id" => 3620173
            //             ),
            //         ),
            //         "message" => "OK"
            //     }
            //
            $position = $this->safe_value($response, 'data', array());
            $result = array();
            for ($i = 0; $i < count($position); $i++) {
                $result[] = $this->parse_position($position[$i], $market);
            }
            return $this->filter_by_array_positions($result, 'symbol', $symbols, false);
        }) ();
    }

    public function fetch_position(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch $data on a single open contract trade position
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033_pending_position
             * @param {string} $symbol unified $market $symbol of the $market the position is held in, default is null
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->v1PerpetualPrivateGetPositionPending (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "adl_sort" => 3396,
            //                 "adl_sort_val" => "0.00007786",
            //                 "amount" => "0.0005",
            //                 "amount_max" => "0.0005",
            //                 "amount_max_margin" => "6.42101333333333333333",
            //                 "bkr_price" => "25684.05333333333333346175",
            //                 "bkr_price_imply" => "0.00000000000000000000",
            //                 "close_left" => "0.0005",
            //                 "create_time" => 1651294226.110899,
            //                 "deal_all" => "19.26000000000000000000",
            //                 "deal_asset_fee" => "0.00000000000000000000",
            //                 "fee_asset" => "",
            //                 "finish_type" => 1,
            //                 "first_price" => "38526.08",
            //                 "insurance" => "0.00000000000000000000",
            //                 "latest_price" => "38526.08",
            //                 "leverage" => "3",
            //                 "liq_amount" => "0.00000000000000000000",
            //                 "liq_order_price" => "0",
            //                 "liq_order_time" => 0,
            //                 "liq_price" => "25876.68373333333333346175",
            //                 "liq_price_imply" => "0.00000000000000000000",
            //                 "liq_profit" => "0.00000000000000000000",
            //                 "liq_time" => 0,
            //                 "mainten_margin" => "0.005",
            //                 "mainten_margin_amount" => "0.09631520000000000000",
            //                 "maker_fee" => "0.00000000000000000000",
            //                 "margin_amount" => "6.42101333333333333333",
            //                 "market" => "BTCUSDT",
            //                 "open_margin" => "0.33333333333333333333",
            //                 "open_margin_imply" => "0.00000000000000000000",
            //                 "open_price" => "38526.08000000000000000000",
            //                 "open_val" => "19.26304000000000000000",
            //                 "open_val_max" => "19.26304000000000000000",
            //                 "position_id" => 65847227,
            //                 "profit_clearing" => "-0.00963152000000000000",
            //                 "profit_real" => "-0.00963152000000000000",
            //                 "profit_unreal" => "0.00",
            //                 "side" => 2,
            //                 "stop_loss_price" => "0.00000000000000000000",
            //                 "stop_loss_type" => 0,
            //                 "s ys" => 0,
            //                 "take_profit_price" => "0.00000000000000000000",
            //                 "take_profit_type" => 0,
            //                 "taker_fee" => "0.00000000000000000000",
            //                 "total" => 4661,
            //                 "type" => 1,
            //                 "update_time" => 1651294226.111196,
            //                 "user_id" => 3620173
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_list($response, 'data', array());
            return $this->parse_position($data[0], $market);
        }) ();
    }

    public function parse_position($position, ?array $market = null) {
        //
        // fetchPosition
        //
        //     {
        //         "adl_sort" => 3396,
        //         "adl_sort_val" => "0.00007786",
        //         "amount" => "0.0005",
        //         "amount_max" => "0.0005",
        //         "amount_max_margin" => "6.42101333333333333333",
        //         "bkr_price" => "25684.05333333333333346175",
        //         "bkr_price_imply" => "0.00000000000000000000",
        //         "close_left" => "0.0005",
        //         "create_time" => 1651294226.110899,
        //         "deal_all" => "19.26000000000000000000",
        //         "deal_asset_fee" => "0.00000000000000000000",
        //         "fee_asset" => "",
        //         "finish_type" => 1,
        //         "first_price" => "38526.08",
        //         "insurance" => "0.00000000000000000000",
        //         "latest_price" => "38526.08",
        //         "leverage" => "3",
        //         "liq_amount" => "0.00000000000000000000",
        //         "liq_order_price" => "0",
        //         "liq_order_time" => 0,
        //         "liq_price" => "25876.68373333333333346175",
        //         "liq_price_imply" => "0.00000000000000000000",
        //         "liq_profit" => "0.00000000000000000000",
        //         "liq_time" => 0,
        //         "mainten_margin" => "0.005",
        //         "mainten_margin_amount" => "0.09631520000000000000",
        //         "maker_fee" => "0.00000000000000000000",
        //         "margin_amount" => "6.42101333333333333333",
        //         "market" => "BTCUSDT",
        //         "open_margin" => "0.33333333333333333333",
        //         "open_margin_imply" => "0.00000000000000000000",
        //         "open_price" => "38526.08000000000000000000",
        //         "open_val" => "19.26304000000000000000",
        //         "open_val_max" => "19.26304000000000000000",
        //         "position_id" => 65847227,
        //         "profit_clearing" => "-0.00963152000000000000",
        //         "profit_real" => "-0.00963152000000000000",
        //         "profit_unreal" => "0.00",
        //         "side" => 2,
        //         "stop_loss_price" => "0.00000000000000000000",
        //         "stop_loss_type" => 0,
        //         "s ys" => 0,
        //         "take_profit_price" => "0.00000000000000000000",
        //         "take_profit_type" => 0,
        //         "taker_fee" => "0.00000000000000000000",
        //         "total" => 4661,
        //         "type" => 1,
        //         "update_time" => 1651294226.111196,
        //         "user_id" => 3620173
        //     }
        //
        //
        // fetchPositionHistory
        //
        //    {
        //        amount_max => '10',
        //        amount_max_margin => '2.03466666666666666666',
        //        bkr_price => '0',
        //        create_time => '1711150526.2581',
        //        deal_all => '12.591',
        //        deal_asset_fee => '0',
        //        fee_asset => '',
        //        finish_type => '5',
        //        first_price => '0.6104',
        //        latest_price => '0.6487',
        //        $leverage => '3',
        //        liq_amount => '0',
        //        liq_price => '0',
        //        liq_profit => '0',
        //        mainten_margin => '0.01',
        //        $market => 'XRPUSDT',
        //        market_type => '1',
        //        open_price => '0.6104',
        //        open_val_max => '6.104',
        //        position_id => '297371462',
        //        profit_real => '0.35702107169',
        //        settle_price => '0.6104',
        //        settle_val => '0',
        //        $side => '2',
        //        s ys => "0",
        //        type => '2',
        //        update_time => '1711391446.133233',
        //        user_id => '3685860'
        //    }
        //
        $marketId = $this->safe_string($position, 'market');
        $market = $this->safe_market($marketId, $market, null, 'swap');
        $symbol = $market['symbol'];
        $positionId = $this->safe_integer($position, 'position_id');
        $marginModeInteger = $this->safe_integer($position, 'type');
        $marginMode = ($marginModeInteger === 1) ? 'isolated' : 'cross';
        $liquidationPrice = $this->safe_string($position, 'liq_price');
        $entryPrice = $this->safe_string($position, 'open_price');
        $unrealizedPnl = $this->safe_string($position, 'profit_unreal');
        $contracts = $this->safe_number($position, 'amount');
        $sideInteger = $this->safe_integer($position, 'side');
        $side = ($sideInteger === 1) ? 'short' : 'long';
        $timestamp = $this->safe_timestamp($position, 'update_time');
        $maintenanceMargin = $this->safe_string($position, 'mainten_margin_amount');
        $maintenanceMarginPercentage = $this->safe_string($position, 'mainten_margin');
        $collateral = $this->safe_string_2($position, 'margin_amount', 'amount_max_margin');
        $leverage = $this->safe_string($position, 'leverage');
        $notional = $this->safe_string($position, 'open_val');
        $initialMargin = Precise::string_div($notional, $leverage);
        $initialMarginPercentage = Precise::string_div('1', $leverage);
        return $this->safe_position(array(
            'info' => $position,
            'id' => $positionId,
            'symbol' => $symbol,
            'notional' => $this->parse_number($notional),
            'marginMode' => $marginMode,
            'liquidationPrice' => $liquidationPrice,
            'entryPrice' => $this->parse_number($entryPrice),
            'unrealizedPnl' => $this->parse_number($unrealizedPnl),
            'percentage' => null,
            'contracts' => $contracts,
            'contractSize' => $this->safe_number($market, 'contractSize'),
            'markPrice' => null,
            'lastPrice' => null,
            'side' => $side,
            'hedged' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastUpdateTimestamp' => null,
            'maintenanceMargin' => $this->parse_number($maintenanceMargin),
            'maintenanceMarginPercentage' => $this->parse_number($maintenanceMarginPercentage),
            'collateral' => $this->parse_number($collateral),
            'initialMargin' => $this->parse_number($initialMargin),
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentage),
            'leverage' => $this->parse_number($leverage),
            'marginRatio' => null,
            'stopLossPrice' => $this->omit_zero($this->safe_string($position, 'stop_loss_price')),
            'takeProfitPrice' => $this->omit_zero($this->safe_string($position, 'take_profit_price')),
        ));
    }

    public function set_margin_mode(string $marginMode, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($marginMode, $symbol, $params) {
            /**
             * set margin mode to 'cross' or 'isolated'
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http014_adjust_leverage
             * @param {string} $marginMode 'cross' or 'isolated'
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
            }
            $marginMode = strtolower($marginMode);
            if ($marginMode !== 'isolated' && $marginMode !== 'cross') {
                throw new BadRequest($this->id . ' setMarginMode() $marginMode argument should be isolated or cross');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($market['type'] !== 'swap') {
                throw new BadSymbol($this->id . ' setMarginMode() supports swap contracts only');
            }
            $defaultPositionType = null;
            if ($marginMode === 'isolated') {
                $defaultPositionType = 1;
            } elseif ($marginMode === 'cross') {
                $defaultPositionType = 2;
            }
            $leverage = $this->safe_integer($params, 'leverage');
            $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 100);
            $positionType = $this->safe_integer($params, 'position_type', $defaultPositionType);
            if ($leverage === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $leverage parameter');
            }
            if ($positionType === null) {
                throw new ArgumentsRequired($this->id . ' setMarginMode() requires a position_type parameter that will transfer margin to the specified trading pair');
            }
            if (($leverage < 3) || ($leverage > $maxLeverage)) {
                throw new BadRequest($this->id . ' setMarginMode() $leverage should be between 3 and ' . (string) $maxLeverage . ' for ' . $symbol);
            }
            $request = array(
                'market' => $market['id'],
                'leverage' => (string) $leverage,
                'position_type' => $positionType, // 1 => isolated, 2 => cross
            );
            return Async\await($this->v1PerpetualPrivatePostMarketAdjustLeverage (array_merge($request, $params)));
        }) ();
    }

    public function set_leverage(?int $leverage, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($leverage, $symbol, $params) {
            /**
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http014_adjust_leverage
             * set the level of $leverage for a $market
             * @param {float} $leverage the rate of $leverage
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->marginMode] 'cross' or 'isolated' (default is 'cross')
             * @return {array} response from the exchange
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadSymbol($this->id . ' setLeverage() supports swap contracts only');
            }
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('setLeverage', $params, 'cross');
            $positionType = null;
            if ($marginMode === 'isolated') {
                $positionType = 1;
            } elseif ($marginMode === 'cross') {
                $positionType = 2;
            }
            $minLeverage = $this->safe_integer($market['limits']['leverage'], 'min', 1);
            $maxLeverage = $this->safe_integer($market['limits']['leverage'], 'max', 100);
            if (($leverage < $minLeverage) || ($leverage > $maxLeverage)) {
                throw new BadRequest($this->id . ' setLeverage() $leverage should be between ' . (string) $minLeverage . ' and ' . (string) $maxLeverage . ' for ' . $symbol);
            }
            $request = array(
                'market' => $market['id'],
                'leverage' => (string) $leverage,
                'position_type' => $positionType, // 1 => isolated, 2 => cross
            );
            return Async\await($this->v1PerpetualPrivatePostMarketAdjustLeverage (array_merge($request, $params)));
        }) ();
    }

    public function fetch_leverage_tiers(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http007_market_limit
             * @param {string[]|null} $symbols list of unified market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=leverage-tiers-structure leverage tiers structures~, indexed by market $symbols
             */
            Async\await($this->load_markets());
            $response = Async\await($this->v1PerpetualPublicGetMarketLimitConfig ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "BTCUSD" => [
            //                 ["500001", "100", "0.005"],
            //                 ["1000001", "50", "0.01"],
            //                 ["2000001", "30", "0.015"],
            //                 ["5000001", "20", "0.02"],
            //                 ["10000001", "15", "0.025"],
            //                 ["20000001", "10", "0.03"]
            //             ],
            //             ...
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_leverage_tiers($data, $symbols, null);
        }) ();
    }

    public function parse_market_leverage_tiers($item, ?array $market = null) {
        $tiers = array();
        $minNotional = 0;
        for ($j = 0; $j < count($item); $j++) {
            $bracket = $item[$j];
            $maxNotional = $this->safe_number($bracket, 0);
            $tiers[] = array(
                'tier' => $j + 1,
                'currency' => $market['linear'] ? $market['base'] : $market['quote'],
                'minNotional' => $minNotional,
                'maxNotional' => $maxNotional,
                'maintenanceMarginRate' => $this->safe_number($bracket, 2),
                'maxLeverage' => $this->safe_integer($bracket, 1),
                'info' => $bracket,
            );
            $minNotional = $maxNotional;
        }
        return $tiers;
    }

    public function modify_margin_helper(string $symbol, $amount, $addOrReduce, $params = array ()) {
        return Async\async(function () use ($symbol, $amount, $addOrReduce, $params) {
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'amount' => $this->amount_to_precision($symbol, $amount),
                'type' => $addOrReduce,
            );
            $response = Async\await($this->v1PerpetualPrivatePostPositionAdjustMargin (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "adl_sort" => 1,
            //             "adl_sort_val" => "0.00004320",
            //             "amount" => "0.0005",
            //             "amount_max" => "0.0005",
            //             "amount_max_margin" => "6.57352000000000000000",
            //             "bkr_price" => "16294.08000000000000011090",
            //             "bkr_price_imply" => "0.00000000000000000000",
            //             "close_left" => "0.0005",
            //             "create_time" => 1651202571.320778,
            //             "deal_all" => "19.72000000000000000000",
            //             "deal_asset_fee" => "0.00000000000000000000",
            //             "fee_asset" => "",
            //             "finish_type" => 1,
            //             "first_price" => "39441.12",
            //             "insurance" => "0.00000000000000000000",
            //             "latest_price" => "39441.12",
            //             "leverage" => "3",
            //             "liq_amount" => "0.00000000000000000000",
            //             "liq_order_price" => "0",
            //             "liq_order_time" => 0,
            //             "liq_price" => "16491.28560000000000011090",
            //             "liq_price_imply" => "0.00000000000000000000",
            //             "liq_profit" => "0.00000000000000000000",
            //             "liq_time" => 0,
            //             "mainten_margin" => "0.005",
            //             "mainten_margin_amount" => "0.09860280000000000000",
            //             "maker_fee" => "0.00000000000000000000",
            //             "margin_amount" => "11.57352000000000000000",
            //             "market" => "BTCUSDT",
            //             "open_margin" => "0.58687582908396110455",
            //             "open_margin_imply" => "0.00000000000000000000",
            //             "open_price" => "39441.12000000000000000000",
            //             "open_val" => "19.72056000000000000000",
            //             "open_val_max" => "19.72056000000000000000",
            //             "position_id" => 65171206,
            //             "profit_clearing" => "-0.00986028000000000000",
            //             "profit_real" => "-0.00986028000000000000",
            //             "profit_unreal" => "0.00",
            //             "side" => 2,
            //             "stop_loss_price" => "0.00000000000000000000",
            //             "stop_loss_type" => 0,
            //             "s ys" => 0,
            //             "take_profit_price" => "0.00000000000000000000",
            //             "take_profit_type" => 0,
            //             "taker_fee" => "0.00000000000000000000",
            //             "total" => 3464,
            //             "type" => 1,
            //             "update_time" => 1651202638.911212,
            //             "user_id" => 3620173
            //         ),
            //         "message":"OK"
            //     }
            //
            $data = $this->safe_dict($response, 'data');
            $status = $this->safe_string($response, 'message');
            return array_merge($this->parse_margin_modification($data, $market), array(
                'amount' => $this->parse_number($amount),
                'status' => $status,
            ));
        }) ();
    }

    public function parse_margin_modification($data, ?array $market = null): array {
        //
        // addMargin/reduceMargin
        //
        //    {
        //        "adl_sort" => 1,
        //        "adl_sort_val" => "0.00004320",
        //        "amount" => "0.0005",
        //        "amount_max" => "0.0005",
        //        "amount_max_margin" => "6.57352000000000000000",
        //        "bkr_price" => "16294.08000000000000011090",
        //        "bkr_price_imply" => "0.00000000000000000000",
        //        "close_left" => "0.0005",
        //        "create_time" => 1651202571.320778,
        //        "deal_all" => "19.72000000000000000000",
        //        "deal_asset_fee" => "0.00000000000000000000",
        //        "fee_asset" => "",
        //        "finish_type" => 1,
        //        "first_price" => "39441.12",
        //        "insurance" => "0.00000000000000000000",
        //        "latest_price" => "39441.12",
        //        "leverage" => "3",
        //        "liq_amount" => "0.00000000000000000000",
        //        "liq_order_price" => "0",
        //        "liq_order_time" => 0,
        //        "liq_price" => "16491.28560000000000011090",
        //        "liq_price_imply" => "0.00000000000000000000",
        //        "liq_profit" => "0.00000000000000000000",
        //        "liq_time" => 0,
        //        "mainten_margin" => "0.005",
        //        "mainten_margin_amount" => "0.09860280000000000000",
        //        "maker_fee" => "0.00000000000000000000",
        //        "margin_amount" => "11.57352000000000000000",
        //        "market" => "BTCUSDT",
        //        "open_margin" => "0.58687582908396110455",
        //        "open_margin_imply" => "0.00000000000000000000",
        //        "open_price" => "39441.12000000000000000000",
        //        "open_val" => "19.72056000000000000000",
        //        "open_val_max" => "19.72056000000000000000",
        //        "position_id" => 65171206,
        //        "profit_clearing" => "-0.00986028000000000000",
        //        "profit_real" => "-0.00986028000000000000",
        //        "profit_unreal" => "0.00",
        //        "side" => 2,
        //        "stop_loss_price" => "0.00000000000000000000",
        //        "stop_loss_type" => 0,
        //        "sy s" => 0,
        //        "take_profit_price" => "0.00000000000000000000",
        //        "take_profit_type" => 0,
        //        "taker_fee" => "0.00000000000000000000",
        //        "total" => 3464,
        //        "type" => 1,
        //        "update_time" => 1651202638.911212,
        //        "user_id" => 3620173
        //    }
        //
        // fetchMarginAdjustmentHistory
        //
        //    {
        //        bkr_price => '0',
        //        leverage => '3',
        //        liq_price => '0',
        //        margin_amount => '5.33236666666666666666',
        //        margin_change => '3',
        //        $market => 'XRPUSDT',
        //        position_amount => '11',
        //        position_id => '297155652',
        //        position_type => '2',
        //        settle_price => '0.6361',
        //        time => '1711050906.382891',
        //        $type => '1',
        //        user_id => '3685860'
        //    }
        //
        $marketId = $this->safe_string($data, 'market');
        $type = $this->safe_string($data, 'type');
        $timestamp = $this->safe_integer_product_2($data, 'time', 'update_time', 1000);
        return array(
            'info' => $data,
            'symbol' => $this->safe_symbol($marketId, $market, null, 'swap'),
            'type' => ($type === '1') ? 'add' : 'reduce',
            'marginMode' => 'isolated',
            'amount' => $this->safe_number($data, 'margin_change'),
            'total' => $this->safe_number($data, 'position_amount'),
            'code' => $market['quote'],
            'status' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        );
    }

    public function add_margin(string $symbol, float $amount, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $amount, $params) {
            /**
             * add margin
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http032_adjust_position_margin
             * @param {string} $symbol unified market $symbol
             * @param {float} $amount amount of margin to add
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=add-margin-structure margin structure~
             */
            return Async\await($this->modify_margin_helper($symbol, $amount, 1, $params));
        }) ();
    }

    public function reduce_margin(string $symbol, float $amount, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $amount, $params) {
            /**
             * remove margin from a position
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http032_adjust_position_margin
             * @param {string} $symbol unified market $symbol
             * @param {float} $amount the $amount of margin to remove
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=reduce-margin-structure margin structure~
             */
            return Async\await($this->modify_margin_helper($symbol, $amount, 2, $params));
        }) ();
    }

    public function fetch_funding_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch the history of funding payments paid and received on this account
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http034_funding_position
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch funding history for
             * @param {int} [$limit] the maximum number of funding history structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-history-structure funding history structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchFundingHistory() requires a $symbol argument');
            }
            $limit = ($limit === null) ? 100 : $limit;
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'limit' => $limit,
                // 'offset' => 0,
                // 'end_time' => 1638990636000,
                // 'windowtime' => 1638990636000,
            );
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            $response = Async\await($this->v1PerpetualPrivateGetPositionFunding (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "limit" => 100,
            //             "offset" => 0,
            //             "records" => array(
            //                 array(
            //                     "amount" => "0.0012",
            //                     "asset" => "USDT",
            //                     "funding" => "-0.0095688273996",
            //                     "funding_rate" => "0.00020034",
            //                     "market" => "BTCUSDT",
            //                     "position_id" => 62052321,
            //                     "price" => "39802.45",
            //                     "real_funding_rate" => "0.00020034",
            //                     "side" => 2,
            //                     "time" => 1650729623.933885,
            //                     "type" => 1,
            //                     "user_id" => 3620173,
            //                     "value" => "47.76294"
            //                 ),
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $resultList = $this->safe_value($data, 'records', array());
            $result = array();
            for ($i = 0; $i < count($resultList); $i++) {
                $entry = $resultList[$i];
                $timestamp = $this->safe_timestamp($entry, 'time');
                $currencyId = $this->safe_string($entry, 'asset');
                $code = $this->safe_currency_code($currencyId);
                $result[] = array(
                    'info' => $entry,
                    'symbol' => $symbol,
                    'code' => $code,
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                    'id' => $this->safe_number($entry, 'position_id'),
                    'amount' => $this->safe_number($entry, 'funding'),
                );
            }
            return $result;
        }) ();
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the current funding rate
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http008_market_ticker
             * @param {string} $symbol unified $market $symbol
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if (!$market['swap']) {
                throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
            }
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->v1PerpetualPublicGetMarketTicker (array_merge($request, $params)));
            //
            //     {
            //          "code" => 0,
            //         "data":
            //         {
            //             "date" => 1650678472474,
            //             "ticker" => array(
            //                 "vol" => "6090.9430",
            //                 "low" => "39180.30",
            //                 "open" => "40474.97",
            //                 "high" => "40798.01",
            //                 "last" => "39659.30",
            //                 "buy" => "39663.79",
            //                 "period" => 86400,
            //                 "funding_time" => 372,
            //                 "position_amount" => "270.1956",
            //                 "funding_rate_last" => "0.00022913",
            //                 "funding_rate_next" => "0.00013158",
            //                 "funding_rate_predict" => "0.00016552",
            //                 "insurance" => "16045554.83969682659674035672",
            //                 "sign_price" => "39652.48",
            //                 "index_price" => "39648.44250000",
            //                 "sell_total" => "22.3913",
            //                 "buy_total" => "19.4498",
            //                 "buy_amount" => "12.8942",
            //                 "sell" => "39663.80",
            //                 "sell_amount" => "0.9388"
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $ticker = $this->safe_value($data, 'ticker', array());
            $timestamp = $this->safe_integer($data, 'date');
            $ticker['timestamp'] = $timestamp; // avoid changing parseFundingRate signature
            return $this->parse_funding_rate($ticker, $market);
        }) ();
    }

    public function parse_funding_rate($contract, ?array $market = null) {
        //
        // fetchFundingRate
        //
        //     {
        //         "vol" => "6090.9430",
        //         "low" => "39180.30",
        //         "open" => "40474.97",
        //         "high" => "40798.01",
        //         "last" => "39659.30",
        //         "buy" => "39663.79",
        //         "period" => 86400,
        //         "funding_time" => 372,
        //         "position_amount" => "270.1956",
        //         "funding_rate_last" => "0.00022913",
        //         "funding_rate_next" => "0.00013158",
        //         "funding_rate_predict" => "0.00016552",
        //         "insurance" => "16045554.83969682659674035672",
        //         "sign_price" => "39652.48",
        //         "index_price" => "39648.44250000",
        //         "sell_total" => "22.3913",
        //         "buy_total" => "19.4498",
        //         "buy_amount" => "12.8942",
        //         "sell" => "39663.80",
        //         "sell_amount" => "0.9388"
        //     }
        //
        $timestamp = $this->safe_integer($contract, 'timestamp');
        $contract = $this->omit($contract, 'timestamp');
        $fundingDelta = $this->safe_integer($contract, 'funding_time') * 60 * 1000;
        $fundingHour = ($timestamp . $fundingDelta) / 3600000;
        $fundingTimestamp = (int) round($fundingHour) * 3600000;
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol(null, $market),
            'markPrice' => $this->safe_number($contract, 'sign_price'),
            'indexPrice' => $this->safe_number($contract, 'index_price'),
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fundingRate' => $this->safe_number($contract, 'funding_rate_next'),
            'fundingTimestamp' => $fundingTimestamp,
            'fundingDatetime' => $this->iso8601($fundingTimestamp),
            'nextFundingRate' => $this->safe_number($contract, 'funding_rate_predict'),
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => $this->safe_number($contract, 'funding_rate_last'),
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_funding_rates(?array $symbols = null, $params = array ()) {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch the current funding rates
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http009_market_ticker_all
             * @param {string[]} $symbols unified $market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $market = null;
            if ($symbols !== null) {
                $symbol = $this->safe_value($symbols, 0);
                $market = $this->market($symbol);
                if (!$market['swap']) {
                    throw new BadSymbol($this->id . ' fetchFundingRates() supports swap contracts only');
                }
            }
            $response = Async\await($this->v1PerpetualPublicGetMarketTickerAll ($params));
            //
            //     {
            //         "code" => 0,
            //         "data":
            //         {
            //             "date" => 1650678472474,
            //             "ticker" => {
            //                 "BTCUSDT" => array(
            //                     "vol" => "6090.9430",
            //                     "low" => "39180.30",
            //                     "open" => "40474.97",
            //                     "high" => "40798.01",
            //                     "last" => "39659.30",
            //                     "buy" => "39663.79",
            //                     "period" => 86400,
            //                     "funding_time" => 372,
            //                     "position_amount" => "270.1956",
            //                     "funding_rate_last" => "0.00022913",
            //                     "funding_rate_next" => "0.00013158",
            //                     "funding_rate_predict" => "0.00016552",
            //                     "insurance" => "16045554.83969682659674035672",
            //                     "sign_price" => "39652.48",
            //                     "index_price" => "39648.44250000",
            //                     "sell_total" => "22.3913",
            //                     "buy_total" => "19.4498",
            //                     "buy_amount" => "12.8942",
            //                     "sell" => "39663.80",
            //                     "sell_amount" => "0.9388"
            //                 }
            //             }
            //         ),
            //         "message" => "OK"
            //     }
            $data = $this->safe_value($response, 'data', array());
            $tickers = $this->safe_value($data, 'ticker', array());
            $timestamp = $this->safe_integer($data, 'date');
            $result = array();
            $marketIds = is_array($tickers) ? array_keys($tickers) : array();
            for ($i = 0; $i < count($marketIds); $i++) {
                $marketId = $marketIds[$i];
                if (mb_strpos($marketId, '_') === -1) { // skip _signprice and _indexprice
                    $marketInner = $this->safe_market($marketId, null, null, 'swap');
                    $ticker = $tickers[$marketId];
                    $ticker['timestamp'] = $timestamp;
                    $result[] = $this->parse_funding_rate($ticker, $marketInner);
                }
            }
            return $this->filter_by_array($result, 'symbol', $symbols);
        }) ();
    }

    public function withdraw(string $code, float $amount, string $address, $tag = null, $params = array ()) {
        return Async\async(function () use ($code, $amount, $address, $tag, $params) {
            /**
             * make a withdrawal
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account015_submit_withdraw
             * @param {string} $code unified $currency $code
             * @param {float} $amount the $amount to withdraw
             * @param {string} $address the $address to withdraw to
             * @param {string} $tag
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->network] unified network $code
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$transaction-structure $transaction structure~
             */
            list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
            $this->check_address($address);
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $networkCode = $this->safe_string_upper($params, 'network');
            $params = $this->omit($params, 'network');
            if ($tag) {
                $address = $address . ':' . $tag;
            }
            $request = array(
                'coin_type' => $currency['id'],
                'coin_address' => $address, // must be authorized, inter-user transfer by a registered mobile phone number or an email $address is supported
                'actual_amount' => floatval($this->number_to_string($amount)), // the actual $amount without fees, https://www.coinex.com/fees
                'transfer_method' => 'onchain', // onchain, local
            );
            if ($networkCode !== null) {
                $request['smart_contract_name'] = $this->network_code_to_id($networkCode);
            }
            $response = Async\await($this->v1PrivatePostBalanceCoinWithdraw (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "actual_amount" => "1.00000000",
            //             "amount" => "1.00000000",
            //             "coin_address" => "1KAv3pazbTk2JnQ5xTo6fpKK7p1it2RzD4",
            //             "coin_type" => "BCH",
            //             "coin_withdraw_id" => 206,
            //             "confirmations" => 0,
            //             "create_time" => 1524228297,
            //             "status" => "audit",
            //             "tx_fee" => "0",
            //             "tx_id" => ""
            //         ),
            //         "message" => "Ok"
            //     }
            //
            $transaction = $this->safe_dict($response, 'data', array());
            return $this->parse_transaction($transaction, $currency);
        }) ();
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'audit' => 'pending',
            'pass' => 'pending',
            'processing' => 'pending',
            'confirming' => 'pending',
            'not_pass' => 'failed',
            'cancel' => 'canceled',
            'finish' => 'ok',
            'fail' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_funding_rate_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http038_funding_history
             * fetches historical funding rate prices
             * @param {string} $symbol unified $symbol of the $market to fetch the funding rate history for
             * @param {int} [$since] $timestamp in ms of the earliest funding rate to fetch
             * @param {int} [$limit] the maximum amount of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~ to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
             * @param {int} [$params->until] $timestamp in ms of the latest funding rate
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $paginate = false;
            list($paginate, $params) = $this->handle_option_and_params($params, 'fetchFundingRateHistory', 'paginate');
            if ($paginate) {
                return Async\await($this->fetch_paginated_call_deterministic('fetchFundingRateHistory', $symbol, $since, $limit, '8h', $params, 1000));
            }
            if ($limit === null) {
                $limit = 100;
            }
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
                'limit' => $limit,
                'offset' => 0,
                // 'end_time' => 1638990636,
            );
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            list($request, $params) = $this->handle_until_option('end_time', $request, $params);
            $response = Async\await($this->v1PerpetualPublicGetMarketFundingHistory (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "offset" => 0,
            //             "limit" => 3,
            //             "records" => array(
            //                 array(
            //                     "time" => 1650672021.6230309,
            //                     "market" => "BTCUSDT",
            //                     "asset" => "USDT",
            //                     "funding_rate" => "0.00022913",
            //                     "funding_rate_real" => "0.00022913"
            //                 ),
            //             )
            //         ),
            //         "message" => "OK"
            //     }
            //
            $data = $this->safe_value($response, 'data');
            $result = $this->safe_value($data, 'records', array());
            $rates = array();
            for ($i = 0; $i < count($result); $i++) {
                $entry = $result[$i];
                $marketId = $this->safe_string($entry, 'market');
                $symbolInner = $this->safe_symbol($marketId, $market, null, 'swap');
                $timestamp = $this->safe_timestamp($entry, 'time');
                $rates[] = array(
                    'info' => $entry,
                    'symbol' => $symbolInner,
                    'fundingRate' => $this->safe_number($entry, 'funding_rate'),
                    'timestamp' => $timestamp,
                    'datetime' => $this->iso8601($timestamp),
                );
            }
            $sorted = $this->sort_by($rates, 'timestamp');
            return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
        }) ();
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        // fetchDeposits
        //
        //    {
        //        "coin_deposit_id" => 32555985,
        //        "create_time" => 1673325495,
        //        "amount" => "12.71",
        //        "amount_display" => "12.71",
        //        "diff_amount" => "0",
        //        "min_amount" => "0",
        //        "actual_amount" => "12.71",
        //        "actual_amount_display" => "12.71",
        //        "confirmations" => 35,
        //        "tx_id" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
        //        "tx_id_display" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
        //        "coin_address" => "0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
        //        "coin_address_display" => "0xe7a3****f4b738",
        //        "add_explorer" => "https://bscscan.com/address/0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
        //        "coin_type" => "USDT",
        //        "smart_contract_name" => "BSC",
        //        "transfer_method" => "onchain",
        //        "status" => "finish",
        //        "status_display" => "finish",
        //        "remark" => "",
        //        "explorer" => "https://bscscan.com/tx/0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56"
        //    }
        //
        // fetchWithdrawals
        //
        //    {
        //        "coin_withdraw_id" => 20076836,
        //        "create_time" => 1673325776,
        //        "actual_amount" => "0.029",
        //        "actual_amount_display" => "0.029",
        //        "amount" => "0.03",
        //        "amount_display" => "0.03",
        //        "coin_address" => "MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
        //        "app_coin_address_display" => "MBh****pAb",
        //        "coin_address_display" => "MBhJcc****UdJpAb",
        //        "add_explorer" => "https://explorer.viawallet.com/ltc/address/MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
        //        "coin_type" => "LTC",
        //        "confirmations" => 7,
        //        "explorer" => "https://explorer.viawallet.com/ltc/tx/a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9",
        //        "fee" => "0",
        //        "remark" => "",
        //        "smart_contract_name" => "",
        //        "status" => "finish",
        //        "status_display" => "finish",
        //        "transfer_method" => "onchain",
        //        "tx_fee" => "0.001",
        //        "tx_id" => "a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9"
        //    }
        //
        $id = $this->safe_string_2($transaction, 'coin_withdraw_id', 'coin_deposit_id');
        $address = $this->safe_string($transaction, 'coin_address');
        $tag = $this->safe_string($transaction, 'remark'); // set but unused
        if ($tag !== null) {
            if (strlen($tag) < 1) {
                $tag = null;
            }
        }
        $txid = $this->safe_value($transaction, 'tx_id');
        if ($txid !== null) {
            if (strlen($txid) < 1) {
                $txid = null;
            }
        }
        $currencyId = $this->safe_string($transaction, 'coin_type');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_timestamp($transaction, 'create_time');
        $type = (is_array($transaction) && array_key_exists('coin_withdraw_id', $transaction)) ? 'withdrawal' : 'deposit';
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $networkId = $this->safe_string($transaction, 'smart_contract_name');
        $amount = $this->safe_number($transaction, 'actual_amount');
        $feeCost = $this->safe_string($transaction, 'tx_fee');
        $transferMethod = $this->safe_string($transaction, 'transfer_method');
        $internal = $transferMethod === 'local';
        $addressTo = null;
        $addressFrom = null;
        if ($type === 'deposit') {
            $feeCost = '0';
            $addressTo = $address;
        } else {
            $addressFrom = $address;
        }
        $fee = array(
            'cost' => $this->parse_number($feeCost),
            'currency' => $code,
        );
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $txid,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => $this->network_id_to_code($networkId),
            'address' => $address,
            'addressTo' => null,
            'addressFrom' => null,
            'tag' => $tag,
            'tagTo' => $addressTo,
            'tagFrom' => $addressFrom,
            'type' => $type,
            'amount' => $this->parse_number($amount),
            'currency' => $code,
            'status' => $status,
            'updated' => null,
            'fee' => $fee,
            'comment' => null,
            'internal' => $internal,
        );
    }

    public function transfer(string $code, float $amount, string $fromAccount, string $toAccount, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $amount, $fromAccount, $toAccount, $params) {
            /**
             * transfer $currency internally between wallets on the same account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account014_balance_contract_transfer
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account013_margin_transfer
             * @param {string} $code unified $currency $code
             * @param {float} $amount amount to transfer
             * @param {string} $fromAccount account to transfer from
             * @param {string} $toAccount account to transfer to
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $amountToPrecision = $this->currency_to_precision($code, $amount);
            $request = array(
                'amount' => $amountToPrecision,
                'coin_type' => $currency['id'],
            );
            $response = null;
            if (($fromAccount === 'spot') && ($toAccount === 'swap')) {
                $request['transfer_side'] = 'in'; // 'in' spot to swap, 'out' swap to spot
                $response = Async\await($this->v1PrivatePostContractBalanceTransfer (array_merge($request, $params)));
            } elseif (($fromAccount === 'swap') && ($toAccount === 'spot')) {
                $request['transfer_side'] = 'out'; // 'in' spot to swap, 'out' swap to spot
                $response = Async\await($this->v1PrivatePostContractBalanceTransfer (array_merge($request, $params)));
            } else {
                $accountsById = $this->safe_value($this->options, 'accountsById', array());
                $fromId = $this->safe_string($accountsById, $fromAccount, $fromAccount);
                $toId = $this->safe_string($accountsById, $toAccount, $toAccount);
                // $fromAccount and $toAccount must be integers for margin transfers
                // spot is 0, use fetchBalance() to find the margin account id
                $request['from_account'] = intval($fromId);
                $request['to_account'] = intval($toId);
                $response = Async\await($this->v1PrivatePostMarginTransfer (array_merge($request, $params)));
            }
            //
            //     array("code" => 0, "data" => null, "message" => "Success")
            //
            return array_merge($this->parse_transfer($response, $currency), array(
                'amount' => $this->parse_number($amountToPrecision),
                'fromAccount' => $fromAccount,
                'toAccount' => $toAccount,
            ));
        }) ();
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            '0' => 'ok',
            'SUCCESS' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transfer($transfer, ?array $currency = null) {
        //
        // fetchTransfers Swap
        //
        //     array(
        //         "amount" => "10",
        //         "asset" => "USDT",
        //         "transfer_type" => "transfer_out", // from swap to spot
        //         "created_at" => 1651633422
        //     ),
        //
        // fetchTransfers Margin
        //
        //     array(
        //         "id" => 7580062,
        //         "updated_at" => 1653684379,
        //         "user_id" => 3620173,
        //         "from_account_id" => 0,
        //         "to_account_id" => 1,
        //         "asset" => "BTC",
        //         "amount" => "0.00160829",
        //         "balance" => "0.00160829",
        //         "transfer_type" => "IN",
        //         "status" => "SUCCESS",
        //         "created_at" => 1653684379
        //     ),
        //
        $timestamp = $this->safe_timestamp($transfer, 'created_at');
        $transferType = $this->safe_string($transfer, 'transfer_type');
        $fromAccount = null;
        $toAccount = null;
        if ($transferType === 'transfer_out') {
            $fromAccount = 'swap';
            $toAccount = 'spot';
        } elseif ($transferType === 'transfer_in') {
            $fromAccount = 'spot';
            $toAccount = 'swap';
        } elseif ($transferType === 'IN') {
            $fromAccount = 'spot';
            $toAccount = 'margin';
        } elseif ($transferType === 'OUT') {
            $fromAccount = 'margin';
            $toAccount = 'spot';
        }
        $currencyId = $this->safe_string($transfer, 'asset');
        $currencyCode = $this->safe_currency_code($currencyId, $currency);
        return array(
            'info' => $transfer,
            'id' => $this->safe_integer($transfer, 'id'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $currencyCode,
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $this->parse_transfer_status($this->safe_string_2($transfer, 'code', 'status')),
        );
    }

    public function fetch_transfers(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch a history of internal $transfers made on an account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account025_margin_transfer_history
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account024_contract_transfer_history
             * @param {string} $code unified $currency $code of the $currency transferred
             * @param {int} [$since] the earliest time in ms to fetch $transfers for
             * @param {int} [$limit] the maximum number of  $transfers structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structures~
             */
            Async\await($this->load_markets());
            $currency = null;
            $request = array(
                'page' => 1,
                // 'limit' => $limit,
                // 'asset' => 'USDT',
                // 'start_time' => $since,
                // 'end_time' => 1515806440,
                // 'transfer_type' => 'transfer_in', // transfer_in => from Spot to Swap Account, transfer_out => from Swap to Spot Account
            );
            $page = $this->safe_integer($params, 'page');
            if ($page !== null) {
                $request['page'] = $page;
            }
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['asset'] = $currency['id'];
            }
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            } else {
                $request['limit'] = 100;
            }
            $params = $this->omit($params, 'page');
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchTransfers', $params);
            $response = null;
            if ($marginMode !== null) {
                $response = Async\await($this->v1PrivateGetMarginTransferHistory (array_merge($request, $params)));
            } else {
                $response = Async\await($this->v1PrivateGetContractTransferHistory (array_merge($request, $params)));
            }
            //
            // Swap
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "records" => array(
            //                 array(
            //                     "amount" => "10",
            //                     "asset" => "USDT",
            //                     "transfer_type" => "transfer_out",
            //                     "created_at" => 1651633422
            //                 ),
            //             ),
            //             "total" => 5
            //         ),
            //         "message" => "Success"
            //     }
            //
            // Margin
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "records" => array(
            //                 array(
            //                     "id" => 7580062,
            //                     "updated_at" => 1653684379,
            //                     "user_id" => 3620173,
            //                     "from_account_id" => 0,
            //                     "to_account_id" => 1,
            //                     "asset" => "BTC",
            //                     "amount" => "0.00160829",
            //                     "balance" => "0.00160829",
            //                     "transfer_type" => "IN",
            //                     "status" => "SUCCESS",
            //                     "created_at" => 1653684379
            //                 }
            //             ),
            //             "total" => 1
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $transfers = $this->safe_list($data, 'records', array());
            return $this->parse_transfers($transfers, $currency, $since, $limit);
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account026_withdraw_list
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            $request = array();
            $currency = null;
            if ($code !== null) {
                Async\await($this->load_markets());
                $currency = $this->currency($code);
                $request['coin_type'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['Limit'] = $limit;
            }
            $response = Async\await($this->v1PrivateGetBalanceCoinWithdraw (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "data" => {
            //            "has_next" => false,
            //            "curr_page" => 1,
            //            "count" => 1,
            //            "data" => array(
            //                array(
            //                    "coin_withdraw_id" => 20076836,
            //                    "create_time" => 1673325776,
            //                    "actual_amount" => "0.029",
            //                    "actual_amount_display" => "0.029",
            //                    "amount" => "0.03",
            //                    "amount_display" => "0.03",
            //                    "coin_address" => "MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
            //                    "app_coin_address_display" => "MBh****pAb",
            //                    "coin_address_display" => "MBhJcc****UdJpAb",
            //                    "add_explorer" => "https://explorer.viawallet.com/ltc/address/MBhJcc3r5b3insc7QxyvEPtf31NqUdJpAb",
            //                    "coin_type" => "LTC",
            //                    "confirmations" => 7,
            //                    "explorer" => "https://explorer.viawallet.com/ltc/tx/a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9",
            //                    "fee" => "0",
            //                    "remark" => "",
            //                    "smart_contract_name" => "",
            //                    "status" => "finish",
            //                    "status_display" => "finish",
            //                    "transfer_method" => "onchain",
            //                    "tx_fee" => "0.001",
            //                    "tx_id" => "a0aa082132619b8a499b87e7d5bc3c508e0227104f5202ae26b695bb4cb7fbf9"
            //                }
            //            ),
            //            "total" => 1,
            //            "total_page" => 1
            //        ),
            //        "message" => "Success"
            //    }
            //
            $data = $this->safe_value($response, 'data');
            if (gettype($data) !== 'array' || array_keys($data) !== array_keys(array_keys($data))) {
                $data = $this->safe_value($data, 'data', array());
            }
            return $this->parse_transactions($data, $currency, $since, $limit);
        }) ();
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all deposits made to an account
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account009_deposit_list
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch deposits for
             * @param {int} [$limit] the maximum number of deposits structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            $request = array();
            $currency = null;
            if ($code !== null) {
                Async\await($this->load_markets());
                $currency = $this->currency($code);
                $request['coin_type'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['Limit'] = $limit;
            }
            $response = Async\await($this->v1PrivateGetBalanceCoinDeposit (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "data" => {
            //            "has_next" => false,
            //            "curr_page" => 1,
            //            "count" => 1,
            //            "data" => array(
            //                array(
            //                    "coin_deposit_id" => 32555985,
            //                    "create_time" => 1673325495,
            //                    "amount" => "12.71",
            //                    "amount_display" => "12.71",
            //                    "diff_amount" => "0",
            //                    "min_amount" => "0",
            //                    "actual_amount" => "12.71",
            //                    "actual_amount_display" => "12.71",
            //                    "confirmations" => 35,
            //                    "tx_id" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
            //                    "tx_id_display" => "0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56",
            //                    "coin_address" => "0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
            //                    "coin_address_display" => "0xe7a3****f4b738",
            //                    "add_explorer" => "https://bscscan.com/address/0xe7a3831c56836f466b6a6268cff4fc852cf4b738",
            //                    "coin_type" => "USDT",
            //                    "smart_contract_name" => "BSC",
            //                    "transfer_method" => "onchain",
            //                    "status" => "finish",
            //                    "status_display" => "finish",
            //                    "remark" => "",
            //                    "explorer" => "https://bscscan.com/tx/0x57f1c92cc10b48316e2bf5faf230694fec2174e7744c1562a9a88b9c1e585f56"
            //                }
            //            ),
            //            "total" => 1,
            //            "total_page" => 1
            //        ),
            //        "message" => "Success"
            //    }
            //
            $data = $this->safe_value($response, 'data');
            if (gettype($data) !== 'array' || array_keys($data) !== array_keys(array_keys($data))) {
                $data = $this->safe_value($data, 'data', array());
            }
            return $this->parse_transactions($data, $currency, $since, $limit);
        }) ();
    }

    public function parse_isolated_borrow_rate($info, ?array $market = null): array {
        //
        //     {
        //         "market" => "BTCUSDT",
        //         "leverage" => 10,
        //         "BTC" => array(
        //             "min_amount" => "0.002",
        //             "max_amount" => "200",
        //             "day_rate" => "0.001"
        //         ),
        //         "USDT" => array(
        //             "min_amount" => "60",
        //             "max_amount" => "5000000",
        //             "day_rate" => "0.001"
        //         }
        //     ),
        //
        $marketId = $this->safe_string($info, 'market');
        $market = $this->safe_market($marketId, $market, null, 'spot');
        $baseInfo = $this->safe_value($info, $market['baseId']);
        $quoteInfo = $this->safe_value($info, $market['quoteId']);
        return array(
            'symbol' => $market['symbol'],
            'base' => $market['base'],
            'baseRate' => $this->safe_number($baseInfo, 'day_rate'),
            'quote' => $market['quote'],
            'quoteRate' => $this->safe_number($quoteInfo, 'day_rate'),
            'period' => 86400000,
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_isolated_borrow_rate(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetch the rate of interest to borrow a currency for margin trading
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account007_margin_account_settings
             * @param {string} $symbol unified $symbol of the $market to fetch the borrow rate for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=isolated-borrow-rate-structure isolated borrow rate structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'market' => $market['id'],
            );
            $response = Async\await($this->v1PrivateGetMarginConfig (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "market" => "BTCUSDT",
            //             "leverage" => 10,
            //             "BTC" => array(
            //                 "min_amount" => "0.002",
            //                 "max_amount" => "200",
            //                 "day_rate" => "0.001"
            //             ),
            //             "USDT" => array(
            //                 "min_amount" => "60",
            //                 "max_amount" => "5000000",
            //                 "day_rate" => "0.001"
            //             }
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_isolated_borrow_rate($data, $market);
        }) ();
    }

    public function fetch_isolated_borrow_rates($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetch the borrow interest rates of all currencies
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account007_margin_account_settings
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a list of {@link https://github.com/ccxt/ccxt/wiki/Manual#isolated-borrow-rate-structure isolated borrow rate structures}
             */
            Async\await($this->load_markets());
            $response = Async\await($this->v1PrivateGetMarginConfig ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "market" => "BTCUSDT",
            //                 "leverage" => 10,
            //                 "BTC" => array(
            //                     "min_amount" => "0.002",
            //                     "max_amount" => "200",
            //                     "day_rate" => "0.001"
            //                 ),
            //                 "USDT" => array(
            //                     "min_amount" => "60",
            //                     "max_amount" => "5000000",
            //                     "day_rate" => "0.001"
            //                 }
            //             ),
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            return $this->parse_isolated_borrow_rates($data);
        }) ();
    }

    public function fetch_borrow_interest(?string $code = null, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        return Async\async(function () use ($code, $symbol, $since, $limit, $params) {
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->v1PrivateGetMarginLoanHistory (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => {
            //             "page" => 1,
            //             "limit" => 10,
            //             "total" => 1,
            //             "has_next" => false,
            //             "curr_page" => 1,
            //             "count" => 1,
            //             "data" => array(
            //                 array(
            //                     "loan_id" => 2616357,
            //                     "create_time" => 1654214027,
            //                     "market_type" => "BTCUSDT",
            //                     "coin_type" => "BTC",
            //                     "day_rate" => "0.001",
            //                     "loan_amount" => "0.0144",
            //                     "interest_amount" => "0",
            //                     "unflat_amount" => "0",
            //                     "expire_time" => 1655078027,
            //                     "is_renew" => true,
            //                     "status" => "finish"
            //                 }
            //             ),
            //             "total_page" => 1
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $rows = $this->safe_value($data, 'data', array());
            $interest = $this->parse_borrow_interests($rows, $market);
            return $this->filter_by_currency_since_limit($interest, $code, $since, $limit);
        }) ();
    }

    public function parse_borrow_interest($info, ?array $market = null) {
        //
        //     {
        //         "loan_id" => 2616357,
        //         "create_time" => 1654214027,
        //         "market_type" => "BTCUSDT",
        //         "coin_type" => "BTC",
        //         "day_rate" => "0.001",
        //         "loan_amount" => "0.0144",
        //         "interest_amount" => "0",
        //         "unflat_amount" => "0",
        //         "expire_time" => 1655078027,
        //         "is_renew" => true,
        //         "status" => "finish"
        //     }
        //
        $marketId = $this->safe_string($info, 'market_type');
        $market = $this->safe_market($marketId, $market, null, 'spot');
        $symbol = $this->safe_string($market, 'symbol');
        $timestamp = $this->safe_timestamp($info, 'expire_time');
        $unflatAmount = $this->safe_string($info, 'unflat_amount');
        $loanAmount = $this->safe_string($info, 'loan_amount');
        $interest = Precise::string_sub($unflatAmount, $loanAmount);
        if ($unflatAmount === '0') {
            $interest = null;
        }
        return array(
            'account' => null, // deprecated
            'symbol' => $symbol,
            'marginMode' => 'isolated',
            'marginType' => null, // deprecated
            'currency' => $this->safe_currency_code($this->safe_string($info, 'coin_type')),
            'interest' => $this->parse_number($interest),
            'interestRate' => $this->safe_number($info, 'day_rate'),
            'amountBorrowed' => $this->parse_number($loanAmount),
            'timestamp' => $timestamp,  // expiry time
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function borrow_isolated_margin(string $symbol, string $code, float $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $code, $amount, $params) {
            /**
             * create a loan to borrow margin
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account017_margin_loan
             * @param {string} $symbol unified $market $symbol, required for coinex
             * @param {string} $code unified $currency $code of the $currency to borrow
             * @param {float} $amount the $amount to borrow
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $currency = $this->currency($code);
            $request = array(
                'market' => $market['id'],
                'coin_type' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
            );
            $response = Async\await($this->v1PrivatePostMarginLoan (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             "loan_id" => 1670
            //         ),
            //         "message" => "Success"
            //     }
            //
            $data = $this->safe_value($response, 'data', array());
            $transaction = $this->parse_margin_loan($data, $currency);
            return array_merge($transaction, array(
                'amount' => $amount,
                'symbol' => $symbol,
            ));
        }) ();
    }

    public function repay_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        return Async\async(function () use ($symbol, $code, $amount, $params) {
            /**
             * repay borrowed margin and interest
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account018_margin_flat
             * @param {string} $symbol unified $market $symbol, required for coinex
             * @param {string} $code unified $currency $code of the $currency to repay
             * @param {float} $amount the $amount to repay
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->loan_id] extra parameter that is not required
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $currency = $this->currency($code);
            $request = array(
                'market' => $market['id'],
                'coin_type' => $currency['id'],
                'amount' => $this->currency_to_precision($code, $amount),
            );
            $response = Async\await($this->v1PrivatePostMarginFlat (array_merge($request, $params)));
            //
            //     {
            //         "code" => 0,
            //         "data" => null,
            //         "message" => "Success"
            //     }
            //
            $transaction = $this->parse_margin_loan($response, $currency);
            return array_merge($transaction, array(
                'amount' => $amount,
                'symbol' => $symbol,
            ));
        }) ();
    }

    public function parse_margin_loan($info, ?array $currency = null) {
        //
        // borrowMargin
        //
        //     {
        //         "loan_id" => 1670
        //     }
        //
        // repayMargin
        //
        //     {
        //         "code" => 0,
        //         "data" => null,
        //         "message" => "Success"
        //     }
        //
        return array(
            'id' => $this->safe_integer($info, 'loan_id'),
            'currency' => $this->safe_currency_code(null, $currency),
            'amount' => null,
            'symbol' => null,
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_deposit_withdraw_fees(?array $codes = null, $params = array ()) {
        return Async\async(function () use ($codes, $params) {
            /**
             * fetch deposit and withdraw fees
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot001_market010_asset_config
             * @param {string[]|null} $codes list of unified currency $codes
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=fee-structure fees structures~
             */
            Async\await($this->load_markets());
            $request = array();
            if ($codes !== null) {
                $codesLength = count($codes);
                if ($codesLength === 1) {
                    $request['coin_type'] = $this->safe_value($codes, 0);
                }
            }
            $response = Async\await($this->v1PublicGetCommonAssetConfig (array_merge($request, $params)));
            //
            //    {
            //        "code" => 0,
            //        "data" => {
            //            "CET-CSC" => array(
            //                "asset" => "CET",
            //                "chain" => "CSC",
            //                "can_deposit" => true,
            //                "can_withdraw " => false,
            //                "deposit_least_amount" => "1",
            //                "withdraw_least_amount" => "1",
            //                "withdraw_tx_fee" => "0.1"
            //            ),
            //            "CET-ERC20" => array(
            //                "asset" => "CET",
            //                "chain" => "ERC20",
            //                "can_deposit" => true,
            //                "can_withdraw" => false,
            //                "deposit_least_amount" => "14",
            //                "withdraw_least_amount" => "14",
            //                "withdraw_tx_fee" => "14"
            //            }
            //        ),
            //        "message" => "Success"
            //    }
            //
            return $this->parse_deposit_withdraw_fees($response, $codes);
        }) ();
    }

    public function parse_deposit_withdraw_fees($response, $codes = null, $currencyIdKey = null) {
        $depositWithdrawFees = array();
        $codes = $this->market_codes($codes);
        $data = $this->safe_value($response, 'data');
        $currencyIds = is_array($data) ? array_keys($data) : array();
        for ($i = 0; $i < count($currencyIds); $i++) {
            $entry = $currencyIds[$i];
            $splitEntry = explode('-', $entry);
            $feeInfo = $data[$currencyIds[$i]];
            $currencyId = $this->safe_string($feeInfo, 'asset');
            $currency = $this->safe_currency($currencyId);
            $code = $this->safe_string($currency, 'code');
            if (($codes === null) || ($this->in_array($code, $codes))) {
                $depositWithdrawFee = $this->safe_value($depositWithdrawFees, $code);
                if ($depositWithdrawFee === null) {
                    $depositWithdrawFees[$code] = $this->deposit_withdraw_fee(array());
                }
                $depositWithdrawFees[$code]['info'][$entry] = $feeInfo;
                $networkId = $this->safe_string($splitEntry, 1);
                $withdrawFee = $this->safe_value($feeInfo, 'withdraw_tx_fee');
                $withdrawResult = array(
                    'fee' => $withdrawFee,
                    'percentage' => ($withdrawFee !== null) ? false : null,
                );
                $depositResult = array(
                    'fee' => null,
                    'percentage' => null,
                );
                if ($networkId !== null) {
                    $networkCode = $this->network_id_to_code($networkId);
                    $depositWithdrawFees[$code]['networks'][$networkCode] = array(
                        'withdraw' => $withdrawResult,
                        'deposit' => $depositResult,
                    );
                } else {
                    $depositWithdrawFees[$code]['withdraw'] = $withdrawResult;
                    $depositWithdrawFees[$code]['deposit'] = $depositResult;
                }
            }
        }
        $depositWithdrawCodes = is_array($depositWithdrawFees) ? array_keys($depositWithdrawFees) : array();
        for ($i = 0; $i < count($depositWithdrawCodes); $i++) {
            $code = $depositWithdrawCodes[$i];
            $currency = $this->currency($code);
            $depositWithdrawFees[$code] = $this->assign_default_deposit_withdraw_fees($depositWithdrawFees[$code], $currency);
        }
        return $depositWithdrawFees;
    }

    public function fetch_leverages(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetch the set leverage for all contract and margin markets
             * @see https://viabtc.github.io/coinex_api_en_doc/spot/#docsspot002_account007_margin_account_settings
             * @param {string[]} [$symbols] a list of unified $market $symbols
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structures~
             */
            Async\await($this->load_markets());
            $symbols = $this->market_symbols($symbols);
            $market = null;
            if ($symbols !== null) {
                $symbol = $this->safe_value($symbols, 0);
                $market = $this->market($symbol);
            }
            $marketType = null;
            list($marketType, $params) = $this->handle_market_type_and_params('fetchLeverages', $market, $params);
            if ($marketType !== 'spot') {
                throw new NotSupported($this->id . ' fetchLeverages() supports spot margin markets only');
            }
            $response = Async\await($this->v1PrivateGetMarginConfig ($params));
            //
            //     {
            //         "code" => 0,
            //         "data" => array(
            //             {
            //                 "market" => "BTCUSDT",
            //                 "leverage" => 10,
            //                 "BTC" => array(
            //                     "min_amount" => "0.0008",
            //                     "max_amount" => "200",
            //                     "day_rate" => "0.0015"
            //                 ),
            //                 "USDT" => array(
            //                     "min_amount" => "50",
            //                     "max_amount" => "500000",
            //                     "day_rate" => "0.001"
            //                 }
            //             ),
            //         ),
            //         "message" => "Success"
            //     }
            //
            $leverages = $this->safe_list($response, 'data', array());
            return $this->parse_leverages($leverages, $symbols, 'market', $marketType);
        }) ();
    }

    public function parse_leverage($leverage, $market = null): array {
        $marketId = $this->safe_string($leverage, 'market');
        $leverageValue = $this->safe_integer($leverage, 'leverage');
        return array(
            'info' => $leverage,
            'symbol' => $this->safe_symbol($marketId, $market, null, 'spot'),
            'marginMode' => null,
            'longLeverage' => $leverageValue,
            'shortLeverage' => $leverageValue,
        );
    }

    public function fetch_position_history(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches historical $positions
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http033-0_finished_position
             * @param {string} $symbol unified contract $symbol
             * @param {int} [$since] not used by coinex fetchPositionHistory
             * @param {int} [$limit] the maximum amount of $records to fetch, default=1000
             * @param {array} $params extra parameters specific to the exchange api endpoint
             *
             * EXCHANGE SPECIFIC PARAMETERS
             * @param {int} [$params->side] 0 => all 1 => sell, 2 => buy
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            if ($limit === null) {
                $limit = 1000;
            }
            $request = array(
                'market' => $market['id'],
                'side' => 0,
                'limit' => $limit,
            );
            $response = Async\await($this->v1PerpetualPrivateGetPositionFinished (array_merge($request, $params)));
            //
            //    {
            //        code => '0',
            //        $data => array(
            //            $limit => '1000',
            //            offset => '0',
            //            $records => array(
            //                array(
            //                    amount_max => '10',
            //                    amount_max_margin => '2.03466666666666666666',
            //                    bkr_price => '0',
            //                    create_time => '1711150526.2581',
            //                    deal_all => '12.591',
            //                    deal_asset_fee => '0',
            //                    fee_asset => '',
            //                    finish_type => '5',
            //                    first_price => '0.6104',
            //                    latest_price => '0.6487',
            //                    leverage => '3',
            //                    liq_amount => '0',
            //                    liq_price => '0',
            //                    liq_profit => '0',
            //                    mainten_margin => '0.01',
            //                    $market => 'XRPUSDT',
            //                    market_type => '1',
            //                    open_price => '0.6104',
            //                    open_val_max => '6.104',
            //                    position_id => '297371462',
            //                    profit_real => '0.35702107169',
            //                    settle_price => '0.6104',
            //                    settle_val => '0',
            //                    side => '2',
            //                    sy s => '0',
            //                    type => '2',
            //                    update_time => '1711391446.133233',
            //                    user_id => '3685860'
            //                ),
            //                ...
            //            )
            //        ),
            //        message => 'OK'
            //    }
            //
            $data = $this->safe_dict($response, 'data');
            $records = $this->safe_list($data, 'records');
            $positions = $this->parse_positions($records);
            return $this->filter_by_symbol_since_limit($positions, $symbol, $since, $limit);
        }) ();
    }

    public function handle_margin_mode_and_params($methodName, $params = array (), $defaultValue = null) {
        /**
         * @ignore
         * $marginMode specified by $params["marginMode"], $this->options["marginMode"], $this->options["defaultMarginMode"], $params["margin"] = true or $this->options["defaultType"] = 'margin'
         * @param {array} $params extra parameters specific to the exchange api endpoint
         * @return {Array} the $marginMode in lowercase
         */
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $isMargin = $this->safe_bool($params, 'margin', false);
        $marginMode = null;
        list($marginMode, $params) = parent::handle_margin_mode_and_params($methodName, $params, $defaultValue);
        if ($marginMode === null) {
            if (($defaultType === 'margin') || ($isMargin === true)) {
                $marginMode = 'isolated';
            }
        }
        return array( $marginMode, $params );
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $path = $this->implode_params($path, $params);
        $version = $api[0];
        $requestUrl = $api[1];
        $url = $this->urls['api'][$requestUrl] . '/' . $version . '/' . $path;
        $query = $this->omit($params, $this->extract_params($path));
        $nonce = (string) $this->nonce();
        if ($method === 'POST') {
            $parts = explode('/', $path);
            $firstPart = $this->safe_string($parts, 0, '');
            $numParts = count($parts);
            $lastPart = $this->safe_string($parts, $numParts - 1, '');
            $lastWords = explode('_', $lastPart);
            $numWords = count($lastWords);
            $lastWord = $this->safe_string($lastWords, $numWords - 1, '');
            if (($firstPart === 'order') && ($lastWord === 'limit' || $lastWord === 'market')) {
                // inject in implicit API calls
                // POST /order/limit - Place limit orders
                // POST /order/market - Place market orders
                // POST /order/stop/limit - Place stop limit orders
                // POST /order/stop/market - Place stop market orders
                // POST /perpetual/v1/order/put_limit - Place limit orders
                // POST /perpetual/v1/order/put_market - Place market orders
                // POST /perpetual/v1/order/put_stop_limit - Place stop limit orders
                // POST /perpetual/v1/order/put_stop_market - Place stop market orders
                $clientOrderId = $this->safe_string($params, 'client_id');
                if ($clientOrderId === null) {
                    $defaultId = 'x-167673045';
                    $brokerId = $this->safe_value($this->options, 'brokerId', $defaultId);
                    $query['client_id'] = $brokerId . '_' . $this->uuid16();
                }
            }
        }
        if ($requestUrl === 'perpetualPrivate') {
            $this->check_required_credentials();
            $query = array_merge(array(
                'access_id' => $this->apiKey,
                'timestamp' => $nonce,
            ), $query);
            $query = $this->keysort($query);
            $urlencoded = $this->rawencode($query);
            $signature = $this->hash($this->encode($urlencoded . '&secret_key=' . $this->secret), 'sha256');
            $headers = array(
                'Authorization' => strtolower($signature),
                'AccessId' => $this->apiKey,
            );
            if (($method === 'GET') || ($method === 'PUT')) {
                $url .= '?' . $urlencoded;
            } else {
                $headers['Content-Type'] = 'application/x-www-form-urlencoded';
                $body = $urlencoded;
            }
        } elseif ($requestUrl === 'public' || $requestUrl === 'perpetualPublic') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            if ($version === 'v1') {
                $this->check_required_credentials();
                $query = array_merge(array(
                    'access_id' => $this->apiKey,
                    'tonce' => $nonce,
                ), $query);
                $query = $this->keysort($query);
                $urlencoded = $this->rawencode($query);
                $signature = $this->hash($this->encode($urlencoded . '&secret_key=' . $this->secret), 'md5');
                $headers = array(
                    'Authorization' => strtoupper($signature),
                    'Content-Type' => 'application/json',
                );
                if (($method === 'GET') || ($method === 'DELETE') || ($method === 'PUT')) {
                    $url .= '?' . $urlencoded;
                } else {
                    $body = $this->json($query);
                }
            } elseif ($version === 'v2') {
                $this->check_required_credentials();
                $query = $this->keysort($query);
                $urlencoded = $this->rawencode($query);
                $preparedString = $method . '/' . $version . '/' . $path;
                if ($method === 'POST') {
                    $body = $this->json($query);
                    $preparedString .= $body;
                } elseif ($urlencoded) {
                    $preparedString .= '?' . $urlencoded;
                }
                $preparedString .= $nonce . $this->secret;
                $signature = $this->hash($this->encode($preparedString), 'sha256');
                $headers = array(
                    'Content-Type' => 'application/json; charset=utf-8',
                    'Accept' => 'application/json',
                    'X-COINEX-KEY' => $this->apiKey,
                    'X-COINEX-SIGN' => $signature,
                    'X-COINEX-TIMESTAMP' => $nonce,
                );
                if ($method !== 'POST') {
                    if ($urlencoded) {
                        $url .= '?' . $urlencoded;
                    }
                }
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        $code = $this->safe_string($response, 'code');
        $data = $this->safe_value($response, 'data');
        $message = $this->safe_string($response, 'message');
        if (($code !== '0') || (($message !== 'Success') && ($message !== 'Succeeded') && ($message !== 'Ok') && !$data)) {
            $feedback = $this->id . ' ' . $message;
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $code, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }

    public function fetch_margin_adjustment_history(?string $symbol = null, ?string $type = null, ?float $since = null, ?float $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $type, $since, $limit, $params) {
            /**
             * fetches the history of margin added or reduced from contract isolated positions
             * @see https://viabtc.github.io/coinex_api_en_doc/futures/#docsfutures001_http046_position_margin_history
             * @param {string} [$symbol] unified $market $symbol
             * @param {string} [$type] not used by coinex fetchMarginAdjustmentHistory
             * @param {int} [$since] timestamp in ms of the earliest change to fetch
             * @param {int} [$limit] the maximum amount of changes to fetch, default=100, max=100
             * @param {array} $params extra parameters specific to the exchange api endpoint
             * @param {int} [$params->until] timestamp in ms of the latest change to fetch
             *
             * EXCHANGE SPECIFIC PARAMETERS
             * @param {int} [$params->offset] offset
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin structures~
             */
            Async\await($this->load_markets());
            $until = $this->safe_integer($params, 'until');
            $params = $this->omit($params, 'until');
            if ($limit === null) {
                $limit = 100;
            }
            $request = array(
                'market' => '',
                'position_id' => 0,
                'offset' => 0,
                'limit' => $limit,
            );
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['market'] = $market['id'];
            }
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            if ($until !== null) {
                $request['end_time'] = $until;
            }
            $response = Async\await($this->v1PerpetualPrivateGetPositionMarginHistory (array_merge($request, $params)));
            //
            //    {
            //        code => '0',
            //        $data => {
            //            $limit => '100',
            //            offset => '0',
            //            $records => array(
            //                array(
            //                    bkr_price => '0',
            //                    leverage => '3',
            //                    liq_price => '0',
            //                    margin_amount => '5.33236666666666666666',
            //                    margin_change => '3',
            //                    $market => 'XRPUSDT',
            //                    position_amount => '11',
            //                    position_id => '297155652',
            //                    position_type => '2',
            //                    settle_price => '0.6361',
            //                    time => '1711050906.382891',
            //                    $type => '1',
            //                    user_id => '3685860'
            //                }
            //            )
            //        ),
            //        message => 'OK'
            //    }
            //
            $data = $this->safe_dict($response, 'data', array());
            $records = $this->safe_list($data, 'records', array());
            $modifications = $this->parse_margin_modifications($records, null, 'market', 'swap');
            return $this->filter_by_symbol_since_limit($modifications, $symbol, $since, $limit);
        }) ();
    }
}
