<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\alpaca as Exchange;
use ccxt\ExchangeError;
use ccxt\NotSupported;
use React\Async;
use React\Promise\PromiseInterface;

class alpaca extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'alpaca',
            'name' => 'Alpaca',
            'countries' => array( 'US' ),
            // 3 req/s for free
            // 150 req/s for subscribers => https://alpaca.markets/data
            // for brokers => https://alpaca.markets/docs/api-references/broker-api/#authentication-and-rate-limit
            'rateLimit' => 333,
            'hostname' => 'alpaca.markets',
            'pro' => true,
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/187234005-b864db3d-f1e3-447a-aaf9-a9fc7b955d07.jpg',
                'www' => 'https://alpaca.markets',
                'api' => array(
                    'broker' => 'https://broker-api.{hostname}',
                    'trader' => 'https://api.{hostname}',
                    'market' => 'https://data.{hostname}',
                ),
                'test' => array(
                    'broker' => 'https://broker-api.sandbox.{hostname}',
                    'trader' => 'https://paper-api.{hostname}',
                    'market' => 'https://data.sandbox.{hostname}',
                ),
                'doc' => 'https://alpaca.markets/docs/',
                'fees' => 'https://docs.alpaca.markets/docs/crypto-fees',
            ),
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createOrder' => true,
                'fetchBalance' => false,
                'fetchBidsAsks' => false,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => false,
                'fetchDepositsWithdrawals' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRates' => false,
                'fetchL1OrderBook' => true,
                'fetchL2OrderBook' => false,
                'fetchMarkets' => true,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenOrder' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPositions' => false,
                'fetchStatus' => false,
                'fetchTicker' => false,
                'fetchTickers' => false,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'api' => array(
                'broker' => array(
                ),
                'trader' => array(
                    'private' => array(
                        'get' => array(
                            'v2/account',
                            'v2/orders',
                            'v2/orders/{order_id}',
                            'v2/positions',
                            'v2/positions/{symbol_or_asset_id}',
                            'v2/account/portfolio/history',
                            'v2/watchlists',
                            'v2/watchlists/{watchlist_id}',
                            'v2/watchlists:by_name',
                            'v2/account/configurations',
                            'v2/account/activities',
                            'v2/account/activities/{activity_type}',
                            'v2/calendar',
                            'v2/clock',
                            'v2/assets',
                            'v2/assets/{symbol_or_asset_id}',
                            'v2/corporate_actions/announcements/{id}',
                            'v2/corporate_actions/announcements',
                        ),
                        'post' => array(
                            'v2/orders',
                            'v2/watchlists',
                            'v2/watchlists/{watchlist_id}',
                            'v2/watchlists:by_name',
                        ),
                        'put' => array(
                            'v2/watchlists/{watchlist_id}',
                            'v2/watchlists:by_name',
                        ),
                        'patch' => array(
                            'v2/orders/{order_id}',
                            'v2/account/configurations',
                        ),
                        'delete' => array(
                            'v2/orders',
                            'v2/orders/{order_id}',
                            'v2/positions',
                            'v2/positions/{symbol_or_asset_id}',
                            'v2/watchlists/{watchlist_id}',
                            'v2/watchlists:by_name',
                            'v2/watchlists/{watchlist_id}/{symbol}',
                        ),
                    ),
                ),
                'market' => array(
                    'public' => array(
                        'get' => array(
                            'v1beta3/crypto/{loc}/bars',
                            'v1beta3/crypto/{loc}/latest/bars',
                            'v1beta3/crypto/{loc}/latest/orderbooks',
                            'v1beta3/crypto/{loc}/latest/quotes',
                            'v1beta3/crypto/{loc}/latest/trades',
                            'v1beta3/crypto/{loc}/quotes',
                            'v1beta3/crypto/{loc}/snapshots',
                            'v1beta3/crypto/{loc}/trades',
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'v1beta1/corporate-actions',
                            'v1beta1/forex/latest/rates',
                            'v1beta1/forex/rates',
                            'v1beta1/logos/{symbol}',
                            'v1beta1/news',
                            'v1beta1/screener/stocks/most-actives',
                            'v1beta1/screener/{market_type}/movers',
                            'v2/stocks/auctions',
                            'v2/stocks/bars',
                            'v2/stocks/bars/latest',
                            'v2/stocks/meta/conditions/{ticktype}',
                            'v2/stocks/meta/exchanges',
                            'v2/stocks/quotes',
                            'v2/stocks/quotes/latest',
                            'v2/stocks/snapshots',
                            'v2/stocks/trades',
                            'v2/stocks/trades/latest',
                            'v2/stocks/{symbol}/auctions',
                            'v2/stocks/{symbol}/bars',
                            'v2/stocks/{symbol}/bars/latest',
                            'v2/stocks/{symbol}/quotes',
                            'v2/stocks/{symbol}/quotes/latest',
                            'v2/stocks/{symbol}/snapshot',
                            'v2/stocks/{symbol}/trades',
                            'v2/stocks/{symbol}/trades/latest',
                        ),
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => '1min',
                '3m' => '3min',
                '5m' => '5min',
                '15m' => '15min',
                '30m' => '30min',
                '1h' => '1H',
                '2h' => '2H',
                '4h' => '4H',
                '6h' => '6H',
                '8h' => '8H',
                '12h' => '12H',
                '1d' => '1D',
                '3d' => '3D',
                '1w' => '1W',
                '1M' => '1M',
            ),
            'precisionMode' => TICK_SIZE,
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0015'),
                    'taker' => $this->parse_number('0.0025'),
                    'tiers' => array(
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0025') ),
                            array( $this->parse_number('100000'), $this->parse_number('0.0022') ),
                            array( $this->parse_number('500000'), $this->parse_number('0.0020') ),
                            array( $this->parse_number('1000000'), $this->parse_number('0.0018') ),
                            array( $this->parse_number('10000000'), $this->parse_number('0.0015') ),
                            array( $this->parse_number('25000000'), $this->parse_number('0.0013') ),
                            array( $this->parse_number('50000000'), $this->parse_number('0.0012') ),
                            array( $this->parse_number('100000000'), $this->parse_number('0.001') ),
                        ),
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0015') ),
                            array( $this->parse_number('100000'), $this->parse_number('0.0012') ),
                            array( $this->parse_number('500000'), $this->parse_number('0.001') ),
                            array( $this->parse_number('1000000'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('10000000'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('25000000'), $this->parse_number('0.0002') ),
                            array( $this->parse_number('50000000'), $this->parse_number('0.0002') ),
                            array( $this->parse_number('100000000'), $this->parse_number('0.00') ),
                        ),
                    ),
                ),
            ),
            'headers' => array(
                'APCA-PARTNER-ID' => 'ccxt',
            ),
            'options' => array(
                'defaultExchange' => 'CBSE',
                'exchanges' => array(
                    'CBSE', // Coinbase
                    'FTX', // FTXUS
                    'GNSS', // Genesis
                    'ERSX', // ErisX
                ),
                'defaultTimeInForce' => 'gtc', // fok, gtc, ioc
                'clientOrderId' => 'ccxt_{id}',
            ),
            'exceptions' => array(
                'exact' => array(
                    'forbidden.' => '\\ccxt\\PermissionDenied', // array("message" => "forbidden.")
                    '40410000' => '\\ccxt\\InvalidOrder', // array( "code" => 40410000, "message" => "order is not found.")
                    '40010001' => '\\ccxt\\BadRequest', // array("code":40010001,"message":"invalid order type for crypto order")
                    '40110000' => '\\ccxt\\PermissionDenied', // array( "code" => 40110000, "message" => "request is not authorized")
                    '40310000' => '\\ccxt\\InsufficientFunds', // array("available":"0","balance":"0","code":40310000,"message":"insufficient balance for USDT (requested => 221.63, available => 0)","symbol":"USDT")
                    '42910000' => '\\ccxt\\RateLimitExceeded', // array("code":42910000,"message":"rate limit exceeded")
                ),
                'broad' => array(
                    'Invalid format for parameter' => '\\ccxt\\BadRequest', // array("message":"Invalid format for parameter start => error parsing '0' or 2006-01-02 time => parsing time \"0\" as \"2006-01-02\" => cannot parse \"0\" as \"2006\"")
                    'Invalid symbol' => '\\ccxt\\BadSymbol', // array("message":"Invalid symbol(s) => BTC/USDdsda does not match ^[A-Z]+/[A-Z]+$")
                ),
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * fetches the current integer $timestamp in milliseconds from the exchange server
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer $timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->traderPrivateGetV2Clock ($params));
            //
            //     {
            //         $timestamp => '2023-11-22T08:07:57.654738097-05:00',
            //         is_open => false,
            //         next_open => '2023-11-22T09:30:00-05:00',
            //         next_close => '2023-11-22T16:00:00-05:00'
            //     }
            //
            $timestamp = $this->safe_string($response, 'timestamp');
            $localTime = mb_substr($timestamp, 0, 23 - 0);
            $jetlagStrStart = strlen($timestamp) - 6;
            $jetlagStrEnd = strlen($timestamp) - 3;
            $jetlag = mb_substr($timestamp, $jetlagStrStart, $jetlagStrEnd - $jetlagStrStart);
            $iso = $this->parse8601($localTime) - $this->parse_to_numeric($jetlag) * 3600 * 1000;
            return $iso;
        }) ();
    }

    public function fetch_markets($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for alpaca
             * @see https://docs.alpaca.markets/reference/get-v2-$assets
             * @param {array} [$params] extra parameters specific to the exchange api endpoint
             * @return {array[]} an array of objects representing market data
             */
            $request = array(
                'asset_class' => 'crypto',
                'status' => 'active',
            );
            $assets = Async\await($this->traderPrivateGetV2Assets (array_merge($request, $params)));
            //
            //     array(
            //         {
            //             "id" => "c150e086-1e75-44e6-9c2c-093bb1e93139",
            //             "class" => "crypto",
            //             "exchange" => "CRYPTO",
            //             "symbol" => "BTC/USDT",
            //             "name" => "Bitcoin / USD Tether",
            //             "status" => "active",
            //             "tradable" => true,
            //             "marginable" => false,
            //             "maintenance_margin_requirement" => 100,
            //             "shortable" => false,
            //             "easy_to_borrow" => false,
            //             "fractionable" => true,
            //             "attributes" => array(),
            //             "min_order_size" => "0.000026873",
            //             "min_trade_increment" => "0.000000001",
            //             "price_increment" => "1"
            //         }
            //     )
            //
            return $this->parse_markets($assets);
        }) ();
    }

    public function parse_market($asset): array {
        //
        //     {
        //         "id" => "c150e086-1e75-44e6-9c2c-093bb1e93139",
        //         "class" => "crypto",
        //         "exchange" => "CRYPTO",
        //         "symbol" => "BTC/USDT",
        //         "name" => "Bitcoin / USD Tether",
        //         "status" => "active",
        //         "tradable" => true,
        //         "marginable" => false,
        //         "maintenance_margin_requirement" => 100,
        //         "shortable" => false,
        //         "easy_to_borrow" => false,
        //         "fractionable" => true,
        //         "attributes" => array(),
        //         "min_order_size" => "0.000026873",
        //         "min_trade_increment" => "0.000000001",
        //         "price_increment" => "1"
        //     }
        //
        $marketId = $this->safe_string($asset, 'symbol');
        $parts = explode('/', $marketId);
        $assetClass = $this->safe_string($asset, 'class');
        $baseId = $this->safe_string($parts, 0);
        $quoteId = $this->safe_string($parts, 1);
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        // Us equity markets do not include $quote in $symbol->
        // We can safely coerce us_equity $quote to USD
        if ($quote === null && $assetClass === 'us_equity') {
            $quote = 'USD';
        }
        $symbol = $base . '/' . $quote;
        $status = $this->safe_string($asset, 'status');
        $active = ($status === 'active');
        $minAmount = $this->safe_number($asset, 'min_order_size');
        $amount = $this->safe_number($asset, 'min_trade_increment');
        $price = $this->safe_number($asset, 'price_increment');
        return array(
            'id' => $marketId,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => null,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => $active,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $amount,
                'price' => $price,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => $minAmount,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $asset,
        );
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * get the list of most recent $trades for a particular $symbol
             * @see https://docs.alpaca.markets/reference/cryptotrades
             * @see https://docs.alpaca.markets/reference/cryptolatesttrades
             * @param {string} $symbol unified $symbol of the $market to fetch $trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of $trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->loc] crypto location, default => us
             * @param {string} [$params->method] $method, default => marketPublicGetV1beta3CryptoLocTrades
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $marketId = $market['id'];
            $loc = $this->safe_string($params, 'loc', 'us');
            $method = $this->safe_string($params, 'method', 'marketPublicGetV1beta3CryptoLocTrades');
            $request = array(
                'symbols' => $marketId,
                'loc' => $loc,
            );
            $params = $this->omit($params, array( 'loc', 'method' ));
            $response = null;
            if ($method === 'marketPublicGetV1beta3CryptoLocTrades') {
                if ($since !== null) {
                    $request['start'] = $this->iso8601($since);
                }
                if ($limit !== null) {
                    $request['limit'] = $limit;
                }
                $response = Async\await($this->marketPublicGetV1beta3CryptoLocTrades (array_merge($request, $params)));
            } elseif ($method === 'marketPublicGetV1beta3CryptoLocLatestTrades') {
                $response = Async\await($this->marketPublicGetV1beta3CryptoLocLatestTrades (array_merge($request, $params)));
            } else {
                throw new NotSupported($this->id . ' fetchTrades() does not support ' . $method . ', marketPublicGetV1beta3CryptoLocTrades and marketPublicGetV1beta3CryptoLocLatestTrades are supported');
            }
            //
            // {
            //     "next_page_token":null,
            //     "trades":{
            //        "BTC/USD":array(
            //           {
            //              "i":36440704,
            //              "p":22625,
            //              "s":0.0001,
            //              "t":"2022-07-21T11:47:31.073391Z",
            //              "tks":"B"
            //           }
            //        )
            //     }
            // }
            //
            // {
            //     "trades":{
            //        "BTC/USD":{
            //           "i":36440704,
            //           "p":22625,
            //           "s":0.0001,
            //           "t":"2022-07-21T11:47:31.073391Z",
            //           "tks":"B"
            //        }
            //     }
            // }
            //
            $trades = $this->safe_value($response, 'trades', array());
            $symbolTrades = $this->safe_value($trades, $marketId, array());
            if (gettype($symbolTrades) !== 'array' || array_keys($symbolTrades) !== array_keys(array_keys($symbolTrades))) {
                $symbolTrades = array( $symbolTrades );
            }
            return $this->parse_trades($symbolTrades, $market, $since, $limit);
        }) ();
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @see https://docs.alpaca.markets/reference/cryptolatestorderbooks
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->loc] crypto location, default => us
             * @return {array} A dictionary of {@link https://github.com/ccxt/ccxt/wiki/Manual#order-book-structure order book structures} indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $id = $market['id'];
            $loc = $this->safe_string($params, 'loc', 'us');
            $request = array(
                'symbols' => $id,
                'loc' => $loc,
            );
            $response = Async\await($this->marketPublicGetV1beta3CryptoLocLatestOrderbooks (array_merge($request, $params)));
            //
            //   {
            //       "orderbooks":{
            //          "BTC/USD":{
            //             "a":array(
            //                array(
            //                   "p":22208,
            //                   "s":0.0051
            //                ),
            //                array(
            //                   "p":22209,
            //                   "s":0.1123
            //                ),
            //                {
            //                   "p":22210,
            //                   "s":0.2465
            //                }
            //             ),
            //             "b":array(
            //                array(
            //                   "p":22203,
            //                   "s":0.395
            //                ),
            //                array(
            //                   "p":22202,
            //                   "s":0.2465
            //                ),
            //                {
            //                   "p":22201,
            //                   "s":0.6455
            //                }
            //             ),
            //             "t":"2022-07-19T13:41:55.13210112Z"
            //          }
            //       }
            //   }
            //
            $orderbooks = $this->safe_value($response, 'orderbooks', array());
            $rawOrderbook = $this->safe_value($orderbooks, $id, array());
            $timestamp = $this->parse8601($this->safe_string($rawOrderbook, 't'));
            return $this->parse_order_book($rawOrderbook, $market['symbol'], $timestamp, 'b', 'a', 'p', 's');
        }) ();
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://docs.alpaca.markets/reference/cryptobars
             * @see https://docs.alpaca.markets/reference/cryptolatestbars
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the alpha api endpoint
             * @param {string} [$params->loc] crypto location, default => us
             * @param {string} [$params->method] $method, default => marketPublicGetV1beta3CryptoLocBars
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $marketId = $market['id'];
            $loc = $this->safe_string($params, 'loc', 'us');
            $method = $this->safe_string($params, 'method', 'marketPublicGetV1beta3CryptoLocBars');
            $request = array(
                'symbols' => $marketId,
                'loc' => $loc,
            );
            $params = $this->omit($params, array( 'loc', 'method' ));
            $response = null;
            if ($method === 'marketPublicGetV1beta3CryptoLocBars') {
                if ($limit !== null) {
                    $request['limit'] = $limit;
                }
                if ($since !== null) {
                    $request['start'] = $this->yyyymmdd($since);
                }
                $request['timeframe'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
                $response = Async\await($this->marketPublicGetV1beta3CryptoLocBars (array_merge($request, $params)));
            } elseif ($method === 'marketPublicGetV1beta3CryptoLocLatestBars') {
                $response = Async\await($this->marketPublicGetV1beta3CryptoLocLatestBars (array_merge($request, $params)));
            } else {
                throw new NotSupported($this->id . ' fetchOHLCV() does not support ' . $method . ', marketPublicGetV1beta3CryptoLocBars and marketPublicGetV1beta3CryptoLocLatestBars are supported');
            }
            //
            //    {
            //        "bars":{
            //           "BTC/USD":array(
            //              array(
            //                 "c":22887,
            //                 "h":22888,
            //                 "l":22873,
            //                 "n":11,
            //                 "o":22883,
            //                 "t":"2022-07-21T05:00:00Z",
            //                 "v":1.1138,
            //                 "vw":22883.0155324116
            //              ),
            //              array(
            //                 "c":22895,
            //                 "h":22895,
            //                 "l":22884,
            //                 "n":6,
            //                 "o":22884,
            //                 "t":"2022-07-21T05:01:00Z",
            //                 "v":0.001,
            //                 "vw":22889.5
            //              }
            //           )
            //        ),
            //        "next_page_token":"QlRDL1VTRHxNfDIwMjItMDctMjFUMDU6MDE6MDAuMDAwMDAwMDAwWg=="
            //     }
            //
            //    {
            //        "bars":{
            //           "BTC/USD":{
            //              "c":22887,
            //              "h":22888,
            //              "l":22873,
            //              "n":11,
            //              "o":22883,
            //              "t":"2022-07-21T05:00:00Z",
            //              "v":1.1138,
            //              "vw":22883.0155324116
            //           }
            //        }
            //     }
            //
            $bars = $this->safe_value($response, 'bars', array());
            $ohlcvs = $this->safe_value($bars, $marketId, array());
            if (gettype($ohlcvs) !== 'array' || array_keys($ohlcvs) !== array_keys(array_keys($ohlcvs))) {
                $ohlcvs = array( $ohlcvs );
            }
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     {
        //        "c":22895,
        //        "h":22895,
        //        "l":22884,
        //        "n":6,
        //        "o":22884,
        //        "t":"2022-07-21T05:01:00Z",
        //        "v":0.001,
        //        "vw":22889.5
        //     }
        //
        $datetime = $this->safe_string($ohlcv, 't');
        $timestamp = $this->parse8601($datetime);
        return array(
            $timestamp, // $timestamp
            $this->safe_number($ohlcv, 'o'), // open
            $this->safe_number($ohlcv, 'h'), // high
            $this->safe_number($ohlcv, 'l'), // low
            $this->safe_number($ohlcv, 'c'), // close
            $this->safe_number($ohlcv, 'v'), // volume
        );
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * create a trade $order
             * @see https://docs.alpaca.markets/reference/postorder
             * @param {string} $symbol unified $symbol of the $market to create an $order in
             * @param {string} $type 'market', 'limit' or 'stop_limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the $order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {float} [$params->triggerPrice] The $price at which a trigger $order is triggered at
             * @return {array} an ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $id = $market['id'];
            $request = array(
                'symbol' => $id,
                'qty' => $this->amount_to_precision($symbol, $amount),
                'side' => $side,
                'type' => $type, // $market, limit, stop_limit
            );
            $triggerPrice = $this->safe_string_n($params, array( 'triggerPrice', 'stop_price' ));
            if ($triggerPrice !== null) {
                $newType = null;
                if (mb_strpos($type, 'limit') !== false) {
                    $newType = 'stop_limit';
                } else {
                    throw new NotSupported($this->id . ' createOrder() does not support stop orders for ' . $type . ' orders, only stop_limit orders are supported');
                }
                $request['stop_price'] = $this->price_to_precision($symbol, $triggerPrice);
                $request['type'] = $newType;
            }
            if (mb_strpos($type, 'limit') !== false) {
                $request['limit_price'] = $this->price_to_precision($symbol, $price);
            }
            $defaultTIF = $this->safe_string($this->options, 'defaultTimeInForce');
            $request['time_in_force'] = $this->safe_string($params, 'timeInForce', $defaultTIF);
            $params = $this->omit($params, array( 'timeInForce', 'triggerPrice' ));
            $clientOrderIdprefix = $this->safe_string($this->options, 'clientOrderId');
            $uuid = $this->uuid();
            $parts = explode('-', $uuid);
            $random_id = implode('', $parts);
            $defaultClientId = $this->implode_params($clientOrderIdprefix, array( 'id' => $random_id ));
            $clientOrderId = $this->safe_string($params, 'clientOrderId', $defaultClientId);
            $request['client_order_id'] = $clientOrderId;
            $params = $this->omit($params, array( 'clientOrderId' ));
            $order = Async\await($this->traderPrivatePostV2Orders (array_merge($request, $params)));
            //
            //   {
            //      "id" => "61e69015-8549-4bfd-b9c3-01e75843f47d",
            //      "client_order_id" => "eb9e2aaa-f71a-4f51-b5b4-52a6c565dad4",
            //      "created_at" => "2021-03-16T18:38:01.942282Z",
            //      "updated_at" => "2021-03-16T18:38:01.942282Z",
            //      "submitted_at" => "2021-03-16T18:38:01.937734Z",
            //      "filled_at" => null,
            //      "expired_at" => null,
            //      "canceled_at" => null,
            //      "failed_at" => null,
            //      "replaced_at" => null,
            //      "replaced_by" => null,
            //      "replaces" => null,
            //      "asset_id" => "b0b6dd9d-8b9b-48a9-ba46-b9d54906e415",
            //      "symbol" => "AAPL",
            //      "asset_class" => "us_equity",
            //      "notional" => "500",
            //      "qty" => null,
            //      "filled_qty" => "0",
            //      "filled_avg_price" => null,
            //      "order_class" => "",
            //      "order_type" => "market",
            //      "type" => "market",
            //      "side" => "buy",
            //      "time_in_force" => "day",
            //      "limit_price" => null,
            //      "stop_price" => null,
            //      "status" => "accepted",
            //      "extended_hours" => false,
            //      "legs" => null,
            //      "trail_percent" => null,
            //      "trail_price" => null,
            //      "hwm" => null
            //   }
            //
            return $this->parse_order($order, $market);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * cancels an open order
             * @see https://docs.alpaca.markets/reference/deleteorderbyorderid
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            $request = array(
                'order_id' => $id,
            );
            $response = Async\await($this->traderPrivateDeleteV2OrdersOrderId (array_merge($request, $params)));
            //
            //   {
            //       "code" => 40410000,
            //       "message" => "order is not found."
            //   }
            //
            return $this->safe_value($response, 'message', array());
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * cancel all open orders in a market
             * @see https://docs.alpaca.markets/reference/deleteallorders
             * @param {string} $symbol alpaca cancelAllOrders cannot setting $symbol, it will cancel all open orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->traderPrivateDeleteV2Orders ($params));
            if (gettype($response) === 'array' && array_keys($response) === array_keys(array_keys($response))) {
                return $this->parse_orders($response, null);
            } else {
                return $response;
            }
        }) ();
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * fetches information on an $order made by the user
             * @see https://docs.alpaca.markets/reference/getorderbyorderid
             * @param {string} $symbol unified $symbol of the $market the $order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
             */
            Async\await($this->load_markets());
            $request = array(
                'order_id' => $id,
            );
            $order = Async\await($this->traderPrivateGetV2OrdersOrderId (array_merge($request, $params)));
            $marketId = $this->safe_string($order, 'symbol');
            $market = $this->safe_market($marketId);
            return $this->parse_order($order, $market);
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple orders made by the user
             * @see https://docs.alpaca.markets/reference/getallorders
             * @param {string} $symbol unified $market $symbol of the $market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] the latest time in ms to fetch orders for
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array(
                'status' => 'all',
            );
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbols'] = $market['id'];
            }
            $until = $this->safe_integer($params, 'until');
            if ($until !== null) {
                $params = $this->omit($params, 'until');
                $request['endTime'] = $until;
            }
            if ($since !== null) {
                $request['after'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->traderPrivateGetV2Orders (array_merge($request, $params)));
            //
            //     array(
            //         {
            //           "id" => "cbaf12d7-69b8-49c0-a31b-b46af35c755c",
            //           "client_order_id" => "ccxt_b36156ae6fd44d098ac9c179bab33efd",
            //           "created_at" => "2023-11-17T04:21:42.234579Z",
            //           "updated_at" => "2023-11-17T04:22:34.442765Z",
            //           "submitted_at" => "2023-11-17T04:21:42.233357Z",
            //           "filled_at" => null,
            //           "expired_at" => null,
            //           "canceled_at" => "2023-11-17T04:22:34.399019Z",
            //           "failed_at" => null,
            //           "replaced_at" => null,
            //           "replaced_by" => null,
            //           "replaces" => null,
            //           "asset_id" => "77c6f47f-0939-4b23-b41e-47b4469c4bc8",
            //           "symbol" => "LTC/USDT",
            //           "asset_class" => "crypto",
            //           "notional" => null,
            //           "qty" => "0.001",
            //           "filled_qty" => "0",
            //           "filled_avg_price" => null,
            //           "order_class" => "",
            //           "order_type" => "limit",
            //           "type" => "limit",
            //           "side" => "sell",
            //           "time_in_force" => "gtc",
            //           "limit_price" => "1000",
            //           "stop_price" => null,
            //           "status" => "canceled",
            //           "extended_hours" => false,
            //           "legs" => null,
            //           "trail_percent" => null,
            //           "trail_price" => null,
            //           "hwm" => null,
            //           "subtag" => null,
            //           "source" => "access_key"
            //         }
            //     )
            //
            return $this->parse_orders($response, $market, $since, $limit);
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetch all unfilled currently open orders
             * @see https://docs.alpaca.markets/reference/getallorders
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] the latest time in ms to fetch orders for
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $request = array(
                'status' => 'open',
            );
            return Async\await($this->fetch_orders($symbol, $since, $limit, array_merge($request, $params)));
        }) ();
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * fetches information on multiple closed orders made by the user
             * @see https://docs.alpaca.markets/reference/getallorders
             * @param {string} $symbol unified market $symbol of the market orders were made in
             * @param {int} [$since] the earliest time in ms to fetch orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] the latest time in ms to fetch orders for
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            $request = array(
                'status' => 'closed',
            );
            return Async\await($this->fetch_orders($symbol, $since, $limit, array_merge($request, $params)));
        }) ();
    }

    public function parse_order($order, ?array $market = null): array {
        //
        //    {
        //        "id":"6ecfcc34-4bed-4b53-83ba-c564aa832a81",
        //        "client_order_id":"ccxt_1c6ceab0b5e84727b2f1c0394ba17560",
        //        "created_at":"2022-06-14T13:59:30.224037068Z",
        //        "updated_at":"2022-06-14T13:59:30.224037068Z",
        //        "submitted_at":"2022-06-14T13:59:30.221856828Z",
        //        "filled_at":null,
        //        "expired_at":null,
        //        "canceled_at":null,
        //        "failed_at":null,
        //        "replaced_at":null,
        //        "replaced_by":null,
        //        "replaces":null,
        //        "asset_id":"64bbff51-59d6-4b3c-9351-13ad85e3c752",
        //        "symbol":"BTCUSD",
        //        "asset_class":"crypto",
        //        "notional":null,
        //        "qty":"0.01",
        //        "filled_qty":"0",
        //        "filled_avg_price":null,
        //        "order_class":"",
        //        "order_type":"limit",
        //        "type":"limit",
        //        "side":"buy",
        //        "time_in_force":"day",
        //        "limit_price":"14000",
        //        "stop_price":null,
        //        "status":"accepted",
        //        "extended_hours":false,
        //        "legs":null,
        //        "trail_percent":null,
        //        "trail_price":null,
        //        "hwm":null,
        //        "commission":"0.42",
        //        "source":null
        //    }
        //
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $alpacaStatus = $this->safe_string($order, 'status');
        $status = $this->parse_order_status($alpacaStatus);
        $feeValue = $this->safe_string($order, 'commission');
        $fee = null;
        if ($feeValue !== null) {
            $fee = array(
                'cost' => $feeValue,
                'currency' => 'USD',
            );
        }
        $orderType = $this->safe_string($order, 'order_type');
        if ($orderType !== null) {
            if (mb_strpos($orderType, 'limit') !== false) {
                // might be limit or stop-limit
                $orderType = 'limit';
            }
        }
        $datetime = $this->safe_string($order, 'submitted_at');
        $timestamp = $this->parse8601($datetime);
        return $this->safe_order(array(
            'id' => $this->safe_string($order, 'id'),
            'clientOrderId' => $this->safe_string($order, 'client_order_id'),
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'lastTradeTimeStamp' => null,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $orderType,
            'timeInForce' => $this->parse_time_in_force($this->safe_string($order, 'time_in_force')),
            'postOnly' => null,
            'side' => $this->safe_string($order, 'side'),
            'price' => $this->safe_number($order, 'limit_price'),
            'stopPrice' => $this->safe_number($order, 'stop_price'),
            'triggerPrice' => $this->safe_number($order, 'stop_price'),
            'cost' => null,
            'average' => $this->safe_number($order, 'filled_avg_price'),
            'amount' => $this->safe_number($order, 'qty'),
            'filled' => $this->safe_number($order, 'filled_qty'),
            'remaining' => null,
            'trades' => null,
            'fee' => $fee,
            'info' => $order,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'pending_new' => 'open',
            'accepted' => 'open',
            'new' => 'open',
            'partially_filled' => 'open',
            'activated' => 'open',
            'filled' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_time_in_force($timeInForce) {
        $timeInForces = array(
            'day' => 'Day',
        );
        return $this->safe_string($timeInForces, $timeInForce, $timeInForce);
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        //   {
        //       "t":"2022-06-14T05:00:00.027869Z",
        //       "x":"CBSE",
        //       "p":"21942.15",
        //       "s":"0.0001",
        //       "tks":"S",
        //       "i":"355681339"
        //   }
        //
        $marketId = $this->safe_string($trade, 'S');
        $symbol = $this->safe_symbol($marketId, $market);
        $datetime = $this->safe_string($trade, 't');
        $timestamp = $this->parse8601($datetime);
        $alpacaSide = $this->safe_string($trade, 'tks');
        if ($alpacaSide === 'B') {
            $side = 'buy';
        } elseif ($alpacaSide === 'S') {
            $side = 'sell';
        }
        $priceString = $this->safe_string($trade, 'p');
        $amountString = $this->safe_string($trade, 's');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $this->safe_string($trade, 'i'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $symbol,
            'order' => null,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => 'taker',
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => null,
            'fee' => null,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $endpoint = '/' . $this->implode_params($path, $params);
        $url = $this->implode_hostname($this->urls['api'][$api[0]]);
        $headers = ($headers !== null) ? $headers : array();
        if ($api[1] === 'private') {
            $headers['APCA-API-KEY-ID'] = $this->apiKey;
            $headers['APCA-API-SECRET-KEY'] = $this->secret;
        }
        $query = $this->omit($params, $this->extract_params($path));
        if ($query) {
            if (($method === 'GET') || ($method === 'DELETE')) {
                $endpoint .= '?' . $this->urlencode($query);
            } else {
                $body = $this->json($query);
                $headers['Content-Type'] = 'application/json';
            }
        }
        $url = $url . $endpoint;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // default error handler
        }
        // {
        //     "code" => 40110000,
        //     "message" => "request is not authorized"
        // }
        $feedback = $this->id . ' ' . $body;
        $errorCode = $this->safe_string($response, 'code');
        if ($code !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
        }
        $message = $this->safe_value($response, 'message', null);
        if ($message !== null) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
