<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\wazirx as Exchange;
use ccxt\ExchangeError;
use ccxt\ArgumentsRequired;
use ccxt\Precise;
use React\Async;
use React\Promise\PromiseInterface;

class wazirx extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'wazirx',
            'name' => 'WazirX',
            'countries' => array( 'IN' ),
            'version' => 'v2',
            'rateLimit' => 1000,
            'pro' => true,
            'has' => array(
                'CORS' => false,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createOrder' => true,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => true,
                'fetchDepositsWithdrawals' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchIsolatedPositions' => false,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarketLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPosition' => false,
                'fetchPositionHistory' => false,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPositionsForSymbol' => false,
                'fetchPositionsHistory' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfers' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => false,
                'repayCrossMargin' => false,
                'repayIsolatedMargin' => false,
                'setLeverage' => false,
                'setMargin' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/148647666-c109c20b-f8ac-472f-91c3-5f658cb90f49.jpeg',
                'api' => array(
                    'rest' => 'https://api.wazirx.com/sapi/v1',
                ),
                'www' => 'https://wazirx.com',
                'doc' => 'https://docs.wazirx.com/#public-rest-api-for-wazirx',
                'fees' => 'https://wazirx.com/fees',
                'referral' => 'https://wazirx.com/invite/k7rrnks5',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'exchangeInfo' => 1,
                        'depth' => 0.5,
                        'ping' => 1,
                        'systemStatus' => 1,
                        'tickers/24hr' => 1,
                        'ticker/24hr' => 1,
                        'time' => 1,
                        'trades' => 1,
                        'klines' => 1,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account' => 1,
                        'allOrders' => 1,
                        'funds' => 1,
                        'historicalTrades' => 1,
                        'openOrders' => 1,
                        'order' => 0.5,
                        'myTrades' => 0.5,
                        'coins' => 12,
                        'crypto/withdraws' => 12,
                        'crypto/deposits/address' => 60,
                        'sub_account/fund_transfer/history' => 1,
                        'sub_account/accounts' => 1,
                    ),
                    'post' => array(
                        'order' => 0.1,
                        'order/test' => 0.5,
                    ),
                    'delete' => array(
                        'order' => 0.1,
                        'openOrders' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'WRX' => array( 'maker' => $this->parse_number('0.0'), 'taker' => $this->parse_number('0.0') ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    '-1121' => '\\ccxt\\BadSymbol', // array( "code" => -1121, "message" => "Invalid symbol." )
                    '1999' => '\\ccxt\\BadRequest', // array("code":1999,"message":"symbol is missing, symbol does not have a valid value") message varies depending on the error
                    '2002' => '\\ccxt\\InsufficientFunds', // array("code":2002,"message":"Not enough USDT balance to execute this order")
                    '2005' => '\\ccxt\\BadRequest', // array("code":2005,"message":"Signature is incorrect.")
                    '2078' => '\\ccxt\\PermissionDenied', // array("code":2078,"message":"Permission denied.")
                    '2098' => '\\ccxt\\BadRequest', // array("code":2098,"message":"Request out of receiving window.")
                    '2031' => '\\ccxt\\InvalidOrder', // array("code":2031,"message":"Minimum buy amount must be worth 2.0 USDT")
                    '2113' => '\\ccxt\\BadRequest', // array("code":2113,"message":"RecvWindow must be in range 1..60000")
                    '2115' => '\\ccxt\\BadRequest', // array("code":2115,"message":"Signature not found.")
                    '2136' => '\\ccxt\\RateLimitExceeded', // array("code":2136,"message":"Too many api request")
                    '94001' => '\\ccxt\\InvalidOrder', // array("code":94001,"message":"Stop price not found.")
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'options' => array(
                // 'fetchTradesMethod' => 'privateGetHistoricalTrades',
                'recvWindow' => 10000,
                'networks' => array(
                    // You can get network from fetchCurrencies
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * @see https://docs.wazirx.com/#exchange-info
             * retrieves data on all $markets for wazirx
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing market data
             */
            $response = Async\await($this->publicGetExchangeInfo ($params));
            //
            // {
            //     "timezone":"UTC",
            //     "serverTime":1641336850932,
            //     "symbols":array(
            //     {
            //         "symbol":"btcinr",
            //         "status":"trading",
            //         "baseAsset":"btc",
            //         "quoteAsset":"inr",
            //         "baseAssetPrecision":5,
            //         "quoteAssetPrecision":0,
            //         "orderTypes":[
            //             "limit",
            //             "stop_limit"
            //         ),
            //         "isSpotTradingAllowed":true,
            //         "filters":array(
            //             array(
            //                 "filterType":"PRICE_FILTER",
            //                 "minPrice":"1",
            //                 "tickSize":"1"
            //             }
            //         )
            //     ),
            //
            $markets = $this->safe_value($response, 'symbols', array());
            return $this->parse_markets($markets);
        }) ();
    }

    public function parse_market(array $market): array {
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseAsset');
        $quoteId = $this->safe_string($market, 'quoteAsset');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $isSpot = $this->safe_value($market, 'isSpotTradingAllowed');
        $filters = $this->safe_value($market, 'filters');
        $minPrice = null;
        for ($j = 0; $j < count($filters); $j++) {
            $filter = $filters[$j];
            $filterType = $this->safe_string($filter, 'filterType');
            if ($filterType === 'PRICE_FILTER') {
                $minPrice = $this->safe_number($filter, 'minPrice');
            }
        }
        $fee = $this->safe_value($this->fees, $quote, array());
        $takerString = $this->safe_string($fee, 'taker', '0.2');
        $takerString = Precise::string_div($takerString, '100');
        $makerString = $this->safe_string($fee, 'maker', '0.2');
        $makerString = Precise::string_div($makerString, '100');
        $status = $this->safe_string($market, 'status');
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => $isSpot,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => ($status === 'trading'),
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'taker' => $this->parse_number($takerString),
            'maker' => $this->parse_number($makerString),
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'baseAssetPrecision'))),
                'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quoteAssetPrecision'))),
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => $minPrice,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * @see https://docs.wazirx.com/#kline-candlestick-data
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents. Available values [1m,5m,15m,30m,1h,2h,4h,6h,12h,1d,1w]
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] timestamp in s of the latest candle to fetch
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'interval' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($limit !== null) {
                $request['limit'] = min ($limit, 2000);
            }
            $until = $this->safe_integer($params, 'until');
            $params = $this->omit($params, array( 'until' ));
            if ($since !== null) {
                $request['startTime'] = $this->parse_to_int($since / 1000);
            }
            if ($until !== null) {
                $request['endTime'] = $until;
            }
            $response = Async\await($this->publicGetKlines ($this->extend($request, $params)));
            //
            //    [
            //        [1669014360,1402001,1402001,1402001,1402001,0],
            //        ...
            //    ]
            //
            return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //    [1669014300,1402001,1402001,1402001,1402001,0],
        //
        return array(
            $this->safe_timestamp($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $limit, $params) {
            /**
             * @see https://docs.wazirx.com/#order-book
             * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
             * @param {string} $symbol unified $symbol of the $market to fetch the order book for
             * @param {int} [$limit] the maximum amount of order book entries to return
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = $limit; // [1, 5, 10, 20, 50, 100, 500, 1000]
            }
            $response = Async\await($this->publicGetDepth ($this->extend($request, $params)));
            //
            //     {
            //          "timestamp":1559561187,
            //          "asks":[
            //                     ["8540.0","1.5"],
            //                     ["8541.0","0.0042"]
            //                 ],
            //          "bids":[
            //                     ["8530.0","0.8814"],
            //                     ["8524.0","1.4"]
            //                 ]
            //      }
            //
            $timestamp = $this->safe_integer($response, 'timestamp');
            return $this->parse_order_book($response, $symbol, $timestamp);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * @see https://docs.wazirx.com/#24hr-$ticker-price-change-statistics
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $ticker = Async\await($this->publicGetTicker24hr ($this->extend($request, $params)));
            //
            // {
            //     "symbol":"wrxinr",
            //     "baseAsset":"wrx",
            //     "quoteAsset":"inr",
            //     "openPrice":"94.77",
            //     "lowPrice":"92.7",
            //     "highPrice":"95.17",
            //     "lastPrice":"94.03",
            //     "volume":"1118700.0",
            //     "bidPrice":"94.02",
            //     "askPrice":"94.03",
            //     "at":1641382455000
            // }
            //
            return $this->parse_ticker($ticker, $market);
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * @see https://docs.wazirx.com/#24hr-$tickers-price-change-statistics
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            $tickers = Async\await($this->publicGetTickers24hr ());
            //
            // array(
            //     {
            //        "symbol":"btcinr",
            //        "baseAsset":"btc",
            //        "quoteAsset":"inr",
            //        "openPrice":"3698486",
            //        "lowPrice":"3641155.0",
            //        "highPrice":"3767999.0",
            //        "lastPrice":"3713212.0",
            //        "volume":"254.11582",
            //        "bidPrice":"3715021.0",
            //        "askPrice":"3715022.0",
            //     }
            //     ...
            // )
            //
            $result = array();
            for ($i = 0; $i < count($tickers); $i++) {
                $ticker = $tickers[$i];
                $parsedTicker = $this->parse_ticker($ticker);
                $symbol = $parsedTicker['symbol'];
                $result[$symbol] = $parsedTicker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.wazirx.com/#recent-trades-list
             * get the list of most recent trades for a particular $symbol
             * @param {string} $symbol unified $symbol of the $market to fetch trades for
             * @param {int} [$since] timestamp in ms of the earliest trade to fetch
             * @param {int} [$limit] the maximum amount of trades to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($limit !== null) {
                $request['limit'] = min ($limit, 1000); // Default 500; max 1000.
            }
            $method = $this->safe_string($this->options, 'fetchTradesMethod', 'publicGetTrades');
            $response = null;
            if ($method === 'privateGetHistoricalTrades') {
                $response = Async\await($this->privateGetHistoricalTrades ($this->extend($request, $params)));
            } else {
                $response = Async\await($this->publicGetTrades ($this->extend($request, $params)));
            }
            // array(
            //     array(
            //         "id":322307791,
            //         "price":"93.7",
            //         "qty":"0.7",
            //         "quoteQty":"65.59",
            //         "time":1641386701000,
            //         "isBuyerMaker":false
            //     ),
            // )
            return $this->parse_trades($response, $market, $since, $limit);
        }) ();
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        //
        //     {
        //         "id":322307791,
        //         "price":"93.7",
        //         "qty":"0.7",
        //         "quoteQty":"65.59",
        //         "time":1641386701000,
        //         "isBuyerMaker":false
        //     }
        //
        $id = $this->safe_string($trade, 'id');
        $timestamp = $this->safe_integer($trade, 'time');
        $datetime = $this->iso8601($timestamp);
        $market = $this->safe_market(null, $market);
        $isBuyerMaker = $this->safe_value($trade, 'isBuyerMaker');
        $side = $isBuyerMaker ? 'sell' : 'buy';
        $price = $this->safe_number($trade, 'price');
        $amount = $this->safe_number($trade, 'qty');
        $cost = $this->safe_number($trade, 'quoteQty');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'symbol' => $market['symbol'],
            'order' => $id,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => null,
        ), $market);
    }

    public function fetch_status($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * @see https://docs.wazirx.com/#system-$status
             * the latest known information on the availability of the exchange API
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=exchange-$status-structure $status structure~
             */
            $response = Async\await($this->publicGetSystemStatus ($params));
            //
            //     {
            //         "status":"normal", // normal, system maintenance
            //         "message":"System is running normally."
            //     }
            //
            $status = $this->safe_string($response, 'status');
            return array(
                'status' => ($status === 'normal') ? 'ok' : 'maintenance',
                'updated' => null,
                'eta' => null,
                'url' => null,
                'info' => $response,
            );
        }) ();
    }

    public function fetch_time($params = array ()) {
        return Async\async(function () use ($params) {
            /**
             * @see https://docs.wazirx.com/#check-server-time
             * fetches the current integer timestamp in milliseconds from the exchange server
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int} the current integer timestamp in milliseconds from the exchange server
             */
            $response = Async\await($this->publicGetTime ($params));
            //
            //     {
            //         "serverTime":1635467280514
            //     }
            //
            return $this->safe_integer($response, 'serverTime');
        }) ();
    }

    public function parse_ticker(array $ticker, ?array $market = null): array {
        //
        //     {
        //        "symbol":"btcinr",
        //        "baseAsset":"btc",
        //        "quoteAsset":"inr",
        //        "openPrice":"3698486",
        //        "lowPrice":"3641155.0",
        //        "highPrice":"3767999.0",
        //        "lastPrice":"3713212.0",
        //        "volume":"254.11582", // base volume
        //        "bidPrice":"3715021.0",
        //        "askPrice":"3715022.0",
        //        "at":1641382455000 // only on fetchTicker
        //     }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $last = $this->safe_string($ticker, 'lastPrice');
        $open = $this->safe_string($ticker, 'openPrice');
        $high = $this->safe_string($ticker, 'highPrice');
        $low = $this->safe_string($ticker, 'lowPrice');
        $baseVolume = $this->safe_string($ticker, 'volume');
        $bid = $this->safe_string($ticker, 'bidPrice');
        $ask = $this->safe_string($ticker, 'askPrice');
        $timestamp = $this->safe_integer($ticker, 'at');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function parse_balance($response): array {
        $result = array( 'info' => $response );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $id = $this->safe_string($balance, 'asset');
            $code = $this->safe_currency_code($id);
            $account = $this->account();
            $account['free'] = $this->safe_string($balance, 'free');
            $account['used'] = $this->safe_string($balance, 'locked');
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * @see https://docs.wazirx.com/#fund-details-user_data
             * query for balance and get the amount of funds available for trading or funds locked in orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
             */
            Async\await($this->load_markets());
            $response = Async\await($this->privateGetFunds ($params));
            //
            // array(
            //       array(
            //          "asset":"inr",
            //          "free":"0.0",
            //          "locked":"0.0"
            //       ),
            // )
            //
            return $this->parse_balance($response);
        }) ();
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.wazirx.com/#all-$orders-user_data
             * fetches information on multiple $orders made by the user
             * @param {string} $symbol unified $market $symbol of the $market $orders were made in
             * @param {int} [$since] the earliest time in ms to fetch $orders for
             * @param {int} [$limit] the maximum number of order structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->privateGetAllOrders ($this->extend($request, $params)));
            //
            //   array(
            //       array(
            //           "id" => 28,
            //           "symbol" => "wrxinr",
            //           "price" => "9293.0",
            //           "origQty" => "10.0",
            //           "executedQty" => "8.2",
            //           "status" => "cancel",
            //           "type" => "limit",
            //           "side" => "sell",
            //           "createdTime" => 1499827319559,
            //           "updatedTime" => 1499827319559
            //       ),
            //       {
            //           "id" => 30,
            //           "symbol" => "wrxinr",
            //           "price" => "9293.0",
            //           "stopPrice" => "9200.0",
            //           "origQty" => "10.0",
            //           "executedQty" => "0.0",
            //           "status" => "cancel",
            //           "type" => "stop_limit",
            //           "side" => "sell",
            //           "createdTime" => 1499827319559,
            //           "updatedTime" => 1507725176595
            //       }
            //   )
            //
            $orders = $this->parse_orders($response, $market, $since, $limit);
            $orders = $this->filter_by($orders, 'symbol', $symbol);
            return $orders;
        }) ();
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $since, $limit, $params) {
            /**
             * @see https://docs.wazirx.com/#current-open-$orders-user_data
             * fetch all unfilled currently open $orders
             * @param {string} $symbol unified $market $symbol
             * @param {int} [$since] the earliest time in ms to fetch open $orders for
             * @param {int} [$limit] the maximum number of  open $orders structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $market = null;
            if ($symbol !== null) {
                $market = $this->market($symbol);
                $request['symbol'] = $market['id'];
            }
            $response = Async\await($this->privateGetOpenOrders ($this->extend($request, $params)));
            // array(
            //     array(
            //         "id" => 28,
            //         "symbol" => "wrxinr",
            //         "price" => "9293.0",
            //         "origQty" => "10.0",
            //         "executedQty" => "8.2",
            //         "status" => "cancel",
            //         "type" => "limit",
            //         "side" => "sell",
            //         "createdTime" => 1499827319559,
            //         "updatedTime" => 1499827319559
            //     ),
            //     {
            //         "id" => 30,
            //         "symbol" => "wrxinr",
            //         "price" => "9293.0",
            //         "stopPrice" => "9200.0",
            //         "origQty" => "10.0",
            //         "executedQty" => "0.0",
            //         "status" => "cancel",
            //         "type" => "stop_limit",
            //         "side" => "sell",
            //         "createdTime" => 1499827319559,
            //         "updatedTime" => 1507725176595
            //     }
            // )
            $orders = $this->parse_orders($response, $market, $since, $limit);
            return $orders;
        }) ();
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($symbol, $params) {
            /**
             * @see https://docs.wazirx.com/#cancel-all-open-orders-on-a-$symbol-trade
             * cancel all open orders in a $market
             * @param {string} $symbol unified $market $symbol of the $market to cancel orders in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->privateDeleteOpenOrders ($this->extend($request, $params)));
            //
            //    array(
            //        {
            //            id => "4565421197",
            //            $symbol => "adausdt",
            //            type => "limit",
            //            side => "buy",
            //            status => "wait",
            //            price => "0.41",
            //            origQty => "11.00",
            //            executedQty => "0.00",
            //            avgPrice => "0.00",
            //            createdTime => "1718089507000",
            //            updatedTime => "1718089507000",
            //            clientOrderId => "93d2a838-e272-405d-91e7-3a7bc6d3a003"
            //        }
            //    )
            //
            return $this->parse_orders($response);
        }) ();
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        return Async\async(function () use ($id, $symbol, $params) {
            /**
             * @see https://docs.wazirx.com/#cancel-order-trade
             * cancels an open order
             * @param {string} $id order $id
             * @param {string} $symbol unified $symbol of the $market the order was made in
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
             */
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'orderId' => $id,
            );
            $response = Async\await($this->privateDeleteOrder ($this->extend($request, $params)));
            return $this->parse_order($response);
        }) ();
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()) {
        return Async\async(function () use ($symbol, $type, $side, $amount, $price, $params) {
            /**
             * @see https://docs.wazirx.com/#new-order-trade
             * create a trade order
             * @param {string} $symbol unified $symbol of the $market to create an order in
             * @param {string} $type 'market' or 'limit'
             * @param {string} $side 'buy' or 'sell'
             * @param {float} $amount how much of currency you want to trade in units of base currency
             * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
             */
            $type = strtolower($type);
            if (($type !== 'limit') && ($type !== 'stop_limit')) {
                throw new ExchangeError($this->id . ' createOrder() supports limit and stop_limit orders only');
            }
            if ($price === null) {
                throw new ExchangeError($this->id . ' createOrder() requires a $price argument');
            }
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
                'side' => $side,
                'quantity' => $amount,
                'type' => 'limit',
            );
            $request['price'] = $this->price_to_precision($symbol, $price);
            $stopPrice = $this->safe_string($params, 'stopPrice');
            if ($stopPrice !== null) {
                $request['type'] = 'stop_limit';
                $request['stopPrice'] = $this->price_to_precision($symbol, $stopPrice);
            }
            $response = Async\await($this->privatePostOrder ($this->extend($request, $params)));
            // {
            //     "id" => 28,
            //     "symbol" => "wrxinr",
            //     "price" => "9293.0",
            //     "origQty" => "10.0",
            //     "executedQty" => "8.2",
            //     "status" => "wait",
            //     "type" => "limit",
            //     "side" => "sell",
            //     "createdTime" => 1499827319559,
            //     "updatedTime" => 1499827319559
            // }
            return $this->parse_order($response, $market);
        }) ();
    }

    public function parse_order(array $order, ?array $market = null): array {
        //
        //    {
        //        "id" => 1949417813,
        //        "symbol" => "ltcusdt",
        //        "type" => "limit",
        //        "side" => "sell",
        //        "status" => "done",
        //        "price" => "146.2",
        //        "origQty" => "0.05",
        //        "executedQty" => "0.05",
        //        "avgPrice" =>  "0.00",
        //        "createdTime" => 1641252564000,
        //        "updatedTime" => 1641252564000
        //        "clientOrderId" => "93d2a838-e272-405d-91e7-3a7bc6d3a003"
        //    }
        //
        $created = $this->safe_integer($order, 'createdTime');
        $updated = $this->safe_integer($order, 'updatedTime');
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $amount = $this->safe_string($order, 'quantity');
        $filled = $this->safe_string($order, 'executedQty');
        $status = $this->parse_order_status($this->safe_string($order, 'status'));
        $id = $this->safe_string($order, 'id');
        $price = $this->safe_string($order, 'price');
        $type = $this->safe_string_lower($order, 'type');
        $side = $this->safe_string_lower($order, 'side');
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $this->safe_string($order, 'clientOrderId'),
            'timestamp' => $created,
            'datetime' => $this->iso8601($created),
            'lastTradeTimestamp' => $updated,
            'status' => $status,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'filled' => $filled,
            'remaining' => null,
            'cost' => null,
            'fee' => null,
            'average' => $this->safe_string($order, 'avgPrice'),
            'trades' => array(),
        ), $market);
    }

    public function parse_order_status(?string $status) {
        $statuses = array(
            'wait' => 'open',
            'done' => 'closed',
            'cancel' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_currencies($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * fetches all available currencies on an exchange
             * @see https://docs.wazirx.com/#all-coins-39-information-user_data
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} an associative dictionary of currencies
             */
            if (!$this->check_required_credentials(false)) {
                return null;
            }
            $response = Async\await($this->privateGetCoins ($params));
            //
            //     [
            //         {
            //             "currency" => "btc",
            //             "name" => "Bitcoin",
            //             "networkList" => [
            //                 {
            //                     "addressRegex" => "^[13][a-km-zA-HJ-NP-Z1-9]array(25,34)$|^(bc1)[0-9A-Za-z]array(39,59)$",
            //                     "confirmations" => 4,
            //                     "depositDesc" => array(
            //                         "description" => ""
            //                     ),
            //                     "depositDust" => "0.00000001",
            //                     "depositEnable" => true,
            //                     "disclaimer" => "• \u003cb\u003eSend only using the Bitcoin network.\u003c/b\u003e Using any other network will $result in loss of funds.\u003cbr/\u003e• \u003cb\u003eDeposit only BTC to this $deposit address.\u003c/b\u003e Depositing any other asset will $result in a loss of funds.\u003cbr/\u003e",
            //                     "fullName" => null,
            //                     "hidden" => array(
            //                         "deposit" => false,
            //                         "withdraw" => false
            //                     ),
            //                     "isDefault" => true,
            //                     "maxWithdrawAmount" => "3",
            //                     "minConfirm" => 4,
            //                     "minWithdrawAmount" => "0.003",
            //                     "name" => "Bitcoin",
            //                     "network" => "btc",
            //                     "order" => 3,
            //                     "precision" => 8,
            //                     "requestId" => "6d67a13d-26f7-4941-9856-94eba4adfe78",
            //                     "shortName" => "BTC",
            //                     "specialTip" => "Please ensure to select \u003cb\u003eBitcoin\u003c/b\u003e network at sender's wallet.",
            //                     "withdrawConsent" => array(
            //                         "helpUrl" => null,
            //                         "message" => "I confirm that this withdrawal of crypto assets is being done to my own wallet, above. I authorize you to share travel rule information with the destination wallet service provider wherever applicable."
            //                     ),
            //                     "withdrawDesc" => array(
            //                         "description" => ""
            //                     ),
            //                     "withdrawEnable" => true,
            //                     "withdrawFee" => "0.0015"
            //                 }
            //             ],
            //             "rapidListed" => false
            //         }
            //     ]
            //
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $currency = $response[$i];
                $currencyId = $this->safe_string($currency, 'currency');
                $code = $this->safe_currency_code($currencyId);
                $name = $this->safe_string($currency, 'name');
                $chains = $this->safe_list($currency, 'networkList', array());
                $networks = array();
                $minPrecision = null;
                $minWithdrawFeeString = null;
                $minWithdrawString = null;
                $maxWithdrawString = null;
                $minDepositString = null;
                $deposit = false;
                $withdraw = false;
                for ($j = 0; $j < count($chains); $j++) {
                    $chain = $chains[$j];
                    $networkId = $this->safe_string($chain, 'network');
                    $networkCode = $this->network_id_to_code($networkId);
                    $precision = $this->parse_number($this->parse_precision($this->safe_string($chain, 'precision')));
                    $minPrecision = ($minPrecision === null) ? $precision : min ($minPrecision, $precision);
                    $depositAllowed = $this->safe_bool($chain, 'depositEnable');
                    $deposit = ($depositAllowed) ? $depositAllowed : $deposit;
                    $withdrawAllowed = $this->safe_bool($chain, 'withdrawEnable');
                    $withdraw = ($withdrawAllowed) ? $withdrawAllowed : $withdraw;
                    $withdrawFeeString = $this->safe_string($chain, 'withdrawFee');
                    if ($withdrawFeeString !== null) {
                        $minWithdrawFeeString = ($minWithdrawFeeString === null) ? $withdrawFeeString : Precise::string_min($withdrawFeeString, $minWithdrawFeeString);
                    }
                    $minNetworkWithdrawString = $this->safe_string($chain, 'minWithdrawAmount');
                    if ($minNetworkWithdrawString !== null) {
                        $minWithdrawString = ($minWithdrawString === null) ? $minNetworkWithdrawString : Precise::string_min($minNetworkWithdrawString, $minWithdrawString);
                    }
                    $maxNetworkWithdrawString = $this->safe_string($chain, 'maxWithdrawAmount');
                    if ($maxNetworkWithdrawString !== null) {
                        $maxWithdrawString = ($maxWithdrawString === null) ? $maxNetworkWithdrawString : Precise::string_min($maxNetworkWithdrawString, $maxWithdrawString);
                    }
                    $minNetworkDepositString = $this->safe_string($chain, 'depositDust');
                    if ($minNetworkDepositString !== null) {
                        $minDepositString = ($minDepositString === null) ? $minNetworkDepositString : Precise::string_min($minNetworkDepositString, $minDepositString);
                    }
                    $networks[$networkCode] = array(
                        'info' => $chain,
                        'id' => $networkId,
                        'network' => $networkCode,
                        'active' => $depositAllowed && $withdrawAllowed,
                        'deposit' => $depositAllowed,
                        'withdraw' => $withdrawAllowed,
                        'fee' => $this->parse_number($withdrawFeeString),
                        'precision' => $precision,
                        'limits' => array(
                            'withdraw' => array(
                                'min' => $this->parse_number($minNetworkWithdrawString),
                                'max' => $this->parse_number($maxNetworkWithdrawString),
                            ),
                            'deposit' => array(
                                'min' => $this->parse_number($minNetworkDepositString),
                                'max' => null,
                            ),
                        ),
                    );
                }
                $result[$code] = array(
                    'info' => $currency,
                    'code' => $code,
                    'id' => $currencyId,
                    'name' => $name,
                    'active' => $deposit && $withdraw,
                    'deposit' => $deposit,
                    'withdraw' => $withdraw,
                    'fee' => $this->parse_number($minWithdrawFeeString),
                    'precision' => $minPrecision,
                    'limits' => array(
                        'amount' => array(
                            'min' => null,
                            'max' => null,
                        ),
                        'withdraw' => array(
                            'min' => $this->parse_number($minWithdrawString),
                            'max' => $this->parse_number($maxWithdrawString),
                        ),
                        'deposit' => array(
                            'min' => $this->parse_number($minDepositString),
                            'max' => null,
                        ),
                    ),
                    'networks' => $networks,
                );
            }
            return $result;
        }) ();
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        return Async\async(function () use ($code, $params) {
            /**
             * fetch the deposit address for a $currency associated with this account
             * @see https://docs.wazirx.com/#deposit-address-supporting-network-user_data
             * @param {string} $code unified $currency $code of the $currency for the deposit address
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {string} [$params->network] unified network $code, you can get network from fetchCurrencies
             * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
             */
            Async\await($this->load_markets());
            $currency = $this->currency($code);
            $networkCode = $this->safe_string($params, 'network');
            $params = $this->omit($params, 'network');
            if ($networkCode === null) {
                throw new ArgumentsRequired($this->id . ' fetchDepositAddress() requires a network parameter');
            }
            $request = array(
                'coin' => $currency['id'],
                'network' => $this->network_code_to_id($networkCode, $code),
            );
            $response = Async\await($this->privateGetCryptoDepositsAddress ($this->extend($request, $params)));
            //
            //     {
            //         "address" => "bc1qrzpyzh69pfclpqy7c3yg8rkjsy49se7642v4q3",
            //         "coin" => "btc",
            //         "url" => "https => //live.blockcypher.com/btc/address/bc1qrzpyzh69pfclpqy7c3yg8rkjsy49se7642v4q3"
            //     }
            //
            return array(
                'currency' => $code,
                'address' => $this->safe_string($response, 'address'),
                'tag' => null,
                'network' => $this->network_code_to_id($networkCode, $code),
                'info' => $response,
            );
        }) ();
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($code, $since, $limit, $params) {
            /**
             * fetch all withdrawals made from an account
             * @see https://docs.wazirx.com/#withdraw-history-supporting-network-user_data
             * @param {string} $code unified $currency $code
             * @param {int} [$since] the earliest time in ms to fetch withdrawals for
             * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @param {int} [$params->until] the latest time in ms to fetch entries for
             * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
             */
            Async\await($this->load_markets());
            $request = array();
            $currency = null;
            if ($code !== null) {
                $currency = $this->currency($code);
                $request['coin'] = $currency['id'];
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $until = $this->safe_integer($params, 'until');
            $params = $this->omit($params, array( 'until' ));
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($until !== null) {
                $request['endTime'] = $until;
            }
            $response = Async\await($this->privateGetCryptoWithdraws ($this->extend($request, $params)));
            //
            //     array(
            //         {
            //             "address" => "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
            //             "amount" => "8.91000000",
            //             "createdAt" => "2019-10-12 09:12:02",
            //             "lastUpdated" => "2019-10-12 11:12:02",
            //             "coin" => "USDT",
            //             "id" => "b6ae22b3aa844210a7041aee7589627c",
            //             "withdrawOrderId" => "WITHDRAWtest123",
            //             "network" => "ETH",
            //             "status" => 1,
            //             "transactionFee" => "0.004",
            //             "failureInfo":"The address is not valid. Please confirm with the recipient",
            //             "txId" => "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
            //         }
            //     )
            //
            return $this->parse_transactions($response, $currency, $since, $limit);
        }) ();
    }

    public function parse_transaction_status(?string $status) {
        $statuses = array(
            '0' => 'ok',
            '1' => 'fail',
            '2' => 'pending',
            '3' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction(array $transaction, ?array $currency = null): array {
        //
        //     {
        //         "address" => "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
        //         "amount" => "8.91000000",
        //         "createdAt" => "2019-10-12 09:12:02",
        //         "lastUpdated" => "2019-10-12 11:12:02",
        //         "coin" => "USDT",
        //         "id" => "b6ae22b3aa844210a7041aee7589627c",
        //         "withdrawOrderId" => "WITHDRAWtest123",
        //         "network" => "ETH",
        //         "status" => 1,
        //         "transactionFee" => "0.004",
        //         "failureInfo" => "The address is not valid. Please confirm with the recipient",
        //         "txId" => "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
        //     }
        //
        $currencyId = $this->safe_string($transaction, 'coin');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->parse8601($this->safe_string($transaction, 'createdAt'));
        $updated = $this->parse8601($this->safe_string($transaction, 'lastUpdated'));
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $feeCost = $this->safe_number($transaction, 'transactionFee');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array(
                'cost' => $feeCost,
                'currency' => $code,
            );
        }
        return array(
            'info' => $transaction,
            'id' => $this->safe_string($transaction, 'id'),
            'txid' => $this->safe_string($transaction, 'txId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => $this->network_id_to_code($this->safe_string($transaction, 'network')),
            'address' => $this->safe_string($transaction, 'address'),
            'addressTo' => $this->safe_string($transaction, 'address'),
            'addressFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'tagFrom' => null,
            'type' => 'withdrawal',
            'amount' => $this->safe_number($transaction, 'amount'),
            'currency' => $code,
            'status' => $status,
            'updated' => $updated,
            'fee' => $fee,
            'internal' => null,
            'comment' => null,
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['rest'] . '/' . $path;
        if ($api === 'public') {
            if ($params) {
                $url .= '?' . $this->urlencode($params);
            }
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = $this->milliseconds();
            $data = $this->extend(array( 'recvWindow' => $this->options['recvWindow'], 'timestamp' => $timestamp ), $params);
            $data = $this->keysort($data);
            $signature = $this->hmac($this->encode($this->urlencode($data)), $this->encode($this->secret), 'sha256');
            $url .= '?' . $this->urlencode($data);
            $url .= '&' . 'signature=' . $signature;
            $headers = array(
                'Content-Type' => 'application/x-www-form-urlencoded',
                'X-Api-Key' => $this->apiKey,
            );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors(int $code, string $reason, string $url, string $method, array $headers, string $body, $response, $requestHeaders, $requestBody) {
        //
        // array("code":2098,"message":"Request out of receiving window.")
        //
        if ($response === null) {
            return null;
        }
        $errorCode = $this->safe_string($response, 'code');
        if ($errorCode !== null) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            throw new ExchangeError($feedback);
        }
        return null;
    }
}
