<?php
namespace ccxt\pro;
include_once (__DIR__.'/../../../../ccxt.php');
// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------


function equals($a, $b) {
   return json_encode($a) === json_encode($b);
}




// ----------------------------------------------------------------------------
$cache = new ArrayCache(3);


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 1,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 2,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 3,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 4,
));


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'data' => 2,
), array(
    'symbol' => 'BTC/USDT',
    'data' => 3,
), array(
    'symbol' => 'BTC/USDT',
    'data' => 4,
)]));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 5,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 6,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 7,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 8,
));


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'data' => 6,
), array(
    'symbol' => 'BTC/USDT',
    'data' => 7,
), array(
    'symbol' => 'BTC/USDT',
    'data' => 8,
)]));


$cache->clear();


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 1,
));


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'data' => 1,
)]));


// ----------------------------------------------------------------------------
$cache = new ArrayCache(1);


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 1,
));


$cache->append(array(
    'symbol' => 'BTC/USDT',
    'data' => 2,
));


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'data' => 2,
)]));


// ----------------------------------------------------------------------------
$cache = new ArrayCacheByTimestamp();


$ohlcv1 = [100, 1, 2, 3];


$ohlcv2 = [200, 5, 6, 7];


$cache->append($ohlcv1);


$cache->append($ohlcv2);


assert(equals($cache, [$ohlcv1, $ohlcv2]));


$modify2 = [200, 10, 11, 12];


$cache->append($modify2);


assert(equals($cache, [$ohlcv1, $modify2]));


// ----------------------------------------------------------------------------
$cache = new ArrayCacheBySymbolById();


$object1 = array(
    'symbol' => 'BTC/USDT',
    'id' => 'abcdef',
    'i' => 1,
);


$object2 = array(
    'symbol' => 'ETH/USDT',
    'id' => 'qwerty',
    'i' => 2,
);


$object3 = array(
    'symbol' => 'BTC/USDT',
    'id' => 'abcdef',
    'i' => 3,
);


$cache->append($object1);


$cache->append($object2);


$cache->append($object3); // should update index 0


assert(equals($cache, [$object2, $object3]));


$cache = new ArrayCacheBySymbolById(5);


for ($i = 1; $i < 11; $i++) {
    $cache->append(array(
        'symbol' => 'BTC/USDT',
        'id' => ((string) $i),
        'i' => $i,
    ));
}


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '6',
    'i' => 6,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 7,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 8,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '9',
    'i' => 9,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '10',
    'i' => 10,
)]));


for ($i = 1; $i < 11; $i++) {
    $cache->append(array(
        'symbol' => 'BTC/USDT',
        'id' => ((string) $i),
        'i' => $i + 10,
    ));
}


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '6',
    'i' => 16,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 17,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 18,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '9',
    'i' => 19,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '10',
    'i' => 20,
)]));


$middle = array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 28,
);


$cache->append($middle);


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '6',
    'i' => 16,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 17,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '9',
    'i' => 19,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '10',
    'i' => 20,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 28,
)]));


$other_middle = array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 27,
);


$cache->append($other_middle);


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '6',
    'i' => 16,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '9',
    'i' => 19,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '10',
    'i' => 20,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 28,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 27,
)]));


for ($i = 30; $i < 33; $i++) {
    $cache->append(array(
        'symbol' => 'BTC/USDT',
        'id' => ((string) $i),
        'i' => $i + 10,
    ));
}


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 28,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 27,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '30',
    'i' => 40,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '31',
    'i' => 41,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '32',
    'i' => 42,
)]));


$first = array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 38,
);


$cache->append($first);


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 27,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '30',
    'i' => 40,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '31',
    'i' => 41,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '32',
    'i' => 42,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 38,
)]));


$another = array(
    'symbol' => 'BTC/USDT',
    'id' => '30',
    'i' => 50,
);


$cache->append($another);


assert(equals($cache, [array(
    'symbol' => 'BTC/USDT',
    'id' => '7',
    'i' => 27,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '31',
    'i' => 41,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '32',
    'i' => 42,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '8',
    'i' => 38,
), array(
    'symbol' => 'BTC/USDT',
    'id' => '30',
    'i' => 50,
)]));


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolById limit with symbol set
$symbol = 'BTC/USDT';


$cache = new ArrayCacheBySymbolById();


$initial_length = 5;


for ($i = 0; $i < $initial_length; $i++) {
    $cache->append(array(
        'symbol' => $symbol,
        'id' => ((string) $i),
        'i' => $i,
    ));
}


$limited = $cache->get_limit($symbol, null);


assert($initial_length === $limited);


$cache = new ArrayCacheBySymbolById();


$append_items_length = 3;


for ($i = 0; $i < $append_items_length; $i++) {
    $cache->append(array(
        'symbol' => $symbol,
        'id' => ((string) $i),
        'i' => $i,
    ));
}


$outside_limit = 5;


$limited = $cache->get_limit($symbol, $outside_limit);


assert($append_items_length === $limited);


$outside_limit = 2; // if limit < newsUpdate that should be returned


$limited = $cache->get_limit($symbol, $outside_limit);


assert($outside_limit === $limited);


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolById limit with symbol undefined
$symbol = 'BTC/USDT';


$cache = new ArrayCacheBySymbolById();


$initial_length = 5;


for ($i = 0; $i < $initial_length; $i++) {
    $cache->append(array(
        'symbol' => $symbol,
        'id' => ((string) $i),
        'i' => $i,
    ));
}


$limited = $cache->get_limit(null, null);


assert($initial_length === $limited);


$cache = new ArrayCacheBySymbolById();


$append_items_length = 3;


for ($i = 0; $i < $append_items_length; $i++) {
    $cache->append(array(
        'symbol' => $symbol,
        'id' => ((string) $i),
        'i' => $i,
    ));
}


$outside_limit = 5;


$limited = $cache->get_limit($symbol, $outside_limit);


assert($append_items_length === $limited);


$outside_limit = 2; // if limit < newsUpdate that should be returned


$limited = $cache->get_limit($symbol, $outside_limit);


assert($outside_limit === $limited);


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolById, same order should not increase the limit
$cache = new ArrayCacheBySymbolById();


$symbol = 'BTC/USDT';


$other_symbol = 'ETH/USDT';


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'singleId',
    'i' => 3,
));


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'singleId',
    'i' => 3,
));


$cache->append(array(
    'symbol' => $other_symbol,
    'id' => 'singleId',
    'i' => 3,
));


$outside_limit = 5;


$limited = $cache->get_limit($symbol, $outside_limit);


$limited2 = $cache->get_limit(null, $outside_limit);


assert($limited == 1);


assert($limited2 == 2);


// ----------------------------------------------------------------------------
// test testLimitArrayCacheByTimestamp limit
$cache = new ArrayCacheByTimestamp();


$initial_length = 5;


for ($i = 0; $i < $initial_length; $i++) {
    $cache->append([$i * 10, $i * 10, $i * 10, $i * 10]);
}


$limited = $cache->get_limit(null, null);


assert($initial_length === $limited);


$append_items_length = 3;


for ($i = 0; $i < $append_items_length; $i++) {
    $cache->append([$i * 4, $i * 4, $i * 4, $i * 4]);
}


$outside_limit = 5;


$limited = $cache->get_limit(null, $outside_limit);


assert($append_items_length === $limited);


$outside_limit = 2; // if limit < newsUpdate that should be returned


$limited = $cache->get_limit(null, $outside_limit);


assert($outside_limit === $limited);


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolById, watch all orders, same symbol and order id gets updated
$cache = new ArrayCacheBySymbolById();


$symbol = 'BTC/USDT';


$outside_limit = 5;


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'oneId',
    'i' => 3,
)); // create first order


$cache->get_limit(null, $outside_limit); // watch all orders


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'oneId',
    'i' => 4,
)); // first order is closed


$cache->get_limit(null, $outside_limit); // watch all orders


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'twoId',
    'i' => 5,
)); // create second order


$cache->get_limit(null, $outside_limit); // watch all orders


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'twoId',
    'i' => 6,
)); // second order is closed


$limited = $cache->get_limit(null, $outside_limit); // watch all orders


assert($limited === 1); // one new update


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolById, watch all orders, and watchOrders (symbol) work independently
$cache = new ArrayCacheBySymbolById();


$symbol = 'BTC/USDT';


$symbol2 = 'ETH/USDT';


$outside_limit = 5;


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'one',
    'i' => 1,
)); // create first order


$cache->append(array(
    'symbol' => $symbol2,
    'id' => 'two',
    'i' => 1,
)); // create second order


assert($cache->get_limit(null, $outside_limit) === 2); // watch all orders


assert($cache->get_limit($symbol, $outside_limit) === 1); // watch by symbol


$cache->append(array(
    'symbol' => $symbol,
    'id' => 'one',
    'i' => 2,
)); // update first order


$cache->append(array(
    'symbol' => $symbol2,
    'id' => 'two',
    'i' => 2,
)); // update second order


assert($cache->get_limit($symbol, $outside_limit) === 1); // watch by symbol


assert($cache->get_limit(null, $outside_limit) === 2); // watch all orders


$cache->append(array(
    'symbol' => $symbol2,
    'id' => 'two',
    'i' => 3,
)); // update second order


$cache->append(array(
    'symbol' => $symbol2,
    'id' => 'three',
    'i' => 3,
)); // create third order


assert($cache->get_limit(null, $outside_limit) === 2); // watch all orders


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolBySide, watch all positions, same symbol and side id gets updated
$cache = new ArrayCacheBySymbolBySide();


$symbol = 'BTC/USDT';


$outside_limit = 5;


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 1,
)); // create first position


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 0,
)); // first position is closed


assert($cache->get_limit($symbol, $outside_limit) === 1); // limit position


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 1,
)); // create first position


assert($cache->get_limit($symbol, $outside_limit) === 1); // watch all positions


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolBySide, watch all positions, same symbol and side id gets updated
$cache = new ArrayCacheBySymbolBySide();


$symbol = 'BTC/USDT';


$outside_limit = 5;


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 1,
)); // create first position


assert($cache->get_limit(null, $outside_limit) === 1); // watch all positions


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 0,
)); // first position is closed


assert($cache->get_limit(null, $outside_limit) === 1); // watch all positions


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'long',
    'contracts' => 3,
)); // create second position


assert($cache->get_limit(null, $outside_limit) === 1); // watch all positions


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'long',
    'contracts' => 2,
)); // second position is reduced


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'long',
    'contracts' => 1,
)); // second position is reduced


assert($cache->get_limit(null, $outside_limit) === 1); // watch all orders


// ----------------------------------------------------------------------------
// test ArrayCacheBySymbolBySide, watchPositions, and watchPosition (symbol) work independently
$cache = new ArrayCacheBySymbolBySide();


$symbol = 'BTC/USDT';


$symbol2 = 'ETH/USDT';


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 1,
)); // create first position


$cache->append(array(
    'symbol' => $symbol2,
    'side' => 'long',
    'contracts' => 1,
)); // create second position


assert($cache->get_limit(null, $outside_limit) === 2); // watch all positions


assert($cache->get_limit($symbol, $outside_limit) === 1); // watch by symbol


$cache->append(array(
    'symbol' => $symbol,
    'side' => 'short',
    'contracts' => 2,
)); // update first position


$cache->append(array(
    'symbol' => $symbol2,
    'side' => 'long',
    'contracts' => 2,
)); // update second position


assert($cache->get_limit($symbol, $outside_limit) === 1); // watch by symbol


assert($cache->get_limit(null, $outside_limit) === 2); // watch all positions


$cache->append(array(
    'symbol' => $symbol2,
    'side' => 'long',
    'contracts' => 3,
)); // update second position


assert($cache->get_limit(null, $outside_limit) === 1); // watch all positions
