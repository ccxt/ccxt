<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\coinbase as Exchange;

class coinbase extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'coinbase',
            'name' => 'Coinbase',
            'countries' => array( 'US' ),
            'pro' => true,
            'rateLimit' => 400, // 10k calls per hour
            'version' => 'v2',
            'userAgent' => $this->userAgents['chrome'],
            'headers' => array(
                'CB-VERSION' => '2018-05-30',
            ),
            'has' => array(
                'CORS' => true,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createDepositAddress' => true,
                'createLimitBuyOrder' => true,
                'createLimitSellOrder' => true,
                'createMarketBuyOrder' => true,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrder' => true,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createPostOnlyOrder' => true,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => true,
                'createStopMarketOrder' => false,
                'createStopOrder' => true,
                'editOrder' => true,
                'fetchAccounts' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchCanceledOrders' => true,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDeposits' => true,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchLedger' => true,
                'fetchLeverage' => false,
                'fetchLeverageTiers' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyBuys' => true,
                'fetchMySells' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => true,
                'fetchPosition' => false,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'setPositionMode' => false,
                'withdraw' => true,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/40811661-b6eceae2-653a-11e8-829e-10bfadb078cf.jpg',
                'api' => array(
                    'rest' => 'https://api.coinbase.com',
                ),
                'www' => 'https://www.coinbase.com',
                'doc' => array(
                    'https://developers.coinbase.com/api/v2',
                    'https://docs.cloud.coinbase.com/advanced-trade-api/docs/welcome',
                ),
                'fees' => array(
                    'https://support.coinbase.com/customer/portal/articles/2109597-buy-sell-bank-transfer-fees',
                    'https://www.coinbase.com/advanced-fees',
                ),
                'referral' => 'https://www.coinbase.com/join/58cbe25a355148797479dbd2',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'v2' => array(
                    'public' => array(
                        'get' => array(
                            'currencies',
                            'time',
                            'exchange-rates',
                            'users/{user_id}',
                            'prices/{symbol}/buy',
                            'prices/{symbol}/sell',
                            'prices/{symbol}/spot',
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'accounts',
                            'accounts/{account_id}',
                            'accounts/{account_id}/addresses',
                            'accounts/{account_id}/addresses/{address_id}',
                            'accounts/{account_id}/addresses/{address_id}/transactions',
                            'accounts/{account_id}/transactions',
                            'accounts/{account_id}/transactions/{transaction_id}',
                            'accounts/{account_id}/buys',
                            'accounts/{account_id}/buys/{buy_id}',
                            'accounts/{account_id}/sells',
                            'accounts/{account_id}/sells/{sell_id}',
                            'accounts/{account_id}/deposits',
                            'accounts/{account_id}/deposits/{deposit_id}',
                            'accounts/{account_id}/withdrawals',
                            'accounts/{account_id}/withdrawals/{withdrawal_id}',
                            'payment-methods',
                            'payment-methods/{payment_method_id}',
                            'user',
                            'user/auth',
                        ),
                        'post' => array(
                            'accounts',
                            'accounts/{account_id}/primary',
                            'accounts/{account_id}/addresses',
                            'accounts/{account_id}/transactions',
                            'accounts/{account_id}/transactions/{transaction_id}/complete',
                            'accounts/{account_id}/transactions/{transaction_id}/resend',
                            'accounts/{account_id}/buys',
                            'accounts/{account_id}/buys/{buy_id}/commit',
                            'accounts/{account_id}/sells',
                            'accounts/{account_id}/sells/{sell_id}/commit',
                            'accounts/{account_id}/deposits',
                            'accounts/{account_id}/deposits/{deposit_id}/commit',
                            'accounts/{account_id}/withdrawals',
                            'accounts/{account_id}/withdrawals/{withdrawal_id}/commit',
                        ),
                        'put' => array(
                            'accounts/{account_id}',
                            'user',
                        ),
                        'delete' => array(
                            'accounts/{id}',
                            'accounts/{account_id}/transactions/{transaction_id}',
                        ),
                    ),
                ),
                'v3' => array(
                    'private' => array(
                        'get' => array(
                            'brokerage/accounts',
                            'brokerage/accounts/{account_uuid}',
                            'brokerage/orders/historical/batch',
                            'brokerage/orders/historical/fills',
                            'brokerage/orders/historical/{order_id}',
                            'brokerage/products',
                            'brokerage/products/{product_id}',
                            'brokerage/products/{product_id}/candles',
                            'brokerage/products/{product_id}/ticker',
                            'brokerage/portfolios',
                            'brokerage/portfolios/{portfolio_uuid}',
                            'brokerage/transaction_summary',
                            'brokerage/product_book',
                            'brokerage/best_bid_ask',
                            'brokerage/convert/trade/{trade_id}',
                            'brokerage/time',
                        ),
                        'post' => array(
                            'brokerage/orders',
                            'brokerage/orders/batch_cancel',
                            'brokerage/orders/edit',
                            'brokerage/orders/edit_preview',
                            'brokerage/portfolios',
                            'brokerage/portfolios/move_funds',
                            'brokerage/convert/quote',
                            'brokerage/convert/trade/{trade_id}',
                        ),
                        'put' => array(
                            'brokerage/portfolios/{portfolio_uuid}',
                        ),
                        'delete' => array(
                            'brokerage/portfolios/{portfolio_uuid}',
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'taker' => $this->parse_number('0.006'),
                    'maker' => $this->parse_number('0.004'),
                    'tierBased' => true,
                    'percentage' => true,
                    'tiers' => array(
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.006') ),
                            array( $this->parse_number('10000'), $this->parse_number('0.004') ),
                            array( $this->parse_number('50000'), $this->parse_number('0.0025') ),
                            array( $this->parse_number('100000'), $this->parse_number('0.002') ),
                            array( $this->parse_number('1000000'), $this->parse_number('0.0018') ),
                            array( $this->parse_number('15000000'), $this->parse_number('0.0016') ),
                            array( $this->parse_number('75000000'), $this->parse_number('0.0012') ),
                            array( $this->parse_number('250000000'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('400000000'), $this->parse_number('0.0005') ),
                        ),
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.004') ),
                            array( $this->parse_number('10000'), $this->parse_number('0.0025') ),
                            array( $this->parse_number('50000'), $this->parse_number('0.0015') ),
                            array( $this->parse_number('100000'), $this->parse_number('0.001') ),
                            array( $this->parse_number('1000000'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('15000000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('75000000'), $this->parse_number('0.0003') ),
                            array( $this->parse_number('250000000'), $this->parse_number('0.0') ),
                            array( $this->parse_number('400000000'), $this->parse_number('0.0') ),
                        ),
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    'two_factor_required' => '\\ccxt\\AuthenticationError', // 402 When sending money over 2fa limit
                    'param_required' => '\\ccxt\\ExchangeError', // 400 Missing parameter
                    'validation_error' => '\\ccxt\\ExchangeError', // 400 Unable to validate POST/PUT
                    'invalid_request' => '\\ccxt\\ExchangeError', // 400 Invalid request
                    'personal_details_required' => '\\ccxt\\AuthenticationError', // 400 User’s personal detail required to complete this request
                    'identity_verification_required' => '\\ccxt\\AuthenticationError', // 400 Identity verification is required to complete this request
                    'jumio_verification_required' => '\\ccxt\\AuthenticationError', // 400 Document verification is required to complete this request
                    'jumio_face_match_verification_required' => '\\ccxt\\AuthenticationError', // 400 Document verification including face match is required to complete this request
                    'unverified_email' => '\\ccxt\\AuthenticationError', // 400 User has not verified their email
                    'authentication_error' => '\\ccxt\\AuthenticationError', // 401 Invalid auth (generic)
                    'invalid_authentication_method' => '\\ccxt\\AuthenticationError', // 401 API access is blocked for deleted users.
                    'invalid_token' => '\\ccxt\\AuthenticationError', // 401 Invalid Oauth token
                    'revoked_token' => '\\ccxt\\AuthenticationError', // 401 Revoked Oauth token
                    'expired_token' => '\\ccxt\\AuthenticationError', // 401 Expired Oauth token
                    'invalid_scope' => '\\ccxt\\AuthenticationError', // 403 User hasn’t authenticated necessary scope
                    'not_found' => '\\ccxt\\ExchangeError', // 404 Resource not found
                    'rate_limit_exceeded' => '\\ccxt\\RateLimitExceeded', // 429 Rate limit exceeded
                    'internal_server_error' => '\\ccxt\\ExchangeError', // 500 Internal server error
                    'UNSUPPORTED_ORDER_CONFIGURATION' => '\\ccxt\\BadRequest',
                    'INSUFFICIENT_FUND' => '\\ccxt\\BadRequest',
                ),
                'broad' => array(
                    'request timestamp expired' => '\\ccxt\\InvalidNonce', // array("errors":[array("id":"authentication_error","message":"request timestamp expired")])
                    'order with this orderID was not found' => '\\ccxt\\OrderNotFound', // array("error":"unknown","error_details":"order with this orderID was not found","message":"order with this orderID was not found")
                ),
            ),
            'timeframes' => array(
                '1m' => 'ONE_MINUTE',
                '5m' => 'FIVE_MINUTE',
                '15m' => 'FIFTEEN_MINUTE',
                '30m' => 'THIRTY_MINUTE',
                '1h' => 'ONE_HOUR',
                '2h' => 'TWO_HOUR',
                '6h' => 'SIX_HOUR',
                '1d' => 'ONE_DAY',
            ),
            'commonCurrencies' => array(
                'CGLD' => 'CELO',
            ),
            'options' => array(
                'stablePairs' => array( 'BUSD-USD', 'CBETH-ETH', 'DAI-USD', 'GUSD-USD', 'GYEN-USD', 'PAX-USD', 'PAX-USDT', 'USDC-EUR', 'USDC-GBP', 'USDT-EUR', 'USDT-GBP', 'USDT-USD', 'USDT-USDC', 'WBTC-BTC' ),
                'fetchCurrencies' => array(
                    'expires' => 5000,
                ),
                'accounts' => array(
                    'wallet',
                    'fiat',
                    // 'vault',
                ),
                'v3Accounts' => array(
                    'ACCOUNT_TYPE_CRYPTO',
                    'ACCOUNT_TYPE_FIAT',
                ),
                'createMarketBuyOrderRequiresPrice' => true,
                'advanced' => true, // set to true if using any v3 endpoints from the advanced trade API
                'fetchMarkets' => 'fetchMarketsV3', // 'fetchMarketsV3' or 'fetchMarketsV2'
                'fetchTicker' => 'fetchTickerV3', // 'fetchTickerV3' or 'fetchTickerV2'
                'fetchTickers' => 'fetchTickersV3', // 'fetchTickersV3' or 'fetchTickersV2'
                'fetchAccounts' => 'fetchAccountsV3', // 'fetchAccountsV3' or 'fetchAccountsV2'
                'fetchBalance' => 'v2PrivateGetAccounts', // 'v2PrivateGetAccounts' or 'v3PrivateGetBrokerageAccounts'
                'user_native_currency' => 'USD', // needed to get fees for v3
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-time#http-request
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->v2PublicGetTime ($params);
        //
        //     {
        //         "data" => {
        //             "epoch" => 1589295679,
        //             "iso" => "2020-05-12T15:01:19Z"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->safe_timestamp($data, 'epoch');
    }

    public function fetch_accounts($params = array ()) {
        /**
         * fetch all the accounts associated with a profile
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getaccounts
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-accounts#list-accounts
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=account-structure account structures~ indexed by the account type
         */
        $method = $this->safe_string($this->options, 'fetchAccounts', 'fetchAccountsV3');
        if ($method === 'fetchAccountsV3') {
            return $this->fetch_accounts_v3($params);
        }
        return $this->fetch_accounts_v2($params);
    }

    public function fetch_accounts_v2($params = array ()) {
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchAccounts', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchAccounts', null, null, null, $params, 'next_starting_after', 'starting_after', null, 100);
        }
        $request = array(
            'limit' => 100,
        );
        $response = $this->v2PrivateGetAccounts (array_merge($request, $params));
        //
        //     {
        //         "pagination" => array(
        //             "ending_before" => null,
        //             "starting_after" => null,
        //             "previous_ending_before" => null,
        //             "next_starting_after" => null,
        //             "limit" => 244,
        //             "order" => "desc",
        //             "previous_uri" => null,
        //             "next_uri" => null
        //         ),
        //         "data" => [
        //             array(
        //                 "id" => "XLM",
        //                 "name" => "XLM Wallet",
        //                 "primary" => false,
        //                 "type" => "wallet",
        //                 "currency" => array(
        //                     "code" => "XLM",
        //                     "name" => "Stellar Lumens",
        //                     "color" => "#000000",
        //                     "sort_index" => 127,
        //                     "exponent" => 7,
        //                     "type" => "crypto",
        //                     "address_regex" => "^G[A-Z2-7]{55}$",
        //                     "asset_id" => "13b83335-5ede-595b-821e-5bcdfa80560f",
        //                     "destination_tag_name" => "XLM Memo ID",
        //                     "destination_tag_regex" => "^[ -~]array(1,28)$"
        //                 ),
        //                 "balance" => array(
        //                     "amount" => "0.0000000",
        //                     "currency" => "XLM"
        //                 ),
        //                 "created_at" => null,
        //                 "updated_at" => null,
        //                 "resource" => "account",
        //                 "resource_path" => "/v2/accounts/XLM",
        //                 "allow_deposits" => true,
        //                 "allow_withdrawals" => true
        //             ),
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $pagination = $this->safe_value($response, 'pagination', array());
        $cursor = $this->safe_string($pagination, 'next_starting_after');
        $accounts = $this->safe_value($response, 'data', array());
        $lastIndex = strlen($accounts) - 1;
        $last = $this->safe_value($accounts, $lastIndex);
        if (($cursor !== null) && ($cursor !== '')) {
            $last['next_starting_after'] = $cursor;
            $accounts[$lastIndex] = $last;
        }
        return $this->parse_accounts($data, $params);
    }

    public function fetch_accounts_v3($params = array ()) {
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchAccounts', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchAccounts', null, null, null, $params, 'cursor', 'cursor', null, 100);
        }
        $request = array(
            'limit' => 100,
        );
        $response = $this->v3PrivateGetBrokerageAccounts (array_merge($request, $params));
        //
        //     {
        //         "accounts" => array(
        //             {
        //                 "uuid" => "11111111-1111-1111-1111-111111111111",
        //                 "name" => "USDC Wallet",
        //                 "currency" => "USDC",
        //                 "available_balance" => array(
        //                     "value" => "0.0000000000000000",
        //                     "currency" => "USDC"
        //                 ),
        //                 "default" => true,
        //                 "active" => true,
        //                 "created_at" => "2023-01-04T06:20:06.456Z",
        //                 "updated_at" => "2023-01-04T06:20:07.181Z",
        //                 "deleted_at" => null,
        //                 "type" => "ACCOUNT_TYPE_CRYPTO",
        //                 "ready" => false,
        //                 "hold" => array(
        //                     "value" => "0.0000000000000000",
        //                     "currency" => "USDC"
        //                 }
        //             ),
        //             ...
        //         ),
        //         "has_next" => false,
        //         "cursor" => "",
        //         "size" => 9
        //     }
        //
        $accounts = $this->safe_value($response, 'accounts', array());
        $lastIndex = strlen($accounts) - 1;
        $last = $this->safe_value($accounts, $lastIndex);
        $cursor = $this->safe_string($response, 'cursor');
        if (($cursor !== null) && ($cursor !== '')) {
            $last['cursor'] = $cursor;
            $accounts[$lastIndex] = $last;
        }
        return $this->parse_accounts($accounts, $params);
    }

    public function parse_account($account) {
        //
        // fetchAccountsV2
        //
        //     {
        //         "id" => "XLM",
        //         "name" => "XLM Wallet",
        //         "primary" => false,
        //         "type" => "wallet",
        //         "currency" => array(
        //             "code" => "XLM",
        //             "name" => "Stellar Lumens",
        //             "color" => "#000000",
        //             "sort_index" => 127,
        //             "exponent" => 7,
        //             "type" => "crypto",
        //             "address_regex" => "^G[A-Z2-7]{55}$",
        //             "asset_id" => "13b83335-5ede-595b-821e-5bcdfa80560f",
        //             "destination_tag_name" => "XLM Memo ID",
        //             "destination_tag_regex" => "^[ -~]array(1,28)$"
        //         ),
        //         "balance" => array(
        //             "amount" => "0.0000000",
        //             "currency" => "XLM"
        //         ),
        //         "created_at" => null,
        //         "updated_at" => null,
        //         "resource" => "account",
        //         "resource_path" => "/v2/accounts/XLM",
        //         "allow_deposits" => true,
        //         "allow_withdrawals" => true
        //     }
        //
        // fetchAccountsV3
        //
        //     {
        //         "uuid" => "11111111-1111-1111-1111-111111111111",
        //         "name" => "USDC Wallet",
        //         "currency" => "USDC",
        //         "available_balance" => array(
        //             "value" => "0.0000000000000000",
        //             "currency" => "USDC"
        //         ),
        //         "default" => true,
        //         "active" => true,
        //         "created_at" => "2023-01-04T06:20:06.456Z",
        //         "updated_at" => "2023-01-04T06:20:07.181Z",
        //         "deleted_at" => null,
        //         "type" => "ACCOUNT_TYPE_CRYPTO",
        //         "ready" => false,
        //         "hold" => {
        //             "value" => "0.0000000000000000",
        //             "currency" => "USDC"
        //         }
        //     }
        //
        $active = $this->safe_value($account, 'active');
        $currencyIdV3 = $this->safe_string($account, 'currency');
        $currency = $this->safe_value($account, 'currency', array());
        $currencyId = $this->safe_string($currency, 'code', $currencyIdV3);
        $typeV3 = $this->safe_string($account, 'name');
        $typeV2 = $this->safe_string($account, 'type');
        $parts = explode(' ', $typeV3);
        return array(
            'id' => $this->safe_string_2($account, 'id', 'uuid'),
            'type' => ($active !== null) ? $this->safe_string_lower($parts, 1) : $typeV2,
            'code' => $this->safe_currency_code($currencyId),
            'info' => $account,
        );
    }

    public function create_deposit_address(string $code, $params = array ()) {
        /**
         * create a currency deposit $address
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-addresses#create-$address
         * @param {string} $code unified currency $code of the currency for the deposit $address
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=$address-structure $address structure~
         */
        $accountId = $this->safe_string($params, 'account_id');
        $params = $this->omit($params, 'account_id');
        if ($accountId === null) {
            $this->load_accounts();
            for ($i = 0; $i < count($this->accounts); $i++) {
                $account = $this->accounts[$i];
                if ($account['code'] === $code && $account['type'] === 'wallet') {
                    $accountId = $account['id'];
                    break;
                }
            }
        }
        if ($accountId === null) {
            throw new ExchangeError($this->id . ' createDepositAddress() could not find the $account with matching currency $code, specify an `account_id` extra param');
        }
        $request = array(
            'account_id' => $accountId,
        );
        $response = $this->v2PrivatePostAccountsAccountIdAddresses (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "id" => "05b1ebbf-9438-5dd4-b297-2ddedc98d0e4",
        //             "address" => "coinbasebase",
        //             "address_info" => array(
        //                 "address" => "coinbasebase",
        //                 "destination_tag" => "287594668"
        //             ),
        //             "name" => null,
        //             "created_at" => "2019-07-01T14:39:29Z",
        //             "updated_at" => "2019-07-01T14:39:29Z",
        //             "network" => "eosio",
        //             "uri_scheme" => "eosio",
        //             "resource" => "address",
        //             "resource_path" => "/v2/accounts/14cfc769-e852-52f3-b831-711c104d194c/addresses/05b1ebbf-9438-5dd4-b297-2ddedc98d0e4",
        //             "warnings" => array(
        //                 array(
        //                     "title" => "Only send EOS (EOS) to this $address",
        //                     "details" => "Sending any other cryptocurrency will result in permanent loss.",
        //                     "image_url" => "https://dynamic-assets.coinbase.com/deaca3d47b10ed4a91a872e9618706eec34081127762d88f2476ac8e99ada4b48525a9565cf2206d18c04053f278f693434af4d4629ca084a9d01b7a286a7e26/asset_icons/1f8489bb280fb0a0fd643c1161312ba49655040e9aaaced5f9ad3eeaf868eadc.png"
        //                 ),
        //                 {
        //                     "title" => "Both an $address and EOS memo are required to receive EOS",
        //                     "details" => "If you send funds without an EOS memo or with an incorrect EOS memo, your funds cannot be credited to your $account->",
        //                     "image_url" => "https://www.coinbase.com/assets/receive-warning-2f3269d83547a7748fb39d6e0c1c393aee26669bfea6b9f12718094a1abff155.png"
        //                 }
        //             ),
        //             "warning_title" => "Only send EOS (EOS) to this $address",
        //             "warning_details" => "Sending any other cryptocurrency will result in permanent loss.",
        //             "destination_tag" => "287594668",
        //             "deposit_uri" => "eosio:coinbasebase?dt=287594668",
        //             "callback_url" => null
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $tag = $this->safe_string($data, 'destination_tag');
        $address = $this->safe_string($data, 'address');
        return array(
            'currency' => $code,
            'tag' => $tag,
            'address' => $address,
            'info' => $response,
        );
    }

    public function fetch_my_sells(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * @ignore
         * fetch $sells
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-$sells#list-$sells
         * @param {string} $symbol not used by coinbase fetchMySells ()
         * @param {int} [$since] timestamp in ms of the earliest sell, default is null
         * @param {int} [$limit] max number of $sells to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=order-structure list of order structures~
         */
        // v2 did't have an endpoint for all historical trades
        $request = $this->prepare_account_request($limit, $params);
        $this->load_markets();
        $query = $this->omit($params, array( 'account_id', 'accountId' ));
        $sells = $this->v2PrivateGetAccountsAccountIdSells (array_merge($request, $query));
        return $this->parse_trades($sells['data'], null, $since, $limit);
    }

    public function fetch_my_buys(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * @ignore
         * fetch $buys
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-$buys#list-$buys
         * @param {string} $symbol not used by coinbase fetchMyBuys ()
         * @param {int} [$since] timestamp in ms of the earliest buy, default is null
         * @param {int} [$limit] max number of $buys to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of  ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        // v2 did't have an endpoint for all historical trades
        $request = $this->prepare_account_request($limit, $params);
        $this->load_markets();
        $query = $this->omit($params, array( 'account_id', 'accountId' ));
        $buys = $this->v2PrivateGetAccountsAccountIdBuys (array_merge($request, $query));
        return $this->parse_trades($buys['data'], null, $since, $limit);
    }

    public function fetch_transactions_with_method($method, ?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        $request = $this->prepare_account_request_with_currency_code($code, $limit, $params);
        $this->load_markets();
        $query = $this->omit($params, array( 'account_id', 'accountId' ));
        $response = $this->$method (array_merge($request, $query));
        return $this->parse_transactions($response['data'], null, $since, $limit);
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all withdrawals made from an account
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-withdrawals#list-withdrawals
         * @param {string} $code unified currency $code
         * @param {int} [$since] the earliest time in ms to fetch withdrawals for
         * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        // fiat only, for crypto transactions use fetchLedger
        return $this->fetch_transactions_with_method('v2PrivateGetAccountsAccountIdWithdrawals', $code, $since, $limit, $params);
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all deposits made to an account
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-deposits#list-deposits
         * @param {string} $code unified currency $code
         * @param {int} [$since] the earliest time in ms to fetch deposits for
         * @param {int} [$limit] the maximum number of deposits structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        // fiat only, for crypto transactions use fetchLedger
        return $this->fetch_transactions_with_method('v2PrivateGetAccountsAccountIdDeposits', $code, $since, $limit, $params);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'created' => 'pending',
            'completed' => 'ok',
            'canceled' => 'canceled',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, ?array $currency = null) {
        //
        // fiat deposit
        //
        //     {
        //         "id" => "f34c19f3-b730-5e3d-9f72",
        //         "status" => "completed",
        //         "payment_method" => array(
        //             "id" => "a022b31d-f9c7-5043-98f2",
        //             "resource" => "payment_method",
        //             "resource_path" => "/v2/payment-methods/a022b31d-f9c7-5043-98f2"
        //         ),
        //         "transaction" => array(
        //             "id" => "04ed4113-3732-5b0c-af86-b1d2146977d0",
        //             "resource" => "transaction",
        //             "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86"
        //         ),
        //         "user_reference" => "2VTYTH",
        //         "created_at" => "2017-02-09T07:01:18Z",
        //         "updated_at" => "2017-02-09T07:01:26Z",
        //         "resource" => "deposit",
        //         "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72",
        //         "committed" => true,
        //         "payout_at" => "2017-02-12T07:01:17Z",
        //         "instant" => false,
        //         "fee" => array( "amount" => "0.00", "currency" => "EUR" ),
        //         "amount" => array( "amount" => "114.02", "currency" => "EUR" ),
        //         "subtotal" => array( "amount" => "114.02", "currency" => "EUR" ),
        //         "hold_until" => null,
        //         "hold_days" => 0,
        //         "hold_business_days" => 0,
        //         "next_step" => null
        //     }
        //
        // fiat_withdrawal
        //
        //     {
        //         "id" => "cfcc3b4a-eeb6-5e8c-8058",
        //         "status" => "completed",
        //         "payment_method" => array(
        //             "id" => "8b94cfa4-f7fd-5a12-a76a",
        //             "resource" => "payment_method",
        //             "resource_path" => "/v2/payment-methods/8b94cfa4-f7fd-5a12-a76a"
        //         ),
        //         "transaction" => array(
        //             "id" => "fcc2550b-5104-5f83-a444",
        //             "resource" => "transaction",
        //             "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/fcc2550b-5104-5f83-a444"
        //         ),
        //         "user_reference" => "MEUGK",
        //         "created_at" => "2018-07-26T08:55:12Z",
        //         "updated_at" => "2018-07-26T08:58:18Z",
        //         "resource" => "withdrawal",
        //         "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/cfcc3b4a-eeb6-5e8c-8058",
        //         "committed" => true,
        //         "payout_at" => "2018-07-31T08:55:12Z",
        //         "instant" => false,
        //         "fee" => array( "amount" => "0.15", "currency" => "EUR" ),
        //         "amount" => array( "amount" => "13130.69", "currency" => "EUR" ),
        //         "subtotal" => array( "amount" => "13130.84", "currency" => "EUR" ),
        //         "idem" => "e549dee5-63ed-4e79-8a96",
        //         "next_step" => null
        //     }
        //
        // withdraw
        //
        //     {
        //         "id" => "a1794ecf-5693-55fa-70cf-ef731748ed82",
        //         "type" => "send",
        //         "status" => "pending",
        //         "amount" => array(
        //             "amount" => "-14.008308",
        //             "currency" => "USDC"
        //         ),
        //         "native_amount" => array(
        //             "amount" => "-18.74",
        //             "currency" => "CAD"
        //         ),
        //         "description" => null,
        //         "created_at" => "2024-01-12T01:27:31Z",
        //         "updated_at" => "2024-01-12T01:27:31Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/a34bgfad-ed67-538b-bffc-730c98c10da0/transactions/a1794ecf-5693-55fa-70cf-ef731748ed82",
        //         "instant_exchange" => false,
        //         "network" => array(
        //             "status" => "pending",
        //             "status_description" => "Pending (est. less than 10 minutes)",
        //             "transaction_fee" => array(
        //                 "amount" => "4.008308",
        //                 "currency" => "USDC"
        //             ),
        //             "transaction_amount" => array(
        //                 "amount" => "10.000000",
        //                 "currency" => "USDC"
        //             ),
        //             "confirmations" => 0
        //         ),
        //         "to" => {
        //             "resource" => "ethereum_address",
        //             "address" => "0x9...",
        //             "currency" => "USDC",
        //             "address_info" => array(
        //                 "address" => "0x9..."
        //             }
        //         ),
        //         "idem" => "748d8591-dg9a-7831-a45b-crd61dg78762",
        //         "details" => array(
        //             "title" => "Sent USDC",
        //             "subtitle" => "To USDC address on Ethereum $network",
        //             "header" => "Sent 14.008308 USDC ($18.74)",
        //             "health" => "warning"
        //         ),
        //         "hide_native_amount" => false
        //     }
        //
        $transactionType = $this->safe_string($transaction, 'type');
        $amountAndCurrencyObject = null;
        $feeObject = null;
        if ($transactionType === 'send') {
            $network = $this->safe_value($transaction, 'network', array());
            $amountAndCurrencyObject = $this->safe_value($network, 'transaction_amount', array());
            $feeObject = $this->safe_value($network, 'transaction_fee', array());
        } else {
            $amountAndCurrencyObject = $this->safe_value($transaction, 'subtotal', array());
            $feeObject = $this->safe_value($transaction, 'fee', array());
        }
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        if ($status === null) {
            $committed = $this->safe_value($transaction, 'committed');
            $status = $committed ? 'ok' : 'pending';
        }
        $id = $this->safe_string($transaction, 'id');
        $currencyId = $this->safe_string($amountAndCurrencyObject, 'currency');
        $feeCurrencyId = $this->safe_string($feeObject, 'currency');
        $datetime = $this->safe_value($transaction, 'created_at');
        $toObject = $this->safe_value($transaction, 'to', array());
        $toAddress = $this->safe_string($toObject, 'address');
        return array(
            'info' => $transaction,
            'id' => $id,
            'txid' => $id,
            'timestamp' => $this->parse8601($datetime),
            'datetime' => $datetime,
            'network' => null,
            'address' => $toAddress,
            'addressTo' => $toAddress,
            'addressFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'tagFrom' => null,
            'type' => $this->safe_string($transaction, 'resource'),
            'amount' => $this->safe_number($amountAndCurrencyObject, 'amount'),
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'status' => $status,
            'updated' => $this->parse8601($this->safe_value($transaction, 'updated_at')),
            'fee' => array(
                'cost' => $this->safe_number($feeObject, 'amount'),
                'currency' => $this->safe_currency_code($feeCurrencyId),
            ),
        );
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchMyBuys, fetchMySells
        //
        //     {
        //         "id" => "67e0eaec-07d7-54c4-a72c-2e92826897df",
        //         "status" => "completed",
        //         "payment_method" => array(
        //             "id" => "83562370-3e5c-51db-87da-752af5ab9559",
        //             "resource" => "payment_method",
        //             "resource_path" => "/v2/payment-methods/83562370-3e5c-51db-87da-752af5ab9559"
        //         ),
        //         "transaction" => array(
        //             "id" => "441b9494-b3f0-5b98-b9b0-4d82c21c252a",
        //             "resource" => "transaction",
        //             "resource_path" => "/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/transactions/441b9494-b3f0-5b98-b9b0-4d82c21c252a"
        //         ),
        //         "amount" => array( "amount" => "1.00000000", "currency" => "BTC" ),
        //         "total" => array( "amount" => "10.25", "currency" => "USD" ),
        //         "subtotal" => array( "amount" => "10.10", "currency" => "USD" ),
        //         "created_at" => "2015-01-31T20:49:02Z",
        //         "updated_at" => "2015-02-11T16:54:02-08:00",
        //         "resource" => "buy",
        //         "resource_path" => "/v2/accounts/2bbf394c-193b-5b2a-9155-3b4732659ede/buys/67e0eaec-07d7-54c4-a72c-2e92826897df",
        //         "committed" => true,
        //         "instant" => false,
        //         "fee" => array( "amount" => "0.15", "currency" => "USD" ),
        //         "payout_at" => "2015-02-18T16:54:00-08:00"
        //     }
        //
        // fetchTrades
        //
        //     {
        //         "trade_id" => "10092327",
        //         "product_id" => "BTC-USDT",
        //         "price" => "17488.12",
        //         "size" => "0.0000623",
        //         "time" => "2023-01-11T00:52:37.557001Z",
        //         "side" => "BUY",
        //         "bid" => "",
        //         "ask" => ""
        //     }
        //
        // fetchMyTrades
        //
        //     {
        //         "entry_id" => "b88b82cc89e326a2778874795102cbafd08dd979a2a7a3c69603fc4c23c2e010",
        //         "trade_id" => "cdc39e45-bbd3-44ec-bf02-61742dfb16a1",
        //         "order_id" => "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //         "trade_time" => "2023-01-18T01:37:38.091377090Z",
        //         "trade_type" => "FILL",
        //         "price" => "21220.64",
        //         "size" => "0.0046830664333996",
        //         "commission" => "0.0000280983986004",
        //         "product_id" => "BTC-USDT",
        //         "sequence_timestamp" => "2023-01-18T01:37:38.092520Z",
        //         "liquidity_indicator" => "UNKNOWN_LIQUIDITY_INDICATOR",
        //         "size_in_quote" => true,
        //         "user_id" => "1111111-1111-1111-1111-111111111111",
        //         "side" => "BUY"
        //     }
        //
        $symbol = null;
        $totalObject = $this->safe_value($trade, 'total', array());
        $amountObject = $this->safe_value($trade, 'amount', array());
        $subtotalObject = $this->safe_value($trade, 'subtotal', array());
        $feeObject = $this->safe_value($trade, 'fee', array());
        $marketId = $this->safe_string($trade, 'product_id');
        $market = $this->safe_market($marketId, $market, '-');
        if ($market !== null) {
            $symbol = $market['symbol'];
        } else {
            $baseId = $this->safe_string($amountObject, 'currency');
            $quoteId = $this->safe_string($totalObject, 'currency');
            if (($baseId !== null) && ($quoteId !== null)) {
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
            }
        }
        $sizeInQuote = $this->safe_value($trade, 'size_in_quote');
        $v3Price = $this->safe_string($trade, 'price');
        $v3Cost = null;
        $v3Amount = $this->safe_string($trade, 'size');
        if ($sizeInQuote) {
            // calculate $base size
            $v3Cost = $v3Amount;
            $v3Amount = Precise::string_div($v3Amount, $v3Price);
        }
        $v3FeeCost = $this->safe_string($trade, 'commission');
        $amountString = $this->safe_string($amountObject, 'amount', $v3Amount);
        $costString = $this->safe_string($subtotalObject, 'amount', $v3Cost);
        $priceString = null;
        $cost = null;
        if (($costString !== null) && ($amountString !== null)) {
            $priceString = Precise::string_div($costString, $amountString);
        } else {
            $priceString = $v3Price;
        }
        if (($priceString !== null) && ($amountString !== null)) {
            $cost = Precise::string_mul($priceString, $amountString);
        } else {
            $cost = $costString;
        }
        $feeCurrencyId = $this->safe_string($feeObject, 'currency');
        $feeCost = $this->safe_number($feeObject, 'amount', $this->parse_number($v3FeeCost));
        if (($feeCurrencyId === null) && ($market !== null) && ($feeCost !== null)) {
            $feeCurrencyId = $market['quote'];
        }
        $datetime = $this->safe_string_n($trade, array( 'created_at', 'trade_time', 'time' ));
        $side = $this->safe_string_lower_2($trade, 'resource', 'side');
        $takerOrMaker = $this->safe_string_lower($trade, 'liquidity_indicator');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $this->safe_string_2($trade, 'id', 'trade_id'),
            'order' => $this->safe_string($trade, 'order_id'),
            'timestamp' => $this->parse8601($datetime),
            'datetime' => $datetime,
            'symbol' => $symbol,
            'type' => null,
            'side' => ($side === 'unknown_order_side') ? null : $side,
            'takerOrMaker' => ($takerOrMaker === 'unknown_liquidity_indicator') ? null : $takerOrMaker,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $cost,
            'fee' => array(
                'cost' => $feeCost,
                'currency' => $this->safe_currency_code($feeCurrencyId),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getproducts
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-currencies#get-fiat-currencies
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-exchange-rates#get-exchange-rates
         * retrieves data on all markets for coinbase
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing market data
         */
        $method = $this->safe_string($this->options, 'fetchMarkets', 'fetchMarketsV3');
        return $this->$method ($params);
    }

    public function fetch_markets_v2($params = array ()) {
        $response = $this->fetch_currencies_from_cache($params);
        $currencies = $this->safe_value($response, 'currencies', array());
        $exchangeRates = $this->safe_value($response, 'exchangeRates', array());
        $data = $this->safe_value($currencies, 'data', array());
        $dataById = $this->index_by($data, 'id');
        $rates = $this->safe_value($this->safe_value($exchangeRates, 'data', array()), 'rates', array());
        $baseIds = is_array($rates) ? array_keys($rates) : array();
        $result = array();
        for ($i = 0; $i < count($baseIds); $i++) {
            $baseId = $baseIds[$i];
            $base = $this->safe_currency_code($baseId);
            $type = (is_array($dataById) && array_key_exists($baseId, $dataById)) ? 'fiat' : 'crypto';
            // https://github.com/ccxt/ccxt/issues/6066
            if ($type === 'crypto') {
                for ($j = 0; $j < count($data); $j++) {
                    $quoteCurrency = $data[$j];
                    $quoteId = $this->safe_string($quoteCurrency, 'id');
                    $quote = $this->safe_currency_code($quoteId);
                    $result[] = array(
                        'id' => $baseId . '-' . $quoteId,
                        'symbol' => $base . '/' . $quote,
                        'base' => $base,
                        'quote' => $quote,
                        'settle' => null,
                        'baseId' => $baseId,
                        'quoteId' => $quoteId,
                        'settleId' => null,
                        'type' => 'spot',
                        'spot' => true,
                        'margin' => false,
                        'swap' => false,
                        'future' => false,
                        'option' => false,
                        'active' => null,
                        'contract' => false,
                        'linear' => null,
                        'inverse' => null,
                        'contractSize' => null,
                        'expiry' => null,
                        'expiryDatetime' => null,
                        'strike' => null,
                        'optionType' => null,
                        'precision' => array(
                            'amount' => null,
                            'price' => null,
                        ),
                        'limits' => array(
                            'leverage' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'amount' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'price' => array(
                                'min' => null,
                                'max' => null,
                            ),
                            'cost' => array(
                                'min' => $this->safe_number($quoteCurrency, 'min_size'),
                                'max' => null,
                            ),
                        ),
                        'info' => $quoteCurrency,
                    );
                }
            }
        }
        return $result;
    }

    public function fetch_markets_v3($params = array ()) {
        $response = $this->v3PrivateGetBrokerageProducts ($params);
        //
        //     array(
        //         array(
        //             "product_id" => "TONE-USD",
        //             "price" => "0.01523",
        //             "price_percentage_change_24h" => "1.94109772423025",
        //             "volume_24h" => "19773129",
        //             "volume_percentage_change_24h" => "437.0170530929949",
        //             "base_increment" => "1",
        //             "quote_increment" => "0.00001",
        //             "quote_min_size" => "1",
        //             "quote_max_size" => "10000000",
        //             "base_min_size" => "26.7187147229469674",
        //             "base_max_size" => "267187147.2294696735908216",
        //             "base_name" => "TE-FOOD",
        //             "quote_name" => "US Dollar",
        //             "watched" => false,
        //             "is_disabled" => false,
        //             "new" => false,
        //             "status" => "online",
        //             "cancel_only" => false,
        //             "limit_only" => false,
        //             "post_only" => false,
        //             "trading_disabled" => false,
        //             "auction_mode" => false,
        //             "product_type" => "SPOT",
        //             "quote_currency_id" => "USD",
        //             "base_currency_id" => "TONE",
        //             "fcm_trading_session_details" => null,
        //             "mid_market_price" => ""
        //         ),
        //         ...
        //     )
        //
        $fees = $this->v3PrivateGetBrokerageTransactionSummary ($params);
        //
        //     {
        //         "total_volume" => 0,
        //         "total_fees" => 0,
        //         "fee_tier" => array(
        //             "pricing_tier" => "",
        //             "usd_from" => "0",
        //             "usd_to" => "10000",
        //             "taker_fee_rate" => "0.006",
        //             "maker_fee_rate" => "0.004"
        //         ),
        //         "margin_rate" => null,
        //         "goods_and_services_tax" => null,
        //         "advanced_trade_only_volume" => 0,
        //         "advanced_trade_only_fees" => 0,
        //         "coinbase_pro_volume" => 0,
        //         "coinbase_pro_fees" => 0
        //     }
        //
        $feeTier = $this->safe_value($fees, 'fee_tier', array());
        $data = $this->safe_value($response, 'products', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $market = $data[$i];
            $id = $this->safe_string($market, 'product_id');
            $baseId = $this->safe_string($market, 'base_currency_id');
            $quoteId = $this->safe_string($market, 'quote_currency_id');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $marketType = $this->safe_string_lower($market, 'product_type');
            $tradingDisabled = $this->safe_value($market, 'trading_disabled');
            $stablePairs = $this->safe_value($this->options, 'stablePairs', array());
            $result[] = array(
                'id' => $id,
                'symbol' => $base . '/' . $quote,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => $marketType,
                'spot' => ($marketType === 'spot'),
                'margin' => null,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => !$tradingDisabled,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'taker' => $this->in_array($id, $stablePairs) ? 0.00001 : $this->safe_number($feeTier, 'taker_fee_rate'),
                'maker' => $this->in_array($id, $stablePairs) ? 0.0 : $this->safe_number($feeTier, 'maker_fee_rate'),
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_number($market, 'base_increment'),
                    'price' => $this->safe_number_2($market, 'price_increment', 'quote_increment'),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'base_min_size'),
                        'max' => $this->safe_number($market, 'base_max_size'),
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->safe_number($market, 'quote_min_size'),
                        'max' => $this->safe_number($market, 'quote_max_size'),
                    ),
                ),
                'created' => null,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies_from_cache($params = array ()) {
        $options = $this->safe_value($this->options, 'fetchCurrencies', array());
        $timestamp = $this->safe_integer($options, 'timestamp');
        $expires = $this->safe_integer($options, 'expires', 1000);
        $now = $this->milliseconds();
        if (($timestamp === null) || (($now - $timestamp) > $expires)) {
            $currencies = $this->v2PublicGetCurrencies ($params);
            $exchangeRates = $this->v2PublicGetExchangeRates ($params);
            $this->options['fetchCurrencies'] = array_merge($options, array(
                'currencies' => $currencies,
                'exchangeRates' => $exchangeRates,
                'timestamp' => $now,
            ));
        }
        return $this->safe_value($this->options, 'fetchCurrencies', array());
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available $currencies on an exchange
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-$currencies#get-fiat-$currencies
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-exchange-$rates#get-exchange-$rates
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an associative dictionary of $currencies
         */
        $response = $this->fetch_currencies_from_cache($params);
        $currencies = $this->safe_value($response, 'currencies', array());
        //
        //     {
        //         "data":array(
        //             array("id":"AED","name":"United Arab Emirates Dirham","min_size":"0.01000000"),
        //             array("id":"AFN","name":"Afghan Afghani","min_size":"0.01000000"),
        //             array("id":"ALL","name":"Albanian Lek","min_size":"0.01000000"),
        //             array("id":"AMD","name":"Armenian Dram","min_size":"0.01000000"),
        //             array("id":"ANG","name":"Netherlands Antillean Gulden","min_size":"0.01000000"),
        //             ...
        //         ),
        //     }
        //
        $exchangeRates = $this->safe_value($response, 'exchangeRates', array());
        //
        //     {
        //         "data":{
        //             "currency":"USD",
        //             "rates":array(
        //                 "AED":"3.67",
        //                 "AFN":"78.21",
        //                 "ALL":"110.42",
        //                 "AMD":"474.18",
        //                 "ANG":"1.75",
        //                 ...
        //             ),
        //         }
        //     }
        //
        $data = $this->safe_value($currencies, 'data', array());
        $dataById = $this->index_by($data, 'id');
        $rates = $this->safe_value($this->safe_value($exchangeRates, 'data', array()), 'rates', array());
        $keys = is_array($rates) ? array_keys($rates) : array();
        $result = array();
        for ($i = 0; $i < count($keys); $i++) {
            $key = $keys[$i];
            $type = (is_array($dataById) && array_key_exists($key, $dataById)) ? 'fiat' : 'crypto';
            $currency = $this->safe_value($dataById, $key, array());
            $id = $this->safe_string($currency, 'id', $key);
            $name = $this->safe_string($currency, 'name');
            $code = $this->safe_currency_code($id);
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'info' => $currency, // the original payload
                'type' => $type,
                'name' => $name,
                'active' => true,
                'deposit' => null,
                'withdraw' => null,
                'fee' => null,
                'precision' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => $this->safe_number($currency, 'min_size'),
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getproducts
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-exchange-rates#get-exchange-rates
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
         */
        $method = $this->safe_string($this->options, 'fetchTickers', 'fetchTickersV3');
        if ($method === 'fetchTickersV3') {
            return $this->fetch_tickers_v3($symbols, $params);
        }
        return $this->fetch_tickers_v2($symbols, $params);
    }

    public function fetch_tickers_v2(?array $symbols = null, $params = array ()) {
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $request = array(
            // 'currency' => 'USD',
        );
        $response = $this->v2PublicGetExchangeRates (array_merge($request, $params));
        //
        //     {
        //         "data":{
        //             "currency":"USD",
        //             "rates":{
        //                 "AED":"3.6731",
        //                 "AFN":"103.163942",
        //                 "ALL":"106.973038",
        //             }
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $rates = $this->safe_value($data, 'rates', array());
        $quoteId = $this->safe_string($data, 'currency');
        $result = array();
        $baseIds = is_array($rates) ? array_keys($rates) : array();
        $delimiter = '-';
        for ($i = 0; $i < count($baseIds); $i++) {
            $baseId = $baseIds[$i];
            $marketId = $baseId . $delimiter . $quoteId;
            $market = $this->safe_market($marketId, null, $delimiter);
            $symbol = $market['symbol'];
            $result[$symbol] = $this->parse_ticker($rates[$baseId], $market);
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_tickers_v3(?array $symbols = null, $params = array ()) {
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $response = $this->v3PrivateGetBrokerageProducts ($params);
        //
        //     {
        //         "products" => array(
        //             array(
        //                 "product_id" => "TONE-USD",
        //                 "price" => "0.01523",
        //                 "price_percentage_change_24h" => "1.94109772423025",
        //                 "volume_24h" => "19773129",
        //                 "volume_percentage_change_24h" => "437.0170530929949",
        //                 "base_increment" => "1",
        //                 "quote_increment" => "0.00001",
        //                 "quote_min_size" => "1",
        //                 "quote_max_size" => "10000000",
        //                 "base_min_size" => "26.7187147229469674",
        //                 "base_max_size" => "267187147.2294696735908216",
        //                 "base_name" => "TE-FOOD",
        //                 "quote_name" => "US Dollar",
        //                 "watched" => false,
        //                 "is_disabled" => false,
        //                 "new" => false,
        //                 "status" => "online",
        //                 "cancel_only" => false,
        //                 "limit_only" => false,
        //                 "post_only" => false,
        //                 "trading_disabled" => false,
        //                 "auction_mode" => false,
        //                 "product_type" => "SPOT",
        //                 "quote_currency_id" => "USD",
        //                 "base_currency_id" => "TONE",
        //                 "fcm_trading_session_details" => null,
        //                 "mid_market_price" => ""
        //             ),
        //             ...
        //         ),
        //         "num_products" => 549
        //     }
        //
        $data = $this->safe_value($response, 'products', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $marketId = $this->safe_string($entry, 'product_id');
            $market = $this->safe_market($marketId, null, '-');
            $symbol = $market['symbol'];
            $result[$symbol] = $this->parse_ticker($entry, $market);
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getmarkettrades
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-prices#get-spot-price
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-prices#get-buy-price
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-prices#get-sell-price
         * @param {string} $symbol unified $symbol of the market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $method = $this->safe_string($this->options, 'fetchTicker', 'fetchTickerV3');
        if ($method === 'fetchTickerV3') {
            return $this->fetch_ticker_v3($symbol, $params);
        }
        return $this->fetch_ticker_v2($symbol, $params);
    }

    public function fetch_ticker_v2(string $symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array_merge(array(
            'symbol' => $market['id'],
        ), $params);
        $spot = $this->v2PublicGetPricesSymbolSpot ($request);
        //
        //     array("data":array("base":"BTC","currency":"USD","amount":"48691.23"))
        //
        $ask = $this->v2PublicGetPricesSymbolBuy ($request);
        //
        //     array("data":array("base":"BTC","currency":"USD","amount":"48691.23"))
        //
        $bid = $this->v2PublicGetPricesSymbolSell ($request);
        //
        //     array("data":array("base":"BTC","currency":"USD","amount":"48691.23"))
        //
        $spotData = $this->safe_value($spot, 'data', array());
        $askData = $this->safe_value($ask, 'data', array());
        $bidData = $this->safe_value($bid, 'data', array());
        $bidAskLast = array(
            'bid' => $this->safe_number($bidData, 'amount'),
            'ask' => $this->safe_number($askData, 'amount'),
            'price' => $this->safe_number($spotData, 'amount'),
        );
        return $this->parse_ticker($bidAskLast, $market);
    }

    public function fetch_ticker_v3(string $symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'product_id' => $market['id'],
            'limit' => 1,
        );
        $response = $this->v3PrivateGetBrokerageProductsProductIdTicker (array_merge($request, $params));
        //
        //     {
        //         "trades" => array(
        //             {
        //                 "trade_id" => "518078013",
        //                 "product_id" => "BTC-USD",
        //                 "price" => "28208.1",
        //                 "size" => "0.00659179",
        //                 "time" => "2023-04-04T23:05:34.492746Z",
        //                 "side" => "BUY",
        //                 "bid" => "",
        //                 "ask" => ""
        //             }
        //         ),
        //         "best_bid" => "28208.61",
        //         "best_ask" => "28208.62"
        //     }
        //
        $data = $this->safe_value($response, 'trades', array());
        $ticker = $this->parse_ticker($data[0], $market);
        $ticker['bid'] = $this->safe_number($response, 'best_bid');
        $ticker['ask'] = $this->safe_number($response, 'best_ask');
        return $ticker;
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // fetchTickerV2
        //
        //     {
        //         "bid" => 20713.37,
        //         "ask" => 20924.65,
        //         "price" => 20809.83
        //     }
        //
        // fetchTickerV3
        //
        //     {
        //         "trade_id" => "10209805",
        //         "product_id" => "BTC-USDT",
        //         "price" => "19381.27",
        //         "size" => "0.1",
        //         "time" => "2023-01-13T20:35:41.865970Z",
        //         "side" => "BUY",
        //         "bid" => "",
        //         "ask" => ""
        //     }
        //
        // fetchTickersV2
        //
        //     "48691.23"
        //
        // fetchTickersV3
        //
        //     array(
        //         array(
        //             "product_id" => "TONE-USD",
        //             "price" => "0.01523",
        //             "price_percentage_change_24h" => "1.94109772423025",
        //             "volume_24h" => "19773129",
        //             "volume_percentage_change_24h" => "437.0170530929949",
        //             "base_increment" => "1",
        //             "quote_increment" => "0.00001",
        //             "quote_min_size" => "1",
        //             "quote_max_size" => "10000000",
        //             "base_min_size" => "26.7187147229469674",
        //             "base_max_size" => "267187147.2294696735908216",
        //             "base_name" => "TE-FOOD",
        //             "quote_name" => "US Dollar",
        //             "watched" => false,
        //             "is_disabled" => false,
        //             "new" => false,
        //             "status" => "online",
        //             "cancel_only" => false,
        //             "limit_only" => false,
        //             "post_only" => false,
        //             "trading_disabled" => false,
        //             "auction_mode" => false,
        //             "product_type" => "SPOT",
        //             "quote_currency_id" => "USD",
        //             "base_currency_id" => "TONE",
        //             "fcm_trading_session_details" => null,
        //             "mid_market_price" => ""
        //         ),
        //         ...
        //     )
        //
        // fetchBidsAsks
        //
        //     {
        //         "product_id" => "TRAC-EUR",
        //         "bids" => array(
        //             {
        //                 "price" => "0.2384",
        //                 "size" => "386.1"
        //             }
        //         ),
        //         "asks" => array(
        //             {
        //                 "price" => "0.2406",
        //                 "size" => "672"
        //             }
        //         ),
        //         "time" => "2023-06-30T07:15:24.656044Z"
        //     }
        //
        $bid = $this->safe_number($ticker, 'bid');
        $ask = $this->safe_number($ticker, 'ask');
        $bidVolume = null;
        $askVolume = null;
        if ((is_array($ticker) && array_key_exists('bids', $ticker))) {
            $bids = $this->safe_value($ticker, 'bids', array());
            $asks = $this->safe_value($ticker, 'asks', array());
            $bid = $this->safe_number($bids[0], 'price');
            $bidVolume = $this->safe_number($bids[0], 'size');
            $ask = $this->safe_number($asks[0], 'price');
            $askVolume = $this->safe_number($asks[0], 'size');
        }
        $marketId = $this->safe_string($ticker, 'product_id');
        $last = $this->safe_number($ticker, 'price');
        $datetime = $this->safe_string($ticker, 'time');
        return $this->safe_ticker(array(
            'symbol' => $this->safe_symbol($marketId, $market),
            'timestamp' => $this->parse8601($datetime),
            'datetime' => $datetime,
            'bid' => $bid,
            'ask' => $ask,
            'last' => $last,
            'high' => null,
            'low' => null,
            'bidVolume' => $bidVolume,
            'askVolume' => $askVolume,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $this->safe_number($ticker, 'price_percentage_change_24h'),
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function parse_balance($response, $params = array ()) {
        $balances = $this->safe_value_2($response, 'data', 'accounts', array());
        $accounts = $this->safe_value($params, 'type', $this->options['accounts']);
        $v3Accounts = $this->safe_value($params, 'type', $this->options['v3Accounts']);
        $result = array( 'info' => $response );
        for ($b = 0; $b < count($balances); $b++) {
            $balance = $balances[$b];
            $type = $this->safe_string($balance, 'type');
            if ($this->in_array($type, $accounts)) {
                $value = $this->safe_value($balance, 'balance');
                if ($value !== null) {
                    $currencyId = $this->safe_string($value, 'currency');
                    $code = $this->safe_currency_code($currencyId);
                    $total = $this->safe_string($value, 'amount');
                    $free = $total;
                    $account = $this->safe_value($result, $code);
                    if ($account === null) {
                        $account = $this->account();
                        $account['free'] = $free;
                        $account['total'] = $total;
                    } else {
                        $account['free'] = Precise::string_add($account['free'], $total);
                        $account['total'] = Precise::string_add($account['total'], $total);
                    }
                    $result[$code] = $account;
                }
            } elseif ($this->in_array($type, $v3Accounts)) {
                $available = $this->safe_value($balance, 'available_balance');
                $hold = $this->safe_value($balance, 'hold');
                if ($available !== null && $hold !== null) {
                    $currencyId = $this->safe_string($available, 'currency');
                    $code = $this->safe_currency_code($currencyId);
                    $used = $this->safe_string($hold, 'value');
                    $free = $this->safe_string($available, 'value');
                    $total = Precise::string_add($used, $free);
                    $account = $this->safe_value($result, $code);
                    if ($account === null) {
                        $account = $this->account();
                        $account['free'] = $free;
                        $account['used'] = $used;
                        $account['total'] = $total;
                    } else {
                        $account['free'] = Precise::string_add($account['free'], $free);
                        $account['used'] = Precise::string_add($account['used'], $used);
                        $account['total'] = Precise::string_add($account['total'], $total);
                    }
                    $result[$code] = $account;
                }
            }
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getaccounts
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-accounts#list-accounts
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->v3] default false, set true to use v3 api endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $request = array(
            'limit' => 250,
        );
        $response = null;
        $isV3 = $this->safe_value($params, 'v3', false);
        $params = $this->omit($params, 'v3');
        $method = $this->safe_string($this->options, 'fetchBalance', 'v3PrivateGetBrokerageAccounts');
        if (($isV3) || ($method === 'v3PrivateGetBrokerageAccounts')) {
            $response = $this->v3PrivateGetBrokerageAccounts (array_merge($request, $params));
        } else {
            $response = $this->v2PrivateGetAccounts (array_merge($request, $params));
        }
        //
        // v2PrivateGetAccounts
        //     {
        //         "pagination":array(
        //             "ending_before":null,
        //             "starting_after":null,
        //             "previous_ending_before":null,
        //             "next_starting_after":"6b17acd6-2e68-5eb0-9f45-72d67cef578b",
        //             "limit":100,
        //             "order":"desc",
        //             "previous_uri":null,
        //             "next_uri":"/v2/accounts?limit=100\u0026starting_after=6b17acd6-2e68-5eb0-9f45-72d67cef578b"
        //         ),
        //         "data":[
        //             array(
        //                 "id":"94ad58bc-0f15-5309-b35a-a4c86d7bad60",
        //                 "name":"MINA Wallet",
        //                 "primary":false,
        //                 "type":"wallet",
        //                 "currency":array(
        //                     "code":"MINA",
        //                     "name":"Mina",
        //                     "color":"#EA6B48",
        //                     "sort_index":397,
        //                     "exponent":9,
        //                     "type":"crypto",
        //                     "address_regex":"^(B62)[A-Za-z0-9]{52}$",
        //                     "asset_id":"a4ffc575-942c-5e26-b70c-cb3befdd4229",
        //                     "slug":"mina"
        //                 ),
        //                 "balance":array("amount":"0.000000000","currency":"MINA"),
        //                 "created_at":"2022-03-25T00:36:16Z",
        //                 "updated_at":"2022-03-25T00:36:16Z",
        //                 "resource":"account",
        //                 "resource_path":"/v2/accounts/94ad58bc-0f15-5309-b35a-a4c86d7bad60",
        //                 "allow_deposits":true,
        //                 "allow_withdrawals":true
        //             ),
        //         ]
        //     }
        //
        // v3PrivateGetBrokerageAccounts
        //     {
        //         "accounts" => array(
        //             {
        //                 "uuid" => "11111111-1111-1111-1111-111111111111",
        //                 "name" => "USDC Wallet",
        //                 "currency" => "USDC",
        //                 "available_balance" => array(
        //                     "value" => "0.0000000000000000",
        //                     "currency" => "USDC"
        //                 ),
        //                 "default" => true,
        //                 "active" => true,
        //                 "created_at" => "2023-01-04T06:20:06.456Z",
        //                 "updated_at" => "2023-01-04T06:20:07.181Z",
        //                 "deleted_at" => null,
        //                 "type" => "ACCOUNT_TYPE_CRYPTO",
        //                 "ready" => false,
        //                 "hold" => array(
        //                     "value" => "0.0000000000000000",
        //                     "currency" => "USDC"
        //                 }
        //             ),
        //             ...
        //         ),
        //         "has_next" => false,
        //         "cursor" => "",
        //         "size" => 9
        //     }
        //
        return $this->parse_balance($response, $params);
    }

    public function fetch_ledger(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-transactions#list-transactions
         * @param {string} $code unified $currency $code, default is null
         * @param {int} [$since] timestamp in ms of the earliest ledger entry, default is null
         * @param {int} [$limit] max number of ledger entrys to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ledger-structure ledger structure~
         */
        $this->load_markets();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
        }
        $request = $this->prepare_account_request_with_currency_code($code, $limit, $params);
        $query = $this->omit($params, array( 'account_id', 'accountId' ));
        // for pagination use parameter 'starting_after'
        // the value for the next page can be obtained from the result of the previous call in the 'pagination' field
        // eg => instance.last_json_response.pagination.next_starting_after
        $response = $this->v2PrivateGetAccountsAccountIdTransactions (array_merge($request, $query));
        return $this->parse_ledger($response['data'], $currency, $since, $limit);
    }

    public function parse_ledger_entry_status($status) {
        $types = array(
            'completed' => 'ok',
        );
        return $this->safe_string($types, $status, $status);
    }

    public function parse_ledger_entry_type($type) {
        $types = array(
            'buy' => 'trade',
            'sell' => 'trade',
            'fiat_deposit' => 'transaction',
            'fiat_withdrawal' => 'transaction',
            'exchange_deposit' => 'transaction', // fiat withdrawal (from coinbase to coinbasepro)
            'exchange_withdrawal' => 'transaction', // fiat deposit (to coinbase from coinbasepro)
            'send' => 'transaction', // crypto deposit OR withdrawal
            'pro_deposit' => 'transaction', // crypto withdrawal (from coinbase to coinbasepro)
            'pro_withdrawal' => 'transaction', // crypto deposit (to coinbase from coinbasepro)
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_ledger_entry($item, ?array $currency = null) {
        //
        // crypto deposit transaction
        //
        //     {
        //         "id" => "34e4816b-4c8c-5323-a01c-35a9fa26e490",
        //         "type" => "send",
        //         "status" => "completed",
        //         "amount" => array( $amount => "28.31976528", $currency => "BCH" ),
        //         "native_amount" => array( $amount => "2799.65", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2019-02-28T12:35:20Z",
        //         "updated_at" => "2019-02-28T12:43:24Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/34e4816b-4c8c-5323-a01c-35a9fa26e490",
        //         "instant_exchange" => false,
        //         "network" => array(
        //             "status" => "confirmed",
        //             "hash" => "56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701",
        //             "transaction_url" => "https://bch.btc.com/56222d865dae83774fccb2efbd9829cf08c75c94ce135bfe4276f3fb46d49701"
        //         ),
        //         "from" => array( resource => "bitcoin_cash_network", $currency => "BCH" ),
        //         "details" => array( title => 'Received Bitcoin Cash', subtitle => "From Bitcoin Cash $address" )
        //     }
        //
        // crypto withdrawal transaction
        //
        //     {
        //         "id" => "459aad99-2c41-5698-ac71-b6b81a05196c",
        //         "type" => "send",
        //         "status" => "completed",
        //         "amount" => array( $amount => "-0.36775642", $currency => "BTC" ),
        //         "native_amount" => array( $amount => "-1111.65", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2019-03-20T08:37:07Z",
        //         "updated_at" => "2019-03-20T08:49:33Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/459aad99-2c41-5698-ac71-b6b81a05196c",
        //         "instant_exchange" => false,
        //         "network" => array(
        //             "status" => "confirmed",
        //             "hash" => "2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b",
        //             "transaction_url" => "https://blockchain.info/tx/2732bbcf35c69217c47b36dce64933d103895277fe25738ffb9284092701e05b",
        //             "transaction_fee" => array( $amount => "0.00000000", $currency => "BTC" ),
        //             "transaction_amount" => array( $amount => "0.36775642", $currency => "BTC" ),
        //             "confirmations" => 15682
        //         ),
        //         "to" => array(
        //             "resource" => "bitcoin_address",
        //             "address" => "1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX",
        //             "currency" => "BTC",
        //             "address_info" => array( $address => "1AHnhqbvbYx3rnZx8uC7NbFZaTe4tafFHX" )
        //         ),
        //         "idem" => "da0a2f14-a2af-4c5a-a37e-d4484caf582bsend",
        //         "application" => array(
        //             "id" => "5756ab6e-836b-553b-8950-5e389451225d",
        //             "resource" => "application",
        //             "resource_path" => "/v2/applications/5756ab6e-836b-553b-8950-5e389451225d"
        //         ),
        //         "details" => array( title => 'Sent Bitcoin', subtitle => "To Bitcoin $address" )
        //     }
        //
        // withdrawal transaction from coinbase to coinbasepro
        //
        //     {
        //         "id" => "5b1b9fb8-5007-5393-b923-02903b973fdc",
        //         "type" => "pro_deposit",
        //         "status" => "completed",
        //         "amount" => array( $amount => "-0.00001111", $currency => "BCH" ),
        //         "native_amount" => array( $amount => "0.00", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2019-02-28T13:31:58Z",
        //         "updated_at" => "2019-02-28T13:31:58Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/5b1b9fb8-5007-5393-b923-02903b973fdc",
        //         "instant_exchange" => false,
        //         "application" => array(
        //             "id" => "5756ab6e-836b-553b-8950-5e389451225d",
        //             "resource" => "application",
        //             "resource_path" => "/v2/applications/5756ab6e-836b-553b-8950-5e389451225d"
        //         ),
        //         "details" => array( title => 'Transferred Bitcoin Cash', subtitle => "To Coinbase Pro" )
        //     }
        //
        // withdrawal transaction from coinbase to gdax
        //
        //     {
        //         "id" => "badb7313-a9d3-5c07-abd0-00f8b44199b1",
        //         "type" => "exchange_deposit",
        //         "status" => "completed",
        //         "amount" => array( $amount => "-0.43704149", $currency => "BCH" ),
        //         "native_amount" => array( $amount => "-51.90", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2019-03-19T10:30:40Z",
        //         "updated_at" => "2019-03-19T10:30:40Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c01d7364-edd7-5f3a-bd1d-de53d4cbb25e/transactions/badb7313-a9d3-5c07-abd0-00f8b44199b1",
        //         "instant_exchange" => false,
        //         "details" => array( title => 'Transferred Bitcoin Cash', subtitle => "To GDAX" )
        //     }
        //
        // deposit transaction from gdax to coinbase
        //
        //     {
        //         "id" => "9c4b642c-8688-58bf-8962-13cef64097de",
        //         "type" => "exchange_withdrawal",
        //         "status" => "completed",
        //         "amount" => array( $amount => "0.57729420", $currency => "BTC" ),
        //         "native_amount" => array( $amount => "4418.72", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2018-02-17T11:33:33Z",
        //         "updated_at" => "2018-02-17T11:33:33Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/9c4b642c-8688-58bf-8962-13cef64097de",
        //         "instant_exchange" => false,
        //         "details" => array( title => 'Transferred Bitcoin', subtitle => "From GDAX" )
        //     }
        //
        // deposit transaction from coinbasepro to coinbase
        //
        //     {
        //         "id" => "8d6dd0b9-3416-568a-889d-8f112fae9e81",
        //         "type" => "pro_withdrawal",
        //         "status" => "completed",
        //         "amount" => array( $amount => "0.40555386", $currency => "BTC" ),
        //         "native_amount" => array( $amount => "1140.27", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2019-03-04T19:41:58Z",
        //         "updated_at" => "2019-03-04T19:41:58Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/8d6dd0b9-3416-568a-889d-8f112fae9e81",
        //         "instant_exchange" => false,
        //         "application" => array(
        //             "id" => "5756ab6e-836b-553b-8950-5e389451225d",
        //             "resource" => "application",
        //             "resource_path" => "/v2/applications/5756ab6e-836b-553b-8950-5e389451225d"
        //         ),
        //         "details" => array( title => 'Transferred Bitcoin', subtitle => "From Coinbase Pro" )
        //     }
        //
        // sell trade
        //
        //     {
        //         "id" => "a9409207-df64-585b-97ab-a50780d2149e",
        //         "type" => "sell",
        //         "status" => "completed",
        //         "amount" => array( $amount => "-9.09922880", $currency => "BTC" ),
        //         "native_amount" => array( $amount => "-7285.73", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2017-03-27T15:38:34Z",
        //         "updated_at" => "2017-03-27T15:38:34Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/transactions/a9409207-df64-585b-97ab-a50780d2149e",
        //         "instant_exchange" => false,
        //         "sell" => array(
        //             "id" => "e3550b4d-8ae6-5de3-95fe-1fb01ba83051",
        //             "resource" => "sell",
        //             "resource_path" => "/v2/accounts/c6afbd34-4bd0-501e-8616-4862c193cd84/sells/e3550b4d-8ae6-5de3-95fe-1fb01ba83051"
        //         ),
        //         "details" => {
        //             "title" => "Sold Bitcoin",
        //             "subtitle" => "Using EUR Wallet",
        //             "payment_method_name" => "EUR Wallet"
        //         }
        //     }
        //
        // buy trade
        //
        //     {
        //         "id" => "63eeed67-9396-5912-86e9-73c4f10fe147",
        //         "type" => "buy",
        //         "status" => "completed",
        //         "amount" => array( $amount => "2.39605772", $currency => "ETH" ),
        //         "native_amount" => array( $amount => "98.31", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2017-03-27T09:07:56Z",
        //         "updated_at" => "2017-03-27T09:07:57Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/transactions/63eeed67-9396-5912-86e9-73c4f10fe147",
        //         "instant_exchange" => false,
        //         "buy" => array(
        //             "id" => "20b25b36-76c6-5353-aa57-b06a29a39d82",
        //             "resource" => "buy",
        //             "resource_path" => "/v2/accounts/8902f85d-4a69-5d74-82fe-8e390201bda7/buys/20b25b36-76c6-5353-aa57-b06a29a39d82"
        //         ),
        //         "details" => {
        //             "title" => "Bought Ethereum",
        //             "subtitle" => "Using EUR Wallet",
        //             "payment_method_name" => "EUR Wallet"
        //         }
        //     }
        //
        // fiat deposit transaction
        //
        //     {
        //         "id" => "04ed4113-3732-5b0c-af86-b1d2146977d0",
        //         "type" => "fiat_deposit",
        //         "status" => "completed",
        //         "amount" => array( $amount => "114.02", $currency => "EUR" ),
        //         "native_amount" => array( $amount => "97.23", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2017-02-09T07:01:21Z",
        //         "updated_at" => "2017-02-09T07:01:22Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/04ed4113-3732-5b0c-af86-b1d2146977d0",
        //         "instant_exchange" => false,
        //         "fiat_deposit" => array(
        //             "id" => "f34c19f3-b730-5e3d-9f72-96520448677a",
        //             "resource" => "fiat_deposit",
        //             "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/deposits/f34c19f3-b730-5e3d-9f72-96520448677a"
        //         ),
        //         "details" => {
        //             "title" => "Deposited funds",
        //             "subtitle" => "From SEPA Transfer (GB47 BARC 20..., reference CBADVI)",
        //             "payment_method_name" => "SEPA Transfer (GB47 BARC 20..., reference CBADVI)"
        //         }
        //     }
        //
        // fiat withdrawal transaction
        //
        //     {
        //         "id" => "957d98e2-f80e-5e2f-a28e-02945aa93079",
        //         "type" => "fiat_withdrawal",
        //         "status" => "completed",
        //         "amount" => array( $amount => "-11000.00", $currency => "EUR" ),
        //         "native_amount" => array( $amount => "-9698.22", $currency => "GBP" ),
        //         "description" => null,
        //         "created_at" => "2017-12-06T13:19:19Z",
        //         "updated_at" => "2017-12-06T13:19:19Z",
        //         "resource" => "transaction",
        //         "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/transactions/957d98e2-f80e-5e2f-a28e-02945aa93079",
        //         "instant_exchange" => false,
        //         "fiat_withdrawal" => array(
        //             "id" => "f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7",
        //             "resource" => "fiat_withdrawal",
        //             "resource_path" => "/v2/accounts/91cd2d36-3a91-55b6-a5d4-0124cf105483/withdrawals/f4bf1fd9-ab3b-5de7-906d-ed3e23f7a4e7"
        //         ),
        //         "details" => {
        //             "title" => "Withdrew funds",
        //             "subtitle" => "To HSBC BANK PLC (GB74 MIDL...)",
        //             "payment_method_name" => "HSBC BANK PLC (GB74 MIDL...)"
        //         }
        //     }
        //
        $amountInfo = $this->safe_value($item, 'amount', array());
        $amount = $this->safe_string($amountInfo, 'amount');
        $direction = null;
        if (Precise::string_lt($amount, '0')) {
            $direction = 'out';
            $amount = Precise::string_neg($amount);
        } else {
            $direction = 'in';
        }
        $currencyId = $this->safe_string($amountInfo, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        //
        // the $address and $txid do not belong to the unified ledger structure
        //
        //     $address = null;
        //     if ($item['to']) {
        //         $address = $this->safe_string($item['to'], 'address');
        //     }
        //     $txid = null;
        //
        $fee = null;
        $networkInfo = $this->safe_value($item, 'network', array());
        // $txid = network['hash']; // $txid does not belong to the unified ledger structure
        $feeInfo = $this->safe_value($networkInfo, 'transaction_fee');
        if ($feeInfo !== null) {
            $feeCurrencyId = $this->safe_string($feeInfo, 'currency');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId, $currency);
            $feeAmount = $this->safe_number($feeInfo, 'amount');
            $fee = array(
                'cost' => $feeAmount,
                'currency' => $feeCurrencyCode,
            );
        }
        $timestamp = $this->parse8601($this->safe_value($item, 'created_at'));
        $id = $this->safe_string($item, 'id');
        $type = $this->parse_ledger_entry_type($this->safe_string($item, 'type'));
        $status = $this->parse_ledger_entry_status($this->safe_string($item, 'status'));
        $path = $this->safe_string($item, 'resource_path');
        $accountId = null;
        if ($path !== null) {
            $parts = explode('/', $path);
            $numParts = count($parts);
            if ($numParts > 3) {
                $accountId = $parts[3];
            }
        }
        return array(
            'info' => $item,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'direction' => $direction,
            'account' => $accountId,
            'referenceId' => null,
            'referenceAccount' => null,
            'type' => $type,
            'currency' => $code,
            'amount' => $this->parse_number($amount),
            'before' => null,
            'after' => null,
            'status' => $status,
            'fee' => $fee,
        );
    }

    public function find_account_id($code) {
        $this->load_markets();
        $this->load_accounts();
        for ($i = 0; $i < count($this->accounts); $i++) {
            $account = $this->accounts[$i];
            if ($account['code'] === $code) {
                return $account['id'];
            }
        }
        return null;
    }

    public function prepare_account_request(?int $limit = null, $params = array ()) {
        $accountId = $this->safe_string_2($params, 'account_id', 'accountId');
        if ($accountId === null) {
            throw new ArgumentsRequired($this->id . ' prepareAccountRequest() method requires an account_id (or $accountId) parameter');
        }
        $request = array(
            'account_id' => $accountId,
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        return $request;
    }

    public function prepare_account_request_with_currency_code(?string $code = null, ?int $limit = null, $params = array ()) {
        $accountId = $this->safe_string_2($params, 'account_id', 'accountId');
        if ($accountId === null) {
            if ($code === null) {
                throw new ArgumentsRequired($this->id . ' prepareAccountRequestWithCurrencyCode() method requires an account_id (or $accountId) parameter OR a currency $code argument');
            }
            $accountId = $this->find_account_id($code);
            if ($accountId === null) {
                throw new ExchangeError($this->id . ' prepareAccountRequestWithCurrencyCode() could not find account id for ' . $code);
            }
        }
        $request = array(
            'account_id' => $accountId,
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        return $request;
    }

    public function create_market_buy_order_with_cost(string $symbol, $cost, $params = array ()) {
        /**
         * create a $market buy order by providing the $symbol and $cost
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_postorder
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {float} $cost how much you want to trade in units of the quote currency
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['spot']) {
            throw new NotSupported($this->id . ' createMarketBuyOrderWithCost() supports spot orders only');
        }
        $params['createMarketBuyOrderRequiresPrice'] = false;
        return $this->create_order($symbol, 'market', 'buy', $cost, null, $params);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade order
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_postorder
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much you want to trade in units of the base currency, quote currency for 'market' 'buy' orders
         * @param {float} [$price] the $price to fulfill the order, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {float} [$params->stopPrice] $price to trigger stop orders
         * @param {float} [$params->triggerPrice] $price to trigger stop orders
         * @param {float} [$params->stopLossPrice] $price to trigger stop-loss orders
         * @param {float} [$params->takeProfitPrice] $price to trigger take-profit orders
         * @param {bool} [$params->postOnly] true or false
         * @param {string} [$params->timeInForce] 'GTC', 'IOC', 'GTD' or 'PO'
         * @param {string} [$params->stop_direction] 'UNKNOWN_STOP_DIRECTION', 'STOP_DIRECTION_STOP_UP', 'STOP_DIRECTION_STOP_DOWN' the direction the $stopPrice is triggered from
         * @param {string} [$params->end_time] '2023-05-25T17:01:05.092Z' for 'GTD' orders
         * @param {float} [$params->cost] *spot $market buy only* the quote quantity that can be used alternative for the $amount
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'client_order_id' => $this->uuid(),
            'product_id' => $market['id'],
            'side' => strtoupper($side),
        );
        $stopPrice = $this->safe_number_n($params, array( 'stopPrice', 'stop_price', 'triggerPrice' ));
        $stopLossPrice = $this->safe_number($params, 'stopLossPrice');
        $takeProfitPrice = $this->safe_number($params, 'takeProfitPrice');
        $isStop = $stopPrice !== null;
        $isStopLoss = $stopLossPrice !== null;
        $isTakeProfit = $takeProfitPrice !== null;
        $timeInForce = $this->safe_string($params, 'timeInForce');
        $postOnly = ($timeInForce === 'PO') ? true : $this->safe_value_2($params, 'postOnly', 'post_only', false);
        $endTime = $this->safe_string($params, 'end_time');
        $stopDirection = $this->safe_string($params, 'stop_direction');
        if ($type === 'limit') {
            if ($isStop) {
                if ($stopDirection === null) {
                    $stopDirection = ($side === 'buy') ? 'STOP_DIRECTION_STOP_DOWN' : 'STOP_DIRECTION_STOP_UP';
                }
                if (($timeInForce === 'GTD') || ($endTime !== null)) {
                    if ($endTime === null) {
                        throw new ExchangeError($this->id . ' createOrder() requires an end_time parameter for a GTD order');
                    }
                    $request['order_configuration'] = array(
                        'stop_limit_stop_limit_gtd' => array(
                            'base_size' => $this->amount_to_precision($symbol, $amount),
                            'limit_price' => $this->price_to_precision($symbol, $price),
                            'stop_price' => $this->price_to_precision($symbol, $stopPrice),
                            'stop_direction' => $stopDirection,
                            'end_time' => $endTime,
                        ),
                    );
                } else {
                    $request['order_configuration'] = array(
                        'stop_limit_stop_limit_gtc' => array(
                            'base_size' => $this->amount_to_precision($symbol, $amount),
                            'limit_price' => $this->price_to_precision($symbol, $price),
                            'stop_price' => $this->price_to_precision($symbol, $stopPrice),
                            'stop_direction' => $stopDirection,
                        ),
                    );
                }
            } elseif ($isStopLoss || $isTakeProfit) {
                $triggerPrice = null;
                if ($isStopLoss) {
                    if ($stopDirection === null) {
                        $stopDirection = ($side === 'buy') ? 'STOP_DIRECTION_STOP_UP' : 'STOP_DIRECTION_STOP_DOWN';
                    }
                    $triggerPrice = $this->price_to_precision($symbol, $stopLossPrice);
                } else {
                    if ($stopDirection === null) {
                        $stopDirection = ($side === 'buy') ? 'STOP_DIRECTION_STOP_DOWN' : 'STOP_DIRECTION_STOP_UP';
                    }
                    $triggerPrice = $this->price_to_precision($symbol, $takeProfitPrice);
                }
                $request['order_configuration'] = array(
                    'stop_limit_stop_limit_gtc' => array(
                        'base_size' => $this->amount_to_precision($symbol, $amount),
                        'limit_price' => $this->price_to_precision($symbol, $price),
                        'stop_price' => $triggerPrice,
                        'stop_direction' => $stopDirection,
                    ),
                );
            } else {
                if (($timeInForce === 'GTD') || ($endTime !== null)) {
                    if ($endTime === null) {
                        throw new ExchangeError($this->id . ' createOrder() requires an end_time parameter for a GTD order');
                    }
                    $request['order_configuration'] = array(
                        'limit_limit_gtd' => array(
                            'base_size' => $this->amount_to_precision($symbol, $amount),
                            'limit_price' => $this->price_to_precision($symbol, $price),
                            'end_time' => $endTime,
                            'post_only' => $postOnly,
                        ),
                    );
                } else {
                    $request['order_configuration'] = array(
                        'limit_limit_gtc' => array(
                            'base_size' => $this->amount_to_precision($symbol, $amount),
                            'limit_price' => $this->price_to_precision($symbol, $price),
                            'post_only' => $postOnly,
                        ),
                    );
                }
            }
        } else {
            if ($isStop || $isStopLoss || $isTakeProfit) {
                throw new NotSupported($this->id . ' createOrder() only stop limit orders are supported');
            }
            if ($side === 'buy') {
                $total = null;
                $createMarketBuyOrderRequiresPrice = true;
                list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
                $cost = $this->safe_number($params, 'cost');
                $params = $this->omit($params, 'cost');
                if ($cost !== null) {
                    $total = $this->cost_to_precision($symbol, $cost);
                } elseif ($createMarketBuyOrderRequiresPrice) {
                    if ($price === null) {
                        throw new InvalidOrder($this->id . ' createOrder() requires a $price argument for $market buy orders on spot markets to calculate the $total $amount to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option or param to false and pass the $cost to spend in the $amount argument');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $costRequest = Precise::string_mul($amountString, $priceString);
                        $total = $this->cost_to_precision($symbol, $costRequest);
                    }
                } else {
                    $total = $this->cost_to_precision($symbol, $amount);
                }
                $request['order_configuration'] = array(
                    'market_market_ioc' => array(
                        'quote_size' => $total,
                    ),
                );
            } else {
                $request['order_configuration'] = array(
                    'market_market_ioc' => array(
                        'base_size' => $this->amount_to_precision($symbol, $amount),
                    ),
                );
            }
        }
        $params = $this->omit($params, array( 'timeInForce', 'triggerPrice', 'stopLossPrice', 'takeProfitPrice', 'stopPrice', 'stop_price', 'stopDirection', 'stop_direction', 'clientOrderId', 'postOnly', 'post_only', 'end_time' ));
        $response = $this->v3PrivatePostBrokerageOrders (array_merge($request, $params));
        //
        // successful order
        //
        //     {
        //         "success" => true,
        //         "failure_reason" => "UNKNOWN_FAILURE_REASON",
        //         "order_id" => "52cfe5e2-0b29-4c19-a245-a6a773de5030",
        //         "success_response" => array(
        //             "order_id" => "52cfe5e2-0b29-4c19-a245-a6a773de5030",
        //             "product_id" => "LTC-BTC",
        //             "side" => "SELL",
        //             "client_order_id" => "4d760580-6fca-4094-a70b-ebcca8626288"
        //         ),
        //         "order_configuration" => null
        //     }
        //
        // failed order
        //
        //     {
        //         "success" => false,
        //         "failure_reason" => "UNKNOWN_FAILURE_REASON",
        //         "order_id" => "",
        //         "error_response" => array(
        //             "error" => "UNSUPPORTED_ORDER_CONFIGURATION",
        //             "message" => "source is not enabled for trading",
        //             "error_details" => "",
        //             "new_order_failure_reason" => "UNSUPPORTED_ORDER_CONFIGURATION"
        //         ),
        //         "order_configuration" => {
        //             "limit_limit_gtc" => {
        //                 "base_size" => "100",
        //                 "limit_price" => "40000",
        //                 "post_only" => false
        //             }
        //         }
        //     }
        //
        $success = $this->safe_value($response, 'success');
        if ($success !== true) {
            $errorResponse = $this->safe_value($response, 'error_response');
            $errorTitle = $this->safe_string($errorResponse, 'error');
            $errorMessage = $this->safe_string($errorResponse, 'message');
            if ($errorResponse !== null) {
                $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorTitle, $errorMessage);
                $this->throw_broadly_matched_exception($this->exceptions['broad'], $errorTitle, $errorMessage);
                throw new ExchangeError($errorMessage);
            }
        }
        $data = $this->safe_value($response, 'success_response', array());
        return $this->parse_order($data, $market);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // createOrder
        //
        //     {
        //         "order_id" => "52cfe5e2-0b29-4c19-a245-a6a773de5030",
        //         "product_id" => "LTC-BTC",
        //         "side" => "SELL",
        //         "client_order_id" => "4d760580-6fca-4094-a70b-ebcca8626288"
        //     }
        //
        // cancelOrder, cancelOrders
        //
        //     {
        //         "success" => true,
        //         "failure_reason" => "UNKNOWN_CANCEL_FAILURE_REASON",
        //         "order_id" => "bb8851a3-4fda-4a2c-aa06-9048db0e0f0d"
        //     }
        //
        // fetchOrder, fetchOrders, fetchOpenOrders, fetchClosedOrders, fetchCanceledOrders
        //
        //     {
        //         "order_id" => "9bc1eb3b-5b46-4b71-9628-ae2ed0cca75b",
        //         "product_id" => "LTC-BTC",
        //         "user_id" => "1111111-1111-1111-1111-111111111111",
        //         "order_configuration" => {
        //             "limit_limit_gtc" => array(
        //                 "base_size" => "0.2",
        //                 "limit_price" => "0.006",
        //                 "post_only" => false
        //             ),
        //             "stop_limit_stop_limit_gtc" => array(
        //                 "base_size" => "48.54",
        //                 "limit_price" => "6.998",
        //                 "stop_price" => "7.0687",
        //                 "stop_direction" => "STOP_DIRECTION_STOP_DOWN"
        //             }
        //         ),
        //         "side" => "SELL",
        //         "client_order_id" => "e5fe8482-05bb-428f-ad4d-dbc8ce39239c",
        //         "status" => "OPEN",
        //         "time_in_force" => "GOOD_UNTIL_CANCELLED",
        //         "created_time" => "2023-01-16T23:37:23.947030Z",
        //         "completion_percentage" => "0",
        //         "filled_size" => "0",
        //         "average_filled_price" => "0",
        //         "fee" => "",
        //         "number_of_fills" => "0",
        //         "filled_value" => "0",
        //         "pending_cancel" => false,
        //         "size_in_quote" => false,
        //         "total_fees" => "0",
        //         "size_inclusive_of_fees" => false,
        //         "total_value_after_fees" => "0",
        //         "trigger_status" => "INVALID_ORDER_TYPE",
        //         "order_type" => "LIMIT",
        //         "reject_reason" => "REJECT_REASON_UNSPECIFIED",
        //         "settled" => false,
        //         "product_type" => "SPOT",
        //         "reject_message" => "",
        //         "cancel_message" => ""
        //     }
        //
        $marketId = $this->safe_string($order, 'product_id');
        $symbol = $this->safe_symbol($marketId, $market, '-');
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $orderConfiguration = $this->safe_value($order, 'order_configuration', array());
        $limitGTC = $this->safe_value($orderConfiguration, 'limit_limit_gtc');
        $limitGTD = $this->safe_value($orderConfiguration, 'limit_limit_gtd');
        $stopLimitGTC = $this->safe_value($orderConfiguration, 'stop_limit_stop_limit_gtc');
        $stopLimitGTD = $this->safe_value($orderConfiguration, 'stop_limit_stop_limit_gtd');
        $marketIOC = $this->safe_value($orderConfiguration, 'market_market_ioc');
        $isLimit = (($limitGTC !== null) || ($limitGTD !== null));
        $isStop = (($stopLimitGTC !== null) || ($stopLimitGTD !== null));
        $price = null;
        $amount = null;
        $postOnly = null;
        $triggerPrice = null;
        if ($isLimit) {
            $target = ($limitGTC !== null) ? $limitGTC : $limitGTD;
            $price = $this->safe_string($target, 'limit_price');
            $amount = $this->safe_string($target, 'base_size');
            $postOnly = $this->safe_value($target, 'post_only');
        } elseif ($isStop) {
            $stopTarget = ($stopLimitGTC !== null) ? $stopLimitGTC : $stopLimitGTD;
            $price = $this->safe_string($stopTarget, 'limit_price');
            $amount = $this->safe_string($stopTarget, 'base_size');
            $postOnly = $this->safe_value($stopTarget, 'post_only');
            $triggerPrice = $this->safe_string($stopTarget, 'stop_price');
        } else {
            $amount = $this->safe_string($marketIOC, 'base_size');
        }
        $datetime = $this->safe_string($order, 'created_time');
        $totalFees = $this->safe_string($order, 'total_fees');
        $currencyFee = null;
        if (($totalFees !== null) && ($market !== null)) {
            $currencyFee = $market['quote'];
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $this->safe_string($order, 'order_id'),
            'clientOrderId' => $this->safe_string($order, 'client_order_id'),
            'timestamp' => $this->parse8601($datetime),
            'datetime' => $datetime,
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $this->parse_order_type($this->safe_string($order, 'order_type')),
            'timeInForce' => $this->parse_time_in_force($this->safe_string($order, 'time_in_force')),
            'postOnly' => $postOnly,
            'side' => $this->safe_string_lower($order, 'side'),
            'price' => $price,
            'stopPrice' => $triggerPrice,
            'triggerPrice' => $triggerPrice,
            'amount' => $amount,
            'filled' => $this->safe_string($order, 'filled_size'),
            'remaining' => null,
            'cost' => null,
            'average' => $this->safe_string($order, 'average_filled_price'),
            'status' => $this->parse_order_status($this->safe_string($order, 'status')),
            'fee' => array(
                'cost' => $this->safe_string($order, 'total_fees'),
                'currency' => $currencyFee,
            ),
            'trades' => null,
        ), $market);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'OPEN' => 'open',
            'FILLED' => 'closed',
            'CANCELLED' => 'canceled',
            'EXPIRED' => 'canceled',
            'FAILED' => 'canceled',
            'UNKNOWN_ORDER_STATUS' => null,
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order_type($type) {
        if ($type === 'UNKNOWN_ORDER_TYPE') {
            return null;
        }
        $types = array(
            'MARKET' => 'market',
            'LIMIT' => 'limit',
            'STOP' => 'limit',
            'STOP_LIMIT' => 'limit',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_time_in_force($timeInForce) {
        $timeInForces = array(
            'GOOD_UNTIL_CANCELLED' => 'GTC',
            'GOOD_UNTIL_DATE_TIME' => 'GTD',
            'IMMEDIATE_OR_CANCEL' => 'IOC',
            'FILL_OR_KILL' => 'FOK',
            'UNKNOWN_TIME_IN_FORCE' => null,
        );
        return $this->safe_string($timeInForces, $timeInForce, $timeInForce);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_cancelorders
         * @param {string} $id order $id
         * @param {string} $symbol not used by coinbase cancelOrder()
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $orders = $this->cancel_orders(array( $id ), $symbol, $params);
        return $this->safe_value($orders, 0, array());
    }

    public function cancel_orders($ids, ?string $symbol = null, $params = array ()) {
        /**
         * cancel multiple $orders
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_cancelorders
         * @param {string[]} $ids order $ids
         * @param {string} $symbol not used by coinbase cancelOrders()
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'order_ids' => $ids,
        );
        $response = $this->v3PrivatePostBrokerageOrdersBatchCancel (array_merge($request, $params));
        //
        //     {
        //         "results" => array(
        //             {
        //                 "success" => true,
        //                 "failure_reason" => "UNKNOWN_CANCEL_FAILURE_REASON",
        //                 "order_id" => "bb8851a3-4fda-4a2c-aa06-9048db0e0f0d"
        //             }
        //         )
        //     }
        //
        $orders = $this->safe_value($response, 'results', array());
        for ($i = 0; $i < count($orders); $i++) {
            $success = $this->safe_value($orders[$i], 'success');
            if ($success !== true) {
                throw new BadRequest($this->id . ' cancelOrders() has failed, check your arguments and parameters');
            }
        }
        return $this->parse_orders($orders, $market);
    }

    public function edit_order(string $id, $symbol, $type, $side, $amount = null, $price = null, $params = array ()) {
        /**
         * edit a trade order
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_editorder
         * @param {string} $id cancel order $id
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the base currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->preview] default to false, wether to use the test/preview endpoint or not
         * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'order_id' => $id,
        );
        if ($amount !== null) {
            $request['size'] = $this->amount_to_precision($symbol, $amount);
        }
        if ($price !== null) {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $preview = $this->safe_value_2($params, 'preview', 'test', false);
        $response = null;
        if ($preview) {
            $params = $this->omit($params, array( 'preview', 'test' ));
            $response = $this->v3PrivatePostBrokerageOrdersEditPreview (array_merge($request, $params));
        } else {
            $response = $this->v3PrivatePostBrokerageOrdersEdit (array_merge($request, $params));
        }
        //
        //     {
        //         "success" => true,
        //         "errors" => {
        //           "edit_failure_reason" => "UNKNOWN_EDIT_ORDER_FAILURE_REASON",
        //           "preview_failure_reason" => "UNKNOWN_PREVIEW_FAILURE_REASON"
        //         }
        //     }
        //
        return $this->parse_order($response, $market);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an $order made by the user
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorder
         * @param {string} $id the $order $id
         * @param {string} $symbol unified $market $symbol that the $order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
         */
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'order_id' => $id,
        );
        $response = $this->v3PrivateGetBrokerageOrdersHistoricalOrderId (array_merge($request, $params));
        //
        //     {
        //         "order" => {
        //             "order_id" => "9bc1eb3b-5b46-4b71-9628-ae2ed0cca75b",
        //             "product_id" => "LTC-BTC",
        //             "user_id" => "1111111-1111-1111-1111-111111111111",
        //             "order_configuration" => {
        //                 "limit_limit_gtc" => array(
        //                     "base_size" => "0.2",
        //                     "limit_price" => "0.006",
        //                     "post_only" => false
        //                 }
        //             ),
        //             "side" => "SELL",
        //             "client_order_id" => "e5fe8482-05bb-428f-ad4d-dbc8ce39239c",
        //             "status" => "OPEN",
        //             "time_in_force" => "GOOD_UNTIL_CANCELLED",
        //             "created_time" => "2023-01-16T23:37:23.947030Z",
        //             "completion_percentage" => "0",
        //             "filled_size" => "0",
        //             "average_filled_price" => "0",
        //             "fee" => "",
        //             "number_of_fills" => "0",
        //             "filled_value" => "0",
        //             "pending_cancel" => false,
        //             "size_in_quote" => false,
        //             "total_fees" => "0",
        //             "size_inclusive_of_fees" => false,
        //             "total_value_after_fees" => "0",
        //             "trigger_status" => "INVALID_ORDER_TYPE",
        //             "order_type" => "LIMIT",
        //             "reject_reason" => "REJECT_REASON_UNSPECIFIED",
        //             "settled" => false,
        //             "product_type" => "SPOT",
        //             "reject_message" => "",
        //             "cancel_message" => ""
        //         }
        //     }
        //
        $order = $this->safe_value($response, 'order', array());
        return $this->parse_order($order, $market);
    }

    public function fetch_orders(?string $symbol = null, ?int $since = null, $limit = 100, $params = array ()): array {
        /**
         * fetches information on multiple $orders made by the user
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
         * @param {string} $symbol unified $market $symbol that the $orders were made in
         * @param {int} [$since] the earliest time in ms to fetch $orders
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOrders', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchOrders', $symbol, $since, $limit, $params, 'cursor', 'cursor', null, 100);
        }
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array();
        if ($market !== null) {
            $request['product_id'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['start_date'] = $this->iso8601($since);
        }
        $until = $this->safe_value_n($params, array( 'until', 'till' ));
        if ($until !== null) {
            $params = $this->omit($params, array( 'until', 'till' ));
            $request['end_date'] = $this->iso8601($until);
        }
        $response = $this->v3PrivateGetBrokerageOrdersHistoricalBatch (array_merge($request, $params));
        //
        //     {
        //         "orders" => array(
        //             {
        //                 "order_id" => "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //                 "product_id" => "BTC-USDT",
        //                 "user_id" => "1111111-1111-1111-1111-111111111111",
        //                 "order_configuration" => array(
        //                     "market_market_ioc" => array(
        //                         "quote_size" => "6.36"
        //                     }
        //                 ),
        //                 "side" => "BUY",
        //                 "client_order_id" => "18eb9947-db49-4874-8e7b-39b8fe5f4317",
        //                 "status" => "FILLED",
        //                 "time_in_force" => "IMMEDIATE_OR_CANCEL",
        //                 "created_time" => "2023-01-18T01:37:37.975552Z",
        //                 "completion_percentage" => "100",
        //                 "filled_size" => "0.000297920684505",
        //                 "average_filled_price" => "21220.6399999973697697",
        //                 "fee" => "",
        //                 "number_of_fills" => "2",
        //                 "filled_value" => "6.3220675944333996",
        //                 "pending_cancel" => false,
        //                 "size_in_quote" => true,
        //                 "total_fees" => "0.0379324055666004",
        //                 "size_inclusive_of_fees" => true,
        //                 "total_value_after_fees" => "6.36",
        //                 "trigger_status" => "INVALID_ORDER_TYPE",
        //                 "order_type" => "MARKET",
        //                 "reject_reason" => "REJECT_REASON_UNSPECIFIED",
        //                 "settled" => true,
        //                 "product_type" => "SPOT",
        //                 "reject_message" => "",
        //                 "cancel_message" => "Internal error"
        //             ),
        //         ),
        //         "sequence" => "0",
        //         "has_next" => false,
        //         "cursor" => ""
        //     }
        //
        $orders = $this->safe_value($response, 'orders', array());
        $first = $this->safe_value($orders, 0);
        $cursor = $this->safe_string($response, 'cursor');
        if (($cursor !== null) && ($cursor !== '')) {
            $first['cursor'] = $cursor;
            $orders[0] = $first;
        }
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_orders_by_status($status, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        $this->load_markets();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array(
            'order_status' => $status,
        );
        if ($market !== null) {
            $request['product_id'] = $market['id'];
        }
        if ($limit === null) {
            $limit = 100;
        }
        $request['limit'] = $limit;
        if ($since !== null) {
            $request['start_date'] = $this->iso8601($since);
        }
        $until = $this->safe_value_n($params, array( 'until', 'till' ));
        if ($until !== null) {
            $params = $this->omit($params, array( 'until', 'till' ));
            $request['end_date'] = $this->iso8601($until);
        }
        $response = $this->v3PrivateGetBrokerageOrdersHistoricalBatch (array_merge($request, $params));
        //
        //     {
        //         "orders" => array(
        //             {
        //                 "order_id" => "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //                 "product_id" => "BTC-USDT",
        //                 "user_id" => "1111111-1111-1111-1111-111111111111",
        //                 "order_configuration" => array(
        //                     "market_market_ioc" => array(
        //                         "quote_size" => "6.36"
        //                     }
        //                 ),
        //                 "side" => "BUY",
        //                 "client_order_id" => "18eb9947-db49-4874-8e7b-39b8fe5f4317",
        //                 "status" => "FILLED",
        //                 "time_in_force" => "IMMEDIATE_OR_CANCEL",
        //                 "created_time" => "2023-01-18T01:37:37.975552Z",
        //                 "completion_percentage" => "100",
        //                 "filled_size" => "0.000297920684505",
        //                 "average_filled_price" => "21220.6399999973697697",
        //                 "fee" => "",
        //                 "number_of_fills" => "2",
        //                 "filled_value" => "6.3220675944333996",
        //                 "pending_cancel" => false,
        //                 "size_in_quote" => true,
        //                 "total_fees" => "0.0379324055666004",
        //                 "size_inclusive_of_fees" => true,
        //                 "total_value_after_fees" => "6.36",
        //                 "trigger_status" => "INVALID_ORDER_TYPE",
        //                 "order_type" => "MARKET",
        //                 "reject_reason" => "REJECT_REASON_UNSPECIFIED",
        //                 "settled" => true,
        //                 "product_type" => "SPOT",
        //                 "reject_message" => "",
        //                 "cancel_message" => "Internal error"
        //             ),
        //         ),
        //         "sequence" => "0",
        //         "has_next" => false,
        //         "cursor" => ""
        //     }
        //
        $orders = $this->safe_value($response, 'orders', array());
        $first = $this->safe_value($orders, 0);
        $cursor = $this->safe_string($response, 'cursor');
        if (($cursor !== null) && ($cursor !== '')) {
            $first['cursor'] = $cursor;
            $orders[0] = $first;
        }
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on all currently open orders
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
         * @param {string} $symbol unified market $symbol of the orders
         * @param {int} [$since] timestamp in ms of the earliest order, default is null
         * @param {int} [$limit] the maximum number of open order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOpenOrders', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchOpenOrders', $symbol, $since, $limit, $params, 'cursor', 'cursor', null, 100);
        }
        return $this->fetch_orders_by_status('OPEN', $symbol, $since, $limit, $params);
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple closed orders made by the user
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
         * @param {string} $symbol unified market $symbol of the orders
         * @param {int} [$since] timestamp in ms of the earliest order, default is null
         * @param {int} [$limit] the maximum number of closed order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchClosedOrders', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchClosedOrders', $symbol, $since, $limit, $params, 'cursor', 'cursor', null, 100);
        }
        return $this->fetch_orders_by_status('FILLED', $symbol, $since, $limit, $params);
    }

    public function fetch_canceled_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetches information on multiple canceled orders made by the user
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_gethistoricalorders
         * @param {string} $symbol unified market $symbol of the orders
         * @param {int} [$since] timestamp in ms of the earliest order, default is null
         * @param {int} [$limit] the maximum number of canceled order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        return $this->fetch_orders_by_status('CANCELLED', $symbol, $since, $limit, $params);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getcandles
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of $candles to fetch, not used by coinbase
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {int[][]} A list of $candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOHLCV', 'paginate', false);
        if ($paginate) {
            return $this->fetch_paginated_call_deterministic('fetchOHLCV', $symbol, $since, $limit, $timeframe, $params, 299);
        }
        $market = $this->market($symbol);
        $request = array(
            'product_id' => $market['id'],
            'granularity' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
        );
        $until = $this->safe_value_n($params, array( 'until', 'till', 'end' ));
        $params = $this->omit($params, array( 'until', 'till' ));
        $duration = $this->parse_timeframe($timeframe);
        $candles300 = 300 * $duration;
        $sinceString = null;
        if ($since !== null) {
            $sinceString = $this->number_to_string($this->parse_to_int($since / 1000));
        } else {
            $now = (string) $this->seconds();
            $sinceString = Precise::string_sub($now, (string) $candles300);
        }
        $request['start'] = $sinceString;
        $endString = $this->number_to_string($until);
        if ($until === null) {
            // 300 $candles max
            $endString = Precise::string_add($sinceString, (string) $candles300);
        }
        $request['end'] = $endString;
        $response = $this->v3PrivateGetBrokerageProductsProductIdCandles (array_merge($request, $params));
        //
        //     {
        //         "candles" => array(
        //             array(
        //                 "start" => "1673391780",
        //                 "low" => "17414.36",
        //                 "high" => "17417.99",
        //                 "open" => "17417.74",
        //                 "close" => "17417.38",
        //                 "volume" => "1.87780853"
        //             ),
        //         )
        //     }
        //
        $candles = $this->safe_value($response, 'candles', array());
        return $this->parse_ohlcvs($candles, $market, $timeframe, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //         array(
        //             "start" => "1673391780",
        //             "low" => "17414.36",
        //             "high" => "17417.99",
        //             "open" => "17417.74",
        //             "close" => "17417.38",
        //             "volume" => "1.87780853"
        //         ),
        //     )
        //
        return array(
            $this->safe_timestamp($ohlcv, 'start'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getmarkettrades
         * @param {string} $symbol unified $market $symbol of the $trades
         * @param {int} [$since] not used by coinbase fetchTrades
         * @param {int} [$limit] the maximum number of trade structures to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'product_id' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v3PrivateGetBrokerageProductsProductIdTicker (array_merge($request, $params));
        //
        //     {
        //         "trades" => array(
        //             array(
        //                 "trade_id" => "10092327",
        //                 "product_id" => "BTC-USDT",
        //                 "price" => "17488.12",
        //                 "size" => "0.0000623",
        //                 "time" => "2023-01-11T00:52:37.557001Z",
        //                 "side" => "BUY",
        //                 "bid" => "",
        //                 "ask" => ""
        //             ),
        //         )
        //     }
        //
        $trades = $this->safe_value($response, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all $trades made by the user
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getfills
         * @param {string} $symbol unified $market $symbol of the $trades
         * @param {int} [$since] timestamp in ms of the earliest order, default is null
         * @param {int} [$limit] the maximum number of trade structures to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch $trades for
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchMyTrades', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchMyTrades', $symbol, $since, $limit, $params, 'cursor', 'cursor', null, 100);
        }
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array();
        if ($market !== null) {
            $request['product_id'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['start_sequence_timestamp'] = $this->iso8601($since);
        }
        $until = $this->safe_value_n($params, array( 'until', 'till' ));
        if ($until !== null) {
            $params = $this->omit($params, array( 'until', 'till' ));
            $request['end_sequence_timestamp'] = $this->iso8601($until);
        }
        $response = $this->v3PrivateGetBrokerageOrdersHistoricalFills (array_merge($request, $params));
        //
        //     {
        //         "fills" => array(
        //             array(
        //                 "entry_id" => "b88b82cc89e326a2778874795102cbafd08dd979a2a7a3c69603fc4c23c2e010",
        //                 "trade_id" => "cdc39e45-bbd3-44ec-bf02-61742dfb16a1",
        //                 "order_id" => "813a53c5-3e39-47bb-863d-2faf685d22d8",
        //                 "trade_time" => "2023-01-18T01:37:38.091377090Z",
        //                 "trade_type" => "FILL",
        //                 "price" => "21220.64",
        //                 "size" => "0.0046830664333996",
        //                 "commission" => "0.0000280983986004",
        //                 "product_id" => "BTC-USDT",
        //                 "sequence_timestamp" => "2023-01-18T01:37:38.092520Z",
        //                 "liquidity_indicator" => "UNKNOWN_LIQUIDITY_INDICATOR",
        //                 "size_in_quote" => true,
        //                 "user_id" => "1111111-1111-1111-1111-111111111111",
        //                 "side" => "BUY"
        //             ),
        //         ),
        //         "cursor" => ""
        //     }
        //
        $trades = $this->safe_value($response, 'fills', array());
        $first = $this->safe_value($trades, 0);
        $cursor = $this->safe_string($response, 'cursor');
        if (($cursor !== null) && ($cursor !== '')) {
            $first['cursor'] = $cursor;
            $trades[0] = $first;
        }
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getproductbook
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'product_id' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->v3PrivateGetBrokerageProductBook (array_merge($request, $params));
        //
        //     {
        //         "pricebook" => {
        //             "product_id" => "BTC-USDT",
        //             "bids" => array(
        //                 array(
        //                     "price" => "30757.85",
        //                     "size" => "0.115"
        //                 ),
        //             ),
        //             "asks" => array(
        //                 array(
        //                     "price" => "30759.07",
        //                     "size" => "0.04877659"
        //                 ),
        //             ),
        //             "time" => "2023-06-30T04:02:40.533606Z"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'pricebook', array());
        $time = $this->safe_string($data, 'time');
        $timestamp = $this->parse8601($time);
        return $this->parse_order_book($data, $symbol, $timestamp, 'bids', 'asks', 'price', 'size');
    }

    public function fetch_bids_asks(?array $symbols = null, $params = array ()) {
        /**
         * fetches the bid and ask price and volume for multiple markets
         * @see https://docs.cloud.coinbase.com/advanced-trade-api/reference/retailbrokerageapi_getbestbidask
         * @param {string[]} [$symbols] unified $symbols of the markets to fetch the bids and asks for, all markets are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        // the 'product_ids' param isn't working properly and returns array("pricebooks":array()) when defined
        $response = $this->v3PrivateGetBrokerageBestBidAsk ($params);
        //
        //     {
        //         "pricebooks" => array(
        //             {
        //                 "product_id" => "TRAC-EUR",
        //                 "bids" => array(
        //                     {
        //                         "price" => "0.2384",
        //                         "size" => "386.1"
        //                     }
        //                 ),
        //                 "asks" => array(
        //                     array(
        //                         "price" => "0.2406",
        //                         "size" => "672"
        //                     }
        //                 ),
        //                 "time" => "2023-06-30T07:15:24.656044Z"
        //             ),
        //         )
        //     }
        //
        $tickers = $this->safe_value($response, 'pricebooks', array());
        return $this->parse_tickers($tickers, $symbols);
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        /**
         * make a withdrawal
         * @see https://docs.cloud.coinbase.com/sign-in-with-coinbase/docs/api-transactions#send-money
         * @param {string} $code unified $currency $code
         * @param {float} $amount the $amount to withdraw
         * @param {string} $address the $address to withdraw to
         * @param {string} [$tag] an optional $tag for the withdrawal
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
         */
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $accountId = $this->safe_string_2($params, 'account_id', 'accountId');
        $params = $this->omit($params, array( 'account_id', 'accountId' ));
        if ($accountId === null) {
            if ($code === null) {
                throw new ArgumentsRequired($this->id . ' withdraw() requires an account_id (or $accountId) parameter OR a $currency $code argument');
            }
            $accountId = $this->find_account_id($code);
            if ($accountId === null) {
                throw new ExchangeError($this->id . ' withdraw() could not find account id for ' . $code);
            }
        }
        $request = array(
            'account_id' => $accountId,
            'type' => 'send',
            'to' => $address,
            'amount' => $amount,
            'currency' => $currency['id'],
        );
        if ($tag !== null) {
            $request['destination_tag'] = $tag;
        }
        $response = $this->v2PrivatePostAccountsAccountIdTransactions (array_merge($request, $params));
        //
        //     {
        //         "data" => {
        //             "id" => "a1794ecf-5693-55fa-70cf-ef731748ed82",
        //             "type" => "send",
        //             "status" => "pending",
        //             "amount" => array(
        //                 "amount" => "-14.008308",
        //                 "currency" => "USDC"
        //             ),
        //             "native_amount" => array(
        //                 "amount" => "-18.74",
        //                 "currency" => "CAD"
        //             ),
        //             "description" => null,
        //             "created_at" => "2024-01-12T01:27:31Z",
        //             "updated_at" => "2024-01-12T01:27:31Z",
        //             "resource" => "transaction",
        //             "resource_path" => "/v2/accounts/a34bgfad-ed67-538b-bffc-730c98c10da0/transactions/a1794ecf-5693-55fa-70cf-ef731748ed82",
        //             "instant_exchange" => false,
        //             "network" => array(
        //                 "status" => "pending",
        //                 "status_description" => "Pending (est. less than 10 minutes)",
        //                 "transaction_fee" => array(
        //                     "amount" => "4.008308",
        //                     "currency" => "USDC"
        //                 ),
        //                 "transaction_amount" => array(
        //                     "amount" => "10.000000",
        //                     "currency" => "USDC"
        //                 ),
        //                 "confirmations" => 0
        //             ),
        //             "to" => {
        //                 "resource" => "ethereum_address",
        //                 "address" => "0x9...",
        //                 "currency" => "USDC",
        //                 "address_info" => array(
        //                     "address" => "0x9..."
        //                 }
        //             ),
        //             "idem" => "748d8591-dg9a-7831-a45b-crd61dg78762",
        //             "details" => array(
        //                 "title" => "Sent USDC",
        //                 "subtitle" => "To USDC $address on Ethereum network",
        //                 "header" => "Sent 14.008308 USDC ($18.74)",
        //                 "health" => "warning"
        //             ),
        //             "hide_native_amount" => false
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transaction($data, $currency);
    }

    public function sign($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $version = $api[0];
        $signed = $api[1] === 'private';
        $pathPart = ($version === 'v3') ? 'api/v3' : 'v2';
        $fullPath = '/' . $pathPart . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $savedPath = $fullPath;
        if ($method === 'GET') {
            if ($query) {
                $fullPath .= '?' . $this->urlencode($query);
            }
        }
        $url = $this->urls['api']['rest'] . $fullPath;
        if ($signed) {
            $authorization = $this->safe_string($this->headers, 'Authorization');
            if ($authorization !== null) {
                $headers = array(
                    'Authorization' => $authorization,
                    'Content-Type' => 'application/json',
                );
            } elseif ($this->token) {
                $headers = array(
                    'Authorization' => 'Bearer ' . $this->token,
                    'Content-Type' => 'application/json',
                );
            } else {
                $this->check_required_credentials();
                $nonce = (string) $this->nonce();
                $payload = '';
                if ($method !== 'GET') {
                    if ($query) {
                        $body = $this->json($query);
                        $payload = $body;
                    }
                }
                $auth = null;
                if ($version === 'v3') {
                    $auth = $nonce . $method . $savedPath . $payload;
                } else {
                    $auth = $nonce . $method . $fullPath . $payload;
                }
                $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256');
                $headers = array(
                    'CB-ACCESS-KEY' => $this->apiKey,
                    'CB-ACCESS-SIGN' => $signature,
                    'CB-ACCESS-TIMESTAMP' => $nonce,
                    'Content-Type' => 'application/json',
                );
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // fallback to default error handler
        }
        $feedback = $this->id . ' ' . $body;
        //
        //    array("error" => "invalid_request", "error_description" => "The request is missing a required parameter, includes an unsupported parameter value, or is otherwise malformed.")
        //
        // or
        //
        //    {
        //      "errors" => array(
        //        {
        //          "id" => "not_found",
        //          "message" => "Not found"
        //        }
        //      )
        //    }
        //
        $errorCode = $this->safe_string($response, 'error');
        if ($errorCode !== null) {
            $errorMessage = $this->safe_string($response, 'error_description');
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $errorMessage, $feedback);
            throw new ExchangeError($feedback);
        }
        $errors = $this->safe_value($response, 'errors');
        if ($errors !== null) {
            if (gettype($errors) === 'array' && array_keys($errors) === array_keys(array_keys($errors))) {
                $numErrors = count($errors);
                if ($numErrors > 0) {
                    $errorCode = $this->safe_string($errors[0], 'id');
                    $errorMessage = $this->safe_string($errors[0], 'message');
                    if ($errorCode !== null) {
                        $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
                        $this->throw_broadly_matched_exception($this->exceptions['broad'], $errorMessage, $feedback);
                        throw new ExchangeError($feedback);
                    }
                }
            }
        }
        $advancedTrade = $this->options['advanced'];
        $data = $this->safe_value($response, 'data');
        if (($data === null) && (!$advancedTrade)) {
            throw new ExchangeError($this->id . ' failed due to a malformed $response ' . $this->json($response));
        }
        return null;
    }
}
