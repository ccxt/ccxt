<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\bitget as Exchange;

class bitget extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bitget',
            'name' => 'Bitget',
            'countries' => array( 'SG' ),
            'version' => 'v2',
            'rateLimit' => 50, // up to 3000 requests per 5 minutes ≈ 600 requests per minute ≈ 10 requests per second ≈ 100 ms
            'certified' => true,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => true,
                'option' => false,
                'addMargin' => true,
                'borrowCrossMargin' => true,
                'borrowIsolatedMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => true,
                'closeAllPositions' => true,
                'closePosition' => true,
                'createDepositAddress' => false,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createOrders' => true,
                'createOrderWithTakeProfitAndStopLoss' => true,
                'createPostOnlyOrder' => true,
                'createReduceOnlyOrder' => false,
                'createStopLimitOrder' => true,
                'createStopLossOrder' => true,
                'createStopMarketOrder' => true,
                'createStopOrder' => true,
                'createTakeProfitOrder' => true,
                'createTrailingAmountOrder' => false,
                'createTrailingPercentOrder' => true,
                'createTriggerOrder' => true,
                'editOrder' => true,
                'fetchAccounts' => false,
                'fetchBalance' => true,
                'fetchBorrowInterest' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchCanceledAndClosedOrders' => true,
                'fetchCanceledOrders' => true,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => true,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDeposits' => true,
                'fetchDepositsWithdrawals' => false,
                'fetchDepositWithdrawFee' => 'emulated',
                'fetchDepositWithdrawFees' => true,
                'fetchFundingHistory' => true,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => true,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => true,
                'fetchIsolatedBorrowRate' => true,
                'fetchIsolatedBorrowRates' => false,
                'fetchLedger' => true,
                'fetchLeverage' => true,
                'fetchLeverageTiers' => false,
                'fetchLiquidations' => false,
                'fetchMarginMode' => false,
                'fetchMarketLeverageTiers' => true,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => true,
                'fetchMyLiquidations' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => false,
                'fetchPosition' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchPositionsRisk' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => true,
                'fetchTransactions' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => true,
                'fetchWithdrawAddresses' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => true,
                'reduceMargin' => true,
                'repayCrossMargin' => true,
                'repayIsolatedMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => true,
                'setPositionMode' => true,
                'signIn' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '3d' => '3d',
                '1w' => '1w',
                '1M' => '1m',
            ),
            'hostname' => 'bitget.com',
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/195989417-4253ddb0-afbe-4a1c-9dea-9dbcd121fa5d.jpg',
                'api' => array(
                    'spot' => 'https://api.{hostname}',
                    'mix' => 'https://api.{hostname}',
                    'user' => 'https://api.{hostname}',
                    'p2p' => 'https://api.{hostname}',
                    'broker' => 'https://api.{hostname}',
                    'margin' => 'https://api.{hostname}',
                    'common' => 'https://api.{hostname}',
                    'tax' => 'https://api.{hostname}',
                    'convert' => 'https://api.{hostname}',
                    'copy' => 'https://api.{hostname}',
                    'earn' => 'https://api.{hostname}',
                ),
                'www' => 'https://www.bitget.com',
                'doc' => array(
                    'https://www.bitget.com/api-doc/common/intro',
                    'https://www.bitget.com/api-doc/spot/intro',
                    'https://www.bitget.com/api-doc/contract/intro',
                    'https://www.bitget.com/api-doc/broker/intro',
                    'https://www.bitget.com/api-doc/margin/intro',
                    'https://www.bitget.com/api-doc/copytrading/intro',
                    'https://www.bitget.com/api-doc/earn/intro',
                    'https://bitgetlimited.github.io/apidoc/en/mix',
                    'https://bitgetlimited.github.io/apidoc/en/spot',
                    'https://bitgetlimited.github.io/apidoc/en/broker',
                    'https://bitgetlimited.github.io/apidoc/en/margin',
                ),
                'fees' => 'https://www.bitget.cc/zh-CN/rate?tab=1',
                'referral' => 'https://www.bitget.com/expressly?languageType=0&channelCode=ccxt&vipCode=tg9j',
            ),
            'api' => array(
                'public' => array(
                    'common' => array(
                        'get' => array(
                            'v2/public/annoucements' => 1,
                            'v2/public/time' => 1,
                        ),
                    ),
                    'spot' => array(
                        'get' => array(
                            'spot/v1/notice/queryAllNotices' => 1, // 20 times/1s (IP) => 20/20 = 1
                            'spot/v1/public/time' => 1,
                            'spot/v1/public/currencies' => 6.6667, // 3 times/1s (IP) => 20/3 = 6.6667
                            'spot/v1/public/products' => 1,
                            'spot/v1/public/product' => 1,
                            'spot/v1/market/ticker' => 1,
                            'spot/v1/market/tickers' => 1,
                            'spot/v1/market/fills' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'spot/v1/market/fills-history' => 2,
                            'spot/v1/market/candles' => 1,
                            'spot/v1/market/depth' => 1,
                            'spot/v1/market/spot-vip-level' => 2,
                            'spot/v1/market/merge-depth' => 1,
                            'spot/v1/market/history-candles' => 1,
                            'spot/v1/public/loan/coinInfos' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'spot/v1/public/loan/hour-interest' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'v2/spot/public/coins' => 6.6667,
                            'v2/spot/public/symbols' => 1,
                            'v2/spot/market/vip-fee-rate' => 2,
                            'v2/spot/market/tickers' => 1,
                            'v2/spot/market/merge-depth' => 1,
                            'v2/spot/market/orderbook' => 1,
                            'v2/spot/market/candles' => 1,
                            'v2/spot/market/history-candles' => 1,
                            'v2/spot/market/fills' => 2,
                            'v2/spot/market/fills-history' => 2,
                        ),
                    ),
                    'mix' => array(
                        'get' => array(
                            'mix/v1/market/contracts' => 1,
                            'mix/v1/market/depth' => 1,
                            'mix/v1/market/ticker' => 1,
                            'mix/v1/market/tickers' => 1,
                            'mix/v1/market/contract-vip-level' => 2,
                            'mix/v1/market/fills' => 1,
                            'mix/v1/market/fills-history' => 2,
                            'mix/v1/market/candles' => 1,
                            'mix/v1/market/index' => 1,
                            'mix/v1/market/funding-time' => 1,
                            'mix/v1/market/history-fundRate' => 1,
                            'mix/v1/market/current-fundRate' => 1,
                            'mix/v1/market/open-interest' => 1,
                            'mix/v1/market/mark-price' => 1,
                            'mix/v1/market/symbol-leverage' => 1,
                            'mix/v1/market/queryPositionLever' => 1,
                            'mix/v1/market/open-limit' => 1,
                            'mix/v1/market/history-candles' => 1,
                            'mix/v1/market/history-index-candles' => 1,
                            'mix/v1/market/history-mark-candles' => 1,
                            'mix/v1/market/merge-depth' => 1,
                            'v2/mix/market/vip-fee-rate' => 2,
                            'v2/mix/market/merge-depth' => 1,
                            'v2/mix/market/ticker' => 1,
                            'v2/mix/market/tickers' => 1,
                            'v2/mix/market/fills' => 1,
                            'v2/mix/market/fills-history' => 2,
                            'v2/mix/market/candles' => 1,
                            'v2/mix/market/history-candles' => 1,
                            'v2/mix/market/history-index-candles' => 1,
                            'v2/mix/market/history-mark-candles' => 1,
                            'v2/mix/market/open-interest' => 1,
                            'v2/mix/market/funding-time' => 1,
                            'v2/mix/market/symbol-price' => 1,
                            'v2/mix/market/history-fund-rate' => 1,
                            'v2/mix/market/current-fund-rate' => 1,
                            'v2/mix/market/contracts' => 1,
                            'v2/mix/market/query-position-lever' => 2,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'margin/v1/cross/public/interestRateAndLimit' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'margin/v1/isolated/public/interestRateAndLimit' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'margin/v1/cross/public/tierData' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'margin/v1/isolated/public/tierData' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'margin/v1/public/currencies' => 1, // 20 times/1s (IP) => 20/20 = 1
                            'v2/margin/currencies' => 2,
                        ),
                    ),
                    'earn' => array(
                        'get' => array(
                            'v2/earn/loan/public/coinInfos' => 2,
                            'v2/earn/loan/public/hour-interest' => 2,
                        ),
                    ),
                ),
                'private' => array(
                    'spot' => array(
                        'get' => array(
                            'spot/v1/wallet/deposit-address' => 4,
                            'spot/v1/wallet/withdrawal-list' => 1,
                            'spot/v1/wallet/deposit-list' => 1,
                            'spot/v1/account/getInfo' => 20,
                            'spot/v1/account/assets' => 2,
                            'spot/v1/account/assets-lite' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/account/transferRecords' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'spot/v1/convert/currencies' => 2,
                            'spot/v1/convert/convert-record' => 2,
                            'spot/v1/loan/ongoing-orders' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/loan/repay-history' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/loan/revise-history' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/loan/borrow-history' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/loan/debts' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/spot/trade/orderInfo' => 1,
                            'v2/spot/trade/unfilled-orders' => 1,
                            'v2/spot/trade/history-orders' => 1,
                            'v2/spot/trade/fills' => 2,
                            'v2/spot/trade/current-plan-order' => 1,
                            'v2/spot/trade/history-plan-order' => 1,
                            'v2/spot/account/info' => 20,
                            'v2/spot/account/assets' => 2,
                            'v2/spot/account/subaccount-assets' => 2,
                            'v2/spot/account/bills' => 2,
                            'v2/spot/account/transferRecords' => 1,
                            'v2/spot/wallet/deposit-address' => 2,
                            'v2/spot/wallet/deposit-records' => 2,
                            'v2/spot/wallet/withdrawal-records' => 2,
                        ),
                        'post' => array(
                            'spot/v1/wallet/transfer' => 4,
                            'spot/v1/wallet/transfer-v2' => 4,
                            'spot/v1/wallet/subTransfer' => 10,
                            'spot/v1/wallet/withdrawal' => 4,
                            'spot/v1/wallet/withdrawal-v2' => 4,
                            'spot/v1/wallet/withdrawal-inner' => 4,
                            'spot/v1/wallet/withdrawal-inner-v2' => 4,
                            'spot/v1/account/sub-account-spot-assets' => 200,
                            'spot/v1/account/bills' => 2,
                            'spot/v1/trade/orders' => 2,
                            'spot/v1/trade/batch-orders' => 4,
                            'spot/v1/trade/cancel-order' => 2,
                            'spot/v1/trade/cancel-order-v2' => 2,
                            'spot/v1/trade/cancel-symbol-order' => 2,
                            'spot/v1/trade/cancel-batch-orders' => 4,
                            'spot/v1/trade/cancel-batch-orders-v2' => 4,
                            'spot/v1/trade/orderInfo' => 1,
                            'spot/v1/trade/open-orders' => 1,
                            'spot/v1/trade/history' => 1,
                            'spot/v1/trade/fills' => 1,
                            'spot/v1/plan/placePlan' => 1,
                            'spot/v1/plan/modifyPlan' => 1,
                            'spot/v1/plan/cancelPlan' => 1,
                            'spot/v1/plan/currentPlan' => 1,
                            'spot/v1/plan/historyPlan' => 1,
                            'spot/v1/plan/batchCancelPlan' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/convert/quoted-price' => 4,
                            'spot/v1/convert/trade' => 4,
                            'spot/v1/loan/borrow' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/loan/repay' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/loan/revise-pledge' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/order/orderCurrentList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/order/orderHistoryList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/order/closeTrackingOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/order/updateTpsl' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/order/followerEndOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/order/spotInfoList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/config/getTraderSettings' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/config/getFollowerSettings' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/user/myTraders' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/config/setFollowerConfig' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/user/myFollowers' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/config/setProductCode' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/user/removeTrader' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/getRemovableFollower' => 2,
                            'spot/v1/trace/user/removeFollower' => 2,
                            'spot/v1/trace/profit/totalProfitInfo' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/profit/totalProfitList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/profit/profitHisList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/profit/profitHisDetailList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/profit/waitProfitDetailList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'spot/v1/trace/user/getTraderInfo' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/spot/trade/place-order' => 2,
                            'v2/spot/trade/cancel-order' => 2,
                            'v2/spot/trade/batch-orders' => 20,
                            'v2/spot/trade/batch-cancel-order' => 2,
                            'v2/spot/trade/cancel-symbol-order' => 4,
                            'v2/spot/trade/place-plan-order' => 1,
                            'v2/spot/trade/modify-plan-order' => 1,
                            'v2/spot/trade/cancel-plan-order' => 1,
                            'v2/spot/trade/batch-cancel-plan-order' => 2,
                            'v2/spot/wallet/transfer' => 2,
                            'v2/spot/wallet/subaccount-transfer' => 2,
                            'v2/spot/wallet/withdrawal' => 2,
                        ),
                    ),
                    'mix' => array(
                        'get' => array(
                            'mix/v1/account/account' => 2,
                            'mix/v1/account/accounts' => 2,
                            'mix/v1/position/singlePosition' => 2,
                            'mix/v1/position/singlePosition-v2' => 2,
                            'mix/v1/position/allPosition' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/position/allPosition-v2' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/position/history-position' => 1,
                            'mix/v1/account/accountBill' => 2,
                            'mix/v1/account/accountBusinessBill' => 4,
                            'mix/v1/order/current' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/order/marginCoinCurrent' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/order/history' => 2,
                            'mix/v1/order/historyProductType' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/order/detail' => 2,
                            'mix/v1/order/fills' => 2,
                            'mix/v1/order/allFills' => 2,
                            'mix/v1/plan/currentPlan' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/plan/historyPlan' => 2,
                            'mix/v1/trace/currentTrack' => 2,
                            'mix/v1/trace/followerOrder' => 2,
                            'mix/v1/trace/followerHistoryOrders' => 2,
                            'mix/v1/trace/historyTrack' => 2,
                            'mix/v1/trace/summary' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/trace/profitSettleTokenIdGroup' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/trace/profitDateGroupList' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/trade/profitDateList' => 2,
                            'mix/v1/trace/waitProfitDateList' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/trace/traderSymbols' => 1, // 20 times/1s (UID) => 20/20 = 1
                            'mix/v1/trace/traderList' => 2,
                            'mix/v1/trace/traderDetail' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/queryTraceConfig' => 2,
                            'v2/mix/account/account' => 2,
                            'v2/mix/account/accounts' => 2,
                            'v2/mix/account/sub-account-assets' => 200,
                            'v2/mix/account/open-count' => 2,
                            'v2/mix/account/bill' => 2,
                            'v2/mix/market/query-position-lever' => 2,
                            'v2/mix/position/single-position' => 2,
                            'v2/mix/position/all-position' => 4,
                            'v2/mix/position/history-position' => 1,
                            'v2/mix/order/detail' => 2,
                            'v2/mix/order/fills' => 2,
                            'v2/mix/order/fill-history' => 2,
                            'v2/mix/order/orders-pending' => 2,
                            'v2/mix/order/orders-history' => 2,
                            'v2/mix/order/orders-plan-pending' => 2,
                            'v2/mix/order/orders-plan-history' => 2,
                        ),
                        'post' => array(
                            'mix/v1/account/sub-account-contract-assets' => 200, // 0.1 times/1s (UID) => 20/0.1 = 200
                            'mix/v1/account/open-count' => 1,
                            'mix/v1/account/setLeverage' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/account/setMargin' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/account/setMarginMode' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/account/setPositionMode' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/order/placeOrder' => 2,
                            'mix/v1/order/batch-orders' => 2,
                            'mix/v1/order/cancel-order' => 2,
                            'mix/v1/order/cancel-batch-orders' => 2,
                            'mix/v1/order/modifyOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/order/cancel-symbol-orders' => 2,
                            'mix/v1/order/cancel-all-orders' => 2,
                            'mix/v1/order/close-all-positions' => 20,
                            'mix/v1/plan/placePlan' => 2,
                            'mix/v1/plan/modifyPlan' => 2,
                            'mix/v1/plan/modifyPlanPreset' => 2,
                            'mix/v1/plan/placeTPSL' => 2,
                            'mix/v1/plan/placeTrailStop' => 2,
                            'mix/v1/plan/placePositionsTPSL' => 2,
                            'mix/v1/plan/modifyTPSLPlan' => 2,
                            'mix/v1/plan/cancelPlan' => 2,
                            'mix/v1/plan/cancelSymbolPlan' => 2,
                            'mix/v1/plan/cancelAllPlan' => 2,
                            'mix/v1/trace/closeTrackOrder' => 2,
                            'mix/v1/trace/modifyTPSL' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/closeTrackOrderBySymbol' => 2,
                            'mix/v1/trace/setUpCopySymbols' => 2,
                            'mix/v1/trace/followerSetBatchTraceConfig' => 2,
                            'mix/v1/trace/followerCloseByTrackingNo' => 2,
                            'mix/v1/trace/followerCloseByAll' => 2,
                            'mix/v1/trace/followerSetTpsl' => 2,
                            'mix/v1/trace/cancelCopyTrader' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'mix/v1/trace/traderUpdateConfig' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/myTraderList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/myFollowerList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/removeFollower' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/public/getFollowerConfig' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/report/order/historyList' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'mix/v1/trace/report/order/currentList' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'mix/v1/trace/queryTraderTpslRatioConfig' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'mix/v1/trace/traderUpdateTpslRatioConfig' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/mix/account/set-leverage' => 4,
                            'v2/mix/account/set-margin' => 4,
                            'v2/mix/account/set-margin-mode' => 4,
                            'v2/mix/account/set-position-mode' => 4,
                            'v2/mix/order/place-order' => 20,
                            'v2/mix/order/click-backhand' => 20,
                            'v2/mix/order/batch-place-order' => 20,
                            'v2/mix/order/modify-order' => 2,
                            'v2/mix/order/cancel-order' => 2,
                            'v2/mix/order/batch-cancel-orders' => 2,
                            'v2/mix/order/close-positions' => 20,
                            'v2/mix/order/place-tpsl-order' => 2,
                            'v2/mix/order/place-plan-order' => 2,
                            'v2/mix/order/modify-tpsl-order' => 2,
                            'v2/mix/order/modify-plan-order' => 2,
                            'v2/mix/order/cancel-plan-order' => 2,
                        ),
                    ),
                    'user' => array(
                        'get' => array(
                            'user/v1/fee/query' => 2,
                            'user/v1/sub/virtual-list' => 2,
                            'user/v1/sub/virtual-api-list' => 2,
                            'user/v1/tax/spot-record' => 1,
                            'user/v1/tax/future-record' => 1,
                            'user/v1/tax/margin-record' => 1,
                            'user/v1/tax/p2p-record' => 1,
                            'v2/user/virtual-subaccount-list' => 2,
                            'v2/user/virtual-subaccount-apikey-list' => 2,
                        ),
                        'post' => array(
                            'user/v1/sub/virtual-create' => 4,
                            'user/v1/sub/virtual-modify' => 4,
                            'user/v1/sub/virtual-api-batch-create' => 20, // 1 times/1s (UID) => 20/1 = 20
                            'user/v1/sub/virtual-api-create' => 4,
                            'user/v1/sub/virtual-api-modify' => 4,
                            'v2/user/create-virtual-subaccount' => 4,
                            'v2/user/modify-virtual-subaccount' => 4,
                            'v2/user/batch-create-subaccount-and-apikey' => 20,
                            'v2/user/create-virtual-subaccount-apikey' => 4,
                            'v2/user/modify-virtual-subaccount-apikey' => 4,
                        ),
                    ),
                    'p2p' => array(
                        'get' => array(
                            'p2p/v1/merchant/merchantList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'p2p/v1/merchant/merchantInfo' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'p2p/v1/merchant/advList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'p2p/v1/merchant/orderList' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/p2p/merchantList' => 2,
                            'v2/p2p/merchantInfo' => 2,
                            'v2/p2p/orderList' => 2,
                            'v2/p2p/advList' => 2,
                        ),
                    ),
                    'broker' => array(
                        'get' => array(
                            'broker/v1/account/info' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'broker/v1/account/sub-list' => 20, // 1 times/1s (UID) => 20/1 = 20
                            'broker/v1/account/sub-email' => 20, // 1 times/1s (UID) => 20/1 = 20
                            'broker/v1/account/sub-spot-assets' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'broker/v1/account/sub-future-assets' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'broker/v1/account/subaccount-transfer' => 1, // unknown
                            'broker/v1/account/subaccount-deposit' => 1, // unknown
                            'broker/v1/account/subaccount-withdrawal' => 1, // unknown
                            'broker/v1/account/sub-api-list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/broker/account/info' => 2,
                            'v2/broker/account/subaccount-list' => 20,
                            'v2/broker/account/subaccount-email' => 2,
                            'v2/broker/account/subaccount-spot-assets' => 2,
                            'v2/broker/account/subaccount-future-assets' => 2,
                            'v2/broker/manage/subaccount-apikey-list' => 2,
                        ),
                        'post' => array(
                            'broker/v1/account/sub-create' => 20, // 1 times/1s (UID) => 20/1 = 20
                            'broker/v1/account/sub-modify' => 20, // 1 times/1s (UID) => 20/1 = 20
                            'broker/v1/account/sub-modify-email' => 20, // 1 times/1s (UID) => 20/1 = 20
                            'broker/v1/account/sub-address' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'broker/v1/account/sub-withdrawal' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'broker/v1/account/sub-auto-transfer' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'broker/v1/account/sub-api-create' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'broker/v1/account/sub-api-modify' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/broker/account/modify-subaccount-email' => 2,
                            'v2/broker/account/create-subaccount' => 20,
                            'v2/broker/account/modify-subaccount' => 20,
                            'v2/broker/account/subaccount-address' => 2,
                            'v2/broker/account/subaccount-withdrawal' => 2,
                            'v2/broker/account/set-subaccount-autotransfer' => 2,
                            'v2/broker/manage/create-subaccount-apikey' => 2,
                            'v2/broker/manage/modify-subaccount-apikey' => 2,
                        ),
                    ),
                    'margin' => array(
                        'get' => array(
                            'margin/v1/cross/account/riskRate' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/account/maxTransferOutAmount' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/maxTransferOutAmount' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/order/openOrders' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/order/history' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/order/fills' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/loan/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/repay/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/interest/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/liquidation/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/fin/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/openOrders' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/history' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/fills' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/loan/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/repay/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/interest/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/liquidation/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/fin/list' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/account/assets' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'margin/v1/isolated/account/assets' => 2, // 10 times/1s (IP) => 20/10 = 2
                            'v2/margin/crossed/borrow-history' => 2,
                            'v2/margin/crossed/repay-history' => 2,
                            'v2/margin/crossed/interest-history' => 2,
                            'v2/margin/crossed/liquidation-history' => 2,
                            'v2/margin/crossed/financial-records' => 2,
                            'v2/margin/crossed/account/assets' => 2,
                            'v2/margin/crossed/account/risk-rate' => 2,
                            'v2/margin/crossed/account/max-borrowable-amount' => 2,
                            'v2/margin/crossed/account/max-transfer-out-amount' => 2,
                            'v2/margin/crossed/interest-rate-and-limit' => 2,
                            'v2/margin/crossed/tier-data' => 2,
                            'v2/margin/crossed/open-orders' => 2,
                            'v2/margin/crossed/history-orders' => 2,
                            'v2/margin/crossed/fills' => 2,
                            'v2/margin/isolated/borrow-history' => 2,
                            'v2/margin/isolated/repay-history' => 2,
                            'v2/margin/isolated/interest-history' => 2,
                            'v2/margin/isolated/liquidation-history' => 2,
                            'v2/margin/isolated/financial-records' => 2,
                            'v2/margin/isolated/account/assets' => 2,
                            'v2/margin/isolated/account/risk-rate' => 2,
                            'v2/margin/isolated/account/max-borrowable-amount' => 2,
                            'v2/margin/isolated/account/max-transfer-out-amount' => 2,
                            'v2/margin/isolated/interest-rate-and-limit' => 2,
                            'v2/margin/isolated/tier-data' => 2,
                            'v2/margin/isolated/open-orders' => 2,
                            'v2/margin/isolated/history-orders' => 2,
                            'v2/margin/isolated/fills' => 2,
                        ),
                        'post' => array(
                            'margin/v1/cross/account/borrow' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/borrow' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/account/repay' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/repay' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/riskRate' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/account/maxBorrowableAmount' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/maxBorrowableAmount' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/flashRepay' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/account/queryFlashRepayStatus' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/account/flashRepay' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/account/queryFlashRepayStatus' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/order/placeOrder' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'margin/v1/isolated/order/batchPlaceOrder' => 4, // 5 times/1s (UID) => 20/5 = 4
                            'margin/v1/isolated/order/cancelOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/isolated/order/batchCancelOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/placeOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/batchPlaceOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/cancelOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'margin/v1/cross/order/batchCancelOrder' => 2, // 10 times/1s (UID) => 20/10 = 2
                            'v2/margin/crossed/account/borrow' => 2,
                            'v2/margin/crossed/account/repay' => 2,
                            'v2/margin/crossed/account/flash-repay' => 2,
                            'v2/margin/crossed/account/query-flash-repay-status' => 2,
                            'v2/margin/crossed/place-order' => 2,
                            'v2/margin/crossed/batch-place-order' => 2,
                            'v2/margin/crossed/cancel-order' => 2,
                            'v2/margin/crossed/batch-cancel-order' => 2,
                            'v2/margin/isolated/account/borrow' => 2,
                            'v2/margin/isolated/account/repay' => 2,
                            'v2/margin/isolated/account/flash-repay' => 2,
                            'v2/margin/isolated/account/query-flash-repay-status' => 2,
                            'v2/margin/isolated/place-order' => 2,
                            'v2/margin/isolated/batch-place-order' => 2,
                            'v2/margin/isolated/cancel-order' => 2,
                            'v2/margin/isolated/batch-cancel-order' => 2,
                        ),
                    ),
                    'copy' => array(
                        'get' => array(
                            'v2/copy/mix-trader/order-current-track' => 2,
                            'v2/copy/mix-trader/order-history-track' => 2,
                            'v2/copy/mix-trader/order-total-detail' => 2,
                            'v2/copy/mix-trader/profit-history-summarys' => 1,
                            'v2/copy/mix-trader/profit-history-details' => 1,
                            'v2/copy/mix-trader/profit-details' => 1,
                            'v2/copy/mix-trader/profits-group-coin-date' => 1,
                            'v2/copy/mix-trader/config-query-symbols' => 1,
                            'v2/copy/mix-trader/config-query-followers' => 2,
                            'v2/copy/mix-follower/query-current-orders' => 2,
                            'v2/copy/mix-follower/query-history-orders' => 1,
                            'v2/copy/mix-follower/query-settings' => 2,
                            'v2/copy/mix-follower/query-traders' => 2,
                            'v2/copy/mix-follower/query-quantity-limit' => 2,
                            'v2/copy/mix-broker/query-traders' => 2,
                            'v2/copy/mix-broker/query-history-traces' => 2,
                            'v2/copy/mix-broker/query-current-traces' => 2,
                            'v2/copy/spot-trader/profit-summarys' => 2,
                            'v2/copy/spot-trader/profit-history-details' => 2,
                            'v2/copy/spot-trader/profit-details' => 2,
                            'v2/copy/spot-trader/order-total-detail' => 2,
                            'v2/copy/spot-trader/order-history-track' => 2,
                            'v2/copy/spot-trader/order-current-track' => 2,
                            'v2/copy/spot-trader/config-query-settings' => 2,
                            'v2/copy/spot-trader/config-query-followers' => 2,
                            'v2/copy/spot-follower/query-traders' => 2,
                            'v2/copy/spot-follower/query-trader-symbols' => 2,
                            'v2/copy/spot-follower/query-settings' => 2,
                            'v2/copy/spot-follower/query-history-orders' => 2,
                            'v2/copy/spot-follower/query-current-orders' => 2,
                        ),
                        'post' => array(
                            'v2/copy/mix-trader/order-modify-tpsl' => 2,
                            'v2/copy/mix-trader/order-close-positions' => 2,
                            'v2/copy/mix-trader/config-setting-symbols' => 2,
                            'v2/copy/mix-trader/config-setting-base' => 2,
                            'v2/copy/mix-trader/config-remove-follower' => 2,
                            'v2/copy/mix-follower/setting-tpsl' => 1,
                            'v2/copy/mix-follower/settings' => 2,
                            'v2/copy/mix-follower/close-positions' => 2,
                            'v2/copy/mix-follower/cancel-trader' => 4,
                            'v2/copy/spot-trader/order-modify-tpsl' => 2,
                            'v2/copy/spot-trader/order-close-tracking' => 2,
                            'v2/copy/spot-trader/config-setting-symbols' => 2,
                            'v2/copy/spot-trader/config-remove-follower' => 2,
                            'v2/copy/spot-follower/stop-order' => 2,
                            'v2/copy/spot-follower/settings' => 2,
                            'v2/copy/spot-follower/setting-tpsl' => 2,
                            'v2/copy/spot-follower/order-close-tracking' => 2,
                            'v2/copy/spot-follower/cancel-trader' => 2,
                        ),
                    ),
                    'tax' => array(
                        'get' => array(
                            'v2/tax/spot-record' => 20,
                            'v2/tax/future-record' => 20,
                            'v2/tax/margin-record' => 20,
                            'v2/tax/p2p-record' => 20,
                        ),
                    ),
                    'convert' => array(
                        'get' => array(
                            'v2/convert/currencies' => 2,
                            'v2/convert/quoted-price' => 2,
                            'v2/convert/convert-record' => 2,
                        ),
                        'post' => array(
                            'v2/convert/trade' => 2,
                        ),
                    ),
                    'earn' => array(
                        'get' => array(
                            'v2/earn/savings/product' => 2,
                            'v2/earn/savings/account' => 2,
                            'v2/earn/savings/assets' => 2,
                            'v2/earn/savings/records' => 2,
                            'v2/earn/savings/subscribe-info' => 2,
                            'v2/earn/savings/subscribe-result' => 2,
                            'v2/earn/savings/redeem-result' => 2,
                            'v2/earn/sharkfin/product' => 2,
                            'v2/earn/sharkfin/account' => 2,
                            'v2/earn/sharkfin/assets' => 2,
                            'v2/earn/sharkfin/records' => 2,
                            'v2/earn/sharkfin/subscribe-info' => 2,
                            'v2/earn/sharkfin/subscribe-result' => 4,
                            'v2/earn/loan/ongoing-orders' => 2,
                            'v2/earn/loan/repay-history' => 2,
                            'v2/earn/loan/revise-history' => 2,
                            'v2/earn/loan/borrow-history' => 2,
                            'v2/earn/loan/debts' => 2,
                            'v2/earn/loan/reduces' => 2,
                        ),
                        'post' => array(
                            'v2/earn/savings/subscribe' => 2,
                            'v2/earn/savings/redeem' => 2,
                            'v2/earn/sharkfin/subscribe' => 2,
                            'v2/earn/loan/borrow' => 2,
                            'v2/earn/loan/repay' => 2,
                            'v2/earn/loan/revise-pledge' => 2,
                        ),
                    ),
                    'common' => array(
                        'get' => array(
                            'v2/common/trade-rate' => 2,
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'spot' => array(
                    'taker' => $this->parse_number('0.002'),
                    'maker' => $this->parse_number('0.002'),
                ),
                'swap' => array(
                    'taker' => $this->parse_number('0.0006'),
                    'maker' => $this->parse_number('0.0004'),
                ),
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'password' => true,
            ),
            'exceptions' => array(
                // http error codes
                // 400 Bad Request — Invalid request format
                // 401 Unauthorized — Invalid API Key
                // 403 Forbidden — You do not have access to the requested resource
                // 404 Not Found
                // 500 Internal Server Error — We had a problem with our server
                'exact' => array(
                    '1' => '\\ccxt\\ExchangeError', // array( "code" => 1, "message" => "System error" )
                    // undocumented
                    'failure to get a peer from the ring-balancer' => '\\ccxt\\ExchangeNotAvailable', // array( "message" => "failure to get a peer from the ring-balancer" )
                    '4010' => '\\ccxt\\PermissionDenied', // array( "code" => 4010, "message" => "For the security of your funds, withdrawals are not permitted within 24 hours after changing fund password  / mobile number / Google Authenticator settings " )
                    // common
                    // '0' => '\\ccxt\\ExchangeError', // 200 successful,when the order placement / cancellation / operation is successful
                    '4001' => '\\ccxt\\ExchangeError', // no data received in 30s
                    '4002' => '\\ccxt\\ExchangeError', // Buffer full. cannot write data
                    // --------------------------------------------------------
                    '30001' => '\\ccxt\\AuthenticationError', // array( "code" => 30001, "message" => 'request header "OK_ACCESS_KEY" cannot be blank')
                    '30002' => '\\ccxt\\AuthenticationError', // array( "code" => 30002, "message" => 'request header "OK_ACCESS_SIGN" cannot be blank')
                    '30003' => '\\ccxt\\AuthenticationError', // array( "code" => 30003, "message" => 'request header "OK_ACCESS_TIMESTAMP" cannot be blank')
                    '30004' => '\\ccxt\\AuthenticationError', // array( "code" => 30004, "message" => 'request header "OK_ACCESS_PASSPHRASE" cannot be blank')
                    '30005' => '\\ccxt\\InvalidNonce', // array( "code" => 30005, "message" => "invalid OK_ACCESS_TIMESTAMP" )
                    '30006' => '\\ccxt\\AuthenticationError', // array( "code" => 30006, "message" => "invalid OK_ACCESS_KEY" )
                    '30007' => '\\ccxt\\BadRequest', // array( "code" => 30007, "message" => 'invalid Content_Type, please use "application/json" format')
                    '30008' => '\\ccxt\\RequestTimeout', // array( "code" => 30008, "message" => "timestamp request expired" )
                    '30009' => '\\ccxt\\ExchangeError', // array( "code" => 30009, "message" => "system error" )
                    '30010' => '\\ccxt\\AuthenticationError', // array( "code" => 30010, "message" => "API validation failed" )
                    '30011' => '\\ccxt\\PermissionDenied', // array( "code" => 30011, "message" => "invalid IP" )
                    '30012' => '\\ccxt\\AuthenticationError', // array( "code" => 30012, "message" => "invalid authorization" )
                    '30013' => '\\ccxt\\AuthenticationError', // array( "code" => 30013, "message" => "invalid sign" )
                    '30014' => '\\ccxt\\DDoSProtection', // array( "code" => 30014, "message" => "request too frequent" )
                    '30015' => '\\ccxt\\AuthenticationError', // array( "code" => 30015, "message" => 'request header "OK_ACCESS_PASSPHRASE" incorrect')
                    '30016' => '\\ccxt\\ExchangeError', // array( "code" => 30015, "message" => "you are using v1 apiKey, please use v1 endpoint. If you would like to use v3 endpoint, please subscribe to v3 apiKey" )
                    '30017' => '\\ccxt\\ExchangeError', // array( "code" => 30017, "message" => "apikey's broker id does not match" )
                    '30018' => '\\ccxt\\ExchangeError', // array( "code" => 30018, "message" => "apikey's domain does not match" )
                    '30019' => '\\ccxt\\ExchangeNotAvailable', // array( "code" => 30019, "message" => "Api is offline or unavailable" )
                    '30020' => '\\ccxt\\BadRequest', // array( "code" => 30020, "message" => "body cannot be blank" )
                    '30021' => '\\ccxt\\BadRequest', // array( "code" => 30021, "message" => "Json data format error" ), array( "code" => 30021, "message" => "json data format error" )
                    '30022' => '\\ccxt\\PermissionDenied', // array( "code" => 30022, "message" => "Api has been frozen" )
                    '30023' => '\\ccxt\\BadRequest', // array( "code" => 30023, "message" => "{0} parameter cannot be blank" )
                    '30024' => '\\ccxt\\BadSymbol', // array("code":30024,"message":"\"instrument_id\" is an invalid parameter")
                    '30025' => '\\ccxt\\BadRequest', // array( "code" => 30025, "message" => "{0} parameter category error" )
                    '30026' => '\\ccxt\\DDoSProtection', // array( "code" => 30026, "message" => "requested too frequent" )
                    '30027' => '\\ccxt\\AuthenticationError', // array( "code" => 30027, "message" => "login failure" )
                    '30028' => '\\ccxt\\PermissionDenied', // array( "code" => 30028, "message" => "unauthorized execution" )
                    '30029' => '\\ccxt\\AccountSuspended', // array( "code" => 30029, "message" => "account suspended" )
                    '30030' => '\\ccxt\\ExchangeError', // array( "code" => 30030, "message" => "endpoint request failed. Please try again" )
                    '30031' => '\\ccxt\\BadRequest', // array( "code" => 30031, "message" => "token does not exist" )
                    '30032' => '\\ccxt\\BadSymbol', // array( "code" => 30032, "message" => "pair does not exist" )
                    '30033' => '\\ccxt\\BadRequest', // array( "code" => 30033, "message" => "exchange domain does not exist" )
                    '30034' => '\\ccxt\\ExchangeError', // array( "code" => 30034, "message" => "exchange ID does not exist" )
                    '30035' => '\\ccxt\\ExchangeError', // array( "code" => 30035, "message" => "trading is not property_exists($this, supported) website" )
                    '30036' => '\\ccxt\\ExchangeError', // array( "code" => 30036, "message" => "no relevant data" )
                    '30037' => '\\ccxt\\ExchangeNotAvailable', // array( "code" => 30037, "message" => "endpoint is offline or unavailable" )
                    // '30038' => '\\ccxt\\AuthenticationError', // array( "code" => 30038, "message" => "user does not exist" )
                    '30038' => '\\ccxt\\OnMaintenance', // array("client_oid":"","code":"30038","error_code":"30038","error_message":"Matching engine is being upgraded. Please try in about 1 minute.","message":"Matching engine is being upgraded. Please try in about 1 minute.","order_id":"-1","result":false)
                    // futures
                    '32001' => '\\ccxt\\AccountSuspended', // array( "code" => 32001, "message" => "futures account suspended" )
                    '32002' => '\\ccxt\\PermissionDenied', // array( "code" => 32002, "message" => "futures account does not exist" )
                    '32003' => '\\ccxt\\CancelPending', // array( "code" => 32003, "message" => "canceling, please wait" )
                    '32004' => '\\ccxt\\ExchangeError', // array( "code" => 32004, "message" => "you have no unfilled orders" )
                    '32005' => '\\ccxt\\InvalidOrder', // array( "code" => 32005, "message" => "max order quantity" )
                    '32006' => '\\ccxt\\InvalidOrder', // array( "code" => 32006, "message" => "the order price or trigger price exceeds USD 1 million" )
                    '32007' => '\\ccxt\\InvalidOrder', // array( "code" => 32007, "message" => "leverage level must be the same for orders on the same side of the contract" )
                    '32008' => '\\ccxt\\InvalidOrder', // array( "code" => 32008, "message" => "Max. positions to open (cross margin)" )
                    '32009' => '\\ccxt\\InvalidOrder', // array( "code" => 32009, "message" => "Max. positions to open (fixed margin)" )
                    '32010' => '\\ccxt\\ExchangeError', // array( "code" => 32010, "message" => "leverage cannot be changed with open positions" )
                    '32011' => '\\ccxt\\ExchangeError', // array( "code" => 32011, "message" => "futures status error" )
                    '32012' => '\\ccxt\\ExchangeError', // array( "code" => 32012, "message" => "futures order update error" )
                    '32013' => '\\ccxt\\ExchangeError', // array( "code" => 32013, "message" => "token type is blank" )
                    '32014' => '\\ccxt\\ExchangeError', // array( "code" => 32014, "message" => "your number of contracts closing is larger than the number of contracts available" )
                    '32015' => '\\ccxt\\ExchangeError', // array( "code" => 32015, "message" => "margin ratio is lower than 100% before opening positions" )
                    '32016' => '\\ccxt\\ExchangeError', // array( "code" => 32016, "message" => "margin ratio is lower than 100% after opening position" )
                    '32017' => '\\ccxt\\ExchangeError', // array( "code" => 32017, "message" => "no BBO" )
                    '32018' => '\\ccxt\\ExchangeError', // array( "code" => 32018, "message" => "the order quantity is less than 1, please try again" )
                    '32019' => '\\ccxt\\ExchangeError', // array( "code" => 32019, "message" => "the order price deviates from the price of the previous minute by more than 3%" )
                    '32020' => '\\ccxt\\ExchangeError', // array( "code" => 32020, "message" => "the price is not in the range of the price limit" )
                    '32021' => '\\ccxt\\ExchangeError', // array( "code" => 32021, "message" => "leverage error" )
                    '32022' => '\\ccxt\\ExchangeError', // array( "code" => 32022, "message" => "this function is not supported in your country or region according to the regulations" )
                    '32023' => '\\ccxt\\ExchangeError', // array( "code" => 32023, "message" => "this account has outstanding loan" )
                    '32024' => '\\ccxt\\ExchangeError', // array( "code" => 32024, "message" => "order cannot be placed during delivery" )
                    '32025' => '\\ccxt\\ExchangeError', // array( "code" => 32025, "message" => "order cannot be placed during settlement" )
                    '32026' => '\\ccxt\\ExchangeError', // array( "code" => 32026, "message" => "your account is restricted from opening positions" )
                    '32027' => '\\ccxt\\ExchangeError', // array( "code" => 32027, "message" => "cancelled over 20 orders" )
                    '32028' => '\\ccxt\\AccountSuspended', // array( "code" => 32028, "message" => "account is suspended and liquidated" )
                    '32029' => '\\ccxt\\ExchangeError', // array( "code" => 32029, "message" => "order info does not exist" )
                    '32030' => '\\ccxt\\InvalidOrder', // The order cannot be cancelled
                    '32031' => '\\ccxt\\ArgumentsRequired', // client_oid or order_id is required.
                    '32038' => '\\ccxt\\AuthenticationError', // User does not exist
                    '32040' => '\\ccxt\\ExchangeError', // User have open contract orders or position
                    '32044' => '\\ccxt\\ExchangeError', // array( "code" => 32044, "message" => "The margin ratio after submitting this order is lower than the minimum requirement ({0}) for your tier." )
                    '32045' => '\\ccxt\\ExchangeError', // 'strval' of commission over 1 million
                    '32046' => '\\ccxt\\ExchangeError', // Each user can hold up to 10 trade plans at the same time
                    '32047' => '\\ccxt\\ExchangeError', // system error
                    '32048' => '\\ccxt\\InvalidOrder', // Order strategy track range error
                    '32049' => '\\ccxt\\ExchangeError', // Each user can hold up to 10 track plans at the same time
                    '32050' => '\\ccxt\\InvalidOrder', // Order strategy rang error
                    '32051' => '\\ccxt\\InvalidOrder', // Order strategy ice depth error
                    '32052' => '\\ccxt\\ExchangeError', // 'strval' of commission over 100 thousand
                    '32053' => '\\ccxt\\ExchangeError', // Each user can hold up to 6 ice plans at the same time
                    '32057' => '\\ccxt\\ExchangeError', // The order price is zero. Market-close-all function cannot be executed
                    '32054' => '\\ccxt\\ExchangeError', // Trade not allow
                    '32055' => '\\ccxt\\InvalidOrder', // cancel order error
                    '32056' => '\\ccxt\\ExchangeError', // iceberg per order average should between {0}-{1} contracts
                    '32058' => '\\ccxt\\ExchangeError', // Each user can hold up to 6 initiative plans at the same time
                    '32059' => '\\ccxt\\InvalidOrder', // Total amount should exceed per order amount
                    '32060' => '\\ccxt\\InvalidOrder', // Order strategy type error
                    '32061' => '\\ccxt\\InvalidOrder', // Order strategy initiative limit error
                    '32062' => '\\ccxt\\InvalidOrder', // Order strategy initiative range error
                    '32063' => '\\ccxt\\InvalidOrder', // Order strategy initiative rate error
                    '32064' => '\\ccxt\\ExchangeError', // Time Stringerval of orders should set between 5-120s
                    '32065' => '\\ccxt\\ExchangeError', // Close amount exceeds the limit of Market-close-all (999 for BTC, and 9999 for the rest tokens)
                    '32066' => '\\ccxt\\ExchangeError', // You have open orders. Please cancel all open orders before changing your leverage level.
                    '32067' => '\\ccxt\\ExchangeError', // Account equity < required property_exists($this, margin) setting. Please adjust your leverage level again.
                    '32068' => '\\ccxt\\ExchangeError', // The margin for this position will fall short of the required property_exists($this, margin) setting. Please adjust your leverage level or increase your margin to proceed.
                    '32069' => '\\ccxt\\ExchangeError', // Target leverage level too low. Your account balance is insufficient to cover the margin required. Please adjust the leverage level again.
                    '32070' => '\\ccxt\\ExchangeError', // Please check open position or unfilled order
                    '32071' => '\\ccxt\\ExchangeError', // Your current liquidation mode does not support this action.
                    '32072' => '\\ccxt\\ExchangeError', // The highest available margin for your order’s tier is {0}. Please edit your margin and place a new order.
                    '32073' => '\\ccxt\\ExchangeError', // The action does not apply to the token
                    '32074' => '\\ccxt\\ExchangeError', // The number of contracts of your position, open orders, and the current order has exceeded the maximum order limit of this asset.
                    '32075' => '\\ccxt\\ExchangeError', // Account risk rate breach
                    '32076' => '\\ccxt\\ExchangeError', // Liquidation of the holding position(s) at market price will require cancellation of all pending close orders of the contracts.
                    '32077' => '\\ccxt\\ExchangeError', // Your margin for this asset in futures account is insufficient and the position has been taken over for liquidation. (You will not be able to place orders, close positions, transfer funds, or add margin during this period of time. Your account will be restored after the liquidation is complete.)
                    '32078' => '\\ccxt\\ExchangeError', // Please cancel all open orders before switching the liquidation mode(Please cancel all open orders before switching the liquidation mode)
                    '32079' => '\\ccxt\\ExchangeError', // Your open positions are at high risk.(Please add margin or reduce positions before switching the mode)
                    '32080' => '\\ccxt\\ExchangeError', // Funds cannot be transferred out within 30 minutes after futures settlement
                    '32083' => '\\ccxt\\ExchangeError', // The number of contracts should be a positive multiple of %%. Please place your order again
                    // token and margin trading
                    '33001' => '\\ccxt\\PermissionDenied', // array( "code" => 33001, "message" => "margin account for this pair is not enabled yet" )
                    '33002' => '\\ccxt\\AccountSuspended', // array( "code" => 33002, "message" => "margin account for this pair is suspended" )
                    '33003' => '\\ccxt\\InsufficientFunds', // array( "code" => 33003, "message" => "no loan balance" )
                    '33004' => '\\ccxt\\ExchangeError', // array( "code" => 33004, "message" => "loan amount cannot be smaller than the minimum limit" )
                    '33005' => '\\ccxt\\ExchangeError', // array( "code" => 33005, "message" => "repayment amount must exceed 0" )
                    '33006' => '\\ccxt\\ExchangeError', // array( "code" => 33006, "message" => "loan order not found" )
                    '33007' => '\\ccxt\\ExchangeError', // array( "code" => 33007, "message" => "status not found" )
                    '33008' => '\\ccxt\\InsufficientFunds', // array( "code" => 33008, "message" => "loan amount cannot exceed the maximum limit" )
                    '33009' => '\\ccxt\\ExchangeError', // array( "code" => 33009, "message" => "user ID is blank" )
                    '33010' => '\\ccxt\\ExchangeError', // array( "code" => 33010, "message" => "you cannot cancel an order during session 2 of call auction" )
                    '33011' => '\\ccxt\\ExchangeError', // array( "code" => 33011, "message" => "no new market data" )
                    '33012' => '\\ccxt\\ExchangeError', // array( "code" => 33012, "message" => "order cancellation failed" )
                    '33013' => '\\ccxt\\InvalidOrder', // array( "code" => 33013, "message" => "order placement failed" )
                    '33014' => '\\ccxt\\OrderNotFound', // array( "code" => 33014, "message" => "order does not exist" )
                    '33015' => '\\ccxt\\InvalidOrder', // array( "code" => 33015, "message" => "exceeded maximum limit" )
                    '33016' => '\\ccxt\\ExchangeError', // array( "code" => 33016, "message" => "margin trading is not open for this token" )
                    '33017' => '\\ccxt\\InsufficientFunds', // array( "code" => 33017, "message" => "insufficient balance" )
                    '33018' => '\\ccxt\\ExchangeError', // array( "code" => 33018, "message" => "this parameter must be smaller than 1" )
                    '33020' => '\\ccxt\\ExchangeError', // array( "code" => 33020, "message" => "request not supported" )
                    '33021' => '\\ccxt\\BadRequest', // array( "code" => 33021, "message" => "token and the pair do not match" )
                    '33022' => '\\ccxt\\InvalidOrder', // array( "code" => 33022, "message" => "pair and the order do not match" )
                    '33023' => '\\ccxt\\ExchangeError', // array( "code" => 33023, "message" => "you can only place market orders during call auction" )
                    '33024' => '\\ccxt\\InvalidOrder', // array( "code" => 33024, "message" => "trading amount too small" )
                    '33025' => '\\ccxt\\InvalidOrder', // array( "code" => 33025, "message" => "base token amount is blank" )
                    '33026' => '\\ccxt\\ExchangeError', // array( "code" => 33026, "message" => "transaction completed" )
                    '33027' => '\\ccxt\\InvalidOrder', // array( "code" => 33027, "message" => "cancelled order or order cancelling" )
                    '33028' => '\\ccxt\\InvalidOrder', // array( "code" => 33028, "message" => "the decimal places of the trading price exceeded the limit" )
                    '33029' => '\\ccxt\\InvalidOrder', // array( "code" => 33029, "message" => "the decimal places of the trading size exceeded the limit" )
                    '33034' => '\\ccxt\\ExchangeError', // array( "code" => 33034, "message" => "You can only place limit order after Call Auction has started" )
                    '33035' => '\\ccxt\\ExchangeError', // This type of order cannot be canceled(This type of order cannot be canceled)
                    '33036' => '\\ccxt\\ExchangeError', // Exceeding the limit of entrust order
                    '33037' => '\\ccxt\\ExchangeError', // The buy order price should be lower than 130% of the trigger price
                    '33038' => '\\ccxt\\ExchangeError', // The sell order price should be higher than 70% of the trigger price
                    '33039' => '\\ccxt\\ExchangeError', // The limit of callback rate is 0 < x <= 5%
                    '33040' => '\\ccxt\\ExchangeError', // The trigger price of a buy order should be lower than the latest transaction price
                    '33041' => '\\ccxt\\ExchangeError', // The trigger price of a sell order should be higher than the latest transaction price
                    '33042' => '\\ccxt\\ExchangeError', // The limit of price variance is 0 < x <= 1%
                    '33043' => '\\ccxt\\ExchangeError', // The total amount must be larger than 0
                    '33044' => '\\ccxt\\ExchangeError', // The average amount should be 1/1000 * total amount <= x <= total amount
                    '33045' => '\\ccxt\\ExchangeError', // The price should not be 0, including trigger price, order price, and price limit
                    '33046' => '\\ccxt\\ExchangeError', // Price variance should be 0 < x <= 1%
                    '33047' => '\\ccxt\\ExchangeError', // Sweep ratio should be 0 < x <= 100%
                    '33048' => '\\ccxt\\ExchangeError', // Per order limit => Total amount/1000 < x <= Total amount
                    '33049' => '\\ccxt\\ExchangeError', // Total amount should be X > 0
                    '33050' => '\\ccxt\\ExchangeError', // Time interval should be 5 <= x <= 120s
                    '33051' => '\\ccxt\\ExchangeError', // cancel order number not higher limit => plan and track entrust no more than 10, ice and time entrust no more than 6
                    '33059' => '\\ccxt\\BadRequest', // array( "code" => 33059, "message" => "client_oid or order_id is required" )
                    '33060' => '\\ccxt\\BadRequest', // array( "code" => 33060, "message" => "Only fill in either parameter client_oid or order_id" )
                    '33061' => '\\ccxt\\ExchangeError', // Value of a single market price order cannot exceed 100,000 USD
                    '33062' => '\\ccxt\\ExchangeError', // The leverage ratio is too high. The borrowed position has exceeded the maximum position of this leverage ratio. Please readjust the leverage ratio
                    '33063' => '\\ccxt\\ExchangeError', // Leverage multiple is too low, there is insufficient margin in the account, please readjust the leverage ratio
                    '33064' => '\\ccxt\\ExchangeError', // The setting of the leverage ratio cannot be less than 2, please readjust the leverage ratio
                    '33065' => '\\ccxt\\ExchangeError', // Leverage ratio exceeds maximum leverage ratio, please readjust leverage ratio
                    // account
                    '21009' => '\\ccxt\\ExchangeError', // Funds cannot be transferred out within 30 minutes after swap settlement(Funds cannot be transferred out within 30 minutes after swap settlement)
                    '34001' => '\\ccxt\\PermissionDenied', // array( "code" => 34001, "message" => "withdrawal suspended" )
                    '34002' => '\\ccxt\\InvalidAddress', // array( "code" => 34002, "message" => "please add a withdrawal address" )
                    '34003' => '\\ccxt\\ExchangeError', // array( "code" => 34003, "message" => "sorry, this token cannot be withdrawn to xx at the moment" )
                    '34004' => '\\ccxt\\ExchangeError', // array( "code" => 34004, "message" => "withdrawal fee is smaller than minimum limit" )
                    '34005' => '\\ccxt\\ExchangeError', // array( "code" => 34005, "message" => "withdrawal fee exceeds the maximum limit" )
                    '34006' => '\\ccxt\\ExchangeError', // array( "code" => 34006, "message" => "withdrawal amount is lower than the minimum limit" )
                    '34007' => '\\ccxt\\ExchangeError', // array( "code" => 34007, "message" => "withdrawal amount exceeds the maximum limit" )
                    '34008' => '\\ccxt\\InsufficientFunds', // array( "code" => 34008, "message" => "insufficient balance" )
                    '34009' => '\\ccxt\\ExchangeError', // array( "code" => 34009, "message" => "your withdrawal amount exceeds the daily limit" )
                    '34010' => '\\ccxt\\ExchangeError', // array( "code" => 34010, "message" => "transfer amount must be larger than 0" )
                    '34011' => '\\ccxt\\ExchangeError', // array( "code" => 34011, "message" => "conditions not met" )
                    '34012' => '\\ccxt\\ExchangeError', // array( "code" => 34012, "message" => "the minimum withdrawal amount for NEO is 1, and the amount must be an integer" )
                    '34013' => '\\ccxt\\ExchangeError', // array( "code" => 34013, "message" => "please transfer" )
                    '34014' => '\\ccxt\\ExchangeError', // array( "code" => 34014, "message" => "transfer limited" )
                    '34015' => '\\ccxt\\ExchangeError', // array( "code" => 34015, "message" => "subaccount does not exist" )
                    '34016' => '\\ccxt\\PermissionDenied', // array( "code" => 34016, "message" => "transfer suspended" )
                    '34017' => '\\ccxt\\AccountSuspended', // array( "code" => 34017, "message" => "account suspended" )
                    '34018' => '\\ccxt\\AuthenticationError', // array( "code" => 34018, "message" => "incorrect trades password" )
                    '34019' => '\\ccxt\\PermissionDenied', // array( "code" => 34019, "message" => "please bind your email before withdrawal" )
                    '34020' => '\\ccxt\\PermissionDenied', // array( "code" => 34020, "message" => "please bind your funds password before withdrawal" )
                    '34021' => '\\ccxt\\InvalidAddress', // array( "code" => 34021, "message" => "Not verified address" )
                    '34022' => '\\ccxt\\ExchangeError', // array( "code" => 34022, "message" => "Withdrawals are not available for sub accounts" )
                    '34023' => '\\ccxt\\PermissionDenied', // array( "code" => 34023, "message" => "Please enable futures trading before transferring your funds" )
                    '34026' => '\\ccxt\\ExchangeError', // transfer too frequently(transfer too frequently)
                    '34036' => '\\ccxt\\ExchangeError', // Parameter is incorrect, please refer to API documentation
                    '34037' => '\\ccxt\\ExchangeError', // Get the sub-account balance interface, account type is not supported
                    '34038' => '\\ccxt\\ExchangeError', // Since your C2C transaction is unusual, you are restricted from fund transfer. Please contact our customer support to cancel the restriction
                    '34039' => '\\ccxt\\ExchangeError', // You are now restricted from transferring out your funds due to abnormal trades on C2C Market. Please transfer your fund on our website or app instead to verify your identity
                    // swap
                    '35001' => '\\ccxt\\ExchangeError', // array( "code" => 35001, "message" => "Contract does not exist" )
                    '35002' => '\\ccxt\\ExchangeError', // array( "code" => 35002, "message" => "Contract settling" )
                    '35003' => '\\ccxt\\ExchangeError', // array( "code" => 35003, "message" => "Contract paused" )
                    '35004' => '\\ccxt\\ExchangeError', // array( "code" => 35004, "message" => "Contract pending settlement" )
                    '35005' => '\\ccxt\\AuthenticationError', // array( "code" => 35005, "message" => "User does not exist" )
                    '35008' => '\\ccxt\\InvalidOrder', // array( "code" => 35008, "message" => "Risk ratio too high" )
                    '35010' => '\\ccxt\\InvalidOrder', // array( "code" => 35010, "message" => "Position closing too large" )
                    '35012' => '\\ccxt\\InvalidOrder', // array( "code" => 35012, "message" => "Incorrect order size" )
                    '35014' => '\\ccxt\\InvalidOrder', // array( "code" => 35014, "message" => "Order price is not within limit" )
                    '35015' => '\\ccxt\\InvalidOrder', // array( "code" => 35015, "message" => "Invalid leverage level" )
                    '35017' => '\\ccxt\\ExchangeError', // array( "code" => 35017, "message" => "Open orders exist" )
                    '35019' => '\\ccxt\\InvalidOrder', // array( "code" => 35019, "message" => "Order size too large" )
                    '35020' => '\\ccxt\\InvalidOrder', // array( "code" => 35020, "message" => "Order price too high" )
                    '35021' => '\\ccxt\\InvalidOrder', // array( "code" => 35021, "message" => "Order size exceeded current tier limit" )
                    '35022' => '\\ccxt\\ExchangeError', // array( "code" => 35022, "message" => "Contract status error" )
                    '35024' => '\\ccxt\\ExchangeError', // array( "code" => 35024, "message" => "Contract not initialized" )
                    '35025' => '\\ccxt\\InsufficientFunds', // array( "code" => 35025, "message" => "No account balance" )
                    '35026' => '\\ccxt\\ExchangeError', // array( "code" => 35026, "message" => "Contract settings not initialized" )
                    '35029' => '\\ccxt\\OrderNotFound', // array( "code" => 35029, "message" => "Order does not exist" )
                    '35030' => '\\ccxt\\InvalidOrder', // array( "code" => 35030, "message" => "Order size too large" )
                    '35031' => '\\ccxt\\InvalidOrder', // array( "code" => 35031, "message" => "Cancel order size too large" )
                    '35032' => '\\ccxt\\ExchangeError', // array( "code" => 35032, "message" => "Invalid user status" )
                    '35037' => '\\ccxt\\ExchangeError', // No last traded price in cache
                    '35039' => '\\ccxt\\ExchangeError', // array( "code" => 35039, "message" => "Open order quantity exceeds limit" )
                    '35040' => '\\ccxt\\InvalidOrder', // array("error_message":"Invalid order type","result":"true","error_code":"35040","order_id":"-1")
                    '35044' => '\\ccxt\\ExchangeError', // array( "code" => 35044, "message" => "Invalid order status" )
                    '35046' => '\\ccxt\\InsufficientFunds', // array( "code" => 35046, "message" => "Negative account balance" )
                    '35047' => '\\ccxt\\InsufficientFunds', // array( "code" => 35047, "message" => "Insufficient account balance" )
                    '35048' => '\\ccxt\\ExchangeError', // array( "code" => 35048, "message" => "User contract is frozen and liquidating" )
                    '35049' => '\\ccxt\\InvalidOrder', // array( "code" => 35049, "message" => "Invalid order type" )
                    '35050' => '\\ccxt\\InvalidOrder', // array( "code" => 35050, "message" => "Position settings are blank" )
                    '35052' => '\\ccxt\\InsufficientFunds', // array( "code" => 35052, "message" => "Insufficient cross margin" )
                    '35053' => '\\ccxt\\ExchangeError', // array( "code" => 35053, "message" => "Account risk too high" )
                    '35055' => '\\ccxt\\InsufficientFunds', // array( "code" => 35055, "message" => "Insufficient account balance" )
                    '35057' => '\\ccxt\\ExchangeError', // array( "code" => 35057, "message" => "No last traded price" )
                    '35058' => '\\ccxt\\ExchangeError', // array( "code" => 35058, "message" => "No limit" )
                    '35059' => '\\ccxt\\BadRequest', // array( "code" => 35059, "message" => "client_oid or order_id is required" )
                    '35060' => '\\ccxt\\BadRequest', // array( "code" => 35060, "message" => "Only fill in either parameter client_oid or order_id" )
                    '35061' => '\\ccxt\\BadRequest', // array( "code" => 35061, "message" => "Invalid instrument_id" )
                    '35062' => '\\ccxt\\InvalidOrder', // array( "code" => 35062, "message" => "Invalid match_price" )
                    '35063' => '\\ccxt\\InvalidOrder', // array( "code" => 35063, "message" => "Invalid order_size" )
                    '35064' => '\\ccxt\\InvalidOrder', // array( "code" => 35064, "message" => "Invalid client_oid" )
                    '35066' => '\\ccxt\\InvalidOrder', // Order interval error
                    '35067' => '\\ccxt\\InvalidOrder', // Time-weighted order ratio error
                    '35068' => '\\ccxt\\InvalidOrder', // Time-weighted order range error
                    '35069' => '\\ccxt\\InvalidOrder', // Time-weighted single transaction limit error
                    '35070' => '\\ccxt\\InvalidOrder', // Algo order type error
                    '35071' => '\\ccxt\\InvalidOrder', // Order total must be larger than single order limit
                    '35072' => '\\ccxt\\InvalidOrder', // Maximum 6 unfulfilled time-weighted orders can be held at the same time
                    '35073' => '\\ccxt\\InvalidOrder', // Order price is 0. Market-close-all not available
                    '35074' => '\\ccxt\\InvalidOrder', // Iceberg order single transaction average error
                    '35075' => '\\ccxt\\InvalidOrder', // Failed to cancel order
                    '35076' => '\\ccxt\\InvalidOrder', // LTC 20x leverage. Not allowed to open position
                    '35077' => '\\ccxt\\InvalidOrder', // Maximum 6 unfulfilled iceberg orders can be held at the same time
                    '35078' => '\\ccxt\\InvalidOrder', // Order amount exceeded 100,000
                    '35079' => '\\ccxt\\InvalidOrder', // Iceberg order price variance error
                    '35080' => '\\ccxt\\InvalidOrder', // Callback rate error
                    '35081' => '\\ccxt\\InvalidOrder', // Maximum 10 unfulfilled trail orders can be held at the same time
                    '35082' => '\\ccxt\\InvalidOrder', // Trail order callback rate error
                    '35083' => '\\ccxt\\InvalidOrder', // Each user can only hold a maximum of 10 unfulfilled stop-limit orders at the same time
                    '35084' => '\\ccxt\\InvalidOrder', // Order amount exceeded 1 million
                    '35085' => '\\ccxt\\InvalidOrder', // Order amount is not in the correct range
                    '35086' => '\\ccxt\\InvalidOrder', // Price exceeds 100 thousand
                    '35087' => '\\ccxt\\InvalidOrder', // Price exceeds 100 thousand
                    '35088' => '\\ccxt\\InvalidOrder', // Average amount error
                    '35089' => '\\ccxt\\InvalidOrder', // Price exceeds 100 thousand
                    '35090' => '\\ccxt\\ExchangeError', // No stop-limit orders available for cancelation
                    '35091' => '\\ccxt\\ExchangeError', // No trail orders available for cancellation
                    '35092' => '\\ccxt\\ExchangeError', // No iceberg orders available for cancellation
                    '35093' => '\\ccxt\\ExchangeError', // No trail orders available for cancellation
                    '35094' => '\\ccxt\\ExchangeError', // Stop-limit order last traded price error
                    '35095' => '\\ccxt\\BadRequest', // Instrument_id error
                    '35096' => '\\ccxt\\ExchangeError', // Algo order status error
                    '35097' => '\\ccxt\\ExchangeError', // Order status and order ID cannot exist at the same time
                    '35098' => '\\ccxt\\ExchangeError', // An order status or order ID must exist
                    '35099' => '\\ccxt\\ExchangeError', // Algo order ID error
                    // option
                    '36001' => '\\ccxt\\BadRequest', // Invalid underlying index.
                    '36002' => '\\ccxt\\BadRequest', // Instrument does not exist.
                    '36005' => '\\ccxt\\ExchangeError', // Instrument status is invalid.
                    '36101' => '\\ccxt\\AuthenticationError', // Account does not exist.
                    '36102' => '\\ccxt\\PermissionDenied', // Account status is invalid.
                    '36103' => '\\ccxt\\AccountSuspended', // Account is suspended due to ongoing liquidation.
                    '36104' => '\\ccxt\\PermissionDenied', // Account is not enabled for options trading.
                    '36105' => '\\ccxt\\PermissionDenied', // Please enable the account for option contract.
                    '36106' => '\\ccxt\\AccountSuspended', // Funds cannot be transferred in or out, is suspended.
                    '36107' => '\\ccxt\\PermissionDenied', // Funds cannot be transferred out within 30 minutes after option exercising or settlement.
                    '36108' => '\\ccxt\\InsufficientFunds', // Funds cannot be transferred in or out, of the account is less than zero.
                    '36109' => '\\ccxt\\PermissionDenied', // Funds cannot be transferred in or out during option exercising or settlement.
                    '36201' => '\\ccxt\\PermissionDenied', // New order function is blocked.
                    '36202' => '\\ccxt\\PermissionDenied', // Account does not have permission to short option.
                    '36203' => '\\ccxt\\InvalidOrder', // Invalid format for client_oid.
                    '36204' => '\\ccxt\\ExchangeError', // Invalid format for request_id.
                    '36205' => '\\ccxt\\BadRequest', // Instrument id does not match underlying index.
                    '36206' => '\\ccxt\\BadRequest', // Order_id and client_oid can not be used at the same time.
                    '36207' => '\\ccxt\\InvalidOrder', // Either order price or fartouch price must be present.
                    '36208' => '\\ccxt\\InvalidOrder', // Either order price or size must be present.
                    '36209' => '\\ccxt\\InvalidOrder', // Either order_id or client_oid must be present.
                    '36210' => '\\ccxt\\InvalidOrder', // Either order_ids or client_oids must be present.
                    '36211' => '\\ccxt\\InvalidOrder', // Exceeding max batch size for order submission.
                    '36212' => '\\ccxt\\InvalidOrder', // Exceeding max batch size for oder cancellation.
                    '36213' => '\\ccxt\\InvalidOrder', // Exceeding max batch size for order amendment.
                    '36214' => '\\ccxt\\ExchangeError', // Instrument does not have valid bid/ask quote.
                    '36216' => '\\ccxt\\OrderNotFound', // Order does not exist.
                    '36217' => '\\ccxt\\InvalidOrder', // Order submission failed.
                    '36218' => '\\ccxt\\InvalidOrder', // Order cancellation failed.
                    '36219' => '\\ccxt\\InvalidOrder', // Order amendment failed.
                    '36220' => '\\ccxt\\InvalidOrder', // Order is pending cancel.
                    '36221' => '\\ccxt\\InvalidOrder', // Order qty is not valid multiple of lot size.
                    '36222' => '\\ccxt\\InvalidOrder', // Order price is breaching highest buy limit.
                    '36223' => '\\ccxt\\InvalidOrder', // Order price is breaching lowest sell limit.
                    '36224' => '\\ccxt\\InvalidOrder', // Exceeding max order size.
                    '36225' => '\\ccxt\\InvalidOrder', // Exceeding max open order count for instrument.
                    '36226' => '\\ccxt\\InvalidOrder', // Exceeding max open order count for underlying.
                    '36227' => '\\ccxt\\InvalidOrder', // Exceeding max open size across all orders for underlying
                    '36228' => '\\ccxt\\InvalidOrder', // Exceeding max available qty for instrument.
                    '36229' => '\\ccxt\\InvalidOrder', // Exceeding max available qty for underlying.
                    '36230' => '\\ccxt\\InvalidOrder', // Exceeding max position limit for underlying.
                    // --------------------------------------------------------
                    // swap
                    '400' => '\\ccxt\\BadRequest', // Bad Request
                    '401' => '\\ccxt\\AuthenticationError', // Unauthorized access
                    '403' => '\\ccxt\\PermissionDenied', // Access prohibited
                    '404' => '\\ccxt\\BadRequest', // Request address does not exist
                    '405' => '\\ccxt\\BadRequest', // The HTTP Method is not supported
                    '415' => '\\ccxt\\BadRequest', // The current media type is not supported
                    '429' => '\\ccxt\\DDoSProtection', // Too many requests
                    '500' => '\\ccxt\\ExchangeNotAvailable', // System busy
                    '1001' => '\\ccxt\\RateLimitExceeded', // The request is too frequent and has been throttled
                    '1002' => '\\ccxt\\ExchangeError', // {0} verifications within 24 hours
                    '1003' => '\\ccxt\\ExchangeError', // You failed more than {0} times today, the current operation is locked, please try again in 24 hours
                    // '00000' => '\\ccxt\\ExchangeError', // success
                    '40001' => '\\ccxt\\AuthenticationError', // ACCESS_KEY cannot be empty
                    '40002' => '\\ccxt\\AuthenticationError', // SECRET_KEY cannot be empty
                    '40003' => '\\ccxt\\AuthenticationError', // Signature cannot be empty
                    '40004' => '\\ccxt\\InvalidNonce', // Request timestamp expired
                    '40005' => '\\ccxt\\InvalidNonce', // Invalid ACCESS_TIMESTAMP
                    '40006' => '\\ccxt\\AuthenticationError', // Invalid ACCESS_KEY
                    '40007' => '\\ccxt\\BadRequest', // Invalid Content_Type
                    '40008' => '\\ccxt\\InvalidNonce', // Request timestamp expired
                    '40009' => '\\ccxt\\AuthenticationError', // sign signature error
                    '40010' => '\\ccxt\\AuthenticationError', // sign signature error
                    '40011' => '\\ccxt\\AuthenticationError', // ACCESS_PASSPHRASE cannot be empty
                    '40012' => '\\ccxt\\AuthenticationError', // apikey/password is incorrect
                    '40013' => '\\ccxt\\ExchangeError', // User status is abnormal
                    '40014' => '\\ccxt\\PermissionDenied', // Incorrect permissions
                    '40015' => '\\ccxt\\ExchangeError', // System is abnormal, please try again later
                    '40016' => '\\ccxt\\PermissionDenied', // The user must bind the phone or Google
                    '40017' => '\\ccxt\\ExchangeError', // Parameter verification failed
                    '40018' => '\\ccxt\\PermissionDenied', // Invalid IP
                    '40019' => '\\ccxt\\BadRequest', // array("code":"40019","msg":"Parameter QLCUSDT_SPBL cannot be empty","requestTime":1679196063659,"data":null)
                    '40031' => '\\ccxt\\AccountSuspended', // The account has been cancelled and cannot be used again
                    '40037' => '\\ccxt\\AuthenticationError', // Apikey does not exist
                    '40102' => '\\ccxt\\BadRequest', // Contract configuration does not exist, please check the parameters
                    '40103' => '\\ccxt\\BadRequest', // Request method cannot be empty
                    '40104' => '\\ccxt\\ExchangeError', // Lever adjustment failure
                    '40105' => '\\ccxt\\ExchangeError', // Abnormal access to current price limit data
                    '40106' => '\\ccxt\\ExchangeError', // Abnormal get next settlement time
                    '40107' => '\\ccxt\\ExchangeError', // Abnormal access to index price data
                    '40108' => '\\ccxt\\InvalidOrder', // Wrong order quantity
                    '40109' => '\\ccxt\\OrderNotFound', // The data of the order cannot be found, please confirm the order number
                    '40200' => '\\ccxt\\OnMaintenance', // Server upgrade, please try again later
                    '40201' => '\\ccxt\\InvalidOrder', // Order number cannot be empty
                    '40202' => '\\ccxt\\ExchangeError', // User information cannot be empty
                    '40203' => '\\ccxt\\BadRequest', // The amount of adjustment margin cannot be empty or negative
                    '40204' => '\\ccxt\\BadRequest', // Adjustment margin type cannot be empty
                    '40205' => '\\ccxt\\BadRequest', // Adjusted margin type data is wrong
                    '40206' => '\\ccxt\\BadRequest', // The direction of the adjustment margin cannot be empty
                    '40207' => '\\ccxt\\BadRequest', // The adjustment margin data is wrong
                    '40208' => '\\ccxt\\BadRequest', // The accuracy of the adjustment margin amount is incorrect
                    '40209' => '\\ccxt\\BadRequest', // The current page number is wrong, please confirm
                    '40300' => '\\ccxt\\ExchangeError', // User does not exist
                    '40301' => '\\ccxt\\PermissionDenied', // Permission has not been obtained yet. If you need to use it, please contact customer service
                    '40302' => '\\ccxt\\BadRequest', // Parameter abnormality
                    '40303' => '\\ccxt\\BadRequest', // Can only query up to 20,000 data
                    '40304' => '\\ccxt\\BadRequest', // Parameter type is abnormal
                    '40305' => '\\ccxt\\BadRequest', // Client_oid length is not greater than 50, and cannot be Martian characters
                    '40306' => '\\ccxt\\ExchangeError', // Batch processing orders can only process up to 20
                    '40308' => '\\ccxt\\OnMaintenance', // The contract is being temporarily maintained
                    '40309' => '\\ccxt\\BadSymbol', // The contract has been removed
                    '40400' => '\\ccxt\\ExchangeError', // Status check abnormal
                    '40401' => '\\ccxt\\ExchangeError', // The operation cannot be performed
                    '40402' => '\\ccxt\\BadRequest', // The opening direction cannot be empty
                    '40403' => '\\ccxt\\BadRequest', // Wrong opening direction format
                    '40404' => '\\ccxt\\BadRequest', // Whether to enable automatic margin call parameters cannot be empty
                    '40405' => '\\ccxt\\BadRequest', // Whether to enable the automatic margin call parameter type is wrong
                    '40406' => '\\ccxt\\BadRequest', // Whether to enable automatic margin call parameters is of unknown type
                    '40407' => '\\ccxt\\ExchangeError', // The query direction is not the direction entrusted by the plan
                    '40408' => '\\ccxt\\ExchangeError', // Wrong time range
                    '40409' => '\\ccxt\\ExchangeError', // Time format error
                    '40500' => '\\ccxt\\InvalidOrder', // Client_oid check error
                    '40501' => '\\ccxt\\ExchangeError', // Channel name error
                    '40502' => '\\ccxt\\ExchangeError', // If it is a copy user, you must pass the copy to whom
                    '40503' => '\\ccxt\\ExchangeError', // With the single type
                    '40504' => '\\ccxt\\ExchangeError', // Platform code must pass
                    '40505' => '\\ccxt\\ExchangeError', // Not the same type
                    '40506' => '\\ccxt\\AuthenticationError', // Platform signature error
                    '40507' => '\\ccxt\\AuthenticationError', // Api signature error
                    '40508' => '\\ccxt\\ExchangeError', // KOL is not authorized
                    '40509' => '\\ccxt\\ExchangeError', // Abnormal copy end
                    '40600' => '\\ccxt\\ExchangeError', // Copy function suspended
                    '40601' => '\\ccxt\\ExchangeError', // Followers cannot be KOL
                    '40602' => '\\ccxt\\ExchangeError', // The number of copies has reached the limit and cannot process the request
                    '40603' => '\\ccxt\\ExchangeError', // Abnormal copy end
                    '40604' => '\\ccxt\\ExchangeNotAvailable', // Server is busy, please try again later
                    '40605' => '\\ccxt\\ExchangeError', // Copy type, the copy number must be passed
                    '40606' => '\\ccxt\\ExchangeError', // The type of document number is wrong
                    '40607' => '\\ccxt\\ExchangeError', // Document number must be passed
                    '40608' => '\\ccxt\\ExchangeError', // No documented products currently supported
                    '40609' => '\\ccxt\\ExchangeError', // The contract product does not support copying
                    '40700' => '\\ccxt\\BadRequest', // Cursor parameters are incorrect
                    '40701' => '\\ccxt\\ExchangeError', // KOL is not authorized
                    '40702' => '\\ccxt\\ExchangeError', // Unauthorized copying user
                    '40703' => '\\ccxt\\ExchangeError', // Bill inquiry start and end time cannot be empty
                    '40704' => '\\ccxt\\ExchangeError', // Can only check the data of the last three months
                    '40705' => '\\ccxt\\BadRequest', // The start and end time cannot exceed 90 days
                    '40706' => '\\ccxt\\InvalidOrder', // Wrong order price
                    '40707' => '\\ccxt\\BadRequest', // Start time is greater than end time
                    '40708' => '\\ccxt\\BadRequest', // Parameter verification is abnormal
                    '40709' => '\\ccxt\\ExchangeError', // There is no property_exists($this, position) position, and no automatic margin call can be set
                    '40710' => '\\ccxt\\ExchangeError', // Abnormal account status
                    '40711' => '\\ccxt\\InsufficientFunds', // Insufficient contract account balance
                    '40712' => '\\ccxt\\InsufficientFunds', // Insufficient margin
                    '40713' => '\\ccxt\\ExchangeError', // Cannot exceed the maximum transferable margin amount
                    '40714' => '\\ccxt\\ExchangeError', // No direct margin call is allowed
                    '40768' => '\\ccxt\\OrderNotFound', // Order does not exist"
                    '41114' => '\\ccxt\\OnMaintenance', // array("code":"41114","msg":"The current trading pair is under maintenance, please refer to the official announcement for the opening time","requestTime":1679196062544,"data":null)
                    '43011' => '\\ccxt\\InvalidOrder', // The parameter does not meet the specification executePrice <= 0
                    '43025' => '\\ccxt\\InvalidOrder', // Plan order does not exist
                    '43115' => '\\ccxt\\OnMaintenance', // array("code":"43115","msg":"The current trading pair is opening soon, please refer to the official announcement for the opening time","requestTime":1688907202434,"data":null)
                    '45110' => '\\ccxt\\InvalidOrder', // array("code":"45110","msg":"less than the minimum amount 5 USDT","requestTime":1669911118932,"data":null)
                    // spot
                    'invalid sign' => '\\ccxt\\AuthenticationError',
                    'invalid currency' => '\\ccxt\\BadSymbol', // invalid trading pair
                    'invalid symbol' => '\\ccxt\\BadSymbol',
                    'invalid period' => '\\ccxt\\BadRequest', // invalid Kline type
                    'invalid user' => '\\ccxt\\ExchangeError',
                    'invalid amount' => '\\ccxt\\InvalidOrder',
                    'invalid type' => '\\ccxt\\InvalidOrder', // array("status":"error","ts":1595700344504,"err_code":"invalid-parameter","err_msg":"invalid type")
                    'invalid orderId' => '\\ccxt\\InvalidOrder',
                    'invalid record' => '\\ccxt\\ExchangeError',
                    'invalid accountId' => '\\ccxt\\BadRequest',
                    'invalid address' => '\\ccxt\\BadRequest',
                    'accesskey not null' => '\\ccxt\\AuthenticationError', // array("status":"error","ts":1595704360508,"err_code":"invalid-parameter","err_msg":"accesskey not null")
                    'illegal accesskey' => '\\ccxt\\AuthenticationError',
                    'sign not null' => '\\ccxt\\AuthenticationError',
                    'req_time is too much difference from server time' => '\\ccxt\\InvalidNonce',
                    'permissions not right' => '\\ccxt\\PermissionDenied', // array("status":"error","ts":1595704490084,"err_code":"invalid-parameter","err_msg":"permissions not right")
                    'illegal sign invalid' => '\\ccxt\\AuthenticationError', // array("status":"error","ts":1595684716042,"err_code":"invalid-parameter","err_msg":"illegal sign invalid")
                    'user locked' => '\\ccxt\\AccountSuspended',
                    'Request Frequency Is Too High' => '\\ccxt\\RateLimitExceeded',
                    'more than a daily rate of cash' => '\\ccxt\\BadRequest',
                    'more than the maximum daily withdrawal amount' => '\\ccxt\\BadRequest',
                    'need to bind email or mobile' => '\\ccxt\\ExchangeError',
                    'user forbid' => '\\ccxt\\PermissionDenied',
                    'User Prohibited Cash Withdrawal' => '\\ccxt\\PermissionDenied',
                    'Cash Withdrawal Is Less Than The Minimum Value' => '\\ccxt\\BadRequest',
                    'Cash Withdrawal Is More Than The Maximum Value' => '\\ccxt\\BadRequest',
                    'the account with in 24 hours ban coin' => '\\ccxt\\PermissionDenied',
                    'order cancel fail' => '\\ccxt\\BadRequest', // array("status":"error","ts":1595703343035,"err_code":"bad-request","err_msg":"order cancel fail")
                    'base symbol error' => '\\ccxt\\BadSymbol',
                    'base date error' => '\\ccxt\\ExchangeError',
                    'api signature not valid' => '\\ccxt\\AuthenticationError',
                    'gateway internal error' => '\\ccxt\\ExchangeError',
                    'audit failed' => '\\ccxt\\ExchangeError',
                    'order queryorder invalid' => '\\ccxt\\BadRequest',
                    'market no need price' => '\\ccxt\\InvalidOrder',
                    'limit need price' => '\\ccxt\\InvalidOrder',
                    'userid not equal to account_id' => '\\ccxt\\ExchangeError',
                    'your balance is low' => '\\ccxt\\InsufficientFunds', // array("status":"error","ts":1595594160149,"err_code":"invalid-parameter","err_msg":"invalid size, valid range => [1,2000]")
                    'address invalid cointype' => '\\ccxt\\ExchangeError',
                    'system exception' => '\\ccxt\\ExchangeError', // array("status":"error","ts":1595711862763,"err_code":"system exception","err_msg":"system exception")
                    '50003' => '\\ccxt\\ExchangeError', // No record
                    '50004' => '\\ccxt\\BadSymbol', // The transaction pair is currently not supported or has been suspended
                    '50006' => '\\ccxt\\PermissionDenied', // The account is forbidden to withdraw. If you have any questions, please contact customer service.
                    '50007' => '\\ccxt\\PermissionDenied', // The account is forbidden to withdraw within 24 hours. If you have any questions, please contact customer service.
                    '50008' => '\\ccxt\\RequestTimeout', // network timeout
                    '50009' => '\\ccxt\\RateLimitExceeded', // The operation is too frequent, please try again later
                    '50010' => '\\ccxt\\ExchangeError', // The account is abnormally frozen. If you have any questions, please contact customer service.
                    '50014' => '\\ccxt\\InvalidOrder', // The transaction amount under minimum limits
                    '50015' => '\\ccxt\\InvalidOrder', // The transaction amount exceed maximum limits
                    '50016' => '\\ccxt\\InvalidOrder', // The price can't be higher than the current price
                    '50017' => '\\ccxt\\InvalidOrder', // Price under minimum limits
                    '50018' => '\\ccxt\\InvalidOrder', // The price exceed maximum limits
                    '50019' => '\\ccxt\\InvalidOrder', // The amount under minimum limits
                    '50020' => '\\ccxt\\InsufficientFunds', // Insufficient balance
                    '50021' => '\\ccxt\\InvalidOrder', // Price is under minimum limits
                    '50026' => '\\ccxt\\InvalidOrder', // Market price parameter error
                    'invalid order query time' => '\\ccxt\\ExchangeError', // start time is greater than end time; or the time interval between start time and end time is greater than 48 hours
                    'invalid start time' => '\\ccxt\\BadRequest', // start time is a date 30 days ago; or start time is a date in the future
                    'invalid end time' => '\\ccxt\\BadRequest', // end time is a date 30 days ago; or end time is a date in the future
                    '20003' => '\\ccxt\\ExchangeError', // operation failed, array("status":"error","ts":1595730308979,"err_code":"bad-request","err_msg":"20003")
                    '01001' => '\\ccxt\\ExchangeError', // order failed, array("status":"fail","err_code":"01001","err_msg":"系统异常，请稍后重试")
                    '43111' => '\\ccxt\\PermissionDenied', // array("code":"43111","msg":"参数错误 address not in address book","requestTime":1665394201164,"data":null)
                ),
                'broad' => array(
                    'invalid size, valid range' => '\\ccxt\\ExchangeError',
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'commonCurrencies' => array(
                'JADE' => 'Jade Protocol',
            ),
            'options' => array(
                'timeframes' => array(
                    'spot' => array(
                        '1m' => '1min',
                        '5m' => '5min',
                        '15m' => '15min',
                        '30m' => '30min',
                        '1h' => '1h',
                        '4h' => '4h',
                        '6h' => '6Hutc',
                        '12h' => '12Hutc',
                        '1d' => '1Dutc',
                        '3d' => '3Dutc',
                        '1w' => '1Wutc',
                        '1M' => '1Mutc',
                    ),
                    'swap' => array(
                        '1m' => '1m',
                        '3m' => '3m',
                        '5m' => '5m',
                        '15m' => '15m',
                        '30m' => '30m',
                        '1h' => '1H',
                        '2h' => '2H',
                        '4h' => '4H',
                        '6h' => '6Hutc',
                        '12h' => '12Hutc',
                        '1d' => '1Dutc',
                        '3d' => '3Dutc',
                        '1w' => '1Wutc',
                        '1M' => '1Mutc',
                    ),
                ),
                'fetchMarkets' => array(
                    'spot',
                    'swap', // there is future markets but they use the same endpoints
                ),
                'defaultType' => 'spot', // 'spot', 'swap', 'future'
                'defaultSubType' => 'linear', // 'linear', 'inverse'
                'createMarketBuyOrderRequiresPrice' => true,
                'broker' => 'p4sve',
                'withdraw' => array(
                    'fillResponseFromRequest' => true,
                ),
                'fetchOHLCV' => array(
                    'spot' => array(
                        'method' => 'publicSpotGetV2SpotMarketCandles', // or publicSpotGetV2SpotMarketHistoryCandles
                    ),
                    'swap' => array(
                        'method' => 'publicMixGetV2MixMarketCandles', // or publicMixGetV2MixMarketHistoryCandles or publicMixGetV2MixMarketHistoryIndexCandles or publicMixGetV2MixMarketHistoryMarkCandles
                    ),
                ),
                'fetchTrades' => array(
                    'spot' => array(
                        'method' => 'publicSpotGetV2SpotMarketFillsHistory', // or publicSpotGetV2SpotMarketFills
                    ),
                    'swap' => array(
                        'method' => 'publicMixGetV2MixMarketFillsHistory', // or publicMixGetV2MixMarketFills
                    ),
                ),
                'accountsByType' => array(
                    'spot' => 'spot',
                    'cross' => 'crossed_margin',
                    'isolated' => 'isolated_margin',
                    'swap' => 'usdt_futures',
                    'usdc_swap' => 'usdc_futures',
                    'future' => 'coin_futures',
                    'p2p' => 'p2p',
                ),
                'accountsById' => array(
                    'spot' => 'spot',
                    'crossed_margin' => 'cross',
                    'isolated_margin' => 'isolated',
                    'usdt_futures' => 'swap',
                    'usdc_futures' => 'usdc_swap',
                    'coin_futures' => 'future',
                    'p2p' => 'p2p',
                ),
                'sandboxMode' => false,
                'networks' => array(
                    'TRX' => 'TRC20',
                    'ETH' => 'ERC20',
                    'BSC' => 'BEP20',
                ),
                'networksById' => array(
                    'TRC20' => 'TRX',
                    'BSC' => 'BEP20',
                ),
                'fetchPositions' => array(
                    'method' => 'privateMixGetV2MixPositionAllPosition', // or privateMixGetV2MixPositionHistoryPosition
                ),
                'defaultTimeInForce' => 'GTC', // 'GTC' = Good To Cancel (default), 'IOC' = Immediate Or Cancel
            ),
        ));
    }

    public function set_sandbox_mode($enabled) {
        $this->options['sandboxMode'] = $enabled;
    }

    public function convert_symbol_for_sandbox($symbol) {
        if (str_starts_with($symbol, 'S')) {
            // handle using the exchange specified sandbox symbols
            return $symbol;
        }
        $convertedSymbol = null;
        if (mb_strpos($symbol, '/') > -1) {
            if (mb_strpos($symbol, ':') === -1) {
                throw new NotSupported($this->id . ' sandbox supports swap and future markets only');
            }
            $splitBase = explode('/', $symbol);
            $previousBase = $this->safe_string($splitBase, 0);
            $previousQuoteSettleExpiry = $this->safe_string($splitBase, 1);
            $splitQuote = explode(':', $previousQuoteSettleExpiry);
            $previousQuote = $this->safe_string($splitQuote, 0);
            $previousSettleExpiry = $this->safe_string($splitQuote, 1);
            $splitSettle = explode('-', $previousSettleExpiry);
            $previousSettle = $this->safe_string($splitSettle, 0);
            $expiry = $this->safe_string($splitSettle, 1);
            $convertedSymbol = 'S' . $previousBase . '/S' . $previousQuote . ':S' . $previousSettle;
            if ($expiry !== null) {
                $convertedSymbol = $convertedSymbol . '-' . $expiry;
            }
        } else {
            // handle using a market id instead of a unified $symbol
            $base = mb_substr($symbol, 0, 3 - 0);
            $remaining = mb_substr($symbol, 3);
            $convertedSymbol = 'S' . $base . 'S' . $remaining;
        }
        return $convertedSymbol;
    }

    public function handle_product_type_and_params($market = null, $params = array ()) {
        $subType = null;
        list($subType, $params) = $this->handle_sub_type_and_params('handleProductTypeAndParams', null, $params);
        $defaultProductType = null;
        if (($subType !== null) && ($market === null)) {
            // set default only if $subType is defined and $market is not defined, since there is also USDC productTypes which are also linear
            $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
            if ($sandboxMode) {
                $defaultProductType = ($subType === 'linear') ? 'SUSDT-FUTURES' : 'SCOIN-FUTURES';
            } else {
                $defaultProductType = ($subType === 'linear') ? 'USDT-FUTURES' : 'COIN-FUTURES';
            }
        }
        $productType = $this->safe_string($params, 'productType', $defaultProductType);
        if (($productType === null) && ($market !== null)) {
            $settle = $market['settle'];
            if ($settle === 'USDT') {
                $productType = 'USDT-FUTURES';
            } elseif ($settle === 'USDC') {
                $productType = 'USDC-FUTURES';
            } elseif ($settle === 'SUSDT') {
                $productType = 'SUSDT-FUTURES';
            } elseif ($settle === 'SUSDC') {
                $productType = 'SUSDC-FUTURES';
            } elseif (($settle === 'SBTC') || ($settle === 'SETH') || ($settle === 'SEOS')) {
                $productType = 'SCOIN-FUTURES';
            } else {
                $productType = 'COIN-FUTURES';
            }
        }
        if ($productType === null) {
            throw new ArgumentsRequired($this->id . ' requires a $productType param, one of "USDT-FUTURES", "USDC-FUTURES", "COIN-FUTURES", "SUSDT-FUTURES", "SUSDC-FUTURES" or "SCOIN-FUTURES"');
        }
        $params = $this->omit($params, 'productType');
        return array( $productType, $params );
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @see https://www.bitget.com/api-doc/common/public/Get-Server-Time
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->publicCommonGetV2PublicTime ($params);
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700111073740,
        //         "data" => {
        //             "serverTime" => "1700111073740"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->safe_integer($data, 'serverTime');
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for bitget
         * @see https://www.bitget.com/api-doc/spot/market/Get-Symbols
         * @see https://www.bitget.com/api-doc/contract/market/Get-All-Symbols-Contracts
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing market data
         */
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $types = $this->safe_value($this->options, 'fetchMarkets', array( 'spot', 'swap' ));
        if ($sandboxMode) {
            $types = array( 'swap' );
        }
        $promises = array();
        for ($i = 0; $i < count($types); $i++) {
            $type = $types[$i];
            if ($type === 'swap') {
                $subTypes = null;
                if ($sandboxMode) {
                    // the following are simulated trading markets array( 'SUSDT-FUTURES', 'SCOIN-FUTURES', 'SUSDC-FUTURES' );
                    $subTypes = array( 'SUSDT-FUTURES', 'SCOIN-FUTURES', 'SUSDC-FUTURES' );
                } else {
                    $subTypes = array( 'USDT-FUTURES', 'COIN-FUTURES', 'USDC-FUTURES' );
                }
                for ($j = 0; $j < count($subTypes); $j++) {
                    $promises[] = $this->fetch_markets_by_type($type, array_merge($params, array(
                        'productType' => $subTypes[$j],
                    )));
                }
            } else {
                $promises[] = $this->fetch_markets_by_type($types[$i], $params);
            }
        }
        $promises = $promises;
        $result = $promises[0];
        for ($i = 1; $i < count($promises); $i++) {
            $result = $this->array_concat($result, $promises[$i]);
        }
        return $result;
    }

    public function parse_market($market): array {
        //
        // $spot
        //
        //     {
        //         "symbol" => "TRXUSDT",
        //         "baseCoin" => "TRX",
        //         "quoteCoin" => "USDT",
        //         "minTradeAmount" => "0",
        //         "maxTradeAmount" => "10000000000",
        //         "takerFeeRate" => "0.002",
        //         "makerFeeRate" => "0.002",
        //         "pricePrecision" => "6",
        //         "quantityPrecision" => "4",
        //         "quotePrecision" => "6",
        //         "status" => "online",
        //         "minTradeUSDT" => "5",
        //         "buyLimitPriceRatio" => "0.05",
        //         "sellLimitPriceRatio" => "0.05"
        //     }
        //
        // $swap and $future
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "baseCoin" => "BTC",
        //         "quoteCoin" => "USDT",
        //         "buyLimitPriceRatio" => "0.01",
        //         "sellLimitPriceRatio" => "0.01",
        //         "feeRateUpRatio" => "0.005",
        //         "makerFeeRate" => "0.0002",
        //         "takerFeeRate" => "0.0006",
        //         "openCostUpRatio" => "0.01",
        //         "supportMarginCoins" => ["USDT"],
        //         "minTradeNum" => "0.001",
        //         "priceEndStep" => "1",
        //         "volumePlace" => "3",
        //         "pricePlace" => "1",
        //         "sizeMultiplier" => "0.001",
        //         "symbolType" => "perpetual",
        //         "minTradeUSDT" => "5",
        //         "maxSymbolOrderNum" => "200",
        //         "maxProductOrderNum" => "400",
        //         "maxPositionNum" => "150",
        //         "symbolStatus" => "normal",
        //         "offTime" => "-1",
        //         "limitOpenTime" => "-1",
        //         "deliveryTime" => "",
        //         "deliveryStartTime" => "",
        //         "deliveryPeriod" => "",
        //         "launchTime" => "",
        //         "fundInterval" => "8",
        //         "minLever" => "1",
        //         "maxLever" => "125",
        //         "posLimit" => "0.05",
        //         "maintainTime" => ""
        //     }
        //
        $marketId = $this->safe_string($market, 'symbol');
        $quoteId = $this->safe_string($market, 'quoteCoin');
        $baseId = $this->safe_string($market, 'baseCoin');
        $quote = $this->safe_currency_code($quoteId);
        $base = $this->safe_currency_code($baseId);
        $supportMarginCoins = $this->safe_value($market, 'supportMarginCoins', array());
        $settleId = null;
        if ($this->in_array($baseId, $supportMarginCoins)) {
            $settleId = $baseId;
        } elseif ($this->in_array($quoteId, $supportMarginCoins)) {
            $settleId = $quoteId;
        } else {
            $settleId = $this->safe_string($supportMarginCoins, 0);
        }
        $settle = $this->safe_currency_code($settleId);
        $symbol = $base . '/' . $quote;
        $type = null;
        $swap = false;
        $spot = false;
        $future = false;
        $contract = false;
        $pricePrecision = null;
        $amountPrecision = null;
        $linear = null;
        $inverse = null;
        $expiry = null;
        $expiryDatetime = null;
        $symbolType = $this->safe_string($market, 'symbolType');
        if ($symbolType === null) {
            $type = 'spot';
            $spot = true;
            $pricePrecision = $this->parse_number($this->parse_precision($this->safe_string($market, 'pricePrecision')));
            $amountPrecision = $this->parse_number($this->parse_precision($this->safe_string($market, 'quantityPrecision')));
        } else {
            if ($symbolType === 'perpetual') {
                $type = 'swap';
                $swap = true;
                $symbol = $symbol . ':' . $settle;
            } elseif ($symbolType === 'delivery') {
                $expiry = $this->safe_integer($market, 'deliveryTime');
                $expiryDatetime = $this->iso8601($expiry);
                $expiryParts = explode('-', $expiryDatetime);
                $yearPart = $this->safe_string($expiryParts, 0);
                $dayPart = $this->safe_string($expiryParts, 2);
                $year = mb_substr($yearPart, 2, 4 - 2);
                $month = $this->safe_string($expiryParts, 1);
                $day = mb_substr($dayPart, 0, 2 - 0);
                $expiryString = $year . $month . $day;
                $type = 'future';
                $future = true;
                $symbol = $symbol . ':' . $settle . '-' . $expiryString;
            }
            $contract = true;
            $inverse = ($base === $settle);
            $linear = !$inverse;
            $priceDecimals = $this->safe_integer($market, 'pricePlace');
            $amountDecimals = $this->safe_integer($market, 'volumePlace');
            $priceStep = $this->safe_string($market, 'priceEndStep');
            $amountStep = $this->safe_string($market, 'minTradeNum');
            $precisePrice = new Precise ($priceStep);
            $precisePrice->decimals = max ($precisePrice->decimals, $priceDecimals);
            $precisePrice->reduce ();
            $priceString = (string) $precisePrice;
            $pricePrecision = $this->parse_number($priceString);
            $preciseAmount = new Precise ($amountStep);
            $preciseAmount->decimals = max ($preciseAmount->decimals, $amountDecimals);
            $preciseAmount->reduce ();
            $amountString = (string) $preciseAmount;
            $amountPrecision = $this->parse_number($amountString);
        }
        $status = $this->safe_string_2($market, 'status', 'symbolStatus');
        $active = null;
        if ($status !== null) {
            $active = (($status === 'online') || ($status === 'normal'));
        }
        $minCost = null;
        if ($quote === 'USDT') {
            $minCost = $this->safe_number($market, 'minTradeUSDT');
        }
        $contractSize = $contract ? 1 : null;
        return array(
            'id' => $marketId,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $settleId,
            'type' => $type,
            'spot' => $spot,
            'margin' => null,
            'swap' => $swap,
            'future' => $future,
            'option' => false,
            'active' => $active,
            'contract' => $contract,
            'linear' => $linear,
            'inverse' => $inverse,
            'taker' => $this->safe_number($market, 'takerFeeRate'),
            'maker' => $this->safe_number($market, 'makerFeeRate'),
            'contractSize' => $contractSize,
            'expiry' => $expiry,
            'expiryDatetime' => $expiryDatetime,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $amountPrecision,
                'price' => $pricePrecision,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => $this->safe_number($market, 'minLever'),
                    'max' => $this->safe_number($market, 'maxLever'),
                ),
                'amount' => array(
                    'min' => $this->safe_number_2($market, 'minTradeNum', 'minTradeAmount'),
                    'max' => $this->safe_number($market, 'maxTradeAmount'),
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => $minCost,
                    'max' => null,
                ),
            ),
            'created' => $this->safe_integer($market, 'launchTime'),
            'info' => $market,
        );
    }

    public function fetch_markets_by_type($type, $params = array ()) {
        $response = null;
        if ($type === 'spot') {
            $response = $this->publicSpotGetV2SpotPublicSymbols ($params);
        } elseif (($type === 'swap') || ($type === 'future')) {
            $response = $this->publicMixGetV2MixMarketContracts ($params);
        } else {
            throw new NotSupported($this->id . ' does not support ' . $type . ' market');
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700102364653,
        //         "data" => array(
        //             array(
        //                 "symbol" => "TRXUSDT",
        //                 "baseCoin" => "TRX",
        //                 "quoteCoin" => "USDT",
        //                 "minTradeAmount" => "0",
        //                 "maxTradeAmount" => "10000000000",
        //                 "takerFeeRate" => "0.002",
        //                 "makerFeeRate" => "0.002",
        //                 "pricePrecision" => "6",
        //                 "quantityPrecision" => "4",
        //                 "quotePrecision" => "6",
        //                 "status" => "online",
        //                 "minTradeUSDT" => "5",
        //                 "buyLimitPriceRatio" => "0.05",
        //                 "sellLimitPriceRatio" => "0.05"
        //             ),
        //         )
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700102364709,
        //         "data" => [
        //             array(
        //                 "symbol" => "BTCUSDT",
        //                 "baseCoin" => "BTC",
        //                 "quoteCoin" => "USDT",
        //                 "buyLimitPriceRatio" => "0.01",
        //                 "sellLimitPriceRatio" => "0.01",
        //                 "feeRateUpRatio" => "0.005",
        //                 "makerFeeRate" => "0.0002",
        //                 "takerFeeRate" => "0.0006",
        //                 "openCostUpRatio" => "0.01",
        //                 "supportMarginCoins" => ["USDT"],
        //                 "minTradeNum" => "0.001",
        //                 "priceEndStep" => "1",
        //                 "volumePlace" => "3",
        //                 "pricePlace" => "1",
        //                 "sizeMultiplier" => "0.001",
        //                 "symbolType" => "perpetual",
        //                 "minTradeUSDT" => "5",
        //                 "maxSymbolOrderNum" => "200",
        //                 "maxProductOrderNum" => "400",
        //                 "maxPositionNum" => "150",
        //                 "symbolStatus" => "normal",
        //                 "offTime" => "-1",
        //                 "limitOpenTime" => "-1",
        //                 "deliveryTime" => "",
        //                 "deliveryStartTime" => "",
        //                 "deliveryPeriod" => "",
        //                 "launchTime" => "",
        //                 "fundInterval" => "8",
        //                 "minLever" => "1",
        //                 "maxLever" => "125",
        //                 "posLimit" => "0.05",
        //                 "maintainTime" => ""
        //             ),
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_markets($data);
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available currencies on an exchange
         * @see https://www.bitget.com/api-doc/spot/market/Get-Coin-List
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an associative dictionary of currencies
         */
        $response = $this->publicSpotGetV2SpotPublicCoins ($params);
        //
        //     {
        //         "code" => "00000",
        //         "data" => array(
        //             {
        //                 "chains" => array(
        //                     array(
        //                         "browserUrl" => "https://blockchair.com/bitcoin/transaction/",
        //                         "chain" => "BTC",
        //                         "depositConfirm" => "1",
        //                         "extraWithdrawFee" => "0",
        //                         "minDepositAmount" => "0.0001",
        //                         "minWithdrawAmount" => "0.005",
        //                         "needTag" => "false",
        //                         "rechargeable" => "true",
        //                         "withdrawConfirm" => "1",
        //                         "withdrawFee" => "0.0004",
        //                         "withdrawable" => "true"
        //                     ),
        //                 ),
        //                 "coin" => "BTC",
        //                 "coinId" => "1",
        //                 "transfer" => "true""
        //             }
        //         ),
        //         "msg" => "success",
        //         "requestTime" => "1700120731773"
        //     }
        //
        $result = array();
        $data = $this->safe_value($response, 'data', array());
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $id = $this->safe_string($entry, 'coinId');
            $code = $this->safe_currency_code($this->safe_string($entry, 'coin'));
            $chains = $this->safe_value($entry, 'chains', array());
            $networks = array();
            $deposit = false;
            $withdraw = false;
            $minWithdrawString = null;
            $minDepositString = null;
            $minWithdrawFeeString = null;
            for ($j = 0; $j < count($chains); $j++) {
                $chain = $chains[$j];
                $networkId = $this->safe_string($chain, 'chain');
                $network = $this->safe_currency_code($networkId);
                $withdrawEnabled = $this->safe_string($chain, 'withdrawable');
                $canWithdraw = $withdrawEnabled === 'true';
                $withdraw = ($canWithdraw) ? $canWithdraw : $withdraw;
                $depositEnabled = $this->safe_string($chain, 'rechargeable');
                $canDeposit = $depositEnabled === 'true';
                $deposit = ($canDeposit) ? $canDeposit : $deposit;
                $networkWithdrawFeeString = $this->safe_string($chain, 'withdrawFee');
                if ($networkWithdrawFeeString !== null) {
                    $minWithdrawFeeString = ($minWithdrawFeeString === null) ? $networkWithdrawFeeString : Precise::string_min($networkWithdrawFeeString, $minWithdrawFeeString);
                }
                $networkMinWithdrawString = $this->safe_string($chain, 'minWithdrawAmount');
                if ($networkMinWithdrawString !== null) {
                    $minWithdrawString = ($minWithdrawString === null) ? $networkMinWithdrawString : Precise::string_min($networkMinWithdrawString, $minWithdrawString);
                }
                $networkMinDepositString = $this->safe_string($chain, 'minDepositAmount');
                if ($networkMinDepositString !== null) {
                    $minDepositString = ($minDepositString === null) ? $networkMinDepositString : Precise::string_min($networkMinDepositString, $minDepositString);
                }
                $networks[$network] = array(
                    'info' => $chain,
                    'id' => $networkId,
                    'network' => $network,
                    'limits' => array(
                        'withdraw' => array(
                            'min' => $this->parse_number($networkMinWithdrawString),
                            'max' => null,
                        ),
                        'deposit' => array(
                            'min' => $this->parse_number($networkMinDepositString),
                            'max' => null,
                        ),
                    ),
                    'active' => $canWithdraw && $canDeposit,
                    'withdraw' => $canWithdraw,
                    'deposit' => $canDeposit,
                    'fee' => $this->parse_number($networkWithdrawFeeString),
                    'precision' => null,
                );
            }
            $result[$code] = array(
                'info' => $entry,
                'id' => $id,
                'code' => $code,
                'networks' => $networks,
                'type' => null,
                'name' => null,
                'active' => $deposit && $withdraw,
                'deposit' => $deposit,
                'withdraw' => $withdraw,
                'fee' => $this->parse_number($minWithdrawFeeString),
                'precision' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => $this->parse_number($minWithdrawString),
                        'max' => null,
                    ),
                    'deposit' => array(
                        'min' => $this->parse_number($minDepositString),
                        'max' => null,
                    ),
                ),
                'created' => null,
            );
        }
        return $result;
    }

    public function fetch_market_leverage_tiers(string $symbol, $params = array ()) {
        /**
         * retrieve information on the maximum leverage, and maintenance margin for trades of varying trade sizes for a single $market
         * @see https://www.bitget.com/api-doc/contract/position/Get-Query-Position-Lever
         * @see https://www.bitget.com/api-doc/margin/cross/account/Cross-Tier-Data
         * @see https://www.bitget.com/api-doc/margin/isolated/account/Isolated-Tier-Data
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] for spot margin 'cross' or 'isolated', default is 'isolated'
         * @param {string} [$params->code] required for cross spot margin
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-tiers-structure leverage tiers structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array();
        $response = null;
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchMarketLeverageTiers', $params, 'isolated');
        if (($market['swap']) || ($market['future'])) {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $request['symbol'] = $market['id'];
            $response = $this->publicMixGetV2MixMarketQueryPositionLever (array_merge($request, $params));
        } elseif ($marginMode === 'isolated') {
            $request['symbol'] = $market['id'];
            $response = $this->privateMarginGetV2MarginIsolatedTierData (array_merge($request, $params));
        } elseif ($marginMode === 'cross') {
            $code = $this->safe_string($params, 'code');
            if ($code === null) {
                throw new ArgumentsRequired($this->id . ' fetchMarketLeverageTiers() requires a $code argument');
            }
            $params = $this->omit($params, 'code');
            $currency = $this->currency($code);
            $request['coin'] = $currency['code'];
            $response = $this->privateMarginGetV2MarginCrossedTierData (array_merge($request, $params));
        } else {
            throw new BadRequest($this->id . ' fetchMarketLeverageTiers() $symbol does not support $market ' . $market['symbol']);
        }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700290724614,
        //         "data" => array(
        //             array(
        //                 "symbol" => "BTCUSDT",
        //                 "level" => "1",
        //                 "startUnit" => "0",
        //                 "endUnit" => "150000",
        //                 "leverage" => "125",
        //                 "keepMarginRate" => "0.004"
        //             ),
        //         )
        //     }
        //
        // isolated
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700291531894,
        //         "data" => array(
        //             array(
        //                 "tier" => "1",
        //                 "symbol" => "BTCUSDT",
        //                 "leverage" => "10",
        //                 "baseCoin" => "BTC",
        //                 "quoteCoin" => "USDT",
        //                 "baseMaxBorrowableAmount" => "2",
        //                 "quoteMaxBorrowableAmount" => "24000",
        //                 "maintainMarginRate" => "0.05",
        //                 "initRate" => "0.1111"
        //             ),
        //         )
        //     }
        //
        // cross
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700291818831,
        //         "data" => array(
        //             {
        //                 "tier" => "1",
        //                 "leverage" => "3",
        //                 "coin" => "BTC",
        //                 "maxBorrowableAmount" => "26",
        //                 "maintainMarginRate" => "0.1"
        //             }
        //         )
        //     }
        //
        $result = $this->safe_value($response, 'data', array());
        return $this->parse_market_leverage_tiers($result, $market);
    }

    public function parse_market_leverage_tiers($info, ?array $market = null) {
        //
        // swap and future
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "level" => "1",
        //         "startUnit" => "0",
        //         "endUnit" => "150000",
        //         "leverage" => "125",
        //         "keepMarginRate" => "0.004"
        //     }
        //
        // isolated
        //
        //     {
        //         "tier" => "1",
        //         "symbol" => "BTCUSDT",
        //         "leverage" => "10",
        //         "baseCoin" => "BTC",
        //         "quoteCoin" => "USDT",
        //         "baseMaxBorrowableAmount" => "2",
        //         "quoteMaxBorrowableAmount" => "24000",
        //         "maintainMarginRate" => "0.05",
        //         "initRate" => "0.1111"
        //     }
        //
        // cross
        //
        //     {
        //         "tier" => "1",
        //         "leverage" => "3",
        //         "coin" => "BTC",
        //         "maxBorrowableAmount" => "26",
        //         "maintainMarginRate" => "0.1"
        //     }
        //
        $tiers = array();
        $minNotional = 0;
        for ($i = 0; $i < count($info); $i++) {
            $item = $info[$i];
            $minimumNotional = $this->safe_number($item, 'startUnit');
            if ($minimumNotional !== null) {
                $minNotional = $minimumNotional;
            }
            $maxNotional = $this->safe_number_n($item, array( 'endUnit', 'maxBorrowableAmount', 'baseMaxBorrowableAmount' ));
            $marginCurrency = $this->safe_string_2($item, 'coin', 'baseCoin');
            $currencyId = ($marginCurrency !== null) ? $marginCurrency : $market['base'];
            $tiers[] = array(
                'tier' => $this->safe_integer_2($item, 'level', 'tier'),
                'currency' => $this->safe_currency_code($currencyId),
                'minNotional' => $minNotional,
                'maxNotional' => $maxNotional,
                'maintenanceMarginRate' => $this->safe_number_2($item, 'keepMarginRate', 'maintainMarginRate'),
                'maxLeverage' => $this->safe_number($item, 'leverage'),
                'info' => $item,
            );
            $minNotional = $maxNotional;
        }
        return $tiers;
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all deposits made to an account
         * @see https://www.bitget.com/api-doc/spot/account/Get-Deposit-Record
         * @param {string} $code unified $currency $code
         * @param {int} [$since] the earliest time in ms to fetch deposits for
         * @param {int} [$limit] the maximum number of deposits structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] end time in milliseconds
         * @param {string} [$params->idLessThan] return records with id less than the provided value
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchDeposits', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchDeposits', null, $since, $limit, $params, 'idLessThan', 'idLessThan', null, 100);
        }
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchDeposits() requires a `$code` argument');
        }
        $currency = $this->currency($code);
        if ($since === null) {
            $since = $this->milliseconds() - 7776000000; // 90 days
        }
        $request = array(
            'coin' => $currency['code'],
            'startTime' => $since,
            'endTime' => $this->milliseconds(),
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        $response = $this->privateSpotGetV2SpotWalletDepositRecords (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700528340608,
        //         "data" => array(
        //             {
        //                 "orderId" => "1083832260799930368",
        //                 "tradeId" => "35bf0e588a42b25c71a9d45abe7308cabdeec6b7b423910b9bd4743d3a9a9efa",
        //                 "coin" => "BTC",
        //                 "type" => "deposit",
        //                 "size" => "0.00030000",
        //                 "status" => "success",
        //                 "toAddress" => "1BfZh7JESJGBUszCGeZnzxbVVvBycbJSbA",
        //                 "dest" => "on_chain",
        //                 "chain" => "BTC",
        //                 "fromAddress" => null,
        //                 "cTime" => "1694131668281",
        //                 "uTime" => "1694131680247"
        //             }
        //         )
        //     }
        //
        $rawTransactions = $this->safe_value($response, 'data', array());
        return $this->parse_transactions($rawTransactions, $currency, $since, $limit);
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        /**
         * make a withdrawal
         * @see https://www.bitget.com/api-doc/spot/account/Wallet-Withdrawal
         * @param {string} $code unified $currency $code
         * @param {float} $amount the $amount to withdraw
         * @param {string} $address the $address to withdraw to
         * @param {string} $tag
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->chain] the blockchain network the withdrawal is taking place on
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structure~
         */
        $this->check_address($address);
        $chain = $this->safe_string_2($params, 'chain', 'network');
        $params = $this->omit($params, 'network');
        if ($chain === null) {
            throw new ArgumentsRequired($this->id . ' withdraw() requires a $chain parameter or a network parameter');
        }
        $this->load_markets();
        $currency = $this->currency($code);
        $networkId = $this->network_code_to_id($chain);
        $request = array(
            'coin' => $currency['code'],
            'address' => $address,
            'chain' => $networkId,
            'size' => $amount,
            'transferType' => 'on_chain',
        );
        if ($tag !== null) {
            $request['tag'] = $tag;
        }
        $response = $this->privateSpotPostV2SpotWalletWithdrawal (array_merge($request, $params));
        //
        //     {
        //          "code":"00000",
        //          "msg":"success",
        //          "requestTime":1696784219602,
        //          "data" => {
        //              "orderId":"1094957867615789056",
        //              "clientOid":"64f1e4ce842041d296b4517df1b5c2d7"
        //          }
        //      }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array(
            'id' => $this->safe_string($data, 'orderId'),
            'info' => $response,
            'txid' => null,
            'timestamp' => null,
            'datetime' => null,
            'network' => null,
            'addressFrom' => null,
            'address' => null,
            'addressTo' => null,
            'amount' => null,
            'type' => 'withdrawal',
            'currency' => null,
            'status' => null,
            'updated' => null,
            'tagFrom' => null,
            'tag' => null,
            'tagTo' => null,
            'comment' => null,
            'fee' => null,
        );
        $withdrawOptions = $this->safe_value($this->options, 'withdraw', array());
        $fillResponseFromRequest = $this->safe_value($withdrawOptions, 'fillResponseFromRequest', true);
        if ($fillResponseFromRequest) {
            $result['currency'] = $code;
            $result['timestamp'] = $this->milliseconds();
            $result['datetime'] = $this->iso8601($this->milliseconds());
            $result['amount'] = $amount;
            $result['tag'] = $tag;
            $result['address'] = $address;
            $result['addressTo'] = $address;
            $result['network'] = $chain;
        }
        return $result;
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all withdrawals made from an account
         * @see https://www.bitget.com/api-doc/spot/account/Get-Withdraw-Record
         * @param {string} $code unified $currency $code
         * @param {int} [$since] the earliest time in ms to fetch withdrawals for
         * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] end time in milliseconds
         * @param {string} [$params->idLessThan] return records with id less than the provided value
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchWithdrawals', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchWithdrawals', null, $since, $limit, $params, 'idLessThan', 'idLessThan', null, 100);
        }
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchWithdrawals() requires a `$code` argument');
        }
        $currency = $this->currency($code);
        if ($since === null) {
            $since = $this->milliseconds() - 7776000000; // 90 days
        }
        $request = array(
            'coin' => $currency['code'],
            'startTime' => $since,
            'endTime' => $this->milliseconds(),
        );
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateSpotGetV2SpotWalletWithdrawalRecords (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700528340608,
        //         "data" => array(
        //             {
        //                 "orderId" => "1083832260799930368",
        //                 "tradeId" => "35bf0e588a42b25c71a9d45abe7308cabdeec6b7b423910b9bd4743d3a9a9efa",
        //                 "clientOid" => "123",
        //                 "coin" => "BTC",
        //                 "type" => "withdraw",
        //                 "size" => "0.00030000",
        //                 "fee" => "-1.0000000",
        //                 "status" => "success",
        //                 "toAddress" => "1BfZh7JESJGBUszCGeZnzxbVVvBycbJSbA",
        //                 "dest" => "on_chain",
        //                 "chain" => "BTC",
        //                 "confirm" => "100",
        //                 "fromAddress" => null,
        //                 "cTime" => "1694131668281",
        //                 "uTime" => "1694131680247"
        //             }
        //         )
        //     }
        //
        $rawTransactions = $this->safe_value($response, 'data', array());
        return $this->parse_transactions($rawTransactions, $currency, $since, $limit);
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        // fetchDeposits
        //
        //     {
        //         "orderId" => "1083832260799930368",
        //         "tradeId" => "35bf0e588a42b25c71a9d45abe7308cabdeec6b7b423910b9bd4743d3a9a9efa",
        //         "coin" => "BTC",
        //         "type" => "deposit",
        //         "size" => "0.00030000",
        //         "status" => "success",
        //         "toAddress" => "1BfZh7JESJGBUszCGeZnzxbVVvBycbJSbA",
        //         "dest" => "on_chain",
        //         "chain" => "BTC",
        //         "fromAddress" => null,
        //         "cTime" => "1694131668281",
        //         "uTime" => "1694131680247"
        //     }
        //
        // fetchWithdrawals
        //
        //     {
        //         "orderId" => "1083832260799930368",
        //         "tradeId" => "35bf0e588a42b25c71a9d45abe7308cabdeec6b7b423910b9bd4743d3a9a9efa",
        //         "clientOid" => "123",
        //         "coin" => "BTC",
        //         "type" => "withdraw",
        //         "size" => "0.00030000",
        //         "fee" => "-1.0000000",
        //         "status" => "success",
        //         "toAddress" => "1BfZh7JESJGBUszCGeZnzxbVVvBycbJSbA",
        //         "dest" => "on_chain",
        //         "chain" => "BTC",
        //         "confirm" => "100",
        //         "fromAddress" => null,
        //         "cTime" => "1694131668281",
        //         "uTime" => "1694131680247"
        //     }
        //
        $currencyId = $this->safe_string($transaction, 'coin');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_integer($transaction, 'cTime');
        $networkId = $this->safe_string($transaction, 'chain');
        $status = $this->safe_string($transaction, 'status');
        $tag = $this->safe_string($transaction, 'tag');
        $feeCostString = $this->safe_string($transaction, 'fee');
        $feeCostAbsString = Precise::string_abs($feeCostString);
        $fee = null;
        $amountString = $this->safe_string($transaction, 'size');
        if ($feeCostAbsString !== null) {
            $fee = array( 'currency' => $code, 'cost' => $this->parse_number($feeCostAbsString) );
            $amountString = Precise::string_sub($amountString, $feeCostAbsString);
        }
        return array(
            'id' => $this->safe_string($transaction, 'orderId'),
            'info' => $transaction,
            'txid' => $this->safe_string($transaction, 'tradeId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'network' => $this->network_id_to_code($networkId),
            'addressFrom' => $this->safe_string($transaction, 'fromAddress'),
            'address' => $this->safe_string($transaction, 'toAddress'),
            'addressTo' => $this->safe_string($transaction, 'toAddress'),
            'amount' => $this->parse_number($amountString),
            'type' => $this->safe_string($transaction, 'type'),
            'currency' => $code,
            'status' => $this->parse_transaction_status($status),
            'updated' => $this->safe_integer($transaction, 'uTime'),
            'tagFrom' => null,
            'tag' => $tag,
            'tagTo' => $tag,
            'comment' => null,
            'internal' => null,
            'fee' => $fee,
        );
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            'success' => 'ok',
            'Pending' => 'pending',
            'pending_review' => 'pending',
            'pending_review_fail' => 'failed',
            'reject' => 'failed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        /**
         * fetch the deposit address for a $currency associated with this account
         * @see https://www.bitget.com/api-doc/spot/account/Get-Deposit-Address
         * @param {string} $code unified $currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=address-structure address structure~
         */
        $this->load_markets();
        $networkCode = $this->safe_string_2($params, 'chain', 'network');
        $params = $this->omit($params, 'network');
        $networkId = $this->network_code_to_id($networkCode, $code);
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['code'],
        );
        if ($networkId !== null) {
            $request['chain'] = $networkId;
        }
        $response = $this->privateSpotGetV2SpotWalletDepositAddress (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700532244807,
        //         "data" => {
        //             "coin" => "BTC",
        //             "address" => "1BfZh7JESJGBUszCGeZnzxbVVvBycbJSbA",
        //             "chain" => "",
        //             "tag" => null,
        //             "url" => "https://blockchair.com/bitcoin/transaction/"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_deposit_address($data, $currency);
    }

    public function parse_deposit_address($depositAddress, ?array $currency = null) {
        //
        //     {
        //         "coin" => "BTC",
        //         "address" => "1BfZh7JESJGBUszCGeZnzxbVVvBycbJSbA",
        //         "chain" => "",
        //         "tag" => null,
        //         "url" => "https://blockchair.com/bitcoin/transaction/"
        //     }
        //
        $currencyId = $this->safe_string($depositAddress, 'coin');
        $networkId = $this->safe_string($depositAddress, 'chain');
        $parsedCurrency = $this->safe_currency_code($currencyId, $currency);
        return array(
            'currency' => $parsedCurrency,
            'address' => $this->safe_string($depositAddress, 'address'),
            'tag' => $this->safe_string($depositAddress, 'tag'),
            'network' => $this->network_id_to_code($networkId, $parsedCurrency),
            'info' => $depositAddress,
        );
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @see https://www.bitget.com/api-doc/spot/market/Get-Orderbook
         * @see https://www.bitget.com/api-doc/contract/market/Get-Merge-Depth
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = null;
        if ($market['spot']) {
            $response = $this->publicSpotGetV2SpotMarketOrderbook (array_merge($request, $params));
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->publicMixGetV2MixMarketMergeDepth (array_merge($request, $params));
        }
        //
        //     {
        //       "code" => "00000",
        //       "msg" => "success",
        //       "requestTime" => 1645854610294,
        //       "data" => {
        //         "asks" => array( array( "39102", "11.026" ) ),
        //         "bids" => array( array( '39100.5', "1.773" ) ),
        //         "ts" => "1645854610294"
        //       }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $timestamp = $this->safe_integer($data, 'ts');
        return $this->parse_order_book($data, $market['symbol'], $timestamp);
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // spot => fetchTicker, fetchTickers
        //
        //     {
        //         "open" => "37202.46",
        //         "symbol" => "BTCUSDT",
        //         "high24h" => "37744.75",
        //         "low24h" => "36666",
        //         "lastPr" => "37583.69",
        //         "quoteVolume" => "519127705.303",
        //         "baseVolume" => "13907.0386",
        //         "usdtVolume" => "519127705.302908",
        //         "ts" => "1700532903261",
        //         "bidPr" => "37583.68",
        //         "askPr" => "37583.69",
        //         "bidSz" => "0.0007",
        //         "askSz" => "0.0829",
        //         "openUtc" => "37449.4",
        //         "changeUtc24h" => "0.00359",
        //         "change24h" => "0.00321"
        //     }
        //
        // swap and future => fetchTicker
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "lastPr" => "37577.2",
        //         "askPr" => "37577.3",
        //         "bidPr" => "37577.2",
        //         "bidSz" => "3.679",
        //         "askSz" => "0.02",
        //         "high24h" => "37765",
        //         "low24h" => "36628.9",
        //         "ts" => "1700533070359",
        //         "change24h" => "0.00288",
        //         "baseVolume" => "108606.181",
        //         "quoteVolume" => "4051316303.9608",
        //         "usdtVolume" => "4051316303.9608",
        //         "openUtc" => "37451.5",
        //         "changeUtc24h" => "0.00336",
        //         "indexPrice" => "37574.489253",
        //         "fundingRate" => "0.0001",
        //         "holdingAmount" => "53464.529",
        //         "deliveryStartTime" => null,
        //         "deliveryTime" => null,
        //         "deliveryStatus" => "",
        //         "open24h" => "37235.7"
        //     }
        //
        // swap and future => fetchTickers
        //
        //     {
        //         "open" => "14.9776",
        //         "symbol" => "LINKUSDT",
        //         "high24h" => "15.3942",
        //         "low24h" => "14.3457",
        //         "lastPr" => "14.3748",
        //         "quoteVolume" => "7008612.4299",
        //         "baseVolume" => "469908.8523",
        //         "usdtVolume" => "7008612.42986561",
        //         "ts" => "1700533772309",
        //         "bidPr" => "14.375",
        //         "askPr" => "14.3769",
        //         "bidSz" => "50.004",
        //         "askSz" => "0.7647",
        //         "openUtc" => "14.478",
        //         "changeUtc24h" => "-0.00713",
        //         "change24h" => "-0.04978"
        //     }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $close = $this->safe_string($ticker, 'lastPr');
        $timestamp = $this->safe_integer($ticker, 'ts');
        $change = $this->safe_string($ticker, 'change24h');
        $open24 = $this->safe_string($ticker, 'open24');
        $open = $this->safe_string($ticker, 'open');
        if ($open === null) {
            $symbol = $this->safe_symbol($marketId, $market, null, 'contract');
            $openValue = $open24;
        } else {
            $symbol = $this->safe_symbol($marketId, $market, null, 'spot');
            $openValue = $open;
        }
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $this->safe_string($ticker, 'high24h'),
            'low' => $this->safe_string($ticker, 'low24h'),
            'bid' => $this->safe_string($ticker, 'bidPr'),
            'bidVolume' => $this->safe_string($ticker, 'bidSz'),
            'ask' => $this->safe_string($ticker, 'askPr'),
            'askVolume' => $this->safe_string($ticker, 'askSz'),
            'vwap' => null,
            'open' => $openValue,
            'close' => $close,
            'last' => $close,
            'previousClose' => null,
            'change' => $change,
            'percentage' => Precise::string_mul($change, '100'),
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'baseVolume'),
            'quoteVolume' => $this->safe_string($ticker, 'quoteVolume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @see https://www.bitget.com/api-doc/spot/market/Get-Tickers
         * @see https://www.bitget.com/api-doc/contract/market/Get-Ticker
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array(
            'symbol' => $market['id'],
        );
        $response = null;
        if ($market['spot']) {
            $response = $this->publicSpotGetV2SpotMarketTickers (array_merge($request, $params));
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->publicMixGetV2MixMarketTicker (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700532903782,
        //         "data" => array(
        //             {
        //                 "open" => "37202.46",
        //                 "symbol" => "BTCUSDT",
        //                 "high24h" => "37744.75",
        //                 "low24h" => "36666",
        //                 "lastPr" => "37583.69",
        //                 "quoteVolume" => "519127705.303",
        //                 "baseVolume" => "13907.0386",
        //                 "usdtVolume" => "519127705.302908",
        //                 "ts" => "1700532903261",
        //                 "bidPr" => "37583.68",
        //                 "askPr" => "37583.69",
        //                 "bidSz" => "0.0007",
        //                 "askSz" => "0.0829",
        //                 "openUtc" => "37449.4",
        //                 "changeUtc24h" => "0.00359",
        //                 "change24h" => "0.00321"
        //             }
        //         )
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700533070357,
        //         "data" => array(
        //             {
        //                 "symbol" => "BTCUSDT",
        //                 "lastPr" => "37577.2",
        //                 "askPr" => "37577.3",
        //                 "bidPr" => "37577.2",
        //                 "bidSz" => "3.679",
        //                 "askSz" => "0.02",
        //                 "high24h" => "37765",
        //                 "low24h" => "36628.9",
        //                 "ts" => "1700533070359",
        //                 "change24h" => "0.00288",
        //                 "baseVolume" => "108606.181",
        //                 "quoteVolume" => "4051316303.9608",
        //                 "usdtVolume" => "4051316303.9608",
        //                 "openUtc" => "37451.5",
        //                 "changeUtc24h" => "0.00336",
        //                 "indexPrice" => "37574.489253",
        //                 "fundingRate" => "0.0001",
        //                 "holdingAmount" => "53464.529",
        //                 "deliveryStartTime" => null,
        //                 "deliveryTime" => null,
        //                 "deliveryStatus" => "",
        //                 "open24h" => "37235.7"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ticker($data[0], $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
         * @see https://www.bitget.com/api-doc/spot/market/Get-Tickers
         * @see https://www.bitget.com/api-doc/contract/market/Get-All-Symbol-Ticker
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all $market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
         */
        $this->load_markets();
        $market = null;
        if ($symbols !== null) {
            $symbol = $this->safe_value($symbols, 0);
            $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
            if ($sandboxMode) {
                $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
                $market = $this->market($sandboxSymbol);
            } else {
                $market = $this->market($symbol);
            }
        }
        $request = array();
        $type = null;
        list($type, $params) = $this->handle_market_type_and_params('fetchTickers', $market, $params);
        $response = null;
        if ($type === 'spot') {
            $response = $this->publicSpotGetV2SpotMarketTickers (array_merge($request, $params));
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->publicMixGetV2MixMarketTickers (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700532903782,
        //         "data" => array(
        //             {
        //                 "open" => "37202.46",
        //                 "symbol" => "BTCUSDT",
        //                 "high24h" => "37744.75",
        //                 "low24h" => "36666",
        //                 "lastPr" => "37583.69",
        //                 "quoteVolume" => "519127705.303",
        //                 "baseVolume" => "13907.0386",
        //                 "usdtVolume" => "519127705.302908",
        //                 "ts" => "1700532903261",
        //                 "bidPr" => "37583.68",
        //                 "askPr" => "37583.69",
        //                 "bidSz" => "0.0007",
        //                 "askSz" => "0.0829",
        //                 "openUtc" => "37449.4",
        //                 "changeUtc24h" => "0.00359",
        //                 "change24h" => "0.00321"
        //             }
        //         )
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700533773477,
        //         "data" => array(
        //             array(
        //                 "open" => "14.9776",
        //                 "symbol" => "LINKUSDT",
        //                 "high24h" => "15.3942",
        //                 "low24h" => "14.3457",
        //                 "lastPr" => "14.3748",
        //                 "quoteVolume" => "7008612.4299",
        //                 "baseVolume" => "469908.8523",
        //                 "usdtVolume" => "7008612.42986561",
        //                 "ts" => "1700533772309",
        //                 "bidPr" => "14.375",
        //                 "askPr" => "14.3769",
        //                 "bidSz" => "50.004",
        //                 "askSz" => "0.7647",
        //                 "openUtc" => "14.478",
        //                 "changeUtc24h" => "-0.00713",
        //                 "change24h" => "-0.04978"
        //             ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_tickers($data, $symbols);
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // spot, swap and future => fetchTrades
        //
        //     {
        //         "tradeId" => "1075199767891652609",
        //         "price" => "29376.5",
        //         "size" => "6.035",
        //         "side" => "Buy",
        //         "ts" => "1692073521000",
        //         "symbol" => "BTCUSDT"
        //     }
        //
        // spot => fetchMyTrades
        //
        //     {
        //         "userId" => "7264631750",
        //         "symbol" => "BTCUSDT",
        //         "orderId" => "1098394344925597696",
        //         "tradeId" => "1098394344974925824",
        //         "orderType" => "market",
        //         "side" => "sell",
        //         "priceAvg" => "28467.68",
        //         "size" => "0.0002",
        //         "amount" => "5.693536",
        //         "feeDetail" => array(
        //             "deduction" => "no",
        //             "feeCoin" => "USDT",
        //             "totalDeductionFee" => "",
        //             "totalFee" => "-0.005693536"
        //         ),
        //         "tradeScope" => "taker",
        //         "cTime" => "1697603539699",
        //         "uTime" => "1697603539754"
        //     }
        //
        // spot margin => fetchMyTrades
        //
        //     {
        //         "orderId" => "1099353730455318528",
        //         "tradeId" => "1099353730627092481",
        //         "orderType" => "market",
        //         "side" => "sell",
        //         "priceAvg" => "29543.7",
        //         "size" => "0.0001",
        //         "amount" => "2.95437",
        //         "tradeScope" => "taker",
        //         "feeDetail" => array(
        //             "deduction" => "no",
        //             "feeCoin" => "USDT",
        //             "totalDeductionFee" => "0",
        //             "totalFee" => "-0.00295437"
        //         ),
        //         "cTime" => "1697832275063",
        //         "uTime" => "1697832275150"
        //     }
        //
        // swap and future => fetchMyTrades
        //
        //     {
        //         "tradeId" => "1111468664328269825",
        //         "symbol" => "BTCUSDT",
        //         "orderId" => "1111468664264753162",
        //         "price" => "37271.4",
        //         "baseVolume" => "0.001",
        //         "feeDetail" => array(
        //             {
        //                 "deduction" => "no",
        //                 "feeCoin" => "USDT",
        //                 "totalDeductionFee" => null,
        //                 "totalFee" => "-0.02236284"
        //             }
        //         ),
        //         "side" => "buy",
        //         "quoteVolume" => "37.2714",
        //         "profit" => "-0.0007",
        //         "enterPointSource" => "web",
        //         "tradeSide" => "close",
        //         "posMode" => "hedge_mode",
        //         "tradeScope" => "taker",
        //         "cTime" => "1700720700342"
        //     }
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_integer_2($trade, 'cTime', 'ts');
        $fee = null;
        $feeDetail = $this->safe_value($trade, 'feeDetail');
        $posMode = $this->safe_string($trade, 'posMode');
        $feeStructure = ($posMode !== null) ? $feeDetail[0] : $feeDetail;
        if ($feeStructure !== null) {
            $currencyCode = $this->safe_currency_code($this->safe_string($feeStructure, 'feeCoin'));
            $fee = array(
                'currency' => $currencyCode,
                'cost' => Precise::string_abs($this->safe_string($feeStructure, 'totalFee')),
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $this->safe_string($trade, 'tradeId'),
            'order' => $this->safe_string($trade, 'orderId'),
            'symbol' => $symbol,
            'side' => $this->safe_string_lower($trade, 'side'),
            'type' => $this->safe_string($trade, 'orderType'),
            'takerOrMaker' => $this->safe_string($trade, 'tradeScope'),
            'price' => $this->safe_string_2($trade, 'priceAvg', 'price'),
            'amount' => $this->safe_string_2($trade, 'baseVolume', 'size'),
            'cost' => $this->safe_string_2($trade, 'quoteVolume', 'amount'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent trades for a particular $symbol
         * @see https://www.bitget.com/api-doc/spot/market/Get-Recent-Trades
         * @see https://www.bitget.com/api-doc/spot/market/Get-Market-Trades
         * @see https://www.bitget.com/api-doc/contract/market/Get-Recent-Fills
         * @see https://www.bitget.com/api-doc/contract/market/Get-Fills-History
         * @param {string} $symbol unified $symbol of the $market to fetch trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] *only applies to publicSpotGetV2SpotMarketFillsHistory and publicMixGetV2MixMarketFillsHistory* the latest time in ms to fetch trades for
         * @param {boolean} [$params->paginate] *only applies to publicSpotGetV2SpotMarketFillsHistory and publicMixGetV2MixMarketFillsHistory* default false, when true will automatically $paginate by calling this endpoint multiple times
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-trades trade structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchTrades', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchTrades', $symbol, $since, $limit, $params, 'idLessThan', 'idLessThan');
        }
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            if ($market['contract']) {
                $request['limit'] = min ($limit, 1000);
            } else {
                $request['limit'] = $limit;
            }
        }
        $options = $this->safe_value($this->options, 'fetchTrades', array());
        $response = null;
        if ($market['spot']) {
            $spotOptions = $this->safe_value($options, 'spot', array());
            $defaultSpotMethod = $this->safe_string($spotOptions, 'method', 'publicSpotGetV2SpotMarketFillsHistory');
            $spotMethod = $this->safe_string($params, 'method', $defaultSpotMethod);
            $params = $this->omit($params, 'method');
            if ($spotMethod === 'publicSpotGetV2SpotMarketFillsHistory') {
                list($request, $params) = $this->handle_until_option('endTime', $request, $params);
                if ($since !== null) {
                    $request['startTime'] = $since;
                }
                $response = $this->publicSpotGetV2SpotMarketFillsHistory (array_merge($request, $params));
            } elseif ($spotMethod === 'publicSpotGetV2SpotMarketFills') {
                $response = $this->publicSpotGetV2SpotMarketFills (array_merge($request, $params));
            }
        } else {
            $swapOptions = $this->safe_value($options, 'swap', array());
            $defaultSwapMethod = $this->safe_string($swapOptions, 'method', 'publicMixGetV2MixMarketFillsHistory');
            $swapMethod = $this->safe_string($params, 'method', $defaultSwapMethod);
            $params = $this->omit($params, 'method');
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if ($swapMethod === 'publicMixGetV2MixMarketFillsHistory') {
                list($request, $params) = $this->handle_until_option('endTime', $request, $params);
                if ($since !== null) {
                    $request['startTime'] = $since;
                }
                $response = $this->publicMixGetV2MixMarketFillsHistory (array_merge($request, $params));
            } elseif ($swapMethod === 'publicMixGetV2MixMarketFills') {
                $response = $this->publicMixGetV2MixMarketFills (array_merge($request, $params));
            }
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1692073693562,
        //         "data" => array(
        //             array(
        //                 "symbol" => "BTCUSDT_SPBL",
        //                 "tradeId" => "1075200479040323585",
        //                 "side" => "Sell",
        //                 "price" => "29381.54",
        //                 "size" => "0.0056",
        //                 "ts" => "1692073691000"
        //             ),
        //         )
        //     }
        //
        // swap
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1692073522689,
        //         "data" => array(
        //             array(
        //                 "tradeId" => "1075199767891652609",
        //                 "price" => "29376.5",
        //                 "size" => "6.035",
        //                 "side" => "Buy",
        //                 "ts" => "1692073521000",
        //                 "symbol" => "BTCUSDT_UMCBL"
        //             ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function fetch_trading_fee(string $symbol, $params = array ()) {
        /**
         * fetch the trading fees for a $market
         * @see https://www.bitget.com/api-doc/common/public/Get-Trade-Rate
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'isolated' or 'cross', for finding the fee rate of spot margin trading pairs
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchTradingFee', $params);
        if ($market['spot']) {
            if ($marginMode !== null) {
                $request['businessType'] = 'margin';
            } else {
                $request['businessType'] = 'spot';
            }
        } else {
            $request['businessType'] = 'contract';
        }
        $response = $this->privateCommonGetV2CommonTradeRate (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700549524887,
        //         "data" => {
        //             "makerFeeRate" => "0.001",
        //             "takerFeeRate" => "0.001"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trading_fee($data, $market);
    }

    public function fetch_trading_fees($params = array ()) {
        /**
         * fetch the trading fees for multiple markets
         * @see https://www.bitget.com/api-doc/spot/market/Get-Symbols
         * @see https://www.bitget.com/api-doc/contract/market/Get-All-Symbols-Contracts
         * @see https://www.bitget.com/api-doc/margin/common/support-currencies
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @param {boolean} [$params->margin] set to true for spot $margin
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$fee-structure $fee structures~ indexed by $market symbols
         */
        $this->load_markets();
        $response = null;
        $marginMode = null;
        $marketType = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchTradingFees', $params);
        list($marketType, $params) = $this->handle_market_type_and_params('fetchTradingFees', null, $params);
        if ($marketType === 'spot') {
            $margin = $this->safe_value($params, 'margin', false);
            $params = $this->omit($params, 'margin');
            if (($marginMode !== null) || $margin) {
                $response = $this->publicMarginGetV2MarginCurrencies ($params);
            } else {
                $response = $this->publicSpotGetV2SpotPublicSymbols ($params);
            }
        } elseif (($marketType === 'swap') || ($marketType === 'future')) {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params(null, $params);
            $params['productType'] = $productType;
            $response = $this->publicMixGetV2MixMarketContracts ($params);
        } else {
            throw new NotSupported($this->id . ' does not support ' . $marketType . ' market');
        }
        //
        // spot and $margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700102364653,
        //         "data" => array(
        //             array(
        //                 "symbol" => "TRXUSDT",
        //                 "baseCoin" => "TRX",
        //                 "quoteCoin" => "USDT",
        //                 "minTradeAmount" => "0",
        //                 "maxTradeAmount" => "10000000000",
        //                 "takerFeeRate" => "0.002",
        //                 "makerFeeRate" => "0.002",
        //                 "pricePrecision" => "6",
        //                 "quantityPrecision" => "4",
        //                 "quotePrecision" => "6",
        //                 "status" => "online",
        //                 "minTradeUSDT" => "5",
        //                 "buyLimitPriceRatio" => "0.05",
        //                 "sellLimitPriceRatio" => "0.05"
        //             ),
        //         )
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700102364709,
        //         "data" => [
        //             array(
        //                 "symbol" => "BTCUSDT",
        //                 "baseCoin" => "BTC",
        //                 "quoteCoin" => "USDT",
        //                 "buyLimitPriceRatio" => "0.01",
        //                 "sellLimitPriceRatio" => "0.01",
        //                 "feeRateUpRatio" => "0.005",
        //                 "makerFeeRate" => "0.0002",
        //                 "takerFeeRate" => "0.0006",
        //                 "openCostUpRatio" => "0.01",
        //                 "supportMarginCoins" => ["USDT"],
        //                 "minTradeNum" => "0.001",
        //                 "priceEndStep" => "1",
        //                 "volumePlace" => "3",
        //                 "pricePlace" => "1",
        //                 "sizeMultiplier" => "0.001",
        //                 "symbolType" => "perpetual",
        //                 "minTradeUSDT" => "5",
        //                 "maxSymbolOrderNum" => "200",
        //                 "maxProductOrderNum" => "400",
        //                 "maxPositionNum" => "150",
        //                 "symbolStatus" => "normal",
        //                 "offTime" => "-1",
        //                 "limitOpenTime" => "-1",
        //                 "deliveryTime" => "",
        //                 "deliveryStartTime" => "",
        //                 "deliveryPeriod" => "",
        //                 "launchTime" => "",
        //                 "fundInterval" => "8",
        //                 "minLever" => "1",
        //                 "maxLever" => "125",
        //                 "posLimit" => "0.05",
        //                 "maintainTime" => ""
        //             ),
        //         ]
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $marketId = $this->safe_string($entry, 'symbol');
            $symbol = $this->safe_symbol($marketId, null, null, $marketType);
            $market = $this->market($symbol);
            $fee = $this->parse_trading_fee($entry, $market);
            $result[$symbol] = $fee;
        }
        return $result;
    }

    public function parse_trading_fee($data, ?array $market = null) {
        $marketId = $this->safe_string($data, 'symbol');
        return array(
            'info' => $data,
            'symbol' => $this->safe_symbol($marketId, $market),
            'maker' => $this->safe_number($data, 'makerFeeRate'),
            'taker' => $this->safe_number($data, 'takerFeeRate'),
        );
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     array(
        //         "1645911960000",
        //         "39406",
        //         "39407",
        //         "39374.5",
        //         "39379",
        //         "35.526",
        //         "1399132.341"
        //     )
        //
        return array(
            $this->safe_integer($ohlcv, 0),
            $this->safe_number($ohlcv, 1),
            $this->safe_number($ohlcv, 2),
            $this->safe_number($ohlcv, 3),
            $this->safe_number($ohlcv, 4),
            $this->safe_number($ohlcv, 5),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
         * @see https://www.bitget.com/api-doc/spot/market/Get-Candle-Data
         * @see https://www.bitget.com/api-doc/spot/market/Get-History-Candle-Data
         * @see https://www.bitget.com/api-doc/contract/market/Get-Candle-Data
         * @see https://www.bitget.com/api-doc/contract/market/Get-History-Candle-Data
         * @see https://www.bitget.com/api-doc/contract/market/Get-History-Index-Candle-Data
         * @see https://www.bitget.com/api-doc/contract/market/Get-History-Mark-Candle-Data
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp in ms of the latest candle to fetch
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOHLCV', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_deterministic('fetchOHLCV', $symbol, $since, $limit, $timeframe, $params, 1000);
        }
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $marketType = $market['spot'] ? 'spot' : 'swap';
        $timeframes = $this->options['timeframes'][$marketType];
        $selectedTimeframe = $this->safe_string($timeframes, $timeframe, $timeframe);
        $request = array(
            'symbol' => $market['id'],
            'granularity' => $selectedTimeframe,
        );
        $until = $this->safe_integer_2($params, 'until', 'till');
        $params = $this->omit($params, array( 'until', 'till' ));
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $options = $this->safe_value($this->options, 'fetchOHLCV', array());
        $spotOptions = $this->safe_value($options, 'spot', array());
        $defaultSpotMethod = $this->safe_string($spotOptions, 'method', 'publicSpotGetV2SpotMarketCandles');
        $method = $this->safe_string($params, 'method', $defaultSpotMethod);
        $params = $this->omit($params, 'method');
        if ($method !== 'publicSpotGetV2SpotMarketHistoryCandles') {
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($until !== null) {
                $request['endTime'] = $until;
            }
        }
        $response = null;
        if ($market['spot']) {
            if ($method === 'publicSpotGetV2SpotMarketCandles') {
                $response = $this->publicSpotGetV2SpotMarketCandles (array_merge($request, $params));
            } elseif ($method === 'publicSpotGetV2SpotMarketHistoryCandles') {
                if ($since !== null) {
                    if ($limit === null) {
                        $limit = 100; // exchange default
                    }
                    $duration = $this->parse_timeframe($timeframe) * 1000;
                    $request['endTime'] = $this->sum($since, $duration * $limit);
                } elseif ($until !== null) {
                    $request['endTime'] = $until;
                } else {
                    $request['endTime'] = $this->milliseconds();
                }
                $response = $this->publicSpotGetV2SpotMarketHistoryCandles (array_merge($request, $params));
            }
        } else {
            $swapOptions = $this->safe_value($options, 'swap', array());
            $defaultSwapMethod = $this->safe_string($swapOptions, 'method', 'publicMixGetV2MixMarketCandles');
            $swapMethod = $this->safe_string($params, 'method', $defaultSwapMethod);
            $priceType = $this->safe_string($params, 'price');
            $params = $this->omit($params, array( 'method', 'price' ));
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if (($priceType === 'mark') || ($swapMethod === 'publicMixGetV2MixMarketHistoryMarkCandles')) {
                $response = $this->publicMixGetV2MixMarketHistoryMarkCandles (array_merge($request, $params));
            } elseif (($priceType === 'index') || ($swapMethod === 'publicMixGetV2MixMarketHistoryIndexCandles')) {
                $response = $this->publicMixGetV2MixMarketHistoryIndexCandles (array_merge($request, $params));
            } elseif ($swapMethod === 'publicMixGetV2MixMarketCandles') {
                $response = $this->publicMixGetV2MixMarketCandles (array_merge($request, $params));
            } elseif ($swapMethod === 'publicMixGetV2MixMarketHistoryCandles') {
                $response = $this->publicMixGetV2MixMarketHistoryCandles (array_merge($request, $params));
            }
        }
        if ($response === '') {
            return array(); // happens when a new token is listed
        }
        //  [ ["1645911960000","39406","39407","39374.5","39379","35.526","1399132.341"] ]
        $data = $this->safe_value($response, 'data', $response);
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://www.bitget.com/api-doc/spot/account/Get-Account-Assets
         * @see https://www.bitget.com/api-doc/contract/account/Get-Account-List
         * @see https://www.bitget.com/api-doc/margin/cross/account/Get-Cross-Assets
         * @see https://www.bitget.com/api-doc/margin/isolated/account/Get-Isolated-Assets
         * @see https://bitgetlimited.github.io/apidoc/en/margin/#get-cross-assets
         * @see https://bitgetlimited.github.io/apidoc/en/margin/#get-isolated-assets
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $request = array();
        $marketType = null;
        $marginMode = null;
        $response = null;
        list($marketType, $params) = $this->handle_market_type_and_params('fetchBalance', null, $params);
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchBalance', $params);
        if (($marketType === 'swap') || ($marketType === 'future')) {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params(null, $params);
            $request['productType'] = $productType;
            $response = $this->privateMixGetV2MixAccountAccounts (array_merge($request, $params));
        } elseif ($marginMode === 'isolated') {
            $response = $this->privateMarginGetMarginV1IsolatedAccountAssets (array_merge($request, $params));
        } elseif ($marginMode === 'cross') {
            $response = $this->privateMarginGetMarginV1CrossAccountAssets (array_merge($request, $params));
        } elseif ($marketType === 'spot') {
            $response = $this->privateSpotGetV2SpotAccountAssets (array_merge($request, $params));
        } else {
            throw new NotSupported($this->id . ' fetchBalance() does not support ' . $marketType . ' accounts');
        }
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700623852854,
        //         "data" => array(
        //             {
        //                 "coin" => "USDT",
        //                 "available" => "0.00000000",
        //                 "limitAvailable" => "0",
        //                 "frozen" => "0.00000000",
        //                 "locked" => "0.00000000",
        //                 "uTime" => "1699937566000"
        //             }
        //         )
        //     }
        //
        // swap
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700625127294,
        //         "data" => array(
        //             {
        //                 "marginCoin" => "USDT",
        //                 "locked" => "0",
        //                 "available" => "0",
        //                 "crossedMaxAvailable" => "0",
        //                 "isolatedMaxAvailable" => "0",
        //                 "maxTransferOut" => "0",
        //                 "accountEquity" => "0",
        //                 "usdtEquity" => "0.000000005166",
        //                 "btcEquity" => "0",
        //                 "crossedRiskRate" => "0",
        //                 "unrealizedPL" => "0",
        //                 "coupon" => "0",
        //                 "crossedUnrealizedPL" => null,
        //                 "isolatedUnrealizedPL" => null
        //             }
        //         )
        //     }
        //
        // isolated margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1697501436571,
        //         "data" => array(
        //             array(
        //                 "symbol" => "BTCUSDT",
        //                 "coin" => "BTC",
        //                 "totalAmount" => "0.00021654",
        //                 "available" => "0.00021654",
        //                 "transferable" => "0.00021654",
        //                 "frozen" => "0",
        //                 "borrow" => "0",
        //                 "interest" => "0",
        //                 "net" => "0.00021654",
        //                 "ctime" => "1697248128071"
        //             ),
        //         )
        //     }
        //
        // cross margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1697515463804,
        //         "data" => array(
        //             array(
        //                 "coin" => "BTC",
        //                 "totalAmount" => "0.00024996",
        //                 "available" => "0.00024996",
        //                 "transferable" => "0.00004994",
        //                 "frozen" => "0",
        //                 "borrow" => "0.0001",
        //                 "interest" => "0.00000001",
        //                 "net" => "0.00014995",
        //                 "ctime" => "1697251265504"
        //             ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_balance($data);
    }

    public function parse_balance($balance): array {
        $result = array( 'info' => $balance );
        //
        // spot
        //
        //     {
        //         "coin" => "USDT",
        //         "available" => "0.00000000",
        //         "limitAvailable" => "0",
        //         "frozen" => "0.00000000",
        //         "locked" => "0.00000000",
        //         "uTime" => "1699937566000"
        //     }
        //
        // swap
        //
        //     {
        //         "marginCoin" => "USDT",
        //         "locked" => "0",
        //         "available" => "0",
        //         "crossedMaxAvailable" => "0",
        //         "isolatedMaxAvailable" => "0",
        //         "maxTransferOut" => "0",
        //         "accountEquity" => "0",
        //         "usdtEquity" => "0.000000005166",
        //         "btcEquity" => "0",
        //         "crossedRiskRate" => "0",
        //         "unrealizedPL" => "0",
        //         "coupon" => "0",
        //         "crossedUnrealizedPL" => null,
        //         "isolatedUnrealizedPL" => null
        //     }
        //
        // isolated margin
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "coin" => "BTC",
        //         "totalAmount" => "0.00021654",
        //         "available" => "0.00021654",
        //         "transferable" => "0.00021654",
        //         "frozen" => "0",
        //         "borrow" => "0",
        //         "interest" => "0",
        //         "net" => "0.00021654",
        //         "ctime" => "1697248128071"
        //     }
        //
        // cross margin
        //
        //     {
        //         "coin" => "BTC",
        //         "totalAmount" => "0.00024995",
        //         "available" => "0.00024995",
        //         "transferable" => "0.00004993",
        //         "frozen" => "0",
        //         "borrow" => "0.0001",
        //         "interest" => "0.00000001",
        //         "net" => "0.00014994",
        //         "ctime" => "1697251265504"
        //     }
        //
        for ($i = 0; $i < count($balance); $i++) {
            $entry = $balance[$i];
            $account = $this->account();
            $currencyId = $this->safe_string_2($entry, 'marginCoin', 'coin');
            $code = $this->safe_currency_code($currencyId);
            $borrow = $this->safe_string($entry, 'borrow');
            if ($borrow !== null) {
                $interest = $this->safe_string($entry, 'interest');
                $account['free'] = $this->safe_string($entry, 'transferable');
                $account['total'] = $this->safe_string($entry, 'totalAmount');
                $account['debt'] = Precise::string_add($borrow, $interest);
            } else {
                // Use transferable instead of available for swap and margin https://github.com/ccxt/ccxt/pull/19127
                $spotAccountFree = $this->safe_string($entry, 'available');
                $contractAccountFree = $this->safe_string($entry, 'maxTransferOut');
                if ($contractAccountFree !== null) {
                    $account['free'] = $contractAccountFree;
                    $account['total'] = $this->safe_string($entry, 'accountEquity');
                } else {
                    $account['free'] = $spotAccountFree;
                    $frozen = $this->safe_string($entry, 'frozen');
                    $locked = $this->safe_string($entry, 'locked');
                    $account['used'] = Precise::string_add($frozen, $locked);
                }
            }
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function parse_order_status($status) {
        $statuses = array(
            'new' => 'open',
            'init' => 'open',
            'not_trigger' => 'open',
            'partial_fill' => 'open',
            'partially_fill' => 'open',
            'triggered' => 'closed',
            'full_fill' => 'closed',
            'filled' => 'closed',
            'fail_trigger' => 'rejected',
            'cancel' => 'canceled',
            'cancelled' => 'canceled',
            'canceled' => 'canceled',
            'live' => 'open',
            'fail_execute' => 'rejected',
            'executed' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // createOrder, editOrder, closePosition
        //
        //     {
        //         "clientOid" => "abe95dbe-6081-4a6f-a2d3-ae49601cd479",
        //         "orderId" => null
        //     }
        //
        // createOrders
        //
        //     array(
        //         array(
        //             "orderId" => "1111397214281175046",
        //             "clientOid" => "766d3fc3-7321-4406-a689-15c9987a2e75"
        //         ),
        //         array(
        //             "orderId" => "",
        //             "clientOid" => "d1b75cb3-cc15-4ede-ad4c-3937396f75ab",
        //             "errorMsg" => "less than the minimum amount 5 USDT",
        //             "errorCode" => "45110"
        //         ),
        //     )
        //
        // spot, swap, future and spot margin => cancelOrder, cancelOrders
        //
        //     {
        //         "orderId" => "1098758604547850241",
        //         "clientOid" => "1098758604585598977"
        //     }
        //
        // spot trigger => cancelOrder
        //
        //     {
        //         "result" => "success"
        //     }
        //
        // spot => fetchOrder
        //
        //     {
        //         "userId" => "7264631750",
        //         "symbol" => "BTCUSDT",
        //         "orderId" => "1111461743123927040",
        //         "clientOid" => "63f95110-93b5-4309-8f77-46339f1bcf3c",
        //         "price" => "25000.0000000000000000",
        //         "size" => "0.0002000000000000",
        //         "orderType" => "limit",
        //         "side" => "buy",
        //         "status" => "live",
        //         "priceAvg" => "0",
        //         "baseVolume" => "0.0000000000000000",
        //         "quoteVolume" => "0.0000000000000000",
        //         "enterPointSource" => "API",
        //         "feeDetail" => "",
        //         "orderSource" => "normal",
        //         "cTime" => "1700719050198",
        //         "uTime" => "1700719050198"
        //     }
        //
        // swap and future => fetchOrder
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "size" => "0.001",
        //         "orderId" => "1111465253393825792",
        //         "clientOid" => "1111465253431574529",
        //         "baseVolume" => "0",
        //         "fee" => "0",
        //         "price" => "27000",
        //         "priceAvg" => "",
        //         "state" => "live",
        //         "side" => "buy",
        //         "force" => "gtc",
        //         "totalProfits" => "0",
        //         "posSide" => "long",
        //         "marginCoin" => "USDT",
        //         "presetStopSurplusPrice" => "",
        //         "presetStopLossPrice" => "",
        //         "quoteVolume" => "0",
        //         "orderType" => "limit",
        //         "leverage" => "20",
        //         "marginMode" => "crossed",
        //         "reduceOnly" => "NO",
        //         "enterPointSource" => "API",
        //         "tradeSide" => "open",
        //         "posMode" => "hedge_mode",
        //         "orderSource" => "normal",
        //         "cTime" => "1700719887120",
        //         "uTime" => "1700719887120"
        //     }
        //
        // spot => fetchOpenOrders
        //
        //     {
        //         "userId" => "7264631750",
        //         "symbol" => "BTCUSDT",
        //         "orderId" => "1111499608327360513",
        //         "clientOid" => "d0d4dad5-18d0-4869-a074-ec40bb47cba6",
        //         "priceAvg" => "25000.0000000000000000",
        //         "size" => "0.0002000000000000",
        //         "orderType" => "limit",
        //         "side" => "buy",
        //         "status" => "live",
        //         "basePrice" => "0",
        //         "baseVolume" => "0.0000000000000000",
        //         "quoteVolume" => "0.0000000000000000",
        //         "enterPointSource" => "WEB",
        //         "orderSource" => "normal",
        //         "cTime" => "1700728077966",
        //         "uTime" => "1700728077966"
        //     }
        //
        // spot stop => fetchOpenOrders, fetchCanceledAndClosedOrders
        //
        //     {
        //         "orderId" => "1111503385931620352",
        //         "clientOid" => "1111503385910648832",
        //         "symbol" => "BTCUSDT",
        //         "size" => "0.0002",
        //         "planType" => "AMOUNT",
        //         "executePrice" => "25000",
        //         "triggerPrice" => "26000",
        //         "status" => "live",
        //         "orderType" => "limit",
        //         "side" => "buy",
        //         "triggerType" => "fill_price",
        //         "enterPointSource" => "API",
        //         "cTime" => "1700728978617",
        //         "uTime" => "1700728978617"
        //     }
        //
        // spot margin => fetchOpenOrders, fetchCanceledAndClosedOrders
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "orderType" => "limit",
        //         "enterPointSource" => "WEB",
        //         "orderId" => "1111506377509580801",
        //         "clientOid" => "2043a3b59a60445f9d9f7365bf3e960c",
        //         "loanType" => "autoLoanAndRepay",
        //         "price" => "25000",
        //         "side" => "buy",
        //         "status" => "live",
        //         "baseSize" => "0.0002",
        //         "quoteSize" => "5",
        //         "priceAvg" => "0",
        //         "size" => "0",
        //         "amount" => "0",
        //         "force" => "gtc",
        //         "cTime" => "1700729691866",
        //         "uTime" => "1700729691866"
        //     }
        //
        // swap => fetchOpenOrders, fetchCanceledAndClosedOrders
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "size" => "0.002",
        //         "orderId" => "1111488897767604224",
        //         "clientOid" => "1111488897805352960",
        //         "baseVolume" => "0",
        //         "fee" => "0",
        //         "price" => "25000",
        //         "priceAvg" => "",
        //         "status" => "live",
        //         "side" => "buy",
        //         "force" => "gtc",
        //         "totalProfits" => "0",
        //         "posSide" => "long",
        //         "marginCoin" => "USDT",
        //         "quoteVolume" => "0",
        //         "leverage" => "20",
        //         "marginMode" => "crossed",
        //         "enterPointSource" => "web",
        //         "tradeSide" => "open",
        //         "posMode" => "hedge_mode",
        //         "orderType" => "limit",
        //         "orderSource" => "normal",
        //         "presetStopSurplusPrice" => "",
        //         "presetStopLossPrice" => "",
        //         "reduceOnly" => "NO",
        //         "cTime" => "1700725524378",
        //         "uTime" => "1700725524378"
        //     }
        //
        // swap stop => fetchOpenOrders
        //
        //     {
        //         "planType" => "normal_plan",
        //         "symbol" => "BTCUSDT",
        //         "size" => "0.001",
        //         "orderId" => "1111491399869075457",
        //         "clientOid" => "1111491399869075456",
        //         "price" => "27000",
        //         "callbackRatio" => "",
        //         "triggerPrice" => "24000",
        //         "triggerType" => "mark_price",
        //         "planStatus" => "live",
        //         "side" => "buy",
        //         "posSide" => "long",
        //         "marginCoin" => "USDT",
        //         "marginMode" => "crossed",
        //         "enterPointSource" => "API",
        //         "tradeSide" => "open",
        //         "posMode" => "hedge_mode",
        //         "orderType" => "limit",
        //         "stopSurplusTriggerPrice" => "",
        //         "stopSurplusExecutePrice" => "",
        //         "stopSurplusTriggerType" => "fill_price",
        //         "stopLossTriggerPrice" => "",
        //         "stopLossExecutePrice" => "",
        //         "stopLossTriggerType" => "fill_price",
        //         "cTime" => "1700726120917",
        //         "uTime" => "1700726120917"
        //     }
        //
        // spot => fetchCanceledAndClosedOrders
        //
        //     {
        //         "userId" => "7264631750",
        //         "symbol" => "BTCUSDT",
        //         "orderId" => "1111499608327360513",
        //         "clientOid" => "d0d4dad5-18d0-4869-a074-ec40bb47cba6",
        //         "price" => "25000.0000000000000000",
        //         "size" => "0.0002000000000000",
        //         "orderType" => "limit",
        //         "side" => "buy",
        //         "status" => "cancelled",
        //         "priceAvg" => "0",
        //         "baseVolume" => "0.0000000000000000",
        //         "quoteVolume" => "0.0000000000000000",
        //         "enterPointSource" => "WEB",
        //         "feeDetail" => "",
        //         "orderSource" => "normal",
        //         "cTime" => "1700728077966",
        //         "uTime" => "1700728911471"
        //     }
        //
        // swap stop => fetchCanceledAndClosedOrders
        //
        //     {
        //         "planType" => "normal_plan",
        //         "symbol" => "BTCUSDT",
        //         "size" => "0.001",
        //         "orderId" => "1111491399869075457",
        //         "clientOid" => "1111491399869075456",
        //         "planStatus" => "cancelled",
        //         "price" => "27000",
        //         "feeDetail" => null,
        //         "baseVolume" => "0",
        //         "callbackRatio" => "",
        //         "triggerPrice" => "24000",
        //         "triggerType" => "mark_price",
        //         "side" => "buy",
        //         "posSide" => "long",
        //         "marginCoin" => "USDT",
        //         "marginMode" => "crossed",
        //         "enterPointSource" => "API",
        //         "tradeSide" => "open",
        //         "posMode" => "hedge_mode",
        //         "orderType" => "limit",
        //         "stopSurplusTriggerPrice" => "",
        //         "stopSurplusExecutePrice" => "",
        //         "stopSurplusTriggerType" => "fill_price",
        //         "stopLossTriggerPrice" => "",
        //         "stopLossExecutePrice" => "",
        //         "stopLossTriggerType" => "fill_price",
        //         "cTime" => "1700726120917",
        //         "uTime" => "1700727879652"
        //     }
        //
        $errorMessage = $this->safe_string($order, 'errorMsg');
        if ($errorMessage !== null) {
            return $this->safe_order(array(
                'info' => $order,
                'id' => $this->safe_string($order, 'orderId'),
                'clientOrderId' => $this->safe_string_2($order, 'clientOrderId', 'clientOid'),
                'status' => 'rejected',
            ), $market);
        }
        $isContractOrder = (is_array($order) && array_key_exists('posSide', $order));
        $marketType = $isContractOrder ? 'contract' : 'spot';
        if ($market !== null) {
            $marketType = $market['type'];
        }
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market, null, $marketType);
        $timestamp = $this->safe_integer_2($order, 'cTime', 'ctime');
        $updateTimestamp = $this->safe_integer($order, 'uTime');
        $rawStatus = $this->safe_string_2($order, 'status', 'state');
        $fee = null;
        $feeCostString = $this->safe_string($order, 'fee');
        if ($feeCostString !== null) {
            // swap
            $fee = array(
                'cost' => $this->parse_number(Precise::string_abs($feeCostString)),
                'currency' => $market['settle'],
            );
        }
        $feeDetail = $this->safe_value($order, 'feeDetail');
        if ($feeDetail !== null) {
            $parsedFeeDetail = json_decode($feeDetail, $as_associative_array = true);
            $feeValues = is_array($parsedFeeDetail) ? array_values($parsedFeeDetail) : array();
            $feeObject = null;
            for ($i = 0; $i < count($feeValues); $i++) {
                $feeValue = $feeValues[$i];
                if ($this->safe_value($feeValue, 'feeCoinCode') !== null) {
                    $feeObject = $feeValue;
                    break;
                }
            }
            $fee = array(
                'cost' => $this->parse_number(Precise::string_abs($this->safe_string($feeObject, 'totalFee'))),
                'currency' => $this->safe_currency_code($this->safe_string($feeObject, 'feeCoinCode')),
            );
        }
        $postOnly = null;
        $timeInForce = $this->safe_string_upper($order, 'force');
        if ($timeInForce === 'POST_ONLY') {
            $postOnly = true;
            $timeInForce = 'PO';
        }
        $reduceOnly = null;
        $reduceOnlyRaw = $this->safe_string($order, 'reduceOnly');
        if ($reduceOnlyRaw !== null) {
            $reduceOnly = ($reduceOnlyRaw === 'NO') ? false : true;
        }
        $price = null;
        $average = null;
        $basePrice = $this->safe_string($order, 'basePrice');
        if ($basePrice !== null) {
            // for spot fetchOpenOrders, the $price is priceAvg and the $filled $price is $basePrice
            $price = $this->safe_string($order, 'priceAvg');
            $average = $this->safe_string($order, 'basePrice');
        } else {
            $price = $this->safe_string_2($order, 'price', 'executePrice');
            $average = $this->safe_string($order, 'priceAvg');
        }
        $size = null;
        $filled = null;
        $baseSize = $this->safe_string($order, 'baseSize');
        if ($baseSize !== null) {
            // for spot margin fetchOpenOrders, the $order $size is $baseSize and the $filled amount is $size
            $size = $baseSize;
            $filled = $this->safe_string($order, 'size');
        } else {
            $size = $this->safe_string($order, 'size');
            $filled = $this->safe_string($order, 'baseVolume');
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $this->safe_string_2($order, 'orderId', 'data'),
            'clientOrderId' => $this->safe_string_2($order, 'clientOrderId', 'clientOid'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $updateTimestamp,
            'lastUpdateTimestamp' => $updateTimestamp,
            'symbol' => $market['symbol'],
            'type' => $this->safe_string($order, 'orderType'),
            'side' => $this->safe_string($order, 'side'),
            'price' => $price,
            'amount' => $size,
            'cost' => $this->safe_string_2($order, 'quoteVolume', 'quoteSize'),
            'average' => $average,
            'filled' => $filled,
            'remaining' => null,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'reduceOnly' => $reduceOnly,
            'stopPrice' => $this->safe_number($order, 'triggerPrice'),
            'triggerPrice' => $this->safe_number($order, 'triggerPrice'),
            'takeProfitPrice' => $this->safe_number_2($order, 'presetStopSurplusPrice', 'stopSurplusTriggerPrice'),
            'stopLossPrice' => $this->safe_number_2($order, 'presetStopLossPrice', 'stopLossTriggerPrice'),
            'status' => $this->parse_order_status($rawStatus),
            'fee' => $fee,
            'trades' => null,
        ), $market);
    }

    public function create_market_buy_order_with_cost(string $symbol, $cost, $params = array ()) {
        /**
         * create a $market buy order by providing the $symbol and $cost
         * @see https://www.bitget.com/api-doc/spot/trade/Place-Order
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Cross-Place-Order
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Isolated-Place-Order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {float} $cost how much you want to trade in units of the quote currency
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['spot']) {
            throw new NotSupported($this->id . ' createMarketBuyOrderWithCost() supports spot orders only');
        }
        $params['createMarketBuyOrderRequiresPrice'] = false;
        return $this->create_order($symbol, 'market', 'buy', $cost, null, $params);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade order
         * @see https://www.bitget.com/api-doc/spot/trade/Place-Order
         * @see https://www.bitget.com/api-doc/spot/plan/Place-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Place-Order
         * @see https://www.bitget.com/api-doc/contract/plan/Place-Tpsl-Order
         * @see https://www.bitget.com/api-doc/contract/plan/Place-Plan-Order
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Cross-Place-Order
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Isolated-Place-Order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell' or 'open_long' or 'open_short' or 'close_long' or 'close_short'
         * @param {float} $amount how much you want to trade in units of the base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {float} [$params->cost] *spot only* how much you want to trade in units of the quote currency, for $market buy orders only
         * @param {float} [$params->triggerPrice] *swap only* The $price at which a trigger order is triggered at
         * @param {float} [$params->stopLossPrice] *swap only* The $price at which a stop loss order is triggered at
         * @param {float} [$params->takeProfitPrice] *swap only* The $price at which a take profit order is triggered at
         * @param {array} [$params->takeProfit] *takeProfit object in $params* containing the $triggerPrice at which the attached take profit order will be triggered (perpetual swap markets only)
         * @param {float} [$params->takeProfit.triggerPrice] *swap only* take profit trigger $price
         * @param {array} [$params->stopLoss] *stopLoss object in $params* containing the $triggerPrice at which the attached stop loss order will be triggered (perpetual swap markets only)
         * @param {float} [$params->stopLoss.triggerPrice] *swap only* stop loss trigger $price
         * @param {string} [$params->timeInForce] "GTC", "IOC", "FOK", or "PO"
         * @param {string} [$params->marginMode] 'isolated' or 'cross' for spot margin trading
         * @param {string} [$params->loanType] *spot margin only* 'normal', 'autoLoan', 'autoRepay', or 'autoLoanAndRepay' default is 'normal'
         * @param {string} [$params->holdSide] *contract stopLossPrice, takeProfitPrice only* Two-way position => ('long' or 'short'), one-way position => ('buy' or 'sell')
         * @param {float} [$params->stopLoss.price] *swap only* the execution $price for a stop loss attached to a trigger order
         * @param {float} [$params->takeProfit.price] *swap only* the execution $price for a take profit attached to a trigger order
         * @param {string} [$params->stopLoss.type] *swap only* the $type for a stop loss attached to a trigger order, 'fill_price', 'index_price' or 'mark_price', default is 'mark_price'
         * @param {string} [$params->takeProfit.type] *swap only* the $type for a take profit attached to a trigger order, 'fill_price', 'index_price' or 'mark_price', default is 'mark_price'
         * @param {string} [$params->trailingPercent] *swap and future only* the percent to trail away from the current $market $price, rate can not be greater than 10
         * @param {string} [$params->trailingTriggerPrice] *swap and future only* the $price to trigger a trailing stop order, default uses the $price argument
         * @param {string} [$params->triggerType] *swap and future only* 'fill_price', 'mark_price' or 'index_price'
         * @param {boolean} [$params->oneWayMode] *swap and future only* required to set this to true in one_way_mode and you can leave this in hedge_mode, can adjust the mode using the setPositionMode() method
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $marginParams = $this->handle_margin_mode_and_params('createOrder', $params);
        $marginMode = $marginParams[0];
        $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
        $stopLossTriggerPrice = $this->safe_value($params, 'stopLossPrice');
        $takeProfitTriggerPrice = $this->safe_value($params, 'takeProfitPrice');
        $trailingPercent = $this->safe_string_2($params, 'trailingPercent', 'callbackRatio');
        $isTrailingPercentOrder = $trailingPercent !== null;
        $isTriggerOrder = $triggerPrice !== null;
        $isStopLossTriggerOrder = $stopLossTriggerPrice !== null;
        $isTakeProfitTriggerOrder = $takeProfitTriggerPrice !== null;
        $isStopLossOrTakeProfitTrigger = $isStopLossTriggerOrder || $isTakeProfitTriggerOrder;
        $request = $this->create_order_request($symbol, $type, $side, $amount, $price, $params);
        $response = null;
        if ($market['spot']) {
            if ($isTriggerOrder) {
                $response = $this->privateSpotPostV2SpotTradePlacePlanOrder ($request);
            } elseif ($marginMode === 'isolated') {
                $response = $this->privateMarginPostV2MarginIsolatedPlaceOrder ($request);
            } elseif ($marginMode === 'cross') {
                $response = $this->privateMarginPostV2MarginCrossedPlaceOrder ($request);
            } else {
                $response = $this->privateSpotPostV2SpotTradePlaceOrder ($request);
            }
        } else {
            if ($isTriggerOrder || $isTrailingPercentOrder) {
                $response = $this->privateMixPostV2MixOrderPlacePlanOrder ($request);
            } elseif ($isStopLossOrTakeProfitTrigger) {
                $response = $this->privateMixPostV2MixOrderPlaceTpslOrder ($request);
            } else {
                $response = $this->privateMixPostV2MixOrderPlaceOrder ($request);
            }
        }
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1645932209602,
        //         "data" => {
        //             "orderId" => "881669078313766912",
        //             "clientOid" => "iauIBf#a45b595f96474d888d0ada"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data, $market);
    }

    public function create_order_request($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $marketType = null;
        $marginMode = null;
        list($marketType, $params) = $this->handle_market_type_and_params('createOrder', $market, $params);
        list($marginMode, $params) = $this->handle_margin_mode_and_params('createOrder', $params);
        $request = array(
            'symbol' => $market['id'],
            'orderType' => $type,
        );
        $isMarketOrder = $type === 'market';
        $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
        $stopLossTriggerPrice = $this->safe_value($params, 'stopLossPrice');
        $takeProfitTriggerPrice = $this->safe_value($params, 'takeProfitPrice');
        $stopLoss = $this->safe_value($params, 'stopLoss');
        $takeProfit = $this->safe_value($params, 'takeProfit');
        $isTriggerOrder = $triggerPrice !== null;
        $isStopLossTriggerOrder = $stopLossTriggerPrice !== null;
        $isTakeProfitTriggerOrder = $takeProfitTriggerPrice !== null;
        $isStopLoss = $stopLoss !== null;
        $isTakeProfit = $takeProfit !== null;
        $isStopLossOrTakeProfitTrigger = $isStopLossTriggerOrder || $isTakeProfitTriggerOrder;
        $isStopLossOrTakeProfit = $isStopLoss || $isTakeProfit;
        $trailingTriggerPrice = $this->safe_string($params, 'trailingTriggerPrice', $price);
        $trailingPercent = $this->safe_string_2($params, 'trailingPercent', 'callbackRatio');
        $isTrailingPercentOrder = $trailingPercent !== null;
        if ($this->sum($isTriggerOrder, $isStopLossTriggerOrder, $isTakeProfitTriggerOrder, $isTrailingPercentOrder) > 1) {
            throw new ExchangeError($this->id . ' createOrder() $params can only contain one of $triggerPrice, stopLossPrice, takeProfitPrice, trailingPercent');
        }
        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $triggerType = $this->safe_string($params, 'triggerType', 'mark_price');
        $reduceOnly = $this->safe_value($params, 'reduceOnly', false);
        $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
        $exchangeSpecificTifParam = $this->safe_string_2($params, 'force', 'timeInForce');
        $postOnly = null;
        list($postOnly, $params) = $this->handle_post_only($isMarketOrder, $exchangeSpecificTifParam === 'post_only', $params);
        $defaultTimeInForce = $this->safe_string_upper($this->options, 'defaultTimeInForce');
        $timeInForce = $this->safe_string_upper($params, 'timeInForce', $defaultTimeInForce);
        if ($postOnly) {
            $request['force'] = 'post_only';
        } elseif ($timeInForce === 'GTC') {
            $request['force'] = 'GTC';
        } elseif ($timeInForce === 'FOK') {
            $request['force'] = 'FOK';
        } elseif ($timeInForce === 'IOC') {
            $request['force'] = 'IOC';
        }
        $params = $this->omit($params, array( 'stopPrice', 'triggerType', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit', 'postOnly', 'reduceOnly', 'clientOrderId', 'trailingPercent', 'trailingTriggerPrice' ));
        if (($marketType === 'swap') || ($marketType === 'future')) {
            $request['marginCoin'] = $market['settleId'];
            $request['size'] = $this->amount_to_precision($symbol, $amount);
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if ($clientOrderId !== null) {
                $request['clientOid'] = $clientOrderId;
            }
            if ($isTriggerOrder || $isStopLossOrTakeProfitTrigger || $isTrailingPercentOrder) {
                $request['triggerType'] = $triggerType;
            }
            if ($isTrailingPercentOrder) {
                if (!$isMarketOrder) {
                    throw new BadRequest($this->id . ' createOrder() bitget trailing orders must be $market orders');
                }
                if ($trailingTriggerPrice === null) {
                    throw new ArgumentsRequired($this->id . ' createOrder() bitget trailing orders must have a $trailingTriggerPrice param');
                }
                $request['planType'] = 'track_plan';
                $request['triggerPrice'] = $this->price_to_precision($symbol, $trailingTriggerPrice);
                $request['callbackRatio'] = $trailingPercent;
            } elseif ($isTriggerOrder) {
                $request['planType'] = 'normal_plan';
                $request['triggerPrice'] = $this->price_to_precision($symbol, $triggerPrice);
                if ($price !== null) {
                    $request['executePrice'] = $this->price_to_precision($symbol, $price);
                }
                if ($isStopLoss) {
                    $slTriggerPrice = $this->safe_number_2($stopLoss, 'triggerPrice', 'stopPrice');
                    $request['stopLossTriggerPrice'] = $this->price_to_precision($symbol, $slTriggerPrice);
                    $slPrice = $this->safe_number($stopLoss, 'price');
                    $request['stopLossExecutePrice'] = $this->price_to_precision($symbol, $slPrice);
                    $slType = $this->safe_string($stopLoss, 'type', 'mark_price');
                    $request['stopLossTriggerType'] = $slType;
                }
                if ($isTakeProfit) {
                    $tpTriggerPrice = $this->safe_number_2($takeProfit, 'triggerPrice', 'stopPrice');
                    $request['stopSurplusTriggerPrice'] = $this->price_to_precision($symbol, $tpTriggerPrice);
                    $tpPrice = $this->safe_number($takeProfit, 'price');
                    $request['stopSurplusExecutePrice'] = $this->price_to_precision($symbol, $tpPrice);
                    $tpType = $this->safe_string($takeProfit, 'type', 'mark_price');
                    $request['stopSurplusTriggerType'] = $tpType;
                }
            } elseif ($isStopLossOrTakeProfitTrigger) {
                if (!$isMarketOrder) {
                    throw new ExchangeError($this->id . ' createOrder() bitget $stopLoss or $takeProfit orders must be $market orders');
                }
                $request['holdSide'] = ($side === 'buy') ? 'long' : 'short';
                if ($isStopLossTriggerOrder) {
                    $request['triggerPrice'] = $this->price_to_precision($symbol, $stopLossTriggerPrice);
                    $request['planType'] = 'pos_loss';
                } elseif ($isTakeProfitTriggerOrder) {
                    $request['triggerPrice'] = $this->price_to_precision($symbol, $takeProfitTriggerPrice);
                    $request['planType'] = 'pos_profit';
                }
            } else {
                if ($isStopLoss) {
                    $slTriggerPrice = $this->safe_value_2($stopLoss, 'triggerPrice', 'stopPrice');
                    $request['presetStopLossPrice'] = $this->price_to_precision($symbol, $slTriggerPrice);
                }
                if ($isTakeProfit) {
                    $tpTriggerPrice = $this->safe_value_2($takeProfit, 'triggerPrice', 'stopPrice');
                    $request['presetStopSurplusPrice'] = $this->price_to_precision($symbol, $tpTriggerPrice);
                }
            }
            if (!$isStopLossOrTakeProfitTrigger) {
                if ($marginMode === null) {
                    $marginMode = 'cross';
                }
                $marginModeRequest = ($marginMode === 'cross') ? 'crossed' : 'isolated';
                $request['marginMode'] = $marginModeRequest;
                $oneWayMode = $this->safe_value($params, 'oneWayMode', false);
                $params = $this->omit($params, 'oneWayMode');
                $requestSide = $side;
                if ($reduceOnly) {
                    if ($oneWayMode) {
                        $request['reduceOnly'] = 'YES';
                    } else {
                        // on bitget hedge mode if the position is long the $side is always buy, and if the position is short the $side is always sell
                        $requestSide = ($side === 'buy') ? 'sell' : 'buy';
                        $request['tradeSide'] = 'Close';
                    }
                } else {
                    if (!$oneWayMode) {
                        $request['tradeSide'] = 'Open';
                    }
                }
                $request['side'] = $requestSide;
            }
        } elseif ($marketType === 'spot') {
            if ($isStopLossOrTakeProfitTrigger || $isStopLossOrTakeProfit) {
                throw new InvalidOrder($this->id . ' createOrder() does not support stop loss/take profit orders on spot markets, only swap markets');
            }
            $request['side'] = $side;
            $quantity = null;
            $planType = null;
            $createMarketBuyOrderRequiresPrice = true;
            list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
            if ($isMarketOrder && ($side === 'buy')) {
                $planType = 'total';
                $cost = $this->safe_number($params, 'cost');
                $params = $this->omit($params, 'cost');
                if ($cost !== null) {
                    $quantity = $this->cost_to_precision($symbol, $cost);
                } elseif ($createMarketBuyOrderRequiresPrice) {
                    if ($price === null) {
                        throw new InvalidOrder($this->id . ' createOrder() requires the $price argument for $market buy orders to calculate the total $cost to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option or param to false and pass the $cost to spend in the $amount argument');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $quoteAmount = Precise::string_mul($amountString, $priceString);
                        $quantity = $this->cost_to_precision($symbol, $quoteAmount);
                    }
                } else {
                    $quantity = $this->cost_to_precision($symbol, $amount);
                }
            } else {
                $planType = 'amount';
                $quantity = $this->amount_to_precision($symbol, $amount);
            }
            if ($clientOrderId !== null) {
                $request['clientOid'] = $clientOrderId;
            }
            if ($marginMode !== null) {
                $request['loanType'] = 'normal';
                if ($createMarketBuyOrderRequiresPrice && $isMarketOrder && ($side === 'buy')) {
                    $request['quoteSize'] = $quantity;
                } else {
                    $request['baseSize'] = $quantity;
                }
            } else {
                if ($quantity !== null) {
                    $request['size'] = $quantity;
                }
                if ($triggerPrice !== null) {
                    $request['planType'] = $planType;
                    $request['triggerType'] = $triggerType;
                    $request['triggerPrice'] = $this->price_to_precision($symbol, $triggerPrice);
                    if ($price !== null) {
                        $request['executePrice'] = $this->price_to_precision($symbol, $price);
                    }
                }
            }
        } else {
            throw new NotSupported($this->id . ' createOrder() does not support ' . $marketType . ' orders');
        }
        return array_merge($request, $params);
    }

    public function create_orders(array $orders, $params = array ()) {
        /**
         * create a list of trade $orders (all $orders should be of the same $symbol)
         * @see https://www.bitget.com/api-doc/spot/trade/Batch-Place-Orders
         * @see https://www.bitget.com/api-doc/contract/trade/Batch-Order
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Isolated-Batch-Order
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Cross-Batch-Order
         * @param {Array} $orders list of $orders to create, each object should contain the parameters required by createOrder, namely $symbol, $type, $side, $amount, $price and $params
         * @param {array} [$params] extra parameters specific to the api endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $ordersRequests = array();
        $symbol = null;
        $marginMode = null;
        for ($i = 0; $i < count($orders); $i++) {
            $rawOrder = $orders[$i];
            $marketId = $this->safe_string($rawOrder, 'symbol');
            if ($symbol === null) {
                $symbol = $marketId;
            } else {
                if ($symbol !== $marketId) {
                    throw new BadRequest($this->id . ' createOrders() requires all $orders to have the same symbol');
                }
            }
            $type = $this->safe_string($rawOrder, 'type');
            $side = $this->safe_string($rawOrder, 'side');
            $amount = $this->safe_value($rawOrder, 'amount');
            $price = $this->safe_value($rawOrder, 'price');
            $orderParams = $this->safe_value($rawOrder, 'params', array());
            $marginResult = $this->handle_margin_mode_and_params('createOrders', $orderParams);
            $currentMarginMode = $marginResult[0];
            if ($currentMarginMode !== null) {
                if ($marginMode === null) {
                    $marginMode = $currentMarginMode;
                } else {
                    if ($marginMode !== $currentMarginMode) {
                        throw new BadRequest($this->id . ' createOrders() requires all $orders to have the same margin mode (isolated or cross)');
                    }
                }
            }
            $orderRequest = $this->create_order_request($marketId, $type, $side, $amount, $price, $orderParams);
            $ordersRequests[] = $orderRequest;
        }
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array(
            'symbol' => $market['id'],
            'orderList' => $ordersRequests,
        );
        $response = null;
        if (($market['swap']) || ($market['future'])) {
            if ($marginMode === null) {
                $marginMode = 'cross';
            }
            $marginModeRequest = ($marginMode === 'cross') ? 'crossed' : 'isolated';
            $request['marginMode'] = $marginModeRequest;
            $request['marginCoin'] = $market['settleId'];
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->privateMixPostV2MixOrderBatchPlaceOrder ($request);
        } elseif ($marginMode === 'isolated') {
            $response = $this->privateMarginPostV2MarginIsolatedBatchPlaceOrder ($request);
        } elseif ($marginMode === 'cross') {
            $response = $this->privateMarginPostV2MarginCrossedBatchPlaceOrder ($request);
        } else {
            $response = $this->privateSpotPostV2SpotTradeBatchOrders ($request);
        }
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700703539416,
        //         "data" => {
        //             "successList" => array(
        //                 array(
        //                     "orderId" => "1111397214281175046",
        //                     "clientOid" => "766d3fc3-7321-4406-a689-15c9987a2e75"
        //                 ),
        //             ),
        //             "failureList" => array(
        //                 array(
        //                     "orderId" => "",
        //                     "clientOid" => "d1b75cb3-cc15-4ede-ad4c-3937396f75ab",
        //                     "errorMsg" => "less than the minimum $amount 5 USDT",
        //                     "errorCode" => "45110"
        //                 ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $failure = $this->safe_value($data, 'failureList', array());
        $orderInfo = $this->safe_value($data, 'successList', array());
        $both = $this->array_concat($orderInfo, $failure);
        return $this->parse_orders($both, $market);
    }

    public function edit_order(string $id, $symbol, $type, $side, $amount = null, $price = null, $params = array ()) {
        /**
         * edit a trade order
         * @see https://www.bitget.com/api-doc/spot/plan/Modify-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Modify-Order
         * @see https://www.bitget.com/api-doc/contract/plan/Modify-Tpsl-Order
         * @see https://www.bitget.com/api-doc/contract/plan/Modify-Plan-Order
         * @param {string} $id cancel order $id
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much you want to trade in units of the base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the base currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {float} [$params->triggerPrice] the $price that a trigger order is triggered at
         * @param {float} [$params->stopLossPrice] *swap only* The $price at which a stop loss order is triggered at
         * @param {float} [$params->takeProfitPrice] *swap only* The $price at which a take profit order is triggered at
         * @param {array} [$params->takeProfit] *$takeProfit object in $params* containing the $triggerPrice at which the attached take profit order will be triggered (perpetual swap markets only)
         * @param {float} [$params->takeProfit.triggerPrice] *swap only* take profit trigger $price
         * @param {array} [$params->stopLoss] *$stopLoss object in $params* containing the $triggerPrice at which the attached stop loss order will be triggered (perpetual swap markets only)
         * @param {float} [$params->stopLoss.triggerPrice] *swap only* stop loss trigger $price
         * @param {float} [$params->stopLoss.price] *swap only* the execution $price for a stop loss attached to a trigger order
         * @param {float} [$params->takeProfit.price] *swap only* the execution $price for a take profit attached to a trigger order
         * @param {string} [$params->stopLoss.type] *swap only* the $type for a stop loss attached to a trigger order, 'fill_price', 'index_price' or 'mark_price', default is 'mark_price'
         * @param {string} [$params->takeProfit.type] *swap only* the $type for a take profit attached to a trigger order, 'fill_price', 'index_price' or 'mark_price', default is 'mark_price'
         * @param {string} [$params->trailingPercent] *swap and future only* the percent to trail away from the current $market $price, rate can not be greater than 10
         * @param {string} [$params->trailingTriggerPrice] *swap and future only* the $price to trigger a trailing stop order, default uses the $price argument
         * @param {string} [$params->newTriggerType] *swap and future only* 'fill_price', 'mark_price' or 'index_price'
         * @return {array} an ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array(
            'orderId' => $id,
        );
        $isMarketOrder = $type === 'market';
        $triggerPrice = $this->safe_value_2($params, 'stopPrice', 'triggerPrice');
        $isTriggerOrder = $triggerPrice !== null;
        $stopLossPrice = $this->safe_value($params, 'stopLossPrice');
        $isStopLossOrder = $stopLossPrice !== null;
        $takeProfitPrice = $this->safe_value($params, 'takeProfitPrice');
        $isTakeProfitOrder = $takeProfitPrice !== null;
        $stopLoss = $this->safe_value($params, 'stopLoss');
        $takeProfit = $this->safe_value($params, 'takeProfit');
        $isStopLoss = $stopLoss !== null;
        $isTakeProfit = $takeProfit !== null;
        $trailingTriggerPrice = $this->safe_string($params, 'trailingTriggerPrice', $price);
        $trailingPercent = $this->safe_string_2($params, 'trailingPercent', 'newCallbackRatio');
        $isTrailingPercentOrder = $trailingPercent !== null;
        if ($this->sum($isTriggerOrder, $isStopLossOrder, $isTakeProfitOrder, $isTrailingPercentOrder) > 1) {
            throw new ExchangeError($this->id . ' editOrder() $params can only contain one of $triggerPrice, $stopLossPrice, $takeProfitPrice, trailingPercent');
        }
        $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
        if ($clientOrderId !== null) {
            $request['clientOid'] = $clientOrderId;
        }
        $params = $this->omit($params, array( 'stopPrice', 'triggerType', 'stopLossPrice', 'takeProfitPrice', 'stopLoss', 'takeProfit', 'clientOrderId', 'trailingTriggerPrice', 'trailingPercent' ));
        $response = null;
        if ($market['spot']) {
            $editMarketBuyOrderRequiresPrice = $this->safe_value($this->options, 'editMarketBuyOrderRequiresPrice', true);
            if ($editMarketBuyOrderRequiresPrice && $isMarketOrder && ($side === 'buy')) {
                if ($price === null) {
                    throw new InvalidOrder($this->id . ' editOrder() requires $price argument for $market buy orders on spot markets to calculate the total $amount to spend ($amount * $price), alternatively set the $editMarketBuyOrderRequiresPrice option to false and pass in the $cost to spend into the $amount parameter');
                } else {
                    $amountString = $this->number_to_string($amount);
                    $priceString = $this->number_to_string($price);
                    $cost = $this->parse_number(Precise::string_mul($amountString, $priceString));
                    $request['size'] = $this->price_to_precision($symbol, $cost);
                }
            } else {
                $request['size'] = $this->amount_to_precision($symbol, $amount);
            }
            $request['orderType'] = $type;
            $request['triggerPrice'] = $this->price_to_precision($symbol, $triggerPrice);
            $request['executePrice'] = $this->price_to_precision($symbol, $price);
            $response = $this->privateSpotPostV2SpotTradeModifyPlanOrder (array_merge($request, $params));
        } else {
            if ((!$market['swap']) && (!$market['future'])) {
                throw new NotSupported($this->id . ' editOrder() does not support ' . $market['type'] . ' orders');
            }
            $request['symbol'] = $market['id'];
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if (!$isTakeProfitOrder && !$isStopLossOrder) {
                $request['newSize'] = $this->amount_to_precision($symbol, $amount);
                if (($price !== null) && !$isTrailingPercentOrder) {
                    $request['newPrice'] = $this->price_to_precision($symbol, $price);
                }
            }
            if ($isTrailingPercentOrder) {
                if (!$isMarketOrder) {
                    throw new BadRequest($this->id . ' editOrder() bitget trailing orders must be $market orders');
                }
                if ($trailingTriggerPrice !== null) {
                    $request['newTriggerPrice'] = $this->price_to_precision($symbol, $trailingTriggerPrice);
                }
                $request['newCallbackRatio'] = $trailingPercent;
                $response = $this->privateMixPostV2MixOrderModifyPlanOrder (array_merge($request, $params));
            } elseif ($isTakeProfitOrder || $isStopLossOrder) {
                $request['marginCoin'] = $market['settleId'];
                $request['size'] = $this->amount_to_precision($symbol, $amount);
                $request['executePrice'] = $this->price_to_precision($symbol, $price);
                if ($isStopLossOrder) {
                    $request['triggerPrice'] = $this->price_to_precision($symbol, $stopLossPrice);
                } elseif ($isTakeProfitOrder) {
                    $request['triggerPrice'] = $this->price_to_precision($symbol, $takeProfitPrice);
                }
                $response = $this->privateMixPostV2MixOrderModifyTpslOrder (array_merge($request, $params));
            } elseif ($isTriggerOrder) {
                $request['newTriggerPrice'] = $this->price_to_precision($symbol, $triggerPrice);
                if ($isStopLoss) {
                    $slTriggerPrice = $this->safe_number_2($stopLoss, 'triggerPrice', 'stopPrice');
                    $request['newStopLossTriggerPrice'] = $this->price_to_precision($symbol, $slTriggerPrice);
                    $slPrice = $this->safe_number($stopLoss, 'price');
                    $request['newStopLossExecutePrice'] = $this->price_to_precision($symbol, $slPrice);
                    $slType = $this->safe_string($stopLoss, 'type', 'mark_price');
                    $request['newStopLossTriggerType'] = $slType;
                }
                if ($isTakeProfit) {
                    $tpTriggerPrice = $this->safe_number_2($takeProfit, 'triggerPrice', 'stopPrice');
                    $request['newSurplusTriggerPrice'] = $this->price_to_precision($symbol, $tpTriggerPrice);
                    $tpPrice = $this->safe_number($takeProfit, 'price');
                    $request['newStopSurplusExecutePrice'] = $this->price_to_precision($symbol, $tpPrice);
                    $tpType = $this->safe_string($takeProfit, 'type', 'mark_price');
                    $request['newStopSurplusTriggerType'] = $tpType;
                }
                $response = $this->privateMixPostV2MixOrderModifyPlanOrder (array_merge($request, $params));
            } else {
                $defaultNewClientOrderId = $this->uuid();
                $newClientOrderId = $this->safe_string_2($params, 'newClientOid', 'newClientOrderId', $defaultNewClientOrderId);
                $params = $this->omit($params, 'newClientOrderId');
                $request['newClientOid'] = $newClientOrderId;
                if ($isStopLoss) {
                    $slTriggerPrice = $this->safe_value_2($stopLoss, 'triggerPrice', 'stopPrice');
                    $request['newPresetStopLossPrice'] = $this->price_to_precision($symbol, $slTriggerPrice);
                }
                if ($isTakeProfit) {
                    $tpTriggerPrice = $this->safe_value_2($takeProfit, 'triggerPrice', 'stopPrice');
                    $request['newPresetStopSurplusPrice'] = $this->price_to_precision($symbol, $tpTriggerPrice);
                }
                $response = $this->privateMixPostV2MixOrderModifyOrder (array_merge($request, $params));
            }
        }
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700708275737,
        //         "data" => {
        //             "clientOid" => "abe95dbe-6081-4a6f-a2d3-ae49601cd459",
        //             "orderId" => null
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data, $market);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open $order
         * @see https://www.bitget.com/api-doc/spot/trade/Cancel-Order
         * @see https://www.bitget.com/api-doc/spot/plan/Cancel-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Cancel-Order
         * @see https://www.bitget.com/api-doc/contract/plan/Cancel-Plan-Order
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Cross-Cancel-Order
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Isolated-Cancel-Order
         * @param {string} $id $order $id
         * @param {string} $symbol unified $symbol of the $market the $order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'isolated' or 'cross' for spot margin trading
         * @param {boolean} [$params->stop] set to true for canceling trigger orders
         * @param {string} [$params->planType] *swap only* either profit_plan, loss_plan, normal_plan, pos_profit, pos_loss, moving_plan or track_plan
         * @param {boolean} [$params->trailing] set to true if you want to cancel a $trailing $order
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $marginMode = null;
        $response = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('cancelOrder', $params);
        $request = array();
        $trailing = $this->safe_value($params, 'trailing');
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $params = $this->omit($params, array( 'stop', 'trigger', 'trailing' ));
        if (!($market['spot'] && $stop)) {
            $request['symbol'] = $market['id'];
        }
        if (!(($market['swap'] || $market['future']) && $stop)) {
            $request['orderId'] = $id;
        }
        if (($market['swap']) || ($market['future'])) {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if ($stop || $trailing) {
                $orderIdList = array();
                $orderId = array(
                    'orderId' => $id,
                );
                $orderIdList[] = $orderId;
                $request['orderIdList'] = $orderIdList;
            }
            if ($trailing) {
                $planType = $this->safe_string($params, 'planType', 'track_plan');
                $request['planType'] = $planType;
                $response = $this->privateMixPostV2MixOrderCancelPlanOrder (array_merge($request, $params));
            } elseif ($stop) {
                $response = $this->privateMixPostV2MixOrderCancelPlanOrder (array_merge($request, $params));
            } else {
                $response = $this->privateMixPostV2MixOrderCancelOrder (array_merge($request, $params));
            }
        } elseif ($market['spot']) {
            if ($marginMode !== null) {
                if ($marginMode === 'isolated') {
                    $response = $this->privateMarginPostV2MarginIsolatedCancelOrder (array_merge($request, $params));
                } elseif ($marginMode === 'cross') {
                    $response = $this->privateMarginPostV2MarginCrossedCancelOrder (array_merge($request, $params));
                }
            } else {
                if ($stop) {
                    $response = $this->privateSpotPostV2SpotTradeCancelPlanOrder (array_merge($request, $params));
                } else {
                    $response = $this->privateSpotPostV2SpotTradeCancelOrder (array_merge($request, $params));
                }
            }
        } else {
            throw new NotSupported($this->id . ' cancelOrder() does not support ' . $market['type'] . ' orders');
        }
        //
        // spot, swap, future and spot margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1697690413177,
        //         "data" => {
        //             "orderId" => "1098758604547850241",
        //             "clientOid" => "1098758604585598977"
        //         }
        //     }
        //
        // swap trigger
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700711311791,
        //         "data" => {
        //             "successList" => array(
        //                 {
        //                     "clientOid" => "1111428059067125760",
        //                     "orderId" => "1111428059067125761"
        //                 }
        //             ),
        //             "failureList" => array()
        //         }
        //     }
        //
        // spot trigger
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700711728063,
        //         "data" => {
        //             "result" => "success"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $order = null;
        if (($market['swap'] || $market['future']) && $stop) {
            $orderInfo = $this->safe_value($data, 'successList', array());
            $order = $orderInfo[0];
        } else {
            $order = $data;
        }
        return $this->parse_order($order, $market);
    }

    public function cancel_orders($ids, ?string $symbol = null, $params = array ()) {
        /**
         * cancel multiple $orders
         * @see https://www.bitget.com/api-doc/spot/trade/Batch-Cancel-Orders
         * @see https://www.bitget.com/api-doc/contract/trade/Batch-Cancel-Orders
         * @see https://www.bitget.com/api-doc/contract/plan/Cancel-Plan-Order
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Cross-Batch-Cancel-Order
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Isolated-Batch-Cancel-Orders
         * @param {string[]} $ids order $ids
         * @param {string} $symbol unified $market $symbol, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'isolated' or 'cross' for spot margin trading
         * @param {boolean} [$params->stop] *contract only* set to true for canceling trigger $orders
         * @return {array} an array of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('cancelOrders', $params);
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $params = $this->omit($params, array( 'stop', 'trigger' ));
        $orderIdList = array();
        for ($i = 0; $i < count($ids); $i++) {
            $individualId = $ids[$i];
            $orderId = array(
                'orderId' => $individualId,
            );
            $orderIdList[] = $orderId;
        }
        $request = array(
            'symbol' => $market['id'],
        );
        if ($market['spot'] && ($marginMode === null)) {
            $request['orderList'] = $orderIdList;
        } else {
            $request['orderIdList'] = $orderIdList;
        }
        $response = null;
        if ($market['spot']) {
            if ($marginMode !== null) {
                if ($marginMode === 'cross') {
                    $response = $this->privateMarginPostV2MarginCrossedBatchCancelOrder (array_merge($request, $params));
                } else {
                    $response = $this->privateMarginPostV2MarginIsolatedBatchCancelOrder (array_merge($request, $params));
                }
            } else {
                $response = $this->privateSpotPostV2SpotTradeBatchCancelOrder (array_merge($request, $params));
            }
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if ($stop) {
                $response = $this->privateMixPostV2MixOrderCancelPlanOrder (array_merge($request, $params));
            } else {
                $response = $this->privateMixPostV2MixOrderBatchCancelOrders (array_merge($request, $params));
            }
        }
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => "1680008815965",
        //         "data" => {
        //             "successList" => array(
        //                 array(
        //                     "orderId" => "1024598257429823488",
        //                     "clientOid" => "876493ce-c287-4bfc-9f4a-8b1905881313"
        //                 ),
        //             ),
        //             "failureList" => array()
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $orders = $this->safe_value($data, 'successList', array());
        return $this->parse_orders($orders, $market);
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders
         * @see https://www.bitget.com/api-doc/spot/trade/Cancel-Symbol-Orders
         * @see https://www.bitget.com/api-doc/contract/trade/Batch-Cancel-Orders
         * @see https://bitgetlimited.github.io/apidoc/en/margin/#isolated-batch-cancel-orders
         * @see https://bitgetlimited.github.io/apidoc/en/margin/#cross-batch-cancel-order
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'isolated' or 'cross' for spot margin trading
         * @param {boolean} [$params->stop] *contract only* set to true for canceling trigger orders
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('cancelAllOrders', $params);
        $request = array(
            'symbol' => $market['id'],
        );
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $params = $this->omit($params, array( 'stop', 'trigger' ));
        $response = null;
        if ($market['spot']) {
            if ($marginMode !== null) {
                if ($marginMode === 'cross') {
                    $response = $this->privateMarginPostMarginV1CrossOrderBatchCancelOrder (array_merge($request, $params));
                } else {
                    $response = $this->privateMarginPostMarginV1IsolatedOrderBatchCancelOrder (array_merge($request, $params));
                }
            } else {
                $response = $this->privateSpotPostV2SpotTradeCancelSymbolOrder (array_merge($request, $params));
            }
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if ($stop) {
                $response = $this->privateMixPostV2MixOrderCancelPlanOrder (array_merge($request, $params));
            } else {
                $response = $this->privateMixPostV2MixOrderBatchCancelOrders (array_merge($request, $params));
            }
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700716953996,
        //         "data" => {
        //             "symbol" => "BTCUSDT"
        //         }
        //     }
        //
        // swap
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => "1680008815965",
        //         "data" => {
        //             "successList" => array(
        //                 array(
        //                     "orderId" => "1024598257429823488",
        //                     "clientOid" => "876493ce-c287-4bfc-9f4a-8b1905881313"
        //                 ),
        //             ),
        //             "failureList" => array()
        //         }
        //     }
        //
        // spot margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700717155622,
        //         "data" => {
        //             "resultList" => array(
        //                 array(
        //                     "orderId" => "1111453253721796609",
        //                     "clientOid" => "2ae7fc8a4ff949b6b60d770ca3950e2d"
        //                 ),
        //             ),
        //             "failure" => array()
        //         }
        //     }
        //
        return $response;
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @see https://www.bitget.com/api-doc/spot/trade/Get-Order-Info
         * @see https://www.bitget.com/api-doc/contract/trade/Get-Order-Details
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $request = array(
            'orderId' => $id,
        );
        $response = null;
        if ($market['spot']) {
            $response = $this->privateSpotGetV2SpotTradeOrderInfo (array_merge($request, $params));
        } elseif ($market['swap'] || $market['future']) {
            $request['symbol'] = $market['id'];
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->privateMixGetV2MixOrderDetail (array_merge($request, $params));
        } else {
            throw new NotSupported($this->id . ' fetchOrder() does not support ' . $market['type'] . ' orders');
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700719076263,
        //         "data" => array(
        //             {
        //                 "userId" => "7264631750",
        //                 "symbol" => "BTCUSDT",
        //                 "orderId" => "1111461743123927040",
        //                 "clientOid" => "63f95110-93b5-4309-8f77-46339f1bcf3c",
        //                 "price" => "25000.0000000000000000",
        //                 "size" => "0.0002000000000000",
        //                 "orderType" => "limit",
        //                 "side" => "buy",
        //                 "status" => "live",
        //                 "priceAvg" => "0",
        //                 "baseVolume" => "0.0000000000000000",
        //                 "quoteVolume" => "0.0000000000000000",
        //                 "enterPointSource" => "API",
        //                 "feeDetail" => "",
        //                 "orderSource" => "normal",
        //                 "cTime" => "1700719050198",
        //                 "uTime" => "1700719050198"
        //             }
        //         )
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700719918781,
        //         "data" => {
        //             "symbol" => "BTCUSDT",
        //             "size" => "0.001",
        //             "orderId" => "1111465253393825792",
        //             "clientOid" => "1111465253431574529",
        //             "baseVolume" => "0",
        //             "fee" => "0",
        //             "price" => "27000",
        //             "priceAvg" => "",
        //             "state" => "live",
        //             "side" => "buy",
        //             "force" => "gtc",
        //             "totalProfits" => "0",
        //             "posSide" => "long",
        //             "marginCoin" => "USDT",
        //             "presetStopSurplusPrice" => "",
        //             "presetStopLossPrice" => "",
        //             "quoteVolume" => "0",
        //             "orderType" => "limit",
        //             "leverage" => "20",
        //             "marginMode" => "crossed",
        //             "reduceOnly" => "NO",
        //             "enterPointSource" => "API",
        //             "tradeSide" => "open",
        //             "posMode" => "hedge_mode",
        //             "orderSource" => "normal",
        //             "cTime" => "1700719887120",
        //             "uTime" => "1700719887120"
        //         }
        //     }
        //
        if (gettype($response) === 'string') {
            $response = json_decode($response, $as_associative_array = true);
        }
        $data = $this->safe_value($response, 'data');
        $first = $this->safe_value($data, 0, $data);
        return $this->parse_order($first, $market);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all unfilled currently open orders
         * @see https://www.bitget.com/api-doc/spot/trade/Get-Unfilled-Orders
         * @see https://www.bitget.com/api-doc/spot/plan/Get-Current-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Get-Orders-Pending
         * @see https://www.bitget.com/api-doc/contract/plan/get-orders-plan-pending
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Get-Cross-Open-Orders
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Isolated-Open-Orders
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch open orders for
         * @param {int} [$limit] the maximum number of open order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch orders for
         * @param {string} [$params->planType] *contract $stop only* 'normal_plan' => average trigger order, 'track_plan' => $trailing $stop order, default is 'normal_plan'
         * @param {boolean} [$params->stop] set to true for fetching trigger orders
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @param {string} [$params->isPlan] *swap only* 'plan' for $stop orders and 'profit_loss' for tp/sl orders, default is 'plan'
         * @param {boolean} [$params->trailing] set to true if you want to fetch $trailing orders
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        $type = null;
        $request = array();
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchOpenOrders', $params);
        if ($symbol !== null) {
            if ($sandboxMode) {
                $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
                $market = $this->market($sandboxSymbol);
            } else {
                $market = $this->market($symbol);
            }
            $request['symbol'] = $market['id'];
            $defaultType = $this->safe_string_2($this->options, 'fetchOpenOrders', 'defaultType', 'spot');
            $marketType = (is_array($market) && array_key_exists('type', $market)) ? $market['type'] : $defaultType;
            $type = $this->safe_string($params, 'type', $marketType);
        } else {
            $defaultType = $this->safe_string_2($this->options, 'fetchOpenOrders', 'defaultType', 'spot');
            $type = $this->safe_string($params, 'type', $defaultType);
        }
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOpenOrders', 'paginate');
        if ($paginate) {
            $cursorReceived = null;
            if ($type === 'spot') {
                if ($marginMode !== null) {
                    $cursorReceived = 'minId';
                }
            } else {
                $cursorReceived = 'endId';
            }
            return $this->fetch_paginated_call_cursor('fetchOpenOrders', $symbol, $since, $limit, $params, $cursorReceived, 'idLessThan');
        }
        $response = null;
        $trailing = $this->safe_value($params, 'trailing');
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $params = $this->omit($params, array( 'stop', 'trigger', 'trailing' ));
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if (($type === 'swap') || ($type === 'future') || ($marginMode !== null)) {
            $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
            $params = $this->omit($params, 'clientOrderId');
            if ($clientOrderId !== null) {
                $request['clientOid'] = $clientOrderId;
            }
        }
        $query = null;
        $query = $this->omit($params, array( 'type' ));
        if ($type === 'spot') {
            if ($marginMode !== null) {
                if ($since === null) {
                    $since = $this->milliseconds() - 7776000000;
                    $request['startTime'] = $since;
                }
                if ($marginMode === 'isolated') {
                    $response = $this->privateMarginGetV2MarginIsolatedOpenOrders (array_merge($request, $query));
                } elseif ($marginMode === 'cross') {
                    $response = $this->privateMarginGetV2MarginCrossedOpenOrders (array_merge($request, $query));
                }
            } else {
                if ($stop) {
                    $response = $this->privateSpotGetV2SpotTradeCurrentPlanOrder (array_merge($request, $query));
                } else {
                    $response = $this->privateSpotGetV2SpotTradeUnfilledOrders (array_merge($request, $query));
                }
            }
        } else {
            $productType = null;
            list($productType, $query) = $this->handle_product_type_and_params($market, $query);
            $request['productType'] = $productType;
            if ($trailing) {
                $planType = $this->safe_string($params, 'planType', 'track_plan');
                $request['planType'] = $planType;
                $response = $this->privateMixGetV2MixOrderOrdersPlanPending (array_merge($request, $query));
            } elseif ($stop) {
                $planType = $this->safe_string($query, 'planType', 'normal_plan');
                $request['planType'] = $planType;
                $response = $this->privateMixGetV2MixOrderOrdersPlanPending (array_merge($request, $query));
            } else {
                $response = $this->privateMixGetV2MixOrderOrdersPending (array_merge($request, $query));
            }
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700728123994,
        //         "data" => array(
        //             {
        //                 "userId" => "7264631750",
        //                 "symbol" => "BTCUSDT",
        //                 "orderId" => "1111499608327360513",
        //                 "clientOid" => "d0d4dad5-18d0-4869-a074-ec40bb47cba6",
        //                 "priceAvg" => "25000.0000000000000000",
        //                 "size" => "0.0002000000000000",
        //                 "orderType" => "limit",
        //                 "side" => "buy",
        //                 "status" => "live",
        //                 "basePrice" => "0",
        //                 "baseVolume" => "0.0000000000000000",
        //                 "quoteVolume" => "0.0000000000000000",
        //                 "enterPointSource" => "WEB",
        //                 "orderSource" => "normal",
        //                 "cTime" => "1700728077966",
        //                 "uTime" => "1700728077966"
        //             }
        //         )
        //     }
        //
        // spot $stop
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700729361609,
        //         "data" => {
        //             "nextFlag" => false,
        //             "idLessThan" => "1111503385931620352",
        //             "orderList" => array(
        //                 {
        //                     "orderId" => "1111503385931620352",
        //                     "clientOid" => "1111503385910648832",
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "0.0002",
        //                     "planType" => "AMOUNT",
        //                     "executePrice" => "25000",
        //                     "triggerPrice" => "26000",
        //                     "status" => "live",
        //                     "orderType" => "limit",
        //                     "side" => "buy",
        //                     "triggerType" => "fill_price",
        //                     "enterPointSource" => "API",
        //                     "cTime" => "1700728978617",
        //                     "uTime" => "1700728978617"
        //                 }
        //             )
        //         }
        //     }
        //
        // spot margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700729887686,
        //         "data" => {
        //             "orderList" => array(
        //                 {
        //                     "symbol" => "BTCUSDT",
        //                     "orderType" => "limit",
        //                     "enterPointSource" => "WEB",
        //                     "orderId" => "1111506377509580801",
        //                     "clientOid" => "2043a3b59a60445f9d9f7365bf3e960c",
        //                     "loanType" => "autoLoanAndRepay",
        //                     "price" => "25000",
        //                     "side" => "buy",
        //                     "status" => "live",
        //                     "baseSize" => "0.0002",
        //                     "quoteSize" => "5",
        //                     "priceAvg" => "0",
        //                     "size" => "0",
        //                     "amount" => "0",
        //                     "force" => "gtc",
        //                     "cTime" => "1700729691866",
        //                     "uTime" => "1700729691866"
        //                 }
        //             ),
        //             "maxId" => "1111506377509580801",
        //             "minId" => "1111506377509580801"
        //         }
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700725609065,
        //         "data" => {
        //             "entrustedList" => array(
        //                 {
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "0.002",
        //                     "orderId" => "1111488897767604224",
        //                     "clientOid" => "1111488897805352960",
        //                     "baseVolume" => "0",
        //                     "fee" => "0",
        //                     "price" => "25000",
        //                     "priceAvg" => "",
        //                     "status" => "live",
        //                     "side" => "buy",
        //                     "force" => "gtc",
        //                     "totalProfits" => "0",
        //                     "posSide" => "long",
        //                     "marginCoin" => "USDT",
        //                     "quoteVolume" => "0",
        //                     "leverage" => "20",
        //                     "marginMode" => "crossed",
        //                     "enterPointSource" => "web",
        //                     "tradeSide" => "open",
        //                     "posMode" => "hedge_mode",
        //                     "orderType" => "limit",
        //                     "orderSource" => "normal",
        //                     "presetStopSurplusPrice" => "",
        //                     "presetStopLossPrice" => "",
        //                     "reduceOnly" => "NO",
        //                     "cTime" => "1700725524378",
        //                     "uTime" => "1700725524378"
        //                 }
        //             ),
        //             "endId" => "1111488897767604224"
        //         }
        //     }
        //
        // swap and future $stop
        //
        //     {
        //         "code" => "00000",\
        //         "msg" => "success",
        //         "requestTime" => 1700726417495,
        //         "data" => {
        //             "entrustedList" => array(
        //                 {
        //                     "planType" => "normal_plan",
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "0.001",
        //                     "orderId" => "1111491399869075457",
        //                     "clientOid" => "1111491399869075456",
        //                     "price" => "27000",
        //                     "callbackRatio" => "",
        //                     "triggerPrice" => "24000",
        //                     "triggerType" => "mark_price",
        //                     "planStatus" => "live",
        //                     "side" => "buy",
        //                     "posSide" => "long",
        //                     "marginCoin" => "USDT",
        //                     "marginMode" => "crossed",
        //                     "enterPointSource" => "API",
        //                     "tradeSide" => "open",
        //                     "posMode" => "hedge_mode",
        //                     "orderType" => "limit",
        //                     "stopSurplusTriggerPrice" => "",
        //                     "stopSurplusExecutePrice" => "",
        //                     "stopSurplusTriggerType" => "fill_price",
        //                     "stopLossTriggerPrice" => "",
        //                     "stopLossExecutePrice" => "",
        //                     "stopLossTriggerType" => "fill_price",
        //                     "cTime" => "1700726120917",
        //                     "uTime" => "1700726120917"
        //                 }
        //             ),
        //             "endId" => "1111491399869075457"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data');
        if ($type === 'spot') {
            if (($marginMode !== null) || $stop) {
                $resultList = $this->safe_value($data, 'orderList', array());
                return $this->parse_orders($resultList, $market, $since, $limit);
            }
        } else {
            $result = $this->safe_value($data, 'entrustedList', array());
            return $this->parse_orders($result, $market, $since, $limit);
        }
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple closed $orders made by the user
         * @see https://www.bitget.com/api-doc/spot/trade/Get-History-Orders
         * @see https://www.bitget.com/api-doc/spot/plan/Get-History-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Get-Orders-History
         * @see https://www.bitget.com/api-doc/contract/plan/orders-plan-history
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Get-Cross-Order-History
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Get-Isolated-Order-History
         * @param {string} $symbol unified market $symbol of the closed $orders
         * @param {int} [$since] timestamp in ms of the earliest order
         * @param {int} [$limit] the max number of closed $orders to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch entries for
         * @param {boolean} [$params->paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @param {string} [$params->isPlan] *swap only* 'plan' for stop $orders and 'profit_loss' for tp/sl $orders, default is 'plan'
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @param {boolean} [$params->trailing] set to true if you want to fetch trailing $orders
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $orders = $this->fetch_canceled_and_closed_orders($symbol, $since, $limit, $params);
        return $this->filter_by($orders, 'status', 'closed');
    }

    public function fetch_canceled_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetches information on multiple canceled $orders made by the user
         * @see https://www.bitget.com/api-doc/spot/trade/Get-History-Orders
         * @see https://www.bitget.com/api-doc/spot/plan/Get-History-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Get-Orders-History
         * @see https://www.bitget.com/api-doc/contract/plan/orders-plan-history
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Get-Cross-Order-History
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Get-Isolated-Order-History
         * @param {string} $symbol unified market $symbol of the canceled $orders
         * @param {int} [$since] timestamp in ms of the earliest order
         * @param {int} [$limit] the max number of canceled $orders to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch entries for
         * @param {boolean} [$params->paginate] default false, when true will automatically paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @param {string} [$params->isPlan] *swap only* 'plan' for stop $orders and 'profit_loss' for tp/sl $orders, default is 'plan'
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @param {boolean} [$params->trailing] set to true if you want to fetch trailing $orders
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $orders = $this->fetch_canceled_and_closed_orders($symbol, $since, $limit, $params);
        return $this->filter_by($orders, 'status', 'canceled');
    }

    public function fetch_canceled_and_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * @see https://www.bitget.com/api-doc/spot/trade/Get-History-Orders
         * @see https://www.bitget.com/api-doc/spot/plan/Get-History-Plan-Order
         * @see https://www.bitget.com/api-doc/contract/trade/Get-Orders-History
         * @see https://www.bitget.com/api-doc/contract/plan/orders-plan-history
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Get-Cross-Order-History
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Get-Isolated-Order-History
         * fetches information on multiple canceled and closed $orders made by the user
         * @param {string} $symbol unified $market $symbol of the $market $orders were made in
         * @param {int} [$since] the earliest time in ms to fetch $orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            if ($symbol !== null) {
                $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
                $symbol = $sandboxSymbol;
            }
        }
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $marketType = null;
        list($marketType, $params) = $this->handle_market_type_and_params('fetchCanceledAndClosedOrders', $market, $params);
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchCanceledAndClosedOrders', $params);
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchCanceledAndClosedOrders', 'paginate');
        if ($paginate) {
            $cursorReceived = null;
            if ($marketType === 'spot') {
                if ($marginMode !== null) {
                    $cursorReceived = 'minId';
                }
            } else {
                $cursorReceived = 'endId';
            }
            return $this->fetch_paginated_call_cursor('fetchCanceledAndClosedOrders', $symbol, $since, $limit, $params, $cursorReceived, 'idLessThan');
        }
        $response = null;
        $trailing = $this->safe_value($params, 'trailing');
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $params = $this->omit($params, array( 'stop', 'trigger', 'trailing' ));
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if (($marketType === 'swap') || ($marketType === 'future') || ($marginMode !== null)) {
            $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
            $params = $this->omit($params, 'clientOrderId');
            if ($clientOrderId !== null) {
                $request['clientOid'] = $clientOrderId;
            }
        }
        $now = $this->milliseconds();
        if ($marketType === 'spot') {
            if ($marginMode !== null) {
                if ($since === null) {
                    $since = $now - 7776000000;
                    $request['startTime'] = $since;
                }
                if ($marginMode === 'isolated') {
                    $response = $this->privateMarginGetV2MarginIsolatedHistoryOrders (array_merge($request, $params));
                } elseif ($marginMode === 'cross') {
                    $response = $this->privateMarginGetV2MarginCrossedHistoryOrders (array_merge($request, $params));
                }
            } else {
                if ($stop) {
                    if ($symbol === null) {
                        throw new ArgumentsRequired($this->id . ' fetchCanceledAndClosedOrders() requires a $symbol argument');
                    }
                    $endTime = $this->safe_integer_n($params, array( 'endTime', 'until', 'till' ));
                    $params = $this->omit($params, array( 'until', 'till' ));
                    if ($since === null) {
                        $since = $now - 7776000000;
                        $request['startTime'] = $since;
                    }
                    if ($endTime === null) {
                        $request['endTime'] = $now;
                    }
                    $response = $this->privateSpotGetV2SpotTradeHistoryPlanOrder (array_merge($request, $params));
                } else {
                    $response = $this->privateSpotGetV2SpotTradeHistoryOrders (array_merge($request, $params));
                }
            }
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            if ($trailing) {
                $planType = $this->safe_string($params, 'planType', 'track_plan');
                $request['planType'] = $planType;
                $response = $this->privateMixGetV2MixOrderOrdersPlanHistory (array_merge($request, $params));
            } elseif ($stop) {
                $planType = $this->safe_string($params, 'planType', 'normal_plan');
                $request['planType'] = $planType;
                $response = $this->privateMixGetV2MixOrderOrdersPlanHistory (array_merge($request, $params));
            } else {
                $response = $this->privateMixGetV2MixOrderOrdersHistory (array_merge($request, $params));
            }
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700791085380,
        //         "data" => array(
        //             array(
        //                 "userId" => "7264631750",
        //                 "symbol" => "BTCUSDT",
        //                 "orderId" => "1111499608327360513",
        //                 "clientOid" => "d0d4dad5-18d0-4869-a074-ec40bb47cba6",
        //                 "price" => "25000.0000000000000000",
        //                 "size" => "0.0002000000000000",
        //                 "orderType" => "limit",
        //                 "side" => "buy",
        //                 "status" => "cancelled",
        //                 "priceAvg" => "0",
        //                 "baseVolume" => "0.0000000000000000",
        //                 "quoteVolume" => "0.0000000000000000",
        //                 "enterPointSource" => "WEB",
        //                 "feeDetail" => "",
        //                 "orderSource" => "normal",
        //                 "cTime" => "1700728077966",
        //                 "uTime" => "1700728911471"
        //             ),
        //         )
        //     }
        //
        // spot $stop
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700792099146,
        //         "data" => {
        //             "nextFlag" => false,
        //             "idLessThan" => "1098757597417775104",
        //             "orderList" => array(
        //                 array(
        //                     "orderId" => "1111503385931620352",
        //                     "clientOid" => "1111503385910648832",
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "0.0002",
        //                     "planType" => "AMOUNT",
        //                     "executePrice" => "25000",
        //                     "triggerPrice" => "26000",
        //                     "status" => "cancelled",
        //                     "orderType" => "limit",
        //                     "side" => "buy",
        //                     "triggerType" => "fill_price",
        //                     "enterPointSource" => "API",
        //                     "cTime" => "1700728978617",
        //                     "uTime" => "1700729666868"
        //                 ),
        //             )
        //         }
        //     }
        //
        // spot margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700792381435,
        //         "data" => {
        //             "orderList" => array(
        //                 array(
        //                     "symbol" => "BTCUSDT",
        //                     "orderType" => "limit",
        //                     "enterPointSource" => "WEB",
        //                     "orderId" => "1111456274707001345",
        //                     "clientOid" => "41e428dd305a4f668671b7f1ed00dc50",
        //                     "loanType" => "autoLoanAndRepay",
        //                     "price" => "27000",
        //                     "side" => "buy",
        //                     "status" => "cancelled",
        //                     "baseSize" => "0.0002",
        //                     "quoteSize" => "5.4",
        //                     "priceAvg" => "0",
        //                     "size" => "0",
        //                     "amount" => "0",
        //                     "force" => "gtc",
        //                     "cTime" => "1700717746427",
        //                     "uTime" => "1700717780636"
        //                 ),
        //             ),
        //             "maxId" => "1111456274707001345",
        //             "minId" => "1098396464990269440"
        //         }
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700792674673,
        //         "data" => {
        //             "entrustedList" => array(
        //                 array(
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "0.002",
        //                     "orderId" => "1111498800817143808",
        //                     "clientOid" => "1111498800850698240",
        //                     "baseVolume" => "0",
        //                     "fee" => "0",
        //                     "price" => "25000",
        //                     "priceAvg" => "",
        //                     "status" => "canceled",
        //                     "side" => "buy",
        //                     "force" => "gtc",
        //                     "totalProfits" => "0",
        //                     "posSide" => "long",
        //                     "marginCoin" => "USDT",
        //                     "quoteVolume" => "0",
        //                     "leverage" => "20",
        //                     "marginMode" => "crossed",
        //                     "enterPointSource" => "web",
        //                     "tradeSide" => "open",
        //                     "posMode" => "hedge_mode",
        //                     "orderType" => "limit",
        //                     "orderSource" => "normal",
        //                     "presetStopSurplusPrice" => "",
        //                     "presetStopLossPrice" => "",
        //                     "reduceOnly" => "NO",
        //                     "cTime" => "1700727885449",
        //                     "uTime" => "1700727944563"
        //                 ),
        //             ),
        //             "endId" => "1098397008323575809"
        //         }
        //     }
        //
        // swap and future $stop
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700792938359,
        //         "data" => {
        //             "entrustedList" => array(
        //                 array(
        //                     "planType" => "normal_plan",
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "0.001",
        //                     "orderId" => "1111491399869075457",
        //                     "clientOid" => "1111491399869075456",
        //                     "planStatus" => "cancelled",
        //                     "price" => "27000",
        //                     "feeDetail" => null,
        //                     "baseVolume" => "0",
        //                     "callbackRatio" => "",
        //                     "triggerPrice" => "24000",
        //                     "triggerType" => "mark_price",
        //                     "side" => "buy",
        //                     "posSide" => "long",
        //                     "marginCoin" => "USDT",
        //                     "marginMode" => "crossed",
        //                     "enterPointSource" => "API",
        //                     "tradeSide" => "open",
        //                     "posMode" => "hedge_mode",
        //                     "orderType" => "limit",
        //                     "stopSurplusTriggerPrice" => "",
        //                     "stopSurplusExecutePrice" => "",
        //                     "stopSurplusTriggerType" => "fill_price",
        //                     "stopLossTriggerPrice" => "",
        //                     "stopLossExecutePrice" => "",
        //                     "stopLossTriggerType" => "fill_price",
        //                     "cTime" => "1700726120917",
        //                     "uTime" => "1700727879652"
        //                 ),
        //             ),
        //             "endId" => "1098760007867502593"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        if ($marketType === 'spot') {
            if (($marginMode !== null) || $stop) {
                return $this->parse_orders($this->safe_value($data, 'orderList', array()), $market, $since, $limit);
            }
        } else {
            return $this->parse_orders($this->safe_value($data, 'entrustedList', array()), $market, $since, $limit);
        }
        if (gettype($response) === 'string') {
            $response = json_decode($response, $as_associative_array = true);
        }
        $orders = $this->safe_value($response, 'data', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_ledger(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * @see https://www.bitget.com/api-doc/spot/account/Get-Account-Bills
         * @see https://www.bitget.com/api-doc/contract/account/Get-Account-Bill
         * fetch the history of changes, actions done by the user or operations that altered balance of the user
         * @param {string} $code unified $currency $code, default is null
         * @param {int} [$since] timestamp in ms of the earliest ledger entry, default is null
         * @param {int} [$limit] max number of ledger entrys to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] end time in ms
         * @param {string} [$params->symbol] *contract only* unified $market $symbol
         * @param {string} [$params->productType] *contract only* 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ledger-structure ledger structure~
         */
        $this->load_markets();
        $symbol = $this->safe_string($params, 'symbol');
        $params = $this->omit($params, 'symbol');
        $market = null;
        if ($symbol !== null) {
            $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
            if ($sandboxMode) {
                $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
                $market = $this->market($sandboxSymbol);
            } else {
                $market = $this->market($symbol);
            }
        }
        $marketType = null;
        list($marketType, $params) = $this->handle_market_type_and_params('fetchLedger', $market, $params);
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchLedger', 'paginate');
        if ($paginate) {
            $cursorReceived = null;
            if ($marketType !== 'spot') {
                $cursorReceived = 'endId';
            }
            return $this->fetch_paginated_call_cursor('fetchLedger', $symbol, $since, $limit, $params, $cursorReceived, 'idLessThan');
        }
        $currency = null;
        $request = array();
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['coin'] = $currency['code'];
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = null;
        if ($marketType === 'spot') {
            $response = $this->privateSpotGetV2SpotAccountBills (array_merge($request, $params));
        } else {
            if ($symbol !== null) {
                $request['symbol'] = $market['id'];
            }
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->privateMixGetV2MixAccountBill (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700795836415,
        //         "data" => array(
        //             array(
        //                 "billId" => "1111506298997215233",
        //                 "coin" => "USDT",
        //                 "groupType" => "transfer",
        //                 "businessType" => "transfer_out",
        //                 "size" => "-11.64958799",
        //                 "balance" => "0.00000000",
        //                 "fees" => "0.00000000",
        //                 "cTime" => "1700729673028"
        //             ),
        //         )
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700795977890,
        //         "data" => {
        //             "bills" => array(
        //                 array(
        //                     "billId" => "1111499428100472833",
        //                     "symbol" => "",
        //                     "amount" => "-11.64958799",
        //                     "fee" => "0",
        //                     "feeByCoupon" => "",
        //                     "businessType" => "trans_to_exchange",
        //                     "coin" => "USDT",
        //                     "cTime" => "1700728034996"
        //                 ),
        //             ),
        //             "endId" => "1098396773329305606"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data');
        if (($marketType === 'swap') || ($marketType === 'future')) {
            $bills = $this->safe_value($data, 'bills', array());
            return $this->parse_ledger($bills, $currency, $since, $limit);
        }
        return $this->parse_ledger($data, $currency, $since, $limit);
    }

    public function parse_ledger_entry($item, ?array $currency = null) {
        //
        // spot
        //
        //     {
        //         "billId" => "1111506298997215233",
        //         "coin" => "USDT",
        //         "groupType" => "transfer",
        //         "businessType" => "transfer_out",
        //         "size" => "-11.64958799",
        //         "balance" => "0.00000000",
        //         "fees" => "0.00000000",
        //         "cTime" => "1700729673028"
        //     }
        //
        // swap and future
        //
        //     {
        //         "billId" => "1111499428100472833",
        //         "symbol" => "",
        //         "amount" => "-11.64958799",
        //         "fee" => "0",
        //         "feeByCoupon" => "",
        //         "businessType" => "trans_to_exchange",
        //         "coin" => "USDT",
        //         "cTime" => "1700728034996"
        //     }
        //
        $currencyId = $this->safe_string($item, 'coin');
        $code = $this->safe_currency_code($currencyId, $currency);
        $timestamp = $this->safe_integer($item, 'cTime');
        $after = $this->safe_number($item, 'balance');
        $fee = $this->safe_number_2($item, 'fees', 'fee');
        $amountRaw = $this->safe_string_2($item, 'size', 'amount');
        $amount = $this->parse_number(Precise::string_abs($amountRaw));
        $direction = 'in';
        if (mb_strpos($amountRaw, '-') !== false) {
            $direction = 'out';
        }
        return array(
            'info' => $item,
            'id' => $this->safe_string($item, 'billId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'direction' => $direction,
            'account' => null,
            'referenceId' => null,
            'referenceAccount' => null,
            'type' => $this->parse_ledger_type($this->safe_string($item, 'businessType')),
            'currency' => $code,
            'amount' => $amount,
            'before' => null,
            'after' => $after,
            'status' => null,
            'fee' => $fee,
        );
    }

    public function parse_ledger_type($type) {
        $types = array(
            'trans_to_cross' => 'transfer',
            'trans_from_cross' => 'transfer',
            'trans_to_exchange' => 'transfer',
            'trans_from_exchange' => 'transfer',
            'trans_to_isolated' => 'transfer',
            'trans_from_isolated' => 'transfer',
            'trans_to_contract' => 'transfer',
            'trans_from_contract' => 'transfer',
            'trans_to_otc' => 'transfer',
            'trans_from_otc' => 'transfer',
            'open_long' => 'trade',
            'close_long' => 'trade',
            'open_short' => 'trade',
            'close_short' => 'trade',
            'force_close_long' => 'trade',
            'force_close_short' => 'trade',
            'burst_long_loss_query' => 'trade',
            'burst_short_loss_query' => 'trade',
            'force_buy' => 'trade',
            'force_sell' => 'trade',
            'burst_buy' => 'trade',
            'burst_sell' => 'trade',
            'delivery_long' => 'settlement',
            'delivery_short' => 'settlement',
            'contract_settle_fee' => 'fee',
            'append_margin' => 'transaction',
            'adjust_down_lever_append_margin' => 'transaction',
            'reduce_margin' => 'transaction',
            'auto_append_margin' => 'transaction',
            'cash_gift_issue' => 'cashback',
            'cash_gift_recycle' => 'cashback',
            'bonus_issue' => 'rebate',
            'bonus_recycle' => 'rebate',
            'bonus_expired' => 'rebate',
            'transfer_in' => 'transfer',
            'transfer_out' => 'transfer',
            'deposit' => 'deposit',
            'withdraw' => 'withdrawal',
            'buy' => 'trade',
            'sell' => 'trade',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all trades made by the user
         * @see https://www.bitget.com/api-doc/spot/trade/Get-Fills
         * @see https://www.bitget.com/api-doc/contract/trade/Get-Order-Fills
         * @see https://www.bitget.com/api-doc/margin/cross/trade/Get-Cross-Order-Fills
         * @see https://www.bitget.com/api-doc/margin/isolated/trade/Get-Isolated-Transaction-Details
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch trades for
         * @param {int} [$limit] the maximum number of trades structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchMyTrades', $params);
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchMyTrades', 'paginate');
        if ($paginate) {
            $cursorReceived = null;
            if ($market['spot']) {
                if ($marginMode !== null) {
                    $cursorReceived = 'minId';
                }
            } else {
                $cursorReceived = 'endId';
            }
            return $this->fetch_paginated_call_cursor('fetchMyTrades', $symbol, $since, $limit, $params, $cursorReceived, 'idLessThan');
        }
        $response = null;
        $request = array(
            'symbol' => $market['id'],
        );
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($market['spot']) {
            if ($marginMode !== null) {
                if ($since === null) {
                    $request['startTime'] = $this->milliseconds() - 7776000000;
                }
                if ($marginMode === 'isolated') {
                    $response = $this->privateMarginGetV2MarginIsolatedFills (array_merge($request, $params));
                } elseif ($marginMode === 'cross') {
                    $response = $this->privateMarginGetV2MarginCrossedFills (array_merge($request, $params));
                }
            } else {
                $response = $this->privateSpotGetV2SpotTradeFills (array_merge($request, $params));
            }
        } else {
            $productType = null;
            list($productType, $params) = $this->handle_product_type_and_params($market, $params);
            $request['productType'] = $productType;
            $response = $this->privateMixGetV2MixOrderFills (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700802995406,
        //         "data" => array(
        //             {
        //                 "userId" => "7264631750",
        //                 "symbol" => "BTCUSDT",
        //                 "orderId" => "1098394344925597696",
        //                 "tradeId" => "1098394344974925824",
        //                 "orderType" => "market",
        //                 "side" => "sell",
        //                 "priceAvg" => "28467.68",
        //                 "size" => "0.0002",
        //                 "amount" => "5.693536",
        //                 "feeDetail" => array(
        //                     "deduction" => "no",
        //                     "feeCoin" => "USDT",
        //                     "totalDeductionFee" => "",
        //                     "totalFee" => "-0.005693536"
        //                 ),
        //                 "tradeScope" => "taker",
        //                 "cTime" => "1697603539699",
        //                 "uTime" => "1697603539754"
        //             }
        //         )
        //     }
        //
        // spot margin
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700803176399,
        //         "data" => {
        //             "fills" => array(
        //                 array(
        //                     "orderId" => "1099353730455318528",
        //                     "tradeId" => "1099353730627092481",
        //                     "orderType" => "market",
        //                     "side" => "sell",
        //                     "priceAvg" => "29543.7",
        //                     "size" => "0.0001",
        //                     "amount" => "2.95437",
        //                     "tradeScope" => "taker",
        //                     "feeDetail" => array(
        //                         "deduction" => "no",
        //                         "feeCoin" => "USDT",
        //                         "totalDeductionFee" => "0",
        //                         "totalFee" => "-0.00295437"
        //                     ),
        //                     "cTime" => "1697832275063",
        //                     "uTime" => "1697832275150"
        //                 ),
        //             ),
        //             "minId" => "1099353591699161118",
        //             "maxId" => "1099353730627092481"
        //         }
        //     }
        //
        // swap and future
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700803357487,
        //         "data" => {
        //             "fillList" => array(
        //                 {
        //                     "tradeId" => "1111468664328269825",
        //                     "symbol" => "BTCUSDT",
        //                     "orderId" => "1111468664264753162",
        //                     "price" => "37271.4",
        //                     "baseVolume" => "0.001",
        //                     "feeDetail" => array(
        //                         array(
        //                             "deduction" => "no",
        //                             "feeCoin" => "USDT",
        //                             "totalDeductionFee" => null,
        //                             "totalFee" => "-0.02236284"
        //                         }
        //                     ),
        //                     "side" => "buy",
        //                     "quoteVolume" => "37.2714",
        //                     "profit" => "-0.0007",
        //                     "enterPointSource" => "web",
        //                     "tradeSide" => "close",
        //                     "posMode" => "hedge_mode",
        //                     "tradeScope" => "taker",
        //                     "cTime" => "1700720700342"
        //                 ),
        //             ),
        //             "endId" => "1099351587643699201"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data');
        if (($market['swap']) || ($market['future'])) {
            $fillList = $this->safe_value($data, 'fillList', array());
            return $this->parse_trades($fillList, $market, $since, $limit);
        } elseif ($marginMode !== null) {
            $fills = $this->safe_value($data, 'fills', array());
            return $this->parse_trades($fills, $market, $since, $limit);
        }
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function fetch_position(string $symbol, $params = array ()) {
        /**
         * fetch $data on a single open contract trade position
         * @see https://www.bitget.com/api-doc/contract/position/get-single-position
         * @param {string} $symbol unified $market $symbol of the $market the position is held in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'marginCoin' => $market['settleId'],
            'productType' => $productType,
        );
        $response = $this->privateMixGetV2MixPositionSinglePosition (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700807531673,
        //         "data" => array(
        //             {
        //                 "marginCoin" => "USDT",
        //                 "symbol" => "BTCUSDT",
        //                 "holdSide" => "long",
        //                 "openDelegateSize" => "0",
        //                 "marginSize" => "3.73555",
        //                 "available" => "0.002",
        //                 "locked" => "0",
        //                 "total" => "0.002",
        //                 "leverage" => "20",
        //                 "achievedProfits" => "0",
        //                 "openPriceAvg" => "37355.5",
        //                 "marginMode" => "crossed",
        //                 "posMode" => "hedge_mode",
        //                 "unrealizedPL" => "0.007",
        //                 "liquidationPrice" => "31724.970702417",
        //                 "keepMarginRate" => "0.004",
        //                 "markPrice" => "37359",
        //                 "marginRatio" => "0.029599540355",
        //                 "cTime" => "1700807507275"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        return $this->parse_position($first, $market);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()): array {
        /**
         * fetch all open positions
         * @see https://www.bitget.com/api-doc/contract/position/get-all-$position
         * @see https://www.bitget.com/api-doc/contract/position/Get-History-Position
         * @param {string[]|null} $symbols list of unified $market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginCoin] the settle currency of the positions, needs to match the $productType
         * @param {string} [$params->productType] 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=$position-structure $position structure~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchPositions', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchPositions', null, null, null, $params, 'endId', 'idLessThan');
        }
        $fetchPositionsOptions = $this->safe_value($this->options, 'fetchPositions', array());
        $method = $this->safe_string($fetchPositionsOptions, 'method', 'privateMixGetV2MixPositionAllPosition');
        $market = null;
        if ($symbols !== null) {
            $first = $this->safe_string($symbols, 0);
            $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
            if ($sandboxMode) {
                $sandboxSymbol = $this->convert_symbol_for_sandbox($first);
                $market = $this->market($sandboxSymbol);
            } else {
                $market = $this->market($first);
            }
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'productType' => $productType,
        );
        $response = null;
        $isHistory = false;
        if ($method === 'privateMixGetV2MixPositionAllPosition') {
            $marginCoin = $this->safe_string($params, 'marginCoin', 'USDT');
            if ($symbols !== null) {
                $marginCoin = $market['settleId'];
            } elseif ($productType === 'USDT-FUTURES') {
                $marginCoin = 'USDT';
            } elseif ($productType === 'USDC-FUTURES') {
                $marginCoin = 'USDC';
            } elseif ($productType === 'SUSDT-FUTURES') {
                $marginCoin = 'SUSDT';
            } elseif ($productType === 'SUSDC-FUTURES') {
                $marginCoin = 'SUSDC';
            } elseif (($productType === 'SCOIN-FUTURES') || ($productType === 'COIN-FUTURES')) {
                if ($marginCoin === null) {
                    throw new ArgumentsRequired($this->id . ' fetchPositions() requires a $marginCoin parameter that matches the productType');
                }
            }
            $request['marginCoin'] = $marginCoin;
            $response = $this->privateMixGetV2MixPositionAllPosition (array_merge($request, $params));
        } else {
            $isHistory = true;
            if ($market !== null) {
                $request['symbol'] = $market['id'];
            }
            $response = $this->privateMixGetV2MixPositionHistoryPosition (array_merge($request, $params));
        }
        //
        // privateMixGetV2MixPositionAllPosition
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700807810221,
        //         "data" => array(
        //             {
        //                 "marginCoin" => "USDT",
        //                 "symbol" => "BTCUSDT",
        //                 "holdSide" => "long",
        //                 "openDelegateSize" => "0",
        //                 "marginSize" => "3.73555",
        //                 "available" => "0.002",
        //                 "locked" => "0",
        //                 "total" => "0.002",
        //                 "leverage" => "20",
        //                 "achievedProfits" => "0",
        //                 "openPriceAvg" => "37355.5",
        //                 "marginMode" => "crossed",
        //                 "posMode" => "hedge_mode",
        //                 "unrealizedPL" => "0.03",
        //                 "liquidationPrice" => "31725.023602417",
        //                 "keepMarginRate" => "0.004",
        //                 "markPrice" => "37370.5",
        //                 "marginRatio" => "0.029550120396",
        //                 "cTime" => "1700807507275"
        //             }
        //         )
        //     }
        //
        // privateMixGetV2MixPositionHistoryPosition
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700808051002,
        //         "data" => {
        //             "list" => array(
        //                 array(
        //                     "symbol" => "BTCUSDT",
        //                     "marginCoin" => "USDT",
        //                     "holdSide" => "long",
        //                     "openAvgPrice" => "37272.1",
        //                     "closeAvgPrice" => "37271.4",
        //                     "marginMode" => "crossed",
        //                     "openTotalPos" => "0.001",
        //                     "closeTotalPos" => "0.001",
        //                     "pnl" => "-0.0007",
        //                     "netProfit" => "-0.0454261",
        //                     "totalFunding" => "0",
        //                     "openFee" => "-0.02236326",
        //                     "closeFee" => "-0.02236284",
        //                     "utime" => "1700720700400",
        //                     "ctime" => "1700720651684"
        //                 ),
        //             ),
        //             "endId" => "1099351653866962944"
        //         }
        //     }
        //
        $position = array();
        if (!$isHistory) {
            $position = $this->safe_value($response, 'data', array());
        } else {
            $data = $this->safe_value($response, 'data', array());
            $position = $this->safe_value($data, 'list', array());
        }
        $result = array();
        for ($i = 0; $i < count($position); $i++) {
            $result[] = $this->parse_position($position[$i], $market);
        }
        $symbols = $this->market_symbols($symbols);
        return $this->filter_by_array_positions($result, 'symbol', $symbols, false);
    }

    public function parse_position($position, ?array $market = null) {
        //
        // fetchPosition
        //
        //     {
        //         "marginCoin" => "USDT",
        //         "symbol" => "BTCUSDT",
        //         "holdSide" => "long",
        //         "openDelegateSize" => "0",
        //         "marginSize" => "3.73555",
        //         "available" => "0.002",
        //         "locked" => "0",
        //         "total" => "0.002",
        //         "leverage" => "20",
        //         "achievedProfits" => "0",
        //         "openPriceAvg" => "37355.5",
        //         "marginMode" => "crossed",
        //         "posMode" => "hedge_mode",
        //         "unrealizedPL" => "0.007",
        //         "liquidationPrice" => "31724.970702417",
        //         "keepMarginRate" => "0.004",
        //         "markPrice" => "37359",
        //         "marginRatio" => "0.029599540355",
        //         "cTime" => "1700807507275"
        //     }
        //
        // fetchPositions => privateMixGetV2MixPositionAllPosition
        //
        //     {
        //         "marginCoin" => "USDT",
        //         "symbol" => "BTCUSDT",
        //         "holdSide" => "long",
        //         "openDelegateSize" => "0",
        //         "marginSize" => "3.73555",
        //         "available" => "0.002",
        //         "locked" => "0",
        //         "total" => "0.002",
        //         "leverage" => "20",
        //         "achievedProfits" => "0",
        //         "openPriceAvg" => "37355.5",
        //         "marginMode" => "crossed",
        //         "posMode" => "hedge_mode",
        //         "unrealizedPL" => "0.03",
        //         "liquidationPrice" => "31725.023602417",
        //         "keepMarginRate" => "0.004",
        //         "markPrice" => "37370.5",
        //         "marginRatio" => "0.029550120396",
        //         "cTime" => "1700807507275"
        //     }
        //
        // fetchPositions => privateMixGetV2MixPositionHistoryPosition
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "marginCoin" => "USDT",
        //         "holdSide" => "long",
        //         "openAvgPrice" => "37272.1",
        //         "closeAvgPrice" => "37271.4",
        //         "marginMode" => "crossed",
        //         "openTotalPos" => "0.001",
        //         "closeTotalPos" => "0.001",
        //         "pnl" => "-0.0007",
        //         "netProfit" => "-0.0454261",
        //         "totalFunding" => "0",
        //         "openFee" => "-0.02236326",
        //         "closeFee" => "-0.02236284",
        //         "utime" => "1700720700400",
        //         "ctime" => "1700720651684"
        //     }
        //
        // closeAllPositions
        //
        //     {
        //         "orderId" => "1120923953904893955",
        //         "clientOid" => "1120923953904893956"
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market, null, 'contract');
        $symbol = $market['symbol'];
        $timestamp = $this->safe_integer_2($position, 'cTime', 'ctime');
        $marginMode = $this->safe_string($position, 'marginMode');
        $collateral = null;
        $initialMargin = null;
        $unrealizedPnl = $this->safe_string($position, 'unrealizedPL');
        $rawCollateral = $this->safe_string($position, 'marginSize');
        if ($marginMode === 'isolated') {
            $collateral = Precise::string_add($rawCollateral, $unrealizedPnl);
        } elseif ($marginMode === 'crossed') {
            $marginMode = 'cross';
            $initialMargin = $rawCollateral;
        }
        $holdMode = $this->safe_string($position, 'posMode');
        $hedged = null;
        if ($holdMode === 'hedge_mode') {
            $hedged = true;
        } elseif ($holdMode === 'one_way_mode') {
            $hedged = false;
        }
        $side = $this->safe_string($position, 'holdSide');
        $leverage = $this->safe_string($position, 'leverage');
        $contractSizeNumber = $this->safe_value($market, 'contractSize');
        $contractSize = $this->number_to_string($contractSizeNumber);
        $baseAmount = $this->safe_string($position, 'total');
        $entryPrice = $this->safe_string_2($position, 'openPriceAvg', 'openAvgPrice');
        $maintenanceMarginPercentage = $this->safe_string($position, 'keepMarginRate');
        $openNotional = Precise::string_mul($entryPrice, $baseAmount);
        if ($initialMargin === null) {
            $initialMargin = Precise::string_div($openNotional, $leverage);
        }
        $contracts = $this->parse_number(Precise::string_div($baseAmount, $contractSize));
        if ($contracts === null) {
            $contracts = $this->safe_number($position, 'closeTotalPos');
        }
        $markPrice = $this->safe_string($position, 'markPrice');
        $notional = Precise::string_mul($baseAmount, $markPrice);
        $initialMarginPercentage = Precise::string_div($initialMargin, $notional);
        $liquidationPrice = $this->parse_number($this->omit_zero($this->safe_string($position, 'liquidationPrice')));
        $calcTakerFeeRate = '0.0006';
        $calcTakerFeeMult = '0.9994';
        if (($liquidationPrice === null) && ($marginMode === 'isolated') && Precise::string_gt($baseAmount, '0')) {
            $signedMargin = Precise::string_div($rawCollateral, $baseAmount);
            $signedMmp = $maintenanceMarginPercentage;
            if ($side === 'short') {
                $signedMargin = Precise::string_neg($signedMargin);
                $signedMmp = Precise::string_neg($signedMmp);
            }
            $mmrMinusOne = Precise::string_sub('1', $signedMmp);
            $numerator = Precise::string_sub($entryPrice, $signedMargin);
            if ($side === 'long') {
                $mmrMinusOne = Precise::string_mul($mmrMinusOne, $calcTakerFeeMult);
            } else {
                $numerator = Precise::string_mul($numerator, $calcTakerFeeMult);
            }
            $liquidationPrice = $this->parse_number(Precise::string_div($numerator, $mmrMinusOne));
        }
        $feeToClose = Precise::string_mul($notional, $calcTakerFeeRate);
        $maintenanceMargin = Precise::string_add(Precise::string_mul($maintenanceMarginPercentage, $notional), $feeToClose);
        $percentage = Precise::string_mul(Precise::string_div($unrealizedPnl, $initialMargin, 4), '100');
        return $this->safe_position(array(
            'info' => $position,
            'id' => $this->safe_string($position, 'orderId'),
            'symbol' => $symbol,
            'notional' => $this->parse_number($notional),
            'marginMode' => $marginMode,
            'liquidationPrice' => $liquidationPrice,
            'entryPrice' => $this->parse_number($entryPrice),
            'unrealizedPnl' => $this->parse_number($unrealizedPnl),
            'realizedPnl' => $this->safe_number($position, 'pnl'),
            'percentage' => $this->parse_number($percentage),
            'contracts' => $contracts,
            'contractSize' => $contractSizeNumber,
            'markPrice' => $this->parse_number($markPrice),
            'lastPrice' => $this->safe_number($position, 'closeAvgPrice'),
            'side' => $side,
            'hedged' => $hedged,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastUpdateTimestamp' => $this->safe_integer($position, 'utime'),
            'maintenanceMargin' => $this->parse_number($maintenanceMargin),
            'maintenanceMarginPercentage' => $this->parse_number($maintenanceMarginPercentage),
            'collateral' => $this->parse_number($collateral),
            'initialMargin' => $this->parse_number($initialMargin),
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentage),
            'leverage' => $this->parse_number($leverage),
            'marginRatio' => $this->safe_number($position, 'marginRatio'),
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        ));
    }

    public function fetch_funding_rate_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetches historical funding rate prices
         * @see https://www.bitget.com/api-doc/contract/market/Get-History-Funding-Rate
         * @param {string} $symbol unified $symbol of the $market to fetch the funding rate history for
         * @param {int} [$since] $timestamp in ms of the earliest funding rate to fetch
         * @param {int} [$limit] the maximum amount of funding rate structures to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-rate-history-structure funding rate structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingRateHistory() requires a $symbol argument');
        }
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchFundingRateHistory', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_incremental('fetchFundingRateHistory', $symbol, $since, $limit, $params, 'pageNo', 100);
        }
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'productType' => $productType,
            // 'pageSize' => $limit, // default 20
            // 'pageNo' => 1,
        );
        if ($limit !== null) {
            $request['pageSize'] = $limit;
        }
        $response = $this->publicMixGetV2MixMarketHistoryFundRate (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1652406728393,
        //         "data" => array(
        //             array(
        //                 "symbol" => "BTCUSDT",
        //                 "fundingRate" => "-0.0003",
        //                 "fundingTime" => "1652396400000"
        //             ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $rates = array();
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $marketId = $this->safe_string($entry, 'symbol');
            $symbolInner = $this->safe_symbol($marketId, $market);
            $timestamp = $this->safe_integer($entry, 'fundingTime');
            $rates[] = array(
                'info' => $entry,
                'symbol' => $symbolInner,
                'fundingRate' => $this->safe_number($entry, 'fundingRate'),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
            );
        }
        $sorted = $this->sort_by($rates, 'timestamp');
        return $this->filter_by_symbol_since_limit($sorted, $market['symbol'], $since, $limit);
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        /**
         * fetch the current funding rate
         * @see https://www.bitget.com/api-doc/contract/market/Get-Current-Funding-Rate
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'productType' => $productType,
        );
        $response = $this->publicMixGetV2MixMarketCurrentFundRate (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700811542124,
        //         "data" => array(
        //             {
        //                 "symbol" => "BTCUSDT",
        //                 "fundingRate" => "0.000106"
        //             }
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_funding_rate($data[0], $market);
    }

    public function parse_funding_rate($contract, ?array $market = null) {
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "fundingRate" => "-0.000182"
        //     }
        //
        $marketId = $this->safe_string($contract, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, 'swap');
        return array(
            'info' => $contract,
            'symbol' => $symbol,
            'markPrice' => null,
            'indexPrice' => null,
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $this->safe_number($contract, 'fundingRate'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => null,
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => null,
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_funding_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch the funding history
         * @see https://www.bitget.com/api-doc/contract/account/Get-Account-Bill
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the starting timestamp in milliseconds
         * @param {int} [$limit] the number of entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch funding history for
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=funding-history-structure funding history structures~
         */
        $this->load_markets();
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingHistory() requires a $symbol argument');
        }
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchFundingHistory', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchFundingHistory', $symbol, $since, $limit, $params, 'endId', 'idLessThan');
        }
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingHistory() supports swap contracts only');
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'marginCoin' => $market['settleId'],
            'businessType' => 'contract_settle_fee',
            'productType' => $productType,
        );
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = $this->privateMixGetV2MixAccountBill (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700795977890,
        //         "data" => {
        //             "bills" => array(
        //                 array(
        //                     "billId" => "1111499428100472833",
        //                     "symbol" => "BTCUSDT",
        //                     "amount" => "-0.004992",
        //                     "fee" => "0",
        //                     "feeByCoupon" => "",
        //                     "businessType" => "contract_settle_fee",
        //                     "coin" => "USDT",
        //                     "cTime" => "1700728034996"
        //                 ),
        //             ),
        //             "endId" => "1098396773329305606"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = $this->safe_value($data, 'bills', array());
        return $this->parse_funding_histories($result, $market, $since, $limit);
    }

    public function parse_funding_history($contract, ?array $market = null) {
        //
        //     {
        //         "billId" => "1111499428100472833",
        //         "symbol" => "BTCUSDT",
        //         "amount" => "-0.004992",
        //         "fee" => "0",
        //         "feeByCoupon" => "",
        //         "businessType" => "contract_settle_fee",
        //         "coin" => "USDT",
        //         "cTime" => "1700728034996"
        //     }
        //
        $marketId = $this->safe_string($contract, 'symbol');
        $currencyId = $this->safe_string($contract, 'coin');
        $timestamp = $this->safe_integer($contract, 'cTime');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol($marketId, $market, null, 'swap'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'code' => $this->safe_currency_code($currencyId),
            'amount' => $this->safe_number($contract, 'amount'),
            'id' => $this->safe_string($contract, 'billId'),
        );
    }

    public function parse_funding_histories($contracts, $market = null, ?int $since = null, ?int $limit = null): array {
        $result = array();
        for ($i = 0; $i < count($contracts); $i++) {
            $contract = $contracts[$i];
            $business = $this->safe_string($contract, 'businessType');
            if ($business !== 'contract_settle_fee') {
                continue;
            }
            $result[] = $this->parse_funding_history($contract, $market);
        }
        $sorted = $this->sort_by($result, 'timestamp');
        return $this->filter_by_since_limit($sorted, $since, $limit);
    }

    public function modify_margin_helper(string $symbol, $amount, $type, $params = array ()) {
        $this->load_markets();
        $holdSide = $this->safe_string($params, 'holdSide');
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'marginCoin' => $market['settleId'],
            'amount' => $this->amount_to_precision($symbol, $amount), // positive value for adding margin, negative for reducing
            'holdSide' => $holdSide, // long or short
            'productType' => $productType,
        );
        $params = $this->omit($params, 'holdSide');
        $response = $this->privateMixPostV2MixAccountSetMargin (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700813444618,
        //         "data" => ""
        //     }
        //
        return array_merge($this->parse_margin_modification($response, $market), array(
            'amount' => $this->parse_number($amount),
            'type' => $type,
        ));
    }

    public function parse_margin_modification($data, ?array $market = null) {
        $errorCode = $this->safe_string($data, 'code');
        $status = ($errorCode === '00000') ? 'ok' : 'failed';
        return array(
            'info' => $data,
            'type' => null,
            'amount' => null,
            'code' => $market['settle'],
            'symbol' => $market['symbol'],
            'status' => $status,
        );
    }

    public function reduce_margin(string $symbol, $amount, $params = array ()) {
        /**
         * remove margin from a position
         * @see https://www.bitget.com/api-doc/contract/account/Change-Margin
         * @param {string} $symbol unified market $symbol
         * @param {float} $amount the $amount of margin to remove
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=reduce-margin-structure margin structure~
         */
        if ($amount > 0) {
            throw new BadRequest($this->id . ' reduceMargin() $amount parameter must be a negative value');
        }
        $holdSide = $this->safe_string($params, 'holdSide');
        if ($holdSide === null) {
            throw new ArgumentsRequired($this->id . ' reduceMargin() requires a $holdSide parameter, either long or short');
        }
        return $this->modify_margin_helper($symbol, $amount, 'reduce', $params);
    }

    public function add_margin(string $symbol, $amount, $params = array ()) {
        /**
         * add margin
         * @see https://www.bitget.com/api-doc/contract/account/Change-Margin
         * @param {string} $symbol unified market $symbol
         * @param {float} $amount the $amount of margin to add
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=add-margin-structure margin structure~
         */
        $holdSide = $this->safe_string($params, 'holdSide');
        if ($holdSide === null) {
            throw new ArgumentsRequired($this->id . ' addMargin() requires a $holdSide parameter, either long or short');
        }
        return $this->modify_margin_helper($symbol, $amount, 'add', $params);
    }

    public function fetch_leverage(string $symbol, $params = array ()) {
        /**
         * fetch the set leverage for a $market
         * @see https://www.bitget.com/api-doc/contract/account/Get-Single-Account
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=leverage-structure leverage structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'marginCoin' => $market['settleId'],
            'productType' => $productType,
        );
        $response = $this->privateMixGetV2MixAccountAccount (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700625127294,
        //         "data" => array(
        //             {
        //                 "marginCoin" => "USDT",
        //                 "locked" => "0",
        //                 "available" => "0",
        //                 "crossedMaxAvailable" => "0",
        //                 "isolatedMaxAvailable" => "0",
        //                 "maxTransferOut" => "0",
        //                 "accountEquity" => "0",
        //                 "usdtEquity" => "0.000000005166",
        //                 "btcEquity" => "0",
        //                 "crossedRiskRate" => "0",
        //                 "unrealizedPL" => "0",
        //                 "coupon" => "0",
        //                 "crossedUnrealizedPL" => null,
        //                 "isolatedUnrealizedPL" => null
        //             }
        //         )
        //     }
        //
        return $response;
    }

    public function set_leverage($leverage, ?string $symbol = null, $params = array ()) {
        /**
         * set the level of $leverage for a $market
         * @see https://www.bitget.com/api-doc/contract/account/Change-Leverage
         * @param {float} $leverage the rate of $leverage
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->holdSide] *isolated only* position direction, 'long' or 'short'
         * @return {array} $response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'marginCoin' => $market['settleId'],
            'leverage' => $leverage,
            'productType' => $productType,
            // 'holdSide' => 'long',
        );
        $response = $this->privateMixPostV2MixAccountSetLeverage (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700864711517,
        //         "data" => {
        //             "symbol" => "BTCUSDT",
        //             "marginCoin" => "USDT",
        //             "longLeverage" => "25",
        //             "shortLeverage" => "25",
        //             "crossMarginLeverage" => "25",
        //             "marginMode" => "crossed"
        //         }
        //     }
        //
        return $response;
    }

    public function set_margin_mode($marginMode, ?string $symbol = null, $params = array ()) {
        /**
         * set margin mode to 'cross' or 'isolated'
         * @see https://www.bitget.com/api-doc/contract/account/Change-Margin-Mode
         * @param {string} $marginMode 'cross' or 'isolated'
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} $response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
        }
        $marginMode = strtolower($marginMode);
        if ($marginMode === 'cross') {
            $marginMode = 'crossed';
        }
        if (($marginMode !== 'isolated') && ($marginMode !== 'crossed')) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() $marginMode must be either isolated or crossed (cross)');
        }
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'marginCoin' => $market['settleId'],
            'marginMode' => $marginMode,
            'productType' => $productType,
        );
        $response = $this->privateMixPostV2MixAccountSetMarginMode (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700865205552,
        //         "data" => {
        //             "symbol" => "BTCUSDT",
        //             "marginCoin" => "USDT",
        //             "longLeverage" => "20",
        //             "shortLeverage" => "3",
        //             "marginMode" => "isolated"
        //         }
        //     }
        //
        return $response;
    }

    public function set_position_mode($hedged, ?string $symbol = null, $params = array ()) {
        /**
         * set $hedged to true or false for a $market
         * @see https://www.bitget.com/api-doc/contract/account/Change-Hold-Mode
         * @param {bool} $hedged set to true to use dualSidePosition
         * @param {string} $symbol not used by bitget setPositionMode ()
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->productType] required if $symbol is null => 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @return {array} $response from the exchange
         */
        $this->load_markets();
        $posMode = $hedged ? 'hedge_mode' : 'one_way_mode';
        $market = null;
        if ($symbol !== null) {
            $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
            if ($sandboxMode) {
                $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
                $market = $this->market($sandboxSymbol);
            } else {
                $market = $this->market($symbol);
            }
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'posMode' => $posMode,
            'productType' => $productType,
        );
        $response = $this->privateMixPostV2MixAccountSetPositionMode (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700865608009,
        //         "data" => {
        //             "posMode" => "hedge_mode"
        //         }
        //     }
        //
        return $response;
    }

    public function fetch_open_interest(string $symbol, $params = array ()) {
        /**
         * retrieves the open interest of a contract trading pair
         * @see https://www.bitget.com/api-doc/contract/market/Get-Open-Interest
         * @param {string} $symbol unified CCXT $market $symbol
         * @param {array} [$params] exchange specific parameters
         * @return {array} an open interest structurearray(@link https://docs.ccxt.com/#/?id=open-interest-structure)
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        if (!$market['contract']) {
            throw new BadRequest($this->id . ' fetchOpenInterest() supports contract markets only');
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'productType' => $productType,
        );
        $response = $this->publicMixGetV2MixMarketOpenInterest (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700866041022,
        //         "data" => {
        //             "openInterestList" => array(
        //                 {
        //                     "symbol" => "BTCUSDT",
        //                     "size" => "52234.134"
        //                 }
        //             ),
        //             "ts" => "1700866041023"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_open_interest($data, $market);
    }

    public function parse_open_interest($interest, ?array $market = null) {
        //
        //     {
        //         "openInterestList" => array(
        //             {
        //                 "symbol" => "BTCUSDT",
        //                 "size" => "52234.134"
        //             }
        //         ),
        //         "ts" => "1700866041023"
        //     }
        //
        $data = $this->safe_value($interest, 'openInterestList', array());
        $timestamp = $this->safe_integer($interest, 'ts');
        $marketId = $this->safe_string($data[0], 'symbol');
        return $this->safe_open_interest(array(
            'symbol' => $this->safe_symbol($marketId, $market, null, 'contract'),
            'openInterestAmount' => $this->safe_number($data[0], 'size'),
            'openInterestValue' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $interest,
        ), $market);
    }

    public function fetch_transfers(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch a history of internal transfers made on an account
         * @see https://www.bitget.com/api-doc/spot/account/Get-Account-TransferRecords
         * @param {string} $code unified $currency $code of the $currency transferred
         * @param {int} [$since] the earliest time in ms to fetch transfers for
         * @param {int} [$limit] the maximum number of transfers structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch entries for
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structures~
         */
        if ($code === null) {
            throw new ArgumentsRequired($this->id . ' fetchTransfers() requires a $code argument');
        }
        $this->load_markets();
        $type = null;
        list($type, $params) = $this->handle_market_type_and_params('fetchTransfers', null, $params);
        $fromAccount = $this->safe_string($params, 'fromAccount', $type);
        $params = $this->omit($params, 'fromAccount');
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $type = $this->safe_string($accountsByType, $fromAccount);
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['code'],
            'fromType' => $type,
        );
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        $response = $this->privateSpotGetV2SpotAccountTransferRecords (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700873854651,
        //         "data" => array(
        //             array(
        //                 "coin" => "USDT",
        //                 "status" => "Successful",
        //                 "toType" => "crossed_margin",
        //                 "toSymbol" => "",
        //                 "fromType" => "spot",
        //                 "fromSymbol" => "",
        //                 "size" => "11.64958799",
        //                 "ts" => "1700729673028",
        //                 "clientOid" => "1111506298504744960",
        //                 "transferId" => "24930940"
        //             ),
        //         )
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_transfers($data, $currency, $since, $limit);
    }

    public function transfer(string $code, $amount, $fromAccount, $toAccount, $params = array ()) {
        /**
         * transfer $currency internally between wallets on the same account
         * @see https://www.bitget.com/api-doc/spot/account/Wallet-Transfer
         * @param {string} $code unified $currency $code
         * @param {float} $amount amount to transfer
         * @param {string} $fromAccount account to transfer from
         * @param {string} $toAccount account to transfer to
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->symbol] unified CCXT $market $symbol, required when transferring to or from an account type that is a leveraged position-by-position account
         * @param {string} [$params->clientOid] custom id
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $accountsByType = $this->safe_value($this->options, 'accountsByType', array());
        $fromType = $this->safe_string($accountsByType, $fromAccount);
        $toType = $this->safe_string($accountsByType, $toAccount);
        $request = array(
            'fromType' => $fromType,
            'toType' => $toType,
            'amount' => $amount,
            'coin' => $currency['code'],
        );
        $symbol = $this->safe_string($params, 'symbol');
        $params = $this->omit($params, 'symbol');
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $response = $this->privateSpotPostV2SpotWalletTransfer (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700874302021,
        //         "data" => {
        //             "transferId" => "1112112916581847040",
        //             "clientOrderId" => null
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $data['ts'] = $this->safe_integer($response, 'requestTime');
        return $this->parse_transfer($data, $currency);
    }

    public function parse_transfer($transfer, ?array $currency = null) {
        //
        // $transfer
        //
        //     {
        //         "transferId" => "1112112916581847040",
        //         "clientOrderId" => null,
        //         "ts" => 1700874302021
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         "coin" => "USDT",
        //         "status" => "Successful",
        //         "toType" => "crossed_margin",
        //         "toSymbol" => "",
        //         "fromType" => "spot",
        //         "fromSymbol" => "",
        //         "size" => "11.64958799",
        //         "ts" => "1700729673028",
        //         "clientOid" => "1111506298504744960",
        //         "transferId" => "24930940"
        //     }
        //
        $timestamp = $this->safe_integer($transfer, 'ts');
        $status = $this->safe_string_lower($transfer, 'status');
        $currencyId = $this->safe_string($transfer, 'coin');
        $fromAccountRaw = $this->safe_string($transfer, 'fromType');
        $accountsById = $this->safe_value($this->options, 'accountsById', array());
        $fromAccount = $this->safe_string($accountsById, $fromAccountRaw, $fromAccountRaw);
        $toAccountRaw = $this->safe_string($transfer, 'toType');
        $toAccount = $this->safe_string($accountsById, $toAccountRaw, $toAccountRaw);
        return array(
            'info' => $transfer,
            'id' => $this->safe_string($transfer, 'transferId'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'amount' => $this->safe_number($transfer, 'size'),
            'fromAccount' => $fromAccount,
            'toAccount' => $toAccount,
            'status' => $this->parse_transfer_status($status),
        );
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            'successful' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_deposit_withdraw_fee($fee, ?array $currency = null) {
        //
        //     {
        //         "chains" => array(
        //             array(
        //                 "browserUrl" => "https://blockchair.com/bitcoin/transaction/",
        //                 "chain" => "BTC",
        //                 "depositConfirm" => "1",
        //                 "extraWithdrawFee" => "0",
        //                 "minDepositAmount" => "0.0001",
        //                 "minWithdrawAmount" => "0.005",
        //                 "needTag" => "false",
        //                 "rechargeable" => "true",
        //                 "withdrawConfirm" => "1",
        //                 "withdrawFee" => "0.0004",
        //                 "withdrawable" => "true"
        //             ),
        //         ),
        //         "coin" => "BTC",
        //         "coinId" => "1",
        //         "transfer" => "true""
        //     }
        //
        $chains = $this->safe_value($fee, 'chains', array());
        $chainsLength = count($chains);
        $result = array(
            'info' => $fee,
            'withdraw' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'deposit' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'networks' => array(),
        );
        for ($i = 0; $i < $chainsLength; $i++) {
            $chain = $chains[$i];
            $networkId = $this->safe_string($chain, 'chain');
            $currencyCode = $this->safe_string($currency, 'code');
            $networkCode = $this->network_id_to_code($networkId, $currencyCode);
            $result['networks'][$networkCode] = array(
                'deposit' => array( 'fee' => null, 'percentage' => null ),
                'withdraw' => array( 'fee' => $this->safe_number($chain, 'withdrawFee'), 'percentage' => false ),
            );
            if ($chainsLength === 1) {
                $result['withdraw']['fee'] = $this->safe_number($chain, 'withdrawFee');
                $result['withdraw']['percentage'] = false;
            }
        }
        return $result;
    }

    public function fetch_deposit_withdraw_fees(?array $codes = null, $params = array ()) {
        /**
         * fetch deposit and withdraw fees
         * @see https://www.bitget.com/api-doc/spot/market/Get-Coin-List
         * @param {string[]|null} $codes list of unified currency $codes
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=fee-structure fee structures~
         */
        $this->load_markets();
        $response = $this->publicSpotGetV2SpotPublicCoins ($params);
        //
        //     {
        //         "code" => "00000",
        //         "data" => array(
        //             {
        //                 "chains" => array(
        //                     array(
        //                         "browserUrl" => "https://blockchair.com/bitcoin/transaction/",
        //                         "chain" => "BTC",
        //                         "depositConfirm" => "1",
        //                         "extraWithdrawFee" => "0",
        //                         "minDepositAmount" => "0.0001",
        //                         "minWithdrawAmount" => "0.005",
        //                         "needTag" => "false",
        //                         "rechargeable" => "true",
        //                         "withdrawConfirm" => "1",
        //                         "withdrawFee" => "0.0004",
        //                         "withdrawable" => "true"
        //                     ),
        //                 ),
        //                 "coin" => "BTC",
        //                 "coinId" => "1",
        //                 "transfer" => "true""
        //             }
        //         ),
        //         "msg" => "success",
        //         "requestTime" => "1700120731773"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_deposit_withdraw_fees($data, $codes, 'coin');
    }

    public function borrow_cross_margin(string $code, $amount, $params = array ()) {
        /**
         * create a loan to borrow margin
         * @see https://www.bitget.com/api-doc/margin/cross/account/Cross-Borrow
         * @param {string} $code unified $currency $code of the $currency to borrow
         * @param {string} $amount the $amount to borrow
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['code'],
            'borrowAmount' => $this->currency_to_precision($code, $amount),
        );
        $response = $this->privateMarginPostV2MarginCrossedAccountBorrow (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700876470931,
        //         "data" => {
        //             "loanId" => "1112122013642272769",
        //             "coin" => "USDT",
        //             "borrowAmount" => "4"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_margin_loan($data, $currency);
    }

    public function borrow_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        /**
         * create a loan to borrow margin
         * @see https://www.bitget.com/api-doc/margin/isolated/account/Isolated-Borrow
         * @param {string} $symbol unified $market $symbol
         * @param {string} $code unified $currency $code of the $currency to borrow
         * @param {string} $amount the $amount to borrow
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $market = $this->market($symbol);
        $request = array(
            'coin' => $currency['code'],
            'borrowAmount' => $this->currency_to_precision($code, $amount),
            'symbol' => $market['id'],
        );
        $response = $this->privateMarginPostV2MarginIsolatedAccountBorrow (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700877255605,
        //         "data" => {
        //             "loanId" => "1112125304879067137",
        //             "symbol" => "BTCUSDT",
        //             "coin" => "USDT",
        //             "borrowAmount" => "4"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_margin_loan($data, $currency, $market);
    }

    public function repay_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        /**
         * repay borrowed margin and interest
         * @see https://www.bitget.com/api-doc/margin/isolated/account/Isolated-Repay
         * @param {string} $symbol unified $market $symbol
         * @param {string} $code unified $currency $code of the $currency to repay
         * @param {string} $amount the $amount to repay
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $market = $this->market($symbol);
        $request = array(
            'coin' => $currency['code'],
            'repayAmount' => $this->currency_to_precision($code, $amount),
            'symbol' => $market['id'],
        );
        $response = $this->privateMarginPostV2MarginIsolatedAccountRepay (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700877518012,
        //         "data" => {
        //             "remainDebtAmount" => "0",
        //             "repayId" => "1112126405439270912",
        //             "symbol" => "BTCUSDT",
        //             "coin" => "USDT",
        //             "repayAmount" => "8.000137"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_margin_loan($data, $currency, $market);
    }

    public function repay_cross_margin(string $code, $amount, $params = array ()) {
        /**
         * repay borrowed margin and interest
         * @see https://www.bitget.com/api-doc/margin/cross/account/Cross-Repay
         * @param {string} $code unified $currency $code of the $currency to repay
         * @param {string} $amount the $amount to repay
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['code'],
            'repayAmount' => $this->currency_to_precision($code, $amount),
        );
        $response = $this->privateMarginPostV2MarginCrossedAccountRepay (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700876704885,
        //         "data" => {
        //             "remainDebtAmount" => "0",
        //             "repayId" => "1112122994945830912",
        //             "coin" => "USDT",
        //             "repayAmount" => "4.00006834"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_margin_loan($data, $currency);
    }

    public function parse_margin_loan($info, ?array $currency = null, ?array $market = null) {
        //
        // isolated => borrowMargin
        //
        //     {
        //         "loanId" => "1112125304879067137",
        //         "symbol" => "BTCUSDT",
        //         "coin" => "USDT",
        //         "borrowAmount" => "4"
        //     }
        //
        // cross => borrowMargin
        //
        //     {
        //         "loanId" => "1112122013642272769",
        //         "coin" => "USDT",
        //         "borrowAmount" => "4"
        //     }
        //
        // isolated => repayMargin
        //
        //     {
        //         "remainDebtAmount" => "0",
        //         "repayId" => "1112126405439270912",
        //         "symbol" => "BTCUSDT",
        //         "coin" => "USDT",
        //         "repayAmount" => "8.000137"
        //     }
        //
        // cross => repayMargin
        //
        //     {
        //         "remainDebtAmount" => "0",
        //         "repayId" => "1112122994945830912",
        //         "coin" => "USDT",
        //         "repayAmount" => "4.00006834"
        //     }
        //
        $currencyId = $this->safe_string($info, 'coin');
        $marketId = $this->safe_string($info, 'symbol');
        $symbol = null;
        if ($marketId !== null) {
            $symbol = $this->safe_symbol($marketId, $market, null, 'spot');
        }
        return array(
            'id' => $this->safe_string_2($info, 'loanId', 'repayId'),
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'amount' => $this->safe_number_2($info, 'borrowAmount', 'repayAmount'),
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_my_liquidations(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * retrieves the users liquidated positions
         * @see https://www.bitget.com/api-doc/margin/cross/record/Get-Cross-Liquidation-Records
         * @see https://www.bitget.com/api-doc/margin/isolated/record/Get-Isolated-Liquidation-Records
         * @param {string} [$symbol] unified CCXT $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch $liquidations for
         * @param {int} [$limit] the maximum number of liquidation structures to retrieve
         * @param {array} [$params] exchange specific parameters for the bitget api endpoint
         * @param {int} [$params->until] timestamp in ms of the latest liquidation
         * @param {string} [$params->marginMode] 'cross' or 'isolated' default value is 'cross'
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array} an array of ~@link https://docs.ccxt.com/#/?id=liquidation-structure liquidation structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchMyLiquidations', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchMyLiquidations', $symbol, $since, $limit, $params, 'minId', 'idLessThan');
        }
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $type = null;
        list($type, $params) = $this->handle_market_type_and_params('fetchMyLiquidations', $market, $params);
        if ($type !== 'spot') {
            throw new NotSupported($this->id . ' fetchMyLiquidations() supports spot margin markets only');
        }
        $request = array();
        list($request, $params) = $this->handle_until_option('endTime', $request, $params);
        if ($since !== null) {
            $request['startTime'] = $since;
        } else {
            $request['startTime'] = $this->milliseconds() - 7776000000;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = null;
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchMyLiquidations', $params, 'cross');
        if ($marginMode === 'isolated') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyLiquidations() requires a $symbol argument');
            }
            $request['symbol'] = $market['id'];
            $response = $this->privateMarginGetV2MarginIsolatedLiquidationHistory (array_merge($request, $params));
        } elseif ($marginMode === 'cross') {
            $response = $this->privateMarginGetV2MarginCrossedLiquidationHistory (array_merge($request, $params));
        }
        //
        // isolated
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1698114119193,
        //         "data" => {
        //             "resultList" => array(
        //                 {
        //                     "liqId" => "123",
        //                     "symbol" => "BTCUSDT",
        //                     "liqStartTime" => "1653453245342",
        //                     "liqEndTime" => "16312423423432",
        //                     "liqRiskRatio" => "1.01",
        //                     "totalAssets" => "1242.34",
        //                     "totalDebt" => "1100",
        //                     "liqFee" => "1.2",
        //                     "uTime" => "1668134458717",
        //                     "cTime" => "1653453245342"
        //                 }
        //             ),
        //             "maxId" => "0",
        //             "minId" => "0"
        //         }
        //     }
        //
        // cross
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1698114119193,
        //         "data" => {
        //             "resultList" => array(
        //                 {
        //                     "liqId" => "123",
        //                     "liqStartTime" => "1653453245342",
        //                     "liqEndTime" => "16312423423432",
        //                     "liqRiskRatio" => "1.01",
        //                     "totalAssets" => "1242.34",
        //                     "totalDebt" => "1100",
        //                     "LiqFee" => "1.2",
        //                     "uTime" => "1668134458717",
        //                     "cTime" => "1653453245342"
        //                 }
        //             ),
        //             "maxId" => "0",
        //             "minId" => "0"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $liquidations = $this->safe_value($data, 'resultList', array());
        return $this->parse_liquidations($liquidations, $market, $since, $limit);
    }

    public function parse_liquidation($liquidation, ?array $market = null) {
        //
        // isolated
        //
        //     {
        //         "liqId" => "123",
        //         "symbol" => "BTCUSDT",
        //         "liqStartTime" => "1653453245342",
        //         "liqEndTime" => "16312423423432",
        //         "liqRiskRatio" => "1.01",
        //         "totalAssets" => "1242.34",
        //         "totalDebt" => "1100",
        //         "liqFee" => "1.2",
        //         "uTime" => "1692690126000"
        //         "cTime" => "1653453245342"
        //     }
        //
        // cross
        //
        //     {
        //         "liqId" => "123",
        //         "liqStartTime" => "1653453245342",
        //         "liqEndTime" => "16312423423432",
        //         "liqRiskRatio" => "1.01",
        //         "totalAssets" => "1242.34",
        //         "totalDebt" => "1100",
        //         "LiqFee" => "1.2",
        //         "uTime" => "1692690126000"
        //         "cTime" => "1653453245342"
        //     }
        //
        $marketId = $this->safe_string($liquidation, 'symbol');
        $timestamp = $this->safe_integer($liquidation, 'liqEndTime');
        $liquidationFee = $this->safe_string_2($liquidation, 'LiqFee', 'liqFee');
        $totalDebt = $this->safe_string($liquidation, 'totalDebt');
        $quoteValueString = Precise::string_add($liquidationFee, $totalDebt);
        return $this->safe_liquidation(array(
            'info' => $liquidation,
            'symbol' => $this->safe_symbol($marketId, $market),
            'contracts' => null,
            'contractSize' => null,
            'price' => null,
            'baseValue' => null,
            'quoteValue' => $this->parse_number($quoteValueString),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        ));
    }

    public function fetch_isolated_borrow_rate(string $symbol, $params = array ()) {
        /**
         * fetch the rate of interest to borrow a currency for margin trading
         * @see https://www.bitget.com/api-doc/margin/isolated/account/Isolated-Margin-Interest-Rate-And-Max-Borrowable-Amount
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=isolated-borrow-rate-structure isolated borrow rate structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateMarginGetV2MarginIsolatedInterestRateAndLimit (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700878692567,
        //         "data" => array(
        //             {
        //                 "symbol" => "BTCUSDT",
        //                 "leverage" => "10",
        //                 "baseCoin" => "BTC",
        //                 "baseTransferable" => true,
        //                 "baseBorrowable" => true,
        //                 "baseDailyInterestRate" => "0.00007",
        //                 "baseAnnuallyInterestRate" => "0.02555",
        //                 "baseMaxBorrowableAmount" => "27",
        //                 "baseVipList" => array(
        //                     array("level":"0","dailyInterestRate":"0.00007","limit":"27","annuallyInterestRate":"0.02555","discountRate":"1"),
        //                     array("level":"1","dailyInterestRate":"0.0000679","limit":"27.81","annuallyInterestRate":"0.0247835","discountRate":"0.97"),
        //                     array("level":"2","dailyInterestRate":"0.0000644","limit":"29.16","annuallyInterestRate":"0.023506","discountRate":"0.92"),
        //                     array("level":"3","dailyInterestRate":"0.0000602","limit":"31.32","annuallyInterestRate":"0.021973","discountRate":"0.86"),
        //                     array("level":"4","dailyInterestRate":"0.0000525","limit":"35.91","annuallyInterestRate":"0.0191625","discountRate":"0.75"),
        //                     array("level":"5","dailyInterestRate":"0.000042","limit":"44.82","annuallyInterestRate":"0.01533","discountRate":"0.6")
        //                 ),
        //                 "quoteCoin" => "USDT",
        //                 "quoteTransferable" => true,
        //                 "quoteBorrowable" => true,
        //                 "quoteDailyInterestRate" => "0.00041095",
        //                 "quoteAnnuallyInterestRate" => "0.14999675",
        //                 "quoteMaxBorrowableAmount" => "300000",
        //                 "quoteList" => array(
        //                     array("level":"0","dailyInterestRate":"0.00041095","limit":"300000","annuallyInterestRate":"0.14999675","discountRate":"1"),
        //                     array("level":"1","dailyInterestRate":"0.00039863","limit":"309000","annuallyInterestRate":"0.14549995","discountRate":"0.97"),
        //                     array("level":"2","dailyInterestRate":"0.00037808","limit":"324000","annuallyInterestRate":"0.1379992","discountRate":"0.92"),
        //                     array("level":"3","dailyInterestRate":"0.00035342","limit":"348000","annuallyInterestRate":"0.1289983","discountRate":"0.86"),
        //                     array("level":"4","dailyInterestRate":"0.00030822","limit":"399000","annuallyInterestRate":"0.1125003","discountRate":"0.75"),
        //                     array("level":"5","dailyInterestRate":"0.00024657","limit":"498000","annuallyInterestRate":"0.08999805","discountRate":"0.6")
        //                 )
        //             }
        //         )
        //     }
        //
        $timestamp = $this->safe_integer($response, 'requestTime');
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        $first['timestamp'] = $timestamp;
        return $this->parse_isolated_borrow_rate($first, $market);
    }

    public function parse_isolated_borrow_rate($info, ?array $market = null) {
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "leverage" => "10",
        //         "baseCoin" => "BTC",
        //         "baseTransferable" => true,
        //         "baseBorrowable" => true,
        //         "baseDailyInterestRate" => "0.00007",
        //         "baseAnnuallyInterestRate" => "0.02555",
        //         "baseMaxBorrowableAmount" => "27",
        //         "baseVipList" => array(
        //             array("level":"0","dailyInterestRate":"0.00007","limit":"27","annuallyInterestRate":"0.02555","discountRate":"1"),
        //             array("level":"1","dailyInterestRate":"0.0000679","limit":"27.81","annuallyInterestRate":"0.0247835","discountRate":"0.97"),
        //             array("level":"2","dailyInterestRate":"0.0000644","limit":"29.16","annuallyInterestRate":"0.023506","discountRate":"0.92"),
        //             array("level":"3","dailyInterestRate":"0.0000602","limit":"31.32","annuallyInterestRate":"0.021973","discountRate":"0.86"),
        //             array("level":"4","dailyInterestRate":"0.0000525","limit":"35.91","annuallyInterestRate":"0.0191625","discountRate":"0.75"),
        //             array("level":"5","dailyInterestRate":"0.000042","limit":"44.82","annuallyInterestRate":"0.01533","discountRate":"0.6")
        //         ),
        //         "quoteCoin" => "USDT",
        //         "quoteTransferable" => true,
        //         "quoteBorrowable" => true,
        //         "quoteDailyInterestRate" => "0.00041095",
        //         "quoteAnnuallyInterestRate" => "0.14999675",
        //         "quoteMaxBorrowableAmount" => "300000",
        //         "quoteList" => array(
        //             array("level":"0","dailyInterestRate":"0.00041095","limit":"300000","annuallyInterestRate":"0.14999675","discountRate":"1"),
        //             array("level":"1","dailyInterestRate":"0.00039863","limit":"309000","annuallyInterestRate":"0.14549995","discountRate":"0.97"),
        //             array("level":"2","dailyInterestRate":"0.00037808","limit":"324000","annuallyInterestRate":"0.1379992","discountRate":"0.92"),
        //             array("level":"3","dailyInterestRate":"0.00035342","limit":"348000","annuallyInterestRate":"0.1289983","discountRate":"0.86"),
        //             array("level":"4","dailyInterestRate":"0.00030822","limit":"399000","annuallyInterestRate":"0.1125003","discountRate":"0.75"),
        //             array("level":"5","dailyInterestRate":"0.00024657","limit":"498000","annuallyInterestRate":"0.08999805","discountRate":"0.6")
        //         )
        //     }
        //
        $marketId = $this->safe_string($info, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, 'spot');
        $baseId = $this->safe_string($info, 'baseCoin');
        $quoteId = $this->safe_string($info, 'quoteCoin');
        $timestamp = $this->safe_integer($info, 'timestamp');
        return array(
            'symbol' => $symbol,
            'base' => $this->safe_currency_code($baseId),
            'baseRate' => $this->safe_number($info, 'baseDailyInterestRate'),
            'quote' => $this->safe_currency_code($quoteId),
            'quoteRate' => $this->safe_number($info, 'quoteDailyInterestRate'),
            'period' => 86400000, // 1-Day
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function fetch_cross_borrow_rate(string $code, $params = array ()) {
        /**
         * fetch the rate of interest to borrow a $currency for margin trading
         * @see https://www.bitget.com/api-doc/margin/cross/account/Get-Cross-Margin-Interest-Rate-And-Borrowable
         * @param {string} $code unified $currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->symbol] required for isolated margin
         * @return {array} a {@link https://github.com/ccxt/ccxt/wiki/Manual#borrow-rate-structure borrow rate structure}
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'coin' => $currency['code'],
        );
        $response = $this->privateMarginGetV2MarginCrossedInterestRateAndLimit (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700879047861,
        //         "data" => array(
        //             {
        //                 "coin" => "BTC",
        //                 "leverage" => "3",
        //                 "transferable" => true,
        //                 "borrowable" => true,
        //                 "dailyInterestRate" => "0.00007",
        //                 "annualInterestRate" => "0.02555",
        //                 "maxBorrowableAmount" => "26",
        //                 "vipList" => array(
        //                     array("level":"0","limit":"26","dailyInterestRate":"0.00007","annualInterestRate":"0.02555","discountRate":"1"),
        //                     array("level":"1","limit":"26.78","dailyInterestRate":"0.0000679","annualInterestRate":"0.0247835","discountRate":"0.97"),
        //                     array("level":"2","limit":"28.08","dailyInterestRate":"0.0000644","annualInterestRate":"0.023506","discountRate":"0.92"),
        //                     array("level":"3","limit":"30.16","dailyInterestRate":"0.0000602","annualInterestRate":"0.021973","discountRate":"0.86"),
        //                     array("level":"4","limit":"34.58","dailyInterestRate":"0.0000525","annualInterestRate":"0.0191625","discountRate":"0.75"),
        //                     array("level":"5","limit":"43.16","dailyInterestRate":"0.000042","annualInterestRate":"0.01533","discountRate":"0.6")
        //                 )
        //             }
        //         )
        //     }
        //
        $timestamp = $this->safe_integer($response, 'requestTime');
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        $first['timestamp'] = $timestamp;
        return $this->parse_borrow_rate($first, $currency);
    }

    public function parse_borrow_rate($info, ?array $currency = null) {
        //
        //     {
        //         "coin" => "BTC",
        //         "leverage" => "3",
        //         "transferable" => true,
        //         "borrowable" => true,
        //         "dailyInterestRate" => "0.00007",
        //         "annualInterestRate" => "0.02555",
        //         "maxBorrowableAmount" => "26",
        //         "vipList" => array(
        //             array("level":"0","limit":"26","dailyInterestRate":"0.00007","annualInterestRate":"0.02555","discountRate":"1"),
        //             array("level":"1","limit":"26.78","dailyInterestRate":"0.0000679","annualInterestRate":"0.0247835","discountRate":"0.97"),
        //             array("level":"2","limit":"28.08","dailyInterestRate":"0.0000644","annualInterestRate":"0.023506","discountRate":"0.92"),
        //             array("level":"3","limit":"30.16","dailyInterestRate":"0.0000602","annualInterestRate":"0.021973","discountRate":"0.86"),
        //             array("level":"4","limit":"34.58","dailyInterestRate":"0.0000525","annualInterestRate":"0.0191625","discountRate":"0.75"),
        //             array("level":"5","limit":"43.16","dailyInterestRate":"0.000042","annualInterestRate":"0.01533","discountRate":"0.6")
        //         )
        //     }
        //
        $currencyId = $this->safe_string($info, 'coin');
        $timestamp = $this->safe_integer($info, 'timestamp');
        return array(
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'rate' => $this->safe_number($info, 'dailyInterestRate'),
            'period' => 86400000, // 1-Day
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function fetch_borrow_interest(?string $code = null, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch the $interest owed by the user for borrowing $currency for margin trading
         * @see https://www.bitget.com/api-doc/margin/cross/record/Get-Cross-Interest-Records
         * @see https://www.bitget.com/api-doc/margin/isolated/record/Get-Isolated-Interest-Records
         * @param {string} [$code] unified $currency $code
         * @param {string} [$symbol] unified $market $symbol when fetching $interest in isolated markets
         * @param {int} [$since] the earliest time in ms to fetch borrow $interest for
         * @param {int} [$limit] the maximum number of structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->paginate] default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [available parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=borrow-$interest-structure borrow $interest structures~
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchBorrowInterest', 'paginate');
        if ($paginate) {
            return $this->fetch_paginated_call_cursor('fetchBorrowInterest', $symbol, $since, $limit, $params, 'minId', 'idLessThan');
        }
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        $request = array();
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['coin'] = $currency['code'];
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        } else {
            $request['startTime'] = $this->milliseconds() - 7776000000;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $response = null;
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchBorrowInterest', $params, 'cross');
        if ($marginMode === 'isolated') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchBorrowInterest() requires a $symbol argument');
            }
            $request['symbol'] = $market['id'];
            $response = $this->privateMarginGetV2MarginIsolatedInterestHistory (array_merge($request, $params));
        } elseif ($marginMode === 'cross') {
            $response = $this->privateMarginGetV2MarginCrossedInterestHistory (array_merge($request, $params));
        }
        //
        // isolated
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700879935189,
        //         "data" => {
        //             "resultList" => array(
        //                 array(
        //                     "interestId" => "1112125304879067137",
        //                     "interestCoin" => "USDT",
        //                     "dailyInterestRate" => "0.00041095",
        //                     "loanCoin" => "USDT",
        //                     "interestAmount" => "0.0000685",
        //                     "interstType" => "first",
        //                     "symbol" => "BTCUSDT",
        //                     "cTime" => "1700877255648",
        //                     "uTime" => "1700877255648"
        //                 ),
        //             ),
        //             "maxId" => "1112125304879067137",
        //             "minId" => "1100138015672119298"
        //         }
        //     }
        //
        // cross
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1700879597044,
        //         "data" => {
        //             "resultList" => array(
        //                 array(
        //                     "interestId" => "1112122013642272769",
        //                     "interestCoin" => "USDT",
        //                     "dailyInterestRate" => "0.00041",
        //                     "loanCoin" => "USDT",
        //                     "interestAmount" => "0.00006834",
        //                     "interstType" => "first",
        //                     "cTime" => "1700876470957",
        //                     "uTime" => "1700876470957"
        //                 ),
        //             ),
        //             "maxId" => "1112122013642272769",
        //             "minId" => "1096917004629716993"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $rows = $this->safe_value($data, 'resultList', array());
        $interest = $this->parse_borrow_interests($rows, $market);
        return $this->filter_by_currency_since_limit($interest, $code, $since, $limit);
    }

    public function parse_borrow_interest($info, ?array $market = null) {
        //
        // isolated
        //
        //     {
        //         "interestId" => "1112125304879067137",
        //         "interestCoin" => "USDT",
        //         "dailyInterestRate" => "0.00041095",
        //         "loanCoin" => "USDT",
        //         "interestAmount" => "0.0000685",
        //         "interstType" => "first",
        //         "symbol" => "BTCUSDT",
        //         "cTime" => "1700877255648",
        //         "uTime" => "1700877255648"
        //     }
        //
        // cross
        //
        //     {
        //         "interestId" => "1112122013642272769",
        //         "interestCoin" => "USDT",
        //         "dailyInterestRate" => "0.00041",
        //         "loanCoin" => "USDT",
        //         "interestAmount" => "0.00006834",
        //         "interstType" => "first",
        //         "cTime" => "1700876470957",
        //         "uTime" => "1700876470957"
        //     }
        //
        $marketId = $this->safe_string($info, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $marginMode = ($marketId !== null) ? 'isolated' : 'cross';
        $timestamp = $this->safe_integer($info, 'cTime');
        return array(
            'symbol' => $this->safe_string($market, 'symbol'),
            'marginMode' => $marginMode,
            'currency' => $this->safe_currency_code($this->safe_string($info, 'interestCoin')),
            'interest' => $this->safe_number($info, 'interestAmount'),
            'interestRate' => $this->safe_number($info, 'dailyInterestRate'),
            'amountBorrowed' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function close_position(string $symbol, ?string $side = null, $params = array ()): array {
        /**
         * closes an open position for a $market
         * @see https://www.bitget.com/api-doc/contract/trade/Flash-Close-Position
         * @param {string} $symbol unified CCXT $market $symbol
         * @param {string} [$side] one-way mode => 'buy' or 'sell', hedge-mode => 'long' or 'short'
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?id=$order-structure $order structure~
         */
        $this->load_markets();
        $sandboxMode = $this->safe_value($this->options, 'sandboxMode', false);
        $market = null;
        if ($sandboxMode) {
            $sandboxSymbol = $this->convert_symbol_for_sandbox($symbol);
            $market = $this->market($sandboxSymbol);
        } else {
            $market = $this->market($symbol);
        }
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params($market, $params);
        $request = array(
            'symbol' => $market['id'],
            'productType' => $productType,
        );
        if ($side !== null) {
            $request['holdSide'] = $side;
        }
        $response = $this->privateMixPostV2MixOrderClosePositions (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1702975017017,
        //         "data" => {
        //             "successList" => array(
        //                 {
        //                     "orderId" => "1120923953904893955",
        //                     "clientOid" => "1120923953904893956"
        //                 }
        //             ),
        //             "failureList" => array(),
        //             "result" => false
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $order = $this->safe_value($data, 'successList', array());
        return $this->parse_order($order[0], $market);
    }

    public function close_all_positions($params = array ()): array {
        /**
         * closes all open positions for a market type
         * @see https://www.bitget.com/api-doc/contract/trade/Flash-Close-Position
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->productType] 'USDT-FUTURES', 'USDC-FUTURES', 'COIN-FUTURES', 'SUSDT-FUTURES', 'SUSDC-FUTURES' or 'SCOIN-FUTURES'
         * @return {array[]} A list of ~@link https://docs.ccxt.com/#/?id=position-structure position structures~
         */
        $this->load_markets();
        $productType = null;
        list($productType, $params) = $this->handle_product_type_and_params(null, $params);
        $request = array(
            'productType' => $productType,
        );
        $response = $this->privateMixPostV2MixOrderClosePositions (array_merge($request, $params));
        //
        //     {
        //         "code" => "00000",
        //         "msg" => "success",
        //         "requestTime" => 1702975017017,
        //         "data" => {
        //             "successList" => array(
        //                 {
        //                     "orderId" => "1120923953904893955",
        //                     "clientOid" => "1120923953904893956"
        //                 }
        //             ),
        //             "failureList" => array(),
        //             "result" => false
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $orderInfo = $this->safe_value($data, 'successList', array());
        return $this->parse_positions($orderInfo, null, $params);
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return null; // fallback to default error handler
        }
        //
        // spot
        //
        //     array("status":"fail","err_code":"01001","err_msg":"系统异常，请稍后重试")
        //     array("status":"error","ts":1595594160149,"err_code":"invalid-parameter","err_msg":"invalid size, valid range => [1,2000]")
        //     array("status":"error","ts":1595684716042,"err_code":"invalid-parameter","err_msg":"illegal sign invalid")
        //     array("status":"error","ts":1595700216275,"err_code":"bad-request","err_msg":"your balance is low!")
        //     array("status":"error","ts":1595700344504,"err_code":"invalid-parameter","err_msg":"invalid type")
        //     array("status":"error","ts":1595703343035,"err_code":"bad-request","err_msg":"order cancel fail")
        //     array("status":"error","ts":1595704360508,"err_code":"invalid-parameter","err_msg":"accesskey not null")
        //     array("status":"error","ts":1595704490084,"err_code":"invalid-parameter","err_msg":"permissions not right")
        //     array("status":"error","ts":1595711862763,"err_code":"system exception","err_msg":"system exception")
        //     array("status":"error","ts":1595730308979,"err_code":"bad-request","err_msg":"20003")
        //
        // swap
        //
        //     array("code":"40015","msg":"","requestTime":1595698564931,"data":null)
        //     array("code":"40017","msg":"Order id must not be blank","requestTime":1595702477835,"data":null)
        //     array("code":"40017","msg":"Order Type must not be blank","requestTime":1595698516162,"data":null)
        //     array("code":"40301","msg":"","requestTime":1595667662503,"data":null)
        //     array("code":"40017","msg":"Contract $code must not be blank","requestTime":1595703151651,"data":null)
        //     array("code":"40108","msg":"","requestTime":1595885064600,"data":null)
        //     array("order_id":"513468410013679613","client_oid":null,"symbol":"ethusd","result":false,"err_code":"order_no_exist_error","err_msg":"订单不存在！")
        //
        $message = $this->safe_string($response, 'err_msg');
        $errorCode = $this->safe_string_2($response, 'code', 'err_code');
        $feedback = $this->id . ' ' . $body;
        $nonEmptyMessage = (($message !== null) && ($message !== ''));
        if ($nonEmptyMessage) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
        }
        $nonZeroErrorCode = ($errorCode !== null) && ($errorCode !== '00000');
        if ($nonZeroErrorCode) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
        }
        if ($nonZeroErrorCode || $nonEmptyMessage) {
            throw new ExchangeError($feedback); // unknown $message
        }
        return null;
    }

    public function sign($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $signed = $api[0] === 'private';
        $endpoint = $api[1];
        $pathPart = '/api';
        $request = '/' . $this->implode_params($path, $params);
        $payload = $pathPart . $request;
        $url = $this->implode_hostname($this->urls['api'][$endpoint]) . $payload;
        $query = $this->omit($params, $this->extract_params($path));
        if (!$signed && ($method === 'GET')) {
            $keys = is_array($query) ? array_keys($query) : array();
            $keysLength = count($keys);
            if ($keysLength > 0) {
                $url = $url . '?' . $this->urlencode($query);
            }
        }
        if ($signed) {
            $this->check_required_credentials();
            $timestamp = (string) $this->milliseconds();
            $auth = $timestamp . $method . $payload;
            if ($method === 'POST') {
                $body = $this->json($params);
                $auth .= $body;
            } else {
                if ($params) {
                    $queryInner = '?' . $this->urlencode($this->keysort($params));
                    $url .= $queryInner;
                    $auth .= $queryInner;
                }
            }
            $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256', 'base64');
            $broker = $this->safe_string($this->options, 'broker');
            $headers = array(
                'ACCESS-KEY' => $this->apiKey,
                'ACCESS-SIGN' => $signature,
                'ACCESS-TIMESTAMP' => $timestamp,
                'ACCESS-PASSPHRASE' => $this->password,
                'X-CHANNEL-API-CODE' => $broker,
            );
            if ($method === 'POST') {
                $headers['Content-Type'] = 'application/json';
            }
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
