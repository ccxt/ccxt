<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\bitmart as Exchange;

class bitmart extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bitmart',
            'name' => 'BitMart',
            'countries' => array( 'US', 'CN', 'HK', 'KR' ),
            // 150 per 5 seconds = 30 per second
            // rateLimit = 1000ms / 30 ~= 33.334
            'rateLimit' => 33.34,
            'version' => 'v2',
            'certified' => true,
            'pro' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => false,
                'borrowCrossMargin' => false,
                'borrowIsolatedMargin' => true,
                'cancelAllOrders' => true,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'createMarketBuyOrderWithCost' => true,
                'createMarketOrderWithCost' => false,
                'createMarketSellOrderWithCost' => false,
                'createOrder' => true,
                'createPostOnlyOrder' => true,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'createTrailingPercentOrder' => true,
                'fetchBalance' => true,
                'fetchBorrowInterest' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchCanceledOrders' => true,
                'fetchClosedOrders' => true,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => true,
                'fetchDeposit' => true,
                'fetchDepositAddress' => true,
                'fetchDepositAddresses' => false,
                'fetchDepositAddressesByNetwork' => false,
                'fetchDeposits' => true,
                'fetchDepositWithdrawFee' => true,
                'fetchDepositWithdrawFees' => false,
                'fetchFundingHistory' => null,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIsolatedBorrowRate' => true,
                'fetchIsolatedBorrowRates' => true,
                'fetchLiquidations' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMyLiquidations' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterest' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => true,
                'fetchPosition' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => true,
                'fetchStatus' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => true,
                'fetchTradingFees' => false,
                'fetchTransactionFee' => true,
                'fetchTransactionFees' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => true,
                'fetchWithdrawAddressesByNetwork' => false,
                'fetchWithdrawal' => true,
                'fetchWithdrawals' => true,
                'reduceMargin' => false,
                'repayCrossMargin' => false,
                'repayIsolatedMargin' => true,
                'setLeverage' => true,
                'setMarginMode' => false,
                'transfer' => true,
                'withdraw' => true,
            ),
            'hostname' => 'bitmart.com', // bitmart.info, bitmart.news for Hong Kong users
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/129991357-8f47464b-d0f4-41d6-8a82-34122f0d1398.jpg',
                'api' => array(
                    'rest' => 'https://api-cloud.{hostname}', // bitmart.info for Hong Kong users
                ),
                'www' => 'https://www.bitmart.com/',
                'doc' => 'https://developer-pro.bitmart.com/',
                'referral' => array(
                    'url' => 'http://www.bitmart.com/?r=rQCFLh',
                    'discount' => 0.3,
                ),
                'fees' => 'https://www.bitmart.com/fee/en',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'uid' => true,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'system/time' => 3, // 10 times/sec => 30/10 = 3
                        'system/service' => 3,
                        // spot markets
                        'spot/v1/currencies' => 7.5,
                        'spot/v1/symbols' => 7.5,
                        'spot/v1/symbols/details' => 5,
                        'spot/quotation/v3/tickers' => 6, // 10 times/2 sec = 5/s => 30/5 = 6
                        'spot/quotation/v3/ticker' => 4, // 15 times/2 sec = 7.5/s => 30/7.5 = 4
                        'spot/quotation/v3/lite-klines' => 5, // should be 4 but errors
                        'spot/quotation/v3/klines' => 7, // should be 6 but errors
                        'spot/quotation/v3/books' => 4, // 15 times/2 sec = 7.5/s => 30/7.5 = 4
                        'spot/quotation/v3/trades' => 4, // 15 times/2 sec = 7.5/s => 30/7.5 = 4
                        'spot/v1/ticker' => 5,
                        'spot/v2/ticker' => 30,
                        'spot/v1/ticker_detail' => 5, // 12 times/2 sec = 6/s => 30/6 = 5
                        'spot/v1/steps' => 30,
                        'spot/v1/symbols/kline' => 6, // should be 5 but errors
                        'spot/v1/symbols/book' => 5,
                        'spot/v1/symbols/trades' => 5,
                        // contract markets
                        'contract/v1/tickers' => 15,
                        'contract/public/details' => 5,
                        'contract/public/depth' => 5,
                        'contract/public/open-interest' => 30,
                        'contract/public/funding-rate' => 30,
                        'contract/public/kline' => 6, // should be 5 but errors
                        'account/v1/currencies' => 30,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        // sub-account
                        'account/sub-account/v1/transfer-list' => 7.5,
                        'account/sub-account/v1/transfer-history' => 7.5,
                        'account/sub-account/main/v1/wallet' => 5,
                        'account/sub-account/main/v1/subaccount-list' => 7.5,
                        'account/contract/sub-account/main/v1/wallet' => 5,
                        'account/contract/sub-account/main/v1/transfer-list' => 7.5,
                        'account/contract/sub-account/v1/transfer-history' => 7.5,
                        // account
                        'account/v1/wallet' => 5,
                        'account/v1/currencies' => 30,
                        'spot/v1/wallet' => 5,
                        'account/v1/deposit/address' => 30,
                        'account/v1/withdraw/charge' => 32, // should be 30 but errors
                        'account/v2/deposit-withdraw/history' => 7.5,
                        'account/v1/deposit-withdraw/detail' => 7.5,
                        // order
                        'spot/v1/order_detail' => 1,
                        'spot/v2/orders' => 5,
                        'spot/v1/trades' => 5,
                        // newer order endpoint
                        'spot/v2/trades' => 5,
                        'spot/v3/orders' => 5,
                        'spot/v2/order_detail' => 1,
                        // margin
                        'spot/v1/margin/isolated/borrow_record' => 1,
                        'spot/v1/margin/isolated/repay_record' => 1,
                        'spot/v1/margin/isolated/pairs' => 30,
                        'spot/v1/margin/isolated/account' => 5,
                        'spot/v1/trade_fee' => 30,
                        'spot/v1/user_fee' => 30,
                        // broker
                        'spot/v1/broker/rebate' => 1,
                        // contract
                        'contract/private/assets-detail' => 5,
                        'contract/private/order' => 1.2,
                        'contract/private/order-history' => 10,
                        'contract/private/position' => 10,
                        'contract/private/get-open-orders' => 1.2,
                        'contract/private/current-plan-order' => 1.2,
                        'contract/private/trades' => 10,
                    ),
                    'post' => array(
                        // sub-account endpoints
                        'account/sub-account/main/v1/sub-to-main' => 30,
                        'account/sub-account/sub/v1/sub-to-main' => 30,
                        'account/sub-account/main/v1/main-to-sub' => 30,
                        'account/sub-account/sub/v1/sub-to-sub' => 30,
                        'account/sub-account/main/v1/sub-to-sub' => 30,
                        'account/contract/sub-account/main/v1/sub-to-main' => 7.5,
                        'account/contract/sub-account/main/v1/main-to-sub' => 7.5,
                        'account/contract/sub-account/sub/v1/sub-to-main' => 7.5,
                        // account
                        'account/v1/withdraw/apply' => 7.5,
                        // transaction and trading
                        'spot/v1/submit_order' => 1,
                        'spot/v1/batch_orders' => 1,
                        'spot/v2/cancel_order' => 1,
                        'spot/v1/cancel_orders' => 15,
                        'spot/v4/query/order' => 1, // 60 times/2 sec = 30/s => 30/30 = 1
                        'spot/v4/query/client-order' => 1, // 60 times/2 sec = 30/s => 30/30 = 1
                        'spot/v4/query/open-orders' => 5, // 12 times/2 sec = 6/s => 30/6 = 5
                        'spot/v4/query/history-orders' => 5, // 12 times/2 sec = 6/s => 30/6 = 5
                        'spot/v4/query/trades' => 5, // 12 times/2 sec = 6/s => 30/6 = 5
                        'spot/v4/query/order-trades' => 5, // 12 times/2 sec = 6/s => 30/6 = 5
                        // newer endpoint
                        'spot/v3/cancel_order' => 1,
                        'spot/v2/batch_orders' => 1,
                        'spot/v2/submit_order' => 1,
                        // margin
                        'spot/v1/margin/submit_order' => 1,
                        'spot/v1/margin/isolated/borrow' => 30,
                        'spot/v1/margin/isolated/repay' => 30,
                        'spot/v1/margin/isolated/transfer' => 30,
                        // contract
                        'account/v1/transfer-contract-list' => 60,
                        'account/v1/transfer-contract' => 60,
                        'contract/private/submit-order' => 2.5,
                        'contract/private/cancel-order' => 1.5,
                        'contract/private/cancel-orders' => 30,
                        'contract/private/submit-plan-order' => 2.5,
                        'contract/private/cancel-plan-order' => 1.5,
                        'contract/private/submit-leverage' => 2.5,
                    ),
                ),
            ),
            'timeframes' => array(
                '1m' => 1,
                '3m' => 3,
                '5m' => 5,
                '15m' => 15,
                '30m' => 30,
                '45m' => 45,
                '1h' => 60,
                '2h' => 120,
                '3h' => 180,
                '4h' => 240,
                '1d' => 1440,
                '1w' => 10080,
                '1M' => 43200,
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => true,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.0040'),
                    'maker' => $this->parse_number('0.0035'),
                    'tiers' => array(
                        'taker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.0020') ),
                            array( $this->parse_number('10'), $this->parse_number('0.18') ),
                            array( $this->parse_number('50'), $this->parse_number('0.0016') ),
                            array( $this->parse_number('250'), $this->parse_number('0.0014') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0012') ),
                            array( $this->parse_number('5000'), $this->parse_number('0.0010') ),
                            array( $this->parse_number('25000'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('50000'), $this->parse_number('0.0006') ),
                        ),
                        'maker' => array(
                            array( $this->parse_number('0'), $this->parse_number('0.001') ),
                            array( $this->parse_number('10'), $this->parse_number('0.0009') ),
                            array( $this->parse_number('50'), $this->parse_number('0.0008') ),
                            array( $this->parse_number('250'), $this->parse_number('0.0007') ),
                            array( $this->parse_number('1000'), $this->parse_number('0.0006') ),
                            array( $this->parse_number('5000'), $this->parse_number('0.0005') ),
                            array( $this->parse_number('25000'), $this->parse_number('0.0004') ),
                            array( $this->parse_number('50000'), $this->parse_number('0.0003') ),
                        ),
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    // general errors
                    '30000' => '\\ccxt\\ExchangeError', // 404, Not found
                    '30001' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-KEY is empty
                    '30002' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-KEY not found
                    '30003' => '\\ccxt\\AccountSuspended', // 401, Header X-BM-KEY has frozen
                    '30004' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-SIGN is empty
                    '30005' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-SIGN is wrong
                    '30006' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-TIMESTAMP is empty
                    '30007' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-TIMESTAMP range. Within a minute
                    '30008' => '\\ccxt\\AuthenticationError', // 401, Header X-BM-TIMESTAMP invalid format
                    '30010' => '\\ccxt\\PermissionDenied', // 403, IP is forbidden. We recommend enabling IP whitelist for API trading. After that reauth your account
                    '30011' => '\\ccxt\\AuthenticationError', // 403, Header X-BM-KEY over expire time
                    '30012' => '\\ccxt\\AuthenticationError', // 403, Header X-BM-KEY is forbidden to request it
                    '30013' => '\\ccxt\\RateLimitExceeded', // 429, Request too many requests
                    '30014' => '\\ccxt\\ExchangeNotAvailable', // 503, Service unavailable
                    '30016' => '\\ccxt\\OnMaintenance', // 200, Service maintenance, the function is temporarily unavailable
                    '30017' => '\\ccxt\\RateLimitExceeded', // 418, Your account request is temporarily rejected due to violation of current limiting rules
                    '30018' => '\\ccxt\\BadRequest', // 503, Request Body requires JSON format
                    '30019' => '\\ccxt\\PermissionDenied', // 200, You do not have the permissions to perform this operation
                    // funding account & sub account errors
                    '60000' => '\\ccxt\\BadRequest', // 400, Invalid request (maybe the body is empty, or the int parameter passes string data)
                    '60001' => '\\ccxt\\BadRequest', // 400, Asset account type does not exist
                    '60002' => '\\ccxt\\BadRequest', // 400, currency does not exist
                    '60003' => '\\ccxt\\ExchangeError', // 400, Currency has been closed recharge channel, if there is any problem, please consult customer service
                    '60004' => '\\ccxt\\ExchangeError', // 400, Currency has been closed withdraw channel, if there is any problem, please consult customer service
                    '60005' => '\\ccxt\\ExchangeError', // 400, Minimum amount is %s
                    '60006' => '\\ccxt\\ExchangeError', // 400, Maximum withdraw precision is %d
                    '60007' => '\\ccxt\\InvalidAddress', // 400, Only withdrawals from added addresses are allowed
                    '60008' => '\\ccxt\\InsufficientFunds', // 400, Balance not enough
                    '60009' => '\\ccxt\\ExchangeError', // 400, Beyond the limit
                    '60010' => '\\ccxt\\ExchangeError', // 400, Withdraw id or deposit id not found
                    '60011' => '\\ccxt\\InvalidAddress', // 400, Address is not valid
                    '60012' => '\\ccxt\\ExchangeError', // 400, This action is not property_exists($this, supported) currency(If IOTA, HLX recharge and withdraw calls are prohibited)
                    '60020' => '\\ccxt\\PermissionDenied', // 403, Your account is not allowed to recharge
                    '60021' => '\\ccxt\\PermissionDenied', // 403, Your account is not allowed to withdraw
                    '60022' => '\\ccxt\\PermissionDenied', // 403, No withdrawals for 24 hours
                    '60026' => '\\ccxt\\PermissionDenied', // 403, Sub-account does not have permission to operate
                    '60027' => '\\ccxt\\PermissionDenied', // 403, Only supports sub-account calls
                    '60028' => '\\ccxt\\AccountSuspended', // 403, Account is disabled for security reasons, please contact customer service
                    '60029' => '\\ccxt\\AccountSuspended', // 403, The account is frozen by the master account, please contact the master account to unfreeze the account
                    '60030' => '\\ccxt\\BadRequest', // 405, Method Not Allowed
                    '60031' => '\\ccxt\\BadRequest', // 415, Unsupported Media Type
                    '60050' => '\\ccxt\\ExchangeError', // 500, User account not found
                    '60051' => '\\ccxt\\ExchangeError', // 500, Internal Server Error
                    '61001' => '\\ccxt\\InsufficientFunds', // array("message":"Balance not enough","code":61001,"trace":"b85ea1f8-b9af-4001-ac5f-9e061fe93d78","data":array())
                    '61003' => '\\ccxt\\BadRequest', // 400, array("message":"sub-account not found","code":61003,"trace":"b35ec2fd-0bc9-4ef2-a3c0-6f78d4f335a4","data":array())
                    '61004' => '\\ccxt\\BadRequest', // 400, Duplicate requests (such an existing requestNo)
                    '61005' => '\\ccxt\\BadRequest', // 403, Asset transfer between accounts is not available
                    '61006' => '\\ccxt\\NotSupported', // 403, The sub-account api only supports organization accounts
                    '61007' => '\\ccxt\\ExchangeError', // 403, Please complete your institution verification to enable withdrawal function.
                    '61008' => '\\ccxt\\ExchangeError', // 403, Suspend transfer out
                    // spot public errors
                    '70000' => '\\ccxt\\ExchangeError', // 200, no data
                    '70001' => '\\ccxt\\BadRequest', // 200, request param can not be null
                    '70002' => '\\ccxt\\BadSymbol', // 200, symbol is invalid
                    '71001' => '\\ccxt\\BadRequest', // 200, after is invalid
                    '71002' => '\\ccxt\\BadRequest', // 200, before is invalid
                    '71003' => '\\ccxt\\BadRequest', // 200, request after or before is invalid
                    '71004' => '\\ccxt\\BadRequest', // 200, request kline count limit
                    '71005' => '\\ccxt\\BadRequest', // 200, request step error
                    // spot & margin errors
                    '50000' => '\\ccxt\\BadRequest', // 400, Bad Request
                    '50001' => '\\ccxt\\BadSymbol', // 400, Symbol not found
                    '50002' => '\\ccxt\\BadRequest', // 400, From Or To format error
                    '50003' => '\\ccxt\\BadRequest', // 400, Step format error
                    '50004' => '\\ccxt\\BadRequest', // 400, Kline size over 500
                    '50005' => '\\ccxt\\OrderNotFound', // 400, Order Id not found
                    '50006' => '\\ccxt\\InvalidOrder', // 400, Minimum size is %s
                    '50007' => '\\ccxt\\InvalidOrder', // 400, Maximum size is %s
                    '50008' => '\\ccxt\\InvalidOrder', // 400, Minimum price is %s
                    '50009' => '\\ccxt\\InvalidOrder', // 400, Minimum count*price is %s
                    '50010' => '\\ccxt\\InvalidOrder', // 400, RequestParam size is required
                    '50011' => '\\ccxt\\InvalidOrder', // 400, RequestParam price is required
                    '50012' => '\\ccxt\\InvalidOrder', // 400, RequestParam notional is required
                    '50013' => '\\ccxt\\InvalidOrder', // 400, Maximum limit*offset is %d
                    '50014' => '\\ccxt\\BadRequest', // 400, RequestParam limit is required
                    '50015' => '\\ccxt\\BadRequest', // 400, Minimum limit is 1
                    '50016' => '\\ccxt\\BadRequest', // 400, Maximum limit is %d
                    '50017' => '\\ccxt\\BadRequest', // 400, RequestParam offset is required
                    '50018' => '\\ccxt\\BadRequest', // 400, Minimum offset is 1
                    '50019' => '\\ccxt\\ExchangeError', // 400, Invalid status. validate status is [1=Failed, 2=Success, 3=Frozen Failed, 4=Frozen Success, 5=Partially Filled, 6=Fully Fulled, 7=Canceling, 8=Canceled]                    '50020' => '\\ccxt\\InsufficientFunds', // 400, Balance not enough
                    '50020' => '\\ccxt\\InsufficientFunds', // 400, Balance not enough
                    '50021' => '\\ccxt\\BadRequest', // 400, Invalid %s
                    '50022' => '\\ccxt\\ExchangeNotAvailable', // 400, Service unavailable
                    '50023' => '\\ccxt\\BadSymbol', // 400, This Symbol can't place order by api
                    '50024' => '\\ccxt\\BadRequest', // 400, Order book size over 200
                    '50025' => '\\ccxt\\BadRequest', // 400, Maximum price is %s
                    '50026' => '\\ccxt\\BadRequest', // 400, The buy order price cannot be higher than the open price
                    '50027' => '\\ccxt\\BadRequest', // 400, The sell order price cannot be lower than the open price
                    '50028' => '\\ccxt\\BadRequest', // 400, Missing parameters
                    '50029' => '\\ccxt\\InvalidOrder', // 400, array("message":"param not match : size * price >=1000","code":50029,"trace":"f931f030-b692-401b-a0c5-65edbeadc598","data":array())
                    '50030' => '\\ccxt\\OrderNotFound', // 400, array("message":"Order is already canceled","code":50030,"trace":"8d6f64ee-ad26-45a4-9efd-1080f9fca1fa","data":array())
                    '50031' => '\\ccxt\\OrderNotFound', // 400, Order is already completed
                    '50032' => '\\ccxt\\OrderNotFound', // 400, array("message":"Order does not exist","code":50032,"trace":"8d6b482d-4bf2-4e6c-aab2-9dcd22bf2481","data":array())
                    '50033' => '\\ccxt\\InvalidOrder', // 400, The order quantity should be greater than 0 and less than or equal to 10
                    // below Error codes used interchangeably for both failed postOnly and IOC orders depending on market price and order side
                    '50034' => '\\ccxt\\InvalidOrder', // 400, array("message":"The price is high and there is no matching depth","code":50034,"trace":"ebfae59a-ba69-4735-86b2-0ed7b9ca14ea","data":array())
                    '50035' => '\\ccxt\\InvalidOrder', // 400, array("message":"The price is low and there is no matching depth","code":50035,"trace":"677f01c7-8b88-4346-b097-b4226c75c90e","data":array())
                    '50036' => '\\ccxt\\ExchangeError', // 400, Cancel failed, order is not revocable status
                    '50037' => '\\ccxt\\BadRequest', // 400, The maximum length of clientOrderId cannot exceed 32
                    '50038' => '\\ccxt\\BadRequest', // 400, ClientOrderId only allows a combination of numbers and letters
                    '50039' => '\\ccxt\\BadRequest', // 400, Order_id and clientOrderId cannot be empty at the same time
                    '50040' => '\\ccxt\\BadSymbol', // 400, Symbol Not Available
                    '50041' => '\\ccxt\\ExchangeError', // 400, Out of query time range
                    '50042' => '\\ccxt\\BadRequest', // 400, clientOrderId is duplicate
                    '51000' => '\\ccxt\\BadSymbol', // 400, Currency not found
                    '51001' => '\\ccxt\\ExchangeError', // 400, Margin Account not Opened
                    '51002' => '\\ccxt\\ExchangeError', // 400, Margin Account Not Available
                    '51003' => '\\ccxt\\ExchangeError', // 400, Account Limit
                    '51004' => '\\ccxt\\InsufficientFunds', // 400, array("message":"Exceed the maximum number of borrows available.","code":51004,"trace":"4030b753-9beb-44e6-8352-1633c5edcd47","data":array())
                    '51005' => '\\ccxt\\InvalidOrder', // 400, Less than the minimum borrowable amount
                    '51006' => '\\ccxt\\InvalidOrder', // 400, Exceeds the amount to be repaid
                    '51007' => '\\ccxt\\BadRequest', // 400, order_mode not found
                    '51008' => '\\ccxt\\ExchangeError', // 400, Operation is limited, please try again later
                    '51009' => '\\ccxt\\InvalidOrder', // 400, Parameter mismatch => limit order/market order quantity should be greater than the minimum number of should buy/sell
                    '51010' => '\\ccxt\\InvalidOrder', // 400, Parameter mismatch => limit order price should be greater than the minimum buy price
                    '51011' => '\\ccxt\\InvalidOrder', // 400, array("message":"param not match : size * price >=5","code":51011,"trace":"525e1d27bfd34d60b2d90ba13a7c0aa9.74.16696421352220797","data":array())
                    '51012' => '\\ccxt\\InvalidOrder', // 400, Parameter mismatch => limit order price should be greater than the minimum buy price
                    '51013' => '\\ccxt\\InvalidOrder', // 400, Parameter mismatch => Limit order quantity * price should be greater than the minimum transaction amount
                    '51014' => '\\ccxt\\InvalidOrder', // 400, Participation mismatch => the number of market order buy orders should be greater than the minimum buyable amount
                    '51015' => '\\ccxt\\InvalidOrder', // 400, Parameter mismatch => the price of market order buy order placed is too small
                    '52000' => '\\ccxt\\BadRequest', // 400, Unsupported OrderMode Type
                    '52001' => '\\ccxt\\BadRequest', // 400, Unsupported Trade Type
                    '52002' => '\\ccxt\\BadRequest', // 400, Unsupported Side Type
                    '52003' => '\\ccxt\\BadRequest', // 400, Unsupported Query State Type
                    '52004' => '\\ccxt\\BadRequest', // 400, End time must be greater than or equal to Start time
                    '53000' => '\\ccxt\\AccountSuspended', // 403, Your account is frozen due to security policies. Please contact customer service
                    '53001' => '\\ccxt\\AccountSuspended', // 403, array("message":"Your kyc country is restricted. Please contact customer service.","code":53001,"trace":"8b445940-c123-4de9-86d7-73c5be2e7a24","data":array())
                    '53002' => '\\ccxt\\PermissionDenied', // 403, Your account has not yet completed the kyc advanced certification, please complete first
                    '53003' => '\\ccxt\\PermissionDenied', // 403 No permission, please contact the main account
                    '53005' => '\\ccxt\\PermissionDenied', // 403 Don't have permission to access the interface
                    '53006' => '\\ccxt\\PermissionDenied', // 403 Please complete your personal verification(Starter)
                    '53007' => '\\ccxt\\PermissionDenied', // 403 Please complete your personal verification(Advanced)
                    '53008' => '\\ccxt\\PermissionDenied', // 403 Services is not available in your countries and areas
                    '53009' => '\\ccxt\\PermissionDenied', // 403 Your account has not yet completed the qr code certification, please complete first
                    '53010' => '\\ccxt\\PermissionDenied', // 403 This account is restricted from borrowing
                    '57001' => '\\ccxt\\BadRequest', // 405, Method Not Allowed
                    '58001' => '\\ccxt\\BadRequest', // 415, Unsupported Media Type
                    '59001' => '\\ccxt\\ExchangeError', // 500, User account not found
                    '59002' => '\\ccxt\\ExchangeError', // 500, Internal Server Error
                    '59003' => '\\ccxt\\ExchangeError', // 500, Spot wallet call fail
                    '59004' => '\\ccxt\\ExchangeError', // 500, Margin wallet service call exception
                    '59005' => '\\ccxt\\PermissionDenied', // 500, Margin wallet service restricted
                    '59006' => '\\ccxt\\ExchangeError', // 500, Transfer fail
                    '59007' => '\\ccxt\\ExchangeError', // 500, Get symbol risk data fail
                    '59008' => '\\ccxt\\ExchangeError', // 500, Trading order failure
                    '59009' => '\\ccxt\\ExchangeError', // 500, Loan success,but trading order failure
                    '59010' => '\\ccxt\\InsufficientFunds', // 500, Insufficient loan amount.
                    '59011' => '\\ccxt\\ExchangeError', // 500, The Get Wallet Balance service call fail, please try again later
                    // contract errors
                    '40001' => '\\ccxt\\ExchangeError', // 400, Cloud account not found
                    '40002' => '\\ccxt\\ExchangeError', // 400, out_trade_no not found
                    '40003' => '\\ccxt\\ExchangeError', // 400, out_trade_no already existed
                    '40004' => '\\ccxt\\ExchangeError', // 400, Cloud account count limit
                    '40005' => '\\ccxt\\ExchangeError', // 400, Transfer vol precision error
                    '40006' => '\\ccxt\\PermissionDenied', // 400, Invalid ip error
                    '40007' => '\\ccxt\\BadRequest', // 400, Parse parameter error
                    '40008' => '\\ccxt\\InvalidNonce', // 400, Check nonce error
                    '40009' => '\\ccxt\\BadRequest', // 400, Check ver error
                    '40010' => '\\ccxt\\BadRequest', // 400, Not found func error
                    '40011' => '\\ccxt\\BadRequest', // 400, Invalid request
                    '40012' => '\\ccxt\\ExchangeError', // 500, System error
                    '40013' => '\\ccxt\\ExchangeError', // 400, Access too often" CLIENT_TIME_INVALID, "Please check your system time.
                    '40014' => '\\ccxt\\BadSymbol', // 400, This contract is offline
                    '40015' => '\\ccxt\\BadSymbol', // 400, This contract's exchange has been paused
                    '40016' => '\\ccxt\\InvalidOrder', // 400, This order would trigger user position liquidate
                    '40017' => '\\ccxt\\InvalidOrder', // 400, It is not possible to open and close simultaneously in the same position
                    '40018' => '\\ccxt\\InvalidOrder', // 400, Your position is closed
                    '40019' => '\\ccxt\\ExchangeError', // 400, Your position is in liquidation delegating
                    '40020' => '\\ccxt\\InvalidOrder', // 400, Your position volume is not enough
                    '40021' => '\\ccxt\\ExchangeError', // 400, The position is not exsit
                    '40022' => '\\ccxt\\ExchangeError', // 400, The position is not isolated
                    '40023' => '\\ccxt\\ExchangeError', // 400, The position would liquidate when sub margin
                    '40024' => '\\ccxt\\ExchangeError', // 400, The position would be warnning of liquidation when sub margin
                    '40025' => '\\ccxt\\ExchangeError', // 400, The position’s margin shouldn’t be lower than the base limit
                    '40026' => '\\ccxt\\ExchangeError', // 400, You cross margin position is in liquidation delegating
                    '40027' => '\\ccxt\\InsufficientFunds', // 400, You contract account available balance not enough
                    '40028' => '\\ccxt\\PermissionDenied', // 400, Your plan order's count is more than system maximum limit.
                    '40029' => '\\ccxt\\InvalidOrder', // 400, The order's leverage is too large.
                    '40030' => '\\ccxt\\InvalidOrder', // 400, The order's leverage is too small.
                    '40031' => '\\ccxt\\InvalidOrder', // 400, The deviation between current price and trigger price is too large.
                    '40032' => '\\ccxt\\InvalidOrder', // 400, The plan order's life cycle is too long.
                    '40033' => '\\ccxt\\InvalidOrder', // 400, The plan order's life cycle is too short.
                    '40034' => '\\ccxt\\BadSymbol', // 400, This contract is not found
                    '40035' => '\\ccxt\\OrderNotFound', // 400, The order is not exist
                    '40036' => '\\ccxt\\InvalidOrder', // 400, The order status is invalid
                    '40037' => '\\ccxt\\OrderNotFound', // 400, The order id is not exist
                    '40038' => '\\ccxt\\BadRequest', // 400, The k-line step is invalid
                    '40039' => '\\ccxt\\BadRequest', // 400, The timestamp is invalid
                    '40040' => '\\ccxt\\InvalidOrder', // 400, The order leverage is invalid
                    '40041' => '\\ccxt\\InvalidOrder', // 400, The order side is invalid
                    '40042' => '\\ccxt\\InvalidOrder', // 400, The order type is invalid
                    '40043' => '\\ccxt\\InvalidOrder', // 400, The order precision is invalid
                    '40044' => '\\ccxt\\InvalidOrder', // 400, The order range is invalid
                    '40045' => '\\ccxt\\InvalidOrder', // 400, The order open type is invalid
                    '40046' => '\\ccxt\\PermissionDenied', // 403, The account is not opened futures
                    '40047' => '\\ccxt\\PermissionDenied', // 403, Services is not available in you countries and areas
                    '40048' => '\\ccxt\\BadRequest', // 403, ClientOrderId only allows a combination of numbers and letters
                    '40049' => '\\ccxt\\BadRequest', // 403, The maximum length of clientOrderId cannot exceed 32
                    '40050' => '\\ccxt\\InvalidOrder', // 403, Client OrderId duplicated with existing orders
                ),
                'broad' => array(),
            ),
            'commonCurrencies' => array(
                '$GM' => 'GOLDMINER',
                '$HERO' => 'Step Hero',
                '$PAC' => 'PAC',
                'BP' => 'BEYOND',
                'GDT' => 'Gorilla Diamond',
                'GLD' => 'Goldario',
                'MVP' => 'MVP Coin',
                'TRU' => 'Truebit', // conflict with TrueFi
            ),
            'options' => array(
                'defaultNetwork' => 'ERC20',
                'defaultNetworks' => array(
                    'USDT' => 'ERC20',
                ),
                'networks' => array(
                    'ERC20' => 'ERC20',
                    'BTC' => 'BTC',
                    'TRC20' => 'TRC20',
                    // todo => should be TRX after unification
                    // 'TRC20' => array( 'TRC20', 'trc20', 'TRON' ), // todo => after unification i.e. TRON is returned from fetchDepositAddress
                    // 'ERC20' => array( 'ERC20', 'ERC-20', 'ERC20 ' ), // todo => after unification
                    'OMNI' => 'OMNI',
                    'XLM' => 'XLM',
                    'EOS' => 'EOS',
                    'NEO' => 'NEO',
                    'BTM' => 'BTM',
                    'BCH' => 'BCH',
                    'LTC' => 'LTC',
                    'BSV' => 'BSV',
                    'XRP' => 'XRP',
                    // 'VECHAIN' => array( 'VET', 'Vechain' ), // todo => after unification
                    'PLEX' => 'PLEX',
                    'XCH' => 'XCH',
                    // 'AVALANCHE_C' => array( 'AVAX', 'AVAX-C' ), // todo => after unification
                    'NEAR' => 'NEAR',
                    'FIO' => 'FIO',
                    'SCRT' => 'SCRT',
                    'IOTX' => 'IOTX',
                    'SOL' => 'SOL',
                    'ALGO' => 'ALGO',
                    'ATOM' => 'ATOM',
                    'DOT' => 'DOT',
                    'ADA' => 'ADA',
                    'DOGE' => 'DOGE',
                    'XYM' => 'XYM',
                    'GLMR' => 'GLMR',
                    'MOVR' => 'MOVR',
                    'ZIL' => 'ZIL',
                    'INJ' => 'INJ',
                    'KSM' => 'KSM',
                    'ZEC' => 'ZEC',
                    'NAS' => 'NAS',
                    // 'POLYGON' => array( 'MATIC', 'Polygon', 'POLYGON' ), // todo => after unification
                    'HRC20' => 'HECO',
                    'XDC' => 'XDC',
                    'ONE' => 'ONE',
                    'LAT' => 'LAT',
                    'CSPR' => 'Casper',
                    'ICP' => 'Computer',
                    'XTZ' => 'XTZ',
                    'MINA' => 'MINA',
                    // 'BEP20' => array( 'BEP20', 'BSC_BNB', 'bep20' ), // todo => after unification
                    'THETA' => 'THETA',
                    'AKT' => 'AKT',
                    'AR' => 'AR',
                    'CELO' => 'CELO',
                    'FIL' => 'FIL',
                    'NULS' => 'NULS',
                    'ETC' => 'ETC',
                    'DASH' => 'DASH',
                    'DGB' => 'DGB',
                    'BEP2' => 'BEP2',
                    'GRIN' => 'GRIN',
                    'WAVES' => 'WAVES',
                    'ABBC' => 'ABBC',
                    'ACA' => 'ACA',
                    'QTUM' => 'QTUM',
                    'PAC' => 'PAC',
                    // 'TERRACLASSIC' => 'LUNC', // TBD
                    // 'TERRA' => 'Terra', // TBD
                    // 'HEDERA' => array( 'HBAR', 'Hedera', 'Hedera Mainnet' ), // todo => after unification
                    'TLOS' => 'TLOS',
                    'KARDIA' => 'KardiaChain',
                    'FUSE' => 'FUSE',
                    'TRC10' => 'TRC10',
                    'FIRO' => 'FIRO',
                    'FTM' => 'Fantom',
                    // 'KLAYTN' => array( 'klaytn', 'KLAY', 'Klaytn' ), // todo => after unification
                    // 'ELROND' => array( 'EGLD', 'Elrond eGold', 'MultiversX' ), // todo => after unification
                    'EVER' => 'EVER',
                    'KAVA' => 'KAVA',
                    'HYDRA' => 'HYDRA',
                    'PLCU' => 'PLCU',
                    'BRISE' => 'BRISE',
                    // 'CRC20' => array( 'CRO', 'CRO_Chain' ), // todo => after unification
                    // 'CONFLUX' => array( 'CFX eSpace', 'CFX' ), // todo => after unification
                    'OPTIMISM' => 'OPTIMISM',
                    'REEF' => 'REEF',
                    'SYS' => 'SYS', // NEVM is different
                    'VITE' => 'VITE',
                    'STX' => 'STX',
                    'SXP' => 'SXP',
                    'BITCI' => 'BITCI',
                    // 'ARBITRUM' => array( 'ARBI', 'Arbitrum' ), // todo => after unification
                    'XRD' => 'XRD',
                    'ASTR' => 'ASTAR',
                    'ZEN' => 'HORIZEN',
                    'LTO' => 'LTO',
                    'ETHW' => 'ETHW',
                    'ETHF' => 'ETHF',
                    'IOST' => 'IOST',
                    // 'CHILIZ' => array( 'CHZ', 'CHILIZ' ), // todo => after unification
                    'APT' => 'APT',
                    // 'FLOW' => array( 'FLOW', 'Flow' ), // todo => after unification
                    'ONT' => 'ONT',
                    'EVMOS' => 'EVMOS',
                    'XMR' => 'XMR',
                    'OASYS' => 'OAS',
                    'OSMO' => 'OSMO',
                    'OMAX' => 'OMAX Chain',
                    'DESO' => 'DESO',
                    'BFIC' => 'BFIC',
                    'OHO' => 'OHO',
                    'CS' => 'CS',
                    'CHEQ' => 'CHEQ',
                    'NODL' => 'NODL',
                    'NEM' => 'XEM',
                    'FRA' => 'FRA',
                    'ERGO' => 'ERG',
                    // todo => below will be uncommented after unification
                    // 'BITCOINHD' => 'BHD',
                    // 'CRUST' => 'CRU',
                    // 'MINTME' => 'MINTME',
                    // 'ZENITH' => 'ZENITH',
                    // 'ZENIQ' => 'ZENIQ', // "ZEN-20" is different
                    // 'BITCOINVAULT' => 'BTCV',
                    // 'MOBILECOIN' => 'MBX',
                    // 'PINETWORK' => 'PI',
                    // 'PI' => 'PI',
                    // 'REBUS' => 'REBUS',
                    // 'XODEX' => 'XODEX',
                    // 'ULTRONGLOW' => 'UTG'
                    // 'QIBLOCKCHAIN' => 'QIE',
                    // 'XIDEN' => 'XDEN',
                    // 'PHAETON' => 'PHAE',
                    // 'REDLIGHT' => 'REDLC',
                    // 'VERITISE' => 'VTS',
                    // 'VERIBLOCK' => 'VBK',
                    // 'RAMESTTA' => 'RAMA',
                    // 'BITICA' => 'BDCC',
                    // 'CROWNSOVEREIGN' => 'CSOV',
                    // 'DRAC' => 'DRC20',
                    // 'QCHAIN' => 'QDT',
                    // 'KINGARU' => 'KRU',
                    // 'PROOFOFMEMES' => 'POM',
                    // 'CUBE' => 'CUBE',
                    // 'CADUCEUS' => 'CMP',
                    // 'VEIL' => 'VEIL',
                    // 'ENERGYWEB' => 'EWT',
                    // 'CYPHERIUM' => 'CPH',
                    // 'LBRY' => 'LBC',
                    // 'ETHERCOIN' => 'ETE',
                    // undetermined chains:
                    // LEX (for LexThum), TAYCAN (for TRICE), SFL (probably TAYCAN), OMNIA (for APEX), NAC (for NAC), KAG (Kinesis), CEM (crypto emergency), XVM (for Venidium), NEVM (for NEVM), IGT20 (for IGNITE), FILM (FILMCredits), CC (CloudCoin), MERGE (MERGE), LTNM (Bitcoin latinum), PLUGCN ( PlugChain), DINGO (dingo), LED (LEDGIS), AVAT (AVAT), VSOL (Vsolidus), EPIC (EPIC cash), NFC (netflowcoin), mrx (Metrix Coin), Idena (idena network), PKT (PKT Cash), BondDex (BondDex), XBN (XBN), KALAM (Kalamint), REV (RChain), KRC20 (MyDeFiPet), ARC20 (Hurricane Token), GMD (Coop network), BERS (Berith), ZEBI (Zebi), BRC (Baer Chain), DAPS (DAPS Coin), APL (Gold Secured Currency), NDAU (NDAU), WICC (WICC), UPG (Unipay God), TSL (TreasureSL), MXW (Maxonrow), CLC (Cifculation), SMH (SMH Coin), XIN (CPCoin), RDD (ReddCoin), OK (Okcash), KAR (KAR), CCX (ConcealNetwork),
                ),
                'defaultType' => 'spot', // 'spot', 'swap'
                'fetchBalance' => array(
                    'type' => 'spot', // 'spot', 'swap', 'account'
                ),
                'accountsByType' => array(
                    'spot' => 'spot',
                    'swap' => 'swap',
                ),
                'createMarketBuyOrderRequiresPrice' => true,
                'brokerId' => 'CCXTxBitmart000',
            ),
        ));
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the exchange server
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int} the current integer timestamp in milliseconds from the exchange server
         */
        $response = $this->publicGetSystemTime ($params);
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"c4e5e5b7-fe9f-4191-89f7-53f6c5bf9030",
        //         "data":{
        //             "server_time":1599843709578
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->safe_integer($data, 'server_time');
    }

    public function fetch_status($params = array ()) {
        /**
         * the latest known information on the availability of the exchange API
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=exchange-$status-structure $status structure~
         */
        $options = $this->safe_value($this->options, 'fetchStatus', array());
        $defaultType = $this->safe_string($this->options, 'defaultType');
        $type = $this->safe_string($options, 'type', $defaultType);
        $type = $this->safe_string($params, 'type', $type);
        $params = $this->omit($params, 'type');
        $response = $this->publicGetSystemService ($params);
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "1d3f28b0-763e-4f78-90c4-5e3ad19dc595",
        //         "data" => {
        //           "service" => array(
        //             array(
        //               "title" => "Spot API Stop",
        //               "service_type" => "spot",
        //               "status" => 2,
        //               "start_time" => 1648639069125,
        //               "end_time" => 1648639069125
        //             ),
        //             {
        //               "title" => "Contract API Stop",
        //               "service_type" => "contract",
        //               "status" => 2,
        //               "start_time" => 1648639069125,
        //               "end_time" => 1648639069125
        //             }
        //           )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $services = $this->safe_value($data, 'service', array());
        $servicesByType = $this->index_by($services, 'service_type');
        if ($type === 'swap') {
            $type = 'contract';
        }
        $service = $this->safe_value($servicesByType, $type);
        $status = null;
        $eta = null;
        if ($service !== null) {
            $statusCode = $this->safe_integer($service, 'status');
            if ($statusCode === 2) {
                $status = 'ok';
            } else {
                $status = 'maintenance';
                $eta = $this->safe_integer($service, 'end_time');
            }
        }
        return array(
            'status' => $status,
            'updated' => null,
            'eta' => $eta,
            'url' => null,
            'info' => $response,
        );
    }

    public function fetch_spot_markets($params = array ()) {
        $response = $this->publicGetSpotV1SymbolsDetails ($params);
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"a67c9146-086d-4d3f-9897-5636a9bb26e1",
        //         "data":{
        //             "symbols":array(
        //               array(
        //                  "symbol" => "BTC_USDT",
        //                  "symbol_id" => 53,
        //                  "base_currency" => "BTC",
        //                  "quote_currency" => "USDT",
        //                  "base_min_size" => "0.000010000000000000000000000000",
        //                  "base_max_size" => "100000000.000000000000000000000000000000",
        //                  "price_min_precision" => -1,
        //                  "price_max_precision" => 2,
        //                  "quote_increment" => "0.00001", // Api docs says "The minimum order quantity is also the minimum order quantity increment", however I think they mistakenly use the term 'order quantity'
        //                  "expiration" => "NA",
        //                  "min_buy_amount" => "5.000000000000000000000000000000",
        //                  "min_sell_amount" => "5.000000000000000000000000000000",
        //                  "trade_status" => "trading"
        //               ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $symbols = $this->safe_value($data, 'symbols', array());
        $result = array();
        for ($i = 0; $i < count($symbols); $i++) {
            $market = $symbols[$i];
            $id = $this->safe_string($market, 'symbol');
            $numericId = $this->safe_integer($market, 'symbol_id');
            $baseId = $this->safe_string($market, 'base_currency');
            $quoteId = $this->safe_string($market, 'quote_currency');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $symbol = $base . '/' . $quote;
            $minBuyCost = $this->safe_string($market, 'min_buy_amount');
            $minSellCost = $this->safe_string($market, 'min_sell_amount');
            $minCost = Precise::string_max($minBuyCost, $minSellCost);
            $baseMinSize = $this->safe_number($market, 'base_min_size');
            $result[] = array(
                'id' => $id,
                'numericId' => $numericId,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => null,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => null,
                'type' => 'spot',
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'active' => true,
                'contract' => false,
                'linear' => null,
                'inverse' => null,
                'contractSize' => null,
                'expiry' => null,
                'expiryDatetime' => null,
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $baseMinSize,
                    'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'price_max_precision'))),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'amount' => array(
                        'min' => $baseMinSize,
                        'max' => $this->safe_number($market, 'base_max_size'),
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => $this->parse_number($minCost),
                        'max' => null,
                    ),
                ),
                'created' => null,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_contract_markets($params = array ()) {
        $response = $this->publicGetContractPublicDetails ($params);
        //
        //     {
        //       "code" => 1000,
        //       "message" => "Ok",
        //       "trace" => "9b92a999-9463-4c96-91a4-93ad1cad0d72",
        //       "data" => {
        //       "symbols" => [array(
        //             "symbol" => "BTCUSDT",
        //             "product_type" => 1,
        //             "open_timestamp" => 1594080000,
        //             "expire_timestamp" => 0,
        //             "settle_timestamp" => 0,
        //             "base_currency" => "BTC",
        //             "quote_currency" => "USDT",
        //             "last_price" => "23920",
        //             "volume_24h" => "18969368",
        //             "turnover_24h" => "458933659.7858",
        //             "index_price" => "23945.25191635",
        //             "index_name" => "BTCUSDT",
        //             "contract_size" => "0.001",
        //             "min_leverage" => "1",
        //             "max_leverage" => "100",
        //             "price_precision" => "0.1",
        //             "vol_precision" => "1",
        //             "max_volume" => "500000",
        //             "min_volume" => "1"
        //           ),
        //           ...
        //         ]
        //       }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $symbols = $this->safe_value($data, 'symbols', array());
        $result = array();
        for ($i = 0; $i < count($symbols); $i++) {
            $market = $symbols[$i];
            $id = $this->safe_string($market, 'symbol');
            $baseId = $this->safe_string($market, 'base_currency');
            $quoteId = $this->safe_string($market, 'quote_currency');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $settleId = 'USDT'; // this is bitmart's ID for usdt
            $settle = $this->safe_currency_code($settleId);
            $symbol = $base . '/' . $quote . ':' . $settle;
            $productType = $this->safe_integer($market, 'product_type');
            $isSwap = ($productType === 1);
            $isFutures = ($productType === 2);
            $expiry = $this->safe_integer($market, 'expire_timestamp');
            if (!$isFutures && ($expiry === 0)) {
                $expiry = null;
            }
            $result[] = array(
                'id' => $id,
                'numericId' => null,
                'symbol' => $symbol,
                'base' => $base,
                'quote' => $quote,
                'settle' => $settle,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'settleId' => $settleId,
                'type' => $isSwap ? 'swap' : 'future',
                'spot' => false,
                'margin' => false,
                'swap' => $isSwap,
                'future' => $isFutures,
                'option' => false,
                'active' => true,
                'contract' => true,
                'linear' => true,
                'inverse' => false,
                'contractSize' => $this->safe_number($market, 'contract_size'),
                'expiry' => $expiry,
                'expiryDatetime' => $this->iso8601($expiry),
                'strike' => null,
                'optionType' => null,
                'precision' => array(
                    'amount' => $this->safe_number($market, 'vol_precision'),
                    'price' => $this->safe_number($market, 'price_precision'),
                ),
                'limits' => array(
                    'leverage' => array(
                        'min' => $this->safe_number($market, 'min_leverage'),
                        'max' => $this->safe_number($market, 'max_leverage'),
                    ),
                    'amount' => array(
                        'min' => $this->safe_number($market, 'min_volume'),
                        'max' => $this->safe_number($market, 'max_volume'),
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'created' => $this->safe_integer($market, 'open_timestamp'),
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for bitmart
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing market data
         */
        $spot = $this->fetch_spot_markets($params);
        $contract = $this->fetch_contract_markets($params);
        return $this->array_concat($spot, $contract);
    }

    public function fetch_currencies($params = array ()) {
        /**
         * fetches all available $currencies on an exchange
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an associative dictionary of $currencies
         */
        $response = $this->publicGetSpotV1Currencies ($params);
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"8c768b3c-025f-413f-bec5-6d6411d46883",
        //         "data":{
        //             "currencies":array(
        //                 array("currency":"MATIC","name":"Matic Network","withdraw_enabled":true,"deposit_enabled":true),
        //                 array("currency":"KTN","name":"Kasoutuuka News","withdraw_enabled":true,"deposit_enabled":false),
        //                 array("currency":"BRT","name":"Berith","withdraw_enabled":true,"deposit_enabled":true),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $currencies = $this->safe_value($data, 'currencies', array());
        $result = array();
        for ($i = 0; $i < count($currencies); $i++) {
            $currency = $currencies[$i];
            $id = $this->safe_string($currency, 'id');
            $code = $this->safe_currency_code($id);
            $name = $this->safe_string($currency, 'name');
            $withdrawEnabled = $this->safe_value($currency, 'withdraw_enabled');
            $depositEnabled = $this->safe_value($currency, 'deposit_enabled');
            $active = $withdrawEnabled && $depositEnabled;
            $result[$code] = array(
                'id' => $id,
                'code' => $code,
                'name' => $name,
                'info' => $currency, // the original payload
                'active' => $active,
                'deposit' => $depositEnabled,
                'withdraw' => $withdrawEnabled,
                'fee' => null,
                'precision' => null,
                'limits' => array(
                    'amount' => array( 'min' => null, 'max' => null ),
                    'withdraw' => array( 'min' => null, 'max' => null ),
                ),
            );
        }
        return $result;
    }

    public function fetch_transaction_fee(string $code, $params = array ()) {
        /**
         * @deprecated
         * please use fetchDepositWithdrawFee instead
         * @param {string} $code unified $currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privateGetAccountV1WithdrawCharge (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => "1000",
        //         "trace" => "3ecc0adf-91bd-4de7-aca1-886c1122f54f",
        //         "data" => {
        //             "today_available_withdraw_BTC" => "100.0000",
        //             "min_withdraw" => "0.005",
        //             "withdraw_precision" => "8",
        //             "withdraw_fee" => "0.000500000000000000000000000000"
        //         }
        //     }
        //
        $data = $response['data'];
        $withdrawFees = array();
        $withdrawFees[$code] = $this->safe_number($data, 'withdraw_fee');
        return array(
            'info' => $response,
            'withdraw' => $withdrawFees,
            'deposit' => array(),
        );
    }

    public function parse_deposit_withdraw_fee($fee, ?array $currency = null) {
        //
        //    {
        //        "today_available_withdraw_BTC" => "100.0000",
        //        "min_withdraw" => "0.005",
        //        "withdraw_precision" => "8",
        //        "withdraw_fee" => "0.000500000000000000000000000000"
        //    }
        //
        return array(
            'info' => $fee,
            'withdraw' => array(
                'fee' => $this->safe_number($fee, 'withdraw_fee'),
                'percentage' => null,
            ),
            'deposit' => array(
                'fee' => null,
                'percentage' => null,
            ),
            'networks' => array(),
        );
    }

    public function fetch_deposit_withdraw_fee(string $code, $params = array ()) {
        /**
         * fetch the fee for deposits and withdrawals
         * @param {string} $code unified $currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        $response = $this->privateGetAccountV1WithdrawCharge (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => "1000",
        //         "trace" => "3ecc0adf-91bd-4de7-aca1-886c1122f54f",
        //         "data" => {
        //             "today_available_withdraw_BTC" => "100.0000",
        //             "min_withdraw" => "0.005",
        //             "withdraw_precision" => "8",
        //             "withdraw_fee" => "0.000500000000000000000000000000"
        //         }
        //     }
        //
        $data = $response['data'];
        return $this->parse_deposit_withdraw_fee($data);
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        // spot
        //
        //      {
        //          "symbol" => "SOLAR_USDT",
        //          "last_price" => "0.020342",
        //          "quote_volume_24h" => "56817.811802",
        //          "base_volume_24h" => "2172060",
        //          "high_24h" => "0.256000",
        //          "low_24h" => "0.016980",
        //          "open_24h" => "0.022309",
        //          "close_24h" => "0.020342",
        //          "best_ask" => "0.020389",
        //          "best_ask_size" => "339.000000000000000000000000000000",
        //          "best_bid" => "0.020342",
        //          "best_bid_size" => "3369.000000000000000000000000000000",
        //          "fluctuation" => "-0.0882",
        //          "url" => "https://www.bitmart.com/trade?$symbol=SOLAR_USDT",
        //          "timestamp" => 1667403439367
        //      }
        //
        // swap
        //
        //      {
        //          "contract_symbol":"DOGEUSDT",
        //          "last_price":"0.130340",
        //          "index_price":"0.13048245",
        //          "last_funding_rate":"0.00002287",
        //          "price_change_percent_24h":"-2.074",
        //          "volume_24h":"113705028.59482228",
        //          "url":"https://futures.bitmart.com/en?$symbol=DOGEUSDT",
        //          "high_price":"0.134520",
        //          "low_price":"0.128570",
        //          "legal_coin_price":"0.1302699"
        //      }
        //
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $marketId = $this->safe_string_2($ticker, 'symbol', 'contract_symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $last = $this->safe_string_2($ticker, 'close_24h', 'last_price');
        $percentage = $this->safe_string($ticker, 'price_change_percent_24h');
        if ($percentage === null) {
            $percentageRaw = $this->safe_string($ticker, 'fluctuation');
            if (($percentageRaw !== null) && ($percentageRaw !== '0')) { // a few tickers show strictly '0' in fluctuation field
                $direction = $percentageRaw[0];
                $percentage = $direction . Precise::string_mul(str_replace($direction, '', $percentageRaw), '100');
            } elseif ($percentageRaw === '0') {
                $percentage = '0';
            }
        }
        $baseVolume = $this->safe_string($ticker, 'base_volume_24h');
        $quoteVolume = $this->safe_string($ticker, 'quote_volume_24h');
        $quoteVolume = $this->safe_string($ticker, 'volume_24h', $quoteVolume);
        $average = $this->safe_string_2($ticker, 'avg_price', 'index_price');
        $high = $this->safe_string_2($ticker, 'high_24h', 'high_price');
        $low = $this->safe_string_2($ticker, 'low_24h', 'low_price');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => $this->safe_string($ticker, 'best_bid'),
            'bidVolume' => $this->safe_string($ticker, 'best_bid_size'),
            'ask' => $this->safe_string($ticker, 'best_ask'),
            'askVolume' => $this->safe_string($ticker, 'best_ask_size'),
            'vwap' => null,
            'open' => $this->safe_string($ticker, 'open_24h'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => $average,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array();
        $response = null;
        if ($market['swap']) {
            $request['contract_symbol'] = $market['id'];
            $response = $this->publicGetContractV1Tickers (array_merge($request, $params));
        } elseif ($market['spot']) {
            $request['symbol'] = $market['id'];
            $response = $this->publicGetSpotV1Ticker (array_merge($request, $params));
        } else {
            throw new NotSupported($this->id . ' fetchTicker() does not support ' . $market['type'] . ' markets, only spot and swap markets are accepted');
        }
        //
        // spot
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"6aa5b923-2f57-46e3-876d-feca190e0b82",
        //         "data":{
        //             "tickers":array(
        //                 {
        //                     "symbol":"ETH_BTC",
        //                     "last_price":"0.036037",
        //                     "quote_volume_24h":"4380.6660000000",
        //                     "base_volume_24h":"159.3582006712",
        //                     "high_24h":"0.036972",
        //                     "low_24h":"0.035524",
        //                     "open_24h":"0.036561",
        //                     "close_24h":"0.036037",
        //                     "best_ask":"0.036077",
        //                     "best_ask_size":"9.9500",
        //                     "best_bid":"0.035983",
        //                     "best_bid_size":"4.2792",
        //                     "fluctuation":"-0.0143",
        //                     "url":"https://www.bitmart.com/trade?$symbol=ETH_BTC"
        //                 }
        //             )
        //         }
        //     }
        //
        // swap
        //
        //      {
        //          "message":"OK",
        //          "code":1000,
        //          "trace":"4a0ebceb-d3f7-45a3-8feb-f61e230e24cd",
        //          "data":{
        //              "tickers":array(
        //                  {
        //                      "contract_symbol":"DOGEUSDT",
        //                      "last_price":"0.130180",
        //                      "index_price":"0.13028635",
        //                      "last_funding_rate":"0.00002025",
        //                      "price_change_percent_24h":"-2.326",
        //                      "volume_24h":"116789313.01797258",
        //                      "url":"https://futures.bitmart.com/en?$symbol=DOGEUSDT",
        //                      "high_price":"0.134520",
        //                      "low_price":"0.128570",
        //                      "legal_coin_price":"0.13017401"
        //                  }
        //              )
        //          }
        //      }
        //
        $data = $this->safe_value($response, 'data', array());
        $tickers = $this->safe_value($data, 'tickers', array());
        // fails in naming for contract $tickers 'contract_symbol'
        $tickersById = null;
        if ($market['spot']) {
            $tickersById = $this->index_by($tickers, 'symbol');
        } elseif ($market['swap']) {
            $tickersById = $this->index_by($tickers, 'contract_symbol');
        }
        $ticker = $this->safe_value($tickersById, $market['id']);
        return $this->parse_ticker($ticker, $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
         * @see https://developer-pro.bitmart.com/en/spot/#get-$ticker-of-all-pairs-v2
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $type = null;
        $market = null;
        if ($symbols !== null) {
            $symbol = $this->safe_value($symbols, 0);
            $market = $this->market($symbol);
        }
        list($type, $params) = $this->handle_market_type_and_params('fetchTickers', $market, $params);
        $response = null;
        if ($type === 'spot') {
            $response = $this->publicGetSpotV2Ticker ($params);
        } elseif ($type === 'swap') {
            $response = $this->publicGetContractV1Tickers ($params);
        } else {
            throw new NotSupported($this->id . ' fetchTickers() does not support ' . $type . ' markets, only spot and swap markets are accepted');
        }
        $data = $this->safe_value($response, 'data', array());
        $tickers = $this->safe_value($data, 'tickers', array());
        $result = array();
        for ($i = 0; $i < count($tickers); $i++) {
            $ticker = $this->parse_ticker($tickers[$i]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @see https://developer-pro.bitmart.com/en/spot/#get-depth-v3
         * @see https://developer-pro.bitmart.com/en/futures/#get-$market-depth
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = null;
        if ($market['spot']) {
            if ($limit !== null) {
                $request['limit'] = $limit; // default 35, max 50
            }
            $response = $this->publicGetSpotQuotationV3Books (array_merge($request, $params));
        } elseif ($market['swap']) {
            $response = $this->publicGetContractPublicDepth (array_merge($request, $params));
        } else {
            throw new NotSupported($this->id . ' fetchOrderBook() does not support ' . $market['type'] . ' markets, only spot and swap markets are accepted');
        }
        //
        // spot
        //
        //     {
        //         "code" => 1000,
        //         "message" => "success",
        //         "data" => array(
        //             "ts" => "1695264191808",
        //             "symbol" => "BTC_USDT",
        //             "asks" => [
        //                 ["26942.57","0.06492"],
        //                 ["26942.73","0.05447"],
        //                 ["26943.00","0.07154"]
        //             ],
        //             "bids" => [
        //                 ["26942.45","0.00074"],
        //                 ["26941.53","0.00371"],
        //                 ["26940.94","0.08992"]
        //             ]
        //         ),
        //         "trace" => "430a7f69581d4258a8e4b424dfb10782.73.16952341919017619"
        //     }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             "asks" => [
        //                 ["26938.3","3499","3499"],
        //                 ["26938.5","14702","18201"],
        //                 ["26938.6","20457","38658"]
        //             ],
        //             "bids" => [
        //                 ["26938.2","20","20"],
        //                 ["26937.9","1913","1933"],
        //                 ["26937.8","2588","4521"]
        //             ],
        //             "timestamp" => 1695264383999,
        //             "symbol" => "BTCUSDT"
        //         ),
        //         "trace" => "4cad855074664097ac6ba5258c47305d.72.16952643834721135"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $timestamp = $this->safe_integer_2($data, 'ts', 'timestamp');
        return $this->parse_order_book($data, $market['symbol'], $timestamp);
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // public fetchTrades spot ( $amount = count * price )
        //
        //    {
        //        "amount" => "818.94",
        //        "order_time" => "1637601839035",    // ETH/USDT
        //        "price" => "4221.99",
        //        "count" => "0.19397",
        //        "type" => "buy"
        //    }
        //
        // spot => fetchMyTrades
        //
        //    {
        //        "tradeId":"182342999769370687",
        //        "orderId":"183270218784142990",
        //        "clientOrderId":"183270218784142990",
        //        "symbol":"ADA_USDT",
        //        "side":"buy",
        //        "orderMode":"spot",
        //        "type":"market",
        //        "price":"0.245948",
        //        "size":"20.71",
        //        "notional":"5.09358308",
        //        "fee":"0.00509358",
        //        "feeCoinName":"USDT",
        //        "tradeRole":"taker",
        //        "createTime":1695658457836,
        //    }
        //
        // swap => fetchMyTrades
        //
        //    {
        //        "order_id" => "230930336848609",
        //        "trade_id" => "6212604014",
        //        "symbol" => "BTCUSDT",
        //        "side" => 3,
        //        "price" => "26910.4",
        //        "vol" => "1",
        //        "exec_type" => "Taker",
        //        "profit" => false,
        //        "create_time" => 1695961596692,
        //        "realised_profit" => "-0.0003",
        //        "paid_fees" => "0.01614624"
        //    }
        //
        // ws swap
        //
        //    {
        //        'fee' => '-0.000044502',
        //        'feeCcy' => 'USDT',
        //        'fillPrice' => '74.17',
        //        'fillQty' => '1',
        //        'lastTradeID' => 6802340762
        //    }
        //
        $timestamp = $this->safe_integer_n($trade, array( 'order_time', 'createTime', 'create_time' ));
        $isPublicTrade = (is_array($trade) && array_key_exists('order_time', $trade));
        $amount = null;
        $cost = null;
        $type = null;
        $side = null;
        if ($isPublicTrade) {
            $amount = $this->safe_string($trade, 'count');
            $cost = $this->safe_string($trade, 'amount');
            $side = $this->safe_string($trade, 'type');
        } else {
            $amount = $this->safe_string_n($trade, array( 'size', 'vol', 'fillQty' ));
            $cost = $this->safe_string($trade, 'notional');
            $type = $this->safe_string($trade, 'type');
            $side = $this->parse_order_side($this->safe_string($trade, 'side'));
        }
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $feeCostString = $this->safe_string_2($trade, 'fee', 'paid_fees');
        $fee = null;
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'feeCoinName');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            if ($feeCurrencyCode === null) {
                $feeCurrencyCode = ($side === 'buy') ? $market['base'] : $market['quote'];
            }
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrencyCode,
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $this->safe_string_n($trade, array( 'tradeId', 'trade_id', 'lastTradeID' )),
            'order' => $this->safe_string_2($trade, 'orderId', 'order_id'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'type' => $type,
            'side' => $side,
            'price' => $this->safe_string_2($trade, 'price', 'fillPrice'),
            'amount' => $amount,
            'cost' => $cost,
            'takerOrMaker' => $this->safe_string_lower_2($trade, 'tradeRole', 'exec_type'),
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of $trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['spot']) {
            throw new NotSupported($this->id . ' fetchTrades() does not support ' . $market['type'] . ' orders, only spot orders are accepted');
        }
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetSpotV1SymbolsTrades (array_merge($request, $params));
        //
        // spot
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"222d74c0-8f6d-49d9-8e1b-98118c50eeba",
        //         "data":{
        //             "trades":array(
        //                 array(
        //                     "amount":"0.005703",
        //                     "order_time":1599652045394,
        //                     "price":"0.034029",
        //                     "count":"0.1676",
        //                     "type":"sell"
        //                 ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $trades = $this->safe_value($data, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        // spot
        //    array(
        //        "1699512060", // timestamp
        //        "36746.49", // open
        //        "36758.71", // high
        //        "36736.13", // low
        //        "36755.99", // close
        //        "2.83965", // base volume
        //        "104353.57" // quote volume
        //    )
        //
        // swap
        //    {
        //        "low_price" => "20090.3",
        //        "high_price" => "20095.5",
        //        "open_price" => "20092.6",
        //        "close_price" => "20091.4",
        //        "volume" => "8748",
        //        "timestamp" => 1665002281
        //    }
        //
        // ws
        //    array(
        //        1631056350, // timestamp
        //        "46532.83", // open
        //        "46555.71", // high
        //        "46511.41", // low
        //        "46555.71", // close
        //        "0.25", // volume
        //    )
        //
        // ws swap
        //    {
        //        "symbol":"BTCUSDT",
        //        "o":"146.24",
        //        "h":"146.24",
        //        "l":"146.24",
        //        "c":"146.24",
        //        "v":"146"
        //    }
        //
        if (gettype($ohlcv) === 'array' && array_keys($ohlcv) === array_keys(array_keys($ohlcv))) {
            return array(
                $this->safe_timestamp($ohlcv, 0),
                $this->safe_number($ohlcv, 1),
                $this->safe_number($ohlcv, 2),
                $this->safe_number($ohlcv, 3),
                $this->safe_number($ohlcv, 4),
                $this->safe_number($ohlcv, 5),
            );
        } else {
            return array(
                $this->safe_timestamp_2($ohlcv, 'timestamp', 'ts'),
                $this->safe_number_2($ohlcv, 'open_price', 'o'),
                $this->safe_number_2($ohlcv, 'high_price', 'h'),
                $this->safe_number_2($ohlcv, 'low_price', 'l'),
                $this->safe_number_2($ohlcv, 'close_price', 'c'),
                $this->safe_number_2($ohlcv, 'volume', 'v'),
            );
        }
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://developer-pro.bitmart.com/en/spot/#get-history-k-line-v3
         * @see https://developer-pro.bitmart.com/en/futures/#get-k-line
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp of the latest candle in ms
         * @param {boolean} [$params->paginate] *spot only* default false, when true will automatically $paginate by calling this endpoint multiple times. See in the docs all the [availble parameters](https://github.com/ccxt/ccxt/wiki/Manual#pagination-$params)
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $paginate = false;
        list($paginate, $params) = $this->handle_option_and_params($params, 'fetchOHLCV', 'paginate', false);
        if ($paginate) {
            return $this->fetch_paginated_call_deterministic('fetchOHLCV', $symbol, $since, $limit, $timeframe, $params, 200);
        }
        $market = $this->market($symbol);
        $duration = $this->parse_timeframe($timeframe);
        $parsedTimeframe = $this->safe_integer($this->timeframes, $timeframe);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($parsedTimeframe !== null) {
            $request['step'] = $parsedTimeframe;
        } else {
            $request['step'] = $timeframe;
        }
        if ($market['spot']) {
            list($request, $params) = $this->handle_until_option('before', $request, $params, 0.001);
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            if ($since !== null) {
                $request['after'] = $this->parse_to_int(($since / 1000)) - 1;
            }
        } else {
            $maxLimit = 1200;
            if ($limit === null) {
                $limit = $maxLimit;
            }
            $limit = min ($maxLimit, $limit);
            $now = $this->parse_to_int($this->milliseconds() / 1000);
            if ($since === null) {
                $start = $now - $limit * $duration;
                $request['start_time'] = $start;
                $request['end_time'] = $now;
            } else {
                $start = $this->parse_to_int(($since / 1000)) - 1;
                $end = $this->sum($start, $limit * $duration);
                $request['start_time'] = $start;
                $request['end_time'] = min ($end, $now);
            }
            list($request, $params) = $this->handle_until_option('end_time', $request, $params, 0.001);
        }
        $response = null;
        if ($market['swap']) {
            $response = $this->publicGetContractPublicKline (array_merge($request, $params));
        } else {
            $response = $this->publicGetSpotQuotationV3Klines (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => 1000,
        //         "message" => "success",
        //         "data" => [
        //             ["1699512060","36746.49","36758.71","36736.13","36755.99","2.83965","104353.57"],
        //             ["1699512120","36756.00","36758.70","36737.14","36737.63","1.96070","72047.10"],
        //             ["1699512180","36737.63","36740.45","36737.62","36740.44","0.63194","23217.62"]
        //         ],
        //         "trace" => "6591fc7b508845359d5fa442e3b3a4fb.72.16995122398750695"
        //     }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             array(
        //                 "low_price" => "20090.3",
        //                 "high_price" => "20095.5",
        //                 "open_price" => "20092.6",
        //                 "close_price" => "20091.4",
        //                 "volume" => "8748",
        //                 "timestamp" => 1665002281
        //             ),
        //             ...
        //         ),
        //         "trace" => "96c989db-e0f5-46f5-bba6-60cfcbde699b"
        //     }
        //
        $ohlcv = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($ohlcv, $market, $timeframe, $since, $limit);
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * @see https://developer-pro.bitmart.com/en/spot/#account-trade-list-v4-signed
         * @see https://developer-pro.bitmart.com/en/futures/#get-order-trade-keyed
         * fetch all trades made by the user
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch trades for
         * @param {int} [$limit] the maximum number of trades structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] the latest time in ms to fetch trades for
         * @param {boolean} [$params->marginMode] *spot* whether to fetch trades for margin orders or spot orders, defaults to spot orders (only isolated margin orders are supported)
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $type = null;
        $response = null;
        list($type, $params) = $this->handle_market_type_and_params('fetchMyTrades', $market, $params);
        $until = $this->safe_integer_n($params, array( 'until', 'endTime', 'end_time' ));
        $params = $this->omit($params, array( 'until' ));
        if ($type === 'spot') {
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchMyTrades', $params);
            if ($marginMode === 'isolated') {
                $request['orderMode'] = 'iso_margin';
            }
            $options = $this->safe_value($this->options, 'fetchMyTrades', array());
            $defaultLimit = $this->safe_integer($options, 'limit', 200);
            if ($limit === null) {
                $limit = $defaultLimit;
            }
            $request['limit'] = $limit;
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            if ($until !== null) {
                $request['endTime'] = $until;
            }
            $response = $this->privatePostSpotV4QueryTrades (array_merge($request, $params));
        } elseif ($type === 'swap') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchMyTrades() requires a $symbol argument');
            }
            if ($since !== null) {
                $request['start_time'] = $since;
            }
            if ($until !== null) {
                $request['end_time'] = $until;
            }
            $response = $this->privateGetContractPrivateTrades (array_merge($request, $params));
        } else {
            throw new NotSupported($this->id . ' fetchMyTrades() does not support ' . $type . ' orders, only spot and swap orders are accepted');
        }
        //
        // spot
        //
        //    {
        //        "code":1000,
        //        "message":"success",
        //        "data":array(
        //           {
        //              "tradeId":"182342999769370687",
        //              "orderId":"183270218784142990",
        //              "clientOrderId":"183270218784142990",
        //              "symbol":"ADA_USDT",
        //              "side":"buy",
        //              "orderMode":"spot",
        //              "type":"market",
        //              "price":"0.245948",
        //              "size":"20.71",
        //              "notional":"5.09358308",
        //              "fee":"0.00509358",
        //              "feeCoinName":"USDT",
        //              "tradeRole":"taker",
        //              "createTime":1695658457836,
        //              "updateTime":1695658457836
        //           }
        //        ),
        //        "trace":"fbaee9e0e2f5442fba5b3262fc86b0ac.65.16956593456523085"
        //    }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             array(
        //                 "order_id" => "230930336848609",
        //                 "trade_id" => "6212604014",
        //                 "symbol" => "BTCUSDT",
        //                 "side" => 3,
        //                 "price" => "26910.4",
        //                 "vol" => "1",
        //                 "exec_type" => "Taker",
        //                 "profit" => false,
        //                 "create_time" => 1695961596692,
        //                 "realised_profit" => "-0.0003",
        //                 "paid_fees" => "0.01614624"
        //             ),
        //         ),
        //         "trace" => "4cad855074634097ac6ba5257c47305d.62.16959616054873723"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trades($data, $market, $since, $limit);
    }

    public function fetch_order_trades(string $id, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * @see https://developer-pro.bitmart.com/en/spot/#order-trade-list-v4-signed
         * fetch all the trades made from a single order
         * @param {string} $id order $id
         * @param {string} $symbol unified market $symbol
         * @param {int} [$since] the earliest time in ms to fetch trades for
         * @param {int} [$limit] the maximum number of trades to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?$id=trade-structure trade structures~
         */
        $this->load_markets();
        $request = array(
            'orderId' => $id,
        );
        $response = $this->privatePostSpotV4QueryOrderTrades (array_merge($request, $params));
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_trades($data, null, $since, $limit);
    }

    public function custom_parse_balance($response, $marketType): array {
        $data = $this->safe_value($response, 'data', array());
        $wallet = null;
        if ($marketType === 'swap') {
            $wallet = $this->safe_value($response, 'data', array());
        } elseif ($marketType === 'margin') {
            $wallet = $this->safe_value($data, 'symbols', array());
        } else {
            $wallet = $this->safe_value($data, 'wallet', array());
        }
        $result = array( 'info' => $response );
        if ($marketType === 'margin') {
            for ($i = 0; $i < count($wallet); $i++) {
                $entry = $wallet[$i];
                $marketId = $this->safe_string($entry, 'symbol');
                $symbol = $this->safe_symbol($marketId, null, '_');
                $base = $this->safe_value($entry, 'base', array());
                $quote = $this->safe_value($entry, 'quote', array());
                $baseCode = $this->safe_currency_code($this->safe_string($base, 'currency'));
                $quoteCode = $this->safe_currency_code($this->safe_string($quote, 'currency'));
                $subResult = array();
                $subResult[$baseCode] = $this->parse_balance_helper($base);
                $subResult[$quoteCode] = $this->parse_balance_helper($quote);
                $result[$symbol] = $this->safe_balance($subResult);
            }
            return $result;
        } else {
            for ($i = 0; $i < count($wallet); $i++) {
                $balance = $wallet[$i];
                $currencyId = $this->safe_string_2($balance, 'id', 'currency');
                $currencyId = $this->safe_string($balance, 'coin_code', $currencyId);
                $code = $this->safe_currency_code($currencyId);
                $account = $this->account();
                $account['free'] = $this->safe_string_2($balance, 'available', 'available_balance');
                $account['used'] = $this->safe_string_2($balance, 'frozen', 'frozen_balance');
                $result[$code] = $account;
            }
            return $this->safe_balance($result);
        }
    }

    public function parse_balance_helper($entry) {
        $account = $this->account();
        $account['used'] = $this->safe_string($entry, 'frozen');
        $account['free'] = $this->safe_string($entry, 'available');
        $account['total'] = $this->safe_string($entry, 'total_asset');
        $debt = $this->safe_string($entry, 'borrow_unpaid');
        $interest = $this->safe_string($entry, 'interest_unpaid');
        $account['debt'] = Precise::string_add($debt, $interest);
        return $account;
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://developer-pro.bitmart.com/en/spot/#get-spot-wallet-balance
         * @see https://developer-pro.bitmart.com/en/futures/#get-contract-assets-detail
         * @see https://developer-pro.bitmart.com/en/spot/#get-account-balance
         * @see https://developer-pro.bitmart.com/en/spot/#get-margin-account-details-isolated
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $marketType = null;
        list($marketType, $params) = $this->handle_market_type_and_params('fetchBalance', null, $params);
        $marginMode = $this->safe_string($params, 'marginMode');
        $isMargin = $this->safe_value($params, 'margin', false);
        $params = $this->omit($params, array( 'margin', 'marginMode' ));
        if ($marginMode !== null || $isMargin) {
            $marketType = 'margin';
        }
        $response = null;
        if ($marketType === 'spot') {
            $response = $this->privateGetSpotV1Wallet ($params);
        } elseif ($marketType === 'swap') {
            $response = $this->privateGetContractPrivateAssetsDetail ($params);
        } elseif ($marketType === 'account') {
            $response = $this->privateGetAccountV1Wallet ($params);
        } elseif ($marketType === 'margin') {
            $response = $this->privateGetSpotV1MarginIsolatedAccount ($params);
        } else {
            throw new NotSupported($this->id . ' fetchBalance() does not support ' . $marketType . ' markets, only spot, swap and account and margin markets are accepted');
        }
        //
        // spot
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"39069916-72f9-44c7-acde-2ad5afd21cad",
        //         "data":{
        //             "wallet":array(
        //                 array("id":"BTC","name":"Bitcoin","available":"0.00000062","frozen":"0.00000000"),
        //                 array("id":"ETH","name":"Ethereum","available":"0.00002277","frozen":"0.00000000"),
        //                 array("id":"BMX","name":"BitMart Token","available":"0.00000000","frozen":"0.00000000")
        //             )
        //         }
        //     }
        //
        // account
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"5c3b7fc7-93b2-49ef-bb59-7fdc56915b59",
        //         "data":{
        //             "wallet":array(
        //                 array("currency":"BTC","name":"Bitcoin","available":"0.00000062","frozen":"0.00000000"),
        //                 array("currency":"ETH","name":"Ethereum","available":"0.00002277","frozen":"0.00000000")
        //             )
        //         }
        //     }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             array(
        //                 "currency" => "USDT",
        //                 "available_balance" => "0",
        //                 "frozen_balance" => "0",
        //                 "unrealized" => "0",
        //                 "equity" => "0",
        //                 "position_deposit" => "0"
        //             ),
        //             ...
        //         ),
        //         "trace" => "f9da3a39-cf45-42e7-914d-294f565dfc33"
        //     }
        //
        // margin
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "61dd6ab265c04064b72d8bc9b205f741.71.16701055600915302",
        //         "data" => {
        //             "symbols" => array(
        //                 {
        //                     "symbol" => "BTC_USDT",
        //                     "risk_rate" => "999.00",
        //                     "risk_level" => "1",
        //                     "buy_enabled" => false,
        //                     "sell_enabled" => false,
        //                     "liquidate_price" => null,
        //                     "liquidate_rate" => "1.15",
        //                     "base" => array(
        //                         "currency" => "BTC",
        //                         "borrow_enabled" => true,
        //                         "borrowed" => "0.00000000",
        //                         "available" => "0.00000000",
        //                         "frozen" => "0.00000000",
        //                         "net_asset" => "0.00000000",
        //                         "net_assetBTC" => "0.00000000",
        //                         "total_asset" => "0.00000000",
        //                         "borrow_unpaid" => "0.00000000",
        //                         "interest_unpaid" => "0.00000000"
        //                     ),
        //                     "quote" => {
        //                         "currency" => "USDT",
        //                         "borrow_enabled" => true,
        //                         "borrowed" => "0.00000000",
        //                         "available" => "20.00000000",
        //                         "frozen" => "0.00000000",
        //                         "net_asset" => "20.00000000",
        //                         "net_assetBTC" => "0.00118008",
        //                         "total_asset" => "20.00000000",
        //                         "borrow_unpaid" => "0.00000000",
        //                         "interest_unpaid" => "0.00000000"
        //                     }
        //                 }
        //             )
        //         }
        //     }
        //
        return $this->custom_parse_balance($response, $marketType);
    }

    public function parse_trading_fee($fee, ?array $market = null) {
        //
        //     {
        //         "symbol" => "ETH_USDT",
        //         "taker_fee_rate" => "0.0025",
        //         "maker_fee_rate" => "0.0025"
        //     }
        //
        $marketId = $this->safe_string($fee, 'symbol');
        $symbol = $this->safe_symbol($marketId);
        return array(
            'info' => $fee,
            'symbol' => $symbol,
            'maker' => $this->safe_number($fee, 'maker_fee_rate'),
            'taker' => $this->safe_number($fee, 'taker_fee_rate'),
        );
    }

    public function fetch_trading_fee(string $symbol, $params = array ()) {
        /**
         * fetch the trading fees for a $market
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=fee-structure fee structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['spot']) {
            throw new NotSupported($this->id . ' fetchTradingFee() does not support ' . $market['type'] . ' orders, only spot orders are accepted');
        }
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateGetSpotV1TradeFee (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => "1000",
        //         "trace" => "5a6f1e40-37fe-4849-a494-03279fadcc62",
        //         "data" => {
        //             "symbol" => "ETH_USDT",
        //             "taker_fee_rate" => "0.0025",
        //             "maker_fee_rate" => "0.0025"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data');
        return $this->parse_trading_fee($data);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // createOrder
        //
        //     {
        //         "order_id" => 2707217580
        //     }
        //
        // swap
        //   "data" => array(
        //       "order_id" => 231116359426639,
        //       "price" => "market price"
        //    ),
        //
        // cancelOrder
        //
        //     "2707217580" // $order $id
        //
        // spot fetchOrder, fetchOrdersByStatus, fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "order_id":1736871726781,
        //         "symbol":"BTC_USDT",
        //         "create_time":1591096004000,
        //         "side":"sell",
        //         "type":"market", // limit, $market, limit_maker, ioc
        //         "price":"0.00",
        //         "price_avg":"0.00",
        //         "size":"0.02000",
        //         "notional":"0.00000000",
        //         "filled_notional":"0.00000000",
        //         "filled_size":"0.00000",
        //         "status":"8"
        //     }
        //
        // spot v4
        //    {
        //        "orderId" : "118100034543076010",
        //        "clientOrderId" : "118100034543076010",
        //        "symbol" : "BTC_USDT",
        //        "side" : "buy",
        //        "orderMode" : "spot",
        //        "type" : "limit",
        //        "state" : "filled",
        //        "price" : "48800.00",
        //        "priceAvg" : "39999.00",
        //        "size" : "0.10000",
        //        "filledSize" : "0.10000",
        //        "notional" : "4880.00000000",
        //        "filledNotional" : "3999.90000000",
        //        "createTime" : 1681701557927,
        //        "updateTime" : 1681701559408
        //    }
        //
        // swap => fetchOrder, fetchOpenOrders, fetchClosedOrders
        //
        //     {
        //         "order_id" => "230935812485489",
        //         "client_order_id" => "",
        //         "price" => "24000",
        //         "size" => "1",
        //         "symbol" => "BTCUSDT",
        //         "state" => 2,
        //         "side" => 1,
        //         "type" => "limit",
        //         "leverage" => "10",
        //         "open_type" => "isolated",
        //         "deal_avg_price" => "0",
        //         "deal_size" => "0",
        //         "create_time" => 1695702258629,
        //         "update_time" => 1695702258642,
        //         "activation_price_type" => 0,
        //         "activation_price" => "",
        //         "callback_rate" => ""
        //     }
        //
        $id = null;
        if (gettype($order) === 'string') {
            $id = $order;
            $order = array();
        }
        $id = $this->safe_string_2($order, 'order_id', 'orderId', $id);
        $timestamp = $this->safe_integer_2($order, 'create_time', 'createTime');
        $marketId = $this->safe_string($order, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $market = $this->safe_market($symbol, $market);
        $orderType = $this->safe_string($market, 'type', 'spot');
        $type = $this->safe_string($order, 'type');
        $timeInForce = null;
        $postOnly = null;
        if ($type === 'limit_maker') {
            $type = 'limit';
            $postOnly = true;
            $timeInForce = 'PO';
        }
        if ($type === 'ioc') {
            $type = 'limit';
            $timeInForce = 'IOC';
        }
        $priceString = $this->safe_string($order, 'price');
        if ($priceString === 'market price') {
            $priceString = null;
        }
        $trailingActivationPrice = $this->safe_number($order, 'activation_price');
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => $this->safe_string($order, 'client_order_id'),
            'info' => $order,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => $this->safe_integer($order, 'update_time'),
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => $timeInForce,
            'postOnly' => $postOnly,
            'side' => $this->parse_order_side($this->safe_string($order, 'side')),
            'price' => $this->omit_zero($priceString),
            'stopPrice' => $trailingActivationPrice,
            'triggerPrice' => $trailingActivationPrice,
            'amount' => $this->omit_zero($this->safe_string($order, 'size')),
            'cost' => $this->safe_string_2($order, 'filled_notional', 'filledNotional'),
            'average' => $this->safe_string_n($order, array( 'price_avg', 'priceAvg', 'deal_avg_price' )),
            'filled' => $this->safe_string_n($order, array( 'filled_size', 'filledSize', 'deal_size' )),
            'remaining' => null,
            'status' => $this->parse_order_status_by_type($orderType, $this->safe_string_2($order, 'status', 'state')),
            'fee' => null,
            'trades' => null,
        ), $market);
    }

    public function parse_order_side($side) {
        $sides = array(
            '1' => 'buy',
            '2' => 'buy',
            '3' => 'sell',
            '4' => 'sell',
        );
        return $this->safe_string($sides, $side, $side);
    }

    public function parse_order_status_by_type($type, $status) {
        $statusesByType = array(
            'spot' => array(
                '1' => 'rejected', // Order failure
                '2' => 'open', // Placing order
                '3' => 'rejected', // Order failure, Freeze failure
                '4' => 'open', // Order success, Pending for fulfilment
                '5' => 'open', // Partially filled
                '6' => 'closed', // Fully filled
                '7' => 'canceled', // Canceling
                '8' => 'canceled', // Canceled
                'new' => 'open',
                'partially_filled' => 'open',
                'filled' => 'closed',
                'partially_canceled' => 'canceled',
            ),
            'swap' => array(
                '1' => 'open', // Submitting
                '2' => 'open', // Commissioned
                '4' => 'closed', // Completed
            ),
        );
        $statuses = $this->safe_value($statusesByType, $type, array());
        return $this->safe_string($statuses, $status, $status);
    }

    public function create_market_buy_order_with_cost(string $symbol, $cost, $params = array ()) {
        /**
         * create a $market buy order by providing the $symbol and $cost
         * @see https://developer-pro.bitmart.com/en/spot/#new-order-v2-signed
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {float} $cost how much you want to trade in units of the quote currency
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['spot']) {
            throw new NotSupported($this->id . ' createMarketBuyOrderWithCost() supports spot orders only');
        }
        $params['createMarketBuyOrderRequiresPrice'] = false;
        return $this->create_order($symbol, 'market', 'buy', $cost, null, $params);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade $order
         * @see https://developer-pro.bitmart.com/en/spot/#new-$order-v2-signed
         * @see https://developer-pro.bitmart.com/en/spot/#place-margin-$order
         * @see https://developer-pro.bitmart.com/en/futures/#submit-$order-signed
         * @see https://developer-pro.bitmart.com/en/futures/#submit-plan-$order-signed
         * @param {string} $symbol unified $symbol of the $market to create an $order in
         * @param {string} $type 'market', 'limit' or 'trailing' for swap markets only
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float} [$price] the $price at which the $order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'cross' or 'isolated'
         * @param {string} [$params->leverage] *swap only* leverage level
         * @param {string} [$params->clientOrderId] client $order id of the $order
         * @param {boolean} [$params->reduceOnly] *swap only* reduce only
         * @param {boolean} [$params->postOnly] make sure the $order is posted to the $order book and not matched immediately
         * @param {string} [$params->triggerPrice] *swap only* the $price to trigger a stop $order
         * @param {int} [$params->price_type] *swap only* 1 => last $price, 2 => fair $price, default is 1
         * @param {int} [$params->price_way] *swap only* 1 => $price way long, 2 => $price way short
         * @param {int} [$params->activation_price_type] *swap trailing $order only* 1 => last $price, 2 => fair $price, default is 1
         * @param {string} [$params->trailingPercent] *swap only* the percent to trail away from the current $market $price, min 0.1 max 5
         * @param {string} [$params->trailingTriggerPrice] *swap only* the $price to trigger a trailing $order, default uses the $price argument
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=$order-structure $order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $result = $this->handle_margin_mode_and_params('createOrder', $params);
        $marginMode = $this->safe_string($result, 0);
        $triggerPrice = $this->safe_string_n($params, array( 'triggerPrice', 'stopPrice', 'trigger_price' ));
        $isTriggerOrder = $triggerPrice !== null;
        $response = null;
        if ($market['spot']) {
            $spotRequest = $this->create_spot_order_request($symbol, $type, $side, $amount, $price, $params);
            if ($marginMode === 'isolated') {
                $response = $this->privatePostSpotV1MarginSubmitOrder ($spotRequest);
            } else {
                $response = $this->privatePostSpotV2SubmitOrder ($spotRequest);
            }
        } else {
            $swapRequest = $this->create_swap_order_request($symbol, $type, $side, $amount, $price, $params);
            if ($isTriggerOrder) {
                $response = $this->privatePostContractPrivateSubmitPlanOrder ($swapRequest);
            } else {
                $response = $this->privatePostContractPrivateSubmitOrder ($swapRequest);
            }
        }
        //
        // spot and margin
        //
        //     {
        //         "code" => 1000,
        //         "trace":"886fb6ae-456b-4654-b4e0-d681ac05cea1",
        //         "message" => "OK",
        //         "data" => {
        //             "order_id" => 2707217580
        //         }
        //     }
        //
        // swap
        // array("code":1000,"message":"Ok","data":array("order_id":231116359426639,"price":"market $price"),"trace":"7f9c94e10f9d4513bc08a7bfc2a5559a.62.16996369620521911")
        //
        $data = $this->safe_value($response, 'data', array());
        $order = $this->parse_order($data, $market);
        $order['type'] = $type;
        $order['side'] = $side;
        $order['amount'] = $amount;
        $order['price'] = $price;
        return $order;
    }

    public function create_swap_order_request(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * @ignore
         * create a trade order
         * @see https://developer-pro.bitmart.com/en/futures/#submit-order-signed
         * @see https://developer-pro.bitmart.com/en/futures/#submit-plan-order-signed
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market', 'limit' or 'trailing'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->leverage] $leverage level
         * @param {boolean} [$params->reduceOnly] *swap only* reduce only
         * @param {string} [$params->marginMode] 'cross' or 'isolated', default is 'cross'
         * @param {string} [$params->clientOrderId] client order id of the order
         * @param {string} [$params->triggerPrice] *swap only* the $price to trigger a stop order
         * @param {int} [$params->price_type] *swap only* 1 => last $price, 2 => fair $price, default is 1
         * @param {int} [$params->price_way] *swap only* 1 => $price way long, 2 => $price way short
         * @param {int} [$params->activation_price_type] *swap trailing order only* 1 => last $price, 2 => fair $price, default is 1
         * @param {string} [$params->trailingPercent] *swap only* the percent to trail away from the current $market $price, min 0.1 max 5
         * @param {string} [$params->trailingTriggerPrice] *swap only* the $price to trigger a trailing order, default uses the $price argument
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'type' => $type,
            'size' => intval($this->amount_to_precision($symbol, $amount)),
        );
        $timeInForce = $this->safe_string($params, 'timeInForce');
        $mode = $this->safe_integer($params, 'mode'); // only for swap
        $isMarketOrder = $type === 'market';
        $postOnly = null;
        $reduceOnly = $this->safe_value($params, 'reduceOnly');
        $isExchangeSpecificPo = ($mode === 4);
        list($postOnly, $params) = $this->handle_post_only($isMarketOrder, $isExchangeSpecificPo, $params);
        $ioc = (($timeInForce === 'IOC') || ($mode === 3));
        $isLimitOrder = ($type === 'limit') || $postOnly || $ioc;
        if ($timeInForce === 'GTC') {
            $request['mode'] = 1;
        } elseif ($timeInForce === 'FOK') {
            $request['mode'] = 2;
        } elseif ($timeInForce === 'IOC') {
            $request['mode'] = 3;
        }
        if ($postOnly) {
            $request['mode'] = 4;
        }
        $triggerPrice = $this->safe_string_n($params, array( 'triggerPrice', 'stopPrice', 'trigger_price' ));
        $isTriggerOrder = $triggerPrice !== null;
        $trailingTriggerPrice = $this->safe_string_2($params, 'trailingTriggerPrice', 'activation_price', $price);
        $trailingPercent = $this->safe_string_2($params, 'trailingPercent', 'callback_rate');
        $isTrailingPercentOrder = $trailingPercent !== null;
        if ($isLimitOrder) {
            $request['price'] = $this->price_to_precision($symbol, $price);
        } elseif ($type === 'trailing' || $isTrailingPercentOrder) {
            $request['callback_rate'] = $trailingPercent;
            $request['activation_price'] = $this->price_to_precision($symbol, $trailingTriggerPrice);
            $request['activation_price_type'] = $this->safe_integer($params, 'activation_price_type', 1);
        }
        if ($isTriggerOrder) {
            $request['executive_price'] = $this->price_to_precision($symbol, $price);
            $request['trigger_price'] = $this->price_to_precision($symbol, $triggerPrice);
            $request['price_type'] = $this->safe_integer($params, 'price_type', 1);
            if ($side === 'buy') {
                if ($reduceOnly) {
                    $request['price_way'] = 2;
                } else {
                    $request['price_way'] = 1;
                }
            } elseif ($side === 'sell') {
                if ($reduceOnly) {
                    $request['price_way'] = 1;
                } else {
                    $request['price_way'] = 2;
                }
            }
        }
        if ($side === 'buy') {
            if ($reduceOnly) {
                $request['side'] = 2; // buy close short
            } else {
                $request['side'] = 1; // buy open long
            }
        } elseif ($side === 'sell') {
            if ($reduceOnly) {
                $request['side'] = 3; // sell close long
            } else {
                $request['side'] = 4; // sell open short
            }
        }
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('createOrder', $params, 'cross');
        $request['open_type'] = $marginMode;
        $clientOrderId = $this->safe_string($params, 'clientOrderId');
        if ($clientOrderId !== null) {
            $params = $this->omit($params, 'clientOrderId');
            $request['client_order_id'] = $clientOrderId;
        }
        $leverage = $this->safe_integer($params, 'leverage', 1);
        $params = $this->omit($params, array( 'timeInForce', 'postOnly', 'reduceOnly', 'leverage', 'trailingTriggerPrice', 'trailingPercent', 'triggerPrice', 'stopPrice' ));
        $request['leverage'] = $this->number_to_string($leverage);
        return array_merge($request, $params);
    }

    public function create_spot_order_request(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * @ignore
         * create a spot order $request
         * @see https://developer-pro.bitmart.com/en/spot/#place-spot-order
         * @see https://developer-pro.bitmart.com/en/spot/#place-margin-order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'cross' or 'isolated'
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'side' => $side,
            'type' => $type,
        );
        $timeInForce = $this->safe_string($params, 'timeInForce');
        if ($timeInForce === 'FOK') {
            throw new InvalidOrder($this->id . ' createOrder() only accepts $timeInForce parameter values of IOC or PO');
        }
        $mode = $this->safe_integer($params, 'mode'); // only for swap
        $isMarketOrder = $type === 'market';
        $postOnly = null;
        $isExchangeSpecificPo = ($type === 'limit_maker') || ($mode === 4);
        list($postOnly, $params) = $this->handle_post_only($isMarketOrder, $isExchangeSpecificPo, $params);
        $params = $this->omit($params, array( 'timeInForce', 'postOnly' ));
        $ioc = (($timeInForce === 'IOC') || ($type === 'ioc'));
        $isLimitOrder = ($type === 'limit') || $postOnly || $ioc;
        // method = 'privatePostSpotV2SubmitOrder';
        if ($isLimitOrder) {
            $request['size'] = $this->amount_to_precision($symbol, $amount);
            $request['price'] = $this->price_to_precision($symbol, $price);
        } elseif ($isMarketOrder) {
            // for $market buy it requires the $amount of quote currency to spend
            if ($side === 'buy') {
                $notional = $this->safe_number_2($params, 'cost', 'notional');
                $params = $this->omit($params, 'cost');
                $createMarketBuyOrderRequiresPrice = true;
                list($createMarketBuyOrderRequiresPrice, $params) = $this->handle_option_and_params($params, 'createOrder', 'createMarketBuyOrderRequiresPrice', true);
                if ($createMarketBuyOrderRequiresPrice) {
                    if (($price === null) && ($notional === null)) {
                        throw new InvalidOrder($this->id . ' createOrder() requires the $price argument for $market buy orders to calculate the total cost to spend ($amount * $price), alternatively set the $createMarketBuyOrderRequiresPrice option or param to false and pass the cost to spend in the $amount argument or in the "notional" extra parameter (the exchange-specific behaviour)');
                    } else {
                        $amountString = $this->number_to_string($amount);
                        $priceString = $this->number_to_string($price);
                        $notional = $this->parse_number(Precise::string_mul($amountString, $priceString));
                    }
                } else {
                    $notional = ($notional === null) ? $amount : $notional;
                }
                $request['notional'] = $this->decimal_to_precision($notional, TRUNCATE, $market['precision']['price'], $this->precisionMode);
            } elseif ($side === 'sell') {
                $request['size'] = $this->amount_to_precision($symbol, $amount);
            }
        }
        if ($postOnly) {
            $request['type'] = 'limit_maker';
        }
        if ($ioc) {
            $request['type'] = 'ioc';
        }
        return array_merge($request, $params);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open $order
         * @see https://developer-pro.bitmart.com/en/futures/#cancel-$order-signed
         * @see https://developer-pro.bitmart.com/en/spot/#cancel-$order-v3-signed
         * @see https://developer-pro.bitmart.com/en/futures/#cancel-plan-$order-signed
         * @see https://developer-pro.bitmart.com/en/futures/#cancel-plan-$order-signed
         * @param {string} $id $order $id
         * @param {string} $symbol unified $symbol of the $market the $order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->clientOrderId] *spot only* the client $order $id of the $order to cancel
         * @param {boolean} [$params->stop] *swap only* whether the $order is a $stop $order
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=$order-structure $order structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' cancelOrder() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $clientOrderId = $this->safe_string_2($params, 'clientOrderId', 'client_order_id');
        if ($clientOrderId !== null) {
            $request['client_order_id'] = $clientOrderId;
        } else {
            $request['order_id'] = (string) $id;
        }
        $params = $this->omit($params, array( 'clientOrderId' ));
        $response = null;
        if ($market['spot']) {
            $response = $this->privatePostSpotV3CancelOrder (array_merge($request, $params));
        } else {
            $stop = $this->safe_value_2($params, 'stop', 'trigger');
            $params = $this->omit($params, array( 'stop', 'trigger' ));
            if (!$stop) {
                $response = $this->privatePostContractPrivateCancelOrder (array_merge($request, $params));
            } else {
                $response = $this->privatePostContractPrivateCancelPlanOrder (array_merge($request, $params));
            }
        }
        // swap
        // array("code":1000,"message":"Ok","trace":"7f9c94e10f9d4513bc08a7bfc2a5559a.55.16959817848001851")
        //
        // spot
        //
        //     {
        //         "code" => 1000,
        //         "trace":"886fb6ae-456b-4654-b4e0-d681ac05cea1",
        //         "message" => "OK",
        //         "data" => {
        //             "result" => true
        //         }
        //     }
        //
        // spot alternative
        //
        //     {
        //         "code" => 1000,
        //         "trace":"886fb6ae-456b-4654-b4e0-d681ac05cea1",
        //         "message" => "OK",
        //         "data" => true
        //     }
        //
        if ($market['swap']) {
            return $response;
        }
        $data = $this->safe_value($response, 'data');
        if ($data === true) {
            return $this->parse_order($id, $market);
        }
        $succeeded = $this->safe_value($data, 'succeed');
        if ($succeeded !== null) {
            $id = $this->safe_string($succeeded, 0);
            if ($id === null) {
                throw new InvalidOrder($this->id . ' cancelOrder() failed to cancel ' . $symbol . ' $order $id ' . $id);
            }
        } else {
            $result = $this->safe_value($data, 'result');
            if (!$result) {
                throw new InvalidOrder($this->id . ' cancelOrder() ' . $symbol . ' $order $id ' . $id . ' is filled or canceled');
            }
        }
        $order = $this->parse_order($id, $market);
        return array_merge($order, array( 'id' => $id ));
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders in a $market
         * @see https://developer-pro.bitmart.com/en/spot/#cancel-all-orders
         * @see https://developer-pro.bitmart.com/en/futures/#cancel-all-orders-signed
         * @param {string} $symbol unified $market $symbol of the $market to cancel orders in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->side] *spot only* 'buy' or 'sell'
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $request = array();
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $response = null;
        $type = null;
        list($type, $params) = $this->handle_market_type_and_params('cancelAllOrders', $market, $params);
        if ($type === 'spot') {
            $response = $this->privatePostSpotV1CancelOrders (array_merge($request, $params));
        } elseif ($type === 'swap') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' cancelAllOrders() requires a $symbol argument');
            }
            $response = $this->privatePostContractPrivateCancelOrders (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => 1000,
        //         "trace":"886fb6ae-456b-4654-b4e0-d681ac05cea1",
        //         "message" => "OK",
        //         "data" => array()
        //     }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "trace" => "7f9c94e10f9d4513bc08a7bfc2a5559a.70.16954131323145323"
        //     }
        //
        return $response;
    }

    public function fetch_orders_by_status($status, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrdersByStatus() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['spot']) {
            throw new NotSupported($this->id . ' fetchOrdersByStatus() does not support ' . $market['type'] . ' $orders, only spot $orders are accepted');
        }
        $request = array(
            'symbol' => $market['id'],
            'offset' => 1, // max offset * $limit < 500
            'N' => 100, // max $limit is 100
        );
        if ($status === 'open') {
            $request['status'] = 9;
        } elseif ($status === 'closed') {
            $request['status'] = 6;
        } elseif ($status === 'canceled') {
            $request['status'] = 8;
        } else {
            $request['status'] = $status;
        }
        $response = $this->privateGetSpotV3Orders (array_merge($request, $params));
        //
        // spot
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"70e7d427-7436-4fb8-8cdd-97e1f5eadbe9",
        //         "data":{
        //             "current_page":1,
        //             "orders":array(
        //                 {
        //                     "order_id":2147601241,
        //                     "symbol":"BTC_USDT",
        //                     "create_time":1591099963000,
        //                     "side":"sell",
        //                     "type":"limit",
        //                     "price":"9000.00",
        //                     "price_avg":"0.00",
        //                     "size":"1.00000",
        //                     "notional":"9000.00000000",
        //                     "filled_notional":"0.00000000",
        //                     "filled_size":"0.00000",
        //                     "status":"4"
        //                 }
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $orders = $this->safe_value($data, 'orders', array());
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * @see https://developer-pro.bitmart.com/en/spot/#current-open-orders-v4-signed
         * @see https://developer-pro.bitmart.com/en/futures/#get-all-open-orders-keyed
         * @see https://developer-pro.bitmart.com/en/futures/#get-all-current-plan-orders-keyed
         * fetch all unfilled currently open orders
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch open orders for
         * @param {int} [$limit] the maximum number of open order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {boolean} [$params->marginMode] *spot* whether to fetch trades for margin orders or spot orders, defaults to spot orders (only isolated margin orders are supported)
         * @param {int} [$params->until] *spot* the latest time in ms to fetch orders for
         * @param {string} [$params->type] *swap* order $type, 'limit' or 'market'
         * @param {string} [$params->order_state] *swap* the order state, 'all' or 'partially_filled', default is 'all'
         * @param {string} [$params->orderType] *swap only* 'limit', 'market', or 'trailing'
         * @param {boolean} [$params->trailing] *swap only* set to true if you want to fetch $trailing orders
         * @param {boolean} [$params->trigger] *swap only* set to true if you want to fetch trigger orders
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $type = null;
        $response = null;
        list($type, $params) = $this->handle_market_type_and_params('fetchOpenOrders', $market, $params);
        if ($type === 'spot') {
            $marginMode = null;
            list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchOpenOrders', $params);
            if ($marginMode === 'isolated') {
                $request['orderMode'] = 'iso_margin';
            }
            if ($since !== null) {
                $request['startTime'] = $since;
            }
            $until = $this->safe_integer_2($params, 'until', 'endTime');
            if ($until !== null) {
                $params = $this->omit($params, array( 'endTime' ));
                $request['endTime'] = $until;
            }
            $response = $this->privatePostSpotV4QueryOpenOrders (array_merge($request, $params));
        } elseif ($type === 'swap') {
            $isStop = $this->safe_value_2($params, 'stop', 'trigger');
            $params = $this->omit($params, array( 'stop', 'trigger' ));
            if ($isStop) {
                $response = $this->privateGetContractPrivateCurrentPlanOrder (array_merge($request, $params));
            } else {
                $trailing = $this->safe_value($params, 'trailing', false);
                $orderType = $this->safe_string($params, 'orderType');
                $params = $this->omit($params, array( 'orderType', 'trailing' ));
                if ($trailing) {
                    $orderType = 'trailing';
                }
                if ($orderType !== null) {
                    $request['type'] = $orderType;
                }
                $response = $this->privateGetContractPrivateGetOpenOrders (array_merge($request, $params));
            }
        } else {
            throw new NotSupported($this->id . ' fetchOpenOrders() does not support ' . $type . ' orders, only spot and swap orders are accepted');
        }
        //
        // spot
        //
        //     {
        //         "code" => 1000,
        //         "message" => "success",
        //         "data" => array(
        //             {
        //                 "orderId" => "183299373022163211",
        //                 "clientOrderId" => "183299373022163211",
        //                 "symbol" => "BTC_USDT",
        //                 "side" => "buy",
        //                 "orderMode" => "spot",
        //                 "type" => "limit",
        //                 "state" => "new",
        //                 "price" => "25000.00",
        //                 "priceAvg" => "0.00",
        //                 "size" => "0.00020",
        //                 "filledSize" => "0.00000",
        //                 "notional" => "5.00000000",
        //                 "filledNotional" => "0.00000000",
        //                 "createTime" => 1695703703338,
        //                 "updateTime" => 1695703703359
        //             }
        //         ),
        //         "trace" => "15f11d48e3234c81a2e786cr2e7a38e6.71.16957022303515933"
        //     }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             {
        //                 "order_id" => "230935812485489",
        //                 "client_order_id" => "",
        //                 "price" => "24000",
        //                 "size" => "1",
        //                 "symbol" => "BTCUSDT",
        //                 "state" => 2,
        //                 "side" => 1,
        //                 "type" => "limit",
        //                 "leverage" => "10",
        //                 "open_type" => "isolated",
        //                 "deal_avg_price" => "0",
        //                 "deal_size" => "0",
        //                 "create_time" => 1695702258629,
        //                 "update_time" => 1695702258642
        //             }
        //         ),
        //         "trace" => "7f9d94g10f9d4513bc08a7rfc3a5559a.71.16957022303515933"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * @see https://developer-pro.bitmart.com/en/spot/#account-orders-v4-signed
         * @see https://developer-pro.bitmart.com/en/futures/#get-order-history-keyed
         * fetches information on multiple closed orders made by the user
         * @param {string} $symbol unified $market $symbol of the $market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->until] timestamp in ms of the latest entry
         * @param {string} [$params->marginMode] *spot only* 'cross' or 'isolated', for margin trading
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $market = null;
        $request = array();
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        $type = null;
        list($type, $params) = $this->handle_market_type_and_params('fetchClosedOrders', $market, $params);
        if ($type !== 'spot') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchClosedOrders() requires a $symbol argument');
            }
        }
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('fetchClosedOrders', $params);
        if ($marginMode === 'isolated') {
            $request['orderMode'] = 'iso_margin';
        }
        $startTimeKey = ($type === 'spot') ? 'startTime' : 'start_time';
        if ($since !== null) {
            $request[$startTimeKey] = $since;
        }
        $endTimeKey = ($type === 'spot') ? 'endTime' : 'end_time';
        $until = $this->safe_integer_2($params, 'until', $endTimeKey);
        if ($until !== null) {
            $params = $this->omit($params, array( 'until' ));
            $request[$endTimeKey] = $until;
        }
        $response = null;
        if ($type === 'spot') {
            $response = $this->privatePostSpotV4QueryHistoryOrders (array_merge($request, $params));
        } else {
            $response = $this->privateGetContractPrivateOrderHistory (array_merge($request, $params));
        }
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_orders($data, $market, $since, $limit);
    }

    public function fetch_canceled_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetches information on multiple canceled orders made by the user
         * @param {string} $symbol unified market $symbol of the market orders were made in
         * @param {int} [$since] timestamp in ms of the earliest order, default is null
         * @param {int} [$limit] max number of orders to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        return $this->fetch_orders_by_status('canceled', $symbol, $since, $limit, $params);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @see https://developer-pro.bitmart.com/en/spot/#query-order-by-$id-v4-signed
         * @see https://developer-pro.bitmart.com/en/spot/#query-order-by-clientorderid-v4-signed
         * @see https://developer-pro.bitmart.com/en/futures/#get-order-detail-keyed
         * @param {string} $id the $id of the order
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->clientOrderId] *spot* fetch the order by client order $id instead of order $id
         * @param {string} [$params->orderType] *swap only* 'limit', 'market', 'liquidate', 'bankruptcy', 'adl' or 'trailing'
         * @param {boolean} [$params->trailing] *swap only* set to true if you want to fetch a $trailing order
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $request = array();
        $type = null;
        $market = null;
        $response = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
        }
        list($type, $params) = $this->handle_market_type_and_params('fetchOrder', $market, $params);
        if ($type === 'spot') {
            $clientOrderId = $this->safe_string($params, 'clientOrderId');
            if (!$clientOrderId) {
                $request['orderId'] = $id;
            }
            if ($clientOrderId !== null) {
                $response = $this->privatePostSpotV4QueryClientOrder (array_merge($request, $params));
            } else {
                $response = $this->privatePostSpotV4QueryOrder (array_merge($request, $params));
            }
        } elseif ($type === 'swap') {
            if ($symbol === null) {
                throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol argument');
            }
            $trailing = $this->safe_value($params, 'trailing', false);
            $orderType = $this->safe_string($params, 'orderType');
            $params = $this->omit($params, array( 'orderType', 'trailing' ));
            if ($trailing) {
                $orderType = 'trailing';
            }
            if ($orderType !== null) {
                $request['type'] = $orderType;
            }
            $request['symbol'] = $market['id'];
            $request['order_id'] = $id;
            $response = $this->privateGetContractPrivateOrder (array_merge($request, $params));
        }
        //
        // spot
        //
        //     {
        //         "code" => 1000,
        //         "message" => "success",
        //         "data" => array(
        //             "orderId" => "183347420821295423",
        //             "clientOrderId" => "183347420821295423",
        //             "symbol" => "BTC_USDT",
        //             "side" => "buy",
        //             "orderMode" => "spot",
        //             "type" => "limit",
        //             "state" => "new",
        //             "price" => "24000.00",
        //             "priceAvg" => "0.00",
        //             "size" => "0.00022",
        //             "filledSize" => "0.00000",
        //             "notional" => "5.28000000",
        //             "filledNotional" => "0.00000000",
        //             "createTime" => 1695783014734,
        //             "updateTime" => 1695783014762
        //         ),
        //         "trace" => "ce3e6422c8b44d5fag855348a68693ed.63.14957831547451715"
        //     }
        //
        // swap
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             "order_id" => "230927283405028",
        //             "client_order_id" => "",
        //             "price" => "23000",
        //             "size" => "1",
        //             "symbol" => "BTCUSDT",
        //             "state" => 2,
        //             "side" => 1,
        //             "type" => "limit",
        //             "leverage" => "10",
        //             "open_type" => "isolated",
        //             "deal_avg_price" => "0",
        //             "deal_size" => "0",
        //             "create_time" => 1695783433600,
        //             "update_time" => 1695783433613
        //         ),
        //         "trace" => "4cad855075664097af6ba5257c47605d.63.14957831547451715"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_order($data, $market);
    }

    public function fetch_deposit_address(string $code, $params = array ()) {
        /**
         * fetch the deposit $address for a $currency associated with this account
         * @param {string} $code unified $currency $code
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=$address-structure $address structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
        );
        if ($code === 'USDT') {
            $defaultNetworks = $this->safe_value($this->options, 'defaultNetworks');
            $defaultNetwork = $this->safe_string_upper($defaultNetworks, $code);
            $networks = $this->safe_value($this->options, 'networks', array());
            $networkInner = $this->safe_string_upper($params, 'network', $defaultNetwork); // this line allows the user to specify either ERC20 or ETH
            $networkInner = $this->safe_string($networks, $networkInner, $networkInner); // handle ERC20>ETH alias
            if ($networkInner !== null) {
                $request['currency'] = $request['currency'] . '-' . $networkInner; // when $network the $currency need to be changed to $currency . '-' . $network https://developer-pro.bitmart.com/en/account/withdraw_apply.html on the end of page
                $params = $this->omit($params, 'network');
            }
        }
        $response = $this->privateGetAccountV1DepositAddress (array_merge($request, $params));
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"0e6edd79-f77f-4251-abe5-83ba75d06c1a",
        //         "data":{
        //             "currency":"USDT-TRC20",
        //             "chain":"USDT-TRC20",
        //             "address":"TGR3ghy2b5VLbyAYrmiE15jasR6aPHTvC5",
        //             "address_memo":""
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $address = $this->safe_string($data, 'address');
        $tag = $this->safe_string($data, 'address_memo');
        $chain = $this->safe_string($data, 'chain');
        $network = null;
        if ($chain !== null) {
            $parts = explode('-', $chain);
            $networkId = $this->safe_string($parts, 1);
            $network = $this->safe_network($networkId);
        }
        $this->check_address($address);
        return array(
            'currency' => $code,
            'address' => $address,
            'tag' => $tag,
            'network' => $network,
            'info' => $response,
        );
    }

    public function safe_network($networkId) {
        // TODO => parse
        return $networkId;
    }

    public function withdraw(string $code, $amount, $address, $tag = null, $params = array ()) {
        /**
         * make a withdrawal
         * @param {string} $code unified $currency $code
         * @param {float} $amount the $amount to withdraw
         * @param {string} $address the $address to withdraw to
         * @param {string} $tag
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$transaction-structure $transaction structure~
         */
        list($tag, $params) = $this->handle_withdraw_tag_and_params($tag, $params);
        $this->check_address($address);
        $this->load_markets();
        $currency = $this->currency($code);
        $request = array(
            'currency' => $currency['id'],
            'amount' => $amount,
            'destination' => 'To Digital Address', // To Digital Address, To Binance, To OKEX
            'address' => $address,
        );
        if ($tag !== null) {
            $request['address_memo'] = $tag;
        }
        if ($code === 'USDT') {
            $defaultNetworks = $this->safe_value($this->options, 'defaultNetworks');
            $defaultNetwork = $this->safe_string_upper($defaultNetworks, $code);
            $networks = $this->safe_value($this->options, 'networks', array());
            $network = $this->safe_string_upper($params, 'network', $defaultNetwork); // this line allows the user to specify either ERC20 or ETH
            $network = $this->safe_string($networks, $network, $network); // handle ERC20>ETH alias
            if ($network !== null) {
                $request['currency'] = $request['currency'] . '-' . $network; // when $network the $currency need to be changed to $currency . '-' . $network https://developer-pro.bitmart.com/en/account/withdraw_apply.html on the end of page
                $params = $this->omit($params, 'network');
            }
        }
        $response = $this->privatePostAccountV1WithdrawApply (array_merge($request, $params));
        //
        //     {
        //         "code" => 1000,
        //         "trace":"886fb6ae-456b-4654-b4e0-d681ac05cea1",
        //         "message" => "OK",
        //         "data" => {
        //             "withdraw_id" => "121212"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data');
        $transaction = $this->parse_transaction($data, $currency);
        return array_merge($transaction, array(
            'code' => $code,
            'address' => $address,
            'tag' => $tag,
        ));
    }

    public function fetch_transactions_by_type($type, ?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        $this->load_markets();
        if ($limit === null) {
            $limit = 50; // max 50
        }
        $request = array(
            'operation_type' => $type, // deposit or withdraw
            'offset' => 1,
            'N' => $limit,
        );
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($code === 'USDT') {
            $defaultNetworks = $this->safe_value($this->options, 'defaultNetworks');
            $defaultNetwork = $this->safe_string_upper($defaultNetworks, $code);
            $networks = $this->safe_value($this->options, 'networks', array());
            $network = $this->safe_string_upper($params, 'network', $defaultNetwork); // this line allows the user to specify either ERC20 or ETH
            $network = $this->safe_string($networks, $network, $network); // handle ERC20>ETH alias
            if ($network !== null) {
                $request['currency'] .= '-' . $network; // when $network the $currency need to be changed to $currency . '-' . $network https://developer-pro.bitmart.com/en/account/withdraw_apply.html on the end of page
                $currency['code'] = $request['currency']; // update $currency $code to filter
                $params = $this->omit($params, 'network');
            }
        }
        $response = $this->privateGetAccountV2DepositWithdrawHistory (array_merge($request, $params));
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"142bf92a-fc50-4689-92b6-590886f90b97",
        //         "data":{
        //             "records":array(
        //                 array(
        //                     "withdraw_id":"1679952",
        //                     "deposit_id":"",
        //                     "operation_type":"withdraw",
        //                     "currency":"BMX",
        //                     "apply_time":1588867374000,
        //                     "arrival_amount":"59.000000000000",
        //                     "fee":"1.000000000000",
        //                     "status":0,
        //                     "address":"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5",
        //                     "address_memo":"",
        //                     "tx_id":""
        //                 ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $records = $this->safe_value($data, 'records', array());
        return $this->parse_transactions($records, $currency, $since, $limit);
    }

    public function fetch_deposit(string $id, ?string $code = null, $params = array ()) {
        /**
         * fetch information on a deposit
         * @param {string} $id deposit $id
         * @param {string} $code not used by bitmart fetchDeposit ()
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?$id=transaction-structure transaction structure~
         */
        $this->load_markets();
        $request = array(
            'id' => $id,
        );
        $response = $this->privateGetAccountV1DepositWithdrawDetail (array_merge($request, $params));
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"f7f74924-14da-42a6-b7f2-d3799dd9a612",
        //         "data":{
        //             "record":{
        //                 "withdraw_id":"",
        //                 "deposit_id":"1679952",
        //                 "operation_type":"deposit",
        //                 "currency":"BMX",
        //                 "apply_time":1588867374000,
        //                 "arrival_amount":"59.000000000000",
        //                 "fee":"1.000000000000",
        //                 "status":0,
        //                 "address":"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5",
        //                 "address_memo":"",
        //                 "tx_id":""
        //             }
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $record = $this->safe_value($data, 'record', array());
        return $this->parse_transaction($record);
    }

    public function fetch_deposits(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all deposits made to an account
         * @param {string} $code unified currency $code
         * @param {int} [$since] the earliest time in ms to fetch deposits for
         * @param {int} [$limit] the maximum number of deposits structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        return $this->fetch_transactions_by_type('deposit', $code, $since, $limit, $params);
    }

    public function fetch_withdrawal(string $id, ?string $code = null, $params = array ()) {
        /**
         * fetch $data on a currency withdrawal via the withdrawal $id
         * @param {string} $id withdrawal $id
         * @param {string} $code not used by bitmart.fetchWithdrawal
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?$id=transaction-structure transaction structure~
         */
        $this->load_markets();
        $request = array(
            'id' => $id,
        );
        $response = $this->privateGetAccountV1DepositWithdrawDetail (array_merge($request, $params));
        //
        //     {
        //         "message":"OK",
        //         "code":1000,
        //         "trace":"f7f74924-14da-42a6-b7f2-d3799dd9a612",
        //         "data":{
        //             "record":{
        //                 "withdraw_id":"1679952",
        //                 "deposit_id":"",
        //                 "operation_type":"withdraw",
        //                 "currency":"BMX",
        //                 "apply_time":1588867374000,
        //                 "arrival_amount":"59.000000000000",
        //                 "fee":"1.000000000000",
        //                 "status":0,
        //                 "address":"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5",
        //                 "address_memo":"",
        //                 "tx_id":""
        //             }
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $record = $this->safe_value($data, 'record', array());
        return $this->parse_transaction($record);
    }

    public function fetch_withdrawals(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all withdrawals made from an account
         * @param {string} $code unified currency $code
         * @param {int} [$since] the earliest time in ms to fetch withdrawals for
         * @param {int} [$limit] the maximum number of withdrawals structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transaction-structure transaction structures~
         */
        return $this->fetch_transactions_by_type('withdraw', $code, $since, $limit, $params);
    }

    public function parse_transaction_status($status) {
        $statuses = array(
            '0' => 'pending', // Create
            '1' => 'pending', // Submitted, waiting for withdrawal
            '2' => 'pending', // Processing
            '3' => 'ok', // Success
            '4' => 'canceled', // Cancel
            '5' => 'failed', // Fail
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transaction($transaction, ?array $currency = null): array {
        //
        // withdraw
        //
        //     {
        //         "withdraw_id" => "121212"
        //     }
        //
        // fetchDeposits, fetchWithdrawals, fetchWithdrawal
        //
        //     {
        //         "withdraw_id":"1679952",
        //         "deposit_id":"",
        //         "operation_type":"withdraw",
        //         "currency":"BMX",
        //         "apply_time":1588867374000,
        //         "arrival_amount":"59.000000000000",
        //         "fee":"1.000000000000",
        //         "status":0,
        //         "address":"0xe57b69a8776b37860407965B73cdFFBDFe668Bb5",
        //         "address_memo":"",
        //         "tx_id":""
        //     }
        //
        $id = null;
        $withdrawId = $this->safe_string($transaction, 'withdraw_id');
        $depositId = $this->safe_string($transaction, 'deposit_id');
        $type = null;
        if (($withdrawId !== null) && ($withdrawId !== '')) {
            $type = 'withdraw';
            $id = $withdrawId;
        } elseif (($depositId !== null) && ($depositId !== '')) {
            $type = 'deposit';
            $id = $depositId;
        }
        $amount = $this->safe_number($transaction, 'arrival_amount');
        $timestamp = $this->safe_integer($transaction, 'apply_time');
        $currencyId = $this->safe_string($transaction, 'currency');
        $code = $this->safe_currency_code($currencyId, $currency);
        $status = $this->parse_transaction_status($this->safe_string($transaction, 'status'));
        $feeCost = $this->safe_number($transaction, 'fee');
        $fee = null;
        if ($feeCost !== null) {
            $fee = array(
                'cost' => $feeCost,
                'currency' => $code,
            );
        }
        $txid = $this->safe_string($transaction, 'tx_id');
        $address = $this->safe_string($transaction, 'address');
        $tag = $this->safe_string($transaction, 'address_memo');
        return array(
            'info' => $transaction,
            'id' => $id,
            'currency' => $code,
            'amount' => $amount,
            'network' => null,
            'address' => $address,
            'addressFrom' => null,
            'addressTo' => null,
            'tag' => $tag,
            'tagFrom' => null,
            'tagTo' => null,
            'status' => $status,
            'type' => $type,
            'updated' => null,
            'txid' => $txid,
            'internal' => null,
            'comment' => null,
            'timestamp' => ($timestamp !== 0) ? $timestamp : null,
            'datetime' => ($timestamp !== 0) ? $this->iso8601($timestamp) : null,
            'fee' => $fee,
        );
    }

    public function repay_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        /**
         * repay borrowed margin and interest
         * @see https://developer-pro.bitmart.com/en/spot/#margin-repay-isolated
         * @param {string} $symbol unified $market $symbol
         * @param {string} $code unified $currency $code of the $currency to repay
         * @param {string} $amount the $amount to repay
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $currency = $this->currency($code);
        $request = array(
            'symbol' => $market['id'],
            'currency' => $currency['id'],
            'amount' => $this->currency_to_precision($code, $amount),
        );
        $response = $this->privatePostSpotV1MarginIsolatedRepay (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "b0a60b4c-e986-4b54-a190-8f7c05ddf685",
        //         "data" => {
        //             "repay_id" => "2afcc16d99bd4707818c5a355dc89bed"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $transaction = $this->parse_margin_loan($data, $currency);
        return array_merge($transaction, array(
            'amount' => $amount,
            'symbol' => $symbol,
        ));
    }

    public function borrow_isolated_margin(string $symbol, string $code, $amount, $params = array ()) {
        /**
         * create a loan to borrow margin
         * @see https://developer-pro.bitmart.com/en/spot/#margin-borrow-isolated
         * @param {string} $symbol unified $market $symbol
         * @param {string} $code unified $currency $code of the $currency to borrow
         * @param {string} $amount the $amount to borrow
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=margin-loan-structure margin loan structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $currency = $this->currency($code);
        $request = array(
            'symbol' => $market['id'],
            'currency' => $currency['id'],
            'amount' => $this->currency_to_precision($code, $amount),
        );
        $response = $this->privatePostSpotV1MarginIsolatedBorrow (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "e6fda683-181e-4e78-ac9c-b27c4c8ba035",
        //         "data" => {
        //             "borrow_id" => "629a7177a4ed4cf09869c6a4343b788c"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $transaction = $this->parse_margin_loan($data, $currency);
        return array_merge($transaction, array(
            'amount' => $amount,
            'symbol' => $symbol,
        ));
    }

    public function parse_margin_loan($info, ?array $currency = null) {
        //
        // borrowMargin
        //
        //     {
        //         "borrow_id" => "629a7177a4ed4cf09869c6a4343b788c",
        //     }
        //
        // repayMargin
        //
        //     {
        //         "repay_id" => "2afcc16d99bd4707818c5a355dc89bed",
        //     }
        //
        return array(
            'id' => $this->safe_string_2($info, 'borrow_id', 'repay_id'),
            'currency' => $this->safe_currency_code(null, $currency),
            'amount' => null,
            'symbol' => null,
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_isolated_borrow_rate(string $symbol, $params = array ()) {
        /**
         * fetch the rate of interest to borrow a currency for margin trading
         * @see https://developer-pro.bitmart.com/en/spot/#get-trading-pair-borrowing-rate-and-amount-keyed
         * @param {string} $symbol unified $symbol of the $market to fetch the borrow rate for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an {@link https://github.com/ccxt/ccxt/wiki/Manual#isolated-borrow-rate-structure isolated borrow rate structure}
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateGetSpotV1MarginIsolatedPairs (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "0985a130-a5ae-4fc1-863f-4704e214f585",
        //         "data" => {
        //             "symbols" => array(
        //                 {
        //                     "symbol" => "BTC_USDT",
        //                     "max_leverage" => "5",
        //                     "symbol_enabled" => true,
        //                     "base" => array(
        //                         "currency" => "BTC",
        //                         "daily_interest" => "0.00055000",
        //                         "hourly_interest" => "0.00002291",
        //                         "max_borrow_amount" => "2.00000000",
        //                         "min_borrow_amount" => "0.00000001",
        //                         "borrowable_amount" => "0.00670810"
        //                     ),
        //                     "quote" => {
        //                         "currency" => "USDT",
        //                         "daily_interest" => "0.00055000",
        //                         "hourly_interest" => "0.00002291",
        //                         "max_borrow_amount" => "50000.00000000",
        //                         "min_borrow_amount" => "0.00000001",
        //                         "borrowable_amount" => "135.12575038"
        //                     }
        //                 }
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $symbols = $this->safe_value($data, 'symbols', array());
        $borrowRate = $this->safe_value($symbols, 0);
        return $this->parse_isolated_borrow_rate($borrowRate, $market);
    }

    public function parse_isolated_borrow_rate($info, ?array $market = null) {
        //
        //     {
        //         "symbol" => "BTC_USDT",
        //         "max_leverage" => "5",
        //         "symbol_enabled" => true,
        //         "base" => array(
        //             "currency" => "BTC",
        //             "daily_interest" => "0.00055000",
        //             "hourly_interest" => "0.00002291",
        //             "max_borrow_amount" => "2.00000000",
        //             "min_borrow_amount" => "0.00000001",
        //             "borrowable_amount" => "0.00670810"
        //         ),
        //         "quote" => {
        //             "currency" => "USDT",
        //             "daily_interest" => "0.00055000",
        //             "hourly_interest" => "0.00002291",
        //             "max_borrow_amount" => "50000.00000000",
        //             "min_borrow_amount" => "0.00000001",
        //             "borrowable_amount" => "135.12575038"
        //         }
        //     }
        //
        $marketId = $this->safe_string($info, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $baseData = $this->safe_value($info, 'base', array());
        $quoteData = $this->safe_value($info, 'quote', array());
        $baseId = $this->safe_string($baseData, 'currency');
        $quoteId = $this->safe_string($quoteData, 'currency');
        return array(
            'symbol' => $symbol,
            'base' => $this->safe_currency_code($baseId),
            'baseRate' => $this->safe_number($baseData, 'hourly_interest'),
            'quote' => $this->safe_currency_code($quoteId),
            'quoteRate' => $this->safe_number($quoteData, 'hourly_interest'),
            'period' => 3600000, // 1-Hour
            'timestamp' => null,
            'datetime' => null,
            'info' => $info,
        );
    }

    public function fetch_isolated_borrow_rates($params = array ()) {
        /**
         * fetch the borrow interest rates of all currencies, currently only works for isolated margin
         * @see https://developer-pro.bitmart.com/en/spot/#get-trading-pair-borrowing-rate-and-amount-keyed
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a list of ~@link https://docs.ccxt.com/#/?id=isolated-borrow-rate-structure isolated borrow rate structures~
         */
        $this->load_markets();
        $response = $this->privateGetSpotV1MarginIsolatedPairs ($params);
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "0985a130-a5ae-4fc1-863f-4704e214f585",
        //         "data" => {
        //             "symbols" => array(
        //                 {
        //                     "symbol" => "BTC_USDT",
        //                     "max_leverage" => "5",
        //                     "symbol_enabled" => true,
        //                     "base" => array(
        //                         "currency" => "BTC",
        //                         "daily_interest" => "0.00055000",
        //                         "hourly_interest" => "0.00002291",
        //                         "max_borrow_amount" => "2.00000000",
        //                         "min_borrow_amount" => "0.00000001",
        //                         "borrowable_amount" => "0.00670810"
        //                     ),
        //                     "quote" => {
        //                         "currency" => "USDT",
        //                         "daily_interest" => "0.00055000",
        //                         "hourly_interest" => "0.00002291",
        //                         "max_borrow_amount" => "50000.00000000",
        //                         "min_borrow_amount" => "0.00000001",
        //                         "borrowable_amount" => "135.12575038"
        //                     }
        //                 }
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $symbols = $this->safe_value($data, 'symbols', array());
        $result = array();
        for ($i = 0; $i < count($symbols); $i++) {
            $symbol = $this->safe_value($symbols, $i);
            $result[] = $this->parse_isolated_borrow_rate($symbol);
        }
        return $result;
    }

    public function transfer(string $code, $amount, $fromAccount, $toAccount, $params = array ()) {
        /**
         * transfer $currency internally between wallets on the same account, currently only supports transfer between spot and margin
         * @see https://developer-pro.bitmart.com/en/spot/#margin-asset-transfer-signed
         * @see https://developer-pro.bitmart.com/en/futures/#transfer-signed
         * @param {string} $code unified $currency $code
         * @param {float} $amount amount to transfer
         * @param {string} $fromAccount account to transfer from
         * @param {string} $toAccount account to transfer to
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structure~
         */
        $this->load_markets();
        $currency = $this->currency($code);
        $amountToPrecision = $this->currency_to_precision($code, $amount);
        $request = array(
            'amount' => $amountToPrecision,
            'currency' => $currency['id'],
        );
        $fromId = $this->convert_type_to_account($fromAccount);
        $toId = $this->convert_type_to_account($toAccount);
        if ($fromAccount === 'spot') {
            if ($toAccount === 'margin') {
                $request['side'] = 'in';
                $request['symbol'] = $toId;
            } elseif ($toAccount === 'swap') {
                $request['type'] = 'spot_to_contract';
            }
        } elseif ($toAccount === 'spot') {
            if ($fromAccount === 'margin') {
                $request['side'] = 'out';
                $request['symbol'] = $fromId;
            } elseif ($fromAccount === 'swap') {
                $request['type'] = 'contract_to_spot';
            }
        } else {
            throw new ArgumentsRequired($this->id . ' transfer() requires either $fromAccount or $toAccount to be spot');
        }
        $response = null;
        if (($fromAccount === 'margin') || ($toAccount === 'margin')) {
            $response = $this->privatePostSpotV1MarginIsolatedTransfer (array_merge($request, $params));
        } elseif (($fromAccount === 'swap') || ($toAccount === 'swap')) {
            $response = $this->privatePostAccountV1TransferContract (array_merge($request, $params));
        }
        //
        // margin
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "b26cecec-ef5a-47d9-9531-2bd3911d3d55",
        //         "data" => {
        //             "transfer_id" => "ca90d97a621e47d49774f19af6b029f5"
        //         }
        //     }
        //
        // swap
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "4cad858074667097ac6ba5257c57305d.68.16953302431189455",
        //         "data" => {
        //             "currency" => "USDT",
        //             "amount" => "5"
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return array_merge($this->parse_transfer($data, $currency), array(
            'status' => $this->parse_transfer_status($this->safe_string_2($response, 'code', 'message')),
        ));
    }

    public function parse_transfer_status($status) {
        $statuses = array(
            '1000' => 'ok',
            'OK' => 'ok',
            'FINISHED' => 'ok',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_transfer_to_account($type) {
        $types = array(
            'contract_to_spot' => 'spot',
            'spot_to_contract' => 'swap',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_transfer_from_account($type) {
        $types = array(
            'contract_to_spot' => 'swap',
            'spot_to_contract' => 'spot',
        );
        return $this->safe_string($types, $type, $type);
    }

    public function parse_transfer($transfer, ?array $currency = null) {
        //
        // margin
        //
        //     {
        //         "transfer_id" => "ca90d97a621e47d49774f19af6b029f5"
        //     }
        //
        // swap
        //
        //     {
        //         "currency" => "USDT",
        //         "amount" => "5"
        //     }
        //
        // fetchTransfers
        //
        //     {
        //         "transfer_id" => "902463535961567232",
        //         "currency" => "USDT",
        //         "amount" => "5",
        //         "type" => "contract_to_spot",
        //         "state" => "FINISHED",
        //         "timestamp" => 1695330539565
        //     }
        //
        $currencyId = $this->safe_string($transfer, 'currency');
        $timestamp = $this->safe_integer($transfer, 'timestamp');
        return array(
            'id' => $this->safe_string($transfer, 'transfer_id'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'currency' => $this->safe_currency_code($currencyId, $currency),
            'amount' => $this->safe_number($transfer, 'amount'),
            'fromAccount' => $this->parse_transfer_from_account($this->safe_string($transfer, 'type')),
            'toAccount' => $this->parse_transfer_to_account($this->safe_string($transfer, 'type')),
            'status' => $this->parse_transfer_status($this->safe_string($transfer, 'state')),
        );
    }

    public function fetch_transfers(?string $code = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch a history of internal transfers made on an account, only transfers between spot and swap are supported
         * @see https://developer-pro.bitmart.com/en/futures/#get-transfer-list-signed
         * @param {string} $code unified $currency $code of the $currency transferred
         * @param {int} [$since] the earliest time in ms to fetch transfers for
         * @param {int} [$limit] the maximum number of transfer structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->page] the required number of pages, default is 1, max is 1000
         * @param {int} [$params->until] the latest time in ms to fetch transfers for
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=transfer-structure transfer structures~
         */
        $this->load_markets();
        if ($limit === null) {
            $limit = 10;
        }
        $request = array(
            'page' => $this->safe_integer($params, 'page', 1), // default is 1, max is 1000
            'limit' => $limit, // default is 10, max is 100
        );
        $currency = null;
        if ($code !== null) {
            $currency = $this->currency($code);
            $request['currency'] = $currency['id'];
        }
        if ($since !== null) {
            $request['time_start'] = $since;
        }
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        $until = $this->safe_integer_2($params, 'until', 'till'); // unified in milliseconds
        $endTime = $this->safe_integer($params, 'time_end', $until); // exchange-specific in milliseconds
        $params = $this->omit($params, array( 'till', 'until' ));
        if ($endTime !== null) {
            $request['time_end'] = $endTime;
        }
        $response = $this->privatePostAccountV1TransferContractList (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "7f9d93e10f9g4513bc08a7btc2a5559a.69.16953325693032193",
        //         "data" => {
        //             "records" => array(
        //                 array(
        //                     "transfer_id" => "902463535961567232",
        //                     "currency" => "USDT",
        //                     "amount" => "5",
        //                     "type" => "contract_to_spot",
        //                     "state" => "FINISHED",
        //                     "timestamp" => 1695330539565
        //                 ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $records = $this->safe_value($data, 'records', array());
        return $this->parse_transfers($records, $currency, $since, $limit);
    }

    public function fetch_borrow_interest(?string $code = null, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch the $interest owed by the user for borrowing currency for margin trading
         * @see https://developer-pro.bitmart.com/en/spot/#get-borrow-record-isolated
         * @param {string} $code unified currency $code
         * @param {string} $symbol unified $market $symbol when fetch $interest in isolated markets
         * @param {int} [$since] the earliest time in ms to fetch borrrow $interest for
         * @param {int} [$limit] the maximum number of structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=borrow-$interest-structure borrow $interest structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchBorrowInterest() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($limit !== null) {
            $request['N'] = $limit;
        }
        if ($since !== null) {
            $request['start_time'] = $since;
        }
        $response = $this->privateGetSpotV1MarginIsolatedBorrowRecord (array_merge($request, $params));
        //
        //     {
        //         "message" => "OK",
        //         "code" => 1000,
        //         "trace" => "8ea27a2a-4aba-49fa-961d-43a0137b0ef3",
        //         "data" => {
        //             "records" => array(
        //                 array(
        //                     "borrow_id" => "1659045283903rNvJnuRTJNL5J53n",
        //                     "symbol" => "BTC_USDT",
        //                     "currency" => "USDT",
        //                     "borrow_amount" => "100.00000000",
        //                     "daily_interest" => "0.00055000",
        //                     "hourly_interest" => "0.00002291",
        //                     "interest_amount" => "0.00229166",
        //                     "create_time" => 1659045284000
        //                 ),
        //             )
        //         }
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $rows = $this->safe_value($data, 'records', array());
        $interest = $this->parse_borrow_interests($rows, $market);
        return $this->filter_by_currency_since_limit($interest, $code, $since, $limit);
    }

    public function parse_borrow_interest($info, ?array $market = null) {
        //
        //     {
        //         "borrow_id" => "1657664327844Lk5eJJugXmdHHZoe",
        //         "symbol" => "BTC_USDT",
        //         "currency" => "USDT",
        //         "borrow_amount" => "20.00000000",
        //         "daily_interest" => "0.00055000",
        //         "hourly_interest" => "0.00002291",
        //         "interest_amount" => "0.00045833",
        //         "create_time" => 1657664329000
        //     }
        //
        $marketId = $this->safe_string($info, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $timestamp = $this->safe_integer($info, 'create_time');
        return array(
            'symbol' => $this->safe_string($market, 'symbol'),
            'marginMode' => 'isolated',
            'currency' => $this->safe_currency_code($this->safe_string($info, 'currency')),
            'interest' => $this->safe_number($info, 'interest_amount'),
            'interestRate' => $this->safe_number($info, 'hourly_interest'),
            'amountBorrowed' => $this->safe_number($info, 'borrow_amount'),
            'timestamp' => $timestamp,  // borrow creation time
            'datetime' => $this->iso8601($timestamp),
            'info' => $info,
        );
    }

    public function fetch_open_interest(string $symbol, $params = array ()) {
        /**
         * Retrieves the open interest of a currency
         * @see https://developer-pro.bitmart.com/en/futures/#get-futures-openinterest
         * @param {string} $symbol Unified CCXT $market $symbol
         * @param {array} [$params] exchange specific parameters
         * @return {array} an open interest structurearray(@link https://docs.ccxt.com/#/?id=open-interest-structure)
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['contract']) {
            throw new BadRequest($this->id . ' fetchOpenInterest() supports contract markets only');
        }
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetContractPublicOpenInterest (array_merge($request, $params));
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             "timestamp" => 1694657502415,
        //             "symbol" => "BTCUSDT",
        //             "open_interest" => "265231.721368593081729069",
        //             "open_interest_value" => "7006353.83988919"
        //         ),
        //         "trace" => "7f9c94e10f9d4513bc08a7bfc2a5559a.72.16946575108274991"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_open_interest($data, $market);
    }

    public function parse_open_interest($interest, ?array $market = null) {
        //
        //     {
        //         "timestamp" => 1694657502415,
        //         "symbol" => "BTCUSDT",
        //         "open_interest" => "265231.721368593081729069",
        //         "open_interest_value" => "7006353.83988919"
        //     }
        //
        $timestamp = $this->safe_integer($interest, 'timestamp');
        $id = $this->safe_string($interest, 'symbol');
        return $this->safe_open_interest(array(
            'symbol' => $this->safe_symbol($id, $market),
            'openInterestAmount' => $this->safe_number($interest, 'open_interest'),
            'openInterestValue' => $this->safe_number($interest, 'open_interest_value'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'info' => $interest,
        ), $market);
    }

    public function set_leverage($leverage, ?string $symbol = null, $params = array ()) {
        /**
         * set the level of $leverage for a $market
         * @see https://developer-pro.bitmart.com/en/futures/#submit-$leverage-signed
         * @param {float} $leverage the rate of $leverage
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} [$params->marginMode] 'isolated' or 'cross'
         * @return {array} response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setLeverage() requires a $symbol argument');
        }
        $marginMode = null;
        list($marginMode, $params) = $this->handle_margin_mode_and_params('setLeverage', $params);
        $this->check_required_argument('setLeverage', $marginMode, 'marginMode', array( 'isolated', 'cross' ));
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' setLeverage() supports swap contracts only');
        }
        $request = array(
            'symbol' => $market['id'],
            'leverage' => (string) $leverage,
            'open_type' => $marginMode,
        );
        return $this->privatePostContractPrivateSubmitLeverage (array_merge($request, $params));
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        /**
         * fetch the current funding rate
         * @see https://developer-pro.bitmart.com/en/futures/#get-current-funding-rate
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new BadSymbol($this->id . ' fetchFundingRate() supports swap contracts only');
        }
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetContractPublicFundingRate (array_merge($request, $params));
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             "timestamp" => 1695184410697,
        //             "symbol" => "BTCUSDT",
        //             "rate_value" => "-0.00002614",
        //             "expected_rate" => "-0.00002"
        //         ),
        //         "trace" => "4cad855074654097ac7ba5257c47305d.54.16951844206655589"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_funding_rate($data, $market);
    }

    public function parse_funding_rate($contract, ?array $market = null) {
        //
        //     {
        //         "timestamp" => 1695184410697,
        //         "symbol" => "BTCUSDT",
        //         "rate_value" => "-0.00002614",
        //         "expected_rate" => "-0.00002"
        //     }
        //
        $marketId = $this->safe_string($contract, 'symbol');
        $timestamp = $this->safe_integer($contract, 'timestamp');
        return array(
            'info' => $contract,
            'symbol' => $this->safe_symbol($marketId, $market),
            'markPrice' => null,
            'indexPrice' => null,
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fundingRate' => $this->safe_number($contract, 'expected_rate'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => null,
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => $this->safe_number($contract, 'rate_value'),
            'previousFundingTimestamp' => null,
            'previousFundingDatetime' => null,
        );
    }

    public function fetch_position(string $symbol, $params = array ()) {
        /**
         * fetch $data on a single open contract trade position
         * @see https://developer-pro.bitmart.com/en/futures/#get-current-position-keyed
         * @param {string} $symbol unified $market $symbol of the $market the position is held in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->privateGetContractPrivatePosition (array_merge($request, $params));
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             {
        //                 "symbol" => "BTCUSDT",
        //                 "leverage" => "10",
        //                 "timestamp" => 1696392515269,
        //                 "current_fee" => "0.0014250028",
        //                 "open_timestamp" => 1696392256998,
        //                 "current_value" => "27.4039",
        //                 "mark_price" => "27.4039",
        //                 "position_value" => "27.4079",
        //                 "position_cross" => "3.75723474",
        //                 "maintenance_margin" => "0.1370395",
        //                 "close_vol" => "0",
        //                 "close_avg_price" => "0",
        //                 "open_avg_price" => "27407.9",
        //                 "entry_price" => "27407.9",
        //                 "current_amount" => "1",
        //                 "unrealized_value" => "-0.004",
        //                 "realized_value" => "-0.01644474",
        //                 "position_type" => 1
        //             }
        //         ),
        //         "trace":"4cad855074664097ac5ba5257c47305d.67.16963925142065945"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $first = $this->safe_value($data, 0, array());
        return $this->parse_position($first, $market);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        /**
         * fetch all open contract $positions
         * @see https://developer-pro.bitmart.com/en/futures/#get-current-position-keyed
         * @param {string[]|null} $symbols list of unified $market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structures~
         */
        $this->load_markets();
        $market = null;
        $symbolsLength = null;
        if ($symbols !== null) {
            $symbolsLength = count($symbols);
            $first = $this->safe_string($symbols, 0);
            $market = $this->market($first);
        }
        $request = array();
        if ($symbolsLength === 1) {
            // only supports $symbols or sending one symbol
            $request['symbol'] = $market['id'];
        }
        $response = $this->privateGetContractPrivatePosition (array_merge($request, $params));
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             array(
        //                 "symbol" => "BTCUSDT",
        //                 "leverage" => "10",
        //                 "timestamp" => 1696392515269,
        //                 "current_fee" => "0.0014250028",
        //                 "open_timestamp" => 1696392256998,
        //                 "current_value" => "27.4039",
        //                 "mark_price" => "27.4039",
        //                 "position_value" => "27.4079",
        //                 "position_cross" => "3.75723474",
        //                 "maintenance_margin" => "0.1370395",
        //                 "close_vol" => "0",
        //                 "close_avg_price" => "0",
        //                 "open_avg_price" => "27407.9",
        //                 "entry_price" => "27407.9",
        //                 "current_amount" => "1",
        //                 "unrealized_value" => "-0.004",
        //                 "realized_value" => "-0.01644474",
        //                 "position_type" => 1
        //             ),
        //         ),
        //         "trace":"4cad855074664097ac5ba5257c47305d.67.16963925142065945"
        //     }
        //
        $positions = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($positions); $i++) {
            $result[] = $this->parse_position($positions[$i]);
        }
        $symbols = $this->market_symbols($symbols);
        return $this->filter_by_array_positions($result, 'symbol', $symbols, false);
    }

    public function parse_position($position, ?array $market = null) {
        //
        //     {
        //         "symbol" => "BTCUSDT",
        //         "leverage" => "10",
        //         "timestamp" => 1696392515269,
        //         "current_fee" => "0.0014250028",
        //         "open_timestamp" => 1696392256998,
        //         "current_value" => "27.4039",
        //         "mark_price" => "27.4039",
        //         "position_value" => "27.4079",
        //         "position_cross" => "3.75723474",
        //         "maintenance_margin" => "0.1370395",
        //         "close_vol" => "0",
        //         "close_avg_price" => "0",
        //         "open_avg_price" => "27407.9",
        //         "entry_price" => "27407.9",
        //         "current_amount" => "1",
        //         "unrealized_value" => "-0.004",
        //         "realized_value" => "-0.01644474",
        //         "position_type" => 1
        //     }
        //
        $marketId = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $symbol = $market['symbol'];
        $timestamp = $this->safe_integer($position, 'timestamp');
        $side = $this->safe_integer($position, 'position_type');
        $maintenanceMargin = $this->safe_string($position, 'maintenance_margin');
        $notional = $this->safe_string($position, 'current_value');
        $collateral = $this->safe_string($position, 'position_cross');
        $maintenanceMarginPercentage = Precise::string_div($maintenanceMargin, $notional);
        $marginRatio = Precise::string_div($maintenanceMargin, $collateral);
        return $this->safe_position(array(
            'info' => $position,
            'id' => null,
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastUpdateTimestamp' => null,
            'hedged' => null,
            'side' => ($side === 1) ? 'long' : 'short',
            'contracts' => $this->safe_number($position, 'current_amount'),
            'contractSize' => $this->safe_number($market, 'contractSize'),
            'entryPrice' => $this->safe_number($position, 'entry_price'),
            'markPrice' => $this->safe_number($position, 'mark_price'),
            'lastPrice' => null,
            'notional' => $this->parse_number($notional),
            'leverage' => $this->safe_number($position, 'leverage'),
            'collateral' => $this->parse_number($collateral),
            'initialMargin' => null,
            'initialMarginPercentage' => null,
            'maintenanceMargin' => $this->parse_number($maintenanceMargin),
            'maintenanceMarginPercentage' => $this->parse_number($maintenanceMarginPercentage),
            'unrealizedPnl' => $this->safe_number($position, 'unrealized_value'),
            'realizedPnl' => $this->safe_number($position, 'realized_value'),
            'liquidationPrice' => null,
            'marginMode' => null,
            'percentage' => null,
            'marginRatio' => $this->parse_number($marginRatio),
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        ));
    }

    public function fetch_my_liquidations(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * retrieves the users liquidated positions
         * @see https://developer-pro.bitmart.com/en/futures/#get-order-history-keyed
         * @param {string} $symbol unified CCXT $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch liquidations for
         * @param {int} [$limit] the maximum number of liquidation structures to retrieve
         * @param {array} [$params] exchange specific parameters for the bitmart api endpoint
         * @param {int} [$params->until] timestamp in ms of the latest liquidation
         * @return {array} an array of ~@link https://docs.ccxt.com/#/?id=liquidation-structure liquidation structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchMyLiquidations() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        if (!$market['swap']) {
            throw new NotSupported($this->id . ' fetchMyLiquidations() supports swap markets only');
        }
        $request = array(
            'symbol' => $market['id'],
        );
        if ($since !== null) {
            $request['start_time'] = $since;
        }
        list($request, $params) = $this->handle_until_option('end_time', $request, $params);
        $response = $this->privateGetContractPrivateOrderHistory (array_merge($request, $params));
        //
        //     {
        //         "code" => 1000,
        //         "message" => "Ok",
        //         "data" => array(
        //             array(
        //                 "order_id" => "231007865458273",
        //                 "client_order_id" => "",
        //                 "price" => "27407.9",
        //                 "size" => "1",
        //                 "symbol" => "BTCUSDT",
        //                 "state" => 4,
        //                 "side" => 3,
        //                 "type" => "liquidate",
        //                 "leverage" => "10",
        //                 "open_type" => "isolated",
        //                 "deal_avg_price" => "27422.6",
        //                 "deal_size" => "1",
        //                 "create_time" => 1696405864011,
        //                 "update_time" => 1696405864045
        //             ),
        //         ),
        //         "trace" => "4cad855074664097ac6ba4257c47305d.71.16965658195443021"
        //     }
        //
        $data = $this->safe_value($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $entry = $data[$i];
            $checkLiquidation = $this->safe_string($entry, 'type');
            if ($checkLiquidation === 'liquidate') {
                $result[] = $entry;
            }
        }
        return $this->parse_liquidations($result, $market, $since, $limit);
    }

    public function parse_liquidation($liquidation, ?array $market = null) {
        //
        //     {
        //         "order_id" => "231007865458273",
        //         "client_order_id" => "",
        //         "price" => "27407.9",
        //         "size" => "1",
        //         "symbol" => "BTCUSDT",
        //         "state" => 4,
        //         "side" => 3,
        //         "type" => "market",
        //         "leverage" => "10",
        //         "open_type" => "isolated",
        //         "deal_avg_price" => "27422.6",
        //         "deal_size" => "1",
        //         "create_time" => 1696405864011,
        //         "update_time" => 1696405864045
        //     }
        //
        $marketId = $this->safe_string($liquidation, 'symbol');
        $timestamp = $this->safe_integer($liquidation, 'update_time');
        $contractsString = $this->safe_string($liquidation, 'deal_size');
        $contractSizeString = $this->safe_string($market, 'contractSize');
        $priceString = $this->safe_string($liquidation, 'deal_avg_price');
        $baseValueString = Precise::string_mul($contractsString, $contractSizeString);
        $quoteValueString = Precise::string_mul($baseValueString, $priceString);
        return $this->safe_liquidation(array(
            'info' => $liquidation,
            'symbol' => $this->safe_symbol($marketId, $market),
            'contracts' => $this->parse_number($contractsString),
            'contractSize' => $this->parse_number($contractSizeString),
            'price' => $this->parse_number($priceString),
            'baseValue' => $this->parse_number($baseValueString),
            'quoteValue' => $this->parse_number($quoteValueString),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        ));
    }

    public function nonce() {
        return $this->milliseconds();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $baseUrl = $this->implode_hostname($this->urls['api']['rest']);
        $url = $baseUrl . '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        $queryString = '';
        $getOrDelete = ($method === 'GET') || ($method === 'DELETE');
        if ($getOrDelete) {
            if ($query) {
                $queryString = $this->urlencode($query);
                $url .= '?' . $queryString;
            }
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $timestamp = (string) $this->milliseconds();
            $brokerId = $this->safe_string($this->options, 'brokerId', 'CCXTxBitmart000');
            $headers = array(
                'X-BM-KEY' => $this->apiKey,
                'X-BM-TIMESTAMP' => $timestamp,
                'X-BM-BROKER-ID' => $brokerId,
                'Content-Type' => 'application/json',
            );
            if (!$getOrDelete) {
                $body = $this->json($query);
                $queryString = $body;
            }
            $auth = $timestamp . '#' . $this->uid . '#' . $queryString;
            $signature = $this->hmac($this->encode($auth), $this->encode($this->secret), 'sha256');
            $headers['X-BM-SIGN'] = $signature;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null;
        }
        //
        // spot
        //
        //     array("message":"Bad Request [to is empty]","code":50000,"trace":"f9d46e1b-4edb-4d07-a06e-4895fb2fc8fc","data":array())
        //     array("message":"Bad Request [from is empty]","code":50000,"trace":"579986f7-c93a-4559-926b-06ba9fa79d76","data":array())
        //     array("message":"Kline size over 500","code":50004,"trace":"d625caa8-e8ca-4bd2-b77c-958776965819","data":array())
        //     array("message":"Balance not enough","code":50020,"trace":"7c709d6a-3292-462c-98c5-32362540aeef","data":array())
        //
        // contract
        //
        //     array("errno":"OK","message":"INVALID_PARAMETER","code":49998,"trace":"eb5ebb54-23cd-4de2-9064-e090b6c3b2e3","data":null)
        //
        $message = $this->safe_string_lower($response, 'message');
        $isErrorMessage = ($message !== null) && ($message !== 'ok') && ($message !== 'success');
        $errorCode = $this->safe_string($response, 'code');
        $isErrorCode = ($errorCode !== null) && ($errorCode !== '1000');
        if ($isErrorCode || $isErrorMessage) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $errorCode, $feedback);
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $message, $feedback);
            throw new ExchangeError($feedback); // unknown $message
        }
        return null;
    }
}
