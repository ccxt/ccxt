<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\ace as Exchange;

class ace extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'ace',
            'name' => 'ACE',
            'countries' => array( 'TW' ), // Taiwan
            'version' => 'v2',
            'rateLimit' => 100,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => true,
                'cancelOrders' => false,
                'closeAllPositions' => false,
                'closePosition' => false,
                'createOrder' => true,
                'editOrder' => false,
                'fetchBalance' => true,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchMarginMode' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => true,
                'fetchPositionMode' => false,
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchTransactionFees' => false,
                'fetchTransactions' => false,
                'fetchTransfer' => false,
                'fetchTransfers' => false,
                'fetchWithdrawal' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
                'ws' => false,
            ),
            'timeframes' => array(
                '1m' => 1,
                '5m' => 5,
                '10m' => 10,
                '30m' => 10,
                '1h' => 60,
                '2h' => 120,
                '4h' => 240,
                '8h' => 480,
                '12h' => 720,
                '1d' => 24,
                '1w' => 70,
                '1M' => 31,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/216908003-fb314cf6-e66e-471c-b91d-1d86e4baaa90.jpg',
                'api' => array(
                    'public' => 'https://ace.io/polarisex',
                    'private' => 'https://ace.io/polarisex/open',
                ),
                'www' => 'https://ace.io/',
                'doc' => array(
                    'https://github.com/ace-exchange/ace-offical-api-docs',
                ),
                'fees' => 'https://helpcenter.ace.io/hc/zh-tw/articles/360018609132-%E8%B2%BB%E7%8E%87%E8%AA%AA%E6%98%8E',
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'oapi/v2/list/tradePrice',
                        'oapi/v2/list/marketPair',
                        'open/v2/public/getOrderBook',
                    ),
                ),
                'private' => array(
                    'post' => array(
                        'v2/coin/customerAccount',
                        'v2/kline/getKline',
                        'v2/order/order',
                        'v2/order/cancel',
                        'v2/order/getOrderList',
                        'v2/order/showOrderStatus',
                        'v2/order/showOrderHistory',
                        'v2/order/getTradeList',
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'percentage' => true,
                    'maker' => $this->parse_number('0.0005'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
            'options' => array(
                'brokerId' => 'ccxt',
            ),
            'precisionMode' => TICK_SIZE,
            'exceptions' => array(
                'exact' => array(
                    '2003' => '\\ccxt\\InvalidOrder',
                    '2004' => '\\ccxt\\InvalidOrder',
                    '2005' => '\\ccxt\\InvalidOrder',
                    '2021' => '\\ccxt\\InsufficientFunds',
                    '2036' => '\\ccxt\\InvalidOrder',
                    '2039' => '\\ccxt\\InvalidOrder',
                    '2053' => '\\ccxt\\InvalidOrder',
                    '2061' => '\\ccxt\\BadRequest',
                    '2063' => '\\ccxt\\InvalidOrder',
                    '9996' => '\\ccxt\\BadRequest',
                    '10012' => '\\ccxt\\AuthenticationError',
                    '20182' => '\\ccxt\\AuthenticationError',
                    '20183' => '\\ccxt\\InvalidOrder',
                ),
                'broad' => array(
                ),
            ),
            'commonCurrencies' => array(
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves data on all markets for ace
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#oapi-api---market-pair
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing market data
         */
        $response = $this->publicGetOapiV2ListMarketPair ();
        //
        //     array(
        //         {
        //             "symbol":"BTC/USDT",
        //             "base":"btc",
        //             "baseCurrencyId" => "122"
        //             "quote":"usdt",
        //             "basePrecision":"8",
        //             "quotePrecision":"5",
        //             "minLimitBaseAmount":"0.1",
        //             "maxLimitBaseAmount":"480286"
        //         }
        //     )
        //
        return $this->parse_markets($response);
    }

    public function parse_market($market): array {
        $baseId = $this->safe_string($market, 'base');
        $base = $this->safe_currency_code($baseId);
        $quoteId = $this->safe_string($market, 'quote');
        $quote = $this->safe_currency_code($quoteId);
        $symbol = $base . '/' . $quote;
        return array(
            'id' => $this->safe_string($market, 'symbol'),
            'uppercaseId' => null,
            'symbol' => $symbol,
            'base' => $base,
            'baseId' => $baseId,
            'quote' => $quote,
            'quoteId' => $quoteId,
            'settle' => null,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'limits' => array(
                'amount' => array(
                    'min' => $this->safe_number($market, 'minLimitBaseAmount'),
                    'max' => $this->safe_number($market, 'maxLimitBaseAmount'),
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'precision' => array(
                'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quotePrecision'))),
                'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'basePrecision'))),
            ),
            'active' => null,
            'created' => null,
            'info' => $market,
        );
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        //     {
        //         "base_volume":229196.34035399999,
        //         "last_price":11881.06,
        //         "quote_volume":19.2909
        //     }
        //
        $marketId = $this->safe_string($ticker, 'id');
        $symbol = $this->safe_symbol($marketId, $market);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => null,
            'low' => null,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $this->safe_string($ticker, 'last_price'),
            'last' => $this->safe_string($ticker, 'last_price'),
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $this->safe_string($ticker, 'base_volume'),
            'quoteVolume' => $this->safe_string($ticker, 'quote_volume'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#oapi-api---trade-data
         * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $response = $this->publicGetOapiV2ListTradePrice ($params);
        $marketId = $market['id'];
        $ticker = $this->safe_value($response, $marketId, array());
        //
        //     {
        //         "BTC/USDT":{
        //             "base_volume":229196.34035399999,
        //             "last_price":11881.06,
        //             "quote_volume":19.2909
        //         }
        //     }
        //
        return $this->parse_ticker($ticker, $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#oapi-api---trade-data
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        $response = $this->publicGetOapiV2ListTradePrice ();
        //
        //     {
        //         "BTC/USDT":{
        //             "base_volume":229196.34035399999,
        //             "last_price":11881.06,
        //             "quote_volume":19.2909
        //         }
        //     }
        //
        $tickers = array();
        $pairs = is_array($response) ? array_keys($response) : array();
        for ($i = 0; $i < count($pairs); $i++) {
            $marketId = $pairs[$i];
            $market = $this->safe_market($marketId);
            $rawTicker = $this->safe_value($response, $marketId);
            $ticker = $this->parse_ticker($rawTicker, $market);
            $tickers[] = $ticker;
        }
        return $this->filter_by_array_tickers($tickers, 'symbol', $symbols);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-books
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'quoteCurrencyId' => $market['quoteId'],
            'baseCurrencyId' => $market['baseId'],
        );
        if ($limit !== null) {
            $request['depth'] = $limit;
        }
        $response = $this->publicGetOpenV2PublicGetOrderBook (array_merge($request, $params));
        //
        //     {
        //         "attachment" => array(
        //             "baseCurrencyId" => "2",
        //             "quoteCurrencyId" => "14",
        //             "baseCurrencyName" => "BTC",
        //             "quoteCurrencyName" => "USDT",
        //             "bids" => array(
        //                 array(
        //                     "0.0009",
        //                     "19993.53"
        //                 ),
        //                 array(
        //                     "0.001",
        //                     "19675.33"
        //                 ),
        //                 array(
        //                     "0.001",
        //                     "19357.13"
        //                 )
        //             ),
        //             "asks" => array(
        //                 array(
        //                     "0.001",
        //                     "20629.92"
        //                 ),
        //                 array(
        //                     "0.001",
        //                     "20948.12"
        //                 )
        //             )
        //         ),
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        $orderBook = $this->safe_value($response, 'attachment');
        return $this->parse_order_book($orderBook, $market['symbol'], null, 'bids', 'asks');
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        //
        //     {
        //         "changeRate" => 0,
        //         "volume" => 0,
        //         "closePrice" => 101000.0,
        //         "lowPrice" => 101000.0,
        //         "highPrice" => 101000.0,
        //         "highPrice" => 1573195740000L,
        //         "openPrice" => 101000.0,
        //         "current" => 101000.0,
        //         "currentTime" => "2019-11-08 14:49:00",
        //         "createTime" => "2019-11-08 14:49:00"
        //     }
        //
        $dateTime = $this->safe_string($ohlcv, 'createTime');
        $timestamp = $this->parse8601($dateTime);
        if ($timestamp !== null) {
            $timestamp = $timestamp - 28800000; // 8 hours
        }
        return array(
            $timestamp,
            $this->safe_number($ohlcv, 'openPrice'),
            $this->safe_number($ohlcv, 'highPrice'),
            $this->safe_number($ohlcv, 'lowPrice'),
            $this->safe_number($ohlcv, 'closePrice'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---klinecandlestick-$data
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'duration' => $this->timeframes[$timeframe],
            'quoteCurrencyId' => $market['quoteId'],
            'baseCurrencyId' => $market['baseId'],
        );
        if ($limit !== null) {
            $request['limit'] = $limit;
        }
        if ($since !== null) {
            $request['startTime'] = $since;
        }
        $response = $this->privatePostV2KlineGetKline (array_merge($request, $params));
        $data = $this->safe_value($response, 'attachment', array());
        //
        //     {
        //         "attachment":array(
        //                 {
        //                     "changeRate" => 0,
        //                     "closePrice" => 101000.0,
        //                     "volume" => 0,
        //                     "lowPrice" => 101000.0,
        //                     "highPrice" => 101000.0,
        //                     "highPrice" => 1573195740000L,
        //                     "openPrice" => 101000.0,
        //                     "current" => 101000.0,
        //                     "currentTime" => "2019-11-08 14:49:00",
        //                     "createTime" => "2019-11-08 14:49:00"
        //                 }
        //         )
        //     }
        //
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function parse_order_status($status) {
        $statuses = array(
            '0' => 'open',
            '1' => 'open',
            '2' => 'closed',
            '4' => 'canceled',
            '5' => 'canceled',
        );
        return $this->safe_string($statuses, $status, null);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // createOrder
        //         "15697850529570392100421100482693"
        //
        // fetchOpenOrders
        //         {
        //             "uid" => 0,
        //             "orderNo" => "16113081376560890227301101413941",
        //             "orderTime" => "2021-01-22 17:35:37",
        //             "orderTimeStamp" => 1611308137656,
        //             "baseCurrencyId" => 1,
        //             "baseCurrencyName" => "TWD",
        //             "quoteCurrencyId" => 14,
        //             "quoteCurrencyName" => "USDT",
        //             "buyOrSell" => "1",
        //             "num" => "6.0000000000000000",
        //             "price" => "32.5880000000000000",
        //             "remainNum" => "2.0000000000000000",
        //             "tradeNum" => "4.0000000000000000",
        //             "tradePrice" => "31.19800000000000000000",
        //             "tradeAmount" => "124.7920000000000000",
        //             "tradeRate" => "0.66666666666666666667",
        //             "status" => 1,
        //             "type" => 1
        //         }
        //
        $timestamp = null;
        $symbol = null;
        $price = null;
        $amount = null;
        $side = null;
        $type = null;
        $status = null;
        $filled = null;
        $remaining = null;
        $average = null;
        if (gettype($order) === 'string') {
            $id = $order;
        } else {
            $id = $this->safe_string($order, 'orderNo');
            $timestamp = $this->safe_integer($order, 'orderTimeStamp');
            if ($timestamp === null) {
                $dateTime = $this->safe_string($order, 'orderTime');
                if ($dateTime !== null) {
                    $timestamp = $this->parse8601($dateTime);
                    $timestamp = $timestamp - 28800000; // 8 hours
                }
            }
            $orderSide = $this->safe_number($order, 'buyOrSell');
            if ($orderSide !== null) {
                $side = ($orderSide === 1) ? 'buy' : 'sell';
            }
            $amount = $this->safe_string($order, 'num');
            $price = $this->safe_string($order, 'price');
            $quoteId = $this->safe_string($order, 'quoteCurrencyName');
            $baseId = $this->safe_string($order, 'baseCurrencyName');
            if ($quoteId !== null && $baseId !== null) {
                $symbol = $baseId . '/' . $quoteId;
            }
            $orderType = $this->safe_number($order, 'type');
            if ($orderType !== null) {
                $type = ($orderType === 1) ? 'limit' : 'market';
            }
            $filled = $this->safe_string($order, 'tradeNum');
            $remaining = $this->safe_string($order, 'remainNum');
            $status = $this->parse_order_status($this->safe_string($order, 'status'));
            $average = $this->safe_string($order, 'averagePrice');
        }
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'symbol' => $symbol,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'amount' => $amount,
            'cost' => null,
            'average' => $average,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => null,
            'trades' => null,
            'info' => $order,
        ), $market);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * create a trade order
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---new-order
         * @param {string} $symbol unified $symbol of the $market to create an order in
         * @param {string} $type 'market' or 'limit'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount how much of currency you want to trade in units of base currency
         * @param {float} [$price] the $price at which the order is to be fullfilled, in units of the quote currency, ignored in $market orders
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $orderType = strtoupper($type);
        $orderSide = strtoupper($side);
        $request = array(
            'baseCurrencyId' => $market['baseId'],
            'quoteCurrencyId' => $market['quoteId'],
            'type' => ($orderType === 'LIMIT') ? 1 : 2,
            'buyOrSell' => ($orderSide === 'BUY') ? 1 : 2,
            'num' => $this->amount_to_precision($symbol, $amount),
        );
        if ($type === 'limit') {
            $request['price'] = $this->price_to_precision($symbol, $price);
        }
        $response = $this->privatePostV2OrderOrder (array_merge($request, $params));
        //
        //     {
        //         "attachment" => "15697850529570392100421100482693",
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        $data = $this->safe_value($response, 'attachment');
        return $this->parse_order($data, $market);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---cancel-order
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $request = array(
            'orderNo' => $id,
        );
        $response = $this->privatePostV2OrderCancel (array_merge($request, $params));
        //
        //     {
        //         "attachment" => 200,
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        return $response;
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-status
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $request = array(
            'orderNo' => $id,
        );
        $response = $this->privatePostV2OrderShowOrderStatus (array_merge($request, $params));
        //
        //     {
        //         "attachment" => array(
        //             "buyOrSell" => 1,
        //             "averagePrice" => "490849.75000000",
        //             "num" => "0.00000000",
        //             "orderTime" => "2022-11-29 18:03:06.318",
        //             "price" => "490849.75000000",
        //             "status" => 4,
        //             "tradeNum" => "0.02697000",
        //             "remainNum" => "0.97303000",
        //             "baseCurrencyId" => 2,
        //             "baseCurrencyName" => "BTC",
        //             "quoteCurrencyId" => 1,
        //             "quoteCurrencyName" => "TWD",
        //             "orderNo" => "16697161898600391472461100244406"
        //         ),
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        $data = $this->safe_value($response, 'attachment');
        return $this->parse_order($data, null);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all unfilled currently open $orders
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-list
         * @param {string} $symbol unified $market $symbol of the $market $orders were made in
         * @param {int} [$since] the earliest time in ms to fetch $orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'quoteCurrencyId' => $market['quoteId'],
            'baseCurrencyId' => $market['baseId'],
            // 'start' => 0,
        );
        if ($limit !== null) {
            $request['size'] = $limit;
        }
        $response = $this->privatePostV2OrderGetOrderList (array_merge($request, $params));
        $orders = $this->safe_value($response, 'attachment');
        //
        //     {
        //         "attachment" => array(
        //             {
        //                 "uid" => 0,
        //                 "orderNo" => "16113081376560890227301101413941",
        //                 "orderTime" => "2021-01-22 17:35:37",
        //                 "orderTimeStamp" => 1611308137656,
        //                 "baseCurrencyId" => 1,
        //                 "baseCurrencyName" => "TWD",
        //                 "quoteCurrencyId" => 14,
        //                 "quoteCurrencyName" => "USDT",
        //                 "buyOrSell" => "1",
        //                 "num" => "6.0000000000000000",
        //                 "price" => "32.5880000000000000",
        //                 "remainNum" => "2.0000000000000000",
        //                 "tradeNum" => "4.0000000000000000",
        //                 "tradePrice" => "31.19800000000000000000",
        //                 "tradeAmount" => "124.7920000000000000",
        //                 "tradeRate" => "0.66666666666666666667",
        //                 "status" => 1,
        //                 "type" => 1
        //             }
        //         ),
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        return $this->parse_orders($orders, $market, $since, $limit);
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchOrderTrades
        //         {
        //             "amount" => 0.0030965,
        //             "tradeNo" => "15681920522485652100751000417788",
        //             "price" => "0.03096500",
        //             "num" => "0.10000000",
        //             "bi" => 1,
        //             "time" => "2019-09-11 16:54:12.248"
        //         }
        //
        // fetchMyTrades
        //         {
        //             "buyOrSell" => 1,
        //             "orderNo" => "16708156853695560053601100247906",
        //             "num" => "1",
        //             "price" => "16895",
        //             "orderAmount" => "16895",
        //             "tradeNum" => "0.1",
        //             "tradePrice" => "16895",
        //             "tradeAmount" => "1689.5",
        //             "fee" => "0",
        //             "feeSave" => "0",
        //             "status" => 1,
        //             "isSelf" => false,
        //             "tradeNo" => "16708186395087940051961000274150",
        //             "tradeTime" => "2022-12-12 12:17:19",
        //             "tradeTimestamp" => 1670818639508,
        //             "quoteCurrencyId" => 14,
        //             "quoteCurrencyName" => "USDT",
        //             "baseCurrencyId" => 2,
        //             "baseCurrencyName" => "BTC"
        //         }
        $id = $this->safe_string($trade, 'tradeNo');
        $price = $this->safe_string($trade, 'price');
        $amount = $this->safe_string($trade, 'num');
        $timestamp = $this->safe_integer($trade, 'tradeTimestamp');
        if ($timestamp === null) {
            $datetime = $this->safe_string_2($trade, 'time', 'tradeTime');
            $timestamp = $this->parse8601($datetime);
            $timestamp = $timestamp - 28800000; // 8 hours normalize $timestamp
        }
        $symbol = $market['symbol'];
        $quoteId = $this->safe_string($trade, 'quoteCurrencyName');
        $baseId = $this->safe_string($trade, 'baseCurrencyName');
        if ($quoteId !== null && $baseId !== null) {
            $symbol = $baseId . '/' . $quoteId;
        }
        $side = null;
        $tradeSide = $this->safe_integer($trade, 'buyOrSell');
        if ($tradeSide !== null) {
            $side = ($tradeSide === 1) ? 'buy' : 'sell';
        }
        $feeString = $this->safe_string($trade, 'fee');
        $fee = null;
        if ($feeString !== null) {
            $feeSaveString = $this->safe_string($trade, 'feeSave');
            $fee = array(
                'cost' => Precise::string_sub($feeString, $feeSaveString),
                'currency' => $quoteId,
            );
        }
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'order' => $this->safe_string($trade, 'orderNo'),
            'symbol' => $symbol,
            'side' => $side,
            'type' => null,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => null,
            'fee' => $fee,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
        ), $market);
    }

    public function fetch_order_trades(string $id, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all the $trades made from a single order
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---order-history
         * @param {string} $id order $id
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch $trades for
         * @param {int} [$limit] the maximum number of $trades to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?$id=trade-structure trade structures~
         */
        $this->load_markets();
        $market = $this->safe_market($symbol);
        $request = array(
            'orderNo' => $id,
        );
        $response = $this->privatePostV2OrderShowOrderHistory (array_merge($request, $params));
        //
        //     {
        //         "attachment" => {
        //             "order" => array(
        //                 "buyOrSell" => 1,
        //                 "averagePrice" => "491343.74000000",
        //                 "num" => "1.00000000",
        //                 "orderTime" => "2022-11-29 18:32:22.232",
        //                 "price" => "491343.74000000",
        //                 "status" => 1,
        //                 "tradeNum" => "0.01622200",
        //                 "remainNum" => "0.98377800",
        //                 "baseCurrencyId" => 2,
        //                 "baseCurrencyName" => "BTC",
        //                 "quoteCurrencyId" => 1,
        //                 "quoteCurrencyName" => "TWD",
        //                 "orderNo" => "16697179457740441472471100214402"
        //             ),
        //             "trades" => array(
        //                 array(
        //                     "price" => "491343.74000000",
        //                     "num" => "0.01622200",
        //                     "time" => "2022-11-29 18:32:25.789",
        //                     "tradeNo" => "16697179457897791471461000223437",
        //                     "amount" => "7970.57815028"
        //                 }
        //             )
        //         ),
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        $data = $this->safe_value($response, 'attachment');
        $trades = $this->safe_value($data, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all $trades made by the user
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---trade-list
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of $trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->safe_market($symbol);
        $request = array(
            // 'buyOrSell' => 1,
            // 'start' => 0,
        );
        if ($market['id'] !== null) {
            $request['quoteCurrencyId'] = $market['quoteId'];
            $request['baseCurrencyId'] = $market['baseId'];
        }
        if ($limit !== null) {
            $request['size'] = $limit; // default 10, max 500
        }
        $response = $this->privatePostV2OrderGetTradeList (array_merge($request, $params));
        //
        //     {
        //         "attachment" => array(
        //             {
        //                 "buyOrSell" => 1,
        //                 "orderNo" => "16708156853695560053601100247906",
        //                 "num" => "1",
        //                 "price" => "16895",
        //                 "orderAmount" => "16895",
        //                 "tradeNum" => "0.1",
        //                 "tradePrice" => "16895",
        //                 "tradeAmount" => "1689.5",
        //                 "fee" => "0",
        //                 "feeSave" => "0",
        //                 "status" => 1,
        //                 "isSelf" => false,
        //                 "tradeNo" => "16708186395087940051961000274150",
        //                 "tradeTime" => "2022-12-12 12:17:19",
        //                 "tradeTimestamp" => 1670818639508,
        //                 "quoteCurrencyId" => 14,
        //                 "quoteCurrencyName" => "USDT",
        //                 "baseCurrencyId" => 2,
        //                 "baseCurrencyName" => "BTC"
        //             }
        //         ),
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => 200
        //     }
        //
        $trades = $this->safe_value($response, 'attachment', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function parse_balance($response): array {
        //
        //     array(
        //         {
        //             "currencyId" => 4,
        //             "amount" => 6.896,
        //             "cashAmount" => 6.3855,
        //             "uid" => 123,
        //             "currencyName" => "BTC"
        //         }
        //     )
        //
        $result = array(
            'info' => $response,
        );
        for ($i = 0; $i < count($response); $i++) {
            $balance = $response[$i];
            $currencyId = $this->safe_string($balance, 'currencyName');
            $code = $this->safe_currency_code($currencyId);
            $amount = $this->safe_string($balance, 'amount');
            $available = $this->safe_string($balance, 'cashAmount');
            $account = array(
                'free' => $available,
                'total' => $amount,
            );
            $result[$code] = $account;
        }
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://github.com/ace-exchange/ace-official-api-docs/blob/master/api_v2.md#open-api---account-balance
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $response = $this->privatePostV2CoinCustomerAccount ($params);
        $balances = $this->safe_value($response, 'attachment', array());
        //
        //     {
        //         "attachment":array(
        //             {
        //                 "currencyId" => 4,
        //                 "amount" => 6.896,
        //                 "cashAmount" => 6.3855,
        //                 "uid" => 123,
        //                 "currencyName" => "BTC"
        //             }
        //         ),
        //         "message" => null,
        //         "parameters" => null,
        //         "status" => "200"
        //     }
        //
        return $this->parse_balance($balances);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = '/' . $this->implode_params($path, $params);
        $query = $this->omit($params, $this->extract_params($path));
        if ($headers === null) {
            $headers = array();
        }
        if ($api === 'private') {
            $this->check_required_credentials();
            $nonce = $this->milliseconds();
            $auth = 'ACE_SIGN' . $this->secret;
            $data = array_merge(array(
                'apiKey' => $this->apiKey,
                'timeStamp' => $nonce,
            ), $params);
            $dataKeys = is_array($data) ? array_keys($data) : array();
            $sortedDataKeys = $this->sort_by($dataKeys, 0, false, '');
            for ($i = 0; $i < count($sortedDataKeys); $i++) {
                $key = $sortedDataKeys[$i];
                $auth .= $this->safe_string($data, $key);
            }
            $signature = $this->hash($this->encode($auth), 'sha256', 'hex');
            $data['signKey'] = $signature;
            $headers = array(
                'Content-Type' => 'application/x-www-form-urlencoded',
            );
            if ($method === 'POST') {
                $brokerId = $this->safe_string($this->options, 'brokerId');
                if ($brokerId !== null) {
                    $headers['Referer'] = $brokerId;
                }
            }
            $body = $this->urlencode($data);
        } elseif ($api === 'public' && $method === 'GET') {
            if ($query) {
                $url .= '?' . $this->urlencode($query);
            }
        }
        $url = $this->urls['api'][$api] . $url;
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if ($response === null) {
            return null; // fallback to the default error handler
        }
        $feedback = $this->id . ' ' . $body;
        $status = $this->safe_number($response, 'status', 200);
        if ($status > 200) {
            $this->throw_exactly_matched_exception($this->exceptions['exact'], $status, $feedback);
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $status, $feedback);
        }
        return null;
    }
}
