<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\poloniexfutures as Exchange;

class poloniexfutures extends Exchange {

    public function describe() {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'poloniexfutures',
            'name' => 'Poloniex Futures',
            'countries' => array( 'US' ),
            // 30 requests per second
            'rateLimit' => 33.3,
            'certified' => false,
            'pro' => true,
            'version' => 'v1',
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => true,
                'swap' => true,
                'future' => false,
                'option' => null,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => false,
                'fetchFundingRate' => true,
                'fetchFundingRateHistory' => false,
                'fetchL3OrderBook' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrdersByStatus' => true,
                'fetchPositions' => true,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => true,
                'fetchTrades' => true,
                'setMarginMode' => true,
            ),
            'timeframes' => array(
                '1m' => 1,
                '5m' => 5,
                '15m' => 15,
                '30m' => 30,
                '1h' => 60,
                '2h' => 120,
                '4h' => 480,
                '12h' => 720,
                '1d' => 1440,
                '1w' => 10080,
            ),
            'urls' => array(
                'logo' => 'https://user-images.githubusercontent.com/1294454/27766817-e9456312-5ee6-11e7-9b3c-b628ca5626a5.jpg',
                'api' => array(
                    'public' => 'https://futures-api.poloniex.com',
                    'private' => 'https://futures-api.poloniex.com',
                ),
                'www' => 'https://www.poloniex.com',
                'doc' => 'https://futures-docs.poloniex.com',
                'fees' => 'https://poloniex.com/fee-schedule',
                'referral' => 'https://poloniex.com/signup?c=UBFZJRPJ',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'contracts/active' => 10,
                        'contracts/{symbol}' => 10,
                        'ticker' => 10,
                        'tickers' => 10, // v2
                        'level2/snapshot' => 180.002,
                        'level2/depth' => 180.002,
                        'level2/message/query' => 180.002,
                        'level3/snapshot' => 180.002, // v2
                        'trade/history' => 10,
                        'interest/query' => 10,
                        'index/query' => 10,
                        'mark-price/{symbol}/current' => 10,
                        'premium/query' => 10,
                        'funding-rate/{symbol}/current' => 10,
                        'timestamp' => 10,
                        'status' => 10,
                        'kline/query' => 10,
                    ),
                    'post' => array(
                        'bullet-public' => 10,
                    ),
                ),
                'private' => array(
                    'get' => array(
                        'account-overview' => 1,
                        'transaction-history' => 1,
                        'maxActiveOrders' => 1,
                        'maxRiskLimit' => 1,
                        'userFeeRate' => 1,
                        'marginType/query' => 1,
                        'orders' => 1,
                        'stopOrders' => 1,
                        'recentDoneOrders' => 1,
                        'orders/{order-id}' => 1,
                        'clientOrderId/{clientOid}' => 1,
                        'fills' => 1,
                        'openOrderStatistics' => 1,
                        'position' => 1.5,
                        'positions' => 1.5,
                        'funding-history' => 1,
                    ),
                    'post' => array(
                        'orders' => 1.5,
                        'batchOrders' => 1.5,
                        'position/margin/auto-deposit-status' => 1.5,
                        'position/margin/deposit-margin' => 1.5,
                        'position/margin/withdraw-margin' => 1.5,
                        'bullet-private' => 1,
                        'marginType/change' => 1,
                    ),
                    'delete' => array(
                        'orders/{order-id}' => 1.5,
                        'orders' => 150.016,
                        'stopOrders' => 150.016,
                    ),
                ),
            ),
            'precisionMode' => TICK_SIZE,
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.00075'),
                    'maker' => $this->parse_number('0.0001'),
                ),
                'funding' => array(
                    'tierBased' => false,
                    'percentage' => false,
                    'withdraw' => array(),
                    'deposit' => array(),
                ),
            ),
            'commonCurrencies' => array(
            ),
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
                'password' => true,
            ),
            'options' => array(
                'networks' => array(
                    'OMNI' => 'omni',
                    'ERC20' => 'eth',
                    'TRC20' => 'trx',
                ),
                'versions' => array(
                    'public' => array(
                        'GET' => array(
                            'ticker' => 'v2',
                            'tickers' => 'v2',
                            'level3/snapshot' => 'v2',
                        ),
                    ),
                ),
            ),
            'exceptions' => array(
                'exact' => array(
                    '400' => '\\ccxt\\BadRequest', // Bad Request -- Invalid request format
                    '401' => '\\ccxt\\AuthenticationError', // Unauthorized -- Invalid API Key
                    '403' => '\\ccxt\\NotSupported', // Forbidden -- The request is forbidden
                    '404' => '\\ccxt\\NotSupported', // Not Found -- The specified resource could not be found
                    '405' => '\\ccxt\\NotSupported', // Method Not Allowed -- You tried to access the resource with an invalid method.
                    '415' => '\\ccxt\\BadRequest',  // Content-Type -- application/json
                    '429' => '\\ccxt\\RateLimitExceeded', // Too Many Requests -- Access limit breached
                    '500' => '\\ccxt\\ExchangeNotAvailable', // Internal Server Error -- We had a problem with our server. Try again later.
                    '503' => '\\ccxt\\ExchangeNotAvailable', // Service Unavailable -- We're temporarily offline for maintenance. Please try again later.
                    '400001' => '\\ccxt\\AuthenticationError', // Any of KC-API-KEY, KC-API-SIGN, KC-API-TIMESTAMP, KC-API-PASSPHRASE is missing in your request header.
                    '400002' => '\\ccxt\\InvalidNonce', // KC-API-TIMESTAMP Invalid -- Time differs from server time by more than 5 seconds
                    '400003' => '\\ccxt\\AuthenticationError', // KC-API-KEY not exists
                    '400004' => '\\ccxt\\AuthenticationError', // KC-API-PASSPHRASE error
                    '400005' => '\\ccxt\\AuthenticationError', // Signature error -- Please check your signature
                    '400006' => '\\ccxt\\AuthenticationError', // The IP address is not in the API whitelist
                    '400007' => '\\ccxt\\AuthenticationError', // Access Denied -- Your API key does not have sufficient permissions to access the URI
                    '404000' => '\\ccxt\\NotSupported', // URL Not Found -- The requested resource could not be found
                    '400100' => '\\ccxt\\BadRequest', // Parameter Error -- You tried to access the resource with invalid parameters
                    '411100' => '\\ccxt\\AccountSuspended', // User is frozen -- Please contact us via support center
                    '500000' => '\\ccxt\\ExchangeNotAvailable', // Internal Server Error -- We had a problem with our server. Try again later.
                ),
                'broad' => array(
                    'Position does not exist' => '\\ccxt\\OrderNotFound', // array( "code":"200000", "msg":"Position does not exist" )
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()) {
        /**
         * retrieves $data on all markets for poloniexfutures
         * @see https://futures-docs.poloniex.com/#symbol-2
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing market $data
         */
        $response = $this->publicGetContractsActive ($params);
        //
        // {
        //  "code" => "200000",
        //  "data" => [
        //     array(
        //       "symbol" => "APTUSDTPERP",
        //       "takerFixFee" => "0E-10",
        //       "nextFundingRateTime" => "20145603",
        //       "makerFixFee" => "0E-10",
        //       "type" => "FFWCSX",
        //       "predictedFundingFeeRate" => "0.000000",
        //       "turnoverOf24h" => "386037.46704292",
        //       "initialMargin" => "0.05",
        //       "isDeleverage" => true,
        //       "createdAt" => "1666681959000",
        //       "fundingBaseSymbol" => ".APTINT8H",
        //       "lowPriceOf24h" => "4.34499979019165",
        //       "lastTradePrice" => "4.4090000000",
        //       "indexPriceTickSize" => "0.001",
        //       "fairMethod" => "FundingRate",
        //       "takerFeeRate" => "0.00040",
        //       "order" => "102",
        //       "updatedAt" => "1671076377000",
        //       "displaySettleCurrency" => "USDT",
        //       "indexPrice" => "4.418",
        //       "multiplier" => "1.0",
        //       "maxLeverage" => "20",
        //       "fundingQuoteSymbol" => ".USDTINT8H",
        //       "quoteCurrency" => "USDT",
        //       "maxOrderQty" => "1000000",
        //       "maxPrice" => "1000000.0000000000",
        //       "maintainMargin" => "0.025",
        //       "status" => "Open",
        //       "displayNameMap" => [Object],
        //       "openInterest" => "2367",
        //       "highPriceOf24h" => "4.763999938964844",
        //       "fundingFeeRate" => "0.000000",
        //       "volumeOf24h" => "83540.00000000",
        //       "riskStep" => "500000",
        //       "isQuanto" => true,
        //       "maxRiskLimit" => "20000",
        //       "rootSymbol" => "USDT",
        //       "baseCurrency" => "APT",
        //       "firstOpenDate" => "1666701000000",
        //       "tickSize" => "0.001",
        //       "markMethod" => "FairPrice",
        //       "indexSymbol" => ".PAPTUSDT",
        //       "markPrice" => "4.418",
        //       "minRiskLimit" => "1000000",
        //       "settlementFixFee" => "0E-10",
        //       "settlementSymbol" => '',
        //       "priceChgPctOf24h" => "-0.0704",
        //       "fundingRateSymbol" => ".APTUSDTPERPFPI8H",
        //       "makerFeeRate" => "0.00010",
        //       "isInverse" => false,
        //       "lotSize" => "1",
        //       "settleCurrency" => "USDT",
        //       "settlementFeeRate" => "0.0"
        //     ),
        //   ]
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_markets($data);
    }

    public function parse_market($market): array {
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseCurrency');
        $quoteId = $this->safe_string($market, 'quoteCurrency');
        $settleId = $this->safe_string($market, 'rootSymbol');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $settle = $this->safe_currency_code($settleId);
        $symbol = $base . '/' . $quote . ':' . $settle;
        $inverse = $this->safe_value($market, 'isInverse');
        $status = $this->safe_string($market, 'status');
        $multiplier = $this->safe_string($market, 'multiplier');
        $tickSize = $this->safe_number($market, 'indexPriceTickSize');
        $lotSize = $this->safe_number($market, 'lotSize');
        $limitAmountMax = $this->safe_number($market, 'maxOrderQty');
        $limitPriceMax = $this->safe_number($market, 'maxPrice');
        return array(
            'id' => $id,
            'symbol' => $symbol,
            'base' => $base,
            'quote' => $quote,
            'settle' => $settle,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => $settleId,
            'type' => 'swap',
            'spot' => false,
            'margin' => false,
            'swap' => true,
            'future' => false,
            'option' => false,
            'active' => ($status === 'Open'),
            'contract' => true,
            'linear' => !$inverse,
            'inverse' => $inverse,
            'taker' => $this->safe_number($market, 'takerFeeRate'),
            'maker' => $this->safe_number($market, 'makerFeeRate'),
            'contractSize' => $this->parse_number(Precise::string_abs($multiplier)),
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $lotSize,
                'price' => $tickSize,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => $this->parse_number('1'),
                    'max' => $this->safe_number($market, 'maxLeverage'),
                ),
                'amount' => array(
                    'min' => $lotSize,
                    'max' => $limitAmountMax,
                ),
                'price' => array(
                    'min' => $tickSize,
                    'max' => $limitPriceMax,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => $this->safe_integer($market, 'firstOpenDate'),
            'info' => $market,
        );
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //
        //    {
        //        "symbol" => "BTCUSDTPERP",                   // Market of the $symbol
        //        "sequence" => 45,                            // Sequence number which is used to judge the continuity of the pushed messages
        //        "side" => "sell",                            // Transaction side of the $last traded taker order
        //        "price" => 3600.00,                          // Filled price
        //        "size" => 16,                                // Filled quantity
        //        "tradeId" => "5c9dcf4170744d6f5a3d32fb",     // Order ID
        //        "bestBidSize" => 795,                        // Best bid size
        //        "bestBidPrice" => 3200.00,                   // Best bid
        //        "bestAskPrice" => 3600.00,                   // Best ask size
        //        "bestAskSize" => 284,                        // Best ask
        //        "ts" => 1553846081210004941                  // Filled time - nanosecond
        //    }
        //
        //    {
        //        "volume" => 30449670,            //24h Volume
        //        "turnover" => 845169919063,      //24h Turnover
        //        "lastPrice" => 3551,           //Last price
        //        "priceChgPct" => 0.0043,         //24h Change
        //        "ts" => 1547697294838004923      //Snapshot time (nanosecond)
        //    }
        //
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market);
        $timestamp = $this->safe_integer_product($ticker, 'ts', 0.000001);
        $last = $this->safe_string_2($ticker, 'price', 'lastPrice');
        $percentage = Precise::string_mul($this->safe_string($ticker, 'priceChgPct'), '100');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => null,
            'low' => null,
            'bid' => $this->safe_string($ticker, 'bestBidPrice'),
            'bidVolume' => $this->safe_string($ticker, 'bestBidSize'),
            'ask' => $this->safe_string($ticker, 'bestAskPrice'),
            'askVolume' => $this->safe_string($ticker, 'bestAskSize'),
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $this->safe_string_2($ticker, 'size', 'volume'),
            'quoteVolume' => $this->safe_string($ticker, 'turnover'),
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @see https://futures-docs.poloniex.com/#get-real-time-ticker-2-0
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetTicker (array_merge($request, $params));
        //
        // {
        //     "code" => "200000",
        //     "data" => {
        //       "sequence" => "11574719",
        //       "symbol" => "BTCUSDTPERP",
        //       "side" => "sell",
        //       "size" => "1",
        //       "price" => "16990.1",
        //       "bestBidSize" => "3",
        //       "bestBidPrice" => "16990.1",
        //       "bestAskPrice" => "16991.0",
        //       "tradeId" => "639c8a529fd7cf0001af4157",
        //       "bestAskSize" => "505",
        //       "ts" => "1671203410721232337"
        //     }
        // }
        //
        return $this->parse_ticker($this->safe_value($response, 'data', array()), $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://futures-docs.poloniex.com/#get-real-time-ticker-of-all-$symbols
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
         */
        $this->load_markets();
        $response = $this->publicGetTickers ($params);
        return $this->parse_tickers($this->safe_value($response, 'data', array()), $symbols);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @see https://futures-docs.poloniex.com/#get-full-order-book-$level-2
         * @see https://futures-docs.poloniex.com/#get-full-order-book-$level-3
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $level = $this->safe_number($params, 'level');
        $params = $this->omit($params, 'level');
        if ($level !== null && $level !== 2 && $level !== 3) {
            throw new BadRequest($this->id . ' fetchOrderBook() can only return $level 2 & 3');
        }
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = null;
        if ($level === 3) {
            $response = $this->publicGetLevel3Snapshot (array_merge($request, $params));
        } else {
            $response = $this->publicGetLevel2Snapshot (array_merge($request, $params));
        }
        // L2
        //
        // {
        //     "code" => "200000",
        //     "data" => {
        //     "symbol" => "BTCUSDTPERP",
        //     "sequence" => 1669149851334,
        //     "asks" => array(
        //         array(
        //             16952,
        //             12
        //         ),
        //     ),
        //     "bids" => array(
        //         array(
        //             16951.9,
        //             13
        //         ),
        //     ),
        // }
        //
        // L3
        //
        // {
        //     "code" => "200000",
        //     "data" => {
        //     "symbol" => "BTCUSDTPERP",
        //     "sequence" => 1669149851334,
        //     "asks" => array(
        //         array(
        //             "639c95388cba5100084eabce",
        //             "16952.0",
        //             "1",
        //             1671206200542484700
        //         ),
        //     ),
        //     "bids" => array(
        //         array(
        //             "626659d83385c200072e690b",
        //             "17.0",
        //             "1000",
        //             1650874840161291000
        //         ),
        //     ),
        // }
        //
        $data = $this->safe_value($response, 'data', array());
        $timestamp = $this->safe_integer_product($data, 'ts', 0.000001);
        $orderbook = null;
        if ($level === 3) {
            $orderbook = $this->parse_order_book($data, $market['symbol'], $timestamp, 'bids', 'asks', 1, 2);
        } else {
            $orderbook = $this->parse_order_book($data, $market['symbol'], $timestamp, 'bids', 'asks', 0, 1);
        }
        $orderbook['nonce'] = $this->safe_integer($data, 'sequence');
        return $orderbook;
    }

    public function fetch_l3_order_book(string $symbol, ?int $limit = null, $params = array ()) {
        /**
         * fetches level 3 information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://futures-docs.poloniex.com/#get-full-order-book-level-3
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$limit] max number of orders to return, default is null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        return $this->fetch_order_book($market['id'], null, array( 'level' => 3 ));
    }

    public function parse_trade($trade, ?array $market = null): array {
        //
        // fetchTrades (public)
        //
        //     {
        //         "sequence" => 11827985,
        //         "side" => "buy",
        //         "size" => 101,
        //         "price" => "16864.0000000000",
        //         "takerOrderId" => "639c986f0ac2470007be75ee",
        //         "makerOrderId" => "639c986fa69d280007b76111",
        //         "tradeId" => "639c986f9fd7cf0001afd7ee",
        //         "ts" => 1671207023485924400
        //     }
        //
        // fetchMyTrades
        //
        //   {
        //       "symbol" => "BTCUSDTPERP",  //Ticker symbol of the contract
        //       "tradeId" => "5ce24c1f0c19fc3c58edc47c",  //Trade ID
        //       "orderId" => "5ce24c16b210233c36ee321d",  // Order ID
        //       "side" => "sell",  //Transaction $side
        //       "liquidity" => "taker",  //Liquidity- taker or maker
        //       "price" => "8302",  //Filled price
        //       "size" => 10,  //Filled amount
        //       "value" => "0.001204529",  //Order value
        //       "feeRate" => "0.0005",  //Floating fees
        //       "fixFee" => "0.00000006",  //Fixed fees
        //       "feeCurrency" => "XBT",  //Charging currency
        //       "stop" => "",  //A mark to the stop order $type
        //       "fee" => "0.0000012022",  //Transaction $fee
        //       "orderType" => "limit",  //Order $type
        //       "tradeType" => "trade",  //Trade $type ($trade, liquidation, ADL or settlement)
        //       "createdAt" => 1558334496000,  //Time the order created
        //       "settleCurrency" => "XBT", //settlement currency
        //       "tradeTime" => 1558334496000000000 //trade time in nanosecond
        //   }
        //
        $marketId = $this->safe_string($trade, 'symbol');
        $market = $this->safe_market($marketId, $market, '-');
        $id = $this->safe_string($trade, 'tradeId');
        $orderId = $this->safe_string($trade, 'orderId');
        $takerOrMaker = $this->safe_string($trade, 'liquidity');
        $timestamp = $this->safe_integer($trade, 'ts');
        if ($timestamp !== null) {
            $timestamp = $this->parse_to_int($timestamp / 1000000);
        } else {
            $timestamp = $this->safe_integer($trade, 'createdAt');
            // if it's a historical v1 $trade, the exchange returns $timestamp in seconds
            if ((is_array($trade) && array_key_exists('dealValue', $trade)) && ($timestamp !== null)) {
                $timestamp = $timestamp * 1000;
            }
        }
        $priceString = $this->safe_string($trade, 'price');
        $amountString = $this->safe_string($trade, 'size');
        $side = $this->safe_string($trade, 'side');
        $fee = null;
        $feeCostString = $this->safe_string($trade, 'fee');
        if ($feeCostString !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'feeCurrency');
            $feeCurrency = $this->safe_currency_code($feeCurrencyId);
            if ($feeCurrency === null) {
                $feeCurrency = ($side === 'sell') ? $market['quote'] : $market['base'];
            }
            $fee = array(
                'cost' => $feeCostString,
                'currency' => $feeCurrency,
                'rate' => $this->safe_string($trade, 'feeRate'),
            );
        }
        $type = $this->safe_string($trade, 'orderType');
        if ($type === 'match') {
            $type = null;
        }
        $costString = $this->safe_string($trade, 'value');
        return $this->safe_trade(array(
            'info' => $trade,
            'id' => $id,
            'order' => $orderId,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'symbol' => $market['symbol'],
            'type' => $type,
            'takerOrMaker' => $takerOrMaker,
            'side' => $side,
            'price' => $priceString,
            'amount' => $amountString,
            'cost' => $costString,
            'fee' => $fee,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * get the list of most recent $trades for a particular $symbol
         * @see https://futures-docs.poloniex.com/#historical-data
         * @param {string} $symbol unified $symbol of the $market to fetch $trades for
         * @param {int} [$since] timestamp in ms of the earliest trade to fetch
         * @param {int} [$limit] the maximum amount of $trades to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=public-$trades trade structures~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetTradeHistory (array_merge($request, $params));
        //
        //    {
        //        "code" => "200000",
        //        "data" => [
        //        array(
        //          "sequence" => 11827985,
        //          "side" => "buy",
        //          "size" => 101,
        //          "price" => "16864.0000000000",
        //          "takerOrderId" => "639c986f0ac2470007be75ee",
        //          "makerOrderId" => "639c986fa69d280007b76111",
        //          "tradeId" => "639c986f9fd7cf0001afd7ee",
        //          "ts" => 1671207023485924400
        //        ),
        //    }
        //
        $trades = $this->safe_value($response, 'data', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_time($params = array ()) {
        /**
         * fetches the current integer timestamp in milliseconds from the poloniexfutures server
         * @see https://futures-docs.poloniex.com/#time
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int} the current integer timestamp in milliseconds from the poloniexfutures server
         */
        $response = $this->publicGetTimestamp ($params);
        //
        // {
        //     "code":"200000",
        //     "msg":"success",
        //     "data":1546837113087
        // }
        //
        return $this->safe_integer($response, 'data');
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick $data containing the open, high, low, and close price, and the volume of a $market
         * @see https://futures-docs.poloniex.com/#k-chart
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV $data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $marketId = $market['id'];
        $parsedTimeframe = $this->safe_integer($this->timeframes, $timeframe);
        $request = array(
            'symbol' => $marketId,
        );
        if ($parsedTimeframe !== null) {
            $request['granularity'] = $parsedTimeframe;
        } else {
            $request['granularity'] = $timeframe;
        }
        $duration = $this->parse_timeframe($timeframe) * 1000;
        $endAt = $this->milliseconds();
        if ($since !== null) {
            $request['from'] = $since;
            if ($limit === null) {
                $limit = $this->safe_integer($this->options, 'fetchOHLCVLimit', 200);
            }
            $endAt = $this->sum($since, $limit * $duration);
            $request['to'] = $endAt;
        } elseif ($limit !== null) {
            $since = $endAt - $limit * $duration;
            $request['from'] = $since;
        }
        $response = $this->publicGetKlineQuery (array_merge($request, $params));
        //
        //    {
        //        "code" => "200000",
        //        "data" => [
        //            [1636459200000, 4779.3, 4792.1, 4768.7, 4770.3, 78051],
        //            [1636460100000, 4770.25, 4778.55, 4757.55, 4777.25, 80164],
        //            [1636461000000, 4777.25, 4791.45, 4774.5, 4791.3, 51555]
        //        ]
        //    }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->parse_ohlcvs($data, $market, $timeframe, $since, $limit);
    }

    public function parse_balance($response): array {
        $result = array(
            'info' => $response,
            'timestamp' => null,
            'datetime' => null,
        );
        $data = $this->safe_value($response, 'data');
        $currencyId = $this->safe_string($data, 'currency');
        $code = $this->safe_currency_code($currencyId);
        $account = $this->account();
        $account['free'] = $this->safe_string($data, 'availableBalance');
        $account['total'] = $this->safe_string($data, 'accountEquity');
        $result[$code] = $account;
        return $this->safe_balance($result);
    }

    public function fetch_balance($params = array ()): array {
        /**
         * query for balance and get the amount of funds available for trading or funds locked in orders
         * @see https://futures-docs.poloniex.com/#get-account-overview
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=balance-structure balance structure~
         */
        $this->load_markets();
        $currencyId = $this->safe_string($params, 'currency');
        $request = array();
        if ($currencyId !== null) {
            $currency = $this->currency($currencyId);
            $request = array(
                'currency' => $currency['id'],
            );
        }
        $response = $this->privateGetAccountOverview (array_merge($request, $params));
        //
        //     {
        //         "code" => "200000",
        //         "data" => {
        //             "accountEquity" => 0.00005,
        //             "unrealisedPNL" => 0,
        //             "marginBalance" => 0.00005,
        //             "positionMargin" => 0,
        //             "orderMargin" => 0,
        //             "frozenFunds" => 0,
        //             "availableBalance" => 0.00005,
        //             "currency" => "XBT"
        //         }
        //     }
        //
        return $this->parse_balance($response);
    }

    public function create_order(string $symbol, string $type, string $side, $amount, $price = null, $params = array ()) {
        /**
         * Create an order on the exchange
         * @see https://futures-docs.poloniex.com/#place-an-order
         * @param {string} $symbol Unified CCXT $market $symbol
         * @param {string} $type 'limit' or 'market'
         * @param {string} $side 'buy' or 'sell'
         * @param {float} $amount the $amount of currency to trade
         * @param {float} [$price] *ignored in "market" orders* the $price at which the order is to be fullfilled at in units of the quote currency
         * @param {array} [$params]  extra parameters specific to the exchange API endpoint
         * @param {float} [$params->leverage] Leverage size of the order
         * @param {float} [$params->stopPrice] The $price at which a trigger order is triggered at
         * @param {bool} [$params->reduceOnly] A mark to reduce the position size only. Set to false by default. Need to set the position size when reduceOnly is true.
         * @param {string} [$params->timeInForce] GTC, GTT, IOC, or FOK, default is GTC, limit orders only
         * @param {string} [$params->postOnly] Post only flag, invalid when $timeInForce is IOC or FOK
         * @param {string} [$params->clientOid] client order id, defaults to uuid if not passed
         * @param {string} [$params->remark] remark for the order, length cannot exceed 100 utf8 characters
         * @param {string} [$params->stop] 'up' or 'down', defaults to 'up' if $side is sell and 'down' if $side is buy, requires $stopPrice
         * @param {string} [$params->stopPriceType]  TP, IP or MP, defaults to TP
         * @param {bool} [$params->closeOrder] set to true to close position
         * @param {bool} [$params->forceHold] A mark to forcely hold the funds for an order, even though it's an order to reduce the position size. This helps the order stay on the order book and not get canceled when the position size changes. Set to false by default.
         * @return {array} an ~@link https://docs.ccxt.com/#/?id=order-structure order structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        // required param, cannot be used twice
        $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId', $this->uuid());
        $params = $this->omit($params, array( 'clientOid', 'clientOrderId' ));
        if ($amount < 1) {
            throw new InvalidOrder($this->id . ' createOrder() minimum contract order $amount is 1');
        }
        $preciseAmount = intval($this->amount_to_precision($symbol, $amount));
        $request = array(
            'clientOid' => $clientOrderId,
            'side' => $side,
            'symbol' => $market['id'],
            'type' => $type, // limit or $market
            'size' => $preciseAmount,
            'leverage' => 1,
        );
        $stopPrice = $this->safe_value_2($params, 'triggerPrice', 'stopPrice');
        if ($stopPrice) {
            $request['stop'] = ($side === 'buy') ? 'up' : 'down';
            $stopPriceType = $this->safe_string($params, 'stopPriceType', 'TP');
            $request['stopPriceType'] = $stopPriceType;
            $request['stopPrice'] = $this->price_to_precision($symbol, $stopPrice);
        }
        $timeInForce = $this->safe_string_upper($params, 'timeInForce');
        if ($type === 'limit') {
            if ($price === null) {
                throw new ArgumentsRequired($this->id . ' createOrder() requires a $price argument for limit orders');
            } else {
                $request['price'] = $this->price_to_precision($symbol, $price);
            }
            if ($timeInForce !== null) {
                $request['timeInForce'] = $timeInForce;
            }
        }
        $postOnly = $this->safe_value($params, 'postOnly', false);
        $hidden = $this->safe_value($params, 'hidden');
        if ($postOnly && ($hidden !== null)) {
            throw new BadRequest($this->id . ' createOrder() does not support the $postOnly parameter together with a $hidden parameter');
        }
        $iceberg = $this->safe_value($params, 'iceberg');
        if ($iceberg) {
            $visibleSize = $this->safe_value($params, 'visibleSize');
            if ($visibleSize === null) {
                throw new ArgumentsRequired($this->id . ' createOrder() requires a $visibleSize parameter for $iceberg orders');
            }
        }
        $params = $this->omit($params, array( 'timeInForce', 'stopPrice', 'triggerPrice' )); // Time in force only valid for limit orders, exchange error when gtc for $market orders
        $response = $this->privatePostOrders (array_merge($request, $params));
        //
        //    {
        //        "code" => "200000",
        //        "data" => array(
        //            "orderId" => "619717484f1d010001510cde",
        //        ),
        //    }
        //
        $data = $this->safe_value($response, 'data', array());
        return $this->safe_order(array(
            'id' => $this->safe_string($data, 'orderId'),
            'clientOrderId' => null,
            'timestamp' => null,
            'datetime' => null,
            'lastTradeTimestamp' => null,
            'symbol' => null,
            'type' => null,
            'side' => null,
            'price' => null,
            'amount' => null,
            'cost' => null,
            'average' => null,
            'filled' => null,
            'remaining' => null,
            'status' => null,
            'fee' => null,
            'trades' => null,
            'timeInForce' => null,
            'postOnly' => null,
            'stopPrice' => null,
            'info' => $response,
        ), $market);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()) {
        /**
         * cancels an open order
         * @see https://futures-docs.poloniex.com/#cancel-an-order
         * @param {string} $id order $id
         * @param {string} $symbol unified $symbol of the market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $request = array(
            'order-id' => $id,
        );
        $response = $this->privateDeleteOrdersOrderId (array_merge($request, $params));
        //
        //    {
        //        "code" => "200000",
        //        "data" => {
        //            "cancelledOrderIds" => array(
        //                "619714b8b6353000014c505a",
        //            ),
        //            "cancelFailedOrders" => array(
        //                array(
        //                    "orderId" => "63a9c5c2b9e7d70007eb0cd5",
        //                    "orderState" => "2"
        //                }
        //            ),
        //        ),
        //    }
        //
        $data = $this->safe_value($response, 'data');
        $cancelledOrderIds = $this->safe_value($data, 'cancelledOrderIds');
        $cancelledOrderIdsLength = count($cancelledOrderIds);
        if ($cancelledOrderIdsLength === 0) {
            throw new InvalidOrder($this->id . ' cancelOrder() order already cancelled');
        }
        return $this->parse_order($data);
    }

    public function fetch_positions(?array $symbols = null, $params = array ()) {
        /**
         * fetch all open positions
         * @see https://futures-docs.poloniex.com/#get-position-list
         * @param {string[]|null} $symbols list of unified market $symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=position-structure position structure~
         */
        $this->load_markets();
        $response = $this->privateGetPositions ($params);
        //
        //    {
        //        "code" => "200000",
        //        "data" => array(
        //            {
        //                "id" => "615ba79f83a3410001cde321",
        //                "symbol" => "ETHUSDTM",
        //                "autoDeposit" => false,
        //                "maintMarginReq" => 0.005,
        //                "riskLimit" => 1000000,
        //                "realLeverage" => 18.61,
        //                "crossMode" => false,
        //                "delevPercentage" => 0.86,
        //                "openingTimestamp" => 1638563515618,
        //                "currentTimestamp" => 1638576872774,
        //                "currentQty" => 2,
        //                "currentCost" => 83.64200000,
        //                "currentComm" => 0.05018520,
        //                "unrealisedCost" => 83.64200000,
        //                "realisedGrossCost" => 0.00000000,
        //                "realisedCost" => 0.05018520,
        //                "isOpen" => true,
        //                "markPrice" => 4225.01,
        //                "markValue" => 84.50020000,
        //                "posCost" => 83.64200000,
        //                "posCross" => 0.0000000000,
        //                "posInit" => 3.63660870,
        //                "posComm" => 0.05236717,
        //                "posLoss" => 0.00000000,
        //                "posMargin" => 3.68897586,
        //                "posMaint" => 0.50637594,
        //                "maintMargin" => 4.54717586,
        //                "realisedGrossPnl" => 0.00000000,
        //                "realisedPnl" => -0.05018520,
        //                "unrealisedPnl" => 0.85820000,
        //                "unrealisedPnlPcnt" => 0.0103,
        //                "unrealisedRoePcnt" => 0.2360,
        //                "avgEntryPrice" => 4182.10,
        //                "liquidationPrice" => 4023.00,
        //                "bankruptPrice" => 4000.25,
        //                "settleCurrency" => "USDT",
        //                "isInverse" => false
        //            }
        //        )
        //    }
        //
        $data = $this->safe_value($response, 'data');
        return $this->parse_positions($data, $symbols);
    }

    public function parse_position($position, ?array $market = null) {
        //
        //    {
        //        "code" => "200000",
        //        "data" => array(
        //            {
        //                "id" => "615ba79f83a3410001cde321",         // Position ID
        //                "symbol" => "ETHUSDTM",                     // Symbol
        //                "autoDeposit" => false,                     // Auto deposit margin or not
        //                "maintMarginReq" => 0.005,                  // Maintenance margin requirement
        //                "riskLimit" => 1000000,                     // Risk limit
        //                "realLeverage" => 25.92,                    // Leverage of the order
        //                "crossMode" => false,                       // Cross mode or not
        //                "delevPercentage" => 0.76,                  // ADL ranking percentile
        //                "openingTimestamp" => 1638578546031,        // Open time
        //                "currentTimestamp" => 1638578563580,        // Current $timestamp
        //                "currentQty" => 2,                          // Current postion quantity
        //                "currentCost" => 83.787,                    // Current postion value
        //                "currentComm" => 0.0167574,                 // Current commission
        //                "unrealisedCost" => 83.787,                 // Unrealised value
        //                "realisedGrossCost" => 0.0,                 // Accumulated realised gross profit value
        //                "realisedCost" => 0.0167574,                // Current realised $position value
        //                "isOpen" => true,                           // Opened $position or not
        //                "markPrice" => 4183.38,                     // Mark price
        //                "markValue" => 83.6676,                     // Mark value
        //                "posCost" => 83.787,                        // Position value
        //                "posCross" => 0.0,                          // added margin
        //                "posInit" => 3.35148,                       // Leverage margin
        //                "posComm" => 0.05228309,                    // Bankruptcy cost
        //                "posLoss" => 0.0,                           // Funding fees paid out
        //                "posMargin" => 3.40376309,                  // Position margin
        //                "posMaint" => 0.50707892,                   // Maintenance margin
        //                "maintMargin" => 3.28436309,                // Position margin
        //                "realisedGrossPnl" => 0.0,                  // Accumulated realised gross profit value
        //                "realisedPnl" => -0.0167574,                // Realised profit and loss
        //                "unrealisedPnl" => -0.1194,                 // Unrealised profit and loss
        //                "unrealisedPnlPcnt" => -0.0014,             // Profit-loss ratio of the $position
        //                "unrealisedRoePcnt" => -0.0356,             // Rate of return on investment
        //                "avgEntryPrice" => 4189.35,                 // Average entry price
        //                "liquidationPrice" => 4044.55,              // Liquidation price
        //                "bankruptPrice" => 4021.75,                 // Bankruptcy price
        //                "settleCurrency" => "USDT",                 // Currency used to clear and settle the trades
        //                "isInverse" => false
        //            }
        //        )
        //    }
        //
        $symbol = $this->safe_string($position, 'symbol');
        $market = $this->safe_market($symbol, $market);
        $timestamp = $this->safe_integer($position, 'currentTimestamp');
        $size = $this->safe_string($position, 'currentQty');
        if (Precise::string_gt($size, '0')) {
            $side = 'long';
        } elseif (Precise::string_lt($size, '0')) {
            $side = 'short';
        }
        $notional = Precise::string_abs($this->safe_string($position, 'posCost'));
        $initialMargin = $this->safe_string($position, 'posInit');
        $initialMarginPercentage = Precise::string_div($initialMargin, $notional);
        // $marginRatio = Precise::string_div(maintenanceRate, collateral);
        $unrealisedPnl = $this->safe_string($position, 'unrealisedPnl');
        $crossMode = $this->safe_value($position, 'crossMode');
        // currently $crossMode is always set to false and only isolated positions are supported
        $marginMode = $crossMode ? 'cross' : 'isolated';
        return array(
            'info' => $position,
            'id' => null,
            'symbol' => $this->safe_string($market, 'symbol'),
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'initialMargin' => $this->parse_number($initialMargin),
            'initialMarginPercentage' => $this->parse_number($initialMarginPercentage),
            'maintenanceMargin' => $this->safe_number($position, 'posMaint'),
            'maintenanceMarginPercentage' => $this->safe_number($position, 'maintMarginReq'),
            'entryPrice' => $this->safe_number($position, 'avgEntryPrice'),
            'notional' => $this->parse_number($notional),
            'leverage' => $this->safe_number($position, 'realLeverage'),
            'unrealizedPnl' => $this->parse_number($unrealisedPnl),
            'contracts' => $this->parse_number(Precise::string_abs($size)),
            'contractSize' => $this->safe_value($market, 'contractSize'),
            'marginRatio' => null,
            'liquidationPrice' => $this->safe_number($position, 'liquidationPrice'),
            'markPrice' => $this->safe_number($position, 'markPrice'),
            'collateral' => $this->safe_number($position, 'maintMargin'),
            'marginMode' => $marginMode,
            'side' => $side,
            'percentage' => $this->parse_number(Precise::string_div($unrealisedPnl, $initialMargin)),
            'stopLossPrice' => null,
            'takeProfitPrice' => null,
        );
    }

    public function fetch_funding_history(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch the history of funding payments paid and received on this account
         * @see https://futures-docs.poloniex.com/#get-funding-history
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch funding history for
         * @param {int} [$limit] the maximum number of funding history structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-history-structure funding history structure~
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchFundingHistory() requires a $symbol argument');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        if ($since !== null) {
            $request['startAt'] = $since;
        }
        if ($limit !== null) {
            // * Since is ignored if $limit is defined
            $request['maxCount'] = $limit;
        }
        $response = $this->privateGetFundingHistory (array_merge($request, $params));
        //
        //    {
        //        "code" => "200000",
        //        "data" => {
        //            "dataList" => array(
        //                array(
        //                    "id" => 239471298749817,
        //                    "symbol" => "ETHUSDTM",
        //                    "timePoint" => 1638532800000,
        //                    "fundingRate" => 0.000100,
        //                    "markPrice" => 4612.8300000000,
        //                    "positionQty" => 12,
        //                    "positionCost" => 553.5396000000,
        //                    "funding" => -0.0553539600,
        //                    "settleCurrency" => "USDT"
        //                ),
        //                ...
        //            ),
        //            "hasMore" => true
        //        }
        //    }
        //
        $data = $this->safe_value($response, 'data');
        $dataList = $this->safe_value($data, 'dataList', array());
        $dataListLength = count($dataList);
        $fees = array();
        for ($i = 0; $i < $dataListLength; $i++) {
            $listItem = $dataList[$i];
            $timestamp = $this->safe_integer($listItem, 'timePoint');
            $fees[] = array(
                'info' => $listItem,
                'symbol' => $symbol,
                'code' => $this->safe_currency_code($this->safe_string($listItem, 'settleCurrency')),
                'timestamp' => $timestamp,
                'datetime' => $this->iso8601($timestamp),
                'id' => $this->safe_number($listItem, 'id'),
                'amount' => $this->safe_number($listItem, 'funding'),
                'fundingRate' => $this->safe_number($listItem, 'fundingRate'),
                'markPrice' => $this->safe_number($listItem, 'markPrice'),
                'positionQty' => $this->safe_number($listItem, 'positionQty'),
                'positionCost' => $this->safe_number($listItem, 'positionCost'),
            );
        }
        return $fees;
    }

    public function cancel_all_orders(?string $symbol = null, $params = array ()) {
        /**
         * cancel all open orders
         * @param {string} $symbol unified market $symbol, only orders in the market of this $symbol are cancelled when $symbol is not null
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {array} [$params->stop] When true, all the trigger orders will be cancelled
         * @return {array[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        $this->load_markets();
        $request = array();
        if ($symbol !== null) {
            $request['symbol'] = $this->market_id($symbol);
        }
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $params = $this->omit($params, array( 'stop', 'trigger' ));
        $response = null;
        if ($stop) {
            $response = $this->privateDeleteStopOrders (array_merge($request, $params));
        } else {
            $response = $this->privateDeleteOrders (array_merge($request, $params));
        }
        //
        //   {
        //       "code" => "200000",
        //       "data" => array(
        //           "cancelledOrderIds" => array(
        //                "619714b8b6353000014c505a",
        //           ),
        //       ),
        //   }
        //
        $data = $this->safe_value($response, 'data');
        $result = array();
        $cancelledOrderIds = $this->safe_value($data, 'cancelledOrderIds');
        $cancelledOrderIdsLength = count($cancelledOrderIds);
        for ($i = 0; $i < $cancelledOrderIdsLength; $i++) {
            $cancelledOrderId = $this->safe_string($cancelledOrderIds, $i);
            $result[] = array(
                'id' => $cancelledOrderId,
                'clientOrderId' => null,
                'timestamp' => null,
                'datetime' => null,
                'lastTradeTimestamp' => null,
                'symbol' => null,
                'type' => null,
                'side' => null,
                'price' => null,
                'amount' => null,
                'cost' => null,
                'average' => null,
                'filled' => null,
                'remaining' => null,
                'status' => null,
                'fee' => null,
                'trades' => null,
                'timeInForce' => null,
                'postOnly' => null,
                'stopPrice' => null,
                'info' => $response,
            );
        }
        return $result;
    }

    public function fetch_orders_by_status($status, ?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetches a list of $orders placed on the exchange
         * @see https://futures-docs.poloniex.com/#get-$order-list
         * @see https://futures-docs.poloniex.com/#get-untriggered-$stop-$order-list
         * @param {string} $status 'active' or 'closed', only 'active' is valid for $stop $orders
         * @param {string} $symbol unified $symbol for the $market to retrieve $orders from
         * @param {int} [$since] timestamp in ms of the earliest $order to retrieve
         * @param {int} [$limit] The maximum number of $orders to retrieve
         * @param {array} [$params] exchange specific parameters
         * @param {bool} [$params->stop] set to true to retrieve untriggered $stop $orders
         * @param {int} [$params->until] End time in ms
         * @param {string} [$params->side] buy or sell
         * @param {string} [$params->type] $limit or $market
         * @return An ~@link https://docs.ccxt.com/#/?id=$order-structure array of $order structures~
         */
        $this->load_markets();
        $stop = $this->safe_value_2($params, 'stop', 'trigger');
        $until = $this->safe_integer_2($params, 'until', 'till');
        $params = $this->omit($params, array( 'triger', 'stop', 'until', 'till' ));
        if ($status === 'closed') {
            $status = 'done';
        }
        $request = array();
        if (!$stop) {
            $request['status'] = ($status === 'open') ? 'active' : 'done';
        } elseif ($status !== 'open') {
            throw new BadRequest($this->id . ' fetchOrdersByStatus() can only fetch untriggered $stop orders');
        }
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['startAt'] = $since;
        }
        if ($until !== null) {
            $request['endAt'] = $until;
        }
        $response = null;
        if ($stop) {
            $response = $this->privateGetStopOrders (array_merge($request, $params));
        } else {
            $response = $this->privateGetOrders (array_merge($request, $params));
        }
        //
        //    {
        //        "code" => "200000",
        //        "data" => {
        //            "totalNum" => 1,
        //            "totalPage" => 1,
        //            "pageSize" => 50,
        //            "currentPage" => 1,
        //            "items" => array(
        //                {
        //                    "symbol" => "ADAUSDTPERP",
        //                    "leverage" => "1",
        //                    "hidden" => false,
        //                    "forceHold" => false,
        //                    "closeOrder" => false,
        //                    "type" => "limit",
        //                    "isActive" => true,
        //                    "createdAt" => 1678936920000,
        //                    "orderTime" => 1678936920480905922,
        //                    "price" => "0.3",
        //                    "iceberg" => false,
        //                    "stopTriggered" => false,
        //                    "id" => "64128b582cc0710007a3c840",
        //                    "value" => "3",
        //                    "timeInForce" => "GTC",
        //                    "updatedAt" => 1678936920000,
        //                    "side" => "buy",
        //                    "stopPriceType" => "",
        //                    "dealValue" => "0",
        //                    "dealSize" => 0,
        //                    "settleCurrency" => "USDT",
        //                    "stp" => "",
        //                    "filledValue" => "0",
        //                    "postOnly" => false,
        //                    "size" => 1,
        //                    "stop" => "",
        //                    "filledSize" => 0,
        //                    "reduceOnly" => false,
        //                    "marginType" => 1,
        //                    "cancelExist" => false,
        //                    "clientOid" => "ba669f39-dfcc-4664-9801-a42d06e59c2e",
        //                    "status" => "open"
        //                }
        //            )
        //        }
        //    }
        //
        $responseData = $this->safe_value($response, 'data', array());
        $orders = $this->safe_value($responseData, 'items', array());
        $ordersLength = count($orders);
        $result = array();
        for ($i = 0; $i < $ordersLength; $i++) {
            $order = $orders[$i];
            $orderStatus = $this->safe_string($order, 'status');
            if ($status === $orderStatus) {
                $result[] = $orders[$i];
            }
        }
        return $this->parse_orders($result, $market, $since, $limit);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetch all unfilled currently open orders
         * @see https://futures-docs.poloniex.com/#get-order-list
         * @see https://futures-docs.poloniex.com/#get-untriggered-stop-order-list
         * @param {string} $symbol unified market $symbol
         * @param {int} [$since] the earliest time in ms to fetch open orders for
         * @param {int} [$limit] the maximum number of  open orders structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->till] end time in ms
         * @param {string} [$params->side] buy or sell
         * @param {string} [$params->type] $limit, or market
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        return $this->fetch_orders_by_status('open', $symbol, $since, $limit, $params);
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on multiple closed orders made by the user
         * @see https://futures-docs.poloniex.com/#get-order-list
         * @see https://futures-docs.poloniex.com/#get-untriggered-stop-order-list
         * @param {string} $symbol unified market $symbol of the market orders were made in
         * @param {int} [$since] the earliest time in ms to fetch orders for
         * @param {int} [$limit] the maximum number of order structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {int} [$params->till] end time in ms
         * @param {string} [$params->side] buy or sell
         * @param {string} [$params->type] $limit, or market
         * @return {Order[]} a list of ~@link https://docs.ccxt.com/#/?id=order-structure order structures~
         */
        return $this->fetch_orders_by_status('closed', $symbol, $since, $limit, $params);
    }

    public function fetch_order($id = null, ?string $symbol = null, $params = array ()) {
        /**
         * fetches information on an order made by the user
         * @see https://futures-docs.poloniex.com/#get-details-of-a-single-order
         * @see https://futures-docs.poloniex.com/#get-single-order-by-clientoid
         * @param {string} $symbol unified $symbol of the $market the order was made in
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} An ~@link https://docs.ccxt.com/#/?$id=order-structure order structure~
         */
        $this->load_markets();
        $request = array();
        $response = null;
        if ($id === null) {
            $clientOrderId = $this->safe_string_2($params, 'clientOid', 'clientOrderId');
            if ($clientOrderId === null) {
                throw new InvalidOrder($this->id . ' fetchOrder() requires parameter $id or $params->clientOid');
            }
            $request['clientOid'] = $clientOrderId;
            $params = $this->omit($params, array( 'clientOid', 'clientOrderId' ));
            $response = $this->privateGetClientOrderIdClientOid (array_merge($request, $params));
        } else {
            $request['order-id'] = $id;
            $response = $this->privateGetOrdersOrderId (array_merge($request, $params));
        }
        //
        //    {
        //        "code" => "200000",
        //        "data" => {
        //            "symbol" => "ADAUSDTPERP",
        //            "leverage" => "1",
        //            "hidden" => false,
        //            "forceHold" => false,
        //            "closeOrder" => false,
        //            "type" => "market",
        //            "isActive" => false,
        //            "createdAt" => 1678929587000,
        //            "orderTime" => 1678929587248115582,
        //            "iceberg" => false,
        //            "stopTriggered" => false,
        //            "id" => "64126eb38c6919000737dcdc",
        //            "value" => "3.1783",
        //            "timeInForce" => "GTC",
        //            "updatedAt" => 1678929587000,
        //            "side" => "buy",
        //            "stopPriceType" => "",
        //            "dealValue" => "3.1783",
        //            "dealSize" => 1,
        //            "settleCurrency" => "USDT",
        //            "trades" => array(
        //                {
        //                    "feePay" => "0.00158915",
        //                    "tradeId" => "64126eb36803eb0001ff99bc"
        //                }
        //            ),
        //            "endAt" => 1678929587000,
        //            "stp" => "",
        //            "filledValue" => "3.1783",
        //            "postOnly" => false,
        //            "size" => 1,
        //            "stop" => "",
        //            "filledSize" => 1,
        //            "reduceOnly" => false,
        //            "marginType" => 1,
        //            "cancelExist" => false,
        //            "clientOid" => "d19e8fcb-2df4-44bc-afd4-67dd42048246",
        //            "status" => "done"
        //        }
        //    }
        //
        $market = ($symbol !== null) ? $this->market($symbol) : null;
        $responseData = $this->safe_value($response, 'data');
        return $this->parse_order($responseData, $market);
    }

    public function parse_order($order, ?array $market = null): array {
        //
        // createOrder
        //
        //    {
        //        "code" => "200000",
        //        "data" => array(
        //            "orderId" => "619717484f1d010001510cde",
        //        ),
        //    }
        //
        // fetchOrder
        //
        //    {
        //        "symbol" => "ADAUSDTPERP",
        //        "leverage" => "1",
        //        "hidden" => false,
        //        "forceHold" => false,
        //        "closeOrder" => false,
        //        "type" => "market",
        //        "isActive" => false,
        //        "createdAt" => 1678929587000,
        //        "orderTime" => 1678929587248115582,
        //        "iceberg" => false,
        //        "stopTriggered" => false,
        //        "id" => "64126eb38c6919000737dcdc",
        //        "value" => "3.1783",
        //        "timeInForce" => "GTC",
        //        "updatedAt" => 1678929587000,
        //        "side" => "buy",
        //        "stopPriceType" => "",
        //        "dealValue" => "3.1783",
        //        "dealSize" => 1,
        //        "settleCurrency" => "USDT",
        //        "trades" => array(
        //            {
        //                "feePay" => "0.00158915",
        //                "tradeId" => "64126eb36803eb0001ff99bc"
        //            }
        //        ),
        //        "endAt" => 1678929587000,
        //        "stp" => "",
        //        "filledValue" => "3.1783",
        //        "postOnly" => false,
        //        "size" => 1,
        //        "stop" => "",
        //        "filledSize" => 1,
        //        "reduceOnly" => false,
        //        "marginType" => 1,
        //        "cancelExist" => false,
        //        "clientOid" => "d19e8fcb-2df4-44bc-afd4-67dd42048246",
        //        "status" => "done"
        //    }
        //
        // cancelOrder
        //
        //    {
        //        "cancelledOrderIds" => array(
        //            "619714b8b6353000014c505a",
        //        ),
        //        "cancelFailedOrders" => array(
        //            array(
        //                "orderId" => "63a9c5c2b9e7d70007eb0cd5",
        //                "orderState" => "2"
        //            }
        //        ),
        //    ),
        //
        $marketId = $this->safe_string($order, 'symbol');
        $market = $this->safe_market($marketId, $market);
        $timestamp = $this->safe_integer($order, 'createdAt');
        // price is zero for $market $order
        // omitZero is called in safeOrder2
        $feeCurrencyId = $this->safe_string($order, 'feeCurrency');
        $filled = $this->safe_string($order, 'dealSize');
        $rawCost = $this->safe_string_2($order, 'dealFunds', 'filledValue');
        $average = null;
        if (Precise::string_gt($filled, '0')) {
            $contractSize = $this->safe_string($market, 'contractSize');
            if ($market['linear']) {
                $average = Precise::string_div($rawCost, Precise::string_mul($contractSize, $filled));
            } else {
                $average = Precise::string_div(Precise::string_mul($contractSize, $filled), $rawCost);
            }
        }
        // precision reported by their api is 8 d.p.
        // $average = Precise::string_div($rawCost, Precise::string_mul($filled, $market['contractSize']));
        // bool
        $isActive = $this->safe_value($order, 'isActive', false);
        $cancelExist = $this->safe_value($order, 'cancelExist', false);
        $status = $isActive ? 'open' : 'closed';
        $id = $this->safe_string($order, 'id');
        if (is_array($order) && array_key_exists('cancelledOrderIds', $order)) {
            $cancelledOrderIds = $this->safe_value($order, 'cancelledOrderIds');
            $id = $this->safe_string($cancelledOrderIds, 0);
        }
        return $this->safe_order(array(
            'info' => $order,
            'id' => $id,
            'clientOrderId' => $this->safe_string($order, 'clientOid'),
            'symbol' => $this->safe_string($market, 'symbol'),
            'type' => $this->safe_string($order, 'type'),
            'timeInForce' => $this->safe_string($order, 'timeInForce'),
            'postOnly' => $this->safe_value($order, 'postOnly'),
            'side' => $this->safe_string($order, 'side'),
            'amount' => $this->safe_string($order, 'size'),
            'price' => $this->safe_string($order, 'price'),
            'stopPrice' => $this->safe_string($order, 'stopPrice'),
            'cost' => $this->safe_string($order, 'dealValue'),
            'filled' => $filled,
            'remaining' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'fee' => array(
                'currency' => $this->safe_currency_code($feeCurrencyId),
                'cost' => $this->safe_string($order, 'fee'),
            ),
            'status' => $cancelExist ? 'canceled' : $status,
            'lastTradeTimestamp' => null,
            'average' => $average,
            'trades' => null,
        ), $market);
    }

    public function fetch_funding_rate(string $symbol, $params = array ()) {
        /**
         * fetch the current funding rate
         * @see https://futures-docs.poloniex.com/#get-premium-index
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=funding-rate-structure funding rate structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
        );
        $response = $this->publicGetFundingRateSymbolCurrent (array_merge($request, $params));
        //
        //    {
        //        "symbol" => ".BTCUSDTPERPFPI8H",
        //        "granularity" => 28800000,
        //        "timePoint" => 1558000800000,
        //        "value" => 0.00375,
        //        "predictedValue" => 0.00375
        //    }
        //
        $data = $this->safe_value($response, 'data');
        $fundingTimestamp = $this->safe_integer($data, 'timePoint');
        // the website displayes the previous funding rate as "funding rate"
        return array(
            'info' => $data,
            'symbol' => $market['symbol'],
            'markPrice' => null,
            'indexPrice' => null,
            'interestRate' => null,
            'estimatedSettlePrice' => null,
            'timestamp' => null,
            'datetime' => null,
            'fundingRate' => $this->safe_number($data, 'predictedValue'),
            'fundingTimestamp' => null,
            'fundingDatetime' => null,
            'nextFundingRate' => null,
            'nextFundingTimestamp' => null,
            'nextFundingDatetime' => null,
            'previousFundingRate' => $this->safe_number($data, 'value'),
            'previousFundingTimestamp' => $fundingTimestamp,
            'previousFundingDatetime' => $this->iso8601($fundingTimestamp),
        );
    }

    public function fetch_my_trades(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()) {
        /**
         * fetch all $trades made by the user
         * @see https://futures-docs.poloniex.com/#get-fills
         * @param {string} $symbol unified $market $symbol
         * @param {int} [$since] the earliest time in ms to fetch $trades for
         * @param {int} [$limit] the maximum number of $trades structures to retrieve
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @param {string} orderIdFills filles for a specific order (other parameters can be ignored if specified)
         * @param {string} side buy or sell
         * @param {string} type  $limit, $market, limit_stop or market_stop
         * @param {int} endAt end time (milisecond)
         * @return {Trade[]} a list of ~@link https://docs.ccxt.com/#/?id=trade-structure trade structures~
         */
        $this->load_markets();
        $request = array(
        );
        $market = null;
        if ($symbol !== null) {
            $market = $this->market($symbol);
            $request['symbol'] = $market['id'];
        }
        if ($since !== null) {
            $request['startAt'] = $since;
        }
        $response = $this->privateGetFills (array_merge($request, $params));
        //
        //    {
        //        "code" => "200000",
        //        "data" => {
        //          "currentPage":1,
        //          "pageSize":1,
        //          "totalNum":251915,
        //          "totalPage":251915,
        //          "items":array(
        //              {
        //                "symbol" => "BTCUSDTPERP",  //Ticker $symbol of the contract
        //                "tradeId" => "5ce24c1f0c19fc3c58edc47c",  //Trade ID
        //                "orderId" => "5ce24c16b210233c36ee321d",  // Order ID
        //                "side" => "sell",  //Transaction side
        //                "liquidity" => "taker",  //Liquidity- taker or maker
        //                "price" => "8302",  //Filled price
        //                "size" => 10,  //Filled amount
        //                "value" => "0.001204529",  //Order value
        //                "feeRate" => "0.0005",  //Floating fees
        //                "fixFee" => "0.00000006",  //Fixed fees
        //                "feeCurrency" => "XBT",  //Charging currency
        //                "stop" => "",  //A mark to the stop order type
        //                "fee" => "0.0000012022",  //Transaction fee
        //                "orderType" => "limit",  //Order type
        //                "tradeType" => "trade",  //Trade type (trade, liquidation, ADL or settlement)
        //                "createdAt" => 1558334496000,  //Time the order created
        //                "settleCurrency" => "XBT", //settlement currency
        //                "tradeTime" => 1558334496000000000 //trade time in nanosecond
        //              }
        //          )
        //        }
        //    }
        //
        $data = $this->safe_value($response, 'data', array());
        $trades = $this->safe_value($data, 'items', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function set_margin_mode($marginMode, $symbol, $params = array ()) {
        /**
         * set margin mode to 'cross' or 'isolated'
         * @see https://futures-docs.poloniex.com/#change-margin-mode
         * @param {int} $marginMode 0 (isolated) or 1 (cross)
         * @param {string} $symbol unified $market $symbol
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} response from the exchange
         */
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() requires a $symbol argument');
        }
        if (($marginMode !== 0) && ($marginMode !== 1)) {
            throw new ArgumentsRequired($this->id . ' setMarginMode() $marginMode must be 0 (isolated) or 1 (cross)');
        }
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'symbol' => $market['id'],
            'marginType' => $marginMode,
        );
        return $this->privatePostMarginTypeChange ($request);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'][$api];
        $versions = $this->safe_value($this->options, 'versions', array());
        $apiVersions = $this->safe_value($versions, $api, array());
        $methodVersions = $this->safe_value($apiVersions, $method, array());
        $defaultVersion = $this->safe_string($methodVersions, $path, $this->version);
        $version = $this->safe_string($params, 'version', $defaultVersion);
        $tail = '/api/' . $version . '/' . $this->implode_params($path, $params);
        $url .= $tail;
        $query = $this->omit($params, $this->extract_params($path));
        $queryLength = $query;
        if ($api === 'public') {
            if ($queryLength) {
                $url .= '?' . $this->urlencode($query);
            }
        } else {
            $this->check_required_credentials();
            $endpoint = '/api/v1/' . $this->implode_params($path, $params);
            $bodyEncoded = $this->urlencode($query);
            if ($method !== 'GET' && $method !== 'HEAD') {
                $body = $query;
            } else {
                if ($queryLength && $bodyEncoded !== '') {
                    $url .= '?' . $bodyEncoded;
                    $endpoint .= '?' . $bodyEncoded;
                }
            }
            $now = (string) $this->milliseconds();
            $endpart = '';
            if ($body !== null) {
                $body = $this->json($query);
                $endpart = $body;
            }
            $payload = $now . $method . $endpoint . $endpart;
            $signature = $this->hmac($this->encode($payload), $this->encode($this->secret), 'sha256', 'base64');
            $headers = array(
                'PF-API-SIGN' => $signature,
                'PF-API-TIMESTAMP' => $now,
                'PF-API-KEY' => $this->apiKey,
                'PF-API-PASSPHRASE' => $this->password,
            );
            $headers['Content-Type'] = 'application/json';
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function handle_errors($code, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $body);
            return null;
        }
        //
        // bad
        //     array( "code" => "400100", "msg" => "validation.createOrder.clientOidIsRequired" )
        // good
        //     array( $code => "200000", data => array( ... ))
        //
        $errorCode = $this->safe_string($response, 'code');
        $message = $this->safe_string($response, 'msg', '');
        $feedback = $this->id . ' ' . $message;
        $this->throw_exactly_matched_exception($this->exceptions['exact'], $message, $feedback);
        $this->throw_exactly_matched_exception($this->exceptions['exact'], $errorCode, $feedback);
        $this->throw_broadly_matched_exception($this->exceptions['broad'], $body, $feedback);
        return null;
    }
}
