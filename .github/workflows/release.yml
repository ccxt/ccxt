name: Release workflow

on:
  workflow_dispatch:
    inputs:
      example_input:
        description: 'An example input value'
        required: false
        default: 'default-value'

permissions:
  contents: write

jobs:
  manual-job:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Print Trigger Info
        run: |
          echo "This workflow was triggered manually."
          echo "Input value: ${{ github.event.inputs.example_input }}"
      - uses: actions/checkout@v4
        if: github.ref == 'refs/heads/master'
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 2
      - uses: actions/checkout@v4
        if: github.ref != 'refs/heads/master'
        with:
          fetch-depth: 2
      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install GH CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.2.1
      - name: create usr/share/dotnet folder
        run: |
          sudo mkdir -p /usr/share/dotnet
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '7.0.x'
          dotnet-quality: 'preview'
          run: |
            sudo mkdir -p /usr/share/dotnet
      - name: Install NPM dependencies
        run: npm ci
      - name: Composer install
        run: composer install
      - name: Install python dependencies
        run: pip install -r ci-requirements.txt
      - name: Transpile and Build
        run: npm run force-build
      - name: Base tests Rest
        run: npm run test-base-rest
      - name: Base tests Ws
        run: npm run test-base-ws
      - name: Id tests
        run: npm run id-tests
      - name: Request tests
        run: npm run request-tests
      - name: Response tests
        run: npm run response-tests
      - name: CommonJs tests
        run: npm run commonjs-test
      - name: Package Test
        run: npm run package-test
      - name: Freshness Test
        run: npm run test-freshness
      # Will start the deployment process
      - name: Set new Version
        run: |
          npm config set git-tag-version=false
          NPM_VERSION=$(npm version patch)
          echo "NPM_VERSION=$NPM_VERSION" >> $GITHUB_ENV
          COMMIT_MESSAGE=${NPM_VERSION:1}
          echo "COMMIT_MESSAGE=$COMMIT_MESSAGE" >> $GITHUB_ENV
      - name: vss and copy python-files
        run: npm run vss && npm run copy-python-files
      - name: Commit files
        run: git add . -A
      - name: Git status
        run: git status
      - name: cleanup old tags
        run: npm run cleanup-old-tags --limit
      - name: Create GH Release and git-tag-version and push
        run: |
               git tag -a "${COMMIT_MESSAGE}"
               git push origin --tags HEAD:master
               echo "Creating github release..."
               gh release create "${COMMIT_MESSAGE}" --generate-notes --verify-tag

      - name: C# Release Build
        run: npm run buildCSRelease
      - name: Deploy C#
        env:
          NUGGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
        run: ./cs/deploy.sh;
      - name: Deploy Python
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: cd python && ./deploy.sh && cd ..;
      - name: Deploy NPM
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public