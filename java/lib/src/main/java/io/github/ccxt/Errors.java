
package io.github.ccxt;
// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

   class BaseError extends Exception
    {
        BaseError() { super(); }
        BaseError(String message) { super(message); }
        BaseError(String message, Throwable cause) { super(message, cause); }
    }
   class ExchangeError extends BaseError
    {
        ExchangeError() { super(); }
        ExchangeError(String message) { super(message); }
        ExchangeError(String message, BaseError inner) { super(message, inner); }
    }
   class AuthenticationError extends ExchangeError
    {
        AuthenticationError() { super(); }
        AuthenticationError(String message) { super(message); }
        AuthenticationError(String message, ExchangeError inner) { super(message, inner); }
    }
   class PermissionDenied extends AuthenticationError
    {
        PermissionDenied() { super(); }
        PermissionDenied(String message) { super(message); }
        PermissionDenied(String message, AuthenticationError inner) { super(message, inner); }
    }
   class AccountNotEnabled extends PermissionDenied
    {
        AccountNotEnabled() { super(); }
        AccountNotEnabled(String message) { super(message); }
        AccountNotEnabled(String message, PermissionDenied inner) { super(message, inner); }
    }
   class AccountSuspended extends AuthenticationError
    {
        AccountSuspended() { super(); }
        AccountSuspended(String message) { super(message); }
        AccountSuspended(String message, AuthenticationError inner) { super(message, inner); }
    }
   class ArgumentsRequired extends ExchangeError
    {
        ArgumentsRequired() { super(); }
        ArgumentsRequired(String message) { super(message); }
        ArgumentsRequired(String message, ExchangeError inner) { super(message, inner); }
    }
   class BadRequest extends ExchangeError
    {
        BadRequest() { super(); }
        BadRequest(String message) { super(message); }
        BadRequest(String message, ExchangeError inner) { super(message, inner); }
    }
   class BadSymbol extends BadRequest
    {
        BadSymbol() { super(); }
        BadSymbol(String message) { super(message); }
        BadSymbol(String message, BadRequest inner) { super(message, inner); }
    }
   class OperationRejected extends ExchangeError
    {
        OperationRejected() { super(); }
        OperationRejected(String message) { super(message); }
        OperationRejected(String message, ExchangeError inner) { super(message, inner); }
    }
   class NoChange extends OperationRejected
    {
        NoChange() { super(); }
        NoChange(String message) { super(message); }
        NoChange(String message, OperationRejected inner) { super(message, inner); }
    }
   class MarginModeAlreadySet extends NoChange
    {
        MarginModeAlreadySet() { super(); }
        MarginModeAlreadySet(String message) { super(message); }
        MarginModeAlreadySet(String message, NoChange inner) { super(message, inner); }
    }
   class MarketClosed extends OperationRejected
    {
        MarketClosed() { super(); }
        MarketClosed(String message) { super(message); }
        MarketClosed(String message, OperationRejected inner) { super(message, inner); }
    }
   class ManualInteractionNeeded extends OperationRejected
    {
        ManualInteractionNeeded() { super(); }
        ManualInteractionNeeded(String message) { super(message); }
        ManualInteractionNeeded(String message, OperationRejected inner) { super(message, inner); }
    }
   class RestrictedLocation extends OperationRejected
    {
        RestrictedLocation() { super(); }
        RestrictedLocation(String message) { super(message); }
        RestrictedLocation(String message, OperationRejected inner) { super(message, inner); }
    }
   class InsufficientFunds extends ExchangeError
    {
        InsufficientFunds() { super(); }
        InsufficientFunds(String message) { super(message); }
        InsufficientFunds(String message, ExchangeError inner) { super(message, inner); }
    }
   class InvalidAddress extends ExchangeError
    {
        InvalidAddress() { super(); }
        InvalidAddress(String message) { super(message); }
        InvalidAddress(String message, ExchangeError inner) { super(message, inner); }
    }
   class AddressPending extends InvalidAddress
    {
        AddressPending() { super(); }
        AddressPending(String message) { super(message); }
        AddressPending(String message, InvalidAddress inner) { super(message, inner); }
    }
   class InvalidOrder extends ExchangeError
    {
        InvalidOrder() { super(); }
        InvalidOrder(String message) { super(message); }
        InvalidOrder(String message, ExchangeError inner) { super(message, inner); }
    }
   class OrderNotFound extends InvalidOrder
    {
        OrderNotFound() { super(); }
        OrderNotFound(String message) { super(message); }
        OrderNotFound(String message, InvalidOrder inner) { super(message, inner); }
    }
   class OrderNotCached extends InvalidOrder
    {
        OrderNotCached() { super(); }
        OrderNotCached(String message) { super(message); }
        OrderNotCached(String message, InvalidOrder inner) { super(message, inner); }
    }
   class OrderImmediatelyFillable extends InvalidOrder
    {
        OrderImmediatelyFillable() { super(); }
        OrderImmediatelyFillable(String message) { super(message); }
        OrderImmediatelyFillable(String message, InvalidOrder inner) { super(message, inner); }
    }
   class OrderNotFillable extends InvalidOrder
    {
        OrderNotFillable() { super(); }
        OrderNotFillable(String message) { super(message); }
        OrderNotFillable(String message, InvalidOrder inner) { super(message, inner); }
    }
   class DuplicateOrderId extends InvalidOrder
    {
        DuplicateOrderId() { super(); }
        DuplicateOrderId(String message) { super(message); }
        DuplicateOrderId(String message, InvalidOrder inner) { super(message, inner); }
    }
   class ContractUnavailable extends InvalidOrder
    {
        ContractUnavailable() { super(); }
        ContractUnavailable(String message) { super(message); }
        ContractUnavailable(String message, InvalidOrder inner) { super(message, inner); }
    }
   class NotSupported extends ExchangeError
    {
        NotSupported() { super(); }
        NotSupported(String message) { super(message); }
        NotSupported(String message, ExchangeError inner) { super(message, inner); }
    }
   class InvalidProxySettings extends ExchangeError
    {
        InvalidProxySettings() { super(); }
        InvalidProxySettings(String message) { super(message); }
        InvalidProxySettings(String message, ExchangeError inner) { super(message, inner); }
    }
   class ExchangeClosedByUser extends ExchangeError
    {
        ExchangeClosedByUser() { super(); }
        ExchangeClosedByUser(String message) { super(message); }
        ExchangeClosedByUser(String message, ExchangeError inner) { super(message, inner); }
    }
   class OperationFailed extends BaseError
    {
        OperationFailed() { super(); }
        OperationFailed(String message) { super(message); }
        OperationFailed(String message, BaseError inner) { super(message, inner); }
    }
   class NetworkError extends OperationFailed
    {
        NetworkError() { super(); }
        NetworkError(String message) { super(message); }
        NetworkError(String message, OperationFailed inner) { super(message, inner); }
    }
   class DDoSProtection extends NetworkError
    {
        DDoSProtection() { super(); }
        DDoSProtection(String message) { super(message); }
        DDoSProtection(String message, NetworkError inner) { super(message, inner); }
    }
   class RateLimitExceeded extends NetworkError
    {
        RateLimitExceeded() { super(); }
        RateLimitExceeded(String message) { super(message); }
        RateLimitExceeded(String message, NetworkError inner) { super(message, inner); }
    }
   class ExchangeNotAvailable extends NetworkError
    {
        ExchangeNotAvailable() { super(); }
        ExchangeNotAvailable(String message) { super(message); }
        ExchangeNotAvailable(String message, NetworkError inner) { super(message, inner); }
    }
   class OnMaintenance extends ExchangeNotAvailable
    {
        OnMaintenance() { super(); }
        OnMaintenance(String message) { super(message); }
        OnMaintenance(String message, ExchangeNotAvailable inner) { super(message, inner); }
    }
   class InvalidNonce extends NetworkError
    {
        InvalidNonce() { super(); }
        InvalidNonce(String message) { super(message); }
        InvalidNonce(String message, NetworkError inner) { super(message, inner); }
    }
   class ChecksumError extends InvalidNonce
    {
        ChecksumError() { super(); }
        ChecksumError(String message) { super(message); }
        ChecksumError(String message, InvalidNonce inner) { super(message, inner); }
    }
   class RequestTimeout extends NetworkError
    {
        RequestTimeout() { super(); }
        RequestTimeout(String message) { super(message); }
        RequestTimeout(String message, NetworkError inner) { super(message, inner); }
    }
   class BadResponse extends OperationFailed
    {
        BadResponse() { super(); }
        BadResponse(String message) { super(message); }
        BadResponse(String message, OperationFailed inner) { super(message, inner); }
    }
   class NullResponse extends BadResponse
    {
        NullResponse() { super(); }
        NullResponse(String message) { super(message); }
        NullResponse(String message, BadResponse inner) { super(message, inner); }
    }
   class CancelPending extends OperationFailed
    {
        CancelPending() { super(); }
        CancelPending(String message) { super(message); }
        CancelPending(String message, OperationFailed inner) { super(message, inner); }
    }
   class UnsubscribeError extends BaseError
    {
        UnsubscribeError() { super(); }
        UnsubscribeError(String message) { super(message); }
        UnsubscribeError(String message, BaseError inner) { super(message, inner); }
    }
