<?php
namespace ccxt;
include_once (__DIR__.'/../../ccxt.php');
// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -----------------------------------------------------------------------------

error_reporting(E_ALL | E_STRICT);
date_default_timezone_set('UTC');

use ccxt\Precise;
use React\Async;
use React\Promise;


// AUTO-TRANSPILE //
$exchange = new \ccxt\pro\binance(array());


$exchange->verbose = false;


$print_message = function ($message) {
    var_dump('Received message from: ', $message->metadata->topic, ' : ', $message->payload['symbol'], ' : ', $message->payload['last']);
};


$store_in_db = function ($message) {
    return Async\async(function () use ($message) {
        global $exchange;
        $exchange->sleep(1000);
        var_dump('stored in DB index: ', $message->metadata->index);
    }) ();
};


$price_alert = function ($message) {
    global $exchange, $price_alert;
    $last = $exchange->safe_number($message->payload, 'last');
    if ($last !== null && $last > 10000) {
        var_dump('Price is over 10000!!!!!!!!!!');
        $exchange->stream->unsubscribe('tickers', $price_alert);
    }
};


$check_for_errors = function ($message) {
    return Async\async(function () use ($message) {
        global $create_subscriptions;
        if ($message->error) {
            Async\await($create_subscriptions());
            var_dump('Error: ', $message->error);
        }

    }) ();
};


$create_subscriptions = function () {
    return Async\async(function () {
        global $exchange;
        Async\await($exchange->watch_tickers());

    }) ();
};


function example() {
    // create ws subscriptions
    return Async\async(function () {
        global $exchange, $print_message, $check_for_errors, $store_in_db, $price_alert, $create_subscriptions;
        Async\await($create_subscriptions());
        // subscribe synchronously to all tickers with a sync function
        $exchange->stream->subscribe('tickers', $print_message, true);
        // subscribe synchronously to check for errors
        $exchange->stream->subscribe('tickers', $check_for_errors, true);
        // subscribe asynchronously to all tickers with a sync function
        $exchange->stream->subscribe('tickers', $price_alert, false);
        // subscribe synchronously to a single ticker with an async function
        $exchange->stream->subscribe('tickers.BTC/USDT', $store_in_db, true);
        // subscribe to exchange wide errors
        //$exchange->stream->subscribe('errors', $check_for_errors, true);
        Async\await($exchange->sleep(10000));
        // get history length
        $history = $exchange->stream->get_message_history('tickers');
        var_dump('History Length:', count($history));
        $exchange->close();
    }) ();
}


Async\await(example());


exit(0);
