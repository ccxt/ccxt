import os
import sys

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(root + '/python')

# ----------------------------------------------------------------------------

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

# ----------------------------------------------------------------------------
import asyncio
import ccxt.pro as ccxt  # noqa: E402


# AUTO-TRANSPILE #
def print_message(message):
    if message.error:
        print('Received error, should reconnect. Error: ', message.error)
    print('Received message: ', ' from: ', message.metadata.topic, ' : ', str(message.payload), ' : index : ', message.metadata.index, ' : history.length ', len(message.metadata.history))


async def example():
    exchange = ccxt.binance({})
    exchange.set_sandbox_mode(True)
    # exchange.verbose = true;
    # create ws subscriptions
    symbol = 'BTC/USDT:USDT'
    # subscribe to errors and all incoming messages
    exchange.subscribe_errors(print_message)
    exchange.subscribe_raw(print_message)
    # public subscriptions
    await exchange.subscribe_ohlcv(symbol, '1m', print_message)
    await exchange.subscribe_order_book(symbol, print_message)
    await exchange.subscribe_ticker(symbol, print_message)
    await exchange.subscribe_tickers(None, print_message)
    await exchange.subscribe_trades(symbol, print_message)
    # private subscriptions
    print('---- start private subscriptions asynchrounously -----')
    await exchange.subscribe_balance(print_message)
    await exchange.subscribe_my_trades(symbol, print_message)
    await exchange.subscribe_orders(symbol, print_message)
    await exchange.subscribe_position_for_symbols(None, print_message)
    await exchange.sleep(5000)
    print('---- create Market order -----')
    res = await exchange.create_order(symbol, 'market', 'buy', 0.01)
    print(res)
    await exchange.sleep(5000)
    # subscribe to error?
    print('---- closing exchange -----')
    await exchange.close()

    await exchange.close()


asyncio.run(example())
