import os
import sys

root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
sys.path.append(root + '/python')

# ----------------------------------------------------------------------------

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

# ----------------------------------------------------------------------------
import asyncio
import ccxt.pro as ccxt  # noqa: E402


# AUTO-TRANSPILE #
exchange = ccxt.binance({})


exchange.verbose = False


def print_message(message):
    print('Received message from: ', message.metadata.topic, ' : ', message.payload['symbol'], ' : ', message.payload['last'])


async def store_in_db(message):
    await exchange.sleep(1000)
    print('stored in DB index: ', message.metadata.index)


def price_alert(message):
    last = exchange.safe_number(message.payload, 'last')
    if last is not None and last > 10000:
        print('Price is over 10000!!!!!!!!!!')
        exchange.stream.unsubscribe('tickers', price_alert)


async def check_for_errors(message):
    if message.error:  
        await create_subscriptions()
        print('Error: ', message.error)


async def create_subscriptions():
    await exchange.watch_tickers()


async def example():
    # create ws subscriptions
    await create_subscriptions()

    # subscribe synchronously to all tickers with a sync function
    exchange.stream.subscribe('tickers', print_message, True)
    # subscribe synchronously to check for errors
    exchange.stream.subscribe('tickers', check_for_errors, True)
    # subscribe asynchronously to all tickers with a sync function
    exchange.stream.subscribe('tickers', price_alert, False)
    # subscribe synchronously to a single ticker with an async function
    exchange.stream.subscribe('tickers.BTC/USDT', store_in_db, True)
    # subscribe to exchange wide errors
    exchange.stream.subscribe('errors', check_for_errors, True)

    await exchange.sleep(10000)
    # get history length
    history = exchange.stream.get_message_history('tickers')
    print('History Length:', len(history))
    await exchange.close()


asyncio.run(example())


sys.exit(0)
