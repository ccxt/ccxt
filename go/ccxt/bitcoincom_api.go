// -------------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -------------------------------------------------------------------------------

package ccxt

func (this *bitcoincom) PublicGetPublicCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicCurrencyCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicCurrencyCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicSymbolSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicSymbolSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicTickerSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicTickerSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicPriceRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicPriceRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicPriceHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicPriceHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicPriceTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicPriceTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicPriceTickerSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicPriceTickerSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicTrades (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicTrades", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicTradesSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicTradesSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicOrderbook (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicOrderbook", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicOrderbookSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicOrderbookSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicCandlesSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicCandlesSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicConvertedCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicConvertedCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicConvertedCandlesSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicConvertedCandlesSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesInfoSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesInfoSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesHistoryFunding (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesHistoryFunding", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesHistoryFundingSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesHistoryFundingSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesIndexPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesIndexPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesIndexPriceSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesIndexPriceSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesMarkPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesMarkPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesMarkPriceSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesMarkPriceSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesPremiumIndex (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesPremiumIndex", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesPremiumIndexSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesPremiumIndexSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesOpenInterest (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesOpenInterest", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PublicGetPublicFuturesCandlesOpenInterestSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetPublicFuturesCandlesOpenInterestSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotBalanceCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotBalanceCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotFee (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotFee", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotFeeSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotFeeSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotHistoryOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotHistoryOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSpotHistoryTrade (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSpotHistoryTrade", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginAccountIsolatedSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginAccountIsolatedSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginAccountCrossCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginAccountCrossCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginHistoryOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginHistoryOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginHistoryTrade (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginHistoryTrade", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginHistoryPositions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginHistoryPositions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetMarginHistoryClearing (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetMarginHistoryClearing", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesBalanceCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesBalanceCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesAccountIsolatedSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesAccountIsolatedSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesFee (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesFee", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesFeeSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesFeeSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesHistoryOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesHistoryOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesHistoryTrade (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesHistoryTrade", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesHistoryPositions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesHistoryPositions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetFuturesHistoryClearing (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetFuturesHistoryClearing", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletBalanceCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletBalanceCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletCryptoAddress (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletCryptoAddress", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletCryptoAddressRecentDeposit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletCryptoAddressRecentDeposit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletCryptoAddressRecentWithdraw (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletCryptoAddressRecentWithdraw", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletCryptoAddressCheckMine (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletCryptoAddressCheckMine", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletTransactions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletTransactions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletTransactionsTxId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletTransactionsTxId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletCryptoFeeEstimate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletCryptoFeeEstimate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletAirdrops (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletAirdrops", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetWalletAmountLocks (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetWalletAmountLocks", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSubAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSubAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSubAccountAcl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSubAccountAcl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSubAccountBalanceSubAccID (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSubAccountBalanceSubAccID", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateGetSubAccountCryptoAddressSubAccIDCurrency (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetSubAccountCryptoAddressSubAccIDCurrency", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostSpotOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostSpotOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostSpotOrderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostSpotOrderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostMarginOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostMarginOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostMarginOrderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostMarginOrderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostFuturesOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostFuturesOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostFuturesOrderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostFuturesOrderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletCryptoAddress (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletCryptoAddress", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletCryptoWithdraw (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletCryptoWithdraw", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletConvert (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletConvert", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletInternalWithdraw (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletInternalWithdraw", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletCryptoCheckOffchainAvailable (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletCryptoCheckOffchainAvailable", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletCryptoFeesEstimate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletCryptoFeesEstimate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostWalletAirdropsIdClaim (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWalletAirdropsIdClaim", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostSubAccountFreeze (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostSubAccountFreeze", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostSubAccountActivate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostSubAccountActivate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostSubAccountTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostSubAccountTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePostSubAccountAcl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostSubAccountAcl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePatchSpotOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePatchSpotOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePatchMarginOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePatchMarginOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePatchFuturesOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePatchFuturesOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteSpotOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteSpotOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteSpotOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteSpotOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteMarginPosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteMarginPosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteMarginPositionIsolatedSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteMarginPositionIsolatedSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteMarginOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteMarginOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteMarginOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteMarginOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteFuturesPosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteFuturesPosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteFuturesPositionMarginModeSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteFuturesPositionMarginModeSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteFuturesOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteFuturesOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteFuturesOrderClientOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteFuturesOrderClientOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivateDeleteWalletCryptoWithdrawId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteWalletCryptoWithdrawId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePutMarginAccountIsolatedSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePutMarginAccountIsolatedSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePutFuturesAccountIsolatedSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePutFuturesAccountIsolatedSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitcoincom) PrivatePutWalletCryptoWithdrawId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePutWalletCryptoWithdrawId", parameters))
       PanicOnError(ch)
   }()
   return ch
}
