// -------------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -------------------------------------------------------------------------------

package ccxt

func (this *bitbns) WwwGetOrderFetchMarkets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetOrderFetchMarkets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) WwwGetOrderFetchTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetOrderFetchTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) WwwGetOrderFetchOrderbook (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetOrderFetchOrderbook", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) WwwGetOrderGetTickerWithVolume (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetOrderGetTickerWithVolume", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) WwwGetExchangeDataOhlc (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetExchangeDataOhlc", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) WwwGetExchangeDataOrderBook (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetExchangeDataOrderBook", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) WwwGetExchangeDataTradedetails (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("wwwGetExchangeDataTradedetails", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1GetPlatformStatus (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1GetPlatformStatus", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1GetTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1GetTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1GetOrderbookSellSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1GetOrderbookSellSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1GetOrderbookBuySymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1GetOrderbookBuySymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostCurrentCoinBalanceEVERYTHING (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostCurrentCoinBalanceEVERYTHING", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostGetApiUsageStatusUSAGE (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostGetApiUsageStatusUSAGE", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostGetOrderSocketTokenUSAGE (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostGetOrderSocketTokenUSAGE", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostCurrentCoinBalanceSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostCurrentCoinBalanceSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostOrderStatusSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostOrderStatusSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostDepositHistorySymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostDepositHistorySymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostWithdrawHistorySymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostWithdrawHistorySymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostWithdrawHistoryAllSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostWithdrawHistoryAllSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostDepositHistoryAllSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostDepositHistoryAllSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostListOpenOrdersSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostListOpenOrdersSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostListOpenStopOrdersSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostListOpenStopOrdersSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostGetCoinAddressSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostGetCoinAddressSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostPlaceSellOrderSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostPlaceSellOrderSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostPlaceBuyOrderSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostPlaceBuyOrderSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostBuyStopLossSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostBuyStopLossSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostSellStopLossSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostSellStopLossSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostCancelOrderSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostCancelOrderSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostCancelStopLossOrderSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostCancelStopLossOrderSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostListExecutedOrdersSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostListExecutedOrdersSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostPlaceMarketOrderSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostPlaceMarketOrderSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V1PostPlaceMarketOrderQntySymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1PostPlaceMarketOrderQntySymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V2PostOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v2PostOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V2PostCancel (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v2PostCancel", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V2PostGetordersnew (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v2PostGetordersnew", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitbns) V2PostMarginOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v2PostMarginOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}
