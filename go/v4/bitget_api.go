// -------------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -------------------------------------------------------------------------------

package ccxt

func (this *bitget) PublicCommonGetV2PublicAnnoucements (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicCommonGetV2PublicAnnoucements", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicCommonGetV2PublicTime (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicCommonGetV2PublicTime", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1NoticeQueryAllNotices (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1NoticeQueryAllNotices", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1PublicTime (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1PublicTime", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1PublicCurrencies (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1PublicCurrencies", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1PublicProducts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1PublicProducts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1PublicProduct (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1PublicProduct", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketFillsHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketFillsHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketDepth (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketDepth", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketSpotVipLevel (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketSpotVipLevel", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketMergeDepth (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketMergeDepth", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1MarketHistoryCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1MarketHistoryCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1PublicLoanCoinInfos (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1PublicLoanCoinInfos", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetSpotV1PublicLoanHourInterest (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetSpotV1PublicLoanHourInterest", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotPublicCoins (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotPublicCoins", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotPublicSymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotPublicSymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketVipFeeRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketVipFeeRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketMergeDepth (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketMergeDepth", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketOrderbook (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketOrderbook", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketHistoryCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketHistoryCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicSpotGetV2SpotMarketFillsHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicSpotGetV2SpotMarketFillsHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketContracts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketContracts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketDepth (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketDepth", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketContractVipLevel (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketContractVipLevel", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketFillsHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketFillsHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketIndex (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketIndex", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketFundingTime (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketFundingTime", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketHistoryFundRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketHistoryFundRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketCurrentFundRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketCurrentFundRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketOpenInterest (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketOpenInterest", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketMarkPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketMarkPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketSymbolLeverage (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketSymbolLeverage", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketQueryPositionLever (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketQueryPositionLever", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketOpenLimit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketOpenLimit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketHistoryCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketHistoryCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketHistoryIndexCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketHistoryIndexCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketHistoryMarkCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketHistoryMarkCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetMixV1MarketMergeDepth (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetMixV1MarketMergeDepth", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketVipFeeRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketVipFeeRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketMergeDepth (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketMergeDepth", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketFillsHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketFillsHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketHistoryCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketHistoryCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketHistoryIndexCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketHistoryIndexCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketHistoryMarkCandles (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketHistoryMarkCandles", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketOpenInterest (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketOpenInterest", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketFundingTime (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketFundingTime", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketSymbolPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketSymbolPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketHistoryFundRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketHistoryFundRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketCurrentFundRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketCurrentFundRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketContracts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketContracts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketQueryPositionLever (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketQueryPositionLever", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMixGetV2MixMarketAccountLongShort (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMixGetV2MixMarketAccountLongShort", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetMarginV1CrossPublicInterestRateAndLimit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetMarginV1CrossPublicInterestRateAndLimit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetMarginV1IsolatedPublicInterestRateAndLimit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetMarginV1IsolatedPublicInterestRateAndLimit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetMarginV1CrossPublicTierData (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetMarginV1CrossPublicTierData", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetMarginV1IsolatedPublicTierData (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetMarginV1IsolatedPublicTierData", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetMarginV1PublicCurrencies (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetMarginV1PublicCurrencies", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetV2MarginCurrencies (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetV2MarginCurrencies", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicMarginGetV2MarginMarketLongShortRatio (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicMarginGetV2MarginMarketLongShortRatio", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicEarnGetV2EarnLoanPublicCoinInfos (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicEarnGetV2EarnLoanPublicCoinInfos", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PublicEarnGetV2EarnLoanPublicHourInterest (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicEarnGetV2EarnLoanPublicHourInterest", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1WalletDepositAddress (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1WalletDepositAddress", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1WalletWithdrawalList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1WalletWithdrawalList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1WalletDepositList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1WalletDepositList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1AccountGetInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1AccountGetInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1AccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1AccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1AccountAssetsLite (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1AccountAssetsLite", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1AccountTransferRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1AccountTransferRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1ConvertCurrencies (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1ConvertCurrencies", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1ConvertConvertRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1ConvertConvertRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1LoanOngoingOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1LoanOngoingOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1LoanRepayHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1LoanRepayHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1LoanReviseHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1LoanReviseHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1LoanBorrowHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1LoanBorrowHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetSpotV1LoanDebts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetSpotV1LoanDebts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotTradeOrderInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotTradeOrderInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotTradeUnfilledOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotTradeUnfilledOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotTradeHistoryOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotTradeHistoryOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotTradeFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotTradeFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotTradeCurrentPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotTradeCurrentPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotTradeHistoryPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotTradeHistoryPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotAccountInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotAccountInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotAccountSubaccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotAccountSubaccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotAccountBills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotAccountBills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotAccountTransferRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotAccountTransferRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2AccountFundingAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2AccountFundingAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2AccountBotAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2AccountBotAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2AccountAllAccountBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2AccountAllAccountBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotWalletDepositAddress (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotWalletDepositAddress", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotWalletDepositRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotWalletDepositRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotGetV2SpotWalletWithdrawalRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotGetV2SpotWalletWithdrawalRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletTransferV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletTransferV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletSubTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletSubTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletWithdrawalV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletWithdrawalV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletWithdrawalInner (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletWithdrawalInner", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1WalletWithdrawalInnerV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1WalletWithdrawalInnerV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1AccountSubAccountSpotAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1AccountSubAccountSpotAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1AccountBills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1AccountBills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeBatchOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeBatchOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeCancelOrderV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeCancelOrderV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeCancelSymbolOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeCancelSymbolOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeCancelBatchOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeCancelBatchOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeCancelBatchOrdersV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeCancelBatchOrdersV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeOrderInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeOrderInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeOpenOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeOpenOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TradeFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TradeFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1PlanPlacePlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1PlanPlacePlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1PlanModifyPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1PlanModifyPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1PlanCancelPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1PlanCancelPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1PlanCurrentPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1PlanCurrentPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1PlanHistoryPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1PlanHistoryPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1PlanBatchCancelPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1PlanBatchCancelPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1ConvertQuotedPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1ConvertQuotedPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1ConvertTrade (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1ConvertTrade", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1LoanBorrow (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1LoanBorrow", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1LoanRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1LoanRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1LoanRevisePledge (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1LoanRevisePledge", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceOrderOrderCurrentList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceOrderOrderCurrentList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceOrderOrderHistoryList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceOrderOrderHistoryList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceOrderCloseTrackingOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceOrderCloseTrackingOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceOrderUpdateTpsl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceOrderUpdateTpsl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceOrderFollowerEndOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceOrderFollowerEndOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceOrderSpotInfoList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceOrderSpotInfoList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceConfigGetTraderSettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceConfigGetTraderSettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceConfigGetFollowerSettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceConfigGetFollowerSettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceUserMyTraders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceUserMyTraders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceConfigSetFollowerConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceConfigSetFollowerConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceUserMyFollowers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceUserMyFollowers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceConfigSetProductCode (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceConfigSetProductCode", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceUserRemoveTrader (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceUserRemoveTrader", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceGetRemovableFollower (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceGetRemovableFollower", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceUserRemoveFollower (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceUserRemoveFollower", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceProfitTotalProfitInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceProfitTotalProfitInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceProfitTotalProfitList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceProfitTotalProfitList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceProfitProfitHisList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceProfitProfitHisList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceProfitProfitHisDetailList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceProfitProfitHisDetailList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceProfitWaitProfitDetailList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceProfitWaitProfitDetailList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostSpotV1TraceUserGetTraderInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostSpotV1TraceUserGetTraderInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradePlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradePlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeBatchOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeBatchOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeBatchCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeBatchCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeCancelSymbolOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeCancelSymbolOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradePlacePlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradePlacePlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeModifyPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeModifyPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeCancelPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeCancelPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotTradeBatchCancelPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotTradeBatchCancelPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotWalletTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotWalletTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotWalletSubaccountTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotWalletSubaccountTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotWalletWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotWalletWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotWalletCancelWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotWalletCancelWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateSpotPostV2SpotWalletModifyDepositAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateSpotPostV2SpotWalletModifyDepositAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1AccountAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1AccountAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1AccountAccounts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1AccountAccounts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PositionSinglePosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PositionSinglePosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PositionSinglePositionV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PositionSinglePositionV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PositionAllPosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PositionAllPosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PositionAllPositionV2 (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PositionAllPositionV2", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PositionHistoryPosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PositionHistoryPosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1AccountAccountBill (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1AccountAccountBill", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1AccountAccountBusinessBill (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1AccountAccountBusinessBill", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderCurrent (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderCurrent", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderMarginCoinCurrent (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderMarginCoinCurrent", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderHistoryProductType (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderHistoryProductType", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderDetail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderDetail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1OrderAllFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1OrderAllFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PlanCurrentPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PlanCurrentPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1PlanHistoryPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1PlanHistoryPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceCurrentTrack (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceCurrentTrack", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceFollowerOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceFollowerOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceFollowerHistoryOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceFollowerHistoryOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceHistoryTrack (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceHistoryTrack", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceSummary (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceSummary", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceProfitSettleTokenIdGroup (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceProfitSettleTokenIdGroup", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceProfitDateGroupList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceProfitDateGroupList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TradeProfitDateList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TradeProfitDateList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceWaitProfitDateList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceWaitProfitDateList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceTraderSymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceTraderSymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceTraderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceTraderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceTraderDetail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceTraderDetail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetMixV1TraceQueryTraceConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetMixV1TraceQueryTraceConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixAccountAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixAccountAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixAccountAccounts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixAccountAccounts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixAccountSubAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixAccountSubAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixAccountOpenCount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixAccountOpenCount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixAccountBill (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixAccountBill", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixMarketQueryPositionLever (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixMarketQueryPositionLever", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixPositionSinglePosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixPositionSinglePosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixPositionAllPosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixPositionAllPosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixPositionHistoryPosition (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixPositionHistoryPosition", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderDetail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderDetail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderFillHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderFillHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderOrdersPending (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderOrdersPending", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderOrdersHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderOrdersHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderOrdersPlanPending (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderOrdersPlanPending", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixOrderOrdersPlanHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixOrderOrdersPlanHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixGetV2MixMarketPositionLongShort (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixGetV2MixMarketPositionLongShort", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1AccountSubAccountContractAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1AccountSubAccountContractAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1AccountOpenCount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1AccountOpenCount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1AccountSetLeverage (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1AccountSetLeverage", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1AccountSetMargin (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1AccountSetMargin", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1AccountSetMarginMode (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1AccountSetMarginMode", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1AccountSetPositionMode (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1AccountSetPositionMode", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderBatchOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderBatchOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderCancelBatchOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderCancelBatchOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderModifyOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderModifyOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderCancelSymbolOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderCancelSymbolOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderCancelAllOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderCancelAllOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1OrderCloseAllPositions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1OrderCloseAllPositions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanPlacePlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanPlacePlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanModifyPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanModifyPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanModifyPlanPreset (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanModifyPlanPreset", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanPlaceTPSL (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanPlaceTPSL", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanPlaceTrailStop (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanPlaceTrailStop", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanPlacePositionsTPSL (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanPlacePositionsTPSL", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanModifyTPSLPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanModifyTPSLPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanCancelPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanCancelPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanCancelSymbolPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanCancelSymbolPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1PlanCancelAllPlan (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1PlanCancelAllPlan", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceCloseTrackOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceCloseTrackOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceModifyTPSL (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceModifyTPSL", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceCloseTrackOrderBySymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceCloseTrackOrderBySymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceSetUpCopySymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceSetUpCopySymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceFollowerSetBatchTraceConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceFollowerSetBatchTraceConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceFollowerCloseByTrackingNo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceFollowerCloseByTrackingNo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceFollowerCloseByAll (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceFollowerCloseByAll", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceFollowerSetTpsl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceFollowerSetTpsl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceCancelCopyTrader (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceCancelCopyTrader", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceTraderUpdateConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceTraderUpdateConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceMyTraderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceMyTraderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceMyFollowerList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceMyFollowerList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceRemoveFollower (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceRemoveFollower", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TracePublicGetFollowerConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TracePublicGetFollowerConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceReportOrderHistoryList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceReportOrderHistoryList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceReportOrderCurrentList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceReportOrderCurrentList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceQueryTraderTpslRatioConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceQueryTraderTpslRatioConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostMixV1TraceTraderUpdateTpslRatioConfig (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostMixV1TraceTraderUpdateTpslRatioConfig", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixAccountSetLeverage (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixAccountSetLeverage", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixAccountSetMargin (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixAccountSetMargin", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixAccountSetMarginMode (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixAccountSetMarginMode", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixAccountSetPositionMode (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixAccountSetPositionMode", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderClickBackhand (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderClickBackhand", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderBatchPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderBatchPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderModifyOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderModifyOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderBatchCancelOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderBatchCancelOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderClosePositions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderClosePositions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderPlaceTpslOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderPlaceTpslOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderPlacePlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderPlacePlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderModifyTpslOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderModifyTpslOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderModifyPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderModifyPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMixPostV2MixOrderCancelPlanOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMixPostV2MixOrderCancelPlanOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1FeeQuery (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1FeeQuery", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1SubVirtualList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1SubVirtualList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1SubVirtualApiList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1SubVirtualApiList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1TaxSpotRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1TaxSpotRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1TaxFutureRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1TaxFutureRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1TaxMarginRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1TaxMarginRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetUserV1TaxP2pRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetUserV1TaxP2pRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetV2UserVirtualSubaccountList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetV2UserVirtualSubaccountList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserGetV2UserVirtualSubaccountApikeyList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserGetV2UserVirtualSubaccountApikeyList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostUserV1SubVirtualCreate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostUserV1SubVirtualCreate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostUserV1SubVirtualModify (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostUserV1SubVirtualModify", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostUserV1SubVirtualApiBatchCreate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostUserV1SubVirtualApiBatchCreate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostUserV1SubVirtualApiCreate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostUserV1SubVirtualApiCreate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostUserV1SubVirtualApiModify (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostUserV1SubVirtualApiModify", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostV2UserCreateVirtualSubaccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostV2UserCreateVirtualSubaccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostV2UserModifyVirtualSubaccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostV2UserModifyVirtualSubaccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostV2UserBatchCreateSubaccountAndApikey (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostV2UserBatchCreateSubaccountAndApikey", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostV2UserCreateVirtualSubaccountApikey (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostV2UserCreateVirtualSubaccountApikey", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateUserPostV2UserModifyVirtualSubaccountApikey (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateUserPostV2UserModifyVirtualSubaccountApikey", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetP2pV1MerchantMerchantList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetP2pV1MerchantMerchantList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetP2pV1MerchantMerchantInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetP2pV1MerchantMerchantInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetP2pV1MerchantAdvList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetP2pV1MerchantAdvList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetP2pV1MerchantOrderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetP2pV1MerchantOrderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetV2P2pMerchantList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetV2P2pMerchantList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetV2P2pMerchantInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetV2P2pMerchantInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetV2P2pOrderList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetV2P2pOrderList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateP2pGetV2P2pAdvList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateP2pGetV2P2pAdvList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubEmail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubEmail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubSpotAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubSpotAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubFutureAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubFutureAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubaccountTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubaccountTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubaccountDeposit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubaccountDeposit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubaccountWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubaccountWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetBrokerV1AccountSubApiList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetBrokerV1AccountSubApiList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetV2BrokerAccountInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetV2BrokerAccountInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetV2BrokerAccountSubaccountList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetV2BrokerAccountSubaccountList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetV2BrokerAccountSubaccountEmail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetV2BrokerAccountSubaccountEmail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetV2BrokerAccountSubaccountSpotAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetV2BrokerAccountSubaccountSpotAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetV2BrokerAccountSubaccountFutureAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetV2BrokerAccountSubaccountFutureAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerGetV2BrokerManageSubaccountApikeyList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerGetV2BrokerManageSubaccountApikeyList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubCreate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubCreate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubModify (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubModify", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubModifyEmail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubModifyEmail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubAddress (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubAddress", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubAutoTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubAutoTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubApiCreate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubApiCreate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostBrokerV1AccountSubApiModify (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostBrokerV1AccountSubApiModify", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerAccountModifySubaccountEmail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerAccountModifySubaccountEmail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerAccountCreateSubaccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerAccountCreateSubaccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerAccountModifySubaccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerAccountModifySubaccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerAccountSubaccountAddress (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerAccountSubaccountAddress", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerAccountSubaccountWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerAccountSubaccountWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerAccountSetSubaccountAutotransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerAccountSetSubaccountAutotransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerManageCreateSubaccountApikey (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerManageCreateSubaccountApikey", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateBrokerPostV2BrokerManageModifySubaccountApikey (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateBrokerPostV2BrokerManageModifySubaccountApikey", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossAccountRiskRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossAccountRiskRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossAccountMaxTransferOutAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossAccountMaxTransferOutAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedAccountMaxTransferOutAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedAccountMaxTransferOutAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedOrderOpenOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedOrderOpenOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedOrderHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedOrderHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedOrderFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedOrderFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedLoanList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedLoanList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedRepayList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedRepayList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedInterestList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedInterestList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedLiquidationList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedLiquidationList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedFinList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedFinList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossOrderOpenOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossOrderOpenOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossOrderHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossOrderHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossOrderFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossOrderFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossLoanList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossLoanList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossRepayList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossRepayList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossInterestList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossInterestList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossLiquidationList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossLiquidationList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossFinList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossFinList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1CrossAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1CrossAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetMarginV1IsolatedAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetMarginV1IsolatedAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedBorrowHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedBorrowHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedRepayHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedRepayHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedInterestHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedInterestHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedLiquidationHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedLiquidationHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedFinancialRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedFinancialRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedAccountRiskRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedAccountRiskRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedAccountMaxBorrowableAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedAccountMaxBorrowableAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedAccountMaxTransferOutAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedAccountMaxTransferOutAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedInterestRateAndLimit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedInterestRateAndLimit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedTierData (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedTierData", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedOpenOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedOpenOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedHistoryOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedHistoryOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginCrossedFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginCrossedFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedBorrowHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedBorrowHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedRepayHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedRepayHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedInterestHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedInterestHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedLiquidationHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedLiquidationHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedFinancialRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedFinancialRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedAccountRiskRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedAccountRiskRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedAccountMaxBorrowableAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedAccountMaxBorrowableAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedAccountMaxTransferOutAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedAccountMaxTransferOutAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedInterestRateAndLimit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedInterestRateAndLimit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedTierData (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedTierData", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedOpenOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedOpenOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedHistoryOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedHistoryOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginGetV2MarginIsolatedFills (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginGetV2MarginIsolatedFills", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossAccountBorrow (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossAccountBorrow", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedAccountBorrow (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedAccountBorrow", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossAccountRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossAccountRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedAccountRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedAccountRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedAccountRiskRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedAccountRiskRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossAccountMaxBorrowableAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossAccountMaxBorrowableAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedAccountMaxBorrowableAmount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedAccountMaxBorrowableAmount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedAccountFlashRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedAccountFlashRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedAccountQueryFlashRepayStatus (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedAccountQueryFlashRepayStatus", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossAccountFlashRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossAccountFlashRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossAccountQueryFlashRepayStatus (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossAccountQueryFlashRepayStatus", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedOrderPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedOrderPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedOrderBatchPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedOrderBatchPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedOrderCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedOrderCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1IsolatedOrderBatchCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1IsolatedOrderBatchCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossOrderPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossOrderPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossOrderBatchPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossOrderBatchPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossOrderCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossOrderCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostMarginV1CrossOrderBatchCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostMarginV1CrossOrderBatchCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedAccountBorrow (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedAccountBorrow", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedAccountRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedAccountRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedAccountFlashRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedAccountFlashRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedAccountQueryFlashRepayStatus (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedAccountQueryFlashRepayStatus", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedBatchPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedBatchPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginCrossedBatchCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginCrossedBatchCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedAccountBorrow (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedAccountBorrow", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedAccountRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedAccountRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedAccountFlashRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedAccountFlashRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedAccountQueryFlashRepayStatus (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedAccountQueryFlashRepayStatus", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedBatchPlaceOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedBatchPlaceOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateMarginPostV2MarginIsolatedBatchCancelOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateMarginPostV2MarginIsolatedBatchCancelOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderOrderCurrentTrack (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderOrderCurrentTrack", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderOrderHistoryTrack (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderOrderHistoryTrack", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderOrderTotalDetail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderOrderTotalDetail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderProfitHistorySummarys (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderProfitHistorySummarys", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderProfitHistoryDetails (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderProfitHistoryDetails", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderProfitDetails (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderProfitDetails", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderProfitsGroupCoinDate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderProfitsGroupCoinDate", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderConfigQuerySymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderConfigQuerySymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixTraderConfigQueryFollowers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixTraderConfigQueryFollowers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixFollowerQueryCurrentOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixFollowerQueryCurrentOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixFollowerQueryHistoryOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixFollowerQueryHistoryOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixFollowerQuerySettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixFollowerQuerySettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixFollowerQueryTraders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixFollowerQueryTraders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixFollowerQueryQuantityLimit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixFollowerQueryQuantityLimit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixBrokerQueryTraders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixBrokerQueryTraders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixBrokerQueryHistoryTraces (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixBrokerQueryHistoryTraces", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopyMixBrokerQueryCurrentTraces (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopyMixBrokerQueryCurrentTraces", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderProfitSummarys (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderProfitSummarys", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderProfitHistoryDetails (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderProfitHistoryDetails", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderProfitDetails (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderProfitDetails", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderOrderTotalDetail (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderOrderTotalDetail", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderOrderHistoryTrack (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderOrderHistoryTrack", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderOrderCurrentTrack (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderOrderCurrentTrack", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderConfigQuerySettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderConfigQuerySettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotTraderConfigQueryFollowers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotTraderConfigQueryFollowers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotFollowerQueryTraders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotFollowerQueryTraders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotFollowerQueryTraderSymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotFollowerQueryTraderSymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotFollowerQuerySettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotFollowerQuerySettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotFollowerQueryHistoryOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotFollowerQueryHistoryOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyGetV2CopySpotFollowerQueryCurrentOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyGetV2CopySpotFollowerQueryCurrentOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixTraderOrderModifyTpsl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixTraderOrderModifyTpsl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixTraderOrderClosePositions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixTraderOrderClosePositions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixTraderConfigSettingSymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixTraderConfigSettingSymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixTraderConfigSettingBase (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixTraderConfigSettingBase", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixTraderConfigRemoveFollower (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixTraderConfigRemoveFollower", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixFollowerSettingTpsl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixFollowerSettingTpsl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixFollowerSettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixFollowerSettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixFollowerClosePositions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixFollowerClosePositions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopyMixFollowerCancelTrader (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopyMixFollowerCancelTrader", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotTraderOrderModifyTpsl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotTraderOrderModifyTpsl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotTraderOrderCloseTracking (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotTraderOrderCloseTracking", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotTraderConfigSettingSymbols (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotTraderConfigSettingSymbols", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotTraderConfigRemoveFollower (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotTraderConfigRemoveFollower", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotFollowerStopOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotFollowerStopOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotFollowerSettings (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotFollowerSettings", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotFollowerSettingTpsl (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotFollowerSettingTpsl", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotFollowerOrderCloseTracking (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotFollowerOrderCloseTracking", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCopyPostV2CopySpotFollowerCancelTrader (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCopyPostV2CopySpotFollowerCancelTrader", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateTaxGetV2TaxSpotRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateTaxGetV2TaxSpotRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateTaxGetV2TaxFutureRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateTaxGetV2TaxFutureRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateTaxGetV2TaxMarginRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateTaxGetV2TaxMarginRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateTaxGetV2TaxP2pRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateTaxGetV2TaxP2pRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertGetV2ConvertCurrencies (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertGetV2ConvertCurrencies", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertGetV2ConvertQuotedPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertGetV2ConvertQuotedPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertGetV2ConvertConvertRecord (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertGetV2ConvertConvertRecord", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertGetV2ConvertBgbConvertCoinList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertGetV2ConvertBgbConvertCoinList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertGetV2ConvertBgbConvertRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertGetV2ConvertBgbConvertRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertPostV2ConvertTrade (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertPostV2ConvertTrade", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateConvertPostV2ConvertBgbConvert (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateConvertPostV2ConvertBgbConvert", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsProduct (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsProduct", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsSubscribeInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsSubscribeInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsSubscribeResult (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsSubscribeResult", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSavingsRedeemResult (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSavingsRedeemResult", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSharkfinProduct (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSharkfinProduct", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSharkfinAccount (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSharkfinAccount", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSharkfinAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSharkfinAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSharkfinRecords (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSharkfinRecords", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSharkfinSubscribeInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSharkfinSubscribeInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnSharkfinSubscribeResult (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnSharkfinSubscribeResult", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnLoanOngoingOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnLoanOngoingOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnLoanRepayHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnLoanRepayHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnLoanReviseHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnLoanReviseHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnLoanBorrowHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnLoanBorrowHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnLoanDebts (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnLoanDebts", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnLoanReduces (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnLoanReduces", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnGetV2EarnAccountAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnGetV2EarnAccountAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnPostV2EarnSavingsSubscribe (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnPostV2EarnSavingsSubscribe", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnPostV2EarnSavingsRedeem (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnPostV2EarnSavingsRedeem", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnPostV2EarnSharkfinSubscribe (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnPostV2EarnSharkfinSubscribe", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnPostV2EarnLoanBorrow (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnPostV2EarnLoanBorrow", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnPostV2EarnLoanRepay (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnPostV2EarnLoanRepay", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateEarnPostV2EarnLoanRevisePledge (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateEarnPostV2EarnLoanRevisePledge", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitget) PrivateCommonGetV2CommonTradeRate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateCommonGetV2CommonTradeRate", parameters))
       PanicOnError(ch)
   }()
   return ch
}
