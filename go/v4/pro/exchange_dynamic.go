package ccxtpro
import ccxt "github.com/ccxt/ccxt/go/v4"
// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code



func DynamicallyCreateInstance(exchangeId string, exchangeArgs map[string]interface{}) (ccxt.ICoreExchange, bool) {
    switch exchangeId {
    case "alpaca":
        alpacaItf := NewAlpacaCore()
        alpacaItf.Init(exchangeArgs)
        return alpacaItf, true
    case "apex":
        apexItf := NewApexCore()
        apexItf.Init(exchangeArgs)
        return apexItf, true
    case "ascendex":
        ascendexItf := NewAscendexCore()
        ascendexItf.Init(exchangeArgs)
        return ascendexItf, true
    case "backpack":
        backpackItf := NewBackpackCore()
        backpackItf.Init(exchangeArgs)
        return backpackItf, true
    case "bequant":
        bequantItf := NewBequantCore()
        bequantItf.Init(exchangeArgs)
        return bequantItf, true
    case "binance":
        binanceItf := NewBinanceCore()
        binanceItf.Init(exchangeArgs)
        return binanceItf, true
    case "binancecoinm":
        binancecoinmItf := NewBinancecoinmCore()
        binancecoinmItf.Init(exchangeArgs)
        return binancecoinmItf, true
    case "binanceus":
        binanceusItf := NewBinanceusCore()
        binanceusItf.Init(exchangeArgs)
        return binanceusItf, true
    case "binanceusdm":
        binanceusdmItf := NewBinanceusdmCore()
        binanceusdmItf.Init(exchangeArgs)
        return binanceusdmItf, true
    case "bingx":
        bingxItf := NewBingxCore()
        bingxItf.Init(exchangeArgs)
        return bingxItf, true
    case "bitfinex":
        bitfinexItf := NewBitfinexCore()
        bitfinexItf.Init(exchangeArgs)
        return bitfinexItf, true
    case "bitget":
        bitgetItf := NewBitgetCore()
        bitgetItf.Init(exchangeArgs)
        return bitgetItf, true
    case "bithumb":
        bithumbItf := NewBithumbCore()
        bithumbItf.Init(exchangeArgs)
        return bithumbItf, true
    case "bitmart":
        bitmartItf := NewBitmartCore()
        bitmartItf.Init(exchangeArgs)
        return bitmartItf, true
    case "bitmex":
        bitmexItf := NewBitmexCore()
        bitmexItf.Init(exchangeArgs)
        return bitmexItf, true
    case "bitopro":
        bitoproItf := NewBitoproCore()
        bitoproItf.Init(exchangeArgs)
        return bitoproItf, true
    case "bitrue":
        bitrueItf := NewBitrueCore()
        bitrueItf.Init(exchangeArgs)
        return bitrueItf, true
    case "bitstamp":
        bitstampItf := NewBitstampCore()
        bitstampItf.Init(exchangeArgs)
        return bitstampItf, true
    case "bittrade":
        bittradeItf := NewBittradeCore()
        bittradeItf.Init(exchangeArgs)
        return bittradeItf, true
    case "bitvavo":
        bitvavoItf := NewBitvavoCore()
        bitvavoItf.Init(exchangeArgs)
        return bitvavoItf, true
    case "blockchaincom":
        blockchaincomItf := NewBlockchaincomCore()
        blockchaincomItf.Init(exchangeArgs)
        return blockchaincomItf, true
    case "blofin":
        blofinItf := NewBlofinCore()
        blofinItf.Init(exchangeArgs)
        return blofinItf, true
    case "bybit":
        bybitItf := NewBybitCore()
        bybitItf.Init(exchangeArgs)
        return bybitItf, true
    case "cex":
        cexItf := NewCexCore()
        cexItf.Init(exchangeArgs)
        return cexItf, true
    case "coinbase":
        coinbaseItf := NewCoinbaseCore()
        coinbaseItf.Init(exchangeArgs)
        return coinbaseItf, true
    case "coinbaseadvanced":
        coinbaseadvancedItf := NewCoinbaseadvancedCore()
        coinbaseadvancedItf.Init(exchangeArgs)
        return coinbaseadvancedItf, true
    case "coinbaseexchange":
        coinbaseexchangeItf := NewCoinbaseexchangeCore()
        coinbaseexchangeItf.Init(exchangeArgs)
        return coinbaseexchangeItf, true
    case "coinbaseinternational":
        coinbaseinternationalItf := NewCoinbaseinternationalCore()
        coinbaseinternationalItf.Init(exchangeArgs)
        return coinbaseinternationalItf, true
    case "coincatch":
        coincatchItf := NewCoincatchCore()
        coincatchItf.Init(exchangeArgs)
        return coincatchItf, true
    case "coincheck":
        coincheckItf := NewCoincheckCore()
        coincheckItf.Init(exchangeArgs)
        return coincheckItf, true
    case "coinex":
        coinexItf := NewCoinexCore()
        coinexItf.Init(exchangeArgs)
        return coinexItf, true
    case "coinone":
        coinoneItf := NewCoinoneCore()
        coinoneItf.Init(exchangeArgs)
        return coinoneItf, true
    case "cryptocom":
        cryptocomItf := NewCryptocomCore()
        cryptocomItf.Init(exchangeArgs)
        return cryptocomItf, true
    case "defx":
        defxItf := NewDefxCore()
        defxItf.Init(exchangeArgs)
        return defxItf, true
    case "deribit":
        deribitItf := NewDeribitCore()
        deribitItf.Init(exchangeArgs)
        return deribitItf, true
    case "derive":
        deriveItf := NewDeriveCore()
        deriveItf.Init(exchangeArgs)
        return deriveItf, true
    case "exmo":
        exmoItf := NewExmoCore()
        exmoItf.Init(exchangeArgs)
        return exmoItf, true
    case "gate":
        gateItf := NewGateCore()
        gateItf.Init(exchangeArgs)
        return gateItf, true
    case "gateio":
        gateioItf := NewGateioCore()
        gateioItf.Init(exchangeArgs)
        return gateioItf, true
    case "gemini":
        geminiItf := NewGeminiCore()
        geminiItf.Init(exchangeArgs)
        return geminiItf, true
    case "hashkey":
        hashkeyItf := NewHashkeyCore()
        hashkeyItf.Init(exchangeArgs)
        return hashkeyItf, true
    case "hitbtc":
        hitbtcItf := NewHitbtcCore()
        hitbtcItf.Init(exchangeArgs)
        return hitbtcItf, true
    case "hollaex":
        hollaexItf := NewHollaexCore()
        hollaexItf.Init(exchangeArgs)
        return hollaexItf, true
    case "htx":
        htxItf := NewHtxCore()
        htxItf.Init(exchangeArgs)
        return htxItf, true
    case "huobi":
        huobiItf := NewHuobiCore()
        huobiItf.Init(exchangeArgs)
        return huobiItf, true
    case "hyperliquid":
        hyperliquidItf := NewHyperliquidCore()
        hyperliquidItf.Init(exchangeArgs)
        return hyperliquidItf, true
    case "independentreserve":
        independentreserveItf := NewIndependentreserveCore()
        independentreserveItf.Init(exchangeArgs)
        return independentreserveItf, true
    case "kraken":
        krakenItf := NewKrakenCore()
        krakenItf.Init(exchangeArgs)
        return krakenItf, true
    case "krakenfutures":
        krakenfuturesItf := NewKrakenfuturesCore()
        krakenfuturesItf.Init(exchangeArgs)
        return krakenfuturesItf, true
    case "kucoin":
        kucoinItf := NewKucoinCore()
        kucoinItf.Init(exchangeArgs)
        return kucoinItf, true
    case "kucoinfutures":
        kucoinfuturesItf := NewKucoinfuturesCore()
        kucoinfuturesItf.Init(exchangeArgs)
        return kucoinfuturesItf, true
    case "lbank":
        lbankItf := NewLbankCore()
        lbankItf.Init(exchangeArgs)
        return lbankItf, true
    case "luno":
        lunoItf := NewLunoCore()
        lunoItf.Init(exchangeArgs)
        return lunoItf, true
    case "mexc":
        mexcItf := NewMexcCore()
        mexcItf.Init(exchangeArgs)
        return mexcItf, true
    case "modetrade":
        modetradeItf := NewModetradeCore()
        modetradeItf.Init(exchangeArgs)
        return modetradeItf, true
    case "myokx":
        myokxItf := NewMyokxCore()
        myokxItf.Init(exchangeArgs)
        return myokxItf, true
    case "ndax":
        ndaxItf := NewNdaxCore()
        ndaxItf.Init(exchangeArgs)
        return ndaxItf, true
    case "okx":
        okxItf := NewOkxCore()
        okxItf.Init(exchangeArgs)
        return okxItf, true
    case "okxus":
        okxusItf := NewOkxusCore()
        okxusItf.Init(exchangeArgs)
        return okxusItf, true
    case "onetrading":
        onetradingItf := NewOnetradingCore()
        onetradingItf.Init(exchangeArgs)
        return onetradingItf, true
    case "oxfun":
        oxfunItf := NewOxfunCore()
        oxfunItf.Init(exchangeArgs)
        return oxfunItf, true
    case "p2b":
        p2bItf := NewP2bCore()
        p2bItf.Init(exchangeArgs)
        return p2bItf, true
    case "paradex":
        paradexItf := NewParadexCore()
        paradexItf.Init(exchangeArgs)
        return paradexItf, true
    case "phemex":
        phemexItf := NewPhemexCore()
        phemexItf.Init(exchangeArgs)
        return phemexItf, true
    case "poloniex":
        poloniexItf := NewPoloniexCore()
        poloniexItf.Init(exchangeArgs)
        return poloniexItf, true
    case "probit":
        probitItf := NewProbitCore()
        probitItf.Init(exchangeArgs)
        return probitItf, true
    case "toobit":
        toobitItf := NewToobitCore()
        toobitItf.Init(exchangeArgs)
        return toobitItf, true
    case "upbit":
        upbitItf := NewUpbitCore()
        upbitItf.Init(exchangeArgs)
        return upbitItf, true
    case "whitebit":
        whitebitItf := NewWhitebitCore()
        whitebitItf.Init(exchangeArgs)
        return whitebitItf, true
    case "woo":
        wooItf := NewWooCore()
        wooItf.Init(exchangeArgs)
        return wooItf, true
    case "woofipro":
        woofiproItf := NewWoofiproCore()
        woofiproItf.Init(exchangeArgs)
        return woofiproItf, true
    case "xt":
        xtItf := NewXtCore()
        xtItf.Init(exchangeArgs)
        return xtItf, true
    default:
        return nil, false
    }
}
