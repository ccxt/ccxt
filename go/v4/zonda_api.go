// -------------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -------------------------------------------------------------------------------

package ccxt

func (this *zonda) PublicGetIdAll (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetIdAll", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PublicGetIdMarket (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetIdMarket", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PublicGetIdOrderbook (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetIdOrderbook", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PublicGetIdTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetIdTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PublicGetIdTrades (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetIdTrades", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostInfo (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostInfo", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostTrade (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostTrade", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostCancel (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostCancel", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostOrderbook (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostOrderbook", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostTransfer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostTransfer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostWithdraw (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostWithdraw", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) PrivatePostTransactions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostTransactions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingTickerSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingTickerSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingStats (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingStats", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingStatsSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingStatsSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingOrderbookSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingOrderbookSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingTransactionsSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingTransactionsSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PublicGetTradingCandleHistorySymbolResolution (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PublicGetTradingCandleHistorySymbolResolution", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetApiPaymentsDepositsCryptoAddresses (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetApiPaymentsDepositsCryptoAddresses", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetPaymentsWithdrawalDetailId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetPaymentsWithdrawalDetailId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetPaymentsDepositDetailId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetPaymentsDepositDetailId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetTradingOffer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetTradingOffer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetTradingStopOffer (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetTradingStopOffer", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetTradingConfigSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetTradingConfigSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetTradingHistoryTransactions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetTradingHistoryTransactions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetBalancesBITBAYHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetBalancesBITBAYHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetBalancesBITBAYBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetBalancesBITBAYBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetFiatCantorRateBaseIdQuoteId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetFiatCantorRateBaseIdQuoteId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetFiatCantorHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetFiatCantorHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetClientPaymentsV2CustomerCryptoCurrencyChannelsDeposit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetClientPaymentsV2CustomerCryptoCurrencyChannelsDeposit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetClientPaymentsV2CustomerCryptoCurrencyChannelsWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetClientPaymentsV2CustomerCryptoCurrencyChannelsWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetClientPaymentsV2CustomerCryptoDepositFee (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetClientPaymentsV2CustomerCryptoDepositFee", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateGetClientPaymentsV2CustomerCryptoWithdrawalFee (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateGetClientPaymentsV2CustomerCryptoWithdrawalFee", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostTradingOfferSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostTradingOfferSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostTradingStopOfferSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostTradingStopOfferSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostTradingConfigSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostTradingConfigSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostBalancesBITBAYBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostBalancesBITBAYBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostBalancesBITBAYBalanceTransferSourceDestination (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostBalancesBITBAYBalanceTransferSourceDestination", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostFiatCantorExchange (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostFiatCantorExchange", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostApiPaymentsWithdrawalsCrypto (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostApiPaymentsWithdrawalsCrypto", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostApiPaymentsWithdrawalsFiat (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostApiPaymentsWithdrawalsFiat", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostClientPaymentsV2CustomerCryptoDeposit (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostClientPaymentsV2CustomerCryptoDeposit", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePostClientPaymentsV2CustomerCryptoWithdrawal (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePostClientPaymentsV2CustomerCryptoWithdrawal", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateDeleteTradingOfferSymbolIdSidePrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateDeleteTradingOfferSymbolIdSidePrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivateDeleteTradingStopOfferSymbolIdSidePrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivateDeleteTradingStopOfferSymbolIdSidePrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *zonda) V1_01PrivatePutBalancesBITBAYBalanceId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("v1_01PrivatePutBalancesBITBAYBalanceId", parameters))
       PanicOnError(ch)
   }()
   return ch
}
