package ccxt

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

type BinanceusdmCore struct {
	BinanceCore
}

func NewBinanceusdmCore() *BinanceusdmCore {
	p := &BinanceusdmCore{}
	setDefaults(p)
	return p
}

func (this *BinanceusdmCore) Describe() interface{} {
	return this.DeepExtend(this.BinanceCore.Describe(), map[string]interface{}{
		"id":   "binanceusdm",
		"name": "Binance USDâ“ˆ-M",
		"urls": map[string]interface{}{
			"logo": "https://github.com/user-attachments/assets/871cbea7-eebb-4b28-b260-c1c91df0487a",
			"doc":  []interface{}{"https://binance-docs.github.io/apidocs/futures/en/", "https://binance-docs.github.io/apidocs/spot/en", "https://developers.binance.com/en"},
		},
		"has": map[string]interface{}{
			"CORS":                  nil,
			"spot":                  false,
			"margin":                false,
			"swap":                  true,
			"future":                true,
			"option":                nil,
			"createStopMarketOrder": true,
		},
		"options": map[string]interface{}{
			"fetchMarkets": map[string]interface{}{
				"types": []interface{}{"linear"},
			},
			"defaultSubType":   "linear",
			"leverageBrackets": nil,
			"marginTypes":      map[string]interface{}{},
			"marginModes":      map[string]interface{}{},
		},
		"exceptions": map[string]interface{}{
			"exact": map[string]interface{}{
				"-5021": InvalidOrder,
				"-5022": InvalidOrder,
				"-5028": InvalidOrder,
			},
		},
	})
}
func (this *BinanceusdmCore) TransferIn(code interface{}, amount interface{}, optionalArgs ...interface{}) <-chan interface{} {
	ch := make(chan interface{})
	go func() interface{} {
		defer close(ch)
		defer ReturnPanicError(ch)
		// transfer from spot wallet to usdm futures wallet
		params := GetArg(optionalArgs, 0, map[string]interface{}{})
		_ = params

		retRes5515 := (<-this.FuturesTransfer(code, amount, 1, params))
		PanicOnError(retRes5515)
		ch <- retRes5515
		return nil

	}()
	return ch
}
func (this *BinanceusdmCore) TransferOut(code interface{}, amount interface{}, optionalArgs ...interface{}) <-chan interface{} {
	ch := make(chan interface{})
	go func() interface{} {
		defer close(ch)
		defer ReturnPanicError(ch)
		// transfer from usdm futures wallet to spot wallet
		params := GetArg(optionalArgs, 0, map[string]interface{}{})
		_ = params

		retRes6015 := (<-this.FuturesTransfer(code, amount, 2, params))
		PanicOnError(retRes6015)
		ch <- retRes6015
		return nil

	}()
	return ch
}

func (this *BinanceusdmCore) Init(userConfig map[string]interface{}) {
	this.BinanceCore.Init(this.DeepExtend(this.Describe(), userConfig))
	this.Itf = this
	this.Exchange.DerivedExchange = this
}
