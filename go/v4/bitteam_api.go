// -------------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -------------------------------------------------------------------------------

package ccxt

func (this *bitteam) HistoryGetApiTwHistoryPairNameResolution (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("historyGetApiTwHistoryPairNameResolution", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiAsset (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiAsset", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCurrencies (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCurrencies", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiOrderbooksSymbol (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiOrderbooksSymbol", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiPairName (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiPairName", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiPairs (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiPairs", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiPairsPrecisions (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiPairsPrecisions", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiRates (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiRates", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiTradeId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiTradeId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiTrades (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiTrades", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCcxtPairs (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCcxtPairs", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCmcAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCmcAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCmcOrderbookPair (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCmcOrderbookPair", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCmcSummary (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCmcSummary", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCmcTicker (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCmcTicker", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PublicGetTradeApiCmcTradesPair (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetTradeApiCmcTradesPair", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivateGetTradeApiCcxtBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetTradeApiCcxtBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivateGetTradeApiCcxtOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetTradeApiCcxtOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivateGetTradeApiCcxtOrdersOfUser (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetTradeApiCcxtOrdersOfUser", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivateGetTradeApiCcxtTradesOfUser (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetTradeApiCcxtTradesOfUser", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivateGetTradeApiTransactionsOfUser (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetTradeApiTransactionsOfUser", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivatePostTradeApiCcxtCancelAllOrder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostTradeApiCcxtCancelAllOrder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivatePostTradeApiCcxtCancelorder (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostTradeApiCcxtCancelorder", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *bitteam) PrivatePostTradeApiCcxtOrdercreate (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostTradeApiCcxtOrdercreate", parameters))
       PanicOnError(ch)
   }()
   return ch
}
