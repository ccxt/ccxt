// -------------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

// -------------------------------------------------------------------------------

package ccxt

func (this *cryptomus) PublicGetV2UserApiExchangeMarkets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetV2UserApiExchangeMarkets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PublicGetV2UserApiExchangeMarketPrice (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetV2UserApiExchangeMarketPrice", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PublicGetV1ExchangeMarketAssets (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetV1ExchangeMarketAssets", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PublicGetV1ExchangeMarketOrderBookCurrencyPair (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetV1ExchangeMarketOrderBookCurrencyPair", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PublicGetV1ExchangeMarketTickers (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetV1ExchangeMarketTickers", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PublicGetV1ExchangeMarketTradesCurrencyPair (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("publicGetV1ExchangeMarketTradesCurrencyPair", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiExchangeOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiExchangeOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiExchangeOrdersHistory (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiExchangeOrdersHistory", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiExchangeAccountBalance (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiExchangeAccountBalance", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiExchangeAccountTariffs (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiExchangeAccountTariffs", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiPaymentServices (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiPaymentServices", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiPayoutServices (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiPayoutServices", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateGetV2UserApiTransactionList (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateGetV2UserApiTransactionList", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivatePostV2UserApiExchangeOrders (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostV2UserApiExchangeOrders", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivatePostV2UserApiExchangeOrdersMarket (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privatePostV2UserApiExchangeOrdersMarket", parameters))
       PanicOnError(ch)
   }()
   return ch
}

func (this *cryptomus) PrivateDeleteV2UserApiExchangeOrdersOrderId (args ...interface{}) <-chan interface{} {
   parameters := GetArg(args, 0, nil)
   ch := make(chan interface{})
   go func() {
       defer close(ch)
       defer func() {
           if r := recover(); r != nil {
               ch <- "panic:" + ToString(r)
           }
       }()
       ch <- (<-this.callEndpoint ("privateDeleteV2UserApiExchangeOrdersOrderId", parameters))
       PanicOnError(ch)
   }()
   return ch
}
