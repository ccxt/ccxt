package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchTickers(exchange ccxt.IExchange, skippedProperties interface{}, symbol interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        // const withoutSymbol = testFetchTickersHelper (exchange, skippedProperties, undefined);
                // const withSymbol = testFetchTickersHelper (exchange, skippedProperties, [ symbol ]);
            
                retRes84 := (<-promiseAll([]interface{}{TestFetchTickersHelper(exchange, skippedProperties, nil), TestFetchTickersHelper(exchange, skippedProperties, []interface{}{symbol})}))
                PanicOnError(retRes84)
            
                ch <- true
                return nil
            
                }()
                return ch
            }
    func TestFetchTickersHelper(exchange ccxt.IExchange, skippedProperties interface{}, argSymbols interface{}, optionalArgs ...interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        argParams := GetArg(optionalArgs, 0, map[string]interface{} {})
                _ = argParams
                var method interface{} = "fetchTickers"
            
                response:= (<-exchange.FetchTickers(argSymbols, argParams))
                PanicOnError(response)
                Assert(IsObject(response), Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), method), " "), exchange.Json(argSymbols)), " must return an object. "), exchange.Json(response)))
                var values interface{} = ObjectValues(response)
                var checkedSymbol interface{} = nil
                if IsTrue(IsTrue(!IsEqual(argSymbols, nil)) && IsTrue(IsEqual(GetArrayLength(argSymbols), 1))) {
                    checkedSymbol = GetValue(argSymbols, 0)
                }
                AssertNonEmtpyArray(exchange, skippedProperties, method, values, checkedSymbol)
                for i := 0; IsLessThan(i, GetArrayLength(values)); i++ {
                    // todo: symbol check here
                    var ticker interface{} = GetValue(values, i)
                    TestTicker(exchange, skippedProperties, method, ticker, checkedSymbol)
                }
            
                ch <- true
                return nil
            
                }()
                return ch
            }
