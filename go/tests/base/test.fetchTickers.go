package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchTickers(exchange ccxt.IExchange, skippedProperties interface{}, symbol interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var withoutSymbol interface{} = TestFetchTickersHelper(exchange, skippedProperties, nil)
                var withSymbol interface{} = TestFetchTickersHelper(exchange, skippedProperties, []interface{}{symbol})
            
                results:= (<-promiseAll([]interface{}{withoutSymbol, withSymbol}))
                PanicOnError(results)
                TestFetchTickersAmounts(exchange, skippedProperties, GetValue(results, 0))
            
                ch <- results
                return nil
            
                }()
                return ch
            }
    func TestFetchTickersHelper(exchange ccxt.IExchange, skippedProperties interface{}, argSymbols interface{}, optionalArgs ...interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        argParams := GetArg(optionalArgs, 0, map[string]interface{} {})
                _ = argParams
                var method interface{} = "fetchTickers"
            
                response:= (<-exchange.FetchTickers(argSymbols, argParams))
                PanicOnError(response)
                Assert(IsObject(response), Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), method), " "), exchange.Json(argSymbols)), " must return an object. "), exchange.Json(response)))
                var values interface{} = ObjectValues(response)
                var checkedSymbol interface{} = nil
                if IsTrue(IsTrue(!IsEqual(argSymbols, nil)) && IsTrue(IsEqual(GetArrayLength(argSymbols), 1))) {
                    checkedSymbol = GetValue(argSymbols, 0)
                }
                AssertNonEmtpyArray(exchange, skippedProperties, method, values, checkedSymbol)
                for i := 0; IsLessThan(i, GetArrayLength(values)); i++ {
                    // todo: symbol check here
                    var ticker interface{} = GetValue(values, i)
                    TestTicker(exchange, skippedProperties, method, ticker, checkedSymbol)
                }
            
                ch <- response
                return nil
            
                }()
                return ch
            }
    func TestFetchTickersAmounts(exchange ccxt.IExchange, skippedProperties interface{}, tickers interface{})  {
        var tickersValues interface{} = ObjectValues(tickers)
        if !IsTrue((InOp(skippedProperties, "checkActiveSymbols"))) {
            //
            // ensure all "active" symbols have tickers
            //
            var nonInactiveMarkets interface{} = GetActiveMarkets(exchange)
            var notInactiveSymbolsLength interface{} =         GetArrayLength(nonInactiveMarkets)
            var obtainedTickersLength interface{} =         GetArrayLength(tickersValues)
            var toleranceCoefficient interface{} = 0.01 // 1% tolerance, eg. when 100 active markets, we should have at least 99 tickers
            Assert(IsGreaterThanOrEqual(obtainedTickersLength, Multiply(notInactiveSymbolsLength, (Subtract(1, toleranceCoefficient)))), Add(Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), "fetchTickers"), " must return tickers for all active markets. but returned: "), ToString(obtainedTickersLength)), " tickers, "), ToString(notInactiveSymbolsLength)), " active markets"))
            //
            // ensure tickers length is less than markets length
            //
            var allMarkets interface{} = exchange.GetMarkets()
            var allMarketsLength interface{} =         GetArrayLength(ObjectKeys(allMarkets))
            Assert(IsLessThanOrEqual(obtainedTickersLength, allMarketsLength), Add(Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), "fetchTickers"), " must return <= than all markets, but returned: "), ToString(obtainedTickersLength)), " tickers, "), ToString(allMarketsLength)), " markets"))
        }
    }
