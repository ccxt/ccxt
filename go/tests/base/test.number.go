package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func TestNumber()  {
    exchange := ccxt.NewExchange()
    // ----------------------------------------------------------------------------
    // numberToString
    Assert(IsEqual(exchange.NumberToString(OpNeg(7.8e-7)), "-0.00000078"))
    Assert(IsEqual(exchange.NumberToString(7.8e-7), "0.00000078"))
    Assert(IsEqual(exchange.NumberToString(OpNeg(0.0000017805)), "-0.0000017805"))
    Assert(IsEqual(exchange.NumberToString(0.0000017805), "0.0000017805"))
    Assert(IsEqual(exchange.NumberToString(OpNeg(7.0005e+27)), "-7000500000000000000000000000"))
    Assert(IsEqual(exchange.NumberToString(7.0005e+27), "7000500000000000000000000000"))
    Assert(IsEqual(exchange.NumberToString(OpNeg(7.9e+27)), "-7900000000000000000000000000"))
    Assert(IsEqual(exchange.NumberToString(7e+27), "7000000000000000000000000000"))
    Assert(IsEqual(exchange.NumberToString(7.9e+27), "7900000000000000000000000000"))
    Assert(IsEqual(exchange.NumberToString(OpNeg(12.345)), "-12.345"))
    Assert(IsEqual(exchange.NumberToString(12.345), "12.345"))
    Assert(IsEqual(exchange.NumberToString(0), "0"))
    Assert(IsEqual(exchange.NumberToString(7.35946e+21), "7359460000000000000000"))
    Assert(IsEqual(exchange.NumberToString(1e-8), "0.00000001"))
    Assert(IsEqual(exchange.NumberToString(1e-7), "0.0000001"))
    Assert(IsEqual(exchange.NumberToString(OpNeg(1e-7)), "-0.0000001"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionTruncationToNDigitsAfterDot
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456000", TRUNCATE, 100, DECIMAL_PLACES), "12.3456"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, 100, DECIMAL_PLACES), "12.3456"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, 4, DECIMAL_PLACES), "12.3456"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, 3, DECIMAL_PLACES), "12.345"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, 2, DECIMAL_PLACES), "12.34"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, 1, DECIMAL_PLACES), "12.3"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, 0, DECIMAL_PLACES), "12"))
    // ['12.3456',    TRUNCATE,  -1, DECIMAL_PLACES,  '10'],   // not yet supported
    // ['123.456',    TRUNCATE,  -2, DECIMAL_PLACES,  '120'],  // not yet supported
    // ['123.456',    TRUNCATE,  -3, DECIMAL_PLACES,  '100'],  // not yet supported
    Assert(IsEqual(exchange.DecimalToPrecision("0.0000001", TRUNCATE, 8, DECIMAL_PLACES), "0.0000001"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00000001", TRUNCATE, 8, DECIMAL_PLACES), "0.00000001"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000000000", TRUNCATE, 9, DECIMAL_PLACES, PAD_WITH_ZERO), "0.000000000"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000000001", TRUNCATE, 9, DECIMAL_PLACES, PAD_WITH_ZERO), "0.000000001"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", TRUNCATE, OpNeg(1), DECIMAL_PLACES), "10"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.456", TRUNCATE, OpNeg(1), DECIMAL_PLACES), "120"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.456", TRUNCATE, OpNeg(2), DECIMAL_PLACES), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("9.99999", TRUNCATE, OpNeg(1), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("99.9999", TRUNCATE, OpNeg(1), DECIMAL_PLACES), "90"))
    Assert(IsEqual(exchange.DecimalToPrecision("99.9999", TRUNCATE, OpNeg(2), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("0", TRUNCATE, 0, DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.9", TRUNCATE, 0, DECIMAL_PLACES), "0"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionTruncationToNSignificantDigits
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456700", TRUNCATE, 100, SIGNIFICANT_DIGITS), "0.0001234567"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001234567", TRUNCATE, 100, SIGNIFICANT_DIGITS), "0.0001234567"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001234567", TRUNCATE, 7, SIGNIFICANT_DIGITS), "0.0001234567"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", TRUNCATE, 6, SIGNIFICANT_DIGITS), "0.000123456"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", TRUNCATE, 5, SIGNIFICANT_DIGITS), "0.00012345"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", TRUNCATE, 2, SIGNIFICANT_DIGITS), "0.00012"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", TRUNCATE, 1, SIGNIFICANT_DIGITS), "0.0001"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 10, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.0000987"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 8, SIGNIFICANT_DIGITS), "123.00009"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 7, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.0000"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 6, SIGNIFICANT_DIGITS), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 5, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.00"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 4, SIGNIFICANT_DIGITS), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 4, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123.0"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 3, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 2, SIGNIFICANT_DIGITS), "120"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 1, SIGNIFICANT_DIGITS), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", TRUNCATE, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("1234", TRUNCATE, 5, SIGNIFICANT_DIGITS), "1234"))
    Assert(IsEqual(exchange.DecimalToPrecision("1234", TRUNCATE, 5, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "1234.0"))
    Assert(IsEqual(exchange.DecimalToPrecision("1234", TRUNCATE, 4, SIGNIFICANT_DIGITS), "1234"))
    Assert(IsEqual(exchange.DecimalToPrecision("1234", TRUNCATE, 4, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "1234"))
    Assert(IsEqual(exchange.DecimalToPrecision("1234.69", TRUNCATE, 0, SIGNIFICANT_DIGITS), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("1234.69", TRUNCATE, 0, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionRoundingToNDigitsAfterDot
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456000", ROUND, 100, DECIMAL_PLACES), "12.3456"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, 100, DECIMAL_PLACES), "12.3456"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, 4, DECIMAL_PLACES), "12.3456"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, 3, DECIMAL_PLACES), "12.346"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, 2, DECIMAL_PLACES), "12.35"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, 1, DECIMAL_PLACES), "12.3"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, 0, DECIMAL_PLACES), "12"))
    // todo:
    // ['9.999',     ROUND,   3, DECIMAL_PLACES,    NO_PADDING,  '9.999'],
    // ['9.999',     ROUND,   2, DECIMAL_PLACES,    NO_PADDING,  '10'],
    // ['9.999',     ROUND,   2, DECIMAL_PLACES, PAD_WITH_ZERO,  '10.00'],
    // ['99.999',    ROUND,   2, DECIMAL_PLACES, PAD_WITH_ZERO,  '100.00'],
    // ['-99.999',    ROUND,   2, DECIMAL_PLACES, PAD_WITH_ZERO, '-100.00'],
    // ['12.3456',    ROUND,  -1, DECIMAL_PLACES,    NO_PADDING,  '10'],  // not yet supported
    // ['123.456',    ROUND,  -1, DECIMAL_PLACES,    NO_PADDING,  '120'],  // not yet supported
    // ['123.456',    ROUND,  -2, DECIMAL_PLACES,    NO_PADDING,  '100'],  // not yet supported
    // a problematic case in PHP
    Assert(IsEqual(exchange.DecimalToPrecision("10000", ROUND, 6, DECIMAL_PLACES), "10000"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00003186", ROUND, 8, DECIMAL_PLACES), "0.00003186"))
    Assert(IsEqual(exchange.DecimalToPrecision("12.3456", ROUND, OpNeg(1), DECIMAL_PLACES), "10"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.456", ROUND, OpNeg(1), DECIMAL_PLACES), "120"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.456", ROUND, OpNeg(2), DECIMAL_PLACES), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("9.99999", ROUND, OpNeg(1), DECIMAL_PLACES), "10"))
    Assert(IsEqual(exchange.DecimalToPrecision("99.9999", ROUND, OpNeg(1), DECIMAL_PLACES), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("99.9999", ROUND, OpNeg(2), DECIMAL_PLACES), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("9.999", ROUND, 3, DECIMAL_PLACES), "9.999"))
    Assert(IsEqual(exchange.DecimalToPrecision("9.999", ROUND, 2, DECIMAL_PLACES), "10"))
    Assert(IsEqual(exchange.DecimalToPrecision("9.999", ROUND, 2, DECIMAL_PLACES, PAD_WITH_ZERO), "10.00"))
    Assert(IsEqual(exchange.DecimalToPrecision("99.999", ROUND, 2, DECIMAL_PLACES, PAD_WITH_ZERO), "100.00"))
    Assert(IsEqual(exchange.DecimalToPrecision("-99.999", ROUND, 2, DECIMAL_PLACES, PAD_WITH_ZERO), "-100.00"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionRoundingToNSignificantDigits
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456700", ROUND, 100, SIGNIFICANT_DIGITS), "0.0001234567"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001234567", ROUND, 100, SIGNIFICANT_DIGITS), "0.0001234567"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001234567", ROUND, 7, SIGNIFICANT_DIGITS), "0.0001234567"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", ROUND, 6, SIGNIFICANT_DIGITS), "0.000123456"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", ROUND, 5, SIGNIFICANT_DIGITS), "0.00012346"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456", ROUND, 4, SIGNIFICANT_DIGITS), "0.0001235"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00012", ROUND, 2, SIGNIFICANT_DIGITS), "0.00012"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001", ROUND, 1, SIGNIFICANT_DIGITS), "0.0001"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", ROUND, 7, SIGNIFICANT_DIGITS), "123.0001"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.0000987654", ROUND, 6, SIGNIFICANT_DIGITS), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00098765", ROUND, 2, SIGNIFICANT_DIGITS), "0.00099"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00098765", ROUND, 2, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0.00099"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00098765", ROUND, 1, SIGNIFICANT_DIGITS), "0.001"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00098765", ROUND, 10, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0.0009876500000"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.098765", ROUND, 1, SIGNIFICANT_DIGITS, PAD_WITH_ZERO), "0.1"))
    Assert(IsEqual(exchange.DecimalToPrecision("0", ROUND, 0, SIGNIFICANT_DIGITS), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.123", ROUND, 0, SIGNIFICANT_DIGITS), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00000044", ROUND, 5, SIGNIFICANT_DIGITS), "0.00000044"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionRoundingToTickSize
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456700", ROUND, 0.00012, TICK_SIZE), "0.00012"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001234567", ROUND, 0.00013, TICK_SIZE), "0.00013"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0001234567", TRUNCATE, 0.00013, TICK_SIZE), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("101.000123456700", ROUND, 100, TICK_SIZE), "100"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456700", ROUND, 100, TICK_SIZE), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("165", TRUNCATE, 110, TICK_SIZE), "110"))
    Assert(IsEqual(exchange.DecimalToPrecision("3210", TRUNCATE, 1110, TICK_SIZE), "2220"))
    Assert(IsEqual(exchange.DecimalToPrecision("165", ROUND, 110, TICK_SIZE), "220"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456789", ROUND, 1.2e-7, TICK_SIZE), "0.00012348"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000123456789", TRUNCATE, 1.2e-7, TICK_SIZE), "0.00012336"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.000273398", ROUND, 1e-7, TICK_SIZE), "0.0002734"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.00005714", TRUNCATE, 1e-8, TICK_SIZE), "0.00005714"))
    // this line causes problems in JS, fix with Precise
    // assert (exchange.decimalToPrecision ('0.0000571495257361', TRUNCATE, 0.00000001, TICK_SIZE) === '0.00005714');
    Assert(IsEqual(exchange.DecimalToPrecision("0.01", ROUND, 0.0001, TICK_SIZE, PAD_WITH_ZERO), "0.0100"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.01", TRUNCATE, 0.0001, TICK_SIZE, PAD_WITH_ZERO), "0.0100"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.000123456789", ROUND, 1.2e-7, TICK_SIZE), "-0.00012348"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.000123456789", TRUNCATE, 1.2e-7, TICK_SIZE), "-0.00012336"))
    Assert(IsEqual(exchange.DecimalToPrecision("-165", TRUNCATE, 110, TICK_SIZE), "-110"))
    Assert(IsEqual(exchange.DecimalToPrecision("-165", ROUND, 110, TICK_SIZE), "-220"))
    Assert(IsEqual(exchange.DecimalToPrecision("-1650", TRUNCATE, 1100, TICK_SIZE), "-1100"))
    Assert(IsEqual(exchange.DecimalToPrecision("-1650", ROUND, 1100, TICK_SIZE), "-2200"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0006", TRUNCATE, 0.0001, TICK_SIZE), "0.0006"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.0006", TRUNCATE, 0.0001, TICK_SIZE), "-0.0006"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.6", TRUNCATE, 0.2, TICK_SIZE), "0.6"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.6", TRUNCATE, 0.2, TICK_SIZE), "-0.6"))
    Assert(IsEqual(exchange.DecimalToPrecision("1.2", ROUND, 0.4, TICK_SIZE), "1.2"))
    Assert(IsEqual(exchange.DecimalToPrecision("-1.2", ROUND, 0.4, TICK_SIZE), "-1.2"))
    Assert(IsEqual(exchange.DecimalToPrecision("1.2", ROUND, 0.02, TICK_SIZE), "1.2"))
    Assert(IsEqual(exchange.DecimalToPrecision("-1.2", ROUND, 0.02, TICK_SIZE), "-1.2"))
    Assert(IsEqual(exchange.DecimalToPrecision("44", ROUND, 4.4, TICK_SIZE), "44"))
    Assert(IsEqual(exchange.DecimalToPrecision("-44", ROUND, 4.4, TICK_SIZE), "-44"))
    Assert(IsEqual(exchange.DecimalToPrecision("44.00000001", ROUND, 4.4, TICK_SIZE), "44"))
    Assert(IsEqual(exchange.DecimalToPrecision("-44.00000001", ROUND, 4.4, TICK_SIZE), "-44"))
    // https://github.com/ccxt/ccxt/issues/6731
    Assert(IsEqual(exchange.DecimalToPrecision("20", TRUNCATE, 1e-8, TICK_SIZE), "20"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionNegativeNumbers
    Assert(IsEqual(exchange.DecimalToPrecision("-0.123456", TRUNCATE, 5, DECIMAL_PLACES), "-0.12345"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.123456", ROUND, 5, DECIMAL_PLACES), "-0.12346"))
    // ----------------------------------------------------------------------------
    // decimalToPrecision: without dot / trailing dot
    Assert(IsEqual(exchange.DecimalToPrecision("123", TRUNCATE, 0), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("123", TRUNCATE, 5, DECIMAL_PLACES), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("123", TRUNCATE, 5, DECIMAL_PLACES, PAD_WITH_ZERO), "123.00000"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.", TRUNCATE, 0, DECIMAL_PLACES), "123"))
    Assert(IsEqual(exchange.DecimalToPrecision("123.", TRUNCATE, 5, DECIMAL_PLACES, PAD_WITH_ZERO), "123.00000"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.", TRUNCATE, 0), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.", TRUNCATE, 5, DECIMAL_PLACES, PAD_WITH_ZERO), "0.00000"))
    // ----------------------------------------------------------------------------
    // decimalToPrecision: rounding for equidistant digits
    Assert(IsEqual(exchange.DecimalToPrecision("1.44", ROUND, 1, DECIMAL_PLACES), "1.4"))
    Assert(IsEqual(exchange.DecimalToPrecision("1.45", ROUND, 1, DECIMAL_PLACES), "1.5"))
    Assert(IsEqual(exchange.DecimalToPrecision("1.45", ROUND, 0, DECIMAL_PLACES), "1")) // not 2
    // ----------------------------------------------------------------------------
    // negative precision only implemented so far in python
    // pretty useless for decimal applications as anything |x| < 5 === 0
    // NO_PADDING and PAD_WITH_ZERO are ignored
    Assert(IsEqual(exchange.DecimalToPrecision("5", ROUND, OpNeg(1), DECIMAL_PLACES), "10"))
    Assert(IsEqual(exchange.DecimalToPrecision("4.999", ROUND, OpNeg(1), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("0.0431531423", ROUND, OpNeg(1), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("-69.3", ROUND, OpNeg(1), DECIMAL_PLACES), "-70"))
    Assert(IsEqual(exchange.DecimalToPrecision("5001", ROUND, OpNeg(4), DECIMAL_PLACES), "10000"))
    Assert(IsEqual(exchange.DecimalToPrecision("4999.999", ROUND, OpNeg(4), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("69.3", TRUNCATE, OpNeg(2), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("-69.3", TRUNCATE, OpNeg(2), DECIMAL_PLACES), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("69.3", TRUNCATE, OpNeg(1), SIGNIFICANT_DIGITS), "60"))
    Assert(IsEqual(exchange.DecimalToPrecision("-69.3", TRUNCATE, OpNeg(1), SIGNIFICANT_DIGITS), "-60"))
    Assert(IsEqual(exchange.DecimalToPrecision("69.3", TRUNCATE, OpNeg(2), SIGNIFICANT_DIGITS), "0"))
    Assert(IsEqual(exchange.DecimalToPrecision("1602000000000000000000", TRUNCATE, 3, SIGNIFICANT_DIGITS), "1600000000000000000000"))
    // ----------------------------------------------------------------------------
    // decimal_to_precision: stringified precision
    Assert(IsEqual(exchange.DecimalToPrecision("-0.000123456789", ROUND, "0.00000012", TICK_SIZE), "-0.00012348"))
    Assert(IsEqual(exchange.DecimalToPrecision("-0.000123456789", TRUNCATE, "0.00000012", TICK_SIZE), "-0.00012336"))
    Assert(IsEqual(exchange.DecimalToPrecision("-165", TRUNCATE, "110", TICK_SIZE), "-110"))
    Assert(IsEqual(exchange.DecimalToPrecision("-165", ROUND, "110", TICK_SIZE), "-220"))
    // ----------------------------------------------------------------------------
    // testDecimalToPrecisionErrorHandling (todo)
    //
    // throws (() =>
    //     decimalToPrecision ('123456.789', TRUNCATE, -2, DECIMAL_PLACES),
    //         'negative precision is not yet supported')
    //
    // throws (() =>
    //     decimalToPrecision ('foo'),
    //         "invalid number (contains an illegal character 'f')")
    //
    // throws (() =>
    //     decimalToPrecision ('0.01', TRUNCATE, -1, TICK_SIZE),
    //         "TICK_SIZE cant be used with negative numPrecisionDigits")
    // ----------------------------------------------------------------------------
    var w interface{} = "-1.123e-6"
    var x interface{} = "0.00000002"
    var y interface{} = "69696900000"
    var z interface{} = "0"
    var a interface{} = "1e8"
    Assert(IsEqual(ccxt.Precise.StringMul(x, y), "1393.938"))
    Assert(IsEqual(ccxt.Precise.StringMul(y, x), "1393.938"))
    Assert(IsEqual(ccxt.Precise.StringAdd(x, y), "69696900000.00000002"))
    Assert(IsEqual(ccxt.Precise.StringAdd(y, x), "69696900000.00000002"))
    Assert(IsEqual(ccxt.Precise.StringSub(x, y), "-69696899999.99999998"))
    Assert(IsEqual(ccxt.Precise.StringSub(y, x), "69696899999.99999998"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, y, 1), "0"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, y), "0"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, y, 19), "0.0000000000000000002"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, y, 20), "0.00000000000000000028"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, y, 21), "0.000000000000000000286"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, y, 22), "0.0000000000000000002869"))
    Assert(IsEqual(ccxt.Precise.StringDiv(y, x), "3484845000000000000"))
    Assert(IsEqual(ccxt.Precise.StringMul(x, w), "-0.00000000000002246"))
    Assert(IsEqual(ccxt.Precise.StringMul(w, x), "-0.00000000000002246"))
    Assert(IsEqual(ccxt.Precise.StringAdd(x, w), "-0.000001103"))
    Assert(IsEqual(ccxt.Precise.StringAdd(w, x), "-0.000001103"))
    Assert(IsEqual(ccxt.Precise.StringSub(x, w), "0.000001143"))
    Assert(IsEqual(ccxt.Precise.StringSub(w, x), "-0.000001143"))
    Assert(IsEqual(ccxt.Precise.StringDiv(x, w), "-0.017809439002671415"))
    Assert(IsEqual(ccxt.Precise.StringDiv(w, x), "-56.15"))
    Assert(IsEqual(ccxt.Precise.StringMul(z, w), "0"))
    Assert(IsEqual(ccxt.Precise.StringMul(z, x), "0"))
    Assert(IsEqual(ccxt.Precise.StringMul(z, y), "0"))
    Assert(IsEqual(ccxt.Precise.StringMul(w, z), "0"))
    Assert(IsEqual(ccxt.Precise.StringMul(x, z), "0"))
    Assert(IsEqual(ccxt.Precise.StringMul(y, z), "0"))
    Assert(IsEqual(ccxt.Precise.StringAdd(z, w), "-0.000001123"))
    Assert(IsEqual(ccxt.Precise.StringAdd(z, x), "0.00000002"))
    Assert(IsEqual(ccxt.Precise.StringAdd(z, y), "69696900000"))
    Assert(IsEqual(ccxt.Precise.StringAdd(w, z), "-0.000001123"))
    Assert(IsEqual(ccxt.Precise.StringAdd(x, z), "0.00000002"))
    Assert(IsEqual(ccxt.Precise.StringAdd(y, z), "69696900000"))
    Assert(IsEqual(ccxt.Precise.StringMul(x, a), "2"))
    Assert(IsEqual(ccxt.Precise.StringMul(a, x), "2"))
    Assert(IsEqual(ccxt.Precise.StringMul(y, a), "6969690000000000000"))
    Assert(IsEqual(ccxt.Precise.StringMul(a, y), "6969690000000000000"))
    Assert(IsEqual(ccxt.Precise.StringDiv(y, a), "696.969"))
    Assert(IsEqual(ccxt.Precise.StringDiv(y, a, OpNeg(1)), "690"))
    Assert(IsEqual(ccxt.Precise.StringDiv(y, a, 0), "696"))
    Assert(IsEqual(ccxt.Precise.StringDiv(y, a, 1), "696.9"))
    Assert(IsEqual(ccxt.Precise.StringDiv(y, a, 2), "696.96"))
    Assert(IsEqual(ccxt.Precise.StringDiv(a, y), "0.001434784043479695"))
    Assert(IsEqual(ccxt.Precise.StringAbs("0"), "0"))
    Assert(IsEqual(ccxt.Precise.StringAbs("-0"), "0"))
    Assert(IsEqual(ccxt.Precise.StringAbs("-500.1"), "500.1"))
    Assert(IsEqual(ccxt.Precise.StringAbs("213"), "213"))
    Assert(IsEqual(ccxt.Precise.StringNeg("0"), "0"))
    Assert(IsEqual(ccxt.Precise.StringNeg("-0"), "0"))
    Assert(IsEqual(ccxt.Precise.StringNeg("-500.1"), "500.1"))
    Assert(IsEqual(ccxt.Precise.StringNeg("213"), "-213"))
    Assert(IsEqual(ccxt.Precise.StringMod("57.123", "10"), "7.123"))
    Assert(IsEqual(ccxt.Precise.StringMod("18", "6"), "0"))
    Assert(IsEqual(ccxt.Precise.StringMod("10.1", "0.5"), "0.1"))
    Assert(IsEqual(ccxt.Precise.StringMod("10000000", "5555"), "1000"))
    Assert(IsEqual(ccxt.Precise.StringMod("5550", "120"), "30"))
    Assert(ccxt.Precise.StringEquals("1.0000", "1"))
    Assert(ccxt.Precise.StringEquals("-0.0", "0"))
    Assert(ccxt.Precise.StringEquals("-0.0", "0.0"))
    Assert(ccxt.Precise.StringEquals("5.534000", "5.5340"))
    Assert(IsEqual(ccxt.Precise.StringMin("1.0000", "2"), "1"))
    Assert(IsEqual(ccxt.Precise.StringMin("2", "1.2345"), "1.2345"))
    Assert(IsEqual(ccxt.Precise.StringMin("3.1415", "-2"), "-2"))
    Assert(IsEqual(ccxt.Precise.StringMin("-3.1415", "-2"), "-3.1415"))
    Assert(IsEqual(ccxt.Precise.StringMin("0.000", "-0.0"), "0"))
    Assert(IsEqual(ccxt.Precise.StringMax("1.0000", "2"), "2"))
    Assert(IsEqual(ccxt.Precise.StringMax("2", "1.2345"), "2"))
    Assert(IsEqual(ccxt.Precise.StringMax("3.1415", "-2"), "3.1415"))
    Assert(IsEqual(ccxt.Precise.StringMax("-3.1415", "-2"), "-2"))
    Assert(IsEqual(ccxt.Precise.StringMax("0.000", "-0.0"), "0"))
    Assert(!IsTrue(ccxt.Precise.StringGt("1.0000", "2")))
    Assert(ccxt.Precise.StringGt("2", "1.2345"))
    Assert(ccxt.Precise.StringGt("3.1415", "-2"))
    Assert(!IsTrue(ccxt.Precise.StringGt("-3.1415", "-2")))
    Assert(!IsTrue(ccxt.Precise.StringGt("3.1415", "3.1415")))
    Assert(ccxt.Precise.StringGt("3.14150000000000000000001", "3.1415"))
    Assert(!IsTrue(ccxt.Precise.StringGe("1.0000", "2")))
    Assert(ccxt.Precise.StringGe("2", "1.2345"))
    Assert(ccxt.Precise.StringGe("3.1415", "-2"))
    Assert(!IsTrue(ccxt.Precise.StringGe("-3.1415", "-2")))
    Assert(ccxt.Precise.StringGe("3.1415", "3.1415"))
    Assert(ccxt.Precise.StringGe("3.14150000000000000000001", "3.1415"))
    Assert(ccxt.Precise.StringLt("1.0000", "2"))
    Assert(!IsTrue(ccxt.Precise.StringLt("2", "1.2345")))
    Assert(!IsTrue(ccxt.Precise.StringLt("3.1415", "-2")))
    Assert(ccxt.Precise.StringLt("-3.1415", "-2"))
    Assert(!IsTrue(ccxt.Precise.StringLt("3.1415", "3.1415")))
    Assert(ccxt.Precise.StringLt("3.1415", "3.14150000000000000000001"))
    Assert(ccxt.Precise.StringLe("1.0000", "2"))
    Assert(!IsTrue(ccxt.Precise.StringLe("2", "1.2345")))
    Assert(!IsTrue(ccxt.Precise.StringLe("3.1415", "-2")))
    Assert(ccxt.Precise.StringLe("-3.1415", "-2"))
    Assert(ccxt.Precise.StringLe("3.1415", "3.1415"))
    Assert(ccxt.Precise.StringLe("3.1415", "3.14150000000000000000001"))
}