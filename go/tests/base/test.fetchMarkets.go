package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchMarkets(exchange ccxt.IExchange, skippedProperties interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "fetchMarkets"
            
                markets:= (<-exchange.FetchMarkets())
                PanicOnError(markets)
                Assert(IsObject(markets), Add(Add(Add(Add(exchange.GetId(), " "), method), " must return an object. "), exchange.Json(markets)))
                var marketValues interface{} = ObjectValues(markets)
                AssertNonEmtpyArray(exchange, skippedProperties, method, marketValues)
                for i := 0; IsLessThan(i, GetArrayLength(marketValues)); i++ {
                    TestMarket(exchange, skippedProperties, method, GetValue(marketValues, i))
                }
                DetectMarketConflicts(exchange, markets)
            
                ch <- true
                return nil
            
                }()
                return ch
            }
    func DetectMarketConflicts(exchange ccxt.IExchange, marketValues interface{}) interface{}  {
        // detect if there are markets with different ids for the same symbol
        var ids interface{} = map[string]interface{} {}
        for i := 0; IsLessThan(i, GetArrayLength(marketValues)); i++ {
            var market interface{} = GetValue(marketValues, i)
            var symbol interface{} = GetValue(market, "symbol")
            if !IsTrue((InOp(ids, symbol))) {
                AddElementToObject(ids, symbol, GetValue(market, "id"))
            } else {
                var isDifferent interface{} = !IsEqual(GetValue(ids, symbol), GetValue(market, "id"))
                Assert(!IsTrue(isDifferent), Add(Add(Add(Add(Add(Add(exchange.GetId(), " fetchMarkets() has different ids for the same symbol: "), symbol), " "), GetValue(ids, symbol)), " "), GetValue(market, "id")))
            }
        }
        return true
    }
