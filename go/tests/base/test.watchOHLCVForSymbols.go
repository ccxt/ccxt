package base

import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func TestWatchOHLCVForSymbols(exchange ccxt.ICoreExchange, skippedProperties interface{}, symbol interface{}) <-chan interface{} {
	ch := make(chan interface{})
	go func() interface{} {
		defer close(ch)
		defer ReturnPanicError(ch)
		var method interface{} = "watchOHLCVForSymbols"
		var now interface{} = exchange.Milliseconds()
		var ends interface{} = Add(now, 15000)
		var timeframeKeys interface{} = ObjectKeys(exchange.GetTimeframes())
		Assert(GetArrayLength(timeframeKeys), Add(Add(Add(exchange.GetId(), " "), method), " - no timeframes found"))
		// prefer 1m timeframe if available, otherwise return the first one
		var chosenTimeframeKey interface{} = "1m"
		if !IsTrue(exchange.InArray(chosenTimeframeKey, timeframeKeys)) {
			chosenTimeframeKey = GetValue(timeframeKeys, 0)
		}
		var limit interface{} = 10
		var duration interface{} = exchange.ParseTimeframe(chosenTimeframeKey)
		var since interface{} = Subtract(Subtract(exchange.Milliseconds(), Multiply(Multiply(duration, limit), 1000)), 1000)
		for IsLessThan(now, ends) {
			var response interface{} = nil
			var success interface{} = true

			{
				func() (ret_ interface{}) {
					defer func() {
						if e := recover(); e != nil {
							if e == "break" {
								return
							}
							ret_ = func() interface{} {
								// catch block:
								if !IsTrue(IsTemporaryFailure(e)) {
									panic(e)
								}
								now = exchange.Milliseconds()
								// continue;
								success = false
								return nil
							}()
						}
					}()
					// try block:

					response = (UnWrapType(<-exchange.WatchOHLCVForSymbols([]interface{}{[]interface{}{symbol, chosenTimeframeKey}}, since, limit)))
					PanicOnError(response)
					return nil
				}()

			}
			if IsTrue(IsEqual(success, true)) {
				var AssertionMessage interface{} = Add(Add(Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), method), " "), symbol), " "), chosenTimeframeKey), " | "), exchange.Json(response))
				Assert(IsObject(response), Add("Response must be a dictionary. ", AssertionMessage))
				Assert(InOp(response, symbol), Add("Response should contain the symbol as key. ", AssertionMessage))
				var symbolObj interface{} = GetValue(response, symbol)
				Assert(IsObject(symbolObj), Add("Response.Symbol should be a dictionary. ", AssertionMessage))
				Assert(InOp(symbolObj, chosenTimeframeKey), Add("Response.symbol should contain the timeframe key. ", AssertionMessage))
				var ohlcvs interface{} = GetValue(symbolObj, chosenTimeframeKey)
				Assert(IsArray(ohlcvs), Add("Response.symbol.timeframe should be an array. ", AssertionMessage))
				now = exchange.Milliseconds()
				for i := 0; IsLessThan(i, GetArrayLength(ohlcvs)); i++ {
					TestOHLCV(exchange, skippedProperties, method, GetValue(ohlcvs, i), symbol, now)
				}
			}
		}

		ch <- true
		return nil

	}()
	return ch
}
