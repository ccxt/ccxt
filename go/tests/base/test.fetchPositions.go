package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchPositions(exchange ccxt.IExchange, skippedProperties interface{}, symbol interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "fetchPositions"
                var now interface{} = exchange.Milliseconds()
                // without symbol
            
                positions:= (<-exchange.FetchPositions())
                PanicOnError(positions)
                AssertNonEmtpyArray(exchange, skippedProperties, method, positions, symbol)
                for i := 0; IsLessThan(i, GetArrayLength(positions)); i++ {
                    TestPosition(exchange, skippedProperties, method, GetValue(positions, i), nil, now)
                }
                // AssertTimestampOrder (exchange, method, undefined, positions); // currently order of positions does not make sense
                // with symbol
            
                positionsForSymbol:= (<-exchange.FetchPositions([]interface{}{symbol}))
                PanicOnError(positionsForSymbol)
                Assert(IsArray(positionsForSymbol), Add(Add(Add(Add(exchange.GetId(), " "), method), " must return an array, returned "), exchange.Json(positionsForSymbol)))
                var positionsForSymbolLength interface{} =     GetArrayLength(positionsForSymbol)
                Assert(IsLessThanOrEqual(positionsForSymbolLength, 4), Add(Add(Add(Add(exchange.GetId(), " "), method), " positions length for particular symbol should be less than 4, returned "), exchange.Json(positionsForSymbol)))
                for i := 0; IsLessThan(i, GetArrayLength(positionsForSymbol)); i++ {
                    TestPosition(exchange, skippedProperties, method, GetValue(positionsForSymbol, i), symbol, now)
                }
            
                    // AssertTimestampOrder (exchange, method, symbol, positionsForSymbol);
            ch <- true
                return nil
            
                }()
                return ch
            }
