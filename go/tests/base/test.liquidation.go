package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestLiquidation(exchange ccxt.IExchange, skippedProperties interface{}, method interface{}, entry interface{}, symbol interface{})  {
        var format interface{} = map[string]interface{} {
            "info": map[string]interface{} {},
            "symbol": "ETH/BTC",
            "contracts": exchange.ParseNumber("1.234"),
            "contractSize": exchange.ParseNumber("1.234"),
            "price": exchange.ParseNumber("1.234"),
            "baseValue": exchange.ParseNumber("1.234"),
            "quoteValue": exchange.ParseNumber("1.234"),
            "timestamp": 1502962946216,
            "datetime": "2017-09-01T00:00:00",
        }
        // todo: atm, many exchanges fail, so temporarily decrease stict mode
        var emptyAllowedFor interface{} = []interface{}{"timestamp", "datetime", "quoteValue", "baseValue", "previousClose", "price", "contractSize", "contracts"}
        AssertStructure(exchange, skippedProperties, method, entry, format, emptyAllowedFor)
        AssertTimestampAndDatetime(exchange, skippedProperties, method, entry)
        var logText interface{} = LogTemplate(exchange, method, entry)
        AssertGreater(exchange, skippedProperties, method, entry, "contracts", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "contractSize", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "price", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "baseValue", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "quoteValue", "0")
        var contracts interface{} = exchange.SafeString(entry, "contracts")
        var contractSize interface{} = exchange.SafeString(entry, "contractSize")
        var price interface{} = exchange.SafeString(entry, "price")
        var baseValue interface{} = exchange.SafeString(entry, "baseValue")
        if IsTrue(IsTrue(contracts) && IsTrue(contractSize)) {
            Assert(ccxt.Precise.StringEq(baseValue, ccxt.Precise.StringMul(contracts, contractSize)), Add("baseValue == contracts * contractSize", logText))
            if IsTrue(price) {
                Assert(ccxt.Precise.StringEq(baseValue, ccxt.Precise.StringMul(ccxt.Precise.StringMul(contracts, contractSize), price)), Add("quoteValue == contracts * contractSize * price", logText))
            }
        }
        // if singular was called, then symbol needs to be Asserted
        if IsTrue(IsTrue(IsEqual(method, "watchLiquidations")) || IsTrue(IsEqual(method, "fetchLiquidations"))) {
            AssertSymbol(exchange, skippedProperties, method, entry, "symbol", symbol)
        }
    }
