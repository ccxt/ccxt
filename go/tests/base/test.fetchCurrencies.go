package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchCurrencies(exchange ccxt.IExchange, skippedProperties interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "fetchCurrencies"
                // const isNative = exchange.has['fetchCurrencies'] && exchange.has['fetchCurrencies'] !== 'emulated';
            
                currencies:= (<-exchange.FetchCurrencies())
                PanicOnError(currencies)
                // todo: try to invent something to avoid undefined undefined, i.e. maybe move into private and force it to have a value
                var numInactiveCurrencies interface{} = 0
                // const maxInactiveCurrenciesPercentage = 60; // no more than X% currencies should be inactive
                // const requiredActiveCurrencies = [ 'BTC', 'ETH', 'USDT', 'USDC' ];
                if IsTrue(!IsEqual(currencies, nil)) {
                    var values interface{} = ObjectValues(currencies)
                    AssertNonEmtpyArray(exchange, skippedProperties, method, values)
                    var currenciesLength interface{} =         GetArrayLength(values)
                    // ensure exchange returns enough length of currencies
                    // Assert (currenciesLength > 5, exchange.Getid() + ' ' + method + ' must return at least several currencies, but it returned ' + currenciesLength.toString ());
                    // allow skipped exchanges
                    // const skipActive = ('active' in skippedProperties);
                    // loop
                    for i := 0; IsLessThan(i, currenciesLength); i++ {
                        var currency interface{} = GetValue(values, i)
                        TestCurrency(exchange, skippedProperties, method, currency)
                        // detailed check for deposit/withdraw
                        var active interface{} = exchange.SafeBool(currency, "active")
                        if IsTrue(IsEqual(active, false)) {
                            numInactiveCurrencies = Add(numInactiveCurrencies, 1)
                        }
                    }
                }
            
                ch <- true
                return nil
            
                }()
                return ch
            }
