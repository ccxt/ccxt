package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchOHLCV(exchange ccxt.IExchange, skippedProperties interface{}, symbol interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "fetchOHLCV"
                var timeframeKeys interface{} = ObjectKeys(exchange.GetTimeframes())
                Assert(GetArrayLength(timeframeKeys), Add(Add(Add(exchange.GetId(), " "), method), " - no timeframes found"))
                // prefer 1m timeframe if available, otherwise return the first one
                var chosenTimeframeKey interface{} = "1m"
                if !IsTrue(exchange.InArray(chosenTimeframeKey, timeframeKeys)) {
                    chosenTimeframeKey = GetValue(timeframeKeys, 0)
                }
                var limit interface{} = 10
                var duration interface{} = exchange.ParseTimeframe(chosenTimeframeKey)
                var since interface{} = Subtract(Subtract(exchange.Milliseconds(), Multiply(Multiply(duration, limit), 1000)), 1000)
            
                ohlcvs:= (<-exchange.FetchOHLCV(symbol, chosenTimeframeKey, since, limit))
                PanicOnError(ohlcvs)
                AssertNonEmtpyArray(exchange, skippedProperties, method, ohlcvs, symbol)
                var now interface{} = exchange.Milliseconds()
                for i := 0; IsLessThan(i, GetArrayLength(ohlcvs)); i++ {
                    TestOHLCV(exchange, skippedProperties, method, GetValue(ohlcvs, i), symbol, now)
                }
            
                    // todo: sorted timestamps check
            ch <- true
                return nil
            
                }()
                return ch
            }
