package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestTrade(exchange ccxt.IExchange, skippedProperties interface{}, method interface{}, entry interface{}, symbol interface{}, now interface{})  {
        var format interface{} = map[string]interface{} {
            "info": map[string]interface{} {},
            "id": "12345-67890:09876/54321",
            "timestamp": 1502962946216,
            "datetime": "2017-08-17 12:42:48.000",
            "symbol": "ETH/BTC",
            "order": "12345-67890:09876/54321",
            "side": "buy",
            "takerOrMaker": "taker",
            "price": exchange.ParseNumber("0.06917684"),
            "amount": exchange.ParseNumber("1.5"),
            "cost": exchange.ParseNumber("0.10376526"),
            "fees": []interface{}{},
            "fee": map[string]interface{} {},
        }
        // todo: add takeOrMaker as mandatory (atm, many exchanges fail)
        // removed side because some public endpoints return trades without side
        var emptyAllowedFor interface{} = []interface{}{"fees", "fee", "symbol", "order", "id", "takerOrMaker"}
        AssertStructure(exchange, skippedProperties, method, entry, format, emptyAllowedFor)
        AssertTimestampAndDatetime(exchange, skippedProperties, method, entry, now)
        AssertSymbol(exchange, skippedProperties, method, entry, "symbol", symbol)
        //
        AssertInArray(exchange, skippedProperties, method, entry, "side", []interface{}{"buy", "sell"})
        AssertInArray(exchange, skippedProperties, method, entry, "takerOrMaker", []interface{}{"taker", "maker"})
        AssertFeeStructure(exchange, skippedProperties, method, entry, "fee")
        if !IsTrue((InOp(skippedProperties, "fees"))) {
            // todo: remove undefined check and probably non-empty array check later
            if IsTrue(!IsEqual(GetValue(entry, "fees"), nil)) {
                for i := 0; IsLessThan(i, GetArrayLength(GetValue(entry, "fees"))); i++ {
                    AssertFeeStructure(exchange, skippedProperties, method, GetValue(entry, "fees"), i)
                }
            }
        }
    }
