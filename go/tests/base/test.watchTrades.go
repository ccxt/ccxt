package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestWatchTrades(exchange ccxt.ICoreExchange, skippedProperties interface{}, symbol interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "watchTrades"
                var now interface{} = exchange.Milliseconds()
                var ends interface{} = Add(now, 15000)
                for IsLessThan(now, ends) {
                    var response interface{} = nil
                    var success interface{} = true
                    
                        {
                             func() (ret_ interface{}) {
                    		    defer func() {
                                    if e := recover(); e != nil {
                                        if e == "break" {
                                            return
                                        }
                                        ret_ = func() interface{} {
                                            // catch block:
                                                        if !IsTrue(IsTemporaryFailure(e)) {
                                    panic(e)
                                }
                                now = exchange.Milliseconds()
                                // continue;
                                success = false
                                            return nil
                                        }()
                                    }
                                }()
                    		    // try block:
                                            
                        response = (UnWrapType(<-exchange.WatchTrades(symbol)))
                                    PanicOnError(response)
                    		    return nil
                    	    }()
                        
                            }
                    if IsTrue(IsEqual(success, true)) {
                        AssertNonEmtpyArray(exchange, skippedProperties, method, response)
                        now = exchange.Milliseconds()
                        for i := 0; IsLessThan(i, GetArrayLength(response)); i++ {
                            TestTrade(exchange, skippedProperties, method, GetValue(response, i), symbol, now)
                        }
                        if !IsTrue((InOp(skippedProperties, "timestampSort"))) {
                            AssertTimestampOrder(exchange, method, symbol, response)
                        }
                    }
                }
                    return nil
                }()
                return ch
            }
