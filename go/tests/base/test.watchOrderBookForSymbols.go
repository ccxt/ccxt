package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestWatchOrderBookForSymbols(exchange ccxt.ICoreExchange, skippedProperties interface{}, symbols interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "watchOrderBookForSymbols"
                var now interface{} = exchange.Milliseconds()
                var ends interface{} = Add(now, 15000)
                for IsLessThan(now, ends) {
                    var response interface{} = nil
                    var success interface{} = true
                    
                        {
                             func() (ret_ interface{}) {
                    		    defer func() {
                                    if e := recover(); e != nil {
                                        if e == "break" {
                                            return
                                        }
                                        ret_ = func() interface{} {
                                            // catch block:
                                                        // temporary fix for InvalidNonce for c#
                                if IsTrue(!IsTrue(IsTemporaryFailure(e)) && !IsTrue((IsInstance(e, InvalidNonce)))) {
                                    panic(e)
                                }
                                now = exchange.Milliseconds()
                                // continue;
                                success = false
                                            return nil
                                        }()
                                    }
                                }()
                    		    // try block:
                                            
                        response = (UnWrapType(<-exchange.WatchOrderBookForSymbols(symbols)))
                                    PanicOnError(response)
                    		    return nil
                    	    }()
                        
                            }
                    if IsTrue(IsEqual(success, true)) {
                        // [ response, skippedProperties ] = fixPhpObjectArray (exchange, response, skippedProperties);
                        Assert(IsObject(response), Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), method), " "), exchange.Json(symbols)), " must return an object. "), exchange.Json(response)))
                        now = exchange.Milliseconds()
                        AssertInArray(exchange, skippedProperties, method, response, "symbol", symbols)
                        TestOrderBook(exchange, skippedProperties, method, response, nil)
                    }
                }
            
                ch <- true
                return nil
            
                }()
                return ch
            }
