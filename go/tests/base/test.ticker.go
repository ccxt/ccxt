package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestTicker(exchange ccxt.IExchange, skippedProperties interface{}, method interface{}, entry interface{}, symbol interface{})  {
        var format interface{} = map[string]interface{} {
            "info": map[string]interface{} {},
            "symbol": "ETH/BTC",
            "timestamp": 1502962946216,
            "datetime": "2017-09-01T00:00:00",
            "high": exchange.ParseNumber("1.234"),
            "low": exchange.ParseNumber("1.234"),
            "bid": exchange.ParseNumber("1.234"),
            "bidVolume": exchange.ParseNumber("1.234"),
            "ask": exchange.ParseNumber("1.234"),
            "askVolume": exchange.ParseNumber("1.234"),
            "vwap": exchange.ParseNumber("1.234"),
            "open": exchange.ParseNumber("1.234"),
            "close": exchange.ParseNumber("1.234"),
            "last": exchange.ParseNumber("1.234"),
            "previousClose": exchange.ParseNumber("1.234"),
            "change": exchange.ParseNumber("1.234"),
            "percentage": exchange.ParseNumber("1.234"),
            "average": exchange.ParseNumber("1.234"),
            "baseVolume": exchange.ParseNumber("1.234"),
            "quoteVolume": exchange.ParseNumber("1.234"),
        }
        // todo: atm, many exchanges fail, so temporarily decrease stict mode
        var emptyAllowedFor interface{} = []interface{}{"timestamp", "datetime", "open", "high", "low", "close", "last", "baseVolume", "quoteVolume", "previousClose", "vwap", "change", "percentage", "average"}
        // trick csharp-transpiler for string
        if !IsTrue(Contains(ToString(method),"BidsAsks")) {
            AppendToArray(&emptyAllowedFor,"bid")
            AppendToArray(&emptyAllowedFor,"ask")
            AppendToArray(&emptyAllowedFor,"bidVolume")
            AppendToArray(&emptyAllowedFor,"askVolume")
        }
        AssertStructure(exchange, skippedProperties, method, entry, format, emptyAllowedFor)
        AssertTimestampAndDatetime(exchange, skippedProperties, method, entry)
        var logText interface{} = LogTemplate(exchange, method, entry)
        //
        AssertGreater(exchange, skippedProperties, method, entry, "open", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "high", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "low", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "close", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "ask", "0")
        AssertGreaterOrEqual(exchange, skippedProperties, method, entry, "askVolume", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "bid", "0")
        AssertGreaterOrEqual(exchange, skippedProperties, method, entry, "bidVolume", "0")
        AssertGreaterOrEqual(exchange, skippedProperties, method, entry, "vwap", "0")
        AssertGreater(exchange, skippedProperties, method, entry, "average", "0")
        AssertGreaterOrEqual(exchange, skippedProperties, method, entry, "baseVolume", "0")
        AssertGreaterOrEqual(exchange, skippedProperties, method, entry, "quoteVolume", "0")
        var lastString interface{} = exchange.SafeString(entry, "last")
        var closeString interface{} = exchange.SafeString(entry, "close")
        Assert(IsTrue((IsTrue((IsEqual(closeString, nil))) && IsTrue((IsEqual(lastString, nil))))) || IsTrue(ccxt.Precise.StringEq(lastString, closeString)), Add("`last` != `close`", logText))
        var baseVolume interface{} = exchange.SafeString(entry, "baseVolume")
        var quoteVolume interface{} = exchange.SafeString(entry, "quoteVolume")
        var high interface{} = exchange.SafeString(entry, "high")
        var low interface{} = exchange.SafeString(entry, "low")
        if IsTrue(!IsTrue((InOp(skippedProperties, "quoteVolume"))) && !IsTrue((InOp(skippedProperties, "baseVolume")))) {
            if IsTrue(IsTrue(IsTrue(IsTrue((!IsEqual(baseVolume, nil))) && IsTrue((!IsEqual(quoteVolume, nil)))) && IsTrue((!IsEqual(high, nil)))) && IsTrue((!IsEqual(low, nil)))) {
                Assert(ccxt.Precise.StringGe(quoteVolume, ccxt.Precise.StringMul(baseVolume, low)), Add("quoteVolume >= baseVolume * low", logText))
                Assert(ccxt.Precise.StringLe(quoteVolume, ccxt.Precise.StringMul(baseVolume, high)), Add("quoteVolume <= baseVolume * high", logText))
            }
        }
        var vwap interface{} = exchange.SafeString(entry, "vwap")
        if IsTrue(!IsEqual(vwap, nil)) {
            // todo
            // Assert (high !== undefined, 'vwap is defined, but high is not' + logText);
            // Assert (low !== undefined, 'vwap is defined, but low is not' + logText);
            // Assert (vwap >= low && vwap <= high)
            Assert(ccxt.Precise.StringGe(vwap, "0"), Add("vwap is not greater than zero", logText))
            if IsTrue(!IsEqual(baseVolume, nil)) {
                Assert(!IsEqual(quoteVolume, nil), Add("baseVolume & vwap is defined, but quoteVolume is not", logText))
            }
            if IsTrue(!IsEqual(quoteVolume, nil)) {
                Assert(!IsEqual(baseVolume, nil), Add("quoteVolume & vwap is defined, but baseVolume is not", logText))
            }
        }
        if IsTrue(IsTrue(!IsTrue((InOp(skippedProperties, "spread"))) && !IsTrue((InOp(skippedProperties, "ask")))) && !IsTrue((InOp(skippedProperties, "bid")))) {
            var askString interface{} = exchange.SafeString(entry, "ask")
            var bidString interface{} = exchange.SafeString(entry, "bid")
            if IsTrue(IsTrue((!IsEqual(askString, nil))) && IsTrue((!IsEqual(bidString, nil)))) {
                AssertGreater(exchange, skippedProperties, method, entry, "ask", exchange.SafeString(entry, "bid"))
            }
        }
        AssertSymbol(exchange, skippedProperties, method, entry, "symbol", symbol)
    }
