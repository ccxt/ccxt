package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func TestExtend()  {
    exchange := ccxt.NewExchange()
    var obj1 interface{} = map[string]interface{} {
        "a": 1,
        "b": []interface{}{1, 2},
        "c": []interface{}{map[string]interface{} {
    "test1": 1,
    "test2": 1,
}},
        "d": nil,
        "e": "not_undefined",
        "sub": map[string]interface{} {
            "a": 1,
            "b": []interface{}{1, 2},
            "c": []interface{}{map[string]interface{} {
    "test1": 1,
    "test2": 2,
}},
            "d": nil,
            "e": "not_undefined",
            "other1": "x",
        },
        "other1": "x",
    }
    var obj2 interface{} = map[string]interface{} {
        "a": 2,
        "b": []interface{}{3, 4},
        "c": []interface{}{map[string]interface{} {
    "test1": 2,
    "test3": 3,
}},
        "d": "not_undefined",
        "e": nil,
        "sub": map[string]interface{} {
            "a": 2,
            "b": []interface{}{3, 4},
            "c": []interface{}{map[string]interface{} {
    "test1": 2,
    "test3": 3,
}},
            "d": "not_undefined",
            "e": nil,
            "other2": "y",
        },
        "other2": "y",
    }
    // extend
    var extended interface{} = exchange.Extend(obj1, obj2)
    TbfeCheckExtended(extended, true)
}
func TbfeCheckExtended(extended interface{}, hasSub interface{})  {
    Assert(IsEqual(GetValue(extended, "a"), 2))
    Assert(IsEqual(GetValue(GetValue(extended, "b"), 0), 3))
    Assert(IsEqual(GetValue(GetValue(extended, "b"), 1), 4))
    Assert(IsEqual(GetValue(GetValue(GetValue(extended, "c"), 0), "test1"), 2))
    Assert(!IsTrue((InOp(GetValue(GetValue(extended, "c"), 0), "test2"))))
    Assert(IsEqual(GetValue(GetValue(GetValue(extended, "c"), 0), "test3"), 3))
    Assert(IsEqual(GetValue(extended, "d"), "not_undefined"))
    Assert(IsEqual(GetValue(extended, "e"), nil))
    Assert(IsEqual(GetValue(extended, "other1"), "x"))
    Assert(IsEqual(GetValue(extended, "other2"), "y"))
    if IsTrue(hasSub) {
        Assert(InOp(extended, "sub"))
    }
}