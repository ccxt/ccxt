package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestOrderBook(exchange ccxt.IExchange, skippedProperties interface{}, method interface{}, orderbook interface{}, symbol interface{})  {
        var format interface{} = map[string]interface{} {
            "symbol": "ETH/BTC",
            "asks": []interface{}{[]interface{}{exchange.ParseNumber("1.24"), exchange.ParseNumber("0.453")}, []interface{}{exchange.ParseNumber("1.25"), exchange.ParseNumber("0.157")}},
            "bids": []interface{}{[]interface{}{exchange.ParseNumber("1.23"), exchange.ParseNumber("0.123")}, []interface{}{exchange.ParseNumber("1.22"), exchange.ParseNumber("0.543")}},
            "timestamp": 1504224000000,
            "datetime": "2017-09-01T00:00:00",
            "nonce": 134234234,
        }
        var emptyAllowedFor interface{} = []interface{}{"nonce"}
        // turn into copy: https://discord.com/channels/690203284119617602/921046068555313202/1220626834887282728
        orderbook = exchange.DeepExtend(map[string]interface{} {}, orderbook)
        AssertStructure(exchange, skippedProperties, method, orderbook, format, emptyAllowedFor)
        AssertTimestampAndDatetime(exchange, skippedProperties, method, orderbook)
        AssertSymbol(exchange, skippedProperties, method, orderbook, "symbol", symbol)
        var logText interface{} = LogTemplate(exchange, method, orderbook)
        //
        if IsTrue(IsTrue((InOp(skippedProperties, "bid"))) || IsTrue((InOp(skippedProperties, "ask")))) {
            return
        }
        // todo: check non-emtpy arrays for bids/asks for toptier exchanges
        var bids interface{} = GetValue(orderbook, "bids")
        var bidsLength interface{} =     GetArrayLength(bids)
        for i := 0; IsLessThan(i, bidsLength); i++ {
            var currentBidString interface{} = exchange.SafeString(GetValue(bids, i), 0)
            if !IsTrue((InOp(skippedProperties, "compareToNextItem"))) {
                var nextI interface{} = Add(i, 1)
                if IsTrue(IsGreaterThan(bidsLength, nextI)) {
                    var nextBidString interface{} = exchange.SafeString(GetValue(bids, nextI), 0)
                    Assert(ccxt.Precise.StringGt(currentBidString, nextBidString), Add(Add(Add(Add("current bid should be > than the next one: ", currentBidString), ">"), nextBidString), logText))
                }
            }
            if !IsTrue((InOp(skippedProperties, "compareToZero"))) {
                // compare price & volume to zero
                AssertGreater(exchange, skippedProperties, method, GetValue(bids, i), 0, "0")
                AssertGreater(exchange, skippedProperties, method, GetValue(bids, i), 1, "0")
            }
        }
        var asks interface{} = GetValue(orderbook, "asks")
        var asksLength interface{} =     GetArrayLength(asks)
        for i := 0; IsLessThan(i, asksLength); i++ {
            var currentAskString interface{} = exchange.SafeString(GetValue(asks, i), 0)
            if !IsTrue((InOp(skippedProperties, "compareToNextItem"))) {
                var nextI interface{} = Add(i, 1)
                if IsTrue(IsGreaterThan(asksLength, nextI)) {
                    var nextAskString interface{} = exchange.SafeString(GetValue(asks, nextI), 0)
                    Assert(ccxt.Precise.StringLt(currentAskString, nextAskString), Add(Add(Add(Add("current ask should be < than the next one: ", currentAskString), "<"), nextAskString), logText))
                }
            }
            if !IsTrue((InOp(skippedProperties, "compareToZero"))) {
                // compare price & volume to zero
                AssertGreater(exchange, skippedProperties, method, GetValue(asks, i), 0, "0")
                AssertGreater(exchange, skippedProperties, method, GetValue(asks, i), 1, "0")
            }
        }
        if !IsTrue((InOp(skippedProperties, "spread"))) {
            if IsTrue(IsTrue(bidsLength) && IsTrue(asksLength)) {
                var firstBid interface{} = exchange.SafeString(GetValue(bids, 0), 0)
                var firstAsk interface{} = exchange.SafeString(GetValue(asks, 0), 0)
                // check bid-ask spread
                Assert(ccxt.Precise.StringLt(firstBid, firstAsk), Add(Add(Add(Add(Add("bids[0][0] (", firstBid), ") should be < than asks[0][0] ("), firstAsk), ")"), logText))
            }
        }
    }
