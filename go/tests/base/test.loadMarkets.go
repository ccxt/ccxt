package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestLoadMarkets(exchange ccxt.IExchange, skippedProperties interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "loadMarkets"
            
                markets:= (<-exchange.LoadMarkets())
                PanicOnError(markets)
                Assert(IsObject(exchange.GetMarkets()), ".markets is not an object")
                Assert(IsArray(exchange.GetSymbols()), ".symbols is not an array")
                var symbolsLength interface{} =     GetArrayLength(exchange.GetSymbols())
                var marketKeys interface{} = ObjectKeys(exchange.GetMarkets())
                var marketKeysLength interface{} =     GetArrayLength(marketKeys)
                Assert(IsGreaterThan(symbolsLength, 0), ".symbols count <= 0 (less than or equal to zero)")
                Assert(IsGreaterThan(marketKeysLength, 0), ".markets objects keys length <= 0 (less than or equal to zero)")
                Assert(IsEqual(symbolsLength, marketKeysLength), "number of .symbols is not equal to the number of .markets")
                var marketValues interface{} = ObjectValues(markets)
                for i := 0; IsLessThan(i, GetArrayLength(marketValues)); i++ {
                    TestMarket(exchange, skippedProperties, method, GetValue(marketValues, i))
                }
            
                ch <- true
                return nil
            
                }()
                return ch
            }
