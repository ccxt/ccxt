package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestBalance(exchange ccxt.IExchange, skippedProperties interface{}, method interface{}, entry interface{})  {
        var format interface{} = map[string]interface{} {
            "free": map[string]interface{} {},
            "used": map[string]interface{} {},
            "total": map[string]interface{} {},
            "info": map[string]interface{} {},
        }
        AssertStructure(exchange, skippedProperties, method, entry, format)
        var logText interface{} = LogTemplate(exchange, method, entry)
        //
        var codesTotal interface{} = ObjectKeys(GetValue(entry, "total"))
        var codesFree interface{} = ObjectKeys(GetValue(entry, "free"))
        var codesUsed interface{} = ObjectKeys(GetValue(entry, "used"))
        AssertNonEmtpyArray(exchange, skippedProperties, method, codesTotal, "total")
        AssertNonEmtpyArray(exchange, skippedProperties, method, codesFree, "free")
        AssertNonEmtpyArray(exchange, skippedProperties, method, codesUsed, "used")
        var allCodes interface{} = exchange.ArrayConcat(codesTotal, codesFree)
        allCodes = exchange.ArrayConcat(allCodes, codesUsed)
        var codesLength interface{} =     GetArrayLength(codesTotal)
        var freeLength interface{} =     GetArrayLength(codesFree)
        var usedLength interface{} =     GetArrayLength(codesUsed)
        Assert(IsTrue((IsEqual(codesLength, freeLength))) || IsTrue((IsEqual(codesLength, usedLength))), Add("free and total and used codes have different lengths", logText))
        for i := 0; IsLessThan(i, GetArrayLength(allCodes)); i++ {
            var code interface{} = GetValue(allCodes, i)
            // AssertCurrencyCode (exchange, skippedProperties, method, entry, code);
            Assert(InOp(GetValue(entry, "total"), code), Add(Add(Add("code ", code), " not in total"), logText))
            Assert(InOp(GetValue(entry, "free"), code), Add(Add(Add("code ", code), " not in free"), logText))
            Assert(InOp(GetValue(entry, "used"), code), Add(Add(Add("code ", code), " not in used"), logText))
            var total interface{} = exchange.SafeString(GetValue(entry, "total"), code)
            var free interface{} = exchange.SafeString(GetValue(entry, "free"), code)
            var used interface{} = exchange.SafeString(GetValue(entry, "used"), code)
            Assert(!IsEqual(total, nil), Add("total is undefined", logText))
            Assert(!IsEqual(free, nil), Add("free is undefined", logText))
            Assert(!IsEqual(used, nil), Add("used is undefined", logText))
            Assert(ccxt.Precise.StringGe(total, "0"), Add("total is not positive", logText))
            Assert(ccxt.Precise.StringGe(free, "0"), Add("free is not positive", logText))
            Assert(ccxt.Precise.StringGe(used, "0"), Add("used is not positive", logText))
            var sumFreeUsed interface{} = ccxt.Precise.StringAdd(free, used)
            Assert(ccxt.Precise.StringEq(total, sumFreeUsed), Add("free and used do not sum to total", logText))
        }
    }
