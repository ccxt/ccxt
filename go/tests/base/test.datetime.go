package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func TestDatetime()  {
    exchange := ccxt.NewExchange().(*ccxt.Exchange); exchange.DerivedExchange = exchange; exchange.InitParent(map[string]interface{} {
        "id": "regirock",
    }, map[string]interface{}{}, exchange)
    Assert(IsEqual(exchange.Iso8601(514862627000), "1986-04-26T01:23:47.000Z"))
    Assert(IsEqual(exchange.Iso8601(514862627559), "1986-04-26T01:23:47.559Z"))
    Assert(IsEqual(exchange.Iso8601(514862627062), "1986-04-26T01:23:47.062Z"))
    Assert(IsEqual(exchange.Iso8601(0), "1970-01-01T00:00:00.000Z"))
    Assert(IsEqual(exchange.Iso8601(OpNeg(1)), nil))
    // assert (exchange.iso8601 () === undefined);
    // todo: assert (exchange.iso8601 () === undefined);
    Assert(IsEqual(exchange.Iso8601(nil), nil))
    Assert(IsEqual(exchange.Iso8601(""), nil))
    Assert(IsEqual(exchange.Iso8601("a"), nil))
    Assert(IsEqual(exchange.Iso8601(map[string]interface{} {}), nil))
    // ----------------------------------------------------------------------------
    Assert(IsEqual(exchange.Parse8601("1986-04-26T01:23:47.000Z"), 514862627000))
    Assert(IsEqual(exchange.Parse8601("1986-04-26T01:23:47.559Z"), 514862627559))
    Assert(IsEqual(exchange.Parse8601("1986-04-26T01:23:47.062Z"), 514862627062))
    Assert(IsEqual(exchange.Parse8601("1986-04-26T01:23:47.06Z"), 514862627060))
    Assert(IsEqual(exchange.Parse8601("1986-04-26T01:23:47.6Z"), 514862627600))
    Assert(IsEqual(exchange.Parse8601("1977-13-13T00:00:00.000Z"), nil))
    Assert(IsEqual(exchange.Parse8601("1986-04-26T25:71:47.000Z"), nil))
    Assert(IsEqual(exchange.Parse8601("3333"), nil))
    Assert(IsEqual(exchange.Parse8601("Sr90"), nil))
    Assert(IsEqual(exchange.Parse8601(""), nil))
    // assert (exchange.parse8601 () === undefined);
    // todo: assert (exchange.parse8601 () === undefined);
    Assert(IsEqual(exchange.Parse8601(nil), nil))
    Assert(IsEqual(exchange.Parse8601(map[string]interface{} {}), nil))
    Assert(IsEqual(exchange.Parse8601(33), nil))
    // ----------------------------------------------------------------------------
    Assert(IsEqual(exchange.ParseDate("1986-04-26 00:00:00"), 514857600000))
    Assert(IsEqual(exchange.ParseDate("1986-04-26T01:23:47.000Z"), 514862627000))
    Assert(IsEqual(exchange.ParseDate("1986-13-13 00:00:00"), nil))
    // GMT formats (todo: bugs in php)
    // assert (exchange.parseDate ('Mon, 29 Apr 2024 14:00:17 GMT') === 1714399217000);
    // assert (exchange.parseDate ('Mon, 29 Apr 2024 14:09:17 GMT') === 1714399757000);
    // assert (exchange.parseDate ('Sun, 29 Dec 2024 01:01:10 GMT') === 1735434070000);
    // assert (exchange.parseDate ('Sun, 29 Dec 2024 02:11:10 GMT') === 1735438270000);
    // assert (exchange.parseDate ('Sun, 08 Dec 2024 02:03:04 GMT') === 1733623384000);
    Assert(IsEqual(exchange.RoundTimeframe("5m", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.Parse8601("2019-08-12 13:20:00")))
    Assert(IsEqual(exchange.RoundTimeframe("10m", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.Parse8601("2019-08-12 13:20:00")))
    Assert(IsEqual(exchange.RoundTimeframe("30m", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.Parse8601("2019-08-12 13:00:00")))
    Assert(IsEqual(exchange.RoundTimeframe("1d", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_DOWN), exchange.Parse8601("2019-08-12 00:00:00")))
    Assert(IsEqual(exchange.RoundTimeframe("5m", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.Parse8601("2019-08-12 13:25:00")))
    Assert(IsEqual(exchange.RoundTimeframe("10m", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.Parse8601("2019-08-12 13:30:00")))
    Assert(IsEqual(exchange.RoundTimeframe("30m", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.Parse8601("2019-08-12 13:30:00")))
    Assert(IsEqual(exchange.RoundTimeframe("1h", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.Parse8601("2019-08-12 14:00:00")))
    Assert(IsEqual(exchange.RoundTimeframe("1d", exchange.Parse8601("2019-08-12 13:22:08"), ROUND_UP), exchange.Parse8601("2019-08-13 00:00:00")))
}