package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func TestAfterConstructor()  {
    exchange := ccxt.NewExchange().(*ccxt.Exchange); exchange.InitParent(map[string]interface{} {
        "id": "sampleexchange",
        "rateLimit": 10.8,
    }, map[string]interface{}{}, exchange)
    // todo: assert (exchange.MAX_VALUE !== undefined);
    // ############# throttler ############# //
    var tockenBucket interface{} = exchange.GetProperty(exchange, "tokenBucket") // trick for uncamelcase transpilation
    var rateLimit interface{} = exchange.GetProperty(exchange, "rateLimit")
    Assert(IsEqual(rateLimit, 10.8))
    Assert(!IsEqual(tockenBucket, nil))
    Assert(IsEqual(GetValue(tockenBucket, "delay"), 0.001))
    Assert(IsEqual(GetValue(tockenBucket, "refillRate"), Divide(1, rateLimit)))
    // fix decimal/integer issues across langs
    Assert(exchange.InArray(GetValue(tockenBucket, "capacity"), []interface{}{1, 1}))
    Assert(exchange.InArray(GetValue(tockenBucket, "cost"), []interface{}{1, 1}))
    Assert(exchange.InArray(GetValue(tockenBucket, "maxCapacity"), []interface{}{1000, 1000}))
    // todo: assert (exchange.throttler !== undefined);
    // todo: add after change assertion
    // todo: add initial tockenbtucket test
    // ############# markets ############# //
    var sampleMarket interface{} = map[string]interface{} {
        "id": "BtcUsd",
        "symbol": "BTC/USD",
        "base": "BTC",
        "quote": "USD",
        "baseId": "Btc",
        "quoteId": "Usd",
        "type": "spot",
        "spot": true,
    }
    exchange2 := ccxt.NewExchange().(*ccxt.Exchange); exchange2.InitParent(map[string]interface{} {
        "id": "sampleexchange",
        "markets": map[string]interface{} {
            "BTC/USD": sampleMarket,
        },
    }, map[string]interface{}{}, exchange2)
    Assert(!IsEqual(GetValue(exchange2.Markets, "BTC/USD"), nil))
    
}