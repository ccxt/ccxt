package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func HelperTestInitThrottler()  {
    exchange := ccxt.NewExchange().(*ccxt.Exchange); exchange.DerivedExchange = exchange; exchange.InitParent(map[string]interface{} {
        "id": "sampleexchange",
        "rateLimit": 10.8,
    }, map[string]interface{}{}, exchange)
    // todo: assert (exchange.MAX_VALUE !== undefined);
    var tokenBucket interface{} = exchange.GetProperty(exchange, "tokenBucket") // trick for uncamelcase transpilation
    if IsTrue(IsEqual(tokenBucket, nil)) {
        tokenBucket = exchange.GetProperty(exchange, "TokenBucket")
    }
    Assert(!IsEqual(tokenBucket, nil))
    
    // fix decimal/integer issues across langs
    Assert(exchange.InArray(GetValue(tokenBucket, "capacity"), []interface{}{1, 1}))
    var cost interface{} = exchange.ParseToNumeric(exchange.SafeString2(tokenBucket, "cost", "defaultCost")) // python sync, todo fix
    Assert(exchange.InArray(cost, []interface{}{1, 1}))
    Assert(!IsTrue((InOp(tokenBucket, "maxCapacity"))) || IsTrue(exchange.InArray(GetValue(tokenBucket, "maxCapacity"), []interface{}{1000, 1000})))
}
func HelperTestSandboxState(exchange *ccxt.Exchange, optionalArgs ...interface{})  {
    shouldBeEnabled := GetArg(optionalArgs, 0, true)
    _ = shouldBeEnabled
    Assert(!IsEqual(exchange.Urls, nil))
    Assert(InOp(exchange.Urls, "test"))
    
}
func HelperTestInitSandbox()  {
    // todo: sandbox for real exchanges
    var opts map[string]interface{} = map[string]interface{} {
        "id": "sampleexchange",
        "options": map[string]interface{} {
            "sandbox": false,
        },
        "urls": map[string]interface{} {
            "api": map[string]interface{} {
                "public": "https://example.com",
            },
            "test": map[string]interface{} {
                "public": "https://example.org",
            },
        },
    }
    //
    // CASE A: when sandbox is not enabled
    //
    exchange3 := ccxt.NewExchange().(*ccxt.Exchange); exchange3.DerivedExchange = exchange3; exchange3.InitParent(opts, map[string]interface{}{}, exchange3)
    HelperTestSandboxState(exchange3, false)
    exchange3.SetSandboxMode(true)
    HelperTestSandboxState(exchange3, true)
    //
    // CASE B: when sandbox is enabled
    //
    AddElementToObject(GetValue(opts, "options"), "sandbox", true)
    exchange4 := ccxt.NewExchange().(*ccxt.Exchange); exchange4.DerivedExchange = exchange4; exchange4.InitParent(opts, map[string]interface{}{}, exchange4)
    HelperTestSandboxState(exchange4, true)
    exchange4.SetSandboxMode(false)
    HelperTestSandboxState(exchange4, false)
}
func HelperTestInitMarket()  {
    // ############# markets ############# //
    var sampleMarket map[string]interface{} = map[string]interface{} {
        "id": "BtcUsd",
        "symbol": "BTC/USD",
        "base": "BTC",
        "quote": "USD",
        "baseId": "Btc",
        "quoteId": "Usd",
        "type": "spot",
        "spot": true,
    }
    exchange2 := ccxt.NewExchange().(*ccxt.Exchange); exchange2.DerivedExchange = exchange2; exchange2.InitParent(map[string]interface{} {
        "id": "sampleexchange",
        "markets": map[string]interface{} {
            "BTC/USD": sampleMarket,
        },
    }, map[string]interface{}{}, exchange2)
    Assert(!IsEqual(GetValue(exchange2.Markets, "BTC/USD"), nil))
}
func TestAfterConstructor()  {
    HelperTestInitThrottler()
    HelperTestInitSandbox()
    HelperTestInitMarket()
}