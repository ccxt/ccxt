package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code


    func TestFetchLeverageTiers(exchange ccxt.IExchange, skippedProperties interface{}, symbol interface{}) <- chan interface{} {
                ch := make(chan interface{})
                go func() interface{} {
                    defer close(ch)
                    defer ReturnPanicError(ch)
                        var method interface{} = "fetchLeverageTiers"
            
                tiers:= (<-exchange.FetchLeverageTiers([]interface{}{"symbol"}))
                PanicOnError(tiers)
                // const format = {
                //     'RAY/USDT': [
                //       {},
                //     ],
                // };
                Assert(IsObject(tiers), Add(Add(Add(Add(Add(Add(exchange.GetId(), " "), method), " "), symbol), " must return an object. "), exchange.Json(tiers)))
                var tierKeys interface{} = ObjectKeys(tiers)
                AssertNonEmtpyArray(exchange, skippedProperties, method, tierKeys, symbol)
                for i := 0; IsLessThan(i, GetArrayLength(tierKeys)); i++ {
                    var tiersForSymbol interface{} = GetValue(tiers, GetValue(tierKeys, i))
                    AssertNonEmtpyArray(exchange, skippedProperties, method, tiersForSymbol, symbol)
                    for j := 0; IsLessThan(j, GetArrayLength(tiersForSymbol)); j++ {
                        TestLeverageTier(exchange, skippedProperties, method, GetValue(tiersForSymbol, j))
                    }
                }
            
                ch <- true
                return nil
            
                }()
                return ch
            }
