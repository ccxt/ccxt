package base
import "github.com/ccxt/ccxt/go/v4"

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

func PreciseEqualStr(exchange *ccxt.Exchange, result interface{}, key interface{}, expected interface{}) interface{}  {
    return ccxt.Precise.StringEq(exchange.SafeString(result, key), expected)
}
func TestSafeTicker()  {
    exchange := ccxt.NewExchange().(*ccxt.Exchange); exchange.DerivedExchange = exchange; exchange.InitParent(map[string]interface{} {
        "id": "sampleexchange",
    }, map[string]interface{}{}, exchange)
    // CASE 1 - by open
    var ticker1 map[string]interface{} = map[string]interface{} {
        "open": 5,
        "change": 1,
    }
    var result1 interface{} = exchange.SafeTicker(ticker1)
    Assert(PreciseEqualStr(exchange, result1, "percentage", "20.0"))
    Assert(PreciseEqualStr(exchange, result1, "average", "5.5"))
    Assert(PreciseEqualStr(exchange, result1, "close", "6.0"))
    Assert(PreciseEqualStr(exchange, result1, "last", "6.0"))
    // CASE 2 - by open
    var ticker2 map[string]interface{} = map[string]interface{} {
        "open": 5,
        "percentage": 20,
    }
    var result2 interface{} = exchange.SafeTicker(ticker2)
    Assert(PreciseEqualStr(exchange, result2, "change", "1.0"))
    Assert(PreciseEqualStr(exchange, result2, "average", "5.5"))
    Assert(PreciseEqualStr(exchange, result2, "close", "6.0"))
    Assert(PreciseEqualStr(exchange, result2, "last", "6.0"))
    // CASE 3 - by close
    var ticker3 map[string]interface{} = map[string]interface{} {
        "close": 6,
        "change": 1,
    }
    var result3 interface{} = exchange.SafeTicker(ticker3)
    Assert(PreciseEqualStr(exchange, result3, "open", "5.0"))
    Assert(PreciseEqualStr(exchange, result3, "percentage", "20.0"))
    Assert(PreciseEqualStr(exchange, result3, "average", "5.5"))
    Assert(PreciseEqualStr(exchange, result3, "last", "6.0"))
    // CASE 4 - by close
    var ticker4 map[string]interface{} = map[string]interface{} {
        "close": 6,
        "percentage": 20,
    }
    var result4 interface{} = exchange.SafeTicker(ticker4)
    Assert(PreciseEqualStr(exchange, result4, "open", "5.0"))
    Assert(PreciseEqualStr(exchange, result4, "change", "1.0"))
    Assert(PreciseEqualStr(exchange, result4, "average", "5.5"))
    Assert(PreciseEqualStr(exchange, result4, "last", "6.0"))
    // CASE 5 - by average
    var ticker5 map[string]interface{} = map[string]interface{} {
        "average": 5.5,
        "percentage": 20,
    }
    var result5 interface{} = exchange.SafeTicker(ticker5)
    Assert(PreciseEqualStr(exchange, result5, "open", "5.0"))
    Assert(PreciseEqualStr(exchange, result5, "change", "1.0"))
    Assert(PreciseEqualStr(exchange, result5, "close", "6.0"))
    Assert(PreciseEqualStr(exchange, result5, "last", "6.0"))
    // CASE 6
    var ticker6 map[string]interface{} = map[string]interface{} {
        "average": 5.5,
        "change": 1,
    }
    var result6 interface{} = exchange.SafeTicker(ticker6)
    Assert(PreciseEqualStr(exchange, result6, "open", "5.0"))
    Assert(PreciseEqualStr(exchange, result6, "percentage", "20.0"))
    Assert(PreciseEqualStr(exchange, result6, "close", "6.0"))
    Assert(PreciseEqualStr(exchange, result6, "last", "6.0"))
    // CASE 7 - by open and close
    var ticker7 map[string]interface{} = map[string]interface{} {
        "open": 5,
        "close": 6,
    }
    var result7 interface{} = exchange.SafeTicker(ticker7)
    Assert(PreciseEqualStr(exchange, result7, "change", "1.0"))
    Assert(PreciseEqualStr(exchange, result7, "percentage", "20.0"))
    Assert(PreciseEqualStr(exchange, result7, "average", "5.5"))
    Assert(PreciseEqualStr(exchange, result7, "last", "6.0"))
    // CASE 8 - full ticker
    var ticker8 map[string]interface{} = map[string]interface{} {
        "open": 5,
        "close": 6,
        "last": 6,
        "high": 6.5,
        "low": 4.5,
        "average": 5.5,
        "bid": 5.9,
        "bidVolume": 100,
        "ask": 6.1,
        "askVolume": 200,
        "change": 1,
        "percentage": 20,
        "vwap": 5.75,
        "baseVolume": 1000,
        "quoteVolume": 5750,
        "previousClose": 4.9,
        "indexPrice": 5.8,
        "markPrice": 5.9,
        "info": map[string]interface{} {},
    }
    var result8 interface{} = exchange.SafeTicker(ticker8)
    Assert(PreciseEqualStr(exchange, result8, "open", "5.0"))
    Assert(PreciseEqualStr(exchange, result8, "high", "6.5"))
    Assert(PreciseEqualStr(exchange, result8, "low", "4.5"))
    Assert(PreciseEqualStr(exchange, result8, "close", "6.0"))
    Assert(PreciseEqualStr(exchange, result8, "last", "6.0"))
    Assert(PreciseEqualStr(exchange, result8, "change", "1.0"))
    Assert(PreciseEqualStr(exchange, result8, "percentage", "20.0"))
    Assert(PreciseEqualStr(exchange, result8, "average", "5.5"))
    Assert(PreciseEqualStr(exchange, result8, "bid", "5.9"))
    Assert(PreciseEqualStr(exchange, result8, "bidVolume", "100.0"))
    Assert(PreciseEqualStr(exchange, result8, "ask", "6.1"))
    Assert(PreciseEqualStr(exchange, result8, "askVolume", "200.0"))
    Assert(PreciseEqualStr(exchange, result8, "vwap", "5.75"))
    Assert(PreciseEqualStr(exchange, result8, "baseVolume", "1000.0"))
    Assert(PreciseEqualStr(exchange, result8, "quoteVolume", "5750.0"))
    Assert(PreciseEqualStr(exchange, result8, "previousClose", "4.9"))
    Assert(PreciseEqualStr(exchange, result8, "indexPrice", "5.8"))
    Assert(PreciseEqualStr(exchange, result8, "markPrice", "5.9"))
    Assert(!IsEqual(GetValue(result8, "info"), nil))
}