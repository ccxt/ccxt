// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

//  ---------------------------------------------------------------------------
import Exchange from './abstract/websea.js';
import { ExchangeError, BadSymbol, NotSupported } from './base/errors.js';
import { TICK_SIZE } from './base/functions/number.js';
import { sha1 } from './static_dependencies/noble-hashes/sha1.js';
//  ---------------------------------------------------------------------------
/**
 * @class websea
 * @augments Exchange
 */
export default class websea extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'websea',
            'name': 'Websea',
            'countries': ['SG'],
            'rateLimit': 1000,
            'certified': false,
            'pro': false,
            'has': {
                'CORS': false,
                'spot': true,
                'margin': false,
                'swap': true,
                'future': false,
                'option': false,
                'cancelAllOrders': false,
                'cancelOrder': true,
                'createOrder': true,
                'createOrders': false,
                'createPostOnlyOrder': false,
                'createReduceOnlyOrder': true,
                'createStopLimitOrder': false,
                'createStopMarketOrder': false,
                'createStopOrder': false,
                'fetchAccounts': false,
                'fetchBalance': true,
                'fetchClosedOrders': true,
                'fetchCurrencies': true,
                'fetchDepositAddress': false,
                'fetchDepositAddresses': false,
                'fetchDepositAddressesByNetwork': false,
                'fetchDeposits': false,
                'fetchDepositsWithdrawals': false,
                'fetchDepositWithdrawFee': false,
                'fetchDepositWithdrawFees': false,
                'fetchFundingHistory': false,
                'fetchFundingRate': true,
                'fetchFundingRateHistory': false,
                'fetchFundingRates': false,
                'fetchGreeks': false,
                'fetchIndexOHLCV': false,
                'fetchLeverage': false,
                'fetchLeverages': false,
                'fetchLeverageTiers': false,
                'fetchMarginMode': false,
                'fetchMarginModes': false,
                'fetchMarketLeverageTiers': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMySettlementHistory': false,
                'fetchOHLCV': true,
                'fetchOpenInterest': false,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrders': true,
                'fetchOption': false,
                'fetchOptionChain': false,
                'fetchOrder': true,
                'fetchOrderBook': true,
                'fetchOrders': false,
                'fetchPosition': true,
                'fetchPositionMode': false,
                'fetchPositions': true,
                'fetchPositionsRisk': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchSettlementHistory': false,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': false,
                'fetchTrades': true,
                'fetchTradingFee': false,
                'fetchTradingFees': true,
                'fetchTransactionFee': false,
                'fetchTransactionFees': false,
                'fetchTransactions': false,
                'fetchTransfer': false,
                'fetchTransfers': false,
                'fetchVolatilityHistory': false,
                'fetchWithdrawal': false,
                'fetchWithdrawals': false,
                'reduceMargin': false,
                'sandbox': false,
                'setLeverage': true,
                'setMarginMode': false,
                'setPositionMode': false,
                'transfer': false,
            },
            'features': {
                'default': {
                    'sandbox': false,
                    'createOrder': {
                        'marginMode': false,
                        'triggerPrice': false,
                        'triggerPriceType': undefined,
                        'stopLossPrice': false,
                        'takeProfitPrice': false,
                        'attachedStopLossTakeProfit': undefined,
                        'timeInForce': {
                            'GTC': true,
                            'IOC': false,
                            'FOK': false,
                            'PO': false,
                            'GTD': false,
                        },
                        'hedged': false,
                        'trailing': false,
                        'leverage': false,
                        'marketBuyRequiresPrice': false,
                        'marketBuyByCost': false,
                        'selfTradePrevention': false,
                        'iceberg': false,
                    },
                    'createOrders': {
                        'max': 5,
                    },
                    'fetchMyTrades': {
                        'marginMode': false,
                        'daysBack': 0,
                        'limit': 0,
                        'untilDays': 0,
                        'symbolRequired': true,
                    },
                    'fetchOrder': {
                        'marginMode': false,
                        'trigger': false,
                        'trailing': false,
                        'symbolRequired': true,
                    },
                    'fetchOpenOrders': {
                        'marginMode': false,
                        'limit': 0,
                        'trigger': false,
                        'trailing': false,
                        'symbolRequired': true,
                    },
                    'fetchOrders': {
                        'marginMode': false,
                        'limit': 0,
                        'daysBack': 0,
                        'untilDays': 0,
                        'trigger': false,
                        'trailing': false,
                        'symbolRequired': true,
                    },
                    'fetchClosedOrders': {
                        'marginMode': false,
                        'limit': 0,
                        'daysBack': 0,
                        'daysBackCanceled': 0,
                        'untilDays': 0,
                        'trigger': false,
                        'trailing': false,
                        'symbolRequired': true,
                    },
                    'fetchOHLCV': {
                        'limit': 0,
                    },
                },
            },
            'timeframes': {
                '1m': '1',
                '5m': '5',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '4h': '240',
                '6h': '360',
                '12h': '720',
                '1d': '1d',
                '1w': '1w',
                '1M': '1M',
            },
            'version': 'v1',
            'urls': {
                'logo': 'https://webseaex.github.io/favicon.ico',
                'api': {
                    'rest': 'https://oapi.websea.com',
                },
                'test': {
                    'rest': 'https://oapi.websea.com',
                },
                'www': 'https://www.websea.com',
                'doc': [
                    'https://webseaex.github.io/en/',
                ],
                'fees': 'https://websea.com/fees',
                'referral': {
                    'url': 'https://www.websea.com',
                    'discount': 0,
                },
            },
            'api': {
                'public': {
                    'get': {
                        'openApi/market/symbols': 1,
                        'openApi/market/currencies': 1,
                        'openApi/market/trade': 1,
                        'openApi/market/depth': 1,
                        'openApi/market/orderbook': 1,
                        'openApi/market/kline': 1,
                        'openApi/market/24kline': 1,
                        'openApi/market/24kline-list': 1,
                        'openApi/market/precision': 1,
                        'openApi/futures/symbols': 1,
                        'openApi/futures/trade': 1,
                        'openApi/futures/depth': 1,
                        'openApi/futures/kline': 1, // 期货K线数据
                    },
                },
                'private': {
                    'get': {
                        'openApi/wallet/list': 1,
                        'openApi/entrust/historyList': 1, // 历史订单列表 - 已完成订单
                    },
                    'post': {
                        'openApi/entrust/add': 1,
                        'openApi/entrust/cancel': 1,
                        'openApi/entrust/orderDetail': 1,
                        'openApi/entrust/orderTrade': 1,
                        'openApi/entrust/historyDetail': 1,
                        'openApi/wallet/detail': 1,
                        'openApi/futures/entrust/add': 1,
                        'openApi/futures/entrust/cancel': 1,
                        'openApi/futures/entrust/orderList': 1,
                        'openApi/futures/entrust/orderDetail': 1,
                        'openApi/futures/position/list': 1,
                        'openApi/futures/position/detail': 1, // 期货持仓详情
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': this.parseNumber('0.002'),
                    'taker': this.parseNumber('0.002'),
                },
            },
            'precisionMode': TICK_SIZE,
            'exceptions': {
                'exact': {
                    '1001': BadSymbol,
                    '1002': ExchangeError,
                    '1003': ExchangeError,
                    '1004': ExchangeError, // 请求地址不存在
                },
                'broad': {
                    'symbol error': BadSymbol,
                    'base symbol error': BadSymbol,
                    'The request method is wrong': ExchangeError,
                    'The request address does not exist': ExchangeError,
                },
            },
            'commonCurrencies': {
            // 常见货币映射
            },
        });
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name websea#fetchMarkets
         * @description retrieves data on all markets for websea
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object[]} an array of objects representing market data
         */
        const response = await this.publicGetOpenApiMarketSymbols(params);
        //
        //     {
        //         "errno": 0,
        //         "errmsg": "success",
        //         "result": [
        //             {
        //                 "id": 1223,
        //                 "symbol": "BTC-USDT",
        //                 "base_currency": "BTC",
        //                 "quote_currency": "USDT",
        //                 "min_size": "0.0000001",
        //                 "max_size": "10000",
        //                 "min_price": "0.001",
        //                 "max_price": "1000",
        //                 "maker_fee": "0.002",
        //                 "taker_fee": "0.002"
        //             }
        //         ]
        //     }
        //
        const result = this.safeValue(response, 'result', []);
        return this.parseMarkets(result);
    }
    parseMarket(market) {
        //
        //     {
        //         "id": 1223,
        //         "symbol": "BTC-USDT",
        //         "base_currency": "BTC",
        //         "quote_currency": "USDT",
        //         "min_size": 0.0000001,
        //         "max_size": 10000,
        //         "min_price": 0.001,
        //         "max_price": 1000,
        //         "maker_fee": 0.002,
        //         "taker_fee": 0.002
        //     }
        //
        const marketId = this.safeString(market, 'symbol');
        const baseId = this.safeString(market, 'base_currency');
        const quoteId = this.safeString(market, 'quote_currency');
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        const minAmount = this.safeNumber(market, 'min_size');
        const maxAmount = this.safeNumber(market, 'max_size');
        const minPrice = this.safeNumber(market, 'min_price');
        const maxPrice = this.safeNumber(market, 'max_price');
        // 检测是否为永续合约市场
        const isSwap = marketId.indexOf('-PERP') >= 0 || marketId.indexOf('-SWAP') >= 0;
        const isSpot = !isSwap;
        // Convert market ID to unified symbol format
        const symbol = isSpot ? (base + '/' + quote) : (base + '/' + quote + ':' + quote);
        // Calculate precision from min values - derive tick sizes from the minimum values
        const minSizeString = this.safeString(market, 'min_size');
        const minPriceString = this.safeString(market, 'min_price');
        // For TICK_SIZE mode, we need to ensure precision values are proper tick sizes
        // Use the minimum values as tick sizes, but ensure they're not problematic integers
        let amountPrecision = this.parseNumber(minSizeString);
        let pricePrecision = this.parseNumber(minPriceString);
        // Ensure precision values are valid tick sizes (not integers like 5.0)
        // Convert problematic integer-like values to proper decimal tick sizes
        if (amountPrecision !== undefined && amountPrecision >= 1 && amountPrecision % 1 === 0) {
            amountPrecision = this.parseNumber('0.00000001'); // Default to 8 decimal places
        }
        if (pricePrecision !== undefined && pricePrecision >= 1 && pricePrecision % 1 === 0) {
            pricePrecision = this.parseNumber('0.0001'); // Default to 4 decimal places for price
        }
        // If precision values are still undefined, set safe defaults
        if (amountPrecision === undefined) {
            amountPrecision = this.parseNumber('0.00000001');
        }
        if (pricePrecision === undefined) {
            pricePrecision = this.parseNumber('0.0001');
        }
        return {
            'id': marketId,
            'symbol': symbol,
            'base': base,
            'quote': quote,
            'settle': isSwap ? quote : undefined,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': isSwap ? quoteId : undefined,
            'type': isSwap ? 'swap' : 'spot',
            'spot': isSpot,
            'margin': false,
            'swap': isSwap,
            'future': false,
            'option': false,
            'active': true,
            'contract': isSwap,
            'linear': isSwap ? true : undefined,
            'inverse': isSwap ? false : undefined,
            'contractSize': isSwap ? 1 : undefined,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'precision': {
                'amount': amountPrecision,
                'price': pricePrecision,
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': minAmount,
                    'max': maxAmount,
                },
                'price': {
                    'min': minPrice,
                    'max': maxPrice,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'created': undefined,
            'info': market,
        };
    }
    async fetchCurrencies(params = {}) {
        /**
         * @method
         * @name websea#fetchCurrencies
         * @description fetches all available currencies on an exchange
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} an associative dictionary of currencies
         */
        const response = await this.publicGetOpenApiMarketCurrencies(params);
        //
        //     {
        //         "errno": 0,
        //         "errmsg": "success",
        //         "result": {
        //             "BTC": {
        //                 "name": "Bitcoin",
        //                 "canWithdraw": true,
        //                 "canDeposit": true,
        //                 "minWithdraw": "0.001",
        //                 "maxWithdraw": "8",
        //                 "makerFee": "0.0016",
        //                 "takerFee": "0.0018"
        //             },
        //             ...
        //         }
        //     }
        //
        const result = this.safeValue(response, 'result', {});
        const currencies = {};
        const currencyCodes = Object.keys(result);
        for (let i = 0; i < currencyCodes.length; i++) {
            const code = currencyCodes[i];
            const currency = result[code];
            const parsed = this.parseCurrency(currency, code);
            currencies[code] = parsed;
        }
        return currencies;
    }
    parseCurrency(currency, code = undefined) {
        //
        //     {
        //         "name": "Bitcoin",
        //         "canWithdraw": true,
        //         "canDeposit": true,
        //         "minWithdraw": "0.001",
        //         "maxWithdraw": "8",
        //         "makerFee": "0.0016",
        //         "takerFee": "0.0018"
        //     }
        //
        const currencyCode = this.safeCurrencyCode(code);
        const name = this.safeString(currency, 'name');
        const canDeposit = this.safeBool(currency, 'canDeposit');
        const canWithdraw = this.safeBool(currency, 'canWithdraw');
        const active = canDeposit && canWithdraw;
        const minWithdraw = this.safeNumber(currency, 'minWithdraw');
        const maxWithdraw = this.safeNumber(currency, 'maxWithdraw');
        // For TICK_SIZE mode, use a proper tick size value
        const precision = this.parseNumber('0.00000001'); // 8 decimal places as a proper tick size
        return {
            'id': currencyCode,
            'code': currencyCode,
            'name': name,
            'type': 'crypto',
            'active': active,
            'deposit': canDeposit,
            'withdraw': canWithdraw,
            'fee': undefined,
            'precision': precision,
            'limits': {
                'amount': {
                    'min': undefined,
                    'max': undefined,
                },
                'deposit': {
                    'min': undefined,
                    'max': undefined,
                },
                'withdraw': {
                    'min': minWithdraw,
                    'max': maxWithdraw,
                },
            },
            'networks': {},
            'info': currency,
        };
    }
    async fetchOrderBook(symbol, limit = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchOrderBook
         * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @param {string} symbol unified symbol of the market to fetch the order book for
         * @param {int} [limit] the maximum amount of order book entries to return
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} A dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbols
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetOpenApiMarketDepth(this.extend(request, params));
        //
        // {
        //     "errno": 0,
        //     "errmsg": "success",
        //     "result": {
        //         "buyType": 1,
        //         "sellType": 1,
        //         "ts": 1760939021875,
        //         "symbol": "BTC-USDT",
        //         "asks": [["110725.6","0.2525"], ...],
        //         "bids": [["110725.5","1.9671"], ...]
        //     }
        // }
        //
        const result = this.safeValue(response, 'result', {});
        const timestamp = this.safeInteger(result, 'ts');
        // 处理订单簿数据，确保价格严格排序
        const rawBids = this.safeValue(result, 'bids', []);
        const rawAsks = this.safeValue(result, 'asks', []);
        // 聚合相同价格的订单
        const aggregatedBids = this.aggregateOrderBookSide(rawBids);
        const aggregatedAsks = this.aggregateOrderBookSide(rawAsks);
        // 创建新的订单簿对象，parseOrderBook会自动处理排序
        const orderBook = {
            'bids': aggregatedBids,
            'asks': aggregatedAsks,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'nonce': undefined,
        };
        return this.parseOrderBook(orderBook, market['symbol'], timestamp, 'bids', 'asks');
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name websea#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        const response = await this.publicGetOpenApiMarket24kline(this.extend(request, params));
        const result = this.safeValue(response, 'result', []);
        if (Array.isArray(result)) {
            for (let i = 0; i < result.length; i++) {
                const tickerData = result[i];
                const marketId = this.safeString(tickerData, 'symbol');
                if (marketId === market['id']) {
                    return this.parseTicker(tickerData, market);
                }
            }
            throw new BadSymbol(this.id + ' fetchTicker() symbol ' + symbol + ' not found');
        }
        else {
            // If result is not an array, it might be a single ticker object
            return this.parseTicker(result, market);
        }
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchTickers
         * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @param {string[]} [symbols] unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const response = await this.publicGetOpenApiMarket24kline(params);
        const result = this.safeValue(response, 'result', []);
        const tickers = [];
        for (let i = 0; i < result.length; i++) {
            const ticker = this.parseTicker(result[i]);
            tickers.push(ticker);
        }
        return this.filterByArray(tickers, 'symbol', symbols);
    }
    parseTicker(ticker, market = undefined) {
        //
        // Websea API响应格式:
        // {
        //     "symbol": "BTC-USDT",
        //     "data": {
        //         "id": 1760938769,
        //         "amount": "1289.933562236625251263",
        //         "count": 48117,
        //         "open": "106889.1",
        //         "close": "110752.1",
        //         "low": "106110.3",
        //         "high": "110812.8",
        //         "vol": "139704901.8914099999997562741"
        //     },
        //     "ask": "110752.3",
        //     "bid": "110752.0"
        // }
        //
        const marketId = this.safeString(ticker, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const data = this.safeValue(ticker, 'data', {});
        const last = this.safeNumber(data, 'close');
        const open = this.safeNumber(data, 'open');
        const change = (last !== undefined && open !== undefined) ? last - open : undefined;
        const percentage = (change !== undefined && open !== undefined && open !== 0) ? (change / open) * 100 : undefined;
        const baseVolume = this.safeNumber(data, 'amount');
        const quoteVolume = this.safeNumber(data, 'vol');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': undefined,
            'datetime': undefined,
            'high': this.safeNumber(data, 'high'),
            'low': this.safeNumber(data, 'low'),
            'bid': this.safeNumber(ticker, 'bid'),
            'bidVolume': undefined,
            'ask': this.safeNumber(ticker, 'ask'),
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': change,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    async fetchOHLCV(symbol, timeframe = '1m', since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchOHLCV
         * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
         * @param {string} symbol unified symbol of the market to fetch OHLCV data for
         * @param {string} timeframe the length of time each candle represents
         * @param {int} [since] timestamp in ms of the earliest candle to fetch
         * @param {int} [limit] the maximum amount of candles to fetch
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
            'period': this.safeString(this.timeframes, timeframe, timeframe),
        };
        if (since !== undefined) {
            request['since'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetOpenApiMarketKline(this.extend(request, params));
        //
        // 需要根据实际API响应结构调整
        //
        const result = this.safeValue(response, 'result', {});
        const ohlcvs = this.safeValue(result, 'data', []);
        return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    }
    parseOHLCV(ohlcv, market = undefined) {
        //
        // 需要根据实际API响应结构调整
        //
        return [
            this.safeInteger(ohlcv, 0),
            this.safeNumber(ohlcv, 1),
            this.safeNumber(ohlcv, 2),
            this.safeNumber(ohlcv, 3),
            this.safeNumber(ohlcv, 4),
            this.safeNumber(ohlcv, 5), // volume
        ];
    }
    async fetchTrades(symbol, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchTrades
         * @description get the list of most recent trades for a particular symbol
         * @param {string} symbol unified symbol of the market to fetch trades for
         * @param {int} [since] timestamp in ms of the earliest trade to fetch
         * @param {int} [limit] the maximum amount of trades to fetch
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {Trade[]} a list of [trade structures]{@link https://docs.ccxt.com/#/?id=public-trades}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['id'],
        };
        if (since !== undefined) {
            request['since'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.publicGetOpenApiMarketTrade(this.extend(request, params));
        //
        // {
        //     "errno": 0,
        //     "errmsg": "success",
        //     "result": {
        //         "symbol": "BTC-USDT",
        //         "ts": 1760939128378,
        //         "data": [
        //             {
        //                 "id": 1760939127130444,
        //                 "amount": "0.0003",
        //                 "price": "110798.6",
        //                 "vol": "33.23958",
        //                 "direction": "buy",
        //                 "ts": 1760939127
        //             }
        //         ]
        //     }
        // }
        //
        const result = this.safeValue(response, 'result', {});
        const trades = this.safeValue(result, 'data', []);
        return this.parseTrades(trades, market, since, limit);
    }
    parseTrade(trade, market = undefined) {
        //
        // {
        //     "id": 1760939127130444,
        //     "amount": "0.0003",
        //     "price": "110798.6",
        //     "vol": "33.23958",
        //     "direction": "buy",
        //     "ts": 1760939127
        // }
        //
        const marketId = this.safeString(trade, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const id = this.safeString(trade, 'id');
        const timestamp = this.safeTimestamp(trade, 'ts'); // Convert to milliseconds
        const side = this.safeString(trade, 'direction');
        const priceString = this.safeString(trade, 'price');
        const amountString = this.safeString(trade, 'amount');
        const costString = this.safeString(trade, 'vol');
        return this.safeTrade({
            'info': trade,
            'id': id,
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'order': undefined,
            'type': undefined,
            'side': side,
            'takerOrMaker': undefined,
            'price': priceString,
            'amount': amountString,
            'cost': costString,
            'fee': undefined,
        }, market);
    }
    async fetchBalance(params = {}) {
        /**
         * @method
         * @name websea#fetchBalance
         * @description query for balance and get the amount of funds available for trading or funds locked in orders
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a [balance structure]{@link https://docs.ccxt.com/#/?id=balance-structure}
         */
        await this.loadMarkets();
        const response = await this.privateGetOpenApiWalletList(params);
        //
        // Websea API响应格式示例:
        // {
        //     "errno": 0,
        //     "errmsg": "success",
        //     "result": [
        //         {
        //             "currency": "BTC",
        //             "available": "0.1",
        //             "frozen": "0.01",
        //             "total": "0.11"
        //         }
        //     ]
        // }
        //
        const result = this.safeValue(response, 'result', []);
        return this.parseBalance(result);
    }
    async fetchPositions(symbols = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchPositions
         * @description fetch all open positions
         * @param {string[]} [symbols] list of unified market symbols
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object[]} a list of [position structure]{@link https://docs.ccxt.com/#/?id=position-structure}
         */
        await this.loadMarkets();
        const response = await this.privatePostOpenApiFuturesPositionList(params);
        //
        // 需要根据实际API响应结构调整
        //
        const positions = this.safeValue(response, 'result', []);
        const result = [];
        for (let i = 0; i < positions.length; i++) {
            const position = this.parsePosition(positions[i]);
            result.push(position);
        }
        return this.filterByArray(result, 'symbol', symbols);
    }
    parsePosition(position, market = undefined) {
        //
        // 需要根据实际API响应结构调整
        //
        const marketId = this.safeString(position, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const side = this.safeString(position, 'side');
        const amount = this.safeNumber(position, 'amount');
        const entryPrice = this.safeNumber(position, 'entryPrice');
        const markPrice = this.safeNumber(position, 'markPrice');
        const liquidationPrice = this.safeNumber(position, 'liquidationPrice');
        const leverage = this.safeNumber(position, 'leverage');
        const unrealizedPnl = this.safeNumber(position, 'unrealizedPnl');
        const realizedPnl = this.safeNumber(position, 'realizedPnl');
        return {
            'info': position,
            'symbol': symbol,
            'timestamp': undefined,
            'datetime': undefined,
            'isolated': undefined,
            'leverage': leverage,
            'side': side,
            'contracts': amount,
            'contractSize': market['contractSize'],
            'entryPrice': entryPrice,
            'markPrice': markPrice,
            'notional': undefined,
            'liquidationPrice': liquidationPrice,
            'collateral': undefined,
            'initialMargin': undefined,
            'maintenanceMargin': undefined,
            'initialMarginPercentage': undefined,
            'maintenanceMarginPercentage': undefined,
            'marginRatio': undefined,
            'hedged': undefined,
            'percentage': undefined,
            'unrealizedPnl': unrealizedPnl,
            'realizedPnl': realizedPnl,
        };
    }
    async fetchFundingRate(symbol, params = {}) {
        /**
         * @method
         * @name websea#fetchFundingRate
         * @description fetch the current funding rate
         * @param {string} symbol unified market symbol
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a [funding rate structure]{@link https://docs.ccxt.com/#/?id=funding-rate-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        if (!market['swap']) {
            throw new BadSymbol(this.id + ' fetchFundingRate() supports swap contracts only');
        }
        // 需要根据实际API实现
        throw new NotSupported(this.id + ' fetchFundingRate() is not yet implemented');
    }
    parseBalance(response) {
        const result = {
            'info': response,
            'timestamp': undefined,
            'datetime': undefined,
        };
        for (let i = 0; i < response.length; i++) {
            const balance = response[i];
            const currencyId = this.safeString(balance, 'currency');
            const code = this.safeCurrencyCode(currencyId);
            const account = this.account();
            account['free'] = this.safeString(balance, 'available');
            account['used'] = this.safeString(balance, 'frozen');
            account['total'] = this.safeString(balance, 'total');
            result[code] = account;
        }
        return this.safeBalance(result);
    }
    aggregateOrderBookSide(orderBookSide) {
        /**
         * @method
         * @name websea#aggregateOrderBookSide
         * @description aggregates orders with the same price by summing their amounts
         * @param {any[]} orderBookSide array of [price, amount] tuples
         * @returns {any[]} aggregated order book side
         */
        const aggregated = {};
        for (let i = 0; i < orderBookSide.length; i++) {
            const order = orderBookSide[i];
            const price = this.safeNumber(order, 0);
            const amount = this.safeNumber(order, 1);
            if (price !== undefined && amount !== undefined) {
                const priceKey = price.toString();
                if (!(priceKey in aggregated)) {
                    aggregated[priceKey] = [price, amount];
                }
                else {
                    aggregated[priceKey][1] += amount;
                }
            }
        }
        return Object.values(aggregated);
    }
    async createOrder(symbol, type, side, amount, price = undefined, params = {}) {
        /**
         * @method
         * @name websea#createOrder
         * @description create a trade order
         * @param {string} symbol unified symbol of the market to create an order in
         * @param {string} type 'market' or 'limit'
         * @param {string} side 'buy' or 'sell'
         * @param {float} amount how much of currency you want to trade in units of base currency
         * @param {float} [price] the price at which the order is to be fulfilled, in units of the quote currency, ignored in market orders
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} an [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const orderType = (type === 'limit') ? side + '-limit' : side + '-market';
        const request = {
            'symbol': market['id'],
            'type': orderType,
            'amount': this.amountToPrecision(symbol, amount),
        };
        if (type === 'limit') {
            request['price'] = this.priceToPrecision(symbol, price);
        }
        const response = await this.privatePostOpenApiEntrustAdd(this.extend(request, params));
        //
        // 需要根据实际API响应结构调整
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result, market);
    }
    async cancelOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name websea#cancelOrder
         * @description cancels an open order
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {
            'order_id': id,
        };
        if (symbol !== undefined) {
            const market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        const response = await this.privatePostOpenApiEntrustCancel(this.extend(request, params));
        //
        // 需要根据实际API响应结构调整
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result);
    }
    async fetchOrder(id, symbol = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchOrder
         * @description fetches information on an order made by the user
         * @param {string} id order id
         * @param {string} symbol unified symbol of the market the order was made in
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} An [order structure]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {
            'order_id': id,
        };
        if (symbol !== undefined) {
            const market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        const response = await this.privatePostOpenApiEntrustOrderDetail(this.extend(request, params));
        //
        // 需要根据实际API响应结构调整
        //
        const result = this.safeValue(response, 'result', {});
        return this.parseOrder(result);
    }
    async fetchOpenOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchOpenOrders
         * @description fetch all unfilled currently open orders
         * @param {string} symbol unified market symbol
         * @param {int} [since] the earliest time in ms to fetch open orders for
         * @param {int} [limit] the maximum number of  open orders structures to retrieve
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {};
        if (symbol !== undefined) {
            const market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_time'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        // 注意：Websea API没有提供获取当前订单的端点
        // 只能获取历史订单，所以fetchOpenOrders暂时无法实现
        throw new NotSupported(this.id + ' fetchOpenOrders is not supported by the API');
    }
    async fetchClosedOrders(symbol = undefined, since = undefined, limit = undefined, params = {}) {
        /**
         * @method
         * @name websea#fetchClosedOrders
         * @description fetches information on multiple closed orders made by the user
         * @param {string} symbol unified market symbol of the market orders were made in
         * @param {int} [since] the earliest time in ms to fetch orders for
         * @param {int} [limit] the maximum number of order structures to retrieve
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {Order[]} a list of [order structures]{@link https://docs.ccxt.com/#/?id=order-structure}
         */
        await this.loadMarkets();
        const request = {};
        if (symbol !== undefined) {
            const market = this.market(symbol);
            request['symbol'] = market['id'];
        }
        if (since !== undefined) {
            request['start_time'] = since;
        }
        if (limit !== undefined) {
            request['limit'] = limit;
        }
        const response = await this.privateGetOpenApiEntrustHistoryList(this.extend(request, params));
        //
        // Websea API响应格式示例:
        // {
        //     "errno": 0,
        //     "errmsg": "success",
        //     "result": [
        //         {
        //             "order_id": "123456",
        //             "symbol": "BTC-USDT",
        //             "side": "buy",
        //             "type": "limit",
        //             "price": "50000",
        //             "amount": "0.1",
        //             "filled": "0.1",
        //             "remaining": "0",
        //             "status": "closed",
        //             "create_time": 1630000000000,
        //             "update_time": 1630000001000
        //         }
        //     ]
        // }
        //
        const result = this.safeValue(response, 'result', []);
        return this.parseOrders(result, undefined, since, limit);
    }
    parseOrder(order, market = undefined) {
        //
        // 需要根据实际API响应结构调整
        //
        const marketId = this.safeString(order, 'symbol');
        market = this.safeMarket(marketId, market);
        const symbol = market['symbol'];
        const id = this.safeString(order, 'order_id');
        const timestamp = this.safeInteger(order, 'create_time');
        const status = this.safeString(order, 'status');
        const side = this.safeString(order, 'side');
        const type = this.safeString(order, 'type');
        const price = this.safeNumber(order, 'price');
        const amount = this.safeNumber(order, 'amount');
        const filled = this.safeNumber(order, 'filled');
        const remaining = this.safeNumber(order, 'remaining');
        const cost = this.safeNumber(order, 'cost');
        const fee = undefined; // 需要根据实际API调整
        return this.safeOrder({
            'info': order,
            'id': id,
            'clientOrderId': undefined,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'lastTradeTimestamp': undefined,
            'symbol': symbol,
            'type': type,
            'timeInForce': undefined,
            'postOnly': undefined,
            'side': side,
            'price': price,
            'triggerPrice': undefined,
            'amount': amount,
            'cost': cost,
            'average': undefined,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee,
            'trades': undefined,
        }, market);
    }
    nonce() {
        return this.milliseconds();
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        let url = this.urls['api']['rest'];
        url += '/' + path;
        const query = this.omit(params, this.extractParams(path));
        if (api === 'private') {
            this.checkRequiredCredentials();
            // Websea API签名要求：timestamp_5random格式
            const timestamp = this.seconds().toString();
            const randomChars = this.uuid().slice(0, 5);
            const nonce = timestamp + '_' + randomChars;
            // 构建签名数组：Token + Secret + Nonce + 所有参数
            const signatureArray = [
                this.apiKey,
                this.secret,
                nonce,
            ];
            // 添加所有查询参数到签名数组（格式：key=value）
            const queryKeys = Object.keys(query);
            for (let i = 0; i < queryKeys.length; i++) {
                const key = queryKeys[i];
                const value = query[key].toString();
                signatureArray.push(key + '=' + value);
            }
            // 对数组进行排序
            signatureArray.sort();
            // 连接所有元素并计算SHA1签名
            const message = signatureArray.join('');
            const signature = this.hash(this.encode(message), sha1, 'hex');
            headers = {
                'Nonce': nonce,
                'Token': this.apiKey,
                'Signature': signature,
                'Content-Type': 'application/json',
            };
            if (method === 'GET') {
                if (Object.keys(query).length) {
                    const queryString = this.urlencode(query);
                    url += '?' + queryString;
                }
            }
            else {
                body = this.json(query);
                headers['Content-Length'] = this.stringToBase64(body).length.toString();
            }
        }
        else {
            // 公共API请求
            if (Object.keys(query).length) {
                const queryString = this.urlencode(query);
                url += '?' + queryString;
            }
        }
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
    handleErrors(code, reason, url, method, headers, body, response, requestHeaders, requestBody) {
        if (response === undefined) {
            return undefined;
        }
        const errorCode = this.safeString(response, 'errno');
        if (errorCode !== undefined && errorCode !== '0') {
            const errorMessage = this.safeString(response, 'errmsg', 'Unknown error');
            // 处理特定的Websea错误消息
            if (errorMessage.indexOf('symbol error') >= 0 || errorMessage.indexOf('base symbol error') >= 0) {
                throw new BadSymbol(this.id + ' ' + errorMessage);
            }
            if (errorMessage.indexOf('The request method is wrong') >= 0) {
                throw new ExchangeError(this.id + ' Invalid HTTP method for this endpoint. Please check the API documentation.');
            }
            if (errorMessage.indexOf('The request address does not exist') >= 0) {
                throw new ExchangeError(this.id + ' API endpoint not found. Please check the API documentation.');
            }
            this.throwExactlyMatchedException(this.exceptions['exact'], errorCode, errorMessage);
            this.throwBroadlyMatchedException(this.exceptions['broad'], errorMessage, errorMessage);
            throw new ExchangeError(this.id + ' ' + errorMessage);
        }
        return undefined;
    }
}
