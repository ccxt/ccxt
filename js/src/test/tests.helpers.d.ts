/// <reference types="node" />
import { Exchange } from '../../ccxt.js';
declare const AuthenticationError: typeof import("../base/errors.js").AuthenticationError;
declare const NotSupported: typeof import("../base/errors.js").NotSupported;
declare const ExchangeError: typeof import("../base/errors.js").ExchangeError;
declare const InvalidProxySettings: typeof import("../base/errors.js").InvalidProxySettings;
declare const ExchangeNotAvailable: typeof import("../base/errors.js").ExchangeNotAvailable;
declare const OperationFailed: typeof import("../base/errors.js").OperationFailed;
declare const OnMaintenance: typeof import("../base/errors.js").OnMaintenance;
declare const argvExchange: any;
declare const argvSymbol: any;
declare const argvMethod: any;
declare function getCliArgValue(arg: any): boolean;
declare class baseMainTestClass {
    lang: string;
    isSynchronous: boolean;
    idTests: boolean;
    requestTestsFailed: boolean;
    responseTestsFailed: boolean;
    requestTests: boolean;
    wsTests: boolean;
    responseTests: boolean;
    staticTests: boolean;
    info: boolean;
    verbose: boolean;
    debug: boolean;
    privateTest: boolean;
    privateTestOnly: boolean;
    loadKeys: boolean;
    sandbox: boolean;
    skippedSettingsForExchange: {};
    skippedMethods: {};
    checkedPublicTests: {};
    testFiles: {};
    publicTests: {};
    newLine: string;
    rootDir: string;
    rootDirForSkips: string;
    onlySpecificTests: any[];
    envVars: NodeJS.ProcessEnv;
    proxyTestFileName: string;
    ext: string;
}
declare function dump(...args: any[]): void;
declare function jsonParse(elem: any): any;
declare function jsonStringify(elem: any): string;
declare function convertAscii(input: any): any;
declare function ioFileExists(path: any): boolean;
declare function ioFileRead(path: any, decode?: boolean): any;
declare function ioDirRead(path: any): string[];
declare function callMethodSync(testFiles: any, methodName: any, exchange: any, skippedProperties: object, args: any): Promise<{}>;
declare function callMethod(testFiles: any, methodName: any, exchange: any, skippedProperties: object, args: any): Promise<any>;
declare function callExchangeMethodDynamically(exchange: Exchange, methodName: string, args: any): Promise<any>;
declare function callExchangeMethodDynamicallySync(exchange: Exchange, methodName: string, args: any): void;
declare function callOverridenMethod(exchange: any, methodName: any, args: any): Promise<any>;
declare function exceptionMessage(exc: any): string;
declare function getRootException(exc: any): any;
declare function exitScript(code?: number): void;
declare function getExchangeProp(exchange: any, prop: any, defaultValue?: any): any;
declare function setExchangeProp(exchange: any, prop: any, value: any): void;
declare function initExchange(exchangeId: any, args: any, isWs?: boolean): Exchange;
declare function getTestFilesSync(properties: any, ws?: boolean): {};
declare function getTestFiles(properties: any, ws?: boolean): Promise<{}>;
declare function setFetchResponse(exchange: Exchange, mockResponse: any): Exchange;
declare function isNullValue(value: any): boolean;
declare function close(exchange: Exchange): Promise<void>;
export { AuthenticationError, NotSupported, ExchangeError, InvalidProxySettings, ExchangeNotAvailable, OperationFailed, OnMaintenance, getCliArgValue, baseMainTestClass, dump, jsonParse, jsonStringify, convertAscii, ioFileExists, ioFileRead, ioDirRead, callMethod, callMethodSync, callExchangeMethodDynamically, callExchangeMethodDynamicallySync, callOverridenMethod, exceptionMessage, getRootException, exitScript, getExchangeProp, setExchangeProp, initExchange, getTestFiles, getTestFilesSync, setFetchResponse, isNullValue, close, argvExchange, argvSymbol, argvMethod, };
declare const _default: {};
export default _default;
