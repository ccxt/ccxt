import { Exchange } from "../../../../ccxt";
import { Str } from '../../../base/types';
declare function logTemplate(exchange: Exchange, method: string, entry: object): string;
declare function isTemporaryFailure(e: any): boolean;
declare function assertType(exchange: Exchange, skippedProperties: object, entry: object, key: string | number, format: object): boolean;
declare function assertStructure(exchange: Exchange, skippedProperties: object, method: string, entry: object, format: any[] | object, emptyAllowedFor?: any[]): void;
declare function assertTimestamp(exchange: Exchange, skippedProperties: object, method: string, entry: object, nowToCheck?: any, keyNameOrIndex?: string | number): void;
declare function assertTimestampAndDatetime(exchange: Exchange, skippedProperties: object, method: string, entry: object, nowToCheck?: any, keyNameOrIndex?: any): void;
declare function assertCurrencyCode(exchange: Exchange, skippedProperties: object, method: string, entry: object, actualCode: Str, expectedCode?: Str): void;
declare function assertValidCurrencyIdAndCode(exchange: Exchange, skippedProperties: object, method: string, entry: object, currencyId: any, currencyCode: any): void;
declare function assertSymbol(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, expectedSymbol?: Str): void;
declare function assertSymbolInMarkets(exchange: Exchange, skippedProperties: object, method: string, symbol: string): void;
declare function assertGreater(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, compareTo: string): void;
declare function assertGreaterOrEqual(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, compareTo: string): void;
declare function assertLess(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, compareTo: string): void;
declare function assertLessOrEqual(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, compareTo: string): void;
declare function assertEqual(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, compareTo: string): void;
declare function assertNonEqual(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, compareTo: string): void;
declare function assertInArray(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number, expectedArray: any[]): void;
declare function assertFeeStructure(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number): void;
declare function assertTimestampOrder(exchange: Exchange, method: string, codeOrSymbol: string, items: any[], ascending?: boolean): void;
declare function assertInteger(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number): void;
declare function checkPrecisionAccuracy(exchange: Exchange, skippedProperties: object, method: string, entry: object, key: string | number): void;
declare function removeProxyOptions(exchange: Exchange, skippedProperties: object): any[];
declare function setProxyOptions(exchange: Exchange, skippedProperties: object, proxyUrl: string, httpProxy: string, httpsProxy: string, socksProxy: string): void;
declare function assertNonEmtpyArray(exchange: Exchange, skippedProperties: object, method: string, entry: any[] | object, hint?: Str): void;
declare function assertRoundMinuteTimestamp(exchange: Exchange, skippedProperties: object, method: string, entry: any[] | object, key: string | number): void;
declare const _default: {
    logTemplate: typeof logTemplate;
    isTemporaryFailure: typeof isTemporaryFailure;
    assertTimestamp: typeof assertTimestamp;
    assertTimestampAndDatetime: typeof assertTimestampAndDatetime;
    assertStructure: typeof assertStructure;
    assertSymbol: typeof assertSymbol;
    assertSymbolInMarkets: typeof assertSymbolInMarkets;
    assertCurrencyCode: typeof assertCurrencyCode;
    assertInArray: typeof assertInArray;
    assertFeeStructure: typeof assertFeeStructure;
    assertTimestampOrder: typeof assertTimestampOrder;
    assertGreater: typeof assertGreater;
    assertGreaterOrEqual: typeof assertGreaterOrEqual;
    assertLess: typeof assertLess;
    assertLessOrEqual: typeof assertLessOrEqual;
    assertEqual: typeof assertEqual;
    assertNonEqual: typeof assertNonEqual;
    assertInteger: typeof assertInteger;
    checkPrecisionAccuracy: typeof checkPrecisionAccuracy;
    assertValidCurrencyIdAndCode: typeof assertValidCurrencyIdAndCode;
    assertType: typeof assertType;
    removeProxyOptions: typeof removeProxyOptions;
    setProxyOptions: typeof setProxyOptions;
    assertNonEmtpyArray: typeof assertNonEmtpyArray;
    assertRoundMinuteTimestamp: typeof assertRoundMinuteTimestamp;
};
export default _default;
