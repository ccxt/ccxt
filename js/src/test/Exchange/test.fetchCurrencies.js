// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

import testCurrency from './base/test.currency.js';
import testSharedMethods from './base/test.sharedMethods.js';
async function testFetchCurrencies(exchange, skippedProperties) {
    const method = 'fetchCurrencies';
    // const isNative = exchange.has['fetchCurrencies'] && exchange.has['fetchCurrencies'] !== 'emulated';
    const currencies = await exchange.fetchCurrencies();
    // todo: try to invent something to avoid undefined undefined, i.e. maybe move into private and force it to have a value
    let numInactiveCurrencies = 0;
    // const maxInactiveCurrenciesPercentage = 60; // no more than X% currencies should be inactive
    // const requiredActiveCurrencies = [ 'BTC', 'ETH', 'USDT', 'USDC' ];
    if (currencies !== undefined) {
        const values = Object.values(currencies);
        testSharedMethods.assertNonEmtpyArray(exchange, skippedProperties, method, values);
        const currenciesLength = values.length;
        // ensure exchange returns enough length of currencies
        // assert (currenciesLength > 5, exchange.id + ' ' + method + ' must return at least several currencies, but it returned ' + currenciesLength.toString ());
        // allow skipped exchanges
        // const skipActive = ('active' in skippedProperties);
        // loop
        for (let i = 0; i < currenciesLength; i++) {
            const currency = values[i];
            testCurrency(exchange, skippedProperties, method, currency);
            // detailed check for deposit/withdraw
            const active = exchange.safeBool(currency, 'active');
            if (active === false) {
                numInactiveCurrencies = numInactiveCurrencies + 1;
            }
            // ensure that major currencies are active and enabled for deposit and withdrawal
            // const code = exchange.safeString (currency, 'code', undefined);
            // const withdraw = exchange.safeBool (currency, 'withdraw');
            // const deposit = exchange.safeBool (currency, 'deposit');
            // if (exchange.inArray (code, requiredActiveCurrencies)) {
            //     assert (skipActive || (active === false) || (withdraw === false) || (deposit == false), 'Major currency ' + code + ' should have active, withdraw and deposit flags enabled');
            // }
        }
        // check at least X% of currencies are active
        // const inactiveCurrenciesPercentage = (numInactiveCurrencies / currenciesLength) * 100;
        // assert (skipActive || (inactiveCurrenciesPercentage < maxInactiveCurrenciesPercentage), 'Percentage of inactive currencies is too high at ' + inactiveCurrenciesPercentage.toString () + '% that is more than the allowed maximum of ' + maxInactiveCurrenciesPercentage.toString () + '%');
    }
    return true;
}
export default testFetchCurrencies;
