import bitmartRest from '../bitmart.js';
import type { Int, Market, Str, Strings, OrderBook, Order, Trade, Ticker, Tickers, OHLCV, Position, Balances } from '../base/types.js';
import Client from '../base/ws/Client.js';
export default class bitmart extends bitmartRest {
    describe(): any;
    subscribe(channel: any, symbol: any, type: any, params?: {}): Promise<any>;
    watchBalance(params?: {}): Promise<Balances>;
    setBalanceCache(client: Client, type: any, subscribeHash: any): void;
    loadBalanceSnapshot(client: any, messageHash: any, type: any): Promise<void>;
    handleBalance(client: Client, message: any): void;
    watchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    watchTicker(symbol: string, params?: {}): Promise<Ticker>;
    watchTickers(symbols?: Strings, params?: {}): Promise<Tickers>;
    watchOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    handleOrders(client: Client, message: any): void;
    parseWsOrder(order: any, market?: Market): Order;
    parseWsOrderStatus(statusId: any): string;
    parseWsOrderSide(sideId: any): string;
    watchPositions(symbols?: Strings, since?: Int, limit?: Int, params?: {}): Promise<Position[]>;
    handlePositions(client: Client, message: any): void;
    parseWsPosition(position: any, market?: Market): Position;
    handleTrade(client: Client, message: any): any;
    parseWsTrade(trade: any, market?: Market): Trade;
    handleTicker(client: Client, message: any): any;
    resolveMessageHashesForSymbol(client: any, symbol: any, result: any, prexif: any): void;
    parseWsSwapTicker(ticker: any, market?: Market): Ticker;
    watchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<OHLCV[]>;
    handleOHLCV(client: Client, message: any): void;
    watchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<OrderBook>;
    handleDelta(bookside: any, delta: any): void;
    handleDeltas(bookside: any, deltas: any): void;
    handleOrderBookMessage(client: Client, message: any, orderbook: any): any;
    handleOrderBook(client: Client, message: any): void;
    authenticate(type: any, params?: {}): Promise<any>;
    handleSubscriptionStatus(client: Client, message: any): any;
    handleAuthenticate(client: Client, message: any): void;
    handleErrorMessage(client: Client, message: any): boolean;
    handleMessage(client: Client, message: any): any;
}
