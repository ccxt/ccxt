import phemexRest from '../phemex.js';
import type { Int, Str, OrderBook, Order, Trade, Ticker, OHLCV, Balances, Dict } from '../base/types.js';
import Client from '../base/ws/Client.js';
export default class phemex extends phemexRest {
    describe(): any;
    fromEn(en: any, scale: any): string;
    fromEp(ep: any, market?: any): any;
    fromEv(ev: any, market?: any): any;
    fromEr(er: any, market?: any): any;
    requestId(): any;
    parseSwapTicker(ticker: any, market?: any): Dict;
    parsePerpetualTicker(ticker: any, market?: any): Dict;
    handleTicker(client: Client, message: any): void;
    watchBalance(params?: {}): Promise<Balances>;
    handleBalance(type: any, client: any, message: any): void;
    handleTrades(client: Client, message: any): void;
    handleOHLCV(client: Client, message: any): void;
    watchTicker(symbol: string, params?: {}): Promise<Ticker>;
    watchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    watchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<OrderBook>;
    watchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<OHLCV[]>;
    customHandleDelta(bookside: any, delta: any, market?: any): void;
    customHandleDeltas(bookside: any, deltas: any, market?: any): void;
    handleOrderBook(client: Client, message: any): void;
    watchMyTrades(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    handleMyTrades(client: Client, message: any): void;
    watchOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    handleOrders(client: Client, message: any): void;
    parseWSSwapOrder(order: any, market?: any): Order;
    handleMessage(client: Client, message: any): void;
    handleAuthenticate(client: Client, message: any): void;
    subscribePrivate(type: any, messageHash: any, params?: {}): Promise<any>;
    authenticate(params?: {}): Promise<any>;
}
