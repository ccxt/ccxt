import hitbtcRest from '../hitbtc.js';
import type { Tickers, Int, OHLCV, OrderSide, OrderType, Strings } from '../base/types.js';
import Client from '../base/ws/Client.js';
import { Str, OrderBook, Order, Trade, Ticker, Balances } from '../base/types';
export default class hitbtc extends hitbtcRest {
    describe(): any;
    authenticate(): Promise<any>;
    subscribePublic(name: string, symbols?: Strings, params?: {}): Promise<any>;
    subscribePrivate(name: string, symbol?: Str, params?: {}): Promise<any>;
    tradeRequest(name: string, params?: {}): Promise<any>;
    watchOrderBook(symbol: string, limit?: Int, params?: {}): Promise<OrderBook>;
    handleOrderBook(client: Client, message: any): void;
    handleDelta(bookside: any, delta: any): void;
    handleDeltas(bookside: any, deltas: any): void;
    watchTicker(symbol: string, params?: {}): Promise<Ticker>;
    watchTickers(symbols?: Strings, params?: {}): Promise<Tickers>;
    handleTicker(client: Client, message: any): any;
    parseWsTicker(ticker: any, market?: any): Ticker;
    watchTrades(symbol: string, since?: Int, limit?: Int, params?: {}): Promise<Trade[]>;
    handleTrades(client: Client, message: any): any;
    parseWsTrades(trades: any, market?: object, since?: Int, limit?: Int, params?: {}): Trade[];
    parseWsTrade(trade: any, market?: any): Trade;
    watchOHLCV(symbol: string, timeframe?: string, since?: Int, limit?: Int, params?: {}): Promise<OHLCV[]>;
    handleOHLCV(client: Client, message: any): any;
    parseWsOHLCV(ohlcv: any, market?: any): OHLCV;
    watchOrders(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    handleOrder(client: Client, message: any): any;
    handleOrderHelper(client: Client, message: any, order: any): void;
    parseWsOrderTrade(trade: any, market?: any): Trade;
    parseWsOrder(order: any, market?: any): Order;
    watchBalance(params?: {}): Promise<Balances>;
    createOrderWs(symbol: string, type: OrderType, side: OrderSide, amount: any, price?: any, params?: {}): Promise<Order>;
    cancelOrderWs(id: string, symbol?: Str, params?: {}): Promise<Order>;
    cancelAllOrdersWs(symbol?: Str, params?: {}): Promise<any>;
    fetchOpenOrdersWs(symbol?: Str, since?: Int, limit?: Int, params?: {}): Promise<Order[]>;
    handleBalance(client: Client, message: any): void;
    handleNotification(client: Client, message: any): any;
    handleOrderRequest(client: Client, message: any): any;
    handleMessage(client: Client, message: any): void;
    handleAuthenticate(client: Client, message: any): any;
    handleError(client: Client, message: any): any;
}
